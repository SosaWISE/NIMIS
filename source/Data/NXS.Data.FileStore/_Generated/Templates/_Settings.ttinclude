<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #>

<#+

		public IServiceProvider ServiceProvider
		{
			get
			{
				return (IServiceProvider)Host;
			}
		}



		string[] _includeProcedures;
		public string[] IncludeProcedures
		{
			get
			{
				SetList(ref _includeProcedures, IncludeProcedureList);
				return _includeProcedures;
			}
		}
		string[] _excludeProcedures;
		public string[] ExcludeProcedures
		{
			get
			{
				SetList(ref _excludeProcedures, ExcludeProcedureList);
				return _excludeProcedures;
			}
		}

		string[] _includeTables;
		public string[] IncludeTables
		{
			get
			{
				SetList(ref _includeTables, IncludeTableList);
				return _includeTables;
			}
		}
		string[] _excludeTables;
		public string[] ExcludeTables
		{
			get
			{
				SetList(ref _excludeTables, ExcludeTableList);
				return _excludeTables;
			}
		}

		Dictionary<string,string> _enumTables;
		public Dictionary<string, string> EnumTables
		{
			get
			{
				if (_enumTables == null) {
					_enumTables = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase);

					string[] list = null;
					SetList(ref list, EnumTableList);

					foreach (string g in list) {
						_enumTables.Add(g, null);
					}
				}
				return _enumTables;
			}
		}

		private static void SetList(ref string[] ray, string textList)
		{
			if (ray == null) {
				if (!string.IsNullOrEmpty(textList)) {
					ray = textList.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
				}
				else {
					ray = new string[0];
				}
			}
		}

		string CheckNullable(Column col)
		{
			string result = "";
			if (col.IsNullable && col.SysType != "byte[]" && col.SysType != "string")
				result = "?";
			return result;
		}
		string GetConnectionString(string connectionStringName)
		{
			string result = "";
			ExeConfigurationFileMap configFile = new ExeConfigurationFileMap();
			configFile.ExeConfigFilename = GetConfigPath();

			if (string.IsNullOrEmpty(configFile.ExeConfigFilename))
				throw new ArgumentNullException("The project does not contain App.config or Web.config file.");


			var config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);
			var connSection = config.ConnectionStrings;

			//if the connectionString is empty - which is the defauls
			//look for count-1 - this is the last connection string
			//and takes into account AppServices and LocalSqlServer
			if (string.IsNullOrEmpty(connectionStringName)) {
				if (connSection.ConnectionStrings.Count > 1) {
					result = connSection.ConnectionStrings[connSection.ConnectionStrings.Count - 1].ConnectionString;
				}
			}
			else {
				try {
					result = connSection.ConnectionStrings[connectionStringName].ConnectionString;
				}
				catch {
					result = "There is no connection string name called '" + connectionStringName + "'";
				}
			}

			return result;
		}

		string _connectionString = "";
		public string ConnectionString
		{
			get
			{
				if (String.IsNullOrEmpty(_connectionString)) {

					_connectionString = GetConnectionString(ConnectionStringName);

				}

				if (_connectionString.Contains("|DataDirectory|")) {

					//have to replace it
					string dataFilePath = GetDataDirectory();
					_connectionString = _connectionString.Replace("|DataDirectory|", dataFilePath);
				}

				return _connectionString;
			}
		}

		public EnvDTE.Project GetCurrentProject()
		{
			IServiceProvider _ServiceProvider = ServiceProvider;
			if (_ServiceProvider == null)
				throw new Exception("Host property returned unexpected value (null)");

			EnvDTE.DTE dte = (EnvDTE.DTE)_ServiceProvider.GetService(typeof(EnvDTE.DTE));
			if (dte == null)
				throw new Exception("Unable to retrieve EnvDTE.DTE");

			Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
			if (activeSolutionProjects == null)
				throw new Exception("DTE.ActiveSolutionProjects returned null");

			EnvDTE.Project dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
			if (dteProject == null)
				throw new Exception("DTE.ActiveSolutionProjects[0] returned null");

			return dteProject;

		}

		private string GetProjectPath()
		{
			if (ServiceProvider == null) {
				DirectoryInfo dir = new DirectoryInfo(Environment.CurrentDirectory);
				return dir.Parent.Parent.FullName;
			}
			else {
				EnvDTE.Project project = GetCurrentProject();
				System.IO.FileInfo info = new System.IO.FileInfo(project.FullName);
				return info.Directory.FullName;
			}
		}

		private string GetConfigPath()
		{
			if (ServiceProvider == null) {
				return Path.Combine(GetProjectPath(), "App.config");
			}
			else {
				EnvDTE.Project project = GetCurrentProject();
				foreach (EnvDTE.ProjectItem item in project.ProjectItems) {
					// if it is the app.config file, then open it up
					if (item.Name.Equals("App.config", StringComparison.InvariantCultureIgnoreCase) || item.Name.Equals("Web.config", StringComparison.InvariantCultureIgnoreCase))
						return Path.Combine(GetProjectPath(), item.Name);
				}
				return String.Empty;
			}
		}

		public string GetDataDirectory()
		{
			if (ServiceProvider == null) {
				throw new Exception("You're still an idiot");
			}
			else {
				EnvDTE.Project project = GetCurrentProject();
				return System.IO.Path.GetDirectoryName(project.FileName) + "\\App_Data\\";
			}
		}

		public class EnumTable
		{
			public string IDName;
			public string EnumName;
			public string BaseClassName;
			public Dictionary<string, int> Values;
		}

		public class Table
		{
			public List<Column> Columns;
			public List<FKTable> FKTables;
			public List<FKTable> SingleFKTables;
			public List<FKTable> QueryableFKTables;
			public string Name;
			public string CleanName;
			public string ClassName;
			public string PrimaryKey;
			public string Schema;
			public string QueryableName;
			public EnumTable Enum;

			public bool HasLogicalDelete()
			{
				return this.Columns.Any(x => x.Name.ToLower() == "deleted" || x.Name.ToLower() == "isdeleted");
			}
			public Column DeleteColumn
			{
				get
				{
					Column result = null;
					if (this.Columns.Any(x => x.Name.ToLower() == "deleted"))
						result = this.Columns.Single(x => x.Name.ToLower() == "deleted");
					if (this.Columns.Any(x => x.Name.ToLower() == "isdeleted"))
						result = this.Columns.Single(x => x.Name.ToLower() == "isdeleted");
					return result;
				}
			}
			public Column PK
			{
				get
				{
					return this.Columns.SingleOrDefault(x => x.IsPK) ?? this.Columns[0];
				}
			}
			public Column Descriptor
			{
				get
				{
					Column result = null;
					if (this.Columns.Count > 0) {

						if ((this.Columns.Count > 1) && (this.Columns[1].SysType.ToLower().Trim() == "string")) {

							//use second column if it's text
							result = this.Columns[1];
						}
						else {

							//else use ID, which should be the first column
							result = this.Columns[0];
						}
					}
					return result;
				}
			}
		}

		public class Column
		{
			public string Name;
			public string CleanName;
			public string SysType;
			public string DataType;
			public DbType DbType;
			public bool AutoIncrement;
			public bool IsPK;
			public int MaxLength;
			public bool IsNullable;
			public bool IsForeignKey;
			public bool IsComputed;
			public string ColumnAttributeText;

			public bool IsReadOnly;
			public string DefaultSetting;
			public string ForeignKeyTableName;
		}
		public class FKTable
		{
			public string ThisTable;
			public string ThisColumn;
			public string OtherTable;
			public string OtherColumn;
			public string OtherClass;
			public string OtherQueryable;
			public string PropName;
			public string ConstraintName;
		}

		public class SP
		{
			public string Name;
			public string CleanName;
			public string ClassName;
			public List<SPParam> Parameters;
			public SP()
			{
				Parameters = new List<SPParam>();
			}
			public string ArgList
			{
				get
				{
					StringBuilder sb = new StringBuilder();
					int loopCount = 1;
					foreach (var par in Parameters) {
						sb.AppendFormat("{0} {1}", par.SysType, par.CleanName);
						if (loopCount < Parameters.Count)
							sb.Append(",");
						loopCount++;
					}
					return sb.ToString();
				}
			}
		}
		public class SPParam
		{
			public string Name;
			public string CleanName;
			public string SysType;
			public string DbType;
			public ParameterDirection Mode;
			public int Precision;
			public int Scale;
		}

		public Column GetMatchingColumn(Table tbl, params string[] columns)
		{
			Column result = null;
			foreach (string columnName in columns) {
				result = tbl.Columns.SingleOrDefault(x => String.Equals(x.Name, columnName, StringComparison.InvariantCultureIgnoreCase));
				if (result != null) {
					break;
				}
			}
			return result;
		}


		public bool ShouldGenerateTable(string tableName)
		{
			return ShouldGenerate(tableName, IncludeTables, ExcludeTables);
		}
		public bool ShouldGenerateSproc(string tableName)
		{
			return ShouldGenerate(tableName, IncludeProcedures, ExcludeProcedures);
		}
		public static bool ShouldGenerate(string objectName, string[] includeList, string[] excludeList)
		{
			bool result = true;
			bool generateAll = false;

			// first, check to see if the includeList says to include all tables
			// this is the default
			if (includeList.Length == 1) {
				if (includeList[0] == "*")
					generateAll = true;
			}

			// if we need to generate all tables, then we need to check the excludeList
			if (generateAll) {
				foreach (string s in excludeList) {
					if (Utility.IsRegexMatch(objectName, s.Trim())) {
						result = false;
						break;
					}
				}
			}
			else {
				// IncludeList TRUMPs excludeList
				//	in case of confusion what this means is that if there is an includeList,
				//	be definition there's an excludeList of all tables not included
				// yep, confusing.

				// this means that tables were specifically requested in the includeList
				// need to make them prove themselves
				result = false;

				foreach (string s in includeList) {
					if (Utility.IsRegexMatch(objectName, s.Trim())) {
						result = true;
						break;
					}
				}
			}

			return result;
		}

		public string TransformName(string name)
		{
			if (String.IsNullOrEmpty(name))
				return String.Empty;

			string newName = name;
			newName = Utility.RegexTransform(newName, RegexIgnoreCase, RegexMatchExpression, RegexDictionaryReplace, RegexReplaceExpression);
			newName = Utility.StripText(newName, StripText);
			//newName = Inflector.ToPascalCase(newName, false);
			newName = Utility.IsStringNumeric(newName) ? "_" + newName : newName;
			newName = Utility.StripNonAlphaNumeric(newName);
			newName = newName.Trim();
			newName = Utility.KeyWordCheck(newName, String.Empty);
			return newName;
		}


		#region Inflector

		/// <summary>
		/// Summary for the Inflector class
		/// </summary>
		public static class Inflector
		{
			private static readonly List<InflectorRule> _plurals = new List<InflectorRule>();
			private static readonly List<InflectorRule> _singulars = new List<InflectorRule>();
			private static readonly List<string> _uncountables = new List<string>();

			/// <summary>
			/// Initializes the <see cref="Inflector"/> class.
			/// </summary>
			static Inflector()
			{
				AddPluralRule("$", "s");
				AddPluralRule("s$", "s");
				AddPluralRule("(ax|test)is$", "$1es");
				AddPluralRule("(octop|vir)us$", "$1i");
				AddPluralRule("(alias|status)$", "$1es");
				AddPluralRule("(bu)s$", "$1ses");
				AddPluralRule("(buffal|tomat)o$", "$1oes");
				AddPluralRule("([ti])um$", "$1a");
				AddPluralRule("sis$", "ses");
				AddPluralRule("(?:([^f])fe|([lr])f)$", "$1$2ves");
				AddPluralRule("(hive)$", "$1s");
				AddPluralRule("([^aeiouy]|qu)y$", "$1ies");
				AddPluralRule("(x|ch|ss|sh)$", "$1es");
				AddPluralRule("(matr|vert|ind)ix|ex$", "$1ices");
				AddPluralRule("([m|l])ouse$", "$1ice");
				AddPluralRule("^(ox)$", "$1en");
				AddPluralRule("(quiz)$", "$1zes");

				AddSingularRule("s$", String.Empty);
				AddSingularRule("ss$", "ss");
				AddSingularRule("(n)ews$", "$1ews");
				AddSingularRule("([ti])a$", "$1um");
				AddSingularRule("((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$", "$1$2sis");
				AddSingularRule("(^analy)ses$", "$1sis");
				AddSingularRule("([^f])ves$", "$1fe");
				AddSingularRule("(hive)s$", "$1");
				AddSingularRule("(tive)s$", "$1");
				AddSingularRule("([lr])ves$", "$1f");
				AddSingularRule("([^aeiouy]|qu)ies$", "$1y");
				AddSingularRule("(s)eries$", "$1eries");
				AddSingularRule("(m)ovies$", "$1ovie");
				AddSingularRule("(x|ch|ss|sh)es$", "$1");
				AddSingularRule("([m|l])ice$", "$1ouse");
				AddSingularRule("(bus)es$", "$1");
				AddSingularRule("(o)es$", "$1");
				AddSingularRule("(shoe)s$", "$1");
				AddSingularRule("(cris|ax|test)es$", "$1is");
				AddSingularRule("(octop|vir)i$", "$1us");
				AddSingularRule("(alias|status)$", "$1");
				AddSingularRule("(alias|status)es$", "$1");
				AddSingularRule("^(ox)en", "$1");
				AddSingularRule("(vert|ind)ices$", "$1ex");
				AddSingularRule("(matr)ices$", "$1ix");
				AddSingularRule("(quiz)zes$", "$1");

				AddIrregularRule("person", "people");
				AddIrregularRule("man", "men");
				AddIrregularRule("child", "children");
				AddIrregularRule("sex", "sexes");
				AddIrregularRule("tax", "taxes");
				AddIrregularRule("move", "moves");

				AddUnknownCountRule("equipment");
				AddUnknownCountRule("information");
				AddUnknownCountRule("rice");
				AddUnknownCountRule("money");
				AddUnknownCountRule("species");
				AddUnknownCountRule("series");
				AddUnknownCountRule("fish");
				AddUnknownCountRule("sheep");
			}

			/// <summary>
			/// Adds the irregular rule.
			/// </summary>
			/// <param name="singular">The singular.</param>
			/// <param name="plural">The plural.</param>
			private static void AddIrregularRule(string singular, string plural)
			{
				AddPluralRule(String.Concat("(", singular[0], ")", singular.Substring(1), "$"), String.Concat("$1", plural.Substring(1)));
				AddSingularRule(String.Concat("(", plural[0], ")", plural.Substring(1), "$"), String.Concat("$1", singular.Substring(1)));
			}

			/// <summary>
			/// Adds the unknown count rule.
			/// </summary>
			/// <param name="word">The word.</param>
			private static void AddUnknownCountRule(string word)
			{
				_uncountables.Add(word.ToLower());
			}

			/// <summary>
			/// Adds the plural rule.
			/// </summary>
			/// <param name="rule">The rule.</param>
			/// <param name="replacement">The replacement.</param>
			private static void AddPluralRule(string rule, string replacement)
			{
				_plurals.Add(new InflectorRule(rule, replacement));
			}

			/// <summary>
			/// Adds the singular rule.
			/// </summary>
			/// <param name="rule">The rule.</param>
			/// <param name="replacement">The replacement.</param>
			private static void AddSingularRule(string rule, string replacement)
			{
				_singulars.Add(new InflectorRule(rule, replacement));
			}

			/// <summary>
			/// Makes the plural.
			/// </summary>
			/// <param name="word">The word.</param>
			/// <returns></returns>
			public static string MakePlural(string word)
			{
				return ApplyRules(_plurals, word);
			}

			/// <summary>
			/// Makes the singular.
			/// </summary>
			/// <param name="word">The word.</param>
			/// <returns></returns>
			public static string MakeSingular(string word)
			{
				return ApplyRules(_singulars, word);
			}

			/// <summary>
			/// Applies the rules.
			/// </summary>
			/// <param name="rules">The rules.</param>
			/// <param name="word">The word.</param>
			/// <returns></returns>
			private static string ApplyRules(IList<InflectorRule> rules, string word)
			{
				string result = word;
				if (!_uncountables.Contains(word.ToLower())) {
					for (int i = rules.Count - 1; i >= 0; i--) {
						string currentPass = rules[i].Apply(word);
						if (currentPass != null) {
							result = currentPass;
							break;
						}
					}
				}
				return result;
			}

			/// <summary>
			/// Converts the string to title case.
			/// </summary>
			/// <param name="word">The word.</param>
			/// <returns></returns>
			public static string ToTitleCase(string word)
			{
				return Regex.Replace(ToHumanCase(AddUnderscores(word)), @"\b([a-z])",
					delegate(Match match) { return match.Captures[0].Value.ToUpper(); });
			}

			/// <summary>
			/// Converts the string to human case.
			/// </summary>
			/// <param name="lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
			/// <returns></returns>
			public static string ToHumanCase(string lowercaseAndUnderscoredWord)
			{
				return MakeInitialCaps(Regex.Replace(lowercaseAndUnderscoredWord, @"_", " "));
			}


			/// <summary>
			/// Adds the underscores.
			/// </summary>
			/// <param name="pascalCasedWord">The pascal cased word.</param>
			/// <returns></returns>
			public static string AddUnderscores(string pascalCasedWord)
			{
				return Regex.Replace(Regex.Replace(Regex.Replace(pascalCasedWord, @"([A-Z]+)([A-Z][a-z])", "$1_$2"), @"([a-z\d])([A-Z])", "$1_$2"), @"[-\s]", "_").ToLower();
			}

			/// <summary>
			/// Makes the initial caps.
			/// </summary>
			/// <param name="word">The word.</param>
			/// <returns></returns>
			public static string MakeInitialCaps(string word)
			{
				return String.Concat(word.Substring(0, 1).ToUpper(), word.Substring(1).ToLower());
			}

			/// <summary>
			/// Makes the initial lower case.
			/// </summary>
			/// <param name="word">The word.</param>
			/// <returns></returns>
			public static string MakeInitialLowerCase(string word)
			{
				return String.Concat(word.Substring(0, 1).ToLower(), word.Substring(1));
			}


			/// <summary>
			/// Determine whether the passed string is numeric, by attempting to parse it to a double
			/// </summary>
			/// <param name="str">The string to evaluated for numeric conversion</param>
			/// <returns>
			/// 	<c>true</c> if the string can be converted to a number; otherwise, <c>false</c>.
			/// </returns>
			public static bool IsStringNumeric(string str)
			{
				double result;
				return (double.TryParse(str, NumberStyles.Float, NumberFormatInfo.CurrentInfo, out result));
			}

			/// <summary>
			/// Adds the ordinal suffix.
			/// </summary>
			/// <param name="number">The number.</param>
			/// <returns></returns>
			public static string AddOrdinalSuffix(string number)
			{
				if (IsStringNumeric(number)) {
					int n = int.Parse(number);
					int nMod100 = n % 100;

					if (nMod100 >= 11 && nMod100 <= 13)
						return String.Concat(number, "th");

					switch (n % 10) {
						case 1:
							return String.Concat(number, "st");
						case 2:
							return String.Concat(number, "nd");
						case 3:
							return String.Concat(number, "rd");
						default:
							return String.Concat(number, "th");
					}
				}
				return number;
			}

			/// <summary>
			/// Converts the underscores to dashes.
			/// </summary>
			/// <param name="underscoredWord">The underscored word.</param>
			/// <returns></returns>
			public static string ConvertUnderscoresToDashes(string underscoredWord)
			{
				return underscoredWord.Replace('_', '-');
			}

			/// <summary>
			/// Reformats the passed string to ProperCase
			/// </summary>
			/// <param name="sIn">The string to reformat to proper case</param>
			/// <returns></returns>
			public static string ToPascalCase(string text)
			{
				return ToPascalCase(text, true);
			}
			/// <summary>
			/// Converts text to pascal case...
			/// </summary>
			/// <param name="text">The text.</param>
			/// <param name="removeUnderscores">if set to <c>true</c> [remove underscores].</param>
			/// <returns></returns>
			public static string ToPascalCase(string text, bool removeUnderscores)
			{
				if (String.IsNullOrEmpty(text))
					return text;

				text = text.Replace("_", " ");
				string joinString = removeUnderscores ? String.Empty : "_";
				string[] words = text.Split(' ');
				if (words.Length > 1 || IsUpperCase(words[0])) {
					for (int i = 0; i < words.Length; i++) {
						if (words[i].Length > 0) {
							string word = words[i];
							string restOfWord = word.Substring(1);

							if (IsUpperCase(restOfWord))
								restOfWord = restOfWord.ToLower(CultureInfo.CurrentUICulture);

							char firstChar = char.ToUpper(word[0], CultureInfo.CurrentUICulture);
							words[i] = String.Concat(firstChar, restOfWord);
						}
					}
					return String.Join(joinString, words);
				}
				return String.Concat(words[0].Substring(0, 1).ToUpper(CultureInfo.CurrentUICulture), words[0].Substring(1));
			}
			public static bool IsUpperCase(string inputString)
			{
				return Regex.IsMatch(inputString, @"^[A-Z]+$");
			}


			#region Nested type: InflectorRule

			/// <summary>
			/// Summary for the InflectorRule class
			/// </summary>
			private class InflectorRule
			{
				/// <summary>
				/// 
				/// </summary>
				public readonly Regex regex;

				/// <summary>
				/// 
				/// </summary>
				public readonly string replacement;

				/// <summary>
				/// Initializes a new instance of the <see cref="InflectorRule"/> class.
				/// </summary>
				/// <param name="regexPattern">The regex pattern.</param>
				/// <param name="replacementText">The replacement text.</param>
				public InflectorRule(string regexPattern, string replacementText)
				{
					regex = new Regex(regexPattern, RegexOptions.IgnoreCase);
					replacement = replacementText;
				}

				/// <summary>
				/// Applies the specified word.
				/// </summary>
				/// <param name="word">The word.</param>
				/// <returns></returns>
				public string Apply(string word)
				{
					if (!regex.IsMatch(word))
						return null;

					string replace = regex.Replace(word, replacement);
					if (word == word.ToUpper())
						replace = replace.ToUpper();

					return replace;
				}
			}

			#endregion
		}
		#endregion

		#region Utility

		public static class Utility
		{
			/// <summary>
			/// Performs a case-insensitive comparison of two passed strings, 
			/// with an option to trim the strings before comparison.
			/// </summary>
			/// <param name="stringA">The string to compare with the second parameter</param>
			/// <param name="stringB">The string to compare with the first parameter</param>
			/// <param name="trimStrings">if set to <c>true</c> strings will be trimmed before comparison.</param>
			/// <returns>
			/// 	<c>true</c> if the strings match; otherwise, <c>false</c>.
			/// </returns>
			public static bool IsMatch(string stringA, string stringB, bool trimStrings)
			{
				if (trimStrings)
					return String.Equals(stringA.Trim(), stringB.Trim(), StringComparison.InvariantCultureIgnoreCase);

				return String.Equals(stringA, stringB, StringComparison.InvariantCultureIgnoreCase);
			}

			/// <summary>
			/// Determines whether the passed string matches the passed RegEx pattern.
			/// </summary>
			/// <param name="inputString">The input string.</param>
			/// <param name="matchPattern">The RegEx match pattern.</param>
			/// <returns>
			/// 	<c>true</c> if the string matches the pattern; otherwise, <c>false</c>.
			/// </returns>
			public static bool IsRegexMatch(string inputString, string matchPattern)
			{
				return Regex.IsMatch(inputString, matchPattern, RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace);
			}

			/// <summary>
			/// Strips any whitespace from the passed string using RegEx
			/// </summary>
			/// <param name="inputString">The string to strip of whitespace</param>
			/// <returns></returns>
			public static string StripWhitespace(string inputString)
			{
				if (!String.IsNullOrEmpty(inputString))
					return Regex.Replace(inputString, @"\s", String.Empty);

				return inputString;
			}

			/// <summary>
			/// Determine whether the passed string is numeric, by attempting to parse it to a double
			/// </summary>
			/// <param name="str">The string to evaluated for numeric conversion</param>
			/// <returns>
			/// 	<c>true</c> if the string can be converted to a number; otherwise, <c>false</c>.
			/// </returns>
			public static bool IsStringNumeric(string str)
			{
				double result;
				return (double.TryParse(str, NumberStyles.Float, NumberFormatInfo.CurrentInfo, out result));
			}

			/// <summary>
			/// Determines whether the passed DbType supports null values.
			/// </summary>
			/// <param name="dbType">The DbType to evaluate</param>
			/// <returns>
			/// 	<c>true</c> if the DbType supports null values; otherwise, <c>false</c>.
			/// </returns>
			public static bool IsNullableDbType(DbType dbType)
			{
				switch (dbType) {
					case DbType.AnsiString:
					case DbType.AnsiStringFixedLength:
					case DbType.Binary:
					//case DbType.Byte:
					case DbType.Object:
					case DbType.String:
					case DbType.StringFixedLength:
						return false;
					default:
						return true;
				}
			}

			/// <summary>
			/// Reformats the passed string to ProperCase
			/// </summary>
			/// <param name="sIn">The string to reformat to proper case</param>
			/// <returns></returns>
			public static string GetProperName(string sIn)
			{
				string propertyName = Inflector.ToPascalCase(sIn);
				return propertyName;
			}

			/// <summary>
			/// Keys the word check.
			/// </summary>
			/// <param name="word">The word.</param>
			/// <param name="table">The table.</param>
			/// <param name="appendWith">The append with.</param>
			/// <returns></returns>
			public static string KeyWordCheck(string word, string table, string appendWith)
			{
				string newWord = String.Concat(word, appendWith);

				//if(word == "Schema")
				//    newWord =  word + appendWith;

				//Can't have a property with same name as class.
				if (word == table)
					return newWord;

				string evalWord = word.ToLower();

				switch (evalWord) {
					// C# keywords
					case "abstract":
					case "as":
					case "base":
					case "bool":
					case "break":
					case "byte":
					case "case":
					case "catch":
					case "char":
					case "checked":
					case "class":
					case "const":
					case "continue":
					case "date":
					case "datetime":
					case "decimal":
					case "default":
					case "delegate":
					case "do":
					case "double":
					case "else":
					case "enum":
					case "event":
					case "explicit":
					case "extern":
					case "false":
					case "finally":
					case "fixed":
					case "float":
					case "for":
					case "foreach":
					case "goto":
					case "if":
					case "implicit":
					case "in":
					case "int":
					case "interface":
					case "internal":
					case "is":
					case "lock":
					case "long":
					case "namespace":
					case "new":
					case "null":
					case "object":
					case "operator":
					case "out":
					case "override":
					case "params":
					case "private":
					case "protected":
					case "public":
					case "readonly":
					case "ref":
					case "return":
					case "sbyte":
					case "sealed":
					case "short":
					case "sizeof":
					case "stackalloc":
					case "static":
					case "string":
					case "struct":
					case "switch":
					case "this":
					case "throw":
					case "true":
					case "try":
					case "typecode":
					case "typeof":
					case "uint":
					case "ulong":
					case "unchecked":
					case "unsafe":
					case "ushort":
					case "using":
					case "virtual":
					case "volatile":
					case "void":
					case "while":
					// C# contextual keywords
					case "get":
					case "partial":
					case "set":
					case "value":
					case "where":
					case "yield":
					// VB.NET keywords (commented out keywords that are the same as in C#)
					case "alias":
					case "addHandler":
					case "ansi":
					//case "as": 
					case "assembly":
					case "auto":
					case "binary":
					case "byref":
					case "byval":
					case "custom":
					case "directcast":
					case "each":
					case "elseif":
					case "end":
					case "error":
					case "friend":
					case "global":
					case "handles":
					case "implements":
					case "lib":
					case "loop":
					case "me":
					case "module":
					case "mustinherit":
					case "mustoverride":
					case "mybase":
					case "myclass":
					case "narrowing":
					case "next":
					case "nothing":
					case "notinheritable":
					case "notoverridable":
					case "of":
					case "off":
					case "on":
					case "option":
					case "optional":
					case "overloads":
					case "overridable":
					case "overrides":
					case "paramarray":
					case "preserve":
					case "property":
					case "raiseevent":
					case "resume":
					case "shadows":
					case "shared":
					case "step":
					case "structure":
					case "text":
					case "then":
					case "to":
					case "trycast":
					case "unicode":
					case "until":
					case "when":
					case "widening":
					case "withevents":
					case "writeonly":
					// VB.NET unreserved keywords
					case "compare":
					case "isfalse":
					case "istrue":
					case "mid":
					case "strict":
					case "schema":
						return newWord;
					default:
						return word;
				}
			}

			/// <summary>
			/// Keys the word check.
			/// </summary>
			/// <param name="word">The word.</param>
			/// <param name="table">The table.</param>
			/// <param name="provider">The provider.</param>
			/// <returns></returns>
			public static string KeyWordCheck(string word, string table)
			{
				string appendWith = "X";
				return KeyWordCheck(word, table, appendWith);
			}

			/// <summary>
			/// Strips the text.
			/// </summary>
			/// <param name="inputString">The input string.</param>
			/// <param name="stripString">The strip string.</param>
			/// <returns></returns>
			public static string StripText(string inputString, string stripString)
			{
				if (!String.IsNullOrEmpty(stripString)) {
					string[] replace = stripString.Split(new char[] { ',' });
					for (int i = 0; i < replace.Length; i++) {
						if (!String.IsNullOrEmpty(inputString))
							inputString = Regex.Replace(inputString, replace[i], String.Empty);
					}
				}
				return inputString;
			}

			/// <summary>
			/// Replaces any matches found in word from list.
			/// </summary>
			/// <param name="word">The string to check against.</param>
			/// <param name="find">A comma separated list of values to replace.</param>
			/// <param name="replaceWith">The value to replace with.</param>
			/// <param name="removeUnderscores">Whether or not underscores will be kept.</param>
			/// <returns></returns>
			public static string Replace(string word, string find, string replaceWith, bool removeUnderscores)
			{
				string[] findList = Split(find);
				string newWord = word;
				foreach (string f in findList) {
					if (f.Length > 0)
						newWord = newWord.Replace(f, replaceWith);
				}

				if (removeUnderscores)
					return newWord.Replace(" ", String.Empty).Replace("_", String.Empty).Trim();
				return newWord.Replace(" ", String.Empty).Trim();
			}
			/// <summary>
			/// A custom split method
			/// </summary>
			/// <param name="list">A list of values separated by either ", " or ","</param>
			/// <returns></returns>
			public static string[] Split(string list)
			{
				string[] find;
				try {
					find = list.Split(new string[] { ", ", "," }, StringSplitOptions.RemoveEmptyEntries);
				}
				catch {
					find = new string[] { String.Empty };
				}
				return find;
			}

			/// <summary>
			/// Gets the name of the parameter.
			/// </summary>
			/// <param name="name">The name.</param>
			/// <param name="provider">The provider.</param>
			/// <returns></returns>
			public static string GetParameterName(string name, string stripParamText)
			{
				if (String.IsNullOrEmpty(name))
					return String.Empty;

				string newName = name;
				newName = Replace(newName, stripParamText, String.Empty, false);
				newName = GetProperName(newName);
				newName = IsStringNumeric(newName) ? String.Concat("_", newName) : newName;
				newName = StripNonAlphaNumeric(newName);
				newName = newName.Replace("@", String.Empty);
				newName = newName.Trim();
				return KeyWordCheck(newName, String.Empty);
			}

			/// <summary>
			/// Replaces most non-alpha-numeric chars
			/// </summary>
			/// <param name="sIn">The s in.</param>
			/// <returns></returns>
			public static string StripNonAlphaNumeric(string sIn)
			{
				return StripNonAlphaNumeric(sIn, " ".ToCharArray()[0]);
			}

			/// <summary>
			/// Replaces most non-alpha-numeric chars
			/// </summary>
			/// <param name="sIn">The s in.</param>
			/// <param name="cReplace">The placeholder character to use for replacement</param>
			/// <returns></returns>
			public static string StripNonAlphaNumeric(string sIn, char cReplace)
			{
				StringBuilder sb = new StringBuilder(sIn);
				//these are illegal characters - remove zem
				const string stripList = ".'?\\/><$!@%^*&+,;:\"(){}[]|-#";

				for (int i = 0; i < stripList.Length; i++)
					sb.Replace(stripList[i], cReplace);

				sb.Replace(cReplace.ToString(), String.Empty);
				return sb.ToString();
			}

			/// <summary>
			/// Regexes the transform.
			/// </summary>
			/// <param name="inputText">The input text.</param>
			/// <param name="provider">The provider.</param>
			/// <returns></returns>
			public static string RegexTransform(string inputText, bool regexIgnoreCase, string regexMatchExpression, string regexDictionaryReplace, string regexReplaceExpression)
			{
				if (!String.IsNullOrEmpty(regexMatchExpression) || !String.IsNullOrEmpty(regexDictionaryReplace)) {

					Regex rx;

					if (!String.IsNullOrEmpty(regexMatchExpression)) {
						rx = regexIgnoreCase ? new Regex(regexMatchExpression, RegexOptions.IgnoreCase) : new Regex(regexMatchExpression);
						inputText = rx.Replace(inputText, regexReplaceExpression);
					}

					if (!String.IsNullOrEmpty(regexDictionaryReplace) && !String.IsNullOrEmpty(inputText)) {
						string regexString = Regex.Replace(regexDictionaryReplace, "[\r\n\t]", String.Empty);

						string[] pairs = Regex.Split(regexString, ";");
						foreach (string pair in pairs) {
							string[] keys = Regex.Split(pair, ",");
							if (keys.Length == 2) {
								rx = regexIgnoreCase ? new Regex(keys[0], RegexOptions.IgnoreCase) : new Regex(keys[0]);
								inputText = rx.Replace(inputText, keys[1]);
							}
						}
					}
				}
				return inputText;
			}
		}

		#endregion //Utility
		

#>