


using System;
using System.ComponentModel;
using System.Linq;
using SubSonic;
using SubSonic.Utilities;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;
using System.Data;
using System.Data.SqlClient;
using System.Runtime.Serialization;

namespace SOS.Data.SosCrm
{
	/// <summary>
	/// Strongly-typed collection for the AE_AgingView class.
	/// </summary>
	[DataContract]
	public partial class AE_AgingViewCollection : ReadOnlyList<AE_AgingView, AE_AgingViewCollection>
	{
		public static AE_AgingViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_AgingViewCollection result = new AE_AgingViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_Aging view.
	/// </summary>
	[DataContract]
	public partial class AE_AgingView : ReadOnlyRecord<AE_AgingView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_Aging", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterFileID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileID.ColumnName = "CustomerMasterFileID";
				colvarCustomerMasterFileID.DataType = DbType.Int64;
				colvarCustomerMasterFileID.MaxLength = 0;
				colvarCustomerMasterFileID.AutoIncrement = false;
				colvarCustomerMasterFileID.IsNullable = false;
				colvarCustomerMasterFileID.IsPrimaryKey = false;
				colvarCustomerMasterFileID.IsForeignKey = false;
				colvarCustomerMasterFileID.IsReadOnly = false;
				colvarCustomerMasterFileID.DefaultSetting = @"";
				colvarCustomerMasterFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileID);

				TableSchema.TableColumn colvarAgingStepID = new TableSchema.TableColumn(schema);
				colvarAgingStepID.ColumnName = "AgingStepID";
				colvarAgingStepID.DataType = DbType.AnsiString;
				colvarAgingStepID.MaxLength = 10;
				colvarAgingStepID.AutoIncrement = false;
				colvarAgingStepID.IsNullable = false;
				colvarAgingStepID.IsPrimaryKey = false;
				colvarAgingStepID.IsForeignKey = false;
				colvarAgingStepID.IsReadOnly = false;
				colvarAgingStepID.DefaultSetting = @"";
				colvarAgingStepID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgingStepID);

				TableSchema.TableColumn colvarAgingStep = new TableSchema.TableColumn(schema);
				colvarAgingStep.ColumnName = "AgingStep";
				colvarAgingStep.DataType = DbType.AnsiString;
				colvarAgingStep.MaxLength = 50;
				colvarAgingStep.AutoIncrement = false;
				colvarAgingStep.IsNullable = true;
				colvarAgingStep.IsPrimaryKey = false;
				colvarAgingStep.IsForeignKey = false;
				colvarAgingStep.IsReadOnly = false;
				colvarAgingStep.DefaultSetting = @"";
				colvarAgingStep.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgingStep);

				TableSchema.TableColumn colvarValueDue = new TableSchema.TableColumn(schema);
				colvarValueDue.ColumnName = "ValueDue";
				colvarValueDue.DataType = DbType.Currency;
				colvarValueDue.MaxLength = 0;
				colvarValueDue.AutoIncrement = false;
				colvarValueDue.IsNullable = false;
				colvarValueDue.IsPrimaryKey = false;
				colvarValueDue.IsForeignKey = false;
				colvarValueDue.IsReadOnly = false;
				colvarValueDue.DefaultSetting = @"";
				colvarValueDue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueDue);

				TableSchema.TableColumn colvarStepOrder = new TableSchema.TableColumn(schema);
				colvarStepOrder.ColumnName = "StepOrder";
				colvarStepOrder.DataType = DbType.Int16;
				colvarStepOrder.MaxLength = 0;
				colvarStepOrder.AutoIncrement = false;
				colvarStepOrder.IsNullable = false;
				colvarStepOrder.IsPrimaryKey = false;
				colvarStepOrder.IsForeignKey = false;
				colvarStepOrder.IsReadOnly = false;
				colvarStepOrder.DefaultSetting = @"";
				colvarStepOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStepOrder);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_Aging",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_AgingView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerMasterFileID {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileID); }
			set { SetColumnValue(Columns.CustomerMasterFileID, value); }
		}
		[DataMember]
		public string AgingStepID {
			get { return GetColumnValue<string>(Columns.AgingStepID); }
			set { SetColumnValue(Columns.AgingStepID, value); }
		}
		[DataMember]
		public string AgingStep {
			get { return GetColumnValue<string>(Columns.AgingStep); }
			set { SetColumnValue(Columns.AgingStep, value); }
		}
		[DataMember]
		public decimal ValueDue {
			get { return GetColumnValue<decimal>(Columns.ValueDue); }
			set { SetColumnValue(Columns.ValueDue, value); }
		}
		[DataMember]
		public short StepOrder {
			get { return GetColumnValue<short>(Columns.StepOrder); }
			set { SetColumnValue(Columns.StepOrder, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return AgingStepID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterFileIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AgingStepIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AgingStepColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ValueDueColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn StepOrderColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerMasterFileID = @"CustomerMasterFileID";
			public const string AgingStepID = @"AgingStepID";
			public const string AgingStep = @"AgingStep";
			public const string ValueDue = @"ValueDue";
			public const string StepOrder = @"StepOrder";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerAccountInfoToGPView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerAccountInfoToGPViewCollection : ReadOnlyList<AE_CustomerAccountInfoToGPView, AE_CustomerAccountInfoToGPViewCollection>
	{
		public static AE_CustomerAccountInfoToGPViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerAccountInfoToGPViewCollection result = new AE_CustomerAccountInfoToGPViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerAccountInfoToGP view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerAccountInfoToGPView : ReadOnlyRecord<AE_CustomerAccountInfoToGPView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerAccountInfoToGP", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterFileID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileID.ColumnName = "CustomerMasterFileID";
				colvarCustomerMasterFileID.DataType = DbType.Int64;
				colvarCustomerMasterFileID.MaxLength = 0;
				colvarCustomerMasterFileID.AutoIncrement = false;
				colvarCustomerMasterFileID.IsNullable = true;
				colvarCustomerMasterFileID.IsPrimaryKey = false;
				colvarCustomerMasterFileID.IsForeignKey = false;
				colvarCustomerMasterFileID.IsReadOnly = false;
				colvarCustomerMasterFileID.DefaultSetting = @"";
				colvarCustomerMasterFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileID);

				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int64;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarCentralStationID = new TableSchema.TableColumn(schema);
				colvarCentralStationID.ColumnName = "Central Station ID";
				colvarCentralStationID.DataType = DbType.AnsiString;
				colvarCentralStationID.MaxLength = 15;
				colvarCentralStationID.AutoIncrement = false;
				colvarCentralStationID.IsNullable = true;
				colvarCentralStationID.IsPrimaryKey = false;
				colvarCentralStationID.IsForeignKey = false;
				colvarCentralStationID.IsReadOnly = false;
				colvarCentralStationID.DefaultSetting = @"";
				colvarCentralStationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCentralStationID);

				TableSchema.TableColumn colvarCurrentMonitoringStation = new TableSchema.TableColumn(schema);
				colvarCurrentMonitoringStation.ColumnName = "CurrentMonitoringStation";
				colvarCurrentMonitoringStation.DataType = DbType.String;
				colvarCurrentMonitoringStation.MaxLength = 150;
				colvarCurrentMonitoringStation.AutoIncrement = false;
				colvarCurrentMonitoringStation.IsNullable = true;
				colvarCurrentMonitoringStation.IsPrimaryKey = false;
				colvarCurrentMonitoringStation.IsForeignKey = false;
				colvarCurrentMonitoringStation.IsReadOnly = false;
				colvarCurrentMonitoringStation.DefaultSetting = @"";
				colvarCurrentMonitoringStation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentMonitoringStation);

				TableSchema.TableColumn colvarAMASignDate = new TableSchema.TableColumn(schema);
				colvarAMASignDate.ColumnName = "AMA Sign Date";
				colvarAMASignDate.DataType = DbType.DateTime;
				colvarAMASignDate.MaxLength = 0;
				colvarAMASignDate.AutoIncrement = false;
				colvarAMASignDate.IsNullable = true;
				colvarAMASignDate.IsPrimaryKey = false;
				colvarAMASignDate.IsForeignKey = false;
				colvarAMASignDate.IsReadOnly = false;
				colvarAMASignDate.DefaultSetting = @"";
				colvarAMASignDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAMASignDate);

				TableSchema.TableColumn colvarSalesRepID = new TableSchema.TableColumn(schema);
				colvarSalesRepID.ColumnName = "Sales Rep ID";
				colvarSalesRepID.DataType = DbType.AnsiString;
				colvarSalesRepID.MaxLength = 10;
				colvarSalesRepID.AutoIncrement = false;
				colvarSalesRepID.IsNullable = true;
				colvarSalesRepID.IsPrimaryKey = false;
				colvarSalesRepID.IsForeignKey = false;
				colvarSalesRepID.IsReadOnly = false;
				colvarSalesRepID.DefaultSetting = @"";
				colvarSalesRepID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepID);

				TableSchema.TableColumn colvarInstallDate = new TableSchema.TableColumn(schema);
				colvarInstallDate.ColumnName = "Install Date";
				colvarInstallDate.DataType = DbType.DateTime;
				colvarInstallDate.MaxLength = 0;
				colvarInstallDate.AutoIncrement = false;
				colvarInstallDate.IsNullable = true;
				colvarInstallDate.IsPrimaryKey = false;
				colvarInstallDate.IsForeignKey = false;
				colvarInstallDate.IsReadOnly = false;
				colvarInstallDate.DefaultSetting = @"";
				colvarInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallDate);

				TableSchema.TableColumn colvarTechID = new TableSchema.TableColumn(schema);
				colvarTechID.ColumnName = "Tech ID";
				colvarTechID.DataType = DbType.AnsiString;
				colvarTechID.MaxLength = 10;
				colvarTechID.AutoIncrement = false;
				colvarTechID.IsNullable = true;
				colvarTechID.IsPrimaryKey = false;
				colvarTechID.IsForeignKey = false;
				colvarTechID.IsReadOnly = false;
				colvarTechID.DefaultSetting = @"";
				colvarTechID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechID);

				TableSchema.TableColumn colvarRMR = new TableSchema.TableColumn(schema);
				colvarRMR.ColumnName = "RMR";
				colvarRMR.DataType = DbType.Currency;
				colvarRMR.MaxLength = 0;
				colvarRMR.AutoIncrement = false;
				colvarRMR.IsNullable = true;
				colvarRMR.IsPrimaryKey = false;
				colvarRMR.IsForeignKey = false;
				colvarRMR.IsReadOnly = false;
				colvarRMR.DefaultSetting = @"";
				colvarRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRMR);

				TableSchema.TableColumn colvarBillingDay = new TableSchema.TableColumn(schema);
				colvarBillingDay.ColumnName = "Billing Day";
				colvarBillingDay.DataType = DbType.Int16;
				colvarBillingDay.MaxLength = 0;
				colvarBillingDay.AutoIncrement = false;
				colvarBillingDay.IsNullable = true;
				colvarBillingDay.IsPrimaryKey = false;
				colvarBillingDay.IsForeignKey = false;
				colvarBillingDay.IsReadOnly = false;
				colvarBillingDay.DefaultSetting = @"";
				colvarBillingDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingDay);

				TableSchema.TableColumn colvarContractLength = new TableSchema.TableColumn(schema);
				colvarContractLength.ColumnName = "Contract Length";
				colvarContractLength.DataType = DbType.Int16;
				colvarContractLength.MaxLength = 0;
				colvarContractLength.AutoIncrement = false;
				colvarContractLength.IsNullable = true;
				colvarContractLength.IsPrimaryKey = false;
				colvarContractLength.IsForeignKey = false;
				colvarContractLength.IsReadOnly = false;
				colvarContractLength.DefaultSetting = @"";
				colvarContractLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractLength);

				TableSchema.TableColumn colvarPanelType = new TableSchema.TableColumn(schema);
				colvarPanelType.ColumnName = "Panel Type";
				colvarPanelType.DataType = DbType.AnsiString;
				colvarPanelType.MaxLength = 20;
				colvarPanelType.AutoIncrement = false;
				colvarPanelType.IsNullable = true;
				colvarPanelType.IsPrimaryKey = false;
				colvarPanelType.IsForeignKey = false;
				colvarPanelType.IsReadOnly = false;
				colvarPanelType.DefaultSetting = @"";
				colvarPanelType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelType);

				TableSchema.TableColumn colvarSystemType = new TableSchema.TableColumn(schema);
				colvarSystemType.ColumnName = "System Type";
				colvarSystemType.DataType = DbType.AnsiString;
				colvarSystemType.MaxLength = 50;
				colvarSystemType.AutoIncrement = false;
				colvarSystemType.IsNullable = true;
				colvarSystemType.IsPrimaryKey = false;
				colvarSystemType.IsForeignKey = false;
				colvarSystemType.IsReadOnly = false;
				colvarSystemType.DefaultSetting = @"";
				colvarSystemType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemType);

				TableSchema.TableColumn colvarActivationCollected = new TableSchema.TableColumn(schema);
				colvarActivationCollected.ColumnName = "Activation Collected";
				colvarActivationCollected.DataType = DbType.Boolean;
				colvarActivationCollected.MaxLength = 0;
				colvarActivationCollected.AutoIncrement = false;
				colvarActivationCollected.IsNullable = true;
				colvarActivationCollected.IsPrimaryKey = false;
				colvarActivationCollected.IsForeignKey = false;
				colvarActivationCollected.IsReadOnly = false;
				colvarActivationCollected.DefaultSetting = @"";
				colvarActivationCollected.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationCollected);

				TableSchema.TableColumn colvarActivationFee = new TableSchema.TableColumn(schema);
				colvarActivationFee.ColumnName = "Activation Fee";
				colvarActivationFee.DataType = DbType.Currency;
				colvarActivationFee.MaxLength = 0;
				colvarActivationFee.AutoIncrement = false;
				colvarActivationFee.IsNullable = true;
				colvarActivationFee.IsPrimaryKey = false;
				colvarActivationFee.IsForeignKey = false;
				colvarActivationFee.IsReadOnly = false;
				colvarActivationFee.DefaultSetting = @"";
				colvarActivationFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationFee);

				TableSchema.TableColumn colvarPaidFull3Months = new TableSchema.TableColumn(schema);
				colvarPaidFull3Months.ColumnName = "Paid Full / 3 Months";
				colvarPaidFull3Months.DataType = DbType.AnsiString;
				colvarPaidFull3Months.MaxLength = 30;
				colvarPaidFull3Months.AutoIncrement = false;
				colvarPaidFull3Months.IsNullable = true;
				colvarPaidFull3Months.IsPrimaryKey = false;
				colvarPaidFull3Months.IsForeignKey = false;
				colvarPaidFull3Months.IsReadOnly = false;
				colvarPaidFull3Months.DefaultSetting = @"";
				colvarPaidFull3Months.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaidFull3Months);

				TableSchema.TableColumn colvarCancelledDate = new TableSchema.TableColumn(schema);
				colvarCancelledDate.ColumnName = "Cancelled Date";
				colvarCancelledDate.DataType = DbType.DateTime;
				colvarCancelledDate.MaxLength = 0;
				colvarCancelledDate.AutoIncrement = false;
				colvarCancelledDate.IsNullable = true;
				colvarCancelledDate.IsPrimaryKey = false;
				colvarCancelledDate.IsForeignKey = false;
				colvarCancelledDate.IsReadOnly = false;
				colvarCancelledDate.DefaultSetting = @"";
				colvarCancelledDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelledDate);

				TableSchema.TableColumn colvarCancelledReason = new TableSchema.TableColumn(schema);
				colvarCancelledReason.ColumnName = "Cancelled Reason";
				colvarCancelledReason.DataType = DbType.AnsiString;
				colvarCancelledReason.MaxLength = 50;
				colvarCancelledReason.AutoIncrement = false;
				colvarCancelledReason.IsNullable = true;
				colvarCancelledReason.IsPrimaryKey = false;
				colvarCancelledReason.IsForeignKey = false;
				colvarCancelledReason.IsReadOnly = false;
				colvarCancelledReason.DefaultSetting = @"";
				colvarCancelledReason.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelledReason);

				TableSchema.TableColumn colvarTakeOver = new TableSchema.TableColumn(schema);
				colvarTakeOver.ColumnName = "Take Over";
				colvarTakeOver.DataType = DbType.Boolean;
				colvarTakeOver.MaxLength = 0;
				colvarTakeOver.AutoIncrement = false;
				colvarTakeOver.IsNullable = true;
				colvarTakeOver.IsPrimaryKey = false;
				colvarTakeOver.IsForeignKey = false;
				colvarTakeOver.IsReadOnly = false;
				colvarTakeOver.DefaultSetting = @"";
				colvarTakeOver.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTakeOver);

				TableSchema.TableColumn colvarHasExistingEquipment = new TableSchema.TableColumn(schema);
				colvarHasExistingEquipment.ColumnName = "Has Existing Equipment";
				colvarHasExistingEquipment.DataType = DbType.Boolean;
				colvarHasExistingEquipment.MaxLength = 0;
				colvarHasExistingEquipment.AutoIncrement = false;
				colvarHasExistingEquipment.IsNullable = true;
				colvarHasExistingEquipment.IsPrimaryKey = false;
				colvarHasExistingEquipment.IsForeignKey = false;
				colvarHasExistingEquipment.IsReadOnly = false;
				colvarHasExistingEquipment.DefaultSetting = @"";
				colvarHasExistingEquipment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasExistingEquipment);

				TableSchema.TableColumn colvarCreditScore = new TableSchema.TableColumn(schema);
				colvarCreditScore.ColumnName = "Credit Score";
				colvarCreditScore.DataType = DbType.Int32;
				colvarCreditScore.MaxLength = 0;
				colvarCreditScore.AutoIncrement = false;
				colvarCreditScore.IsNullable = true;
				colvarCreditScore.IsPrimaryKey = false;
				colvarCreditScore.IsForeignKey = false;
				colvarCreditScore.IsReadOnly = false;
				colvarCreditScore.DefaultSetting = @"";
				colvarCreditScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScore);

				TableSchema.TableColumn colvarTransactionID = new TableSchema.TableColumn(schema);
				colvarTransactionID.ColumnName = "Transaction ID";
				colvarTransactionID.DataType = DbType.Guid;
				colvarTransactionID.MaxLength = 0;
				colvarTransactionID.AutoIncrement = false;
				colvarTransactionID.IsNullable = true;
				colvarTransactionID.IsPrimaryKey = false;
				colvarTransactionID.IsForeignKey = false;
				colvarTransactionID.IsReadOnly = false;
				colvarTransactionID.DefaultSetting = @"";
				colvarTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionID);

				TableSchema.TableColumn colvarPoints = new TableSchema.TableColumn(schema);
				colvarPoints.ColumnName = "Points";
				colvarPoints.DataType = DbType.Double;
				colvarPoints.MaxLength = 0;
				colvarPoints.AutoIncrement = false;
				colvarPoints.IsNullable = true;
				colvarPoints.IsPrimaryKey = false;
				colvarPoints.IsForeignKey = false;
				colvarPoints.IsReadOnly = false;
				colvarPoints.DefaultSetting = @"";
				colvarPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPoints);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerAccountInfoToGP",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerAccountInfoToGPView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long? CustomerMasterFileID {
			get { return GetColumnValue<long?>(Columns.CustomerMasterFileID); }
			set { SetColumnValue(Columns.CustomerMasterFileID, value); }
		}
		[DataMember]
		public long CustomerID {
			get { return GetColumnValue<long>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set { SetColumnValue(Columns.AccountID, value); }
		}
		[DataMember]
		public string CentralStationID {
			get { return GetColumnValue<string>(Columns.CentralStationID); }
			set { SetColumnValue(Columns.CentralStationID, value); }
		}
		[DataMember]
		public string CurrentMonitoringStation {
			get { return GetColumnValue<string>(Columns.CurrentMonitoringStation); }
			set { SetColumnValue(Columns.CurrentMonitoringStation, value); }
		}
		[DataMember]
		public DateTime? AMASignDate {
			get { return GetColumnValue<DateTime?>(Columns.AMASignDate); }
			set { SetColumnValue(Columns.AMASignDate, value); }
		}
		[DataMember]
		public string SalesRepID {
			get { return GetColumnValue<string>(Columns.SalesRepID); }
			set { SetColumnValue(Columns.SalesRepID, value); }
		}
		[DataMember]
		public DateTime? InstallDate {
			get { return GetColumnValue<DateTime?>(Columns.InstallDate); }
			set { SetColumnValue(Columns.InstallDate, value); }
		}
		[DataMember]
		public string TechID {
			get { return GetColumnValue<string>(Columns.TechID); }
			set { SetColumnValue(Columns.TechID, value); }
		}
		[DataMember]
		public decimal? RMR {
			get { return GetColumnValue<decimal?>(Columns.RMR); }
			set { SetColumnValue(Columns.RMR, value); }
		}
		[DataMember]
		public short? BillingDay {
			get { return GetColumnValue<short?>(Columns.BillingDay); }
			set { SetColumnValue(Columns.BillingDay, value); }
		}
		[DataMember]
		public short? ContractLength {
			get { return GetColumnValue<short?>(Columns.ContractLength); }
			set { SetColumnValue(Columns.ContractLength, value); }
		}
		[DataMember]
		public string PanelType {
			get { return GetColumnValue<string>(Columns.PanelType); }
			set { SetColumnValue(Columns.PanelType, value); }
		}
		[DataMember]
		public string SystemType {
			get { return GetColumnValue<string>(Columns.SystemType); }
			set { SetColumnValue(Columns.SystemType, value); }
		}
		[DataMember]
		public bool? ActivationCollected {
			get { return GetColumnValue<bool?>(Columns.ActivationCollected); }
			set { SetColumnValue(Columns.ActivationCollected, value); }
		}
		[DataMember]
		public decimal? ActivationFee {
			get { return GetColumnValue<decimal?>(Columns.ActivationFee); }
			set { SetColumnValue(Columns.ActivationFee, value); }
		}
		[DataMember]
		public string PaidFull3Months {
			get { return GetColumnValue<string>(Columns.PaidFull3Months); }
			set { SetColumnValue(Columns.PaidFull3Months, value); }
		}
		[DataMember]
		public DateTime? CancelledDate {
			get { return GetColumnValue<DateTime?>(Columns.CancelledDate); }
			set { SetColumnValue(Columns.CancelledDate, value); }
		}
		[DataMember]
		public string CancelledReason {
			get { return GetColumnValue<string>(Columns.CancelledReason); }
			set { SetColumnValue(Columns.CancelledReason, value); }
		}
		[DataMember]
		public bool? TakeOver {
			get { return GetColumnValue<bool?>(Columns.TakeOver); }
			set { SetColumnValue(Columns.TakeOver, value); }
		}
		[DataMember]
		public bool? HasExistingEquipment {
			get { return GetColumnValue<bool?>(Columns.HasExistingEquipment); }
			set { SetColumnValue(Columns.HasExistingEquipment, value); }
		}
		[DataMember]
		public int? CreditScore {
			get { return GetColumnValue<int?>(Columns.CreditScore); }
			set { SetColumnValue(Columns.CreditScore, value); }
		}
		[DataMember]
		public Guid? TransactionID {
			get { return GetColumnValue<Guid?>(Columns.TransactionID); }
			set { SetColumnValue(Columns.TransactionID, value); }
		}
		[DataMember]
		public double? Points {
			get { return GetColumnValue<double?>(Columns.Points); }
			set { SetColumnValue(Columns.Points, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerMasterFileID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterFileIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CentralStationIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CurrentMonitoringStationColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AMASignDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SalesRepIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn InstallDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn TechIDColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn RMRColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn BillingDayColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ContractLengthColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn PanelTypeColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn SystemTypeColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ActivationCollectedColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ActivationFeeColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn PaidFull3MonthsColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn CancelledDateColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn CancelledReasonColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn TakeOverColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn HasExistingEquipmentColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CreditScoreColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn TransactionIDColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn PointsColumn
		{
			get { return Schema.Columns[23]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerMasterFileID = @"CustomerMasterFileID";
			public const string CustomerID = @"CustomerID";
			public const string AccountID = @"AccountID";
			public const string CentralStationID = @"CentralStationID";
			public const string CurrentMonitoringStation = @"CurrentMonitoringStation";
			public const string AMASignDate = @"AMASignDate";
			public const string SalesRepID = @"SalesRepID";
			public const string InstallDate = @"InstallDate";
			public const string TechID = @"TechID";
			public const string RMR = @"RMR";
			public const string BillingDay = @"BillingDay";
			public const string ContractLength = @"ContractLength";
			public const string PanelType = @"PanelType";
			public const string SystemType = @"SystemType";
			public const string ActivationCollected = @"ActivationCollected";
			public const string ActivationFee = @"ActivationFee";
			public const string PaidFull3Months = @"PaidFull3Months";
			public const string CancelledDate = @"CancelledDate";
			public const string CancelledReason = @"CancelledReason";
			public const string TakeOver = @"TakeOver";
			public const string HasExistingEquipment = @"HasExistingEquipment";
			public const string CreditScore = @"CreditScore";
			public const string TransactionID = @"TransactionID";
			public const string Points = @"Points";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerGpsClientsView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerGpsClientsViewCollection : ReadOnlyList<AE_CustomerGpsClientsView, AE_CustomerGpsClientsViewCollection>
	{
		public static AE_CustomerGpsClientsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerGpsClientsViewCollection result = new AE_CustomerGpsClientsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerGpsClients view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerGpsClientsView : ReadOnlyRecord<AE_CustomerGpsClientsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerGpsClients", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int64;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = false;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"";
				colvarCustomerTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerTypeId);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = false;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = false;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarLocalizationId = new TableSchema.TableColumn(schema);
				colvarLocalizationId.ColumnName = "LocalizationId";
				colvarLocalizationId.DataType = DbType.AnsiString;
				colvarLocalizationId.MaxLength = 20;
				colvarLocalizationId.AutoIncrement = false;
				colvarLocalizationId.IsNullable = false;
				colvarLocalizationId.IsPrimaryKey = false;
				colvarLocalizationId.IsForeignKey = false;
				colvarLocalizationId.IsReadOnly = false;
				colvarLocalizationId.DefaultSetting = @"";
				colvarLocalizationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocalizationId);

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.String;
				colvarPrefix.MaxLength = 50;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = true;
				colvarPrefix.IsPrimaryKey = false;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPostfix = new TableSchema.TableColumn(schema);
				colvarPostfix.ColumnName = "Postfix";
				colvarPostfix.DataType = DbType.String;
				colvarPostfix.MaxLength = 50;
				colvarPostfix.AutoIncrement = false;
				colvarPostfix.IsNullable = true;
				colvarPostfix.IsPrimaryKey = false;
				colvarPostfix.IsForeignKey = false;
				colvarPostfix.IsReadOnly = false;
				colvarPostfix.DefaultSetting = @"";
				colvarPostfix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostfix);

				TableSchema.TableColumn colvarBusinessName = new TableSchema.TableColumn(schema);
				colvarBusinessName.ColumnName = "BusinessName";
				colvarBusinessName.DataType = DbType.String;
				colvarBusinessName.MaxLength = 50;
				colvarBusinessName.AutoIncrement = false;
				colvarBusinessName.IsNullable = true;
				colvarBusinessName.IsPrimaryKey = false;
				colvarBusinessName.IsForeignKey = false;
				colvarBusinessName.IsReadOnly = false;
				colvarBusinessName.DefaultSetting = @"";
				colvarBusinessName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBusinessName);

				TableSchema.TableColumn colvarGender = new TableSchema.TableColumn(schema);
				colvarGender.ColumnName = "Gender";
				colvarGender.DataType = DbType.String;
				colvarGender.MaxLength = 10;
				colvarGender.AutoIncrement = false;
				colvarGender.IsNullable = false;
				colvarGender.IsPrimaryKey = false;
				colvarGender.IsForeignKey = false;
				colvarGender.IsReadOnly = false;
				colvarGender.DefaultSetting = @"";
				colvarGender.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGender);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.AnsiString;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.AnsiString;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.AnsiString;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerGpsClients",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerGpsClientsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerID {
			get { return GetColumnValue<long>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set { SetColumnValue(Columns.CustomerTypeId, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set { SetColumnValue(Columns.DealerId, value); }
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set { SetColumnValue(Columns.AddressId, value); }
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set { SetColumnValue(Columns.LeadId, value); }
		}
		[DataMember]
		public string LocalizationId {
			get { return GetColumnValue<string>(Columns.LocalizationId); }
			set { SetColumnValue(Columns.LocalizationId, value); }
		}
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set { SetColumnValue(Columns.Prefix, value); }
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set { SetColumnValue(Columns.MiddleName, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string Postfix {
			get { return GetColumnValue<string>(Columns.Postfix); }
			set { SetColumnValue(Columns.Postfix, value); }
		}
		[DataMember]
		public string BusinessName {
			get { return GetColumnValue<string>(Columns.BusinessName); }
			set { SetColumnValue(Columns.BusinessName, value); }
		}
		[DataMember]
		public string Gender {
			get { return GetColumnValue<string>(Columns.Gender); }
			set { SetColumnValue(Columns.Gender, value); }
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set { SetColumnValue(Columns.PhoneHome, value); }
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set { SetColumnValue(Columns.PhoneWork, value); }
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set { SetColumnValue(Columns.PhoneMobile, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set { SetColumnValue(Columns.DOB, value); }
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set { SetColumnValue(Columns.SSN, value); }
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set { SetColumnValue(Columns.Username, value); }
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set { SetColumnValue(Columns.Password, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set { SetColumnValue(Columns.DEX_ROW_TS, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn LocalizationIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PostfixColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn BusinessNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn GenderColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[28]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerID = @"CustomerID";
			public const string CustomerTypeId = @"CustomerTypeId";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string DealerId = @"DealerId";
			public const string AddressId = @"AddressId";
			public const string LeadId = @"LeadId";
			public const string LocalizationId = @"LocalizationId";
			public const string Prefix = @"Prefix";
			public const string FirstName = @"FirstName";
			public const string MiddleName = @"MiddleName";
			public const string LastName = @"LastName";
			public const string Postfix = @"Postfix";
			public const string BusinessName = @"BusinessName";
			public const string Gender = @"Gender";
			public const string PhoneHome = @"PhoneHome";
			public const string PhoneWork = @"PhoneWork";
			public const string PhoneMobile = @"PhoneMobile";
			public const string Email = @"Email";
			public const string DOB = @"DOB";
			public const string SSN = @"SSN";
			public const string Username = @"Username";
			public const string Password = @"Password";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
			public const string ModifiedOn = @"ModifiedOn";
			public const string ModifiedBy = @"ModifiedBy";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
			public const string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerInformationView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerInformationViewCollection : ReadOnlyList<AE_CustomerInformationView, AE_CustomerInformationViewCollection>
	{
		public static AE_CustomerInformationViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerInformationViewCollection result = new AE_CustomerInformationViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerInformation view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerInformationView : ReadOnlyRecord<AE_CustomerInformationView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerInformation", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int64;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = false;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarDealerAccountId = new TableSchema.TableColumn(schema);
				colvarDealerAccountId.ColumnName = "DealerAccountId";
				colvarDealerAccountId.DataType = DbType.String;
				colvarDealerAccountId.MaxLength = 50;
				colvarDealerAccountId.AutoIncrement = false;
				colvarDealerAccountId.IsNullable = true;
				colvarDealerAccountId.IsPrimaryKey = false;
				colvarDealerAccountId.IsForeignKey = false;
				colvarDealerAccountId.IsReadOnly = false;
				colvarDealerAccountId.DefaultSetting = @"";
				colvarDealerAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerAccountId);

				TableSchema.TableColumn colvarCustomerType = new TableSchema.TableColumn(schema);
				colvarCustomerType.ColumnName = "CustomerType";
				colvarCustomerType.DataType = DbType.String;
				colvarCustomerType.MaxLength = 50;
				colvarCustomerType.AutoIncrement = false;
				colvarCustomerType.IsNullable = false;
				colvarCustomerType.IsPrimaryKey = false;
				colvarCustomerType.IsForeignKey = false;
				colvarCustomerType.IsReadOnly = false;
				colvarCustomerType.DefaultSetting = @"";
				colvarCustomerType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerType);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = false;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.String;
				colvarPrefix.MaxLength = 50;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = true;
				colvarPrefix.IsPrimaryKey = false;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPostfix = new TableSchema.TableColumn(schema);
				colvarPostfix.ColumnName = "Postfix";
				colvarPostfix.DataType = DbType.String;
				colvarPostfix.MaxLength = 50;
				colvarPostfix.AutoIncrement = false;
				colvarPostfix.IsNullable = true;
				colvarPostfix.IsPrimaryKey = false;
				colvarPostfix.IsForeignKey = false;
				colvarPostfix.IsReadOnly = false;
				colvarPostfix.DefaultSetting = @"";
				colvarPostfix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostfix);

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 254;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = true;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = false;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = true;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.AnsiString;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = true;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "State";
				colvarState.DataType = DbType.AnsiStringFixedLength;
				colvarState.MaxLength = 2;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = true;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				colvarState.DefaultSetting = @"";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.AnsiString;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.AnsiString;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.AnsiString;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarSimProductBarcodeId = new TableSchema.TableColumn(schema);
				colvarSimProductBarcodeId.ColumnName = "SimProductBarcodeId";
				colvarSimProductBarcodeId.DataType = DbType.String;
				colvarSimProductBarcodeId.MaxLength = 50;
				colvarSimProductBarcodeId.AutoIncrement = false;
				colvarSimProductBarcodeId.IsNullable = true;
				colvarSimProductBarcodeId.IsPrimaryKey = false;
				colvarSimProductBarcodeId.IsForeignKey = false;
				colvarSimProductBarcodeId.IsReadOnly = false;
				colvarSimProductBarcodeId.DefaultSetting = @"";
				colvarSimProductBarcodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSimProductBarcodeId);

				TableSchema.TableColumn colvarIndustryAccountID = new TableSchema.TableColumn(schema);
				colvarIndustryAccountID.ColumnName = "IndustryAccountID";
				colvarIndustryAccountID.DataType = DbType.Int64;
				colvarIndustryAccountID.MaxLength = 0;
				colvarIndustryAccountID.AutoIncrement = false;
				colvarIndustryAccountID.IsNullable = true;
				colvarIndustryAccountID.IsPrimaryKey = false;
				colvarIndustryAccountID.IsForeignKey = false;
				colvarIndustryAccountID.IsReadOnly = false;
				colvarIndustryAccountID.DefaultSetting = @"";
				colvarIndustryAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountID);

				TableSchema.TableColumn colvarCsid = new TableSchema.TableColumn(schema);
				colvarCsid.ColumnName = "Csid";
				colvarCsid.DataType = DbType.AnsiString;
				colvarCsid.MaxLength = 15;
				colvarCsid.AutoIncrement = false;
				colvarCsid.IsNullable = true;
				colvarCsid.IsPrimaryKey = false;
				colvarCsid.IsForeignKey = false;
				colvarCsid.IsReadOnly = false;
				colvarCsid.DefaultSetting = @"";
				colvarCsid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsid);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerInformation",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerInformationView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerID {
			get { return GetColumnValue<long>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set { SetColumnValue(Columns.LeadId, value); }
		}
		[DataMember]
		public string DealerAccountId {
			get { return GetColumnValue<string>(Columns.DealerAccountId); }
			set { SetColumnValue(Columns.DealerAccountId, value); }
		}
		[DataMember]
		public string CustomerType {
			get { return GetColumnValue<string>(Columns.CustomerType); }
			set { SetColumnValue(Columns.CustomerType, value); }
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set { SetColumnValue(Columns.DealerId, value); }
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set { SetColumnValue(Columns.AddressId, value); }
		}
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set { SetColumnValue(Columns.Prefix, value); }
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set { SetColumnValue(Columns.MiddleName, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string Postfix {
			get { return GetColumnValue<string>(Columns.Postfix); }
			set { SetColumnValue(Columns.Postfix, value); }
		}
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set { SetColumnValue(Columns.FullName, value); }
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set { SetColumnValue(Columns.StreetAddress, value); }
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set { SetColumnValue(Columns.PostalCode, value); }
		}
		[DataMember]
		public string State {
			get { return GetColumnValue<string>(Columns.State); }
			set { SetColumnValue(Columns.State, value); }
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set { SetColumnValue(Columns.PhoneHome, value); }
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set { SetColumnValue(Columns.PhoneWork, value); }
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set { SetColumnValue(Columns.PhoneMobile, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set { SetColumnValue(Columns.DOB, value); }
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set { SetColumnValue(Columns.SSN, value); }
		}
		[DataMember]
		public string SimProductBarcodeId {
			get { return GetColumnValue<string>(Columns.SimProductBarcodeId); }
			set { SetColumnValue(Columns.SimProductBarcodeId, value); }
		}
		[DataMember]
		public long? IndustryAccountID {
			get { return GetColumnValue<long?>(Columns.IndustryAccountID); }
			set { SetColumnValue(Columns.IndustryAccountID, value); }
		}
		[DataMember]
		public string Csid {
			get { return GetColumnValue<string>(Columns.Csid); }
			set { SetColumnValue(Columns.Csid, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DealerAccountIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CustomerTypeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PostfixColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn StateColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn SimProductBarcodeIdColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn IndustryAccountIDColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn CsidColumn
		{
			get { return Schema.Columns[25]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerID = @"CustomerID";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string LeadId = @"LeadId";
			public const string DealerAccountId = @"DealerAccountId";
			public const string CustomerType = @"CustomerType";
			public const string DealerId = @"DealerId";
			public const string AddressId = @"AddressId";
			public const string Prefix = @"Prefix";
			public const string FirstName = @"FirstName";
			public const string MiddleName = @"MiddleName";
			public const string LastName = @"LastName";
			public const string Postfix = @"Postfix";
			public const string FullName = @"FullName";
			public const string StreetAddress = @"StreetAddress";
			public const string City = @"City";
			public const string PostalCode = @"PostalCode";
			public const string State = @"State";
			public const string PhoneHome = @"PhoneHome";
			public const string PhoneWork = @"PhoneWork";
			public const string PhoneMobile = @"PhoneMobile";
			public const string Email = @"Email";
			public const string DOB = @"DOB";
			public const string SSN = @"SSN";
			public const string SimProductBarcodeId = @"SimProductBarcodeId";
			public const string IndustryAccountID = @"IndustryAccountID";
			public const string Csid = @"Csid";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerMasterFileGeneralView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerMasterFileGeneralViewCollection : ReadOnlyList<AE_CustomerMasterFileGeneralView, AE_CustomerMasterFileGeneralViewCollection>
	{
		public static AE_CustomerMasterFileGeneralViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerMasterFileGeneralViewCollection result = new AE_CustomerMasterFileGeneralViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerMasterFileGeneral view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerMasterFileGeneralView : ReadOnlyRecord<AE_CustomerMasterFileGeneralView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerMasterFileGeneral", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterFileID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileID.ColumnName = "CustomerMasterFileID";
				colvarCustomerMasterFileID.DataType = DbType.Int64;
				colvarCustomerMasterFileID.MaxLength = 0;
				colvarCustomerMasterFileID.AutoIncrement = true;
				colvarCustomerMasterFileID.IsNullable = false;
				colvarCustomerMasterFileID.IsPrimaryKey = false;
				colvarCustomerMasterFileID.IsForeignKey = false;
				colvarCustomerMasterFileID.IsReadOnly = false;
				colvarCustomerMasterFileID.DefaultSetting = @"";
				colvarCustomerMasterFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileID);

				TableSchema.TableColumn colvarFkId = new TableSchema.TableColumn(schema);
				colvarFkId.ColumnName = "FkId";
				colvarFkId.DataType = DbType.Int64;
				colvarFkId.MaxLength = 0;
				colvarFkId.AutoIncrement = false;
				colvarFkId.IsNullable = true;
				colvarFkId.IsPrimaryKey = false;
				colvarFkId.IsForeignKey = false;
				colvarFkId.IsReadOnly = false;
				colvarFkId.DefaultSetting = @"";
				colvarFkId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFkId);

				TableSchema.TableColumn colvarResultType = new TableSchema.TableColumn(schema);
				colvarResultType.ColumnName = "ResultType";
				colvarResultType.DataType = DbType.AnsiString;
				colvarResultType.MaxLength = 20;
				colvarResultType.AutoIncrement = false;
				colvarResultType.IsNullable = true;
				colvarResultType.IsPrimaryKey = false;
				colvarResultType.IsForeignKey = false;
				colvarResultType.IsReadOnly = false;
				colvarResultType.DefaultSetting = @"";
				colvarResultType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResultType);

				TableSchema.TableColumn colvarAccountTypes = new TableSchema.TableColumn(schema);
				colvarAccountTypes.ColumnName = "AccountTypes";
				colvarAccountTypes.DataType = DbType.AnsiString;
				colvarAccountTypes.MaxLength = 100;
				colvarAccountTypes.AutoIncrement = false;
				colvarAccountTypes.IsNullable = true;
				colvarAccountTypes.IsPrimaryKey = false;
				colvarAccountTypes.IsForeignKey = false;
				colvarAccountTypes.IsReadOnly = false;
				colvarAccountTypes.DefaultSetting = @"";
				colvarAccountTypes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountTypes);

				TableSchema.TableColumn colvarFullname = new TableSchema.TableColumn(schema);
				colvarFullname.ColumnName = "Fullname";
				colvarFullname.DataType = DbType.String;
				colvarFullname.MaxLength = 250;
				colvarFullname.AutoIncrement = false;
				colvarFullname.IsNullable = true;
				colvarFullname.IsPrimaryKey = false;
				colvarFullname.IsForeignKey = false;
				colvarFullname.IsReadOnly = false;
				colvarFullname.DefaultSetting = @"";
				colvarFullname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullname);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 150;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "Phone";
				colvarPhone.DataType = DbType.AnsiString;
				colvarPhone.MaxLength = 50;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = true;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				colvarPhone.DefaultSetting = @"";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 255;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerMasterFileGeneral",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerMasterFileGeneralView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerMasterFileID {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileID); }
			set { SetColumnValue(Columns.CustomerMasterFileID, value); }
		}
		[DataMember]
		public long? FkId {
			get { return GetColumnValue<long?>(Columns.FkId); }
			set { SetColumnValue(Columns.FkId, value); }
		}
		[DataMember]
		public string ResultType {
			get { return GetColumnValue<string>(Columns.ResultType); }
			set { SetColumnValue(Columns.ResultType, value); }
		}
		[DataMember]
		public string AccountTypes {
			get { return GetColumnValue<string>(Columns.AccountTypes); }
			set { SetColumnValue(Columns.AccountTypes, value); }
		}
		[DataMember]
		public string Fullname {
			get { return GetColumnValue<string>(Columns.Fullname); }
			set { SetColumnValue(Columns.Fullname, value); }
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		[DataMember]
		public string Phone {
			get { return GetColumnValue<string>(Columns.Phone); }
			set { SetColumnValue(Columns.Phone, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerMasterFileID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterFileIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn FkIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ResultTypeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountTypesColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn FullnameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn PhoneColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerMasterFileID = @"CustomerMasterFileID";
			public const string FkId = @"FkId";
			public const string ResultType = @"ResultType";
			public const string AccountTypes = @"AccountTypes";
			public const string Fullname = @"Fullname";
			public const string City = @"City";
			public const string Phone = @"Phone";
			public const string Email = @"Email";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerMonitoredPartyView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerMonitoredPartyViewCollection : ReadOnlyList<AE_CustomerMonitoredPartyView, AE_CustomerMonitoredPartyViewCollection>
	{
		public static AE_CustomerMonitoredPartyViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerMonitoredPartyViewCollection result = new AE_CustomerMonitoredPartyViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerMonitoredParty view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerMonitoredPartyView : ReadOnlyRecord<AE_CustomerMonitoredPartyView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerMonitoredParty", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int64;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = false;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"";
				colvarCustomerTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerTypeId);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = false;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = false;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarLocalizationId = new TableSchema.TableColumn(schema);
				colvarLocalizationId.ColumnName = "LocalizationId";
				colvarLocalizationId.DataType = DbType.AnsiString;
				colvarLocalizationId.MaxLength = 20;
				colvarLocalizationId.AutoIncrement = false;
				colvarLocalizationId.IsNullable = false;
				colvarLocalizationId.IsPrimaryKey = false;
				colvarLocalizationId.IsForeignKey = false;
				colvarLocalizationId.IsReadOnly = false;
				colvarLocalizationId.DefaultSetting = @"";
				colvarLocalizationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocalizationId);

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.String;
				colvarPrefix.MaxLength = 50;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = true;
				colvarPrefix.IsPrimaryKey = false;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPostfix = new TableSchema.TableColumn(schema);
				colvarPostfix.ColumnName = "Postfix";
				colvarPostfix.DataType = DbType.String;
				colvarPostfix.MaxLength = 50;
				colvarPostfix.AutoIncrement = false;
				colvarPostfix.IsNullable = true;
				colvarPostfix.IsPrimaryKey = false;
				colvarPostfix.IsForeignKey = false;
				colvarPostfix.IsReadOnly = false;
				colvarPostfix.DefaultSetting = @"";
				colvarPostfix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostfix);

				TableSchema.TableColumn colvarBusinessName = new TableSchema.TableColumn(schema);
				colvarBusinessName.ColumnName = "BusinessName";
				colvarBusinessName.DataType = DbType.String;
				colvarBusinessName.MaxLength = 50;
				colvarBusinessName.AutoIncrement = false;
				colvarBusinessName.IsNullable = true;
				colvarBusinessName.IsPrimaryKey = false;
				colvarBusinessName.IsForeignKey = false;
				colvarBusinessName.IsReadOnly = false;
				colvarBusinessName.DefaultSetting = @"";
				colvarBusinessName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBusinessName);

				TableSchema.TableColumn colvarGender = new TableSchema.TableColumn(schema);
				colvarGender.ColumnName = "Gender";
				colvarGender.DataType = DbType.String;
				colvarGender.MaxLength = 10;
				colvarGender.AutoIncrement = false;
				colvarGender.IsNullable = false;
				colvarGender.IsPrimaryKey = false;
				colvarGender.IsForeignKey = false;
				colvarGender.IsReadOnly = false;
				colvarGender.DefaultSetting = @"";
				colvarGender.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGender);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.AnsiString;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.AnsiString;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.AnsiString;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerMonitoredParty",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerMonitoredPartyView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerID {
			get { return GetColumnValue<long>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set { SetColumnValue(Columns.CustomerTypeId, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set { SetColumnValue(Columns.DealerId, value); }
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set { SetColumnValue(Columns.AddressId, value); }
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set { SetColumnValue(Columns.LeadId, value); }
		}
		[DataMember]
		public string LocalizationId {
			get { return GetColumnValue<string>(Columns.LocalizationId); }
			set { SetColumnValue(Columns.LocalizationId, value); }
		}
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set { SetColumnValue(Columns.Prefix, value); }
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set { SetColumnValue(Columns.MiddleName, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string Postfix {
			get { return GetColumnValue<string>(Columns.Postfix); }
			set { SetColumnValue(Columns.Postfix, value); }
		}
		[DataMember]
		public string BusinessName {
			get { return GetColumnValue<string>(Columns.BusinessName); }
			set { SetColumnValue(Columns.BusinessName, value); }
		}
		[DataMember]
		public string Gender {
			get { return GetColumnValue<string>(Columns.Gender); }
			set { SetColumnValue(Columns.Gender, value); }
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set { SetColumnValue(Columns.PhoneHome, value); }
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set { SetColumnValue(Columns.PhoneWork, value); }
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set { SetColumnValue(Columns.PhoneMobile, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set { SetColumnValue(Columns.DOB, value); }
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set { SetColumnValue(Columns.SSN, value); }
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set { SetColumnValue(Columns.Username, value); }
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set { SetColumnValue(Columns.Password, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set { SetColumnValue(Columns.DEX_ROW_TS, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn LocalizationIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PostfixColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn BusinessNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn GenderColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[28]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerID = @"CustomerID";
			public const string CustomerTypeId = @"CustomerTypeId";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string DealerId = @"DealerId";
			public const string AddressId = @"AddressId";
			public const string LeadId = @"LeadId";
			public const string LocalizationId = @"LocalizationId";
			public const string Prefix = @"Prefix";
			public const string FirstName = @"FirstName";
			public const string MiddleName = @"MiddleName";
			public const string LastName = @"LastName";
			public const string Postfix = @"Postfix";
			public const string BusinessName = @"BusinessName";
			public const string Gender = @"Gender";
			public const string PhoneHome = @"PhoneHome";
			public const string PhoneWork = @"PhoneWork";
			public const string PhoneMobile = @"PhoneMobile";
			public const string Email = @"Email";
			public const string DOB = @"DOB";
			public const string SSN = @"SSN";
			public const string Username = @"Username";
			public const string Password = @"Password";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
			public const string ModifiedOn = @"ModifiedOn";
			public const string ModifiedBy = @"ModifiedBy";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
			public const string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerSWINGView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGViewCollection : ReadOnlyList<AE_CustomerSWINGView, AE_CustomerSWINGViewCollection>
	{
		public static AE_CustomerSWINGViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerSWINGViewCollection result = new AE_CustomerSWINGViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerSWING view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGView : ReadOnlyRecord<AE_CustomerSWINGView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerSWING", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSalutation = new TableSchema.TableColumn(schema);
				colvarSalutation.ColumnName = "Salutation";
				colvarSalutation.DataType = DbType.AnsiString;
				colvarSalutation.MaxLength = 50;
				colvarSalutation.AutoIncrement = false;
				colvarSalutation.IsNullable = true;
				colvarSalutation.IsPrimaryKey = false;
				colvarSalutation.IsForeignKey = false;
				colvarSalutation.IsReadOnly = false;
				colvarSalutation.DefaultSetting = @"";
				colvarSalutation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalutation);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.AnsiString;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.AnsiString;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.AnsiString;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarSuffix = new TableSchema.TableColumn(schema);
				colvarSuffix.ColumnName = "Suffix";
				colvarSuffix.DataType = DbType.AnsiString;
				colvarSuffix.MaxLength = 50;
				colvarSuffix.AutoIncrement = false;
				colvarSuffix.IsNullable = true;
				colvarSuffix.IsPrimaryKey = false;
				colvarSuffix.IsForeignKey = false;
				colvarSuffix.IsReadOnly = false;
				colvarSuffix.DefaultSetting = @"";
				colvarSuffix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuffix);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 255;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerSWING",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerSWINGView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public string Salutation {
			get { return GetColumnValue<string>(Columns.Salutation); }
			set { SetColumnValue(Columns.Salutation, value); }
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set { SetColumnValue(Columns.MiddleName, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string Suffix {
			get { return GetColumnValue<string>(Columns.Suffix); }
			set { SetColumnValue(Columns.Suffix, value); }
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set { SetColumnValue(Columns.SSN, value); }
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set { SetColumnValue(Columns.DOB, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return FirstName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SalutationColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SuffixColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string Salutation = @"Salutation";
			public const string FirstName = @"FirstName";
			public const string MiddleName = @"MiddleName";
			public const string LastName = @"LastName";
			public const string Suffix = @"Suffix";
			public const string SSN = @"SSN";
			public const string DOB = @"DOB";
			public const string Email = @"Email";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerSWINGAdd_DncView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGAdd_DncViewCollection : ReadOnlyList<AE_CustomerSWINGAdd_DncView, AE_CustomerSWINGAdd_DncViewCollection>
	{
		public static AE_CustomerSWINGAdd_DncViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerSWINGAdd_DncViewCollection result = new AE_CustomerSWINGAdd_DncViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerSWINGAdd_Dnc view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGAdd_DncView : ReadOnlyRecord<AE_CustomerSWINGAdd_DncView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerSWINGAdd_Dnc", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDnc_Status = new TableSchema.TableColumn(schema);
				colvarDnc_Status.ColumnName = "Dnc_Status";
				colvarDnc_Status.DataType = DbType.AnsiString;
				colvarDnc_Status.MaxLength = 50;
				colvarDnc_Status.AutoIncrement = false;
				colvarDnc_Status.IsNullable = true;
				colvarDnc_Status.IsPrimaryKey = false;
				colvarDnc_Status.IsForeignKey = false;
				colvarDnc_Status.IsReadOnly = false;
				colvarDnc_Status.DefaultSetting = @"";
				colvarDnc_Status.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDnc_Status);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerSWINGAdd_Dnc",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerSWINGAdd_DncView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public string Dnc_Status {
			get { return GetColumnValue<string>(Columns.Dnc_Status); }
			set { SetColumnValue(Columns.Dnc_Status, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return Dnc_Status;
		}

		#region Typed Columns

		public static TableSchema.TableColumn Dnc_StatusColumn
		{
			get { return Schema.Columns[0]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string Dnc_Status = @"Dnc_Status";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerSWINGEmergencyContactView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGEmergencyContactViewCollection : ReadOnlyList<AE_CustomerSWINGEmergencyContactView, AE_CustomerSWINGEmergencyContactViewCollection>
	{
		public static AE_CustomerSWINGEmergencyContactViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerSWINGEmergencyContactViewCollection result = new AE_CustomerSWINGEmergencyContactViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerSWINGEmergencyContact view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGEmergencyContactView : ReadOnlyRecord<AE_CustomerSWINGEmergencyContactView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerSWINGEmergencyContact", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.AnsiString;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleInit = new TableSchema.TableColumn(schema);
				colvarMiddleInit.ColumnName = "MiddleInit";
				colvarMiddleInit.DataType = DbType.AnsiString;
				colvarMiddleInit.MaxLength = 50;
				colvarMiddleInit.AutoIncrement = false;
				colvarMiddleInit.IsNullable = true;
				colvarMiddleInit.IsPrimaryKey = false;
				colvarMiddleInit.IsForeignKey = false;
				colvarMiddleInit.IsReadOnly = false;
				colvarMiddleInit.DefaultSetting = @"";
				colvarMiddleInit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleInit);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.AnsiString;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarRelationship = new TableSchema.TableColumn(schema);
				colvarRelationship.ColumnName = "Relationship";
				colvarRelationship.DataType = DbType.AnsiString;
				colvarRelationship.MaxLength = 50;
				colvarRelationship.AutoIncrement = false;
				colvarRelationship.IsNullable = true;
				colvarRelationship.IsPrimaryKey = false;
				colvarRelationship.IsForeignKey = false;
				colvarRelationship.IsReadOnly = false;
				colvarRelationship.DefaultSetting = @"";
				colvarRelationship.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRelationship);

				TableSchema.TableColumn colvarPhoneNumber1 = new TableSchema.TableColumn(schema);
				colvarPhoneNumber1.ColumnName = "PhoneNumber1";
				colvarPhoneNumber1.DataType = DbType.AnsiString;
				colvarPhoneNumber1.MaxLength = 50;
				colvarPhoneNumber1.AutoIncrement = false;
				colvarPhoneNumber1.IsNullable = true;
				colvarPhoneNumber1.IsPrimaryKey = false;
				colvarPhoneNumber1.IsForeignKey = false;
				colvarPhoneNumber1.IsReadOnly = false;
				colvarPhoneNumber1.DefaultSetting = @"";
				colvarPhoneNumber1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneNumber1);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerSWINGEmergencyContact",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerSWINGEmergencyContactView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string MiddleInit {
			get { return GetColumnValue<string>(Columns.MiddleInit); }
			set { SetColumnValue(Columns.MiddleInit, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string Relationship {
			get { return GetColumnValue<string>(Columns.Relationship); }
			set { SetColumnValue(Columns.Relationship, value); }
		}
		[DataMember]
		public string PhoneNumber1 {
			get { return GetColumnValue<string>(Columns.PhoneNumber1); }
			set { SetColumnValue(Columns.PhoneNumber1, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return MiddleInit;
		}

		#region Typed Columns

		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MiddleInitColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RelationshipColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PhoneNumber1Column
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string FirstName = @"FirstName";
			public const string MiddleInit = @"MiddleInit";
			public const string LastName = @"LastName";
			public const string Relationship = @"Relationship";
			public const string PhoneNumber1 = @"PhoneNumber1";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerSWINGEquipmentView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGEquipmentViewCollection : ReadOnlyList<AE_CustomerSWINGEquipmentView, AE_CustomerSWINGEquipmentViewCollection>
	{
		public static AE_CustomerSWINGEquipmentViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerSWINGEquipmentViewCollection result = new AE_CustomerSWINGEquipmentViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerSWINGEquipment view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGEquipmentView : ReadOnlyRecord<AE_CustomerSWINGEquipmentView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerSWINGEquipment", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.AnsiString;
				colvarFullName.MaxLength = 50;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = true;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = false;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarZoneNumber = new TableSchema.TableColumn(schema);
				colvarZoneNumber.ColumnName = "ZoneNumber";
				colvarZoneNumber.DataType = DbType.AnsiStringFixedLength;
				colvarZoneNumber.MaxLength = 3;
				colvarZoneNumber.AutoIncrement = false;
				colvarZoneNumber.IsNullable = true;
				colvarZoneNumber.IsPrimaryKey = false;
				colvarZoneNumber.IsForeignKey = false;
				colvarZoneNumber.IsReadOnly = false;
				colvarZoneNumber.DefaultSetting = @"";
				colvarZoneNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZoneNumber);

				TableSchema.TableColumn colvarZoneTypeName = new TableSchema.TableColumn(schema);
				colvarZoneTypeName.ColumnName = "ZoneTypeName";
				colvarZoneTypeName.DataType = DbType.AnsiString;
				colvarZoneTypeName.MaxLength = 50;
				colvarZoneTypeName.AutoIncrement = false;
				colvarZoneTypeName.IsNullable = true;
				colvarZoneTypeName.IsPrimaryKey = false;
				colvarZoneTypeName.IsForeignKey = false;
				colvarZoneTypeName.IsReadOnly = false;
				colvarZoneTypeName.DefaultSetting = @"";
				colvarZoneTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZoneTypeName);

				TableSchema.TableColumn colvarEquipmentLocationDesc = new TableSchema.TableColumn(schema);
				colvarEquipmentLocationDesc.ColumnName = "EquipmentLocationDesc";
				colvarEquipmentLocationDesc.DataType = DbType.AnsiString;
				colvarEquipmentLocationDesc.MaxLength = 50;
				colvarEquipmentLocationDesc.AutoIncrement = false;
				colvarEquipmentLocationDesc.IsNullable = true;
				colvarEquipmentLocationDesc.IsPrimaryKey = false;
				colvarEquipmentLocationDesc.IsForeignKey = false;
				colvarEquipmentLocationDesc.IsReadOnly = false;
				colvarEquipmentLocationDesc.DefaultSetting = @"";
				colvarEquipmentLocationDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentLocationDesc);

				TableSchema.TableColumn colvarRowNumber = new TableSchema.TableColumn(schema);
				colvarRowNumber.ColumnName = "RowNumber";
				colvarRowNumber.DataType = DbType.Int32;
				colvarRowNumber.MaxLength = 0;
				colvarRowNumber.AutoIncrement = false;
				colvarRowNumber.IsNullable = true;
				colvarRowNumber.IsPrimaryKey = false;
				colvarRowNumber.IsForeignKey = false;
				colvarRowNumber.IsReadOnly = false;
				colvarRowNumber.DefaultSetting = @"";
				colvarRowNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowNumber);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerSWINGEquipment",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerSWINGEquipmentView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set { SetColumnValue(Columns.FullName, value); }
		}
		[DataMember]
		public string ZoneNumber {
			get { return GetColumnValue<string>(Columns.ZoneNumber); }
			set { SetColumnValue(Columns.ZoneNumber, value); }
		}
		[DataMember]
		public string ZoneTypeName {
			get { return GetColumnValue<string>(Columns.ZoneTypeName); }
			set { SetColumnValue(Columns.ZoneTypeName, value); }
		}
		[DataMember]
		public string EquipmentLocationDesc {
			get { return GetColumnValue<string>(Columns.EquipmentLocationDesc); }
			set { SetColumnValue(Columns.EquipmentLocationDesc, value); }
		}
		[DataMember]
		public int? RowNumber {
			get { return GetColumnValue<int?>(Columns.RowNumber); }
			set { SetColumnValue(Columns.RowNumber, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return ZoneNumber;
		}

		#region Typed Columns

		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ZoneNumberColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ZoneTypeNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn EquipmentLocationDescColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RowNumberColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string FullName = @"FullName";
			public const string ZoneNumber = @"ZoneNumber";
			public const string ZoneTypeName = @"ZoneTypeName";
			public const string EquipmentLocationDesc = @"EquipmentLocationDesc";
			public const string RowNumber = @"RowNumber";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerSWINGInterimView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGInterimViewCollection : ReadOnlyList<AE_CustomerSWINGInterimView, AE_CustomerSWINGInterimViewCollection>
	{
		public static AE_CustomerSWINGInterimViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerSWINGInterimViewCollection result = new AE_CustomerSWINGInterimViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerSWINGInterim view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGInterimView : ReadOnlyRecord<AE_CustomerSWINGInterimView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerSWINGInterim", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInterimAccountID = new TableSchema.TableColumn(schema);
				colvarInterimAccountID.ColumnName = "InterimAccountID";
				colvarInterimAccountID.DataType = DbType.Int32;
				colvarInterimAccountID.MaxLength = 0;
				colvarInterimAccountID.AutoIncrement = false;
				colvarInterimAccountID.IsNullable = false;
				colvarInterimAccountID.IsPrimaryKey = false;
				colvarInterimAccountID.IsForeignKey = false;
				colvarInterimAccountID.IsReadOnly = false;
				colvarInterimAccountID.DefaultSetting = @"";
				colvarInterimAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInterimAccountID);

				TableSchema.TableColumn colvarMsAccountID = new TableSchema.TableColumn(schema);
				colvarMsAccountID.ColumnName = "MsAccountID";
				colvarMsAccountID.DataType = DbType.Int64;
				colvarMsAccountID.MaxLength = 0;
				colvarMsAccountID.AutoIncrement = false;
				colvarMsAccountID.IsNullable = true;
				colvarMsAccountID.IsPrimaryKey = false;
				colvarMsAccountID.IsForeignKey = false;
				colvarMsAccountID.IsReadOnly = false;
				colvarMsAccountID.DefaultSetting = @"";
				colvarMsAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAccountID);

				TableSchema.TableColumn colvarCustomerMasterFileID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileID.ColumnName = "CustomerMasterFileID";
				colvarCustomerMasterFileID.DataType = DbType.Int64;
				colvarCustomerMasterFileID.MaxLength = 0;
				colvarCustomerMasterFileID.AutoIncrement = false;
				colvarCustomerMasterFileID.IsNullable = true;
				colvarCustomerMasterFileID.IsPrimaryKey = false;
				colvarCustomerMasterFileID.IsForeignKey = false;
				colvarCustomerMasterFileID.IsReadOnly = false;
				colvarCustomerMasterFileID.DefaultSetting = @"";
				colvarCustomerMasterFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileID);

				TableSchema.TableColumn colvarCustomerMasterFile = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFile.ColumnName = "CustomerMasterFile";
				colvarCustomerMasterFile.DataType = DbType.DateTime;
				colvarCustomerMasterFile.MaxLength = 0;
				colvarCustomerMasterFile.AutoIncrement = false;
				colvarCustomerMasterFile.IsNullable = true;
				colvarCustomerMasterFile.IsPrimaryKey = false;
				colvarCustomerMasterFile.IsForeignKey = false;
				colvarCustomerMasterFile.IsReadOnly = false;
				colvarCustomerMasterFile.DefaultSetting = @"";
				colvarCustomerMasterFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFile);

				TableSchema.TableColumn colvarPremiseAddress = new TableSchema.TableColumn(schema);
				colvarPremiseAddress.ColumnName = "PremiseAddress";
				colvarPremiseAddress.DataType = DbType.DateTime;
				colvarPremiseAddress.MaxLength = 0;
				colvarPremiseAddress.AutoIncrement = false;
				colvarPremiseAddress.IsNullable = true;
				colvarPremiseAddress.IsPrimaryKey = false;
				colvarPremiseAddress.IsForeignKey = false;
				colvarPremiseAddress.IsReadOnly = false;
				colvarPremiseAddress.DefaultSetting = @"";
				colvarPremiseAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiseAddress);

				TableSchema.TableColumn colvarMcAccount = new TableSchema.TableColumn(schema);
				colvarMcAccount.ColumnName = "McAccount";
				colvarMcAccount.DataType = DbType.DateTime;
				colvarMcAccount.MaxLength = 0;
				colvarMcAccount.AutoIncrement = false;
				colvarMcAccount.IsNullable = true;
				colvarMcAccount.IsPrimaryKey = false;
				colvarMcAccount.IsForeignKey = false;
				colvarMcAccount.IsReadOnly = false;
				colvarMcAccount.DefaultSetting = @"";
				colvarMcAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMcAccount);

				TableSchema.TableColumn colvarMsAccount = new TableSchema.TableColumn(schema);
				colvarMsAccount.ColumnName = "MsAccount";
				colvarMsAccount.DataType = DbType.DateTime;
				colvarMsAccount.MaxLength = 0;
				colvarMsAccount.AutoIncrement = false;
				colvarMsAccount.IsNullable = true;
				colvarMsAccount.IsPrimaryKey = false;
				colvarMsAccount.IsForeignKey = false;
				colvarMsAccount.IsReadOnly = false;
				colvarMsAccount.DefaultSetting = @"";
				colvarMsAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAccount);

				TableSchema.TableColumn colvarQlLead = new TableSchema.TableColumn(schema);
				colvarQlLead.ColumnName = "QlLead";
				colvarQlLead.DataType = DbType.DateTime;
				colvarQlLead.MaxLength = 0;
				colvarQlLead.AutoIncrement = false;
				colvarQlLead.IsNullable = true;
				colvarQlLead.IsPrimaryKey = false;
				colvarQlLead.IsForeignKey = false;
				colvarQlLead.IsReadOnly = false;
				colvarQlLead.DefaultSetting = @"";
				colvarQlLead.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQlLead);

				TableSchema.TableColumn colvarQlCreditReport = new TableSchema.TableColumn(schema);
				colvarQlCreditReport.ColumnName = "QlCreditReport";
				colvarQlCreditReport.DataType = DbType.DateTime;
				colvarQlCreditReport.MaxLength = 0;
				colvarQlCreditReport.AutoIncrement = false;
				colvarQlCreditReport.IsNullable = true;
				colvarQlCreditReport.IsPrimaryKey = false;
				colvarQlCreditReport.IsForeignKey = false;
				colvarQlCreditReport.IsReadOnly = false;
				colvarQlCreditReport.DefaultSetting = @"";
				colvarQlCreditReport.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQlCreditReport);

				TableSchema.TableColumn colvarAeCustomer = new TableSchema.TableColumn(schema);
				colvarAeCustomer.ColumnName = "AeCustomer";
				colvarAeCustomer.DataType = DbType.DateTime;
				colvarAeCustomer.MaxLength = 0;
				colvarAeCustomer.AutoIncrement = false;
				colvarAeCustomer.IsNullable = true;
				colvarAeCustomer.IsPrimaryKey = false;
				colvarAeCustomer.IsForeignKey = false;
				colvarAeCustomer.IsReadOnly = false;
				colvarAeCustomer.DefaultSetting = @"";
				colvarAeCustomer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAeCustomer);

				TableSchema.TableColumn colvarAeCustomerAccount = new TableSchema.TableColumn(schema);
				colvarAeCustomerAccount.ColumnName = "AeCustomerAccount";
				colvarAeCustomerAccount.DataType = DbType.DateTime;
				colvarAeCustomerAccount.MaxLength = 0;
				colvarAeCustomerAccount.AutoIncrement = false;
				colvarAeCustomerAccount.IsNullable = true;
				colvarAeCustomerAccount.IsPrimaryKey = false;
				colvarAeCustomerAccount.IsForeignKey = false;
				colvarAeCustomerAccount.IsReadOnly = false;
				colvarAeCustomerAccount.DefaultSetting = @"";
				colvarAeCustomerAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAeCustomerAccount);

				TableSchema.TableColumn colvarMsEmergencyContact = new TableSchema.TableColumn(schema);
				colvarMsEmergencyContact.ColumnName = "MsEmergencyContact";
				colvarMsEmergencyContact.DataType = DbType.DateTime;
				colvarMsEmergencyContact.MaxLength = 0;
				colvarMsEmergencyContact.AutoIncrement = false;
				colvarMsEmergencyContact.IsNullable = true;
				colvarMsEmergencyContact.IsPrimaryKey = false;
				colvarMsEmergencyContact.IsForeignKey = false;
				colvarMsEmergencyContact.IsReadOnly = false;
				colvarMsEmergencyContact.DefaultSetting = @"";
				colvarMsEmergencyContact.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsEmergencyContact);

				TableSchema.TableColumn colvarEquipmentSwung = new TableSchema.TableColumn(schema);
				colvarEquipmentSwung.ColumnName = "EquipmentSwung";
				colvarEquipmentSwung.DataType = DbType.DateTime;
				colvarEquipmentSwung.MaxLength = 0;
				colvarEquipmentSwung.AutoIncrement = false;
				colvarEquipmentSwung.IsNullable = true;
				colvarEquipmentSwung.IsPrimaryKey = false;
				colvarEquipmentSwung.IsForeignKey = false;
				colvarEquipmentSwung.IsReadOnly = false;
				colvarEquipmentSwung.DefaultSetting = @"";
				colvarEquipmentSwung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentSwung);

				TableSchema.TableColumn colvarSwingStatus = new TableSchema.TableColumn(schema);
				colvarSwingStatus.ColumnName = "SwingStatus";
				colvarSwingStatus.DataType = DbType.AnsiString;
				colvarSwingStatus.MaxLength = -1;
				colvarSwingStatus.AutoIncrement = false;
				colvarSwingStatus.IsNullable = true;
				colvarSwingStatus.IsPrimaryKey = false;
				colvarSwingStatus.IsForeignKey = false;
				colvarSwingStatus.IsReadOnly = false;
				colvarSwingStatus.DefaultSetting = @"";
				colvarSwingStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSwingStatus);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerSWINGInterim",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerSWINGInterimView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int InterimAccountID {
			get { return GetColumnValue<int>(Columns.InterimAccountID); }
			set { SetColumnValue(Columns.InterimAccountID, value); }
		}
		[DataMember]
		public long? MsAccountID {
			get { return GetColumnValue<long?>(Columns.MsAccountID); }
			set { SetColumnValue(Columns.MsAccountID, value); }
		}
		[DataMember]
		public long? CustomerMasterFileID {
			get { return GetColumnValue<long?>(Columns.CustomerMasterFileID); }
			set { SetColumnValue(Columns.CustomerMasterFileID, value); }
		}
		[DataMember]
		public DateTime? CustomerMasterFile {
			get { return GetColumnValue<DateTime?>(Columns.CustomerMasterFile); }
			set { SetColumnValue(Columns.CustomerMasterFile, value); }
		}
		[DataMember]
		public DateTime? PremiseAddress {
			get { return GetColumnValue<DateTime?>(Columns.PremiseAddress); }
			set { SetColumnValue(Columns.PremiseAddress, value); }
		}
		[DataMember]
		public DateTime? McAccount {
			get { return GetColumnValue<DateTime?>(Columns.McAccount); }
			set { SetColumnValue(Columns.McAccount, value); }
		}
		[DataMember]
		public DateTime? MsAccount {
			get { return GetColumnValue<DateTime?>(Columns.MsAccount); }
			set { SetColumnValue(Columns.MsAccount, value); }
		}
		[DataMember]
		public DateTime? QlLead {
			get { return GetColumnValue<DateTime?>(Columns.QlLead); }
			set { SetColumnValue(Columns.QlLead, value); }
		}
		[DataMember]
		public DateTime? QlCreditReport {
			get { return GetColumnValue<DateTime?>(Columns.QlCreditReport); }
			set { SetColumnValue(Columns.QlCreditReport, value); }
		}
		[DataMember]
		public DateTime? AeCustomer {
			get { return GetColumnValue<DateTime?>(Columns.AeCustomer); }
			set { SetColumnValue(Columns.AeCustomer, value); }
		}
		[DataMember]
		public DateTime? AeCustomerAccount {
			get { return GetColumnValue<DateTime?>(Columns.AeCustomerAccount); }
			set { SetColumnValue(Columns.AeCustomerAccount, value); }
		}
		[DataMember]
		public DateTime? MsEmergencyContact {
			get { return GetColumnValue<DateTime?>(Columns.MsEmergencyContact); }
			set { SetColumnValue(Columns.MsEmergencyContact, value); }
		}
		[DataMember]
		public DateTime? EquipmentSwung {
			get { return GetColumnValue<DateTime?>(Columns.EquipmentSwung); }
			set { SetColumnValue(Columns.EquipmentSwung, value); }
		}
		[DataMember]
		public string SwingStatus {
			get { return GetColumnValue<string>(Columns.SwingStatus); }
			set { SetColumnValue(Columns.SwingStatus, value); }
		}
		[DataMember]
		public DateTime? CreatedOn {
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return InterimAccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn InterimAccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MsAccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PremiseAddressColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn McAccountColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MsAccountColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn QlLeadColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn QlCreditReportColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AeCustomerColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn AeCustomerAccountColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn MsEmergencyContactColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn EquipmentSwungColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn SwingStatusColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string InterimAccountID = @"InterimAccountID";
			public const string MsAccountID = @"MsAccountID";
			public const string CustomerMasterFileID = @"CustomerMasterFileID";
			public const string CustomerMasterFile = @"CustomerMasterFile";
			public const string PremiseAddress = @"PremiseAddress";
			public const string McAccount = @"McAccount";
			public const string MsAccount = @"MsAccount";
			public const string QlLead = @"QlLead";
			public const string QlCreditReport = @"QlCreditReport";
			public const string AeCustomer = @"AeCustomer";
			public const string AeCustomerAccount = @"AeCustomerAccount";
			public const string MsEmergencyContact = @"MsEmergencyContact";
			public const string EquipmentSwung = @"EquipmentSwung";
			public const string SwingStatus = @"SwingStatus";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerSWINGPremiseAddressView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGPremiseAddressViewCollection : ReadOnlyList<AE_CustomerSWINGPremiseAddressView, AE_CustomerSWINGPremiseAddressViewCollection>
	{
		public static AE_CustomerSWINGPremiseAddressViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerSWINGPremiseAddressViewCollection result = new AE_CustomerSWINGPremiseAddressViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerSWINGPremiseAddress view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGPremiseAddressView : ReadOnlyRecord<AE_CustomerSWINGPremiseAddressView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerSWINGPremiseAddress", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarStreetAddress1 = new TableSchema.TableColumn(schema);
				colvarStreetAddress1.ColumnName = "StreetAddress1";
				colvarStreetAddress1.DataType = DbType.AnsiString;
				colvarStreetAddress1.MaxLength = 50;
				colvarStreetAddress1.AutoIncrement = false;
				colvarStreetAddress1.IsNullable = true;
				colvarStreetAddress1.IsPrimaryKey = false;
				colvarStreetAddress1.IsForeignKey = false;
				colvarStreetAddress1.IsReadOnly = false;
				colvarStreetAddress1.DefaultSetting = @"";
				colvarStreetAddress1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress1);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.AnsiString;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.AnsiString;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarCounty = new TableSchema.TableColumn(schema);
				colvarCounty.ColumnName = "County";
				colvarCounty.DataType = DbType.AnsiString;
				colvarCounty.MaxLength = 50;
				colvarCounty.AutoIncrement = false;
				colvarCounty.IsNullable = true;
				colvarCounty.IsPrimaryKey = false;
				colvarCounty.IsForeignKey = false;
				colvarCounty.IsReadOnly = false;
				colvarCounty.DefaultSetting = @"";
				colvarCounty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCounty);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.AnsiString;
				colvarPostalCode.MaxLength = 50;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = true;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "State";
				colvarState.DataType = DbType.AnsiString;
				colvarState.MaxLength = 50;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = true;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				colvarState.DefaultSetting = @"";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerSWINGPremiseAddress",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerSWINGPremiseAddressView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public string StreetAddress1 {
			get { return GetColumnValue<string>(Columns.StreetAddress1); }
			set { SetColumnValue(Columns.StreetAddress1, value); }
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set { SetColumnValue(Columns.StreetAddress2, value); }
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		[DataMember]
		public string County {
			get { return GetColumnValue<string>(Columns.County); }
			set { SetColumnValue(Columns.County, value); }
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set { SetColumnValue(Columns.PostalCode, value); }
		}
		[DataMember]
		public string State {
			get { return GetColumnValue<string>(Columns.State); }
			set { SetColumnValue(Columns.State, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return StreetAddress2;
		}

		#region Typed Columns

		public static TableSchema.TableColumn StreetAddress1Column
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CountyColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StateColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string StreetAddress1 = @"StreetAddress1";
			public const string StreetAddress2 = @"StreetAddress2";
			public const string City = @"City";
			public const string County = @"County";
			public const string PostalCode = @"PostalCode";
			public const string State = @"State";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerSWINGSystemDetailView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGSystemDetailViewCollection : ReadOnlyList<AE_CustomerSWINGSystemDetailView, AE_CustomerSWINGSystemDetailViewCollection>
	{
		public static AE_CustomerSWINGSystemDetailViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerSWINGSystemDetailViewCollection result = new AE_CustomerSWINGSystemDetailViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerSWINGSystemDetail view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWINGSystemDetailView : ReadOnlyRecord<AE_CustomerSWINGSystemDetailView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerSWINGSystemDetail", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarServiceType = new TableSchema.TableColumn(schema);
				colvarServiceType.ColumnName = "ServiceType";
				colvarServiceType.DataType = DbType.AnsiString;
				colvarServiceType.MaxLength = 50;
				colvarServiceType.AutoIncrement = false;
				colvarServiceType.IsNullable = true;
				colvarServiceType.IsPrimaryKey = false;
				colvarServiceType.IsForeignKey = false;
				colvarServiceType.IsReadOnly = false;
				colvarServiceType.DefaultSetting = @"";
				colvarServiceType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceType);

				TableSchema.TableColumn colvarCellularType = new TableSchema.TableColumn(schema);
				colvarCellularType.ColumnName = "CellularType";
				colvarCellularType.DataType = DbType.AnsiString;
				colvarCellularType.MaxLength = 50;
				colvarCellularType.AutoIncrement = false;
				colvarCellularType.IsNullable = true;
				colvarCellularType.IsPrimaryKey = false;
				colvarCellularType.IsForeignKey = false;
				colvarCellularType.IsReadOnly = false;
				colvarCellularType.DefaultSetting = @"";
				colvarCellularType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularType);

				TableSchema.TableColumn colvarPassPhrase = new TableSchema.TableColumn(schema);
				colvarPassPhrase.ColumnName = "PassPhrase";
				colvarPassPhrase.DataType = DbType.AnsiString;
				colvarPassPhrase.MaxLength = 50;
				colvarPassPhrase.AutoIncrement = false;
				colvarPassPhrase.IsNullable = true;
				colvarPassPhrase.IsPrimaryKey = false;
				colvarPassPhrase.IsForeignKey = false;
				colvarPassPhrase.IsReadOnly = false;
				colvarPassPhrase.DefaultSetting = @"";
				colvarPassPhrase.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassPhrase);

				TableSchema.TableColumn colvarPanelType = new TableSchema.TableColumn(schema);
				colvarPanelType.ColumnName = "PanelType";
				colvarPanelType.DataType = DbType.AnsiString;
				colvarPanelType.MaxLength = 50;
				colvarPanelType.AutoIncrement = false;
				colvarPanelType.IsNullable = true;
				colvarPanelType.IsPrimaryKey = false;
				colvarPanelType.IsForeignKey = false;
				colvarPanelType.IsReadOnly = false;
				colvarPanelType.DefaultSetting = @"";
				colvarPanelType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelType);

				TableSchema.TableColumn colvarDslSeizure = new TableSchema.TableColumn(schema);
				colvarDslSeizure.ColumnName = "DslSeizure";
				colvarDslSeizure.DataType = DbType.AnsiString;
				colvarDslSeizure.MaxLength = 50;
				colvarDslSeizure.AutoIncrement = false;
				colvarDslSeizure.IsNullable = true;
				colvarDslSeizure.IsPrimaryKey = false;
				colvarDslSeizure.IsForeignKey = false;
				colvarDslSeizure.IsReadOnly = false;
				colvarDslSeizure.DefaultSetting = @"";
				colvarDslSeizure.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDslSeizure);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerSWINGSystemDetail",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerSWINGSystemDetailView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public string ServiceType {
			get { return GetColumnValue<string>(Columns.ServiceType); }
			set { SetColumnValue(Columns.ServiceType, value); }
		}
		[DataMember]
		public string CellularType {
			get { return GetColumnValue<string>(Columns.CellularType); }
			set { SetColumnValue(Columns.CellularType, value); }
		}
		[DataMember]
		public string PassPhrase {
			get { return GetColumnValue<string>(Columns.PassPhrase); }
			set { SetColumnValue(Columns.PassPhrase, value); }
		}
		[DataMember]
		public string PanelType {
			get { return GetColumnValue<string>(Columns.PanelType); }
			set { SetColumnValue(Columns.PanelType, value); }
		}
		[DataMember]
		public string DslSeizure {
			get { return GetColumnValue<string>(Columns.DslSeizure); }
			set { SetColumnValue(Columns.DslSeizure, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CellularType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ServiceTypeColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CellularTypeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PassPhraseColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PanelTypeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DslSeizureColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string ServiceType = @"ServiceType";
			public const string CellularType = @"CellularType";
			public const string PassPhrase = @"PassPhrase";
			public const string PanelType = @"PanelType";
			public const string DslSeizure = @"DslSeizure";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerSWUNGInfoView class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWUNGInfoViewCollection : ReadOnlyList<AE_CustomerSWUNGInfoView, AE_CustomerSWUNGInfoViewCollection>
	{
		public static AE_CustomerSWUNGInfoViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerSWUNGInfoViewCollection result = new AE_CustomerSWUNGInfoViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_CustomerSWUNGInfo view.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSWUNGInfoView : ReadOnlyRecord<AE_CustomerSWUNGInfoView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_CustomerSWUNGInfo", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInterimAccountID = new TableSchema.TableColumn(schema);
				colvarInterimAccountID.ColumnName = "InterimAccountID";
				colvarInterimAccountID.DataType = DbType.Int32;
				colvarInterimAccountID.MaxLength = 0;
				colvarInterimAccountID.AutoIncrement = false;
				colvarInterimAccountID.IsNullable = false;
				colvarInterimAccountID.IsPrimaryKey = false;
				colvarInterimAccountID.IsForeignKey = false;
				colvarInterimAccountID.IsReadOnly = false;
				colvarInterimAccountID.DefaultSetting = @"";
				colvarInterimAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInterimAccountID);

				TableSchema.TableColumn colvarMsAccountID = new TableSchema.TableColumn(schema);
				colvarMsAccountID.ColumnName = "MsAccountID";
				colvarMsAccountID.DataType = DbType.Int64;
				colvarMsAccountID.MaxLength = 0;
				colvarMsAccountID.AutoIncrement = false;
				colvarMsAccountID.IsNullable = true;
				colvarMsAccountID.IsPrimaryKey = false;
				colvarMsAccountID.IsForeignKey = false;
				colvarMsAccountID.IsReadOnly = false;
				colvarMsAccountID.DefaultSetting = @"";
				colvarMsAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAccountID);

				TableSchema.TableColumn colvarCustomerMasterFileID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileID.ColumnName = "CustomerMasterFileID";
				colvarCustomerMasterFileID.DataType = DbType.Int64;
				colvarCustomerMasterFileID.MaxLength = 0;
				colvarCustomerMasterFileID.AutoIncrement = false;
				colvarCustomerMasterFileID.IsNullable = true;
				colvarCustomerMasterFileID.IsPrimaryKey = false;
				colvarCustomerMasterFileID.IsForeignKey = false;
				colvarCustomerMasterFileID.IsReadOnly = false;
				colvarCustomerMasterFileID.DefaultSetting = @"";
				colvarCustomerMasterFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileID);

				TableSchema.TableColumn colvarCustomerMasterFile = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFile.ColumnName = "CustomerMasterFile";
				colvarCustomerMasterFile.DataType = DbType.DateTime;
				colvarCustomerMasterFile.MaxLength = 0;
				colvarCustomerMasterFile.AutoIncrement = false;
				colvarCustomerMasterFile.IsNullable = true;
				colvarCustomerMasterFile.IsPrimaryKey = false;
				colvarCustomerMasterFile.IsForeignKey = false;
				colvarCustomerMasterFile.IsReadOnly = false;
				colvarCustomerMasterFile.DefaultSetting = @"";
				colvarCustomerMasterFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFile);

				TableSchema.TableColumn colvarPremiseAddress = new TableSchema.TableColumn(schema);
				colvarPremiseAddress.ColumnName = "PremiseAddress";
				colvarPremiseAddress.DataType = DbType.DateTime;
				colvarPremiseAddress.MaxLength = 0;
				colvarPremiseAddress.AutoIncrement = false;
				colvarPremiseAddress.IsNullable = true;
				colvarPremiseAddress.IsPrimaryKey = false;
				colvarPremiseAddress.IsForeignKey = false;
				colvarPremiseAddress.IsReadOnly = false;
				colvarPremiseAddress.DefaultSetting = @"";
				colvarPremiseAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiseAddress);

				TableSchema.TableColumn colvarMcAccount = new TableSchema.TableColumn(schema);
				colvarMcAccount.ColumnName = "McAccount";
				colvarMcAccount.DataType = DbType.DateTime;
				colvarMcAccount.MaxLength = 0;
				colvarMcAccount.AutoIncrement = false;
				colvarMcAccount.IsNullable = true;
				colvarMcAccount.IsPrimaryKey = false;
				colvarMcAccount.IsForeignKey = false;
				colvarMcAccount.IsReadOnly = false;
				colvarMcAccount.DefaultSetting = @"";
				colvarMcAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMcAccount);

				TableSchema.TableColumn colvarMsAccount = new TableSchema.TableColumn(schema);
				colvarMsAccount.ColumnName = "MsAccount";
				colvarMsAccount.DataType = DbType.DateTime;
				colvarMsAccount.MaxLength = 0;
				colvarMsAccount.AutoIncrement = false;
				colvarMsAccount.IsNullable = true;
				colvarMsAccount.IsPrimaryKey = false;
				colvarMsAccount.IsForeignKey = false;
				colvarMsAccount.IsReadOnly = false;
				colvarMsAccount.DefaultSetting = @"";
				colvarMsAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAccount);

				TableSchema.TableColumn colvarQlLead = new TableSchema.TableColumn(schema);
				colvarQlLead.ColumnName = "QlLead";
				colvarQlLead.DataType = DbType.DateTime;
				colvarQlLead.MaxLength = 0;
				colvarQlLead.AutoIncrement = false;
				colvarQlLead.IsNullable = true;
				colvarQlLead.IsPrimaryKey = false;
				colvarQlLead.IsForeignKey = false;
				colvarQlLead.IsReadOnly = false;
				colvarQlLead.DefaultSetting = @"";
				colvarQlLead.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQlLead);

				TableSchema.TableColumn colvarQlCreditReport = new TableSchema.TableColumn(schema);
				colvarQlCreditReport.ColumnName = "QlCreditReport";
				colvarQlCreditReport.DataType = DbType.DateTime;
				colvarQlCreditReport.MaxLength = 0;
				colvarQlCreditReport.AutoIncrement = false;
				colvarQlCreditReport.IsNullable = true;
				colvarQlCreditReport.IsPrimaryKey = false;
				colvarQlCreditReport.IsForeignKey = false;
				colvarQlCreditReport.IsReadOnly = false;
				colvarQlCreditReport.DefaultSetting = @"";
				colvarQlCreditReport.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQlCreditReport);

				TableSchema.TableColumn colvarAeCustomer = new TableSchema.TableColumn(schema);
				colvarAeCustomer.ColumnName = "AeCustomer";
				colvarAeCustomer.DataType = DbType.DateTime;
				colvarAeCustomer.MaxLength = 0;
				colvarAeCustomer.AutoIncrement = false;
				colvarAeCustomer.IsNullable = true;
				colvarAeCustomer.IsPrimaryKey = false;
				colvarAeCustomer.IsForeignKey = false;
				colvarAeCustomer.IsReadOnly = false;
				colvarAeCustomer.DefaultSetting = @"";
				colvarAeCustomer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAeCustomer);

				TableSchema.TableColumn colvarAeCustomerAccount = new TableSchema.TableColumn(schema);
				colvarAeCustomerAccount.ColumnName = "AeCustomerAccount";
				colvarAeCustomerAccount.DataType = DbType.DateTime;
				colvarAeCustomerAccount.MaxLength = 0;
				colvarAeCustomerAccount.AutoIncrement = false;
				colvarAeCustomerAccount.IsNullable = true;
				colvarAeCustomerAccount.IsPrimaryKey = false;
				colvarAeCustomerAccount.IsForeignKey = false;
				colvarAeCustomerAccount.IsReadOnly = false;
				colvarAeCustomerAccount.DefaultSetting = @"";
				colvarAeCustomerAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAeCustomerAccount);

				TableSchema.TableColumn colvarMsEmergencyContact = new TableSchema.TableColumn(schema);
				colvarMsEmergencyContact.ColumnName = "MsEmergencyContact";
				colvarMsEmergencyContact.DataType = DbType.DateTime;
				colvarMsEmergencyContact.MaxLength = 0;
				colvarMsEmergencyContact.AutoIncrement = false;
				colvarMsEmergencyContact.IsNullable = true;
				colvarMsEmergencyContact.IsPrimaryKey = false;
				colvarMsEmergencyContact.IsForeignKey = false;
				colvarMsEmergencyContact.IsReadOnly = false;
				colvarMsEmergencyContact.DefaultSetting = @"";
				colvarMsEmergencyContact.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsEmergencyContact);

				TableSchema.TableColumn colvarEquipmentSwung = new TableSchema.TableColumn(schema);
				colvarEquipmentSwung.ColumnName = "EquipmentSwung";
				colvarEquipmentSwung.DataType = DbType.DateTime;
				colvarEquipmentSwung.MaxLength = 0;
				colvarEquipmentSwung.AutoIncrement = false;
				colvarEquipmentSwung.IsNullable = true;
				colvarEquipmentSwung.IsPrimaryKey = false;
				colvarEquipmentSwung.IsForeignKey = false;
				colvarEquipmentSwung.IsReadOnly = false;
				colvarEquipmentSwung.DefaultSetting = @"";
				colvarEquipmentSwung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentSwung);

				TableSchema.TableColumn colvarSwingStatus = new TableSchema.TableColumn(schema);
				colvarSwingStatus.ColumnName = "SwingStatus";
				colvarSwingStatus.DataType = DbType.AnsiString;
				colvarSwingStatus.MaxLength = -1;
				colvarSwingStatus.AutoIncrement = false;
				colvarSwingStatus.IsNullable = true;
				colvarSwingStatus.IsPrimaryKey = false;
				colvarSwingStatus.IsForeignKey = false;
				colvarSwingStatus.IsReadOnly = false;
				colvarSwingStatus.DefaultSetting = @"";
				colvarSwingStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSwingStatus);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_CustomerSWUNGInfo",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_CustomerSWUNGInfoView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int InterimAccountID {
			get { return GetColumnValue<int>(Columns.InterimAccountID); }
			set { SetColumnValue(Columns.InterimAccountID, value); }
		}
		[DataMember]
		public long? MsAccountID {
			get { return GetColumnValue<long?>(Columns.MsAccountID); }
			set { SetColumnValue(Columns.MsAccountID, value); }
		}
		[DataMember]
		public long? CustomerMasterFileID {
			get { return GetColumnValue<long?>(Columns.CustomerMasterFileID); }
			set { SetColumnValue(Columns.CustomerMasterFileID, value); }
		}
		[DataMember]
		public DateTime? CustomerMasterFile {
			get { return GetColumnValue<DateTime?>(Columns.CustomerMasterFile); }
			set { SetColumnValue(Columns.CustomerMasterFile, value); }
		}
		[DataMember]
		public DateTime? PremiseAddress {
			get { return GetColumnValue<DateTime?>(Columns.PremiseAddress); }
			set { SetColumnValue(Columns.PremiseAddress, value); }
		}
		[DataMember]
		public DateTime? McAccount {
			get { return GetColumnValue<DateTime?>(Columns.McAccount); }
			set { SetColumnValue(Columns.McAccount, value); }
		}
		[DataMember]
		public DateTime? MsAccount {
			get { return GetColumnValue<DateTime?>(Columns.MsAccount); }
			set { SetColumnValue(Columns.MsAccount, value); }
		}
		[DataMember]
		public DateTime? QlLead {
			get { return GetColumnValue<DateTime?>(Columns.QlLead); }
			set { SetColumnValue(Columns.QlLead, value); }
		}
		[DataMember]
		public DateTime? QlCreditReport {
			get { return GetColumnValue<DateTime?>(Columns.QlCreditReport); }
			set { SetColumnValue(Columns.QlCreditReport, value); }
		}
		[DataMember]
		public DateTime? AeCustomer {
			get { return GetColumnValue<DateTime?>(Columns.AeCustomer); }
			set { SetColumnValue(Columns.AeCustomer, value); }
		}
		[DataMember]
		public DateTime? AeCustomerAccount {
			get { return GetColumnValue<DateTime?>(Columns.AeCustomerAccount); }
			set { SetColumnValue(Columns.AeCustomerAccount, value); }
		}
		[DataMember]
		public DateTime? MsEmergencyContact {
			get { return GetColumnValue<DateTime?>(Columns.MsEmergencyContact); }
			set { SetColumnValue(Columns.MsEmergencyContact, value); }
		}
		[DataMember]
		public DateTime? EquipmentSwung {
			get { return GetColumnValue<DateTime?>(Columns.EquipmentSwung); }
			set { SetColumnValue(Columns.EquipmentSwung, value); }
		}
		[DataMember]
		public string SwingStatus {
			get { return GetColumnValue<string>(Columns.SwingStatus); }
			set { SetColumnValue(Columns.SwingStatus, value); }
		}
		[DataMember]
		public DateTime? CreatedOn {
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return InterimAccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn InterimAccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MsAccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PremiseAddressColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn McAccountColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MsAccountColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn QlLeadColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn QlCreditReportColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AeCustomerColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn AeCustomerAccountColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn MsEmergencyContactColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn EquipmentSwungColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn SwingStatusColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string InterimAccountID = @"InterimAccountID";
			public const string MsAccountID = @"MsAccountID";
			public const string CustomerMasterFileID = @"CustomerMasterFileID";
			public const string CustomerMasterFile = @"CustomerMasterFile";
			public const string PremiseAddress = @"PremiseAddress";
			public const string McAccount = @"McAccount";
			public const string MsAccount = @"MsAccount";
			public const string QlLead = @"QlLead";
			public const string QlCreditReport = @"QlCreditReport";
			public const string AeCustomer = @"AeCustomer";
			public const string AeCustomerAccount = @"AeCustomerAccount";
			public const string MsEmergencyContact = @"MsEmergencyContact";
			public const string EquipmentSwung = @"EquipmentSwung";
			public const string SwingStatus = @"SwingStatus";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_GpsClientToCustomerMasterView class.
	/// </summary>
	[DataContract]
	public partial class AE_GpsClientToCustomerMasterViewCollection : ReadOnlyList<AE_GpsClientToCustomerMasterView, AE_GpsClientToCustomerMasterViewCollection>
	{
		public static AE_GpsClientToCustomerMasterViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_GpsClientToCustomerMasterViewCollection result = new AE_GpsClientToCustomerMasterViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_GpsClientToCustomerMaster view.
	/// </summary>
	[DataContract]
	public partial class AE_GpsClientToCustomerMasterView : ReadOnlyRecord<AE_GpsClientToCustomerMasterView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_GpsClientToCustomerMaster", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int64;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);

				TableSchema.TableColumn colvarIsCurrent = new TableSchema.TableColumn(schema);
				colvarIsCurrent.ColumnName = "IsCurrent";
				colvarIsCurrent.DataType = DbType.Boolean;
				colvarIsCurrent.MaxLength = 0;
				colvarIsCurrent.AutoIncrement = false;
				colvarIsCurrent.IsNullable = true;
				colvarIsCurrent.IsPrimaryKey = false;
				colvarIsCurrent.IsForeignKey = false;
				colvarIsCurrent.IsReadOnly = false;
				colvarIsCurrent.DefaultSetting = @"";
				colvarIsCurrent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCurrent);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = false;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"";
				colvarCustomerTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerTypeId);

				TableSchema.TableColumn colvarCustomerTypeUi = new TableSchema.TableColumn(schema);
				colvarCustomerTypeUi.ColumnName = "CustomerTypeUi";
				colvarCustomerTypeUi.DataType = DbType.AnsiString;
				colvarCustomerTypeUi.MaxLength = 4;
				colvarCustomerTypeUi.AutoIncrement = false;
				colvarCustomerTypeUi.IsNullable = false;
				colvarCustomerTypeUi.IsPrimaryKey = false;
				colvarCustomerTypeUi.IsForeignKey = false;
				colvarCustomerTypeUi.IsReadOnly = false;
				colvarCustomerTypeUi.DefaultSetting = @"";
				colvarCustomerTypeUi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerTypeUi);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarDealerName = new TableSchema.TableColumn(schema);
				colvarDealerName.ColumnName = "DealerName";
				colvarDealerName.DataType = DbType.String;
				colvarDealerName.MaxLength = 150;
				colvarDealerName.AutoIncrement = false;
				colvarDealerName.IsNullable = false;
				colvarDealerName.IsPrimaryKey = false;
				colvarDealerName.IsForeignKey = false;
				colvarDealerName.IsReadOnly = false;
				colvarDealerName.DefaultSetting = @"";
				colvarDealerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerName);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = false;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = false;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarLocalizationId = new TableSchema.TableColumn(schema);
				colvarLocalizationId.ColumnName = "LocalizationId";
				colvarLocalizationId.DataType = DbType.AnsiString;
				colvarLocalizationId.MaxLength = 20;
				colvarLocalizationId.AutoIncrement = false;
				colvarLocalizationId.IsNullable = false;
				colvarLocalizationId.IsPrimaryKey = false;
				colvarLocalizationId.IsForeignKey = false;
				colvarLocalizationId.IsReadOnly = false;
				colvarLocalizationId.DefaultSetting = @"";
				colvarLocalizationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocalizationId);

				TableSchema.TableColumn colvarLocalizationName = new TableSchema.TableColumn(schema);
				colvarLocalizationName.ColumnName = "LocalizationName";
				colvarLocalizationName.DataType = DbType.String;
				colvarLocalizationName.MaxLength = 50;
				colvarLocalizationName.AutoIncrement = false;
				colvarLocalizationName.IsNullable = false;
				colvarLocalizationName.IsPrimaryKey = false;
				colvarLocalizationName.IsForeignKey = false;
				colvarLocalizationName.IsReadOnly = false;
				colvarLocalizationName.DefaultSetting = @"";
				colvarLocalizationName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocalizationName);

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.String;
				colvarPrefix.MaxLength = 50;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = true;
				colvarPrefix.IsPrimaryKey = false;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPostfix = new TableSchema.TableColumn(schema);
				colvarPostfix.ColumnName = "Postfix";
				colvarPostfix.DataType = DbType.String;
				colvarPostfix.MaxLength = 50;
				colvarPostfix.AutoIncrement = false;
				colvarPostfix.IsNullable = true;
				colvarPostfix.IsPrimaryKey = false;
				colvarPostfix.IsForeignKey = false;
				colvarPostfix.IsReadOnly = false;
				colvarPostfix.DefaultSetting = @"";
				colvarPostfix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostfix);

				TableSchema.TableColumn colvarGender = new TableSchema.TableColumn(schema);
				colvarGender.ColumnName = "Gender";
				colvarGender.DataType = DbType.String;
				colvarGender.MaxLength = 10;
				colvarGender.AutoIncrement = false;
				colvarGender.IsNullable = false;
				colvarGender.IsPrimaryKey = false;
				colvarGender.IsForeignKey = false;
				colvarGender.IsReadOnly = false;
				colvarGender.DefaultSetting = @"";
				colvarGender.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGender);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.AnsiString;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.AnsiString;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.AnsiString;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarLastLoginOn = new TableSchema.TableColumn(schema);
				colvarLastLoginOn.ColumnName = "LastLoginOn";
				colvarLastLoginOn.DataType = DbType.DateTime;
				colvarLastLoginOn.MaxLength = 0;
				colvarLastLoginOn.AutoIncrement = false;
				colvarLastLoginOn.IsNullable = true;
				colvarLastLoginOn.IsPrimaryKey = false;
				colvarLastLoginOn.IsForeignKey = false;
				colvarLastLoginOn.IsReadOnly = false;
				colvarLastLoginOn.DefaultSetting = @"";
				colvarLastLoginOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastLoginOn);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_GpsClientToCustomerMaster",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_GpsClientToCustomerMasterView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerID {
			get { return GetColumnValue<long>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		[DataMember]
		public bool? IsCurrent {
			get { return GetColumnValue<bool?>(Columns.IsCurrent); }
			set { SetColumnValue(Columns.IsCurrent, value); }
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set { SetColumnValue(Columns.CustomerTypeId, value); }
		}
		[DataMember]
		public string CustomerTypeUi {
			get { return GetColumnValue<string>(Columns.CustomerTypeUi); }
			set { SetColumnValue(Columns.CustomerTypeUi, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set { SetColumnValue(Columns.DealerId, value); }
		}
		[DataMember]
		public string DealerName {
			get { return GetColumnValue<string>(Columns.DealerName); }
			set { SetColumnValue(Columns.DealerName, value); }
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set { SetColumnValue(Columns.AddressId, value); }
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set { SetColumnValue(Columns.LeadId, value); }
		}
		[DataMember]
		public string LocalizationId {
			get { return GetColumnValue<string>(Columns.LocalizationId); }
			set { SetColumnValue(Columns.LocalizationId, value); }
		}
		[DataMember]
		public string LocalizationName {
			get { return GetColumnValue<string>(Columns.LocalizationName); }
			set { SetColumnValue(Columns.LocalizationName, value); }
		}
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set { SetColumnValue(Columns.Prefix, value); }
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set { SetColumnValue(Columns.MiddleName, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string Postfix {
			get { return GetColumnValue<string>(Columns.Postfix); }
			set { SetColumnValue(Columns.Postfix, value); }
		}
		[DataMember]
		public string Gender {
			get { return GetColumnValue<string>(Columns.Gender); }
			set { SetColumnValue(Columns.Gender, value); }
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set { SetColumnValue(Columns.PhoneHome, value); }
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set { SetColumnValue(Columns.PhoneWork, value); }
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set { SetColumnValue(Columns.PhoneMobile, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set { SetColumnValue(Columns.DOB, value); }
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set { SetColumnValue(Columns.SSN, value); }
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set { SetColumnValue(Columns.Username, value); }
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set { SetColumnValue(Columns.Password, value); }
		}
		[DataMember]
		public DateTime? LastLoginOn {
			get { return GetColumnValue<DateTime?>(Columns.LastLoginOn); }
			set { SetColumnValue(Columns.LastLoginOn, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set { SetColumnValue(Columns.DEX_ROW_TS, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IsCurrentColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerTypeUiColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DealerNameColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn LocalizationIdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn LocalizationNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PostfixColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn GenderColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn LastLoginOnColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[32]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerID = @"CustomerID";
			public const string IsCurrent = @"IsCurrent";
			public const string CustomerTypeId = @"CustomerTypeId";
			public const string CustomerTypeUi = @"CustomerTypeUi";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string DealerId = @"DealerId";
			public const string DealerName = @"DealerName";
			public const string AddressId = @"AddressId";
			public const string LeadId = @"LeadId";
			public const string LocalizationId = @"LocalizationId";
			public const string LocalizationName = @"LocalizationName";
			public const string Prefix = @"Prefix";
			public const string FirstName = @"FirstName";
			public const string MiddleName = @"MiddleName";
			public const string LastName = @"LastName";
			public const string Postfix = @"Postfix";
			public const string Gender = @"Gender";
			public const string PhoneHome = @"PhoneHome";
			public const string PhoneWork = @"PhoneWork";
			public const string PhoneMobile = @"PhoneMobile";
			public const string Email = @"Email";
			public const string DOB = @"DOB";
			public const string SSN = @"SSN";
			public const string Username = @"Username";
			public const string Password = @"Password";
			public const string LastLoginOn = @"LastLoginOn";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
			public const string ModifiedOn = @"ModifiedOn";
			public const string ModifiedBy = @"ModifiedBy";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
			public const string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_InvoiceItemsView class.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceItemsViewCollection : ReadOnlyList<AE_InvoiceItemsView, AE_InvoiceItemsViewCollection>
	{
		public static AE_InvoiceItemsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_InvoiceItemsViewCollection result = new AE_InvoiceItemsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_InvoiceItems view.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceItemsView : ReadOnlyRecord<AE_InvoiceItemsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_InvoiceItems", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInvoiceItemID = new TableSchema.TableColumn(schema);
				colvarInvoiceItemID.ColumnName = "InvoiceItemID";
				colvarInvoiceItemID.DataType = DbType.Int64;
				colvarInvoiceItemID.MaxLength = 0;
				colvarInvoiceItemID.AutoIncrement = false;
				colvarInvoiceItemID.IsNullable = false;
				colvarInvoiceItemID.IsPrimaryKey = false;
				colvarInvoiceItemID.IsForeignKey = false;
				colvarInvoiceItemID.IsReadOnly = false;
				colvarInvoiceItemID.DefaultSetting = @"";
				colvarInvoiceItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceItemID);

				TableSchema.TableColumn colvarInvoiceId = new TableSchema.TableColumn(schema);
				colvarInvoiceId.ColumnName = "InvoiceId";
				colvarInvoiceId.DataType = DbType.Int64;
				colvarInvoiceId.MaxLength = 0;
				colvarInvoiceId.AutoIncrement = false;
				colvarInvoiceId.IsNullable = false;
				colvarInvoiceId.IsPrimaryKey = false;
				colvarInvoiceId.IsForeignKey = false;
				colvarInvoiceId.IsReadOnly = false;
				colvarInvoiceId.DefaultSetting = @"";
				colvarInvoiceId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceId);

				TableSchema.TableColumn colvarItemId = new TableSchema.TableColumn(schema);
				colvarItemId.ColumnName = "ItemId";
				colvarItemId.DataType = DbType.AnsiString;
				colvarItemId.MaxLength = 50;
				colvarItemId.AutoIncrement = false;
				colvarItemId.IsNullable = false;
				colvarItemId.IsPrimaryKey = false;
				colvarItemId.IsForeignKey = false;
				colvarItemId.IsReadOnly = false;
				colvarItemId.DefaultSetting = @"";
				colvarItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemId);

				TableSchema.TableColumn colvarProductBarcodeId = new TableSchema.TableColumn(schema);
				colvarProductBarcodeId.ColumnName = "ProductBarcodeId";
				colvarProductBarcodeId.DataType = DbType.String;
				colvarProductBarcodeId.MaxLength = 50;
				colvarProductBarcodeId.AutoIncrement = false;
				colvarProductBarcodeId.IsNullable = true;
				colvarProductBarcodeId.IsPrimaryKey = false;
				colvarProductBarcodeId.IsForeignKey = false;
				colvarProductBarcodeId.IsReadOnly = false;
				colvarProductBarcodeId.DefaultSetting = @"";
				colvarProductBarcodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductBarcodeId);

				TableSchema.TableColumn colvarItemSKU = new TableSchema.TableColumn(schema);
				colvarItemSKU.ColumnName = "ItemSKU";
				colvarItemSKU.DataType = DbType.String;
				colvarItemSKU.MaxLength = 50;
				colvarItemSKU.AutoIncrement = false;
				colvarItemSKU.IsNullable = true;
				colvarItemSKU.IsPrimaryKey = false;
				colvarItemSKU.IsForeignKey = false;
				colvarItemSKU.IsReadOnly = false;
				colvarItemSKU.DefaultSetting = @"";
				colvarItemSKU.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemSKU);

				TableSchema.TableColumn colvarItemDesc = new TableSchema.TableColumn(schema);
				colvarItemDesc.ColumnName = "ItemDesc";
				colvarItemDesc.DataType = DbType.String;
				colvarItemDesc.MaxLength = 136;
				colvarItemDesc.AutoIncrement = false;
				colvarItemDesc.IsNullable = false;
				colvarItemDesc.IsPrimaryKey = false;
				colvarItemDesc.IsForeignKey = false;
				colvarItemDesc.IsReadOnly = false;
				colvarItemDesc.DefaultSetting = @"";
				colvarItemDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemDesc);

				TableSchema.TableColumn colvarTaxOptionId = new TableSchema.TableColumn(schema);
				colvarTaxOptionId.ColumnName = "TaxOptionId";
				colvarTaxOptionId.DataType = DbType.AnsiStringFixedLength;
				colvarTaxOptionId.MaxLength = 3;
				colvarTaxOptionId.AutoIncrement = false;
				colvarTaxOptionId.IsNullable = false;
				colvarTaxOptionId.IsPrimaryKey = false;
				colvarTaxOptionId.IsForeignKey = false;
				colvarTaxOptionId.IsReadOnly = false;
				colvarTaxOptionId.DefaultSetting = @"";
				colvarTaxOptionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxOptionId);

				TableSchema.TableColumn colvarQty = new TableSchema.TableColumn(schema);
				colvarQty.ColumnName = "Qty";
				colvarQty.DataType = DbType.Int16;
				colvarQty.MaxLength = 0;
				colvarQty.AutoIncrement = false;
				colvarQty.IsNullable = false;
				colvarQty.IsPrimaryKey = false;
				colvarQty.IsForeignKey = false;
				colvarQty.IsReadOnly = false;
				colvarQty.DefaultSetting = @"";
				colvarQty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQty);

				TableSchema.TableColumn colvarCost = new TableSchema.TableColumn(schema);
				colvarCost.ColumnName = "Cost";
				colvarCost.DataType = DbType.Currency;
				colvarCost.MaxLength = 0;
				colvarCost.AutoIncrement = false;
				colvarCost.IsNullable = false;
				colvarCost.IsPrimaryKey = false;
				colvarCost.IsForeignKey = false;
				colvarCost.IsReadOnly = false;
				colvarCost.DefaultSetting = @"";
				colvarCost.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCost);

				TableSchema.TableColumn colvarRetailPrice = new TableSchema.TableColumn(schema);
				colvarRetailPrice.ColumnName = "RetailPrice";
				colvarRetailPrice.DataType = DbType.Currency;
				colvarRetailPrice.MaxLength = 0;
				colvarRetailPrice.AutoIncrement = false;
				colvarRetailPrice.IsNullable = false;
				colvarRetailPrice.IsPrimaryKey = false;
				colvarRetailPrice.IsForeignKey = false;
				colvarRetailPrice.IsReadOnly = false;
				colvarRetailPrice.DefaultSetting = @"";
				colvarRetailPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRetailPrice);

				TableSchema.TableColumn colvarPriceWithTax = new TableSchema.TableColumn(schema);
				colvarPriceWithTax.ColumnName = "PriceWithTax";
				colvarPriceWithTax.DataType = DbType.Currency;
				colvarPriceWithTax.MaxLength = 0;
				colvarPriceWithTax.AutoIncrement = false;
				colvarPriceWithTax.IsNullable = true;
				colvarPriceWithTax.IsPrimaryKey = false;
				colvarPriceWithTax.IsForeignKey = false;
				colvarPriceWithTax.IsReadOnly = false;
				colvarPriceWithTax.DefaultSetting = @"";
				colvarPriceWithTax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriceWithTax);

				TableSchema.TableColumn colvarSystemPoints = new TableSchema.TableColumn(schema);
				colvarSystemPoints.ColumnName = "SystemPoints";
				colvarSystemPoints.DataType = DbType.Decimal;
				colvarSystemPoints.MaxLength = 0;
				colvarSystemPoints.AutoIncrement = false;
				colvarSystemPoints.IsNullable = false;
				colvarSystemPoints.IsPrimaryKey = false;
				colvarSystemPoints.IsForeignKey = false;
				colvarSystemPoints.IsReadOnly = false;
				colvarSystemPoints.DefaultSetting = @"";
				colvarSystemPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemPoints);

				TableSchema.TableColumn colvarSalesmanId = new TableSchema.TableColumn(schema);
				colvarSalesmanId.ColumnName = "SalesmanId";
				colvarSalesmanId.DataType = DbType.String;
				colvarSalesmanId.MaxLength = 25;
				colvarSalesmanId.AutoIncrement = false;
				colvarSalesmanId.IsNullable = true;
				colvarSalesmanId.IsPrimaryKey = false;
				colvarSalesmanId.IsForeignKey = false;
				colvarSalesmanId.IsReadOnly = false;
				colvarSalesmanId.DefaultSetting = @"";
				colvarSalesmanId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesmanId);

				TableSchema.TableColumn colvarTechnicianId = new TableSchema.TableColumn(schema);
				colvarTechnicianId.ColumnName = "TechnicianId";
				colvarTechnicianId.DataType = DbType.String;
				colvarTechnicianId.MaxLength = 25;
				colvarTechnicianId.AutoIncrement = false;
				colvarTechnicianId.IsNullable = true;
				colvarTechnicianId.IsPrimaryKey = false;
				colvarTechnicianId.IsForeignKey = false;
				colvarTechnicianId.IsReadOnly = false;
				colvarTechnicianId.DefaultSetting = @"";
				colvarTechnicianId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_InvoiceItems",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_InvoiceItemsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long InvoiceItemID {
			get { return GetColumnValue<long>(Columns.InvoiceItemID); }
			set { SetColumnValue(Columns.InvoiceItemID, value); }
		}
		[DataMember]
		public long InvoiceId {
			get { return GetColumnValue<long>(Columns.InvoiceId); }
			set { SetColumnValue(Columns.InvoiceId, value); }
		}
		[DataMember]
		public string ItemId {
			get { return GetColumnValue<string>(Columns.ItemId); }
			set { SetColumnValue(Columns.ItemId, value); }
		}
		[DataMember]
		public string ProductBarcodeId {
			get { return GetColumnValue<string>(Columns.ProductBarcodeId); }
			set { SetColumnValue(Columns.ProductBarcodeId, value); }
		}
		[DataMember]
		public string ItemSKU {
			get { return GetColumnValue<string>(Columns.ItemSKU); }
			set { SetColumnValue(Columns.ItemSKU, value); }
		}
		[DataMember]
		public string ItemDesc {
			get { return GetColumnValue<string>(Columns.ItemDesc); }
			set { SetColumnValue(Columns.ItemDesc, value); }
		}
		[DataMember]
		public string TaxOptionId {
			get { return GetColumnValue<string>(Columns.TaxOptionId); }
			set { SetColumnValue(Columns.TaxOptionId, value); }
		}
		[DataMember]
		public short Qty {
			get { return GetColumnValue<short>(Columns.Qty); }
			set { SetColumnValue(Columns.Qty, value); }
		}
		[DataMember]
		public decimal Cost {
			get { return GetColumnValue<decimal>(Columns.Cost); }
			set { SetColumnValue(Columns.Cost, value); }
		}
		[DataMember]
		public decimal RetailPrice {
			get { return GetColumnValue<decimal>(Columns.RetailPrice); }
			set { SetColumnValue(Columns.RetailPrice, value); }
		}
		[DataMember]
		public decimal? PriceWithTax {
			get { return GetColumnValue<decimal?>(Columns.PriceWithTax); }
			set { SetColumnValue(Columns.PriceWithTax, value); }
		}
		[DataMember]
		public decimal SystemPoints {
			get { return GetColumnValue<decimal>(Columns.SystemPoints); }
			set { SetColumnValue(Columns.SystemPoints, value); }
		}
		[DataMember]
		public string SalesmanId {
			get { return GetColumnValue<string>(Columns.SalesmanId); }
			set { SetColumnValue(Columns.SalesmanId, value); }
		}
		[DataMember]
		public string TechnicianId {
			get { return GetColumnValue<string>(Columns.TechnicianId); }
			set { SetColumnValue(Columns.TechnicianId, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set { SetColumnValue(Columns.DEX_ROW_TS, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return InvoiceItemID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn InvoiceItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn InvoiceIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ItemIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ProductBarcodeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ItemSKUColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ItemDescColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TaxOptionIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn QtyColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CostColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn RetailPriceColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn PriceWithTaxColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn SystemPointsColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn SalesmanIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn TechnicianIdColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[20]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string InvoiceItemID = @"InvoiceItemID";
			public const string InvoiceId = @"InvoiceId";
			public const string ItemId = @"ItemId";
			public const string ProductBarcodeId = @"ProductBarcodeId";
			public const string ItemSKU = @"ItemSKU";
			public const string ItemDesc = @"ItemDesc";
			public const string TaxOptionId = @"TaxOptionId";
			public const string Qty = @"Qty";
			public const string Cost = @"Cost";
			public const string RetailPrice = @"RetailPrice";
			public const string PriceWithTax = @"PriceWithTax";
			public const string SystemPoints = @"SystemPoints";
			public const string SalesmanId = @"SalesmanId";
			public const string TechnicianId = @"TechnicianId";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
			public const string ModifiedOn = @"ModifiedOn";
			public const string ModifiedBy = @"ModifiedBy";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
			public const string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_InvoiceMsInstallInfoView class.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceMsInstallInfoViewCollection : ReadOnlyList<AE_InvoiceMsInstallInfoView, AE_InvoiceMsInstallInfoViewCollection>
	{
		public static AE_InvoiceMsInstallInfoViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_InvoiceMsInstallInfoViewCollection result = new AE_InvoiceMsInstallInfoViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_InvoiceMsInstallInfo view.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceMsInstallInfoView : ReadOnlyRecord<AE_InvoiceMsInstallInfoView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_InvoiceMsInstallInfo", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInvoiceID = new TableSchema.TableColumn(schema);
				colvarInvoiceID.ColumnName = "InvoiceID";
				colvarInvoiceID.DataType = DbType.Int64;
				colvarInvoiceID.MaxLength = 0;
				colvarInvoiceID.AutoIncrement = false;
				colvarInvoiceID.IsNullable = false;
				colvarInvoiceID.IsPrimaryKey = false;
				colvarInvoiceID.IsForeignKey = false;
				colvarInvoiceID.IsReadOnly = false;
				colvarInvoiceID.DefaultSetting = @"";
				colvarInvoiceID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarActivationFeeItemId = new TableSchema.TableColumn(schema);
				colvarActivationFeeItemId.ColumnName = "ActivationFeeItemId";
				colvarActivationFeeItemId.DataType = DbType.AnsiString;
				colvarActivationFeeItemId.MaxLength = 50;
				colvarActivationFeeItemId.AutoIncrement = false;
				colvarActivationFeeItemId.IsNullable = true;
				colvarActivationFeeItemId.IsPrimaryKey = false;
				colvarActivationFeeItemId.IsForeignKey = false;
				colvarActivationFeeItemId.IsReadOnly = false;
				colvarActivationFeeItemId.DefaultSetting = @"";
				colvarActivationFeeItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationFeeItemId);

				TableSchema.TableColumn colvarActivationFee = new TableSchema.TableColumn(schema);
				colvarActivationFee.ColumnName = "ActivationFee";
				colvarActivationFee.DataType = DbType.Currency;
				colvarActivationFee.MaxLength = 0;
				colvarActivationFee.AutoIncrement = false;
				colvarActivationFee.IsNullable = true;
				colvarActivationFee.IsPrimaryKey = false;
				colvarActivationFee.IsForeignKey = false;
				colvarActivationFee.IsReadOnly = false;
				colvarActivationFee.DefaultSetting = @"";
				colvarActivationFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationFee);

				TableSchema.TableColumn colvarActivationFeeActual = new TableSchema.TableColumn(schema);
				colvarActivationFeeActual.ColumnName = "ActivationFeeActual";
				colvarActivationFeeActual.DataType = DbType.Currency;
				colvarActivationFeeActual.MaxLength = 0;
				colvarActivationFeeActual.AutoIncrement = false;
				colvarActivationFeeActual.IsNullable = true;
				colvarActivationFeeActual.IsPrimaryKey = false;
				colvarActivationFeeActual.IsForeignKey = false;
				colvarActivationFeeActual.IsReadOnly = false;
				colvarActivationFeeActual.DefaultSetting = @"";
				colvarActivationFeeActual.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationFeeActual);

				TableSchema.TableColumn colvarMonthlyMonitoringRateItemId = new TableSchema.TableColumn(schema);
				colvarMonthlyMonitoringRateItemId.ColumnName = "MonthlyMonitoringRateItemId";
				colvarMonthlyMonitoringRateItemId.DataType = DbType.AnsiString;
				colvarMonthlyMonitoringRateItemId.MaxLength = 50;
				colvarMonthlyMonitoringRateItemId.AutoIncrement = false;
				colvarMonthlyMonitoringRateItemId.IsNullable = true;
				colvarMonthlyMonitoringRateItemId.IsPrimaryKey = false;
				colvarMonthlyMonitoringRateItemId.IsForeignKey = false;
				colvarMonthlyMonitoringRateItemId.IsReadOnly = false;
				colvarMonthlyMonitoringRateItemId.DefaultSetting = @"";
				colvarMonthlyMonitoringRateItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthlyMonitoringRateItemId);

				TableSchema.TableColumn colvarMonthlyMonitoringRate = new TableSchema.TableColumn(schema);
				colvarMonthlyMonitoringRate.ColumnName = "MonthlyMonitoringRate";
				colvarMonthlyMonitoringRate.DataType = DbType.Currency;
				colvarMonthlyMonitoringRate.MaxLength = 0;
				colvarMonthlyMonitoringRate.AutoIncrement = false;
				colvarMonthlyMonitoringRate.IsNullable = true;
				colvarMonthlyMonitoringRate.IsPrimaryKey = false;
				colvarMonthlyMonitoringRate.IsForeignKey = false;
				colvarMonthlyMonitoringRate.IsReadOnly = false;
				colvarMonthlyMonitoringRate.DefaultSetting = @"";
				colvarMonthlyMonitoringRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthlyMonitoringRate);

				TableSchema.TableColumn colvarMonthlyMonitoringRateActual = new TableSchema.TableColumn(schema);
				colvarMonthlyMonitoringRateActual.ColumnName = "MonthlyMonitoringRateActual";
				colvarMonthlyMonitoringRateActual.DataType = DbType.Currency;
				colvarMonthlyMonitoringRateActual.MaxLength = 0;
				colvarMonthlyMonitoringRateActual.AutoIncrement = false;
				colvarMonthlyMonitoringRateActual.IsNullable = true;
				colvarMonthlyMonitoringRateActual.IsPrimaryKey = false;
				colvarMonthlyMonitoringRateActual.IsForeignKey = false;
				colvarMonthlyMonitoringRateActual.IsReadOnly = false;
				colvarMonthlyMonitoringRateActual.DefaultSetting = @"";
				colvarMonthlyMonitoringRateActual.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthlyMonitoringRateActual);

				TableSchema.TableColumn colvarPaymentTypeId = new TableSchema.TableColumn(schema);
				colvarPaymentTypeId.ColumnName = "PaymentTypeId";
				colvarPaymentTypeId.DataType = DbType.AnsiString;
				colvarPaymentTypeId.MaxLength = 20;
				colvarPaymentTypeId.AutoIncrement = false;
				colvarPaymentTypeId.IsNullable = true;
				colvarPaymentTypeId.IsPrimaryKey = false;
				colvarPaymentTypeId.IsForeignKey = false;
				colvarPaymentTypeId.IsReadOnly = false;
				colvarPaymentTypeId.DefaultSetting = @"";
				colvarPaymentTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentTypeId);

				TableSchema.TableColumn colvarBillingDay = new TableSchema.TableColumn(schema);
				colvarBillingDay.ColumnName = "BillingDay";
				colvarBillingDay.DataType = DbType.Int16;
				colvarBillingDay.MaxLength = 0;
				colvarBillingDay.AutoIncrement = false;
				colvarBillingDay.IsNullable = true;
				colvarBillingDay.IsPrimaryKey = false;
				colvarBillingDay.IsForeignKey = false;
				colvarBillingDay.IsReadOnly = false;
				colvarBillingDay.DefaultSetting = @"";
				colvarBillingDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingDay);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarAlarmComPackageId = new TableSchema.TableColumn(schema);
				colvarAlarmComPackageId.ColumnName = "AlarmComPackageId";
				colvarAlarmComPackageId.DataType = DbType.AnsiString;
				colvarAlarmComPackageId.MaxLength = 20;
				colvarAlarmComPackageId.AutoIncrement = false;
				colvarAlarmComPackageId.IsNullable = true;
				colvarAlarmComPackageId.IsPrimaryKey = false;
				colvarAlarmComPackageId.IsForeignKey = false;
				colvarAlarmComPackageId.IsReadOnly = false;
				colvarAlarmComPackageId.DefaultSetting = @"";
				colvarAlarmComPackageId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlarmComPackageId);

				TableSchema.TableColumn colvarAlarmComPackageItemId = new TableSchema.TableColumn(schema);
				colvarAlarmComPackageItemId.ColumnName = "AlarmComPackageItemId";
				colvarAlarmComPackageItemId.DataType = DbType.AnsiString;
				colvarAlarmComPackageItemId.MaxLength = 50;
				colvarAlarmComPackageItemId.AutoIncrement = false;
				colvarAlarmComPackageItemId.IsNullable = true;
				colvarAlarmComPackageItemId.IsPrimaryKey = false;
				colvarAlarmComPackageItemId.IsForeignKey = false;
				colvarAlarmComPackageItemId.IsReadOnly = false;
				colvarAlarmComPackageItemId.DefaultSetting = @"";
				colvarAlarmComPackageItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlarmComPackageItemId);

				TableSchema.TableColumn colvarCellVendorId = new TableSchema.TableColumn(schema);
				colvarCellVendorId.ColumnName = "CellVendorId";
				colvarCellVendorId.DataType = DbType.AnsiString;
				colvarCellVendorId.MaxLength = 50;
				colvarCellVendorId.AutoIncrement = false;
				colvarCellVendorId.IsNullable = true;
				colvarCellVendorId.IsPrimaryKey = false;
				colvarCellVendorId.IsForeignKey = false;
				colvarCellVendorId.IsReadOnly = false;
				colvarCellVendorId.DefaultSetting = @"";
				colvarCellVendorId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellVendorId);

				TableSchema.TableColumn colvarOver3Months = new TableSchema.TableColumn(schema);
				colvarOver3Months.ColumnName = "Over3Months";
				colvarOver3Months.DataType = DbType.Boolean;
				colvarOver3Months.MaxLength = 0;
				colvarOver3Months.AutoIncrement = false;
				colvarOver3Months.IsNullable = true;
				colvarOver3Months.IsPrimaryKey = false;
				colvarOver3Months.IsForeignKey = false;
				colvarOver3Months.IsReadOnly = false;
				colvarOver3Months.DefaultSetting = @"";
				colvarOver3Months.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOver3Months);

				TableSchema.TableColumn colvarCellularTypeId = new TableSchema.TableColumn(schema);
				colvarCellularTypeId.ColumnName = "CellularTypeId";
				colvarCellularTypeId.DataType = DbType.AnsiString;
				colvarCellularTypeId.MaxLength = 20;
				colvarCellularTypeId.AutoIncrement = false;
				colvarCellularTypeId.IsNullable = true;
				colvarCellularTypeId.IsPrimaryKey = false;
				colvarCellularTypeId.IsForeignKey = false;
				colvarCellularTypeId.IsReadOnly = false;
				colvarCellularTypeId.DefaultSetting = @"";
				colvarCellularTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularTypeId);

				TableSchema.TableColumn colvarPanelTypeId = new TableSchema.TableColumn(schema);
				colvarPanelTypeId.ColumnName = "PanelTypeId";
				colvarPanelTypeId.DataType = DbType.AnsiString;
				colvarPanelTypeId.MaxLength = 20;
				colvarPanelTypeId.AutoIncrement = false;
				colvarPanelTypeId.IsNullable = true;
				colvarPanelTypeId.IsPrimaryKey = false;
				colvarPanelTypeId.IsForeignKey = false;
				colvarPanelTypeId.IsReadOnly = false;
				colvarPanelTypeId.DefaultSetting = @"";
				colvarPanelTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeId);

				TableSchema.TableColumn colvarContractId = new TableSchema.TableColumn(schema);
				colvarContractId.ColumnName = "ContractId";
				colvarContractId.DataType = DbType.Int32;
				colvarContractId.MaxLength = 0;
				colvarContractId.AutoIncrement = false;
				colvarContractId.IsNullable = true;
				colvarContractId.IsPrimaryKey = false;
				colvarContractId.IsForeignKey = false;
				colvarContractId.IsReadOnly = false;
				colvarContractId.DefaultSetting = @"";
				colvarContractId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractId);

				TableSchema.TableColumn colvarIsMoni = new TableSchema.TableColumn(schema);
				colvarIsMoni.ColumnName = "IsMoni";
				colvarIsMoni.DataType = DbType.Boolean;
				colvarIsMoni.MaxLength = 0;
				colvarIsMoni.AutoIncrement = false;
				colvarIsMoni.IsNullable = true;
				colvarIsMoni.IsPrimaryKey = false;
				colvarIsMoni.IsForeignKey = false;
				colvarIsMoni.IsReadOnly = false;
				colvarIsMoni.DefaultSetting = @"";
				colvarIsMoni.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMoni);

				TableSchema.TableColumn colvarIsTakeOver = new TableSchema.TableColumn(schema);
				colvarIsTakeOver.ColumnName = "IsTakeOver";
				colvarIsTakeOver.DataType = DbType.Boolean;
				colvarIsTakeOver.MaxLength = 0;
				colvarIsTakeOver.AutoIncrement = false;
				colvarIsTakeOver.IsNullable = true;
				colvarIsTakeOver.IsPrimaryKey = false;
				colvarIsTakeOver.IsForeignKey = false;
				colvarIsTakeOver.IsReadOnly = false;
				colvarIsTakeOver.DefaultSetting = @"";
				colvarIsTakeOver.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTakeOver);

				TableSchema.TableColumn colvarIsOwner = new TableSchema.TableColumn(schema);
				colvarIsOwner.ColumnName = "IsOwner";
				colvarIsOwner.DataType = DbType.Boolean;
				colvarIsOwner.MaxLength = 0;
				colvarIsOwner.AutoIncrement = false;
				colvarIsOwner.IsNullable = true;
				colvarIsOwner.IsPrimaryKey = false;
				colvarIsOwner.IsForeignKey = false;
				colvarIsOwner.IsReadOnly = false;
				colvarIsOwner.DefaultSetting = @"";
				colvarIsOwner.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsOwner);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_InvoiceMsInstallInfo",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_InvoiceMsInstallInfoView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long InvoiceID {
			get { return GetColumnValue<long>(Columns.InvoiceID); }
			set { SetColumnValue(Columns.InvoiceID, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public string ActivationFeeItemId {
			get { return GetColumnValue<string>(Columns.ActivationFeeItemId); }
			set { SetColumnValue(Columns.ActivationFeeItemId, value); }
		}
		[DataMember]
		public decimal? ActivationFee {
			get { return GetColumnValue<decimal?>(Columns.ActivationFee); }
			set { SetColumnValue(Columns.ActivationFee, value); }
		}
		[DataMember]
		public decimal? ActivationFeeActual {
			get { return GetColumnValue<decimal?>(Columns.ActivationFeeActual); }
			set { SetColumnValue(Columns.ActivationFeeActual, value); }
		}
		[DataMember]
		public string MonthlyMonitoringRateItemId {
			get { return GetColumnValue<string>(Columns.MonthlyMonitoringRateItemId); }
			set { SetColumnValue(Columns.MonthlyMonitoringRateItemId, value); }
		}
		[DataMember]
		public decimal? MonthlyMonitoringRate {
			get { return GetColumnValue<decimal?>(Columns.MonthlyMonitoringRate); }
			set { SetColumnValue(Columns.MonthlyMonitoringRate, value); }
		}
		[DataMember]
		public decimal? MonthlyMonitoringRateActual {
			get { return GetColumnValue<decimal?>(Columns.MonthlyMonitoringRateActual); }
			set { SetColumnValue(Columns.MonthlyMonitoringRateActual, value); }
		}
		[DataMember]
		public string PaymentTypeId {
			get { return GetColumnValue<string>(Columns.PaymentTypeId); }
			set { SetColumnValue(Columns.PaymentTypeId, value); }
		}
		[DataMember]
		public short? BillingDay {
			get { return GetColumnValue<short?>(Columns.BillingDay); }
			set { SetColumnValue(Columns.BillingDay, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		[DataMember]
		public string AlarmComPackageId {
			get { return GetColumnValue<string>(Columns.AlarmComPackageId); }
			set { SetColumnValue(Columns.AlarmComPackageId, value); }
		}
		[DataMember]
		public string AlarmComPackageItemId {
			get { return GetColumnValue<string>(Columns.AlarmComPackageItemId); }
			set { SetColumnValue(Columns.AlarmComPackageItemId, value); }
		}
		[DataMember]
		public string CellVendorId {
			get { return GetColumnValue<string>(Columns.CellVendorId); }
			set { SetColumnValue(Columns.CellVendorId, value); }
		}
		[DataMember]
		public bool? Over3Months {
			get { return GetColumnValue<bool?>(Columns.Over3Months); }
			set { SetColumnValue(Columns.Over3Months, value); }
		}
		[DataMember]
		public string CellularTypeId {
			get { return GetColumnValue<string>(Columns.CellularTypeId); }
			set { SetColumnValue(Columns.CellularTypeId, value); }
		}
		[DataMember]
		public string PanelTypeId {
			get { return GetColumnValue<string>(Columns.PanelTypeId); }
			set { SetColumnValue(Columns.PanelTypeId, value); }
		}
		[DataMember]
		public int? ContractId {
			get { return GetColumnValue<int?>(Columns.ContractId); }
			set { SetColumnValue(Columns.ContractId, value); }
		}
		[DataMember]
		public bool? IsMoni {
			get { return GetColumnValue<bool?>(Columns.IsMoni); }
			set { SetColumnValue(Columns.IsMoni, value); }
		}
		[DataMember]
		public bool? IsTakeOver {
			get { return GetColumnValue<bool?>(Columns.IsTakeOver); }
			set { SetColumnValue(Columns.IsTakeOver, value); }
		}
		[DataMember]
		public bool? IsOwner {
			get { return GetColumnValue<bool?>(Columns.IsOwner); }
			set { SetColumnValue(Columns.IsOwner, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return InvoiceID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn InvoiceIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ActivationFeeItemIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ActivationFeeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ActivationFeeActualColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MonthlyMonitoringRateItemIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MonthlyMonitoringRateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn MonthlyMonitoringRateActualColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PaymentTypeIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn BillingDayColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn AlarmComPackageIdColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn AlarmComPackageItemIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CellVendorIdColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn Over3MonthsColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CellularTypeIdColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn PanelTypeIdColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ContractIdColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn IsMoniColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsTakeOverColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsOwnerColumn
		{
			get { return Schema.Columns[20]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string InvoiceID = @"InvoiceID";
			public const string AccountId = @"AccountId";
			public const string ActivationFeeItemId = @"ActivationFeeItemId";
			public const string ActivationFee = @"ActivationFee";
			public const string ActivationFeeActual = @"ActivationFeeActual";
			public const string MonthlyMonitoringRateItemId = @"MonthlyMonitoringRateItemId";
			public const string MonthlyMonitoringRate = @"MonthlyMonitoringRate";
			public const string MonthlyMonitoringRateActual = @"MonthlyMonitoringRateActual";
			public const string PaymentTypeId = @"PaymentTypeId";
			public const string BillingDay = @"BillingDay";
			public const string Email = @"Email";
			public const string AlarmComPackageId = @"AlarmComPackageId";
			public const string AlarmComPackageItemId = @"AlarmComPackageItemId";
			public const string CellVendorId = @"CellVendorId";
			public const string Over3Months = @"Over3Months";
			public const string CellularTypeId = @"CellularTypeId";
			public const string PanelTypeId = @"PanelTypeId";
			public const string ContractId = @"ContractId";
			public const string IsMoni = @"IsMoni";
			public const string IsTakeOver = @"IsTakeOver";
			public const string IsOwner = @"IsOwner";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AE_PaymentFullView class.
	/// </summary>
	[DataContract]
	public partial class AE_PaymentFullViewCollection : ReadOnlyList<AE_PaymentFullView, AE_PaymentFullViewCollection>
	{
		public static AE_PaymentFullViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_PaymentFullViewCollection result = new AE_PaymentFullViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAE_PaymentFull view.
	/// </summary>
	[DataContract]
	public partial class AE_PaymentFullView : ReadOnlyRecord<AE_PaymentFullView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAE_PaymentFull", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPaymentID = new TableSchema.TableColumn(schema);
				colvarPaymentID.ColumnName = "PaymentID";
				colvarPaymentID.DataType = DbType.Int64;
				colvarPaymentID.MaxLength = 0;
				colvarPaymentID.AutoIncrement = false;
				colvarPaymentID.IsNullable = false;
				colvarPaymentID.IsPrimaryKey = false;
				colvarPaymentID.IsForeignKey = false;
				colvarPaymentID.IsReadOnly = false;
				colvarPaymentID.DefaultSetting = @"";
				colvarPaymentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentID);

				TableSchema.TableColumn colvarPaymentTypeId = new TableSchema.TableColumn(schema);
				colvarPaymentTypeId.ColumnName = "PaymentTypeId";
				colvarPaymentTypeId.DataType = DbType.AnsiString;
				colvarPaymentTypeId.MaxLength = 20;
				colvarPaymentTypeId.AutoIncrement = false;
				colvarPaymentTypeId.IsNullable = false;
				colvarPaymentTypeId.IsPrimaryKey = false;
				colvarPaymentTypeId.IsForeignKey = false;
				colvarPaymentTypeId.IsReadOnly = false;
				colvarPaymentTypeId.DefaultSetting = @"";
				colvarPaymentTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentTypeId);

				TableSchema.TableColumn colvarInvoiceID = new TableSchema.TableColumn(schema);
				colvarInvoiceID.ColumnName = "InvoiceID";
				colvarInvoiceID.DataType = DbType.Int64;
				colvarInvoiceID.MaxLength = 0;
				colvarInvoiceID.AutoIncrement = false;
				colvarInvoiceID.IsNullable = false;
				colvarInvoiceID.IsPrimaryKey = false;
				colvarInvoiceID.IsForeignKey = false;
				colvarInvoiceID.IsReadOnly = false;
				colvarInvoiceID.DefaultSetting = @"";
				colvarInvoiceID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceID);

				TableSchema.TableColumn colvarInvoiceTypeID = new TableSchema.TableColumn(schema);
				colvarInvoiceTypeID.ColumnName = "InvoiceTypeID";
				colvarInvoiceTypeID.DataType = DbType.AnsiString;
				colvarInvoiceTypeID.MaxLength = 20;
				colvarInvoiceTypeID.AutoIncrement = false;
				colvarInvoiceTypeID.IsNullable = false;
				colvarInvoiceTypeID.IsPrimaryKey = false;
				colvarInvoiceTypeID.IsForeignKey = false;
				colvarInvoiceTypeID.IsReadOnly = false;
				colvarInvoiceTypeID.DefaultSetting = @"";
				colvarInvoiceTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceTypeID);

				TableSchema.TableColumn colvarInvoiceType = new TableSchema.TableColumn(schema);
				colvarInvoiceType.ColumnName = "InvoiceType";
				colvarInvoiceType.DataType = DbType.String;
				colvarInvoiceType.MaxLength = 50;
				colvarInvoiceType.AutoIncrement = false;
				colvarInvoiceType.IsNullable = false;
				colvarInvoiceType.IsPrimaryKey = false;
				colvarInvoiceType.IsForeignKey = false;
				colvarInvoiceType.IsReadOnly = false;
				colvarInvoiceType.DefaultSetting = @"";
				colvarInvoiceType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceType);

				TableSchema.TableColumn colvarOriginalTransactionAmount = new TableSchema.TableColumn(schema);
				colvarOriginalTransactionAmount.ColumnName = "OriginalTransactionAmount";
				colvarOriginalTransactionAmount.DataType = DbType.Currency;
				colvarOriginalTransactionAmount.MaxLength = 0;
				colvarOriginalTransactionAmount.AutoIncrement = false;
				colvarOriginalTransactionAmount.IsNullable = false;
				colvarOriginalTransactionAmount.IsPrimaryKey = false;
				colvarOriginalTransactionAmount.IsForeignKey = false;
				colvarOriginalTransactionAmount.IsReadOnly = false;
				colvarOriginalTransactionAmount.DefaultSetting = @"";
				colvarOriginalTransactionAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginalTransactionAmount);

				TableSchema.TableColumn colvarCurrentTransactionAmount = new TableSchema.TableColumn(schema);
				colvarCurrentTransactionAmount.ColumnName = "CurrentTransactionAmount";
				colvarCurrentTransactionAmount.DataType = DbType.Currency;
				colvarCurrentTransactionAmount.MaxLength = 0;
				colvarCurrentTransactionAmount.AutoIncrement = false;
				colvarCurrentTransactionAmount.IsNullable = true;
				colvarCurrentTransactionAmount.IsPrimaryKey = false;
				colvarCurrentTransactionAmount.IsForeignKey = false;
				colvarCurrentTransactionAmount.IsReadOnly = false;
				colvarCurrentTransactionAmount.DefaultSetting = @"";
				colvarCurrentTransactionAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentTransactionAmount);

				TableSchema.TableColumn colvarSalesAmount = new TableSchema.TableColumn(schema);
				colvarSalesAmount.ColumnName = "SalesAmount";
				colvarSalesAmount.DataType = DbType.Currency;
				colvarSalesAmount.MaxLength = 0;
				colvarSalesAmount.AutoIncrement = false;
				colvarSalesAmount.IsNullable = false;
				colvarSalesAmount.IsPrimaryKey = false;
				colvarSalesAmount.IsForeignKey = false;
				colvarSalesAmount.IsReadOnly = false;
				colvarSalesAmount.DefaultSetting = @"";
				colvarSalesAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesAmount);

				TableSchema.TableColumn colvarTaxAmount = new TableSchema.TableColumn(schema);
				colvarTaxAmount.ColumnName = "TaxAmount";
				colvarTaxAmount.DataType = DbType.Currency;
				colvarTaxAmount.MaxLength = 0;
				colvarTaxAmount.AutoIncrement = false;
				colvarTaxAmount.IsNullable = false;
				colvarTaxAmount.IsPrimaryKey = false;
				colvarTaxAmount.IsForeignKey = false;
				colvarTaxAmount.IsReadOnly = false;
				colvarTaxAmount.DefaultSetting = @"";
				colvarTaxAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxAmount);

				TableSchema.TableColumn colvarInvoicePaymentJoinID = new TableSchema.TableColumn(schema);
				colvarInvoicePaymentJoinID.ColumnName = "InvoicePaymentJoinID";
				colvarInvoicePaymentJoinID.DataType = DbType.Int64;
				colvarInvoicePaymentJoinID.MaxLength = 0;
				colvarInvoicePaymentJoinID.AutoIncrement = false;
				colvarInvoicePaymentJoinID.IsNullable = false;
				colvarInvoicePaymentJoinID.IsPrimaryKey = false;
				colvarInvoicePaymentJoinID.IsForeignKey = false;
				colvarInvoicePaymentJoinID.IsReadOnly = false;
				colvarInvoicePaymentJoinID.DefaultSetting = @"";
				colvarInvoicePaymentJoinID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoicePaymentJoinID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarTransactionSuccess = new TableSchema.TableColumn(schema);
				colvarTransactionSuccess.ColumnName = "TransactionSuccess";
				colvarTransactionSuccess.DataType = DbType.Boolean;
				colvarTransactionSuccess.MaxLength = 0;
				colvarTransactionSuccess.AutoIncrement = false;
				colvarTransactionSuccess.IsNullable = true;
				colvarTransactionSuccess.IsPrimaryKey = false;
				colvarTransactionSuccess.IsForeignKey = false;
				colvarTransactionSuccess.IsReadOnly = false;
				colvarTransactionSuccess.DefaultSetting = @"";
				colvarTransactionSuccess.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionSuccess);

				TableSchema.TableColumn colvarDocDate = new TableSchema.TableColumn(schema);
				colvarDocDate.ColumnName = "DocDate";
				colvarDocDate.DataType = DbType.DateTime;
				colvarDocDate.MaxLength = 0;
				colvarDocDate.AutoIncrement = false;
				colvarDocDate.IsNullable = false;
				colvarDocDate.IsPrimaryKey = false;
				colvarDocDate.IsForeignKey = false;
				colvarDocDate.IsReadOnly = false;
				colvarDocDate.DefaultSetting = @"";
				colvarDocDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocDate);

				TableSchema.TableColumn colvarPostedDate = new TableSchema.TableColumn(schema);
				colvarPostedDate.ColumnName = "PostedDate";
				colvarPostedDate.DataType = DbType.DateTime;
				colvarPostedDate.MaxLength = 0;
				colvarPostedDate.AutoIncrement = false;
				colvarPostedDate.IsNullable = true;
				colvarPostedDate.IsPrimaryKey = false;
				colvarPostedDate.IsForeignKey = false;
				colvarPostedDate.IsReadOnly = false;
				colvarPostedDate.DefaultSetting = @"";
				colvarPostedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostedDate);

				TableSchema.TableColumn colvarActualTransactionAmount = new TableSchema.TableColumn(schema);
				colvarActualTransactionAmount.ColumnName = "ActualTransactionAmount";
				colvarActualTransactionAmount.DataType = DbType.Currency;
				colvarActualTransactionAmount.MaxLength = 0;
				colvarActualTransactionAmount.AutoIncrement = false;
				colvarActualTransactionAmount.IsNullable = true;
				colvarActualTransactionAmount.IsPrimaryKey = false;
				colvarActualTransactionAmount.IsForeignKey = false;
				colvarActualTransactionAmount.IsReadOnly = false;
				colvarActualTransactionAmount.DefaultSetting = @"";
				colvarActualTransactionAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualTransactionAmount);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAE_PaymentFull",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AE_PaymentFullView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long PaymentID {
			get { return GetColumnValue<long>(Columns.PaymentID); }
			set { SetColumnValue(Columns.PaymentID, value); }
		}
		[DataMember]
		public string PaymentTypeId {
			get { return GetColumnValue<string>(Columns.PaymentTypeId); }
			set { SetColumnValue(Columns.PaymentTypeId, value); }
		}
		[DataMember]
		public long InvoiceID {
			get { return GetColumnValue<long>(Columns.InvoiceID); }
			set { SetColumnValue(Columns.InvoiceID, value); }
		}
		[DataMember]
		public string InvoiceTypeID {
			get { return GetColumnValue<string>(Columns.InvoiceTypeID); }
			set { SetColumnValue(Columns.InvoiceTypeID, value); }
		}
		[DataMember]
		public string InvoiceType {
			get { return GetColumnValue<string>(Columns.InvoiceType); }
			set { SetColumnValue(Columns.InvoiceType, value); }
		}
		[DataMember]
		public decimal OriginalTransactionAmount {
			get { return GetColumnValue<decimal>(Columns.OriginalTransactionAmount); }
			set { SetColumnValue(Columns.OriginalTransactionAmount, value); }
		}
		[DataMember]
		public decimal? CurrentTransactionAmount {
			get { return GetColumnValue<decimal?>(Columns.CurrentTransactionAmount); }
			set { SetColumnValue(Columns.CurrentTransactionAmount, value); }
		}
		[DataMember]
		public decimal SalesAmount {
			get { return GetColumnValue<decimal>(Columns.SalesAmount); }
			set { SetColumnValue(Columns.SalesAmount, value); }
		}
		[DataMember]
		public decimal TaxAmount {
			get { return GetColumnValue<decimal>(Columns.TaxAmount); }
			set { SetColumnValue(Columns.TaxAmount, value); }
		}
		[DataMember]
		public long InvoicePaymentJoinID {
			get { return GetColumnValue<long>(Columns.InvoicePaymentJoinID); }
			set { SetColumnValue(Columns.InvoicePaymentJoinID, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public bool? TransactionSuccess {
			get { return GetColumnValue<bool?>(Columns.TransactionSuccess); }
			set { SetColumnValue(Columns.TransactionSuccess, value); }
		}
		[DataMember]
		public DateTime DocDate {
			get { return GetColumnValue<DateTime>(Columns.DocDate); }
			set { SetColumnValue(Columns.DocDate, value); }
		}
		[DataMember]
		public DateTime? PostedDate {
			get { return GetColumnValue<DateTime?>(Columns.PostedDate); }
			set { SetColumnValue(Columns.PostedDate, value); }
		}
		[DataMember]
		public decimal? ActualTransactionAmount {
			get { return GetColumnValue<decimal?>(Columns.ActualTransactionAmount); }
			set { SetColumnValue(Columns.ActualTransactionAmount, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return PaymentTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PaymentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PaymentTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn InvoiceIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn InvoiceTypeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn InvoiceTypeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn OriginalTransactionAmountColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CurrentTransactionAmountColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn SalesAmountColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn TaxAmountColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn InvoicePaymentJoinIDColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn TransactionSuccessColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn DocDateColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn PostedDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ActualTransactionAmountColumn
		{
			get { return Schema.Columns[14]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string PaymentID = @"PaymentID";
			public const string PaymentTypeId = @"PaymentTypeId";
			public const string InvoiceID = @"InvoiceID";
			public const string InvoiceTypeID = @"InvoiceTypeID";
			public const string InvoiceType = @"InvoiceType";
			public const string OriginalTransactionAmount = @"OriginalTransactionAmount";
			public const string CurrentTransactionAmount = @"CurrentTransactionAmount";
			public const string SalesAmount = @"SalesAmount";
			public const string TaxAmount = @"TaxAmount";
			public const string InvoicePaymentJoinID = @"InvoicePaymentJoinID";
			public const string AccountId = @"AccountId";
			public const string TransactionSuccess = @"TransactionSuccess";
			public const string DocDate = @"DocDate";
			public const string PostedDate = @"PostedDate";
			public const string ActualTransactionAmount = @"ActualTransactionAmount";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the AeCustomersMsPrimaryView class.
	/// </summary>
	[DataContract]
	public partial class AeCustomersMsPrimaryViewCollection : ReadOnlyList<AeCustomersMsPrimaryView, AeCustomersMsPrimaryViewCollection>
	{
		public static AeCustomersMsPrimaryViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AeCustomersMsPrimaryViewCollection result = new AeCustomersMsPrimaryViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwAeCustomersMsPrimary view.
	/// </summary>
	[DataContract]
	public partial class AeCustomersMsPrimaryView : ReadOnlyRecord<AeCustomersMsPrimaryView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwAeCustomersMsPrimary", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int64;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = false;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"";
				colvarCustomerTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerTypeId);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = false;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = false;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarLocalizationId = new TableSchema.TableColumn(schema);
				colvarLocalizationId.ColumnName = "LocalizationId";
				colvarLocalizationId.DataType = DbType.AnsiString;
				colvarLocalizationId.MaxLength = 20;
				colvarLocalizationId.AutoIncrement = false;
				colvarLocalizationId.IsNullable = false;
				colvarLocalizationId.IsPrimaryKey = false;
				colvarLocalizationId.IsForeignKey = false;
				colvarLocalizationId.IsReadOnly = false;
				colvarLocalizationId.DefaultSetting = @"";
				colvarLocalizationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocalizationId);

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.String;
				colvarPrefix.MaxLength = 50;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = true;
				colvarPrefix.IsPrimaryKey = false;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPostfix = new TableSchema.TableColumn(schema);
				colvarPostfix.ColumnName = "Postfix";
				colvarPostfix.DataType = DbType.String;
				colvarPostfix.MaxLength = 50;
				colvarPostfix.AutoIncrement = false;
				colvarPostfix.IsNullable = true;
				colvarPostfix.IsPrimaryKey = false;
				colvarPostfix.IsForeignKey = false;
				colvarPostfix.IsReadOnly = false;
				colvarPostfix.DefaultSetting = @"";
				colvarPostfix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostfix);

				TableSchema.TableColumn colvarBusinessName = new TableSchema.TableColumn(schema);
				colvarBusinessName.ColumnName = "BusinessName";
				colvarBusinessName.DataType = DbType.String;
				colvarBusinessName.MaxLength = 50;
				colvarBusinessName.AutoIncrement = false;
				colvarBusinessName.IsNullable = true;
				colvarBusinessName.IsPrimaryKey = false;
				colvarBusinessName.IsForeignKey = false;
				colvarBusinessName.IsReadOnly = false;
				colvarBusinessName.DefaultSetting = @"";
				colvarBusinessName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBusinessName);

				TableSchema.TableColumn colvarGender = new TableSchema.TableColumn(schema);
				colvarGender.ColumnName = "Gender";
				colvarGender.DataType = DbType.String;
				colvarGender.MaxLength = 10;
				colvarGender.AutoIncrement = false;
				colvarGender.IsNullable = false;
				colvarGender.IsPrimaryKey = false;
				colvarGender.IsForeignKey = false;
				colvarGender.IsReadOnly = false;
				colvarGender.DefaultSetting = @"";
				colvarGender.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGender);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.AnsiString;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.AnsiString;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.AnsiString;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwAeCustomersMsPrimary",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public AeCustomersMsPrimaryView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public long CustomerID {
			get { return GetColumnValue<long>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set { SetColumnValue(Columns.CustomerTypeId, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set { SetColumnValue(Columns.DealerId, value); }
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set { SetColumnValue(Columns.AddressId, value); }
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set { SetColumnValue(Columns.LeadId, value); }
		}
		[DataMember]
		public string LocalizationId {
			get { return GetColumnValue<string>(Columns.LocalizationId); }
			set { SetColumnValue(Columns.LocalizationId, value); }
		}
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set { SetColumnValue(Columns.Prefix, value); }
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set { SetColumnValue(Columns.MiddleName, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string Postfix {
			get { return GetColumnValue<string>(Columns.Postfix); }
			set { SetColumnValue(Columns.Postfix, value); }
		}
		[DataMember]
		public string BusinessName {
			get { return GetColumnValue<string>(Columns.BusinessName); }
			set { SetColumnValue(Columns.BusinessName, value); }
		}
		[DataMember]
		public string Gender {
			get { return GetColumnValue<string>(Columns.Gender); }
			set { SetColumnValue(Columns.Gender, value); }
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set { SetColumnValue(Columns.PhoneHome, value); }
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set { SetColumnValue(Columns.PhoneWork, value); }
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set { SetColumnValue(Columns.PhoneMobile, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set { SetColumnValue(Columns.DOB, value); }
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set { SetColumnValue(Columns.SSN, value); }
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set { SetColumnValue(Columns.Username, value); }
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set { SetColumnValue(Columns.Password, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set { SetColumnValue(Columns.DEX_ROW_TS, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return AccountId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn LocalizationIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn PostfixColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn BusinessNameColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn GenderColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[29]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string AccountId = @"AccountId";
			public const string CustomerID = @"CustomerID";
			public const string CustomerTypeId = @"CustomerTypeId";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string DealerId = @"DealerId";
			public const string AddressId = @"AddressId";
			public const string LeadId = @"LeadId";
			public const string LocalizationId = @"LocalizationId";
			public const string Prefix = @"Prefix";
			public const string FirstName = @"FirstName";
			public const string MiddleName = @"MiddleName";
			public const string LastName = @"LastName";
			public const string Postfix = @"Postfix";
			public const string BusinessName = @"BusinessName";
			public const string Gender = @"Gender";
			public const string PhoneHome = @"PhoneHome";
			public const string PhoneWork = @"PhoneWork";
			public const string PhoneMobile = @"PhoneMobile";
			public const string Email = @"Email";
			public const string DOB = @"DOB";
			public const string SSN = @"SSN";
			public const string Username = @"Username";
			public const string Password = @"Password";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
			public const string ModifiedOn = @"ModifiedOn";
			public const string ModifiedBy = @"ModifiedBy";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
			public const string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the BX_BarcodesView class.
	/// </summary>
	[DataContract]
	public partial class BX_BarcodesViewCollection : ReadOnlyList<BX_BarcodesView, BX_BarcodesViewCollection>
	{
		public static BX_BarcodesViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BX_BarcodesViewCollection result = new BX_BarcodesViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwBX_Barcodes view.
	/// </summary>
	[DataContract]
	public partial class BX_BarcodesView : ReadOnlyRecord<BX_BarcodesView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwBX_Barcodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBarcodeID = new TableSchema.TableColumn(schema);
				colvarBarcodeID.ColumnName = "BarcodeID";
				colvarBarcodeID.DataType = DbType.Int64;
				colvarBarcodeID.MaxLength = 0;
				colvarBarcodeID.AutoIncrement = false;
				colvarBarcodeID.IsNullable = false;
				colvarBarcodeID.IsPrimaryKey = false;
				colvarBarcodeID.IsForeignKey = false;
				colvarBarcodeID.IsReadOnly = false;
				colvarBarcodeID.DefaultSetting = @"";
				colvarBarcodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeID);

				TableSchema.TableColumn colvarBarcodeTypeId = new TableSchema.TableColumn(schema);
				colvarBarcodeTypeId.ColumnName = "BarcodeTypeId";
				colvarBarcodeTypeId.DataType = DbType.AnsiStringFixedLength;
				colvarBarcodeTypeId.MaxLength = 8;
				colvarBarcodeTypeId.AutoIncrement = false;
				colvarBarcodeTypeId.IsNullable = false;
				colvarBarcodeTypeId.IsPrimaryKey = false;
				colvarBarcodeTypeId.IsForeignKey = false;
				colvarBarcodeTypeId.IsReadOnly = false;
				colvarBarcodeTypeId.DefaultSetting = @"";
				colvarBarcodeTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeTypeId);

				TableSchema.TableColumn colvarForeignKey = new TableSchema.TableColumn(schema);
				colvarForeignKey.ColumnName = "ForeignKey";
				colvarForeignKey.DataType = DbType.AnsiString;
				colvarForeignKey.MaxLength = 50;
				colvarForeignKey.AutoIncrement = false;
				colvarForeignKey.IsNullable = false;
				colvarForeignKey.IsPrimaryKey = false;
				colvarForeignKey.IsForeignKey = false;
				colvarForeignKey.IsReadOnly = false;
				colvarForeignKey.DefaultSetting = @"";
				colvarForeignKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForeignKey);

				TableSchema.TableColumn colvarBarcodeNumber = new TableSchema.TableColumn(schema);
				colvarBarcodeNumber.ColumnName = "BarcodeNumber";
				colvarBarcodeNumber.DataType = DbType.String;
				colvarBarcodeNumber.MaxLength = 30;
				colvarBarcodeNumber.AutoIncrement = false;
				colvarBarcodeNumber.IsNullable = false;
				colvarBarcodeNumber.IsPrimaryKey = false;
				colvarBarcodeNumber.IsForeignKey = false;
				colvarBarcodeNumber.IsReadOnly = false;
				colvarBarcodeNumber.DefaultSetting = @"";
				colvarBarcodeNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeNumber);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarVersion = new TableSchema.TableColumn(schema);
				colvarVersion.ColumnName = "Version";
				colvarVersion.DataType = DbType.AnsiStringFixedLength;
				colvarVersion.MaxLength = 3;
				colvarVersion.AutoIncrement = false;
				colvarVersion.IsNullable = false;
				colvarVersion.IsPrimaryKey = false;
				colvarVersion.IsForeignKey = false;
				colvarVersion.IsReadOnly = false;
				colvarVersion.DefaultSetting = @"";
				colvarVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersion);

				TableSchema.TableColumn colvarPrinterName = new TableSchema.TableColumn(schema);
				colvarPrinterName.ColumnName = "PrinterName";
				colvarPrinterName.DataType = DbType.String;
				colvarPrinterName.MaxLength = 50;
				colvarPrinterName.AutoIncrement = false;
				colvarPrinterName.IsNullable = false;
				colvarPrinterName.IsPrimaryKey = false;
				colvarPrinterName.IsForeignKey = false;
				colvarPrinterName.IsReadOnly = false;
				colvarPrinterName.DefaultSetting = @"";
				colvarPrinterName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterName);

				TableSchema.TableColumn colvarDocName = new TableSchema.TableColumn(schema);
				colvarDocName.ColumnName = "DocName";
				colvarDocName.DataType = DbType.String;
				colvarDocName.MaxLength = 50;
				colvarDocName.AutoIncrement = false;
				colvarDocName.IsNullable = false;
				colvarDocName.IsPrimaryKey = false;
				colvarDocName.IsForeignKey = false;
				colvarDocName.IsReadOnly = false;
				colvarDocName.DefaultSetting = @"";
				colvarDocName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwBX_Barcodes",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public BX_BarcodesView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long BarcodeID {
			get { return GetColumnValue<long>(Columns.BarcodeID); }
			set { SetColumnValue(Columns.BarcodeID, value); }
		}
		[DataMember]
		public string BarcodeTypeId {
			get { return GetColumnValue<string>(Columns.BarcodeTypeId); }
			set { SetColumnValue(Columns.BarcodeTypeId, value); }
		}
		[DataMember]
		public string ForeignKey {
			get { return GetColumnValue<string>(Columns.ForeignKey); }
			set { SetColumnValue(Columns.ForeignKey, value); }
		}
		[DataMember]
		public string BarcodeNumber {
			get { return GetColumnValue<string>(Columns.BarcodeNumber); }
			set { SetColumnValue(Columns.BarcodeNumber, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public string Version {
			get { return GetColumnValue<string>(Columns.Version); }
			set { SetColumnValue(Columns.Version, value); }
		}
		[DataMember]
		public string PrinterName {
			get { return GetColumnValue<string>(Columns.PrinterName); }
			set { SetColumnValue(Columns.PrinterName, value); }
		}
		[DataMember]
		public string DocName {
			get { return GetColumnValue<string>(Columns.DocName); }
			set { SetColumnValue(Columns.DocName, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return BarcodeTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BarcodeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BarcodeTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ForeignKeyColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BarcodeNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn VersionColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PrinterNameColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DocNameColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string BarcodeID = @"BarcodeID";
			public const string BarcodeTypeId = @"BarcodeTypeId";
			public const string ForeignKey = @"ForeignKey";
			public const string BarcodeNumber = @"BarcodeNumber";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
			public const string Version = @"Version";
			public const string PrinterName = @"PrinterName";
			public const string DocName = @"DocName";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the BX_BarcodeTypesAMAAndNOCView class.
	/// </summary>
	[DataContract]
	public partial class BX_BarcodeTypesAMAAndNOCViewCollection : ReadOnlyList<BX_BarcodeTypesAMAAndNOCView, BX_BarcodeTypesAMAAndNOCViewCollection>
	{
		public static BX_BarcodeTypesAMAAndNOCViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BX_BarcodeTypesAMAAndNOCViewCollection result = new BX_BarcodeTypesAMAAndNOCViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwBX_BarcodeTypesAMAAndNOC view.
	/// </summary>
	[DataContract]
	public partial class BX_BarcodeTypesAMAAndNOCView : ReadOnlyRecord<BX_BarcodeTypesAMAAndNOCView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwBX_BarcodeTypesAMAAndNOC", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = true;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarAMABarcodeNumber = new TableSchema.TableColumn(schema);
				colvarAMABarcodeNumber.ColumnName = "AMABarcodeNumber";
				colvarAMABarcodeNumber.DataType = DbType.AnsiString;
				colvarAMABarcodeNumber.MaxLength = 30;
				colvarAMABarcodeNumber.AutoIncrement = false;
				colvarAMABarcodeNumber.IsNullable = true;
				colvarAMABarcodeNumber.IsPrimaryKey = false;
				colvarAMABarcodeNumber.IsForeignKey = false;
				colvarAMABarcodeNumber.IsReadOnly = false;
				colvarAMABarcodeNumber.DefaultSetting = @"";
				colvarAMABarcodeNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAMABarcodeNumber);

				TableSchema.TableColumn colvarAMABarcodeID = new TableSchema.TableColumn(schema);
				colvarAMABarcodeID.ColumnName = "AMABarcodeID";
				colvarAMABarcodeID.DataType = DbType.Int64;
				colvarAMABarcodeID.MaxLength = 0;
				colvarAMABarcodeID.AutoIncrement = false;
				colvarAMABarcodeID.IsNullable = true;
				colvarAMABarcodeID.IsPrimaryKey = false;
				colvarAMABarcodeID.IsForeignKey = false;
				colvarAMABarcodeID.IsReadOnly = false;
				colvarAMABarcodeID.DefaultSetting = @"";
				colvarAMABarcodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAMABarcodeID);

				TableSchema.TableColumn colvarNOCBarcodeNumber = new TableSchema.TableColumn(schema);
				colvarNOCBarcodeNumber.ColumnName = "NOCBarcodeNumber";
				colvarNOCBarcodeNumber.DataType = DbType.AnsiString;
				colvarNOCBarcodeNumber.MaxLength = 30;
				colvarNOCBarcodeNumber.AutoIncrement = false;
				colvarNOCBarcodeNumber.IsNullable = true;
				colvarNOCBarcodeNumber.IsPrimaryKey = false;
				colvarNOCBarcodeNumber.IsForeignKey = false;
				colvarNOCBarcodeNumber.IsReadOnly = false;
				colvarNOCBarcodeNumber.DefaultSetting = @"";
				colvarNOCBarcodeNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOCBarcodeNumber);

				TableSchema.TableColumn colvarNOCBarcodeID = new TableSchema.TableColumn(schema);
				colvarNOCBarcodeID.ColumnName = "NOCBarcodeID";
				colvarNOCBarcodeID.DataType = DbType.Int64;
				colvarNOCBarcodeID.MaxLength = 0;
				colvarNOCBarcodeID.AutoIncrement = false;
				colvarNOCBarcodeID.IsNullable = true;
				colvarNOCBarcodeID.IsPrimaryKey = false;
				colvarNOCBarcodeID.IsForeignKey = false;
				colvarNOCBarcodeID.IsReadOnly = false;
				colvarNOCBarcodeID.DefaultSetting = @"";
				colvarNOCBarcodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOCBarcodeID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwBX_BarcodeTypesAMAAndNOC",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public BX_BarcodeTypesAMAAndNOCView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long? AccountID {
			get { return GetColumnValue<long?>(Columns.AccountID); }
			set { SetColumnValue(Columns.AccountID, value); }
		}
		[DataMember]
		public string AMABarcodeNumber {
			get { return GetColumnValue<string>(Columns.AMABarcodeNumber); }
			set { SetColumnValue(Columns.AMABarcodeNumber, value); }
		}
		[DataMember]
		public long? AMABarcodeID {
			get { return GetColumnValue<long?>(Columns.AMABarcodeID); }
			set { SetColumnValue(Columns.AMABarcodeID, value); }
		}
		[DataMember]
		public string NOCBarcodeNumber {
			get { return GetColumnValue<string>(Columns.NOCBarcodeNumber); }
			set { SetColumnValue(Columns.NOCBarcodeNumber, value); }
		}
		[DataMember]
		public long? NOCBarcodeID {
			get { return GetColumnValue<long?>(Columns.NOCBarcodeID); }
			set { SetColumnValue(Columns.NOCBarcodeID, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return AMABarcodeNumber;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AMABarcodeNumberColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AMABarcodeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn NOCBarcodeNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn NOCBarcodeIDColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string AccountID = @"AccountID";
			public const string AMABarcodeNumber = @"AMABarcodeNumber";
			public const string AMABarcodeID = @"AMABarcodeID";
			public const string NOCBarcodeNumber = @"NOCBarcodeNumber";
			public const string NOCBarcodeID = @"NOCBarcodeID";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the BX_DocumentFieldsAMNXS001View class.
	/// </summary>
	[DataContract]
	public partial class BX_DocumentFieldsAMNXS001ViewCollection : ReadOnlyList<BX_DocumentFieldsAMNXS001View, BX_DocumentFieldsAMNXS001ViewCollection>
	{
		public static BX_DocumentFieldsAMNXS001ViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BX_DocumentFieldsAMNXS001ViewCollection result = new BX_DocumentFieldsAMNXS001ViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwBX_DocumentFieldsAMNXS001 view.
	/// </summary>
	[DataContract]
	public partial class BX_DocumentFieldsAMNXS001View : ReadOnlyRecord<BX_DocumentFieldsAMNXS001View>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwBX_DocumentFieldsAMNXS001", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarBillingCustomerID = new TableSchema.TableColumn(schema);
				colvarBillingCustomerID.ColumnName = "BillingCustomerID";
				colvarBillingCustomerID.DataType = DbType.Int64;
				colvarBillingCustomerID.MaxLength = 0;
				colvarBillingCustomerID.AutoIncrement = false;
				colvarBillingCustomerID.IsNullable = true;
				colvarBillingCustomerID.IsPrimaryKey = false;
				colvarBillingCustomerID.IsForeignKey = false;
				colvarBillingCustomerID.IsReadOnly = false;
				colvarBillingCustomerID.DefaultSetting = @"";
				colvarBillingCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingCustomerID);

				TableSchema.TableColumn colvarCustomerOwnerID = new TableSchema.TableColumn(schema);
				colvarCustomerOwnerID.ColumnName = "CustomerOwnerID";
				colvarCustomerOwnerID.DataType = DbType.Int64;
				colvarCustomerOwnerID.MaxLength = 0;
				colvarCustomerOwnerID.AutoIncrement = false;
				colvarCustomerOwnerID.IsNullable = false;
				colvarCustomerOwnerID.IsPrimaryKey = false;
				colvarCustomerOwnerID.IsForeignKey = false;
				colvarCustomerOwnerID.IsReadOnly = false;
				colvarCustomerOwnerID.DefaultSetting = @"";
				colvarCustomerOwnerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerOwnerID);

				TableSchema.TableColumn colvarCustomerSpouseID = new TableSchema.TableColumn(schema);
				colvarCustomerSpouseID.ColumnName = "CustomerSpouseID";
				colvarCustomerSpouseID.DataType = DbType.Int64;
				colvarCustomerSpouseID.MaxLength = 0;
				colvarCustomerSpouseID.AutoIncrement = false;
				colvarCustomerSpouseID.IsNullable = true;
				colvarCustomerSpouseID.IsPrimaryKey = false;
				colvarCustomerSpouseID.IsForeignKey = false;
				colvarCustomerSpouseID.IsReadOnly = false;
				colvarCustomerSpouseID.DefaultSetting = @"";
				colvarCustomerSpouseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerSpouseID);

				TableSchema.TableColumn colvarAccountNumber = new TableSchema.TableColumn(schema);
				colvarAccountNumber.ColumnName = "AccountNumber";
				colvarAccountNumber.DataType = DbType.AnsiString;
				colvarAccountNumber.MaxLength = 60;
				colvarAccountNumber.AutoIncrement = false;
				colvarAccountNumber.IsNullable = true;
				colvarAccountNumber.IsPrimaryKey = false;
				colvarAccountNumber.IsForeignKey = false;
				colvarAccountNumber.IsReadOnly = false;
				colvarAccountNumber.DefaultSetting = @"";
				colvarAccountNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountNumber);

				TableSchema.TableColumn colvarOwnerFirstName = new TableSchema.TableColumn(schema);
				colvarOwnerFirstName.ColumnName = "OwnerFirstName";
				colvarOwnerFirstName.DataType = DbType.String;
				colvarOwnerFirstName.MaxLength = 250;
				colvarOwnerFirstName.AutoIncrement = false;
				colvarOwnerFirstName.IsNullable = true;
				colvarOwnerFirstName.IsPrimaryKey = false;
				colvarOwnerFirstName.IsForeignKey = false;
				colvarOwnerFirstName.IsReadOnly = false;
				colvarOwnerFirstName.DefaultSetting = @"";
				colvarOwnerFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerFirstName);

				TableSchema.TableColumn colvarOwnerLastName = new TableSchema.TableColumn(schema);
				colvarOwnerLastName.ColumnName = "OwnerLastName";
				colvarOwnerLastName.DataType = DbType.String;
				colvarOwnerLastName.MaxLength = 250;
				colvarOwnerLastName.AutoIncrement = false;
				colvarOwnerLastName.IsNullable = true;
				colvarOwnerLastName.IsPrimaryKey = false;
				colvarOwnerLastName.IsForeignKey = false;
				colvarOwnerLastName.IsReadOnly = false;
				colvarOwnerLastName.DefaultSetting = @"";
				colvarOwnerLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerLastName);

				TableSchema.TableColumn colvarSpouseFirstName = new TableSchema.TableColumn(schema);
				colvarSpouseFirstName.ColumnName = "SpouseFirstName";
				colvarSpouseFirstName.DataType = DbType.String;
				colvarSpouseFirstName.MaxLength = 250;
				colvarSpouseFirstName.AutoIncrement = false;
				colvarSpouseFirstName.IsNullable = true;
				colvarSpouseFirstName.IsPrimaryKey = false;
				colvarSpouseFirstName.IsForeignKey = false;
				colvarSpouseFirstName.IsReadOnly = false;
				colvarSpouseFirstName.DefaultSetting = @"";
				colvarSpouseFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpouseFirstName);

				TableSchema.TableColumn colvarSpouseLastName = new TableSchema.TableColumn(schema);
				colvarSpouseLastName.ColumnName = "SpouseLastName";
				colvarSpouseLastName.DataType = DbType.String;
				colvarSpouseLastName.MaxLength = 250;
				colvarSpouseLastName.AutoIncrement = false;
				colvarSpouseLastName.IsNullable = true;
				colvarSpouseLastName.IsPrimaryKey = false;
				colvarSpouseLastName.IsForeignKey = false;
				colvarSpouseLastName.IsReadOnly = false;
				colvarSpouseLastName.DefaultSetting = @"";
				colvarSpouseLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpouseLastName);

				TableSchema.TableColumn colvarEffDateMM = new TableSchema.TableColumn(schema);
				colvarEffDateMM.ColumnName = "EffDateMM";
				colvarEffDateMM.DataType = DbType.AnsiString;
				colvarEffDateMM.MaxLength = 8000;
				colvarEffDateMM.AutoIncrement = false;
				colvarEffDateMM.IsNullable = true;
				colvarEffDateMM.IsPrimaryKey = false;
				colvarEffDateMM.IsForeignKey = false;
				colvarEffDateMM.IsReadOnly = false;
				colvarEffDateMM.DefaultSetting = @"";
				colvarEffDateMM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEffDateMM);

				TableSchema.TableColumn colvarEffDateDD = new TableSchema.TableColumn(schema);
				colvarEffDateDD.ColumnName = "EffDateDD";
				colvarEffDateDD.DataType = DbType.AnsiString;
				colvarEffDateDD.MaxLength = 8000;
				colvarEffDateDD.AutoIncrement = false;
				colvarEffDateDD.IsNullable = true;
				colvarEffDateDD.IsPrimaryKey = false;
				colvarEffDateDD.IsForeignKey = false;
				colvarEffDateDD.IsReadOnly = false;
				colvarEffDateDD.DefaultSetting = @"";
				colvarEffDateDD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEffDateDD);

				TableSchema.TableColumn colvarEffDateYY = new TableSchema.TableColumn(schema);
				colvarEffDateYY.ColumnName = "EffDateYY";
				colvarEffDateYY.DataType = DbType.AnsiString;
				colvarEffDateYY.MaxLength = 8000;
				colvarEffDateYY.AutoIncrement = false;
				colvarEffDateYY.IsNullable = true;
				colvarEffDateYY.IsPrimaryKey = false;
				colvarEffDateYY.IsForeignKey = false;
				colvarEffDateYY.IsReadOnly = false;
				colvarEffDateYY.DefaultSetting = @"";
				colvarEffDateYY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEffDateYY);

				TableSchema.TableColumn colvarExtendedServiceOption_Yes = new TableSchema.TableColumn(schema);
				colvarExtendedServiceOption_Yes.ColumnName = "ExtendedServiceOption_Yes";
				colvarExtendedServiceOption_Yes.DataType = DbType.AnsiString;
				colvarExtendedServiceOption_Yes.MaxLength = 3;
				colvarExtendedServiceOption_Yes.AutoIncrement = false;
				colvarExtendedServiceOption_Yes.IsNullable = true;
				colvarExtendedServiceOption_Yes.IsPrimaryKey = false;
				colvarExtendedServiceOption_Yes.IsForeignKey = false;
				colvarExtendedServiceOption_Yes.IsReadOnly = false;
				colvarExtendedServiceOption_Yes.DefaultSetting = @"";
				colvarExtendedServiceOption_Yes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtendedServiceOption_Yes);

				TableSchema.TableColumn colvarExtendedServiceOption_No = new TableSchema.TableColumn(schema);
				colvarExtendedServiceOption_No.ColumnName = "ExtendedServiceOption_No";
				colvarExtendedServiceOption_No.DataType = DbType.AnsiString;
				colvarExtendedServiceOption_No.MaxLength = 3;
				colvarExtendedServiceOption_No.AutoIncrement = false;
				colvarExtendedServiceOption_No.IsNullable = true;
				colvarExtendedServiceOption_No.IsPrimaryKey = false;
				colvarExtendedServiceOption_No.IsForeignKey = false;
				colvarExtendedServiceOption_No.IsReadOnly = false;
				colvarExtendedServiceOption_No.DefaultSetting = @"";
				colvarExtendedServiceOption_No.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtendedServiceOption_No);

				TableSchema.TableColumn colvarNameOfBusiness = new TableSchema.TableColumn(schema);
				colvarNameOfBusiness.ColumnName = "NameOfBusiness";
				colvarNameOfBusiness.DataType = DbType.String;
				colvarNameOfBusiness.MaxLength = 50;
				colvarNameOfBusiness.AutoIncrement = false;
				colvarNameOfBusiness.IsNullable = true;
				colvarNameOfBusiness.IsPrimaryKey = false;
				colvarNameOfBusiness.IsForeignKey = false;
				colvarNameOfBusiness.IsReadOnly = false;
				colvarNameOfBusiness.DefaultSetting = @"";
				colvarNameOfBusiness.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNameOfBusiness);

				TableSchema.TableColumn colvarSSO = new TableSchema.TableColumn(schema);
				colvarSSO.ColumnName = "SSO";
				colvarSSO.DataType = DbType.AnsiString;
				colvarSSO.MaxLength = 50;
				colvarSSO.AutoIncrement = false;
				colvarSSO.IsNullable = true;
				colvarSSO.IsPrimaryKey = false;
				colvarSSO.IsForeignKey = false;
				colvarSSO.IsReadOnly = false;
				colvarSSO.DefaultSetting = @"";
				colvarSSO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSO);

				TableSchema.TableColumn colvarSSR = new TableSchema.TableColumn(schema);
				colvarSSR.ColumnName = "SSR";
				colvarSSR.DataType = DbType.AnsiString;
				colvarSSR.MaxLength = 50;
				colvarSSR.AutoIncrement = false;
				colvarSSR.IsNullable = true;
				colvarSSR.IsPrimaryKey = false;
				colvarSSR.IsForeignKey = false;
				colvarSSR.IsReadOnly = false;
				colvarSSR.DefaultSetting = @"";
				colvarSSR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSR);

				TableSchema.TableColumn colvarPremiseAddressID = new TableSchema.TableColumn(schema);
				colvarPremiseAddressID.ColumnName = "PremiseAddressID";
				colvarPremiseAddressID.DataType = DbType.Int64;
				colvarPremiseAddressID.MaxLength = 0;
				colvarPremiseAddressID.AutoIncrement = false;
				colvarPremiseAddressID.IsNullable = false;
				colvarPremiseAddressID.IsPrimaryKey = false;
				colvarPremiseAddressID.IsForeignKey = false;
				colvarPremiseAddressID.IsReadOnly = false;
				colvarPremiseAddressID.DefaultSetting = @"";
				colvarPremiseAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiseAddressID);

				TableSchema.TableColumn colvarPremiseAddress = new TableSchema.TableColumn(schema);
				colvarPremiseAddress.ColumnName = "PremiseAddress";
				colvarPremiseAddress.DataType = DbType.String;
				colvarPremiseAddress.MaxLength = 102;
				colvarPremiseAddress.AutoIncrement = false;
				colvarPremiseAddress.IsNullable = true;
				colvarPremiseAddress.IsPrimaryKey = false;
				colvarPremiseAddress.IsForeignKey = false;
				colvarPremiseAddress.IsReadOnly = false;
				colvarPremiseAddress.DefaultSetting = @"";
				colvarPremiseAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiseAddress);

				TableSchema.TableColumn colvarPremiseCity = new TableSchema.TableColumn(schema);
				colvarPremiseCity.ColumnName = "PremiseCity";
				colvarPremiseCity.DataType = DbType.String;
				colvarPremiseCity.MaxLength = 50;
				colvarPremiseCity.AutoIncrement = false;
				colvarPremiseCity.IsNullable = false;
				colvarPremiseCity.IsPrimaryKey = false;
				colvarPremiseCity.IsForeignKey = false;
				colvarPremiseCity.IsReadOnly = false;
				colvarPremiseCity.DefaultSetting = @"";
				colvarPremiseCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiseCity);

				TableSchema.TableColumn colvarPremiseState = new TableSchema.TableColumn(schema);
				colvarPremiseState.ColumnName = "PremiseState";
				colvarPremiseState.DataType = DbType.AnsiString;
				colvarPremiseState.MaxLength = 4;
				colvarPremiseState.AutoIncrement = false;
				colvarPremiseState.IsNullable = false;
				colvarPremiseState.IsPrimaryKey = false;
				colvarPremiseState.IsForeignKey = false;
				colvarPremiseState.IsReadOnly = false;
				colvarPremiseState.DefaultSetting = @"";
				colvarPremiseState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiseState);

				TableSchema.TableColumn colvarPremiseZip = new TableSchema.TableColumn(schema);
				colvarPremiseZip.ColumnName = "PremiseZip";
				colvarPremiseZip.DataType = DbType.AnsiString;
				colvarPremiseZip.MaxLength = 5;
				colvarPremiseZip.AutoIncrement = false;
				colvarPremiseZip.IsNullable = false;
				colvarPremiseZip.IsPrimaryKey = false;
				colvarPremiseZip.IsForeignKey = false;
				colvarPremiseZip.IsReadOnly = false;
				colvarPremiseZip.DefaultSetting = @"";
				colvarPremiseZip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiseZip);

				TableSchema.TableColumn colvarPremiseZip4 = new TableSchema.TableColumn(schema);
				colvarPremiseZip4.ColumnName = "PremiseZip4";
				colvarPremiseZip4.DataType = DbType.AnsiString;
				colvarPremiseZip4.MaxLength = 4;
				colvarPremiseZip4.AutoIncrement = false;
				colvarPremiseZip4.IsNullable = true;
				colvarPremiseZip4.IsPrimaryKey = false;
				colvarPremiseZip4.IsForeignKey = false;
				colvarPremiseZip4.IsReadOnly = false;
				colvarPremiseZip4.DefaultSetting = @"";
				colvarPremiseZip4.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiseZip4);

				TableSchema.TableColumn colvarBillingAddressID = new TableSchema.TableColumn(schema);
				colvarBillingAddressID.ColumnName = "BillingAddressID";
				colvarBillingAddressID.DataType = DbType.Int64;
				colvarBillingAddressID.MaxLength = 0;
				colvarBillingAddressID.AutoIncrement = false;
				colvarBillingAddressID.IsNullable = true;
				colvarBillingAddressID.IsPrimaryKey = false;
				colvarBillingAddressID.IsForeignKey = false;
				colvarBillingAddressID.IsReadOnly = false;
				colvarBillingAddressID.DefaultSetting = @"";
				colvarBillingAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingAddressID);

				TableSchema.TableColumn colvarBillingAddress = new TableSchema.TableColumn(schema);
				colvarBillingAddress.ColumnName = "BillingAddress";
				colvarBillingAddress.DataType = DbType.String;
				colvarBillingAddress.MaxLength = 102;
				colvarBillingAddress.AutoIncrement = false;
				colvarBillingAddress.IsNullable = true;
				colvarBillingAddress.IsPrimaryKey = false;
				colvarBillingAddress.IsForeignKey = false;
				colvarBillingAddress.IsReadOnly = false;
				colvarBillingAddress.DefaultSetting = @"";
				colvarBillingAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingAddress);

				TableSchema.TableColumn colvarBillingCity = new TableSchema.TableColumn(schema);
				colvarBillingCity.ColumnName = "BillingCity";
				colvarBillingCity.DataType = DbType.String;
				colvarBillingCity.MaxLength = 50;
				colvarBillingCity.AutoIncrement = false;
				colvarBillingCity.IsNullable = true;
				colvarBillingCity.IsPrimaryKey = false;
				colvarBillingCity.IsForeignKey = false;
				colvarBillingCity.IsReadOnly = false;
				colvarBillingCity.DefaultSetting = @"";
				colvarBillingCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingCity);

				TableSchema.TableColumn colvarBillingState = new TableSchema.TableColumn(schema);
				colvarBillingState.ColumnName = "BillingState";
				colvarBillingState.DataType = DbType.AnsiString;
				colvarBillingState.MaxLength = 4;
				colvarBillingState.AutoIncrement = false;
				colvarBillingState.IsNullable = true;
				colvarBillingState.IsPrimaryKey = false;
				colvarBillingState.IsForeignKey = false;
				colvarBillingState.IsReadOnly = false;
				colvarBillingState.DefaultSetting = @"";
				colvarBillingState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingState);

				TableSchema.TableColumn colvarBillingZip = new TableSchema.TableColumn(schema);
				colvarBillingZip.ColumnName = "BillingZip";
				colvarBillingZip.DataType = DbType.AnsiString;
				colvarBillingZip.MaxLength = 5;
				colvarBillingZip.AutoIncrement = false;
				colvarBillingZip.IsNullable = true;
				colvarBillingZip.IsPrimaryKey = false;
				colvarBillingZip.IsForeignKey = false;
				colvarBillingZip.IsReadOnly = false;
				colvarBillingZip.DefaultSetting = @"";
				colvarBillingZip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingZip);

				TableSchema.TableColumn colvarBillingZip4 = new TableSchema.TableColumn(schema);
				colvarBillingZip4.ColumnName = "BillingZip4";
				colvarBillingZip4.DataType = DbType.AnsiString;
				colvarBillingZip4.MaxLength = 4;
				colvarBillingZip4.AutoIncrement = false;
				colvarBillingZip4.IsNullable = true;
				colvarBillingZip4.IsPrimaryKey = false;
				colvarBillingZip4.IsForeignKey = false;
				colvarBillingZip4.IsReadOnly = false;
				colvarBillingZip4.DefaultSetting = @"";
				colvarBillingZip4.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingZip4);

				TableSchema.TableColumn colvarPremiseAreaCode = new TableSchema.TableColumn(schema);
				colvarPremiseAreaCode.ColumnName = "PremiseAreaCode";
				colvarPremiseAreaCode.DataType = DbType.AnsiString;
				colvarPremiseAreaCode.MaxLength = 3;
				colvarPremiseAreaCode.AutoIncrement = false;
				colvarPremiseAreaCode.IsNullable = true;
				colvarPremiseAreaCode.IsPrimaryKey = false;
				colvarPremiseAreaCode.IsForeignKey = false;
				colvarPremiseAreaCode.IsReadOnly = false;
				colvarPremiseAreaCode.DefaultSetting = @"";
				colvarPremiseAreaCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiseAreaCode);

				TableSchema.TableColumn colvarPremisePhone = new TableSchema.TableColumn(schema);
				colvarPremisePhone.ColumnName = "PremisePhone";
				colvarPremisePhone.DataType = DbType.AnsiString;
				colvarPremisePhone.MaxLength = 7;
				colvarPremisePhone.AutoIncrement = false;
				colvarPremisePhone.IsNullable = true;
				colvarPremisePhone.IsPrimaryKey = false;
				colvarPremisePhone.IsForeignKey = false;
				colvarPremisePhone.IsReadOnly = false;
				colvarPremisePhone.DefaultSetting = @"";
				colvarPremisePhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremisePhone);

				TableSchema.TableColumn colvarSpouseAreaCode = new TableSchema.TableColumn(schema);
				colvarSpouseAreaCode.ColumnName = "SpouseAreaCode";
				colvarSpouseAreaCode.DataType = DbType.AnsiString;
				colvarSpouseAreaCode.MaxLength = 3;
				colvarSpouseAreaCode.AutoIncrement = false;
				colvarSpouseAreaCode.IsNullable = true;
				colvarSpouseAreaCode.IsPrimaryKey = false;
				colvarSpouseAreaCode.IsForeignKey = false;
				colvarSpouseAreaCode.IsReadOnly = false;
				colvarSpouseAreaCode.DefaultSetting = @"";
				colvarSpouseAreaCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpouseAreaCode);

				TableSchema.TableColumn colvarSpousePhone = new TableSchema.TableColumn(schema);
				colvarSpousePhone.ColumnName = "SpousePhone";
				colvarSpousePhone.DataType = DbType.AnsiString;
				colvarSpousePhone.MaxLength = 7;
				colvarSpousePhone.AutoIncrement = false;
				colvarSpousePhone.IsNullable = true;
				colvarSpousePhone.IsPrimaryKey = false;
				colvarSpousePhone.IsForeignKey = false;
				colvarSpousePhone.IsReadOnly = false;
				colvarSpousePhone.DefaultSetting = @"";
				colvarSpousePhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpousePhone);

				TableSchema.TableColumn colvarOwnerEmail = new TableSchema.TableColumn(schema);
				colvarOwnerEmail.ColumnName = "OwnerEmail";
				colvarOwnerEmail.DataType = DbType.String;
				colvarOwnerEmail.MaxLength = 256;
				colvarOwnerEmail.AutoIncrement = false;
				colvarOwnerEmail.IsNullable = true;
				colvarOwnerEmail.IsPrimaryKey = false;
				colvarOwnerEmail.IsForeignKey = false;
				colvarOwnerEmail.IsReadOnly = false;
				colvarOwnerEmail.DefaultSetting = @"";
				colvarOwnerEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerEmail);

				TableSchema.TableColumn colvarActivationFee = new TableSchema.TableColumn(schema);
				colvarActivationFee.ColumnName = "ActivationFee";
				colvarActivationFee.DataType = DbType.Currency;
				colvarActivationFee.MaxLength = 0;
				colvarActivationFee.AutoIncrement = false;
				colvarActivationFee.IsNullable = true;
				colvarActivationFee.IsPrimaryKey = false;
				colvarActivationFee.IsForeignKey = false;
				colvarActivationFee.IsReadOnly = false;
				colvarActivationFee.DefaultSetting = @"";
				colvarActivationFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationFee);

				TableSchema.TableColumn colvarMMR = new TableSchema.TableColumn(schema);
				colvarMMR.ColumnName = "MMR";
				colvarMMR.DataType = DbType.Currency;
				colvarMMR.MaxLength = 0;
				colvarMMR.AutoIncrement = false;
				colvarMMR.IsNullable = true;
				colvarMMR.IsPrimaryKey = false;
				colvarMMR.IsForeignKey = false;
				colvarMMR.IsReadOnly = false;
				colvarMMR.DefaultSetting = @"";
				colvarMMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMMR);

				TableSchema.TableColumn colvarActivationFee_3Installments = new TableSchema.TableColumn(schema);
				colvarActivationFee_3Installments.ColumnName = "ActivationFee_3Installments";
				colvarActivationFee_3Installments.DataType = DbType.Boolean;
				colvarActivationFee_3Installments.MaxLength = 0;
				colvarActivationFee_3Installments.AutoIncrement = false;
				colvarActivationFee_3Installments.IsNullable = true;
				colvarActivationFee_3Installments.IsPrimaryKey = false;
				colvarActivationFee_3Installments.IsForeignKey = false;
				colvarActivationFee_3Installments.IsReadOnly = false;
				colvarActivationFee_3Installments.DefaultSetting = @"";
				colvarActivationFee_3Installments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationFee_3Installments);

				TableSchema.TableColumn colvarCellularProvider_ADC = new TableSchema.TableColumn(schema);
				colvarCellularProvider_ADC.ColumnName = "CellularProvider_ADC";
				colvarCellularProvider_ADC.DataType = DbType.AnsiString;
				colvarCellularProvider_ADC.MaxLength = 1;
				colvarCellularProvider_ADC.AutoIncrement = false;
				colvarCellularProvider_ADC.IsNullable = false;
				colvarCellularProvider_ADC.IsPrimaryKey = false;
				colvarCellularProvider_ADC.IsForeignKey = false;
				colvarCellularProvider_ADC.IsReadOnly = false;
				colvarCellularProvider_ADC.DefaultSetting = @"";
				colvarCellularProvider_ADC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularProvider_ADC);

				TableSchema.TableColumn colvarCellularProvider_TLG = new TableSchema.TableColumn(schema);
				colvarCellularProvider_TLG.ColumnName = "CellularProvider_TLG";
				colvarCellularProvider_TLG.DataType = DbType.AnsiString;
				colvarCellularProvider_TLG.MaxLength = 1;
				colvarCellularProvider_TLG.AutoIncrement = false;
				colvarCellularProvider_TLG.IsNullable = false;
				colvarCellularProvider_TLG.IsPrimaryKey = false;
				colvarCellularProvider_TLG.IsForeignKey = false;
				colvarCellularProvider_TLG.IsReadOnly = false;
				colvarCellularProvider_TLG.DefaultSetting = @"";
				colvarCellularProvider_TLG.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularProvider_TLG);

				TableSchema.TableColumn colvarCellularProvider_ANT = new TableSchema.TableColumn(schema);
				colvarCellularProvider_ANT.ColumnName = "CellularProvider_ANT";
				colvarCellularProvider_ANT.DataType = DbType.AnsiString;
				colvarCellularProvider_ANT.MaxLength = 1;
				colvarCellularProvider_ANT.AutoIncrement = false;
				colvarCellularProvider_ANT.IsNullable = false;
				colvarCellularProvider_ANT.IsPrimaryKey = false;
				colvarCellularProvider_ANT.IsForeignKey = false;
				colvarCellularProvider_ANT.IsReadOnly = false;
				colvarCellularProvider_ANT.DefaultSetting = @"";
				colvarCellularProvider_ANT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularProvider_ANT);

				TableSchema.TableColumn colvarChkAccount_ABARoutingNumber = new TableSchema.TableColumn(schema);
				colvarChkAccount_ABARoutingNumber.ColumnName = "ChkAccount_ABARoutingNumber";
				colvarChkAccount_ABARoutingNumber.DataType = DbType.AnsiString;
				colvarChkAccount_ABARoutingNumber.MaxLength = 50;
				colvarChkAccount_ABARoutingNumber.AutoIncrement = false;
				colvarChkAccount_ABARoutingNumber.IsNullable = true;
				colvarChkAccount_ABARoutingNumber.IsPrimaryKey = false;
				colvarChkAccount_ABARoutingNumber.IsForeignKey = false;
				colvarChkAccount_ABARoutingNumber.IsReadOnly = false;
				colvarChkAccount_ABARoutingNumber.DefaultSetting = @"";
				colvarChkAccount_ABARoutingNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChkAccount_ABARoutingNumber);

				TableSchema.TableColumn colvarChkAccount_Number = new TableSchema.TableColumn(schema);
				colvarChkAccount_Number.ColumnName = "ChkAccount_Number";
				colvarChkAccount_Number.DataType = DbType.AnsiString;
				colvarChkAccount_Number.MaxLength = 50;
				colvarChkAccount_Number.AutoIncrement = false;
				colvarChkAccount_Number.IsNullable = true;
				colvarChkAccount_Number.IsPrimaryKey = false;
				colvarChkAccount_Number.IsForeignKey = false;
				colvarChkAccount_Number.IsReadOnly = false;
				colvarChkAccount_Number.DefaultSetting = @"";
				colvarChkAccount_Number.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChkAccount_Number);

				TableSchema.TableColumn colvarCC_NameOn = new TableSchema.TableColumn(schema);
				colvarCC_NameOn.ColumnName = "CC_NameOn";
				colvarCC_NameOn.DataType = DbType.String;
				colvarCC_NameOn.MaxLength = 50;
				colvarCC_NameOn.AutoIncrement = false;
				colvarCC_NameOn.IsNullable = true;
				colvarCC_NameOn.IsPrimaryKey = false;
				colvarCC_NameOn.IsForeignKey = false;
				colvarCC_NameOn.IsReadOnly = false;
				colvarCC_NameOn.DefaultSetting = @"";
				colvarCC_NameOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCC_NameOn);

				TableSchema.TableColumn colvarCC_Number = new TableSchema.TableColumn(schema);
				colvarCC_Number.ColumnName = "CC_Number";
				colvarCC_Number.DataType = DbType.String;
				colvarCC_Number.MaxLength = 50;
				colvarCC_Number.AutoIncrement = false;
				colvarCC_Number.IsNullable = true;
				colvarCC_Number.IsPrimaryKey = false;
				colvarCC_Number.IsForeignKey = false;
				colvarCC_Number.IsReadOnly = false;
				colvarCC_Number.DefaultSetting = @"";
				colvarCC_Number.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCC_Number);

				TableSchema.TableColumn colvarCC_TypeVisa = new TableSchema.TableColumn(schema);
				colvarCC_TypeVisa.ColumnName = "CC_TypeVisa";
				colvarCC_TypeVisa.DataType = DbType.AnsiString;
				colvarCC_TypeVisa.MaxLength = 1;
				colvarCC_TypeVisa.AutoIncrement = false;
				colvarCC_TypeVisa.IsNullable = true;
				colvarCC_TypeVisa.IsPrimaryKey = false;
				colvarCC_TypeVisa.IsForeignKey = false;
				colvarCC_TypeVisa.IsReadOnly = false;
				colvarCC_TypeVisa.DefaultSetting = @"";
				colvarCC_TypeVisa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCC_TypeVisa);

				TableSchema.TableColumn colvarCC_TypeMstr = new TableSchema.TableColumn(schema);
				colvarCC_TypeMstr.ColumnName = "CC_TypeMstr";
				colvarCC_TypeMstr.DataType = DbType.AnsiString;
				colvarCC_TypeMstr.MaxLength = 1;
				colvarCC_TypeMstr.AutoIncrement = false;
				colvarCC_TypeMstr.IsNullable = true;
				colvarCC_TypeMstr.IsPrimaryKey = false;
				colvarCC_TypeMstr.IsForeignKey = false;
				colvarCC_TypeMstr.IsReadOnly = false;
				colvarCC_TypeMstr.DefaultSetting = @"";
				colvarCC_TypeMstr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCC_TypeMstr);

				TableSchema.TableColumn colvarCC_TypeAmex = new TableSchema.TableColumn(schema);
				colvarCC_TypeAmex.ColumnName = "CC_TypeAmex";
				colvarCC_TypeAmex.DataType = DbType.AnsiString;
				colvarCC_TypeAmex.MaxLength = 1;
				colvarCC_TypeAmex.AutoIncrement = false;
				colvarCC_TypeAmex.IsNullable = true;
				colvarCC_TypeAmex.IsPrimaryKey = false;
				colvarCC_TypeAmex.IsForeignKey = false;
				colvarCC_TypeAmex.IsReadOnly = false;
				colvarCC_TypeAmex.DefaultSetting = @"";
				colvarCC_TypeAmex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCC_TypeAmex);

				TableSchema.TableColumn colvarCC_TypeDisc = new TableSchema.TableColumn(schema);
				colvarCC_TypeDisc.ColumnName = "CC_TypeDisc";
				colvarCC_TypeDisc.DataType = DbType.AnsiString;
				colvarCC_TypeDisc.MaxLength = 1;
				colvarCC_TypeDisc.AutoIncrement = false;
				colvarCC_TypeDisc.IsNullable = true;
				colvarCC_TypeDisc.IsPrimaryKey = false;
				colvarCC_TypeDisc.IsForeignKey = false;
				colvarCC_TypeDisc.IsReadOnly = false;
				colvarCC_TypeDisc.DefaultSetting = @"";
				colvarCC_TypeDisc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCC_TypeDisc);

				TableSchema.TableColumn colvarCC_ExpM = new TableSchema.TableColumn(schema);
				colvarCC_ExpM.ColumnName = "CC_ExpM";
				colvarCC_ExpM.DataType = DbType.Int16;
				colvarCC_ExpM.MaxLength = 0;
				colvarCC_ExpM.AutoIncrement = false;
				colvarCC_ExpM.IsNullable = true;
				colvarCC_ExpM.IsPrimaryKey = false;
				colvarCC_ExpM.IsForeignKey = false;
				colvarCC_ExpM.IsReadOnly = false;
				colvarCC_ExpM.DefaultSetting = @"";
				colvarCC_ExpM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCC_ExpM);

				TableSchema.TableColumn colvarCC_ExpY = new TableSchema.TableColumn(schema);
				colvarCC_ExpY.ColumnName = "CC_ExpY";
				colvarCC_ExpY.DataType = DbType.Int32;
				colvarCC_ExpY.MaxLength = 0;
				colvarCC_ExpY.AutoIncrement = false;
				colvarCC_ExpY.IsNullable = true;
				colvarCC_ExpY.IsPrimaryKey = false;
				colvarCC_ExpY.IsForeignKey = false;
				colvarCC_ExpY.IsReadOnly = false;
				colvarCC_ExpY.DefaultSetting = @"";
				colvarCC_ExpY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCC_ExpY);

				TableSchema.TableColumn colvarBillingTypeId = new TableSchema.TableColumn(schema);
				colvarBillingTypeId.ColumnName = "BillingTypeId";
				colvarBillingTypeId.DataType = DbType.AnsiString;
				colvarBillingTypeId.MaxLength = 10;
				colvarBillingTypeId.AutoIncrement = false;
				colvarBillingTypeId.IsNullable = true;
				colvarBillingTypeId.IsPrimaryKey = false;
				colvarBillingTypeId.IsForeignKey = false;
				colvarBillingTypeId.IsReadOnly = false;
				colvarBillingTypeId.DefaultSetting = @"";
				colvarBillingTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingTypeId);

				TableSchema.TableColumn colvarInitialTerm0 = new TableSchema.TableColumn(schema);
				colvarInitialTerm0.ColumnName = "InitialTerm0";
				colvarInitialTerm0.DataType = DbType.String;
				colvarInitialTerm0.MaxLength = 50;
				colvarInitialTerm0.AutoIncrement = false;
				colvarInitialTerm0.IsNullable = false;
				colvarInitialTerm0.IsPrimaryKey = false;
				colvarInitialTerm0.IsForeignKey = false;
				colvarInitialTerm0.IsReadOnly = false;
				colvarInitialTerm0.DefaultSetting = @"";
				colvarInitialTerm0.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInitialTerm0);

				TableSchema.TableColumn colvarInitialTerm1 = new TableSchema.TableColumn(schema);
				colvarInitialTerm1.ColumnName = "InitialTerm1";
				colvarInitialTerm1.DataType = DbType.Int16;
				colvarInitialTerm1.MaxLength = 0;
				colvarInitialTerm1.AutoIncrement = false;
				colvarInitialTerm1.IsNullable = false;
				colvarInitialTerm1.IsPrimaryKey = false;
				colvarInitialTerm1.IsForeignKey = false;
				colvarInitialTerm1.IsReadOnly = false;
				colvarInitialTerm1.DefaultSetting = @"";
				colvarInitialTerm1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInitialTerm1);

				TableSchema.TableColumn colvarMonthlyFee = new TableSchema.TableColumn(schema);
				colvarMonthlyFee.ColumnName = "MonthlyFee";
				colvarMonthlyFee.DataType = DbType.Currency;
				colvarMonthlyFee.MaxLength = 0;
				colvarMonthlyFee.AutoIncrement = false;
				colvarMonthlyFee.IsNullable = false;
				colvarMonthlyFee.IsPrimaryKey = false;
				colvarMonthlyFee.IsForeignKey = false;
				colvarMonthlyFee.IsReadOnly = false;
				colvarMonthlyFee.DefaultSetting = @"";
				colvarMonthlyFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthlyFee);

				TableSchema.TableColumn colvarTotalPayments = new TableSchema.TableColumn(schema);
				colvarTotalPayments.ColumnName = "TotalPayments";
				colvarTotalPayments.DataType = DbType.Currency;
				colvarTotalPayments.MaxLength = 0;
				colvarTotalPayments.AutoIncrement = false;
				colvarTotalPayments.IsNullable = true;
				colvarTotalPayments.IsPrimaryKey = false;
				colvarTotalPayments.IsForeignKey = false;
				colvarTotalPayments.IsReadOnly = false;
				colvarTotalPayments.DefaultSetting = @"";
				colvarTotalPayments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPayments);

				TableSchema.TableColumn colvarRepLastName = new TableSchema.TableColumn(schema);
				colvarRepLastName.ColumnName = "RepLastName";
				colvarRepLastName.DataType = DbType.String;
				colvarRepLastName.MaxLength = 50;
				colvarRepLastName.AutoIncrement = false;
				colvarRepLastName.IsNullable = true;
				colvarRepLastName.IsPrimaryKey = false;
				colvarRepLastName.IsForeignKey = false;
				colvarRepLastName.IsReadOnly = false;
				colvarRepLastName.DefaultSetting = @"";
				colvarRepLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRepLastName);

				TableSchema.TableColumn colvarMonitoringType_TwoWay = new TableSchema.TableColumn(schema);
				colvarMonitoringType_TwoWay.ColumnName = "MonitoringType_TwoWay";
				colvarMonitoringType_TwoWay.DataType = DbType.AnsiString;
				colvarMonitoringType_TwoWay.MaxLength = 1;
				colvarMonitoringType_TwoWay.AutoIncrement = false;
				colvarMonitoringType_TwoWay.IsNullable = true;
				colvarMonitoringType_TwoWay.IsPrimaryKey = false;
				colvarMonitoringType_TwoWay.IsForeignKey = false;
				colvarMonitoringType_TwoWay.IsReadOnly = false;
				colvarMonitoringType_TwoWay.DefaultSetting = @"";
				colvarMonitoringType_TwoWay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringType_TwoWay);

				TableSchema.TableColumn colvarMonitoringType_Digital = new TableSchema.TableColumn(schema);
				colvarMonitoringType_Digital.ColumnName = "MonitoringType_Digital";
				colvarMonitoringType_Digital.DataType = DbType.AnsiString;
				colvarMonitoringType_Digital.MaxLength = 1;
				colvarMonitoringType_Digital.AutoIncrement = false;
				colvarMonitoringType_Digital.IsNullable = true;
				colvarMonitoringType_Digital.IsPrimaryKey = false;
				colvarMonitoringType_Digital.IsForeignKey = false;
				colvarMonitoringType_Digital.IsReadOnly = false;
				colvarMonitoringType_Digital.DefaultSetting = @"";
				colvarMonitoringType_Digital.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringType_Digital);

				TableSchema.TableColumn colvarSystemTypeId = new TableSchema.TableColumn(schema);
				colvarSystemTypeId.ColumnName = "SystemTypeId";
				colvarSystemTypeId.DataType = DbType.AnsiString;
				colvarSystemTypeId.MaxLength = 20;
				colvarSystemTypeId.AutoIncrement = false;
				colvarSystemTypeId.IsNullable = true;
				colvarSystemTypeId.IsPrimaryKey = false;
				colvarSystemTypeId.IsForeignKey = false;
				colvarSystemTypeId.IsReadOnly = false;
				colvarSystemTypeId.DefaultSetting = @"";
				colvarSystemTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeId);

				TableSchema.TableColumn colvarInstallDate = new TableSchema.TableColumn(schema);
				colvarInstallDate.ColumnName = "InstallDate";
				colvarInstallDate.DataType = DbType.DateTime;
				colvarInstallDate.MaxLength = 0;
				colvarInstallDate.AutoIncrement = false;
				colvarInstallDate.IsNullable = true;
				colvarInstallDate.IsPrimaryKey = false;
				colvarInstallDate.IsForeignKey = false;
				colvarInstallDate.IsReadOnly = false;
				colvarInstallDate.DefaultSetting = @"";
				colvarInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallDate);

				TableSchema.TableColumn colvarDateInstalled_MM = new TableSchema.TableColumn(schema);
				colvarDateInstalled_MM.ColumnName = "DateInstalled_MM";
				colvarDateInstalled_MM.DataType = DbType.Int32;
				colvarDateInstalled_MM.MaxLength = 0;
				colvarDateInstalled_MM.AutoIncrement = false;
				colvarDateInstalled_MM.IsNullable = true;
				colvarDateInstalled_MM.IsPrimaryKey = false;
				colvarDateInstalled_MM.IsForeignKey = false;
				colvarDateInstalled_MM.IsReadOnly = false;
				colvarDateInstalled_MM.DefaultSetting = @"";
				colvarDateInstalled_MM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateInstalled_MM);

				TableSchema.TableColumn colvarDateInstalled_DD = new TableSchema.TableColumn(schema);
				colvarDateInstalled_DD.ColumnName = "DateInstalled_DD";
				colvarDateInstalled_DD.DataType = DbType.Int32;
				colvarDateInstalled_DD.MaxLength = 0;
				colvarDateInstalled_DD.AutoIncrement = false;
				colvarDateInstalled_DD.IsNullable = true;
				colvarDateInstalled_DD.IsPrimaryKey = false;
				colvarDateInstalled_DD.IsForeignKey = false;
				colvarDateInstalled_DD.IsReadOnly = false;
				colvarDateInstalled_DD.DefaultSetting = @"";
				colvarDateInstalled_DD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateInstalled_DD);

				TableSchema.TableColumn colvarDateInstalled_YY = new TableSchema.TableColumn(schema);
				colvarDateInstalled_YY.ColumnName = "DateInstalled_YY";
				colvarDateInstalled_YY.DataType = DbType.AnsiString;
				colvarDateInstalled_YY.MaxLength = 2;
				colvarDateInstalled_YY.AutoIncrement = false;
				colvarDateInstalled_YY.IsNullable = true;
				colvarDateInstalled_YY.IsPrimaryKey = false;
				colvarDateInstalled_YY.IsForeignKey = false;
				colvarDateInstalled_YY.IsReadOnly = false;
				colvarDateInstalled_YY.DefaultSetting = @"";
				colvarDateInstalled_YY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateInstalled_YY);

				TableSchema.TableColumn colvarBillingDay = new TableSchema.TableColumn(schema);
				colvarBillingDay.ColumnName = "BillingDay";
				colvarBillingDay.DataType = DbType.Int16;
				colvarBillingDay.MaxLength = 0;
				colvarBillingDay.AutoIncrement = false;
				colvarBillingDay.IsNullable = true;
				colvarBillingDay.IsPrimaryKey = false;
				colvarBillingDay.IsForeignKey = false;
				colvarBillingDay.IsReadOnly = false;
				colvarBillingDay.DefaultSetting = @"";
				colvarBillingDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingDay);

				TableSchema.TableColumn colvarLastCancelDate = new TableSchema.TableColumn(schema);
				colvarLastCancelDate.ColumnName = "LastCancelDate";
				colvarLastCancelDate.DataType = DbType.DateTime;
				colvarLastCancelDate.MaxLength = 0;
				colvarLastCancelDate.AutoIncrement = false;
				colvarLastCancelDate.IsNullable = true;
				colvarLastCancelDate.IsPrimaryKey = false;
				colvarLastCancelDate.IsForeignKey = false;
				colvarLastCancelDate.IsReadOnly = false;
				colvarLastCancelDate.DefaultSetting = @"";
				colvarLastCancelDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastCancelDate);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwBX_DocumentFieldsAMNXS001",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public BX_DocumentFieldsAMNXS001View()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set { SetColumnValue(Columns.AccountID, value); }
		}
		[DataMember]
		public long? BillingCustomerID {
			get { return GetColumnValue<long?>(Columns.BillingCustomerID); }
			set { SetColumnValue(Columns.BillingCustomerID, value); }
		}
		[DataMember]
		public long CustomerOwnerID {
			get { return GetColumnValue<long>(Columns.CustomerOwnerID); }
			set { SetColumnValue(Columns.CustomerOwnerID, value); }
		}
		[DataMember]
		public long? CustomerSpouseID {
			get { return GetColumnValue<long?>(Columns.CustomerSpouseID); }
			set { SetColumnValue(Columns.CustomerSpouseID, value); }
		}
		[DataMember]
		public string AccountNumber {
			get { return GetColumnValue<string>(Columns.AccountNumber); }
			set { SetColumnValue(Columns.AccountNumber, value); }
		}
		[DataMember]
		public string OwnerFirstName {
			get { return GetColumnValue<string>(Columns.OwnerFirstName); }
			set { SetColumnValue(Columns.OwnerFirstName, value); }
		}
		[DataMember]
		public string OwnerLastName {
			get { return GetColumnValue<string>(Columns.OwnerLastName); }
			set { SetColumnValue(Columns.OwnerLastName, value); }
		}
		[DataMember]
		public string SpouseFirstName {
			get { return GetColumnValue<string>(Columns.SpouseFirstName); }
			set { SetColumnValue(Columns.SpouseFirstName, value); }
		}
		[DataMember]
		public string SpouseLastName {
			get { return GetColumnValue<string>(Columns.SpouseLastName); }
			set { SetColumnValue(Columns.SpouseLastName, value); }
		}
		[DataMember]
		public string EffDateMM {
			get { return GetColumnValue<string>(Columns.EffDateMM); }
			set { SetColumnValue(Columns.EffDateMM, value); }
		}
		[DataMember]
		public string EffDateDD {
			get { return GetColumnValue<string>(Columns.EffDateDD); }
			set { SetColumnValue(Columns.EffDateDD, value); }
		}
		[DataMember]
		public string EffDateYY {
			get { return GetColumnValue<string>(Columns.EffDateYY); }
			set { SetColumnValue(Columns.EffDateYY, value); }
		}
		[DataMember]
		public string ExtendedServiceOption_Yes {
			get { return GetColumnValue<string>(Columns.ExtendedServiceOption_Yes); }
			set { SetColumnValue(Columns.ExtendedServiceOption_Yes, value); }
		}
		[DataMember]
		public string ExtendedServiceOption_No {
			get { return GetColumnValue<string>(Columns.ExtendedServiceOption_No); }
			set { SetColumnValue(Columns.ExtendedServiceOption_No, value); }
		}
		[DataMember]
		public string NameOfBusiness {
			get { return GetColumnValue<string>(Columns.NameOfBusiness); }
			set { SetColumnValue(Columns.NameOfBusiness, value); }
		}
		[DataMember]
		public string SSO {
			get { return GetColumnValue<string>(Columns.SSO); }
			set { SetColumnValue(Columns.SSO, value); }
		}
		[DataMember]
		public string SSR {
			get { return GetColumnValue<string>(Columns.SSR); }
			set { SetColumnValue(Columns.SSR, value); }
		}
		[DataMember]
		public long PremiseAddressID {
			get { return GetColumnValue<long>(Columns.PremiseAddressID); }
			set { SetColumnValue(Columns.PremiseAddressID, value); }
		}
		[DataMember]
		public string PremiseAddress {
			get { return GetColumnValue<string>(Columns.PremiseAddress); }
			set { SetColumnValue(Columns.PremiseAddress, value); }
		}
		[DataMember]
		public string PremiseCity {
			get { return GetColumnValue<string>(Columns.PremiseCity); }
			set { SetColumnValue(Columns.PremiseCity, value); }
		}
		[DataMember]
		public string PremiseState {
			get { return GetColumnValue<string>(Columns.PremiseState); }
			set { SetColumnValue(Columns.PremiseState, value); }
		}
		[DataMember]
		public string PremiseZip {
			get { return GetColumnValue<string>(Columns.PremiseZip); }
			set { SetColumnValue(Columns.PremiseZip, value); }
		}
		[DataMember]
		public string PremiseZip4 {
			get { return GetColumnValue<string>(Columns.PremiseZip4); }
			set { SetColumnValue(Columns.PremiseZip4, value); }
		}
		[DataMember]
		public long? BillingAddressID {
			get { return GetColumnValue<long?>(Columns.BillingAddressID); }
			set { SetColumnValue(Columns.BillingAddressID, value); }
		}
		[DataMember]
		public string BillingAddress {
			get { return GetColumnValue<string>(Columns.BillingAddress); }
			set { SetColumnValue(Columns.BillingAddress, value); }
		}
		[DataMember]
		public string BillingCity {
			get { return GetColumnValue<string>(Columns.BillingCity); }
			set { SetColumnValue(Columns.BillingCity, value); }
		}
		[DataMember]
		public string BillingState {
			get { return GetColumnValue<string>(Columns.BillingState); }
			set { SetColumnValue(Columns.BillingState, value); }
		}
		[DataMember]
		public string BillingZip {
			get { return GetColumnValue<string>(Columns.BillingZip); }
			set { SetColumnValue(Columns.BillingZip, value); }
		}
		[DataMember]
		public string BillingZip4 {
			get { return GetColumnValue<string>(Columns.BillingZip4); }
			set { SetColumnValue(Columns.BillingZip4, value); }
		}
		[DataMember]
		public string PremiseAreaCode {
			get { return GetColumnValue<string>(Columns.PremiseAreaCode); }
			set { SetColumnValue(Columns.PremiseAreaCode, value); }
		}
		[DataMember]
		public string PremisePhone {
			get { return GetColumnValue<string>(Columns.PremisePhone); }
			set { SetColumnValue(Columns.PremisePhone, value); }
		}
		[DataMember]
		public string SpouseAreaCode {
			get { return GetColumnValue<string>(Columns.SpouseAreaCode); }
			set { SetColumnValue(Columns.SpouseAreaCode, value); }
		}
		[DataMember]
		public string SpousePhone {
			get { return GetColumnValue<string>(Columns.SpousePhone); }
			set { SetColumnValue(Columns.SpousePhone, value); }
		}
		[DataMember]
		public string OwnerEmail {
			get { return GetColumnValue<string>(Columns.OwnerEmail); }
			set { SetColumnValue(Columns.OwnerEmail, value); }
		}
		[DataMember]
		public decimal? ActivationFee {
			get { return GetColumnValue<decimal?>(Columns.ActivationFee); }
			set { SetColumnValue(Columns.ActivationFee, value); }
		}
		[DataMember]
		public decimal? MMR {
			get { return GetColumnValue<decimal?>(Columns.MMR); }
			set { SetColumnValue(Columns.MMR, value); }
		}
		[DataMember]
		public bool? ActivationFee_3Installments {
			get { return GetColumnValue<bool?>(Columns.ActivationFee_3Installments); }
			set { SetColumnValue(Columns.ActivationFee_3Installments, value); }
		}
		[DataMember]
		public string CellularProvider_ADC {
			get { return GetColumnValue<string>(Columns.CellularProvider_ADC); }
			set { SetColumnValue(Columns.CellularProvider_ADC, value); }
		}
		[DataMember]
		public string CellularProvider_TLG {
			get { return GetColumnValue<string>(Columns.CellularProvider_TLG); }
			set { SetColumnValue(Columns.CellularProvider_TLG, value); }
		}
		[DataMember]
		public string CellularProvider_ANT {
			get { return GetColumnValue<string>(Columns.CellularProvider_ANT); }
			set { SetColumnValue(Columns.CellularProvider_ANT, value); }
		}
		[DataMember]
		public string ChkAccount_ABARoutingNumber {
			get { return GetColumnValue<string>(Columns.ChkAccount_ABARoutingNumber); }
			set { SetColumnValue(Columns.ChkAccount_ABARoutingNumber, value); }
		}
		[DataMember]
		public string ChkAccount_Number {
			get { return GetColumnValue<string>(Columns.ChkAccount_Number); }
			set { SetColumnValue(Columns.ChkAccount_Number, value); }
		}
		[DataMember]
		public string CC_NameOn {
			get { return GetColumnValue<string>(Columns.CC_NameOn); }
			set { SetColumnValue(Columns.CC_NameOn, value); }
		}
		[DataMember]
		public string CC_Number {
			get { return GetColumnValue<string>(Columns.CC_Number); }
			set { SetColumnValue(Columns.CC_Number, value); }
		}
		[DataMember]
		public string CC_TypeVisa {
			get { return GetColumnValue<string>(Columns.CC_TypeVisa); }
			set { SetColumnValue(Columns.CC_TypeVisa, value); }
		}
		[DataMember]
		public string CC_TypeMstr {
			get { return GetColumnValue<string>(Columns.CC_TypeMstr); }
			set { SetColumnValue(Columns.CC_TypeMstr, value); }
		}
		[DataMember]
		public string CC_TypeAmex {
			get { return GetColumnValue<string>(Columns.CC_TypeAmex); }
			set { SetColumnValue(Columns.CC_TypeAmex, value); }
		}
		[DataMember]
		public string CC_TypeDisc {
			get { return GetColumnValue<string>(Columns.CC_TypeDisc); }
			set { SetColumnValue(Columns.CC_TypeDisc, value); }
		}
		[DataMember]
		public short? CC_ExpM {
			get { return GetColumnValue<short?>(Columns.CC_ExpM); }
			set { SetColumnValue(Columns.CC_ExpM, value); }
		}
		[DataMember]
		public int? CC_ExpY {
			get { return GetColumnValue<int?>(Columns.CC_ExpY); }
			set { SetColumnValue(Columns.CC_ExpY, value); }
		}
		[DataMember]
		public string BillingTypeId {
			get { return GetColumnValue<string>(Columns.BillingTypeId); }
			set { SetColumnValue(Columns.BillingTypeId, value); }
		}
		[DataMember]
		public string InitialTerm0 {
			get { return GetColumnValue<string>(Columns.InitialTerm0); }
			set { SetColumnValue(Columns.InitialTerm0, value); }
		}
		[DataMember]
		public short InitialTerm1 {
			get { return GetColumnValue<short>(Columns.InitialTerm1); }
			set { SetColumnValue(Columns.InitialTerm1, value); }
		}
		[DataMember]
		public decimal MonthlyFee {
			get { return GetColumnValue<decimal>(Columns.MonthlyFee); }
			set { SetColumnValue(Columns.MonthlyFee, value); }
		}
		[DataMember]
		public decimal? TotalPayments {
			get { return GetColumnValue<decimal?>(Columns.TotalPayments); }
			set { SetColumnValue(Columns.TotalPayments, value); }
		}
		[DataMember]
		public string RepLastName {
			get { return GetColumnValue<string>(Columns.RepLastName); }
			set { SetColumnValue(Columns.RepLastName, value); }
		}
		[DataMember]
		public string MonitoringType_TwoWay {
			get { return GetColumnValue<string>(Columns.MonitoringType_TwoWay); }
			set { SetColumnValue(Columns.MonitoringType_TwoWay, value); }
		}
		[DataMember]
		public string MonitoringType_Digital {
			get { return GetColumnValue<string>(Columns.MonitoringType_Digital); }
			set { SetColumnValue(Columns.MonitoringType_Digital, value); }
		}
		[DataMember]
		public string SystemTypeId {
			get { return GetColumnValue<string>(Columns.SystemTypeId); }
			set { SetColumnValue(Columns.SystemTypeId, value); }
		}
		[DataMember]
		public DateTime? InstallDate {
			get { return GetColumnValue<DateTime?>(Columns.InstallDate); }
			set { SetColumnValue(Columns.InstallDate, value); }
		}
		[DataMember]
		public int? DateInstalled_MM {
			get { return GetColumnValue<int?>(Columns.DateInstalled_MM); }
			set { SetColumnValue(Columns.DateInstalled_MM, value); }
		}
		[DataMember]
		public int? DateInstalled_DD {
			get { return GetColumnValue<int?>(Columns.DateInstalled_DD); }
			set { SetColumnValue(Columns.DateInstalled_DD, value); }
		}
		[DataMember]
		public string DateInstalled_YY {
			get { return GetColumnValue<string>(Columns.DateInstalled_YY); }
			set { SetColumnValue(Columns.DateInstalled_YY, value); }
		}
		[DataMember]
		public short? BillingDay {
			get { return GetColumnValue<short?>(Columns.BillingDay); }
			set { SetColumnValue(Columns.BillingDay, value); }
		}
		[DataMember]
		public DateTime? LastCancelDate {
			get { return GetColumnValue<DateTime?>(Columns.LastCancelDate); }
			set { SetColumnValue(Columns.LastCancelDate, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerMasterFileId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BillingCustomerIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerOwnerIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CustomerSpouseIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AccountNumberColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn OwnerFirstNameColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn OwnerLastNameColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn SpouseFirstNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn SpouseLastNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn EffDateMMColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn EffDateDDColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn EffDateYYColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ExtendedServiceOption_YesColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ExtendedServiceOption_NoColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn NameOfBusinessColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn SSOColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn SSRColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn PremiseAddressIDColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn PremiseAddressColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn PremiseCityColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn PremiseStateColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn PremiseZipColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn PremiseZip4Column
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn BillingAddressIDColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn BillingAddressColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn BillingCityColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn BillingStateColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn BillingZipColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn BillingZip4Column
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn PremiseAreaCodeColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn PremisePhoneColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn SpouseAreaCodeColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn SpousePhoneColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn OwnerEmailColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn ActivationFeeColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn MMRColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn ActivationFee_3InstallmentsColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn CellularProvider_ADCColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn CellularProvider_TLGColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn CellularProvider_ANTColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn ChkAccount_ABARoutingNumberColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn ChkAccount_NumberColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn CC_NameOnColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn CC_NumberColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn CC_TypeVisaColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn CC_TypeMstrColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn CC_TypeAmexColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn CC_TypeDiscColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn CC_ExpMColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn CC_ExpYColumn
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn BillingTypeIdColumn
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn InitialTerm0Column
		{
			get { return Schema.Columns[52]; }
		}
		public static TableSchema.TableColumn InitialTerm1Column
		{
			get { return Schema.Columns[53]; }
		}
		public static TableSchema.TableColumn MonthlyFeeColumn
		{
			get { return Schema.Columns[54]; }
		}
		public static TableSchema.TableColumn TotalPaymentsColumn
		{
			get { return Schema.Columns[55]; }
		}
		public static TableSchema.TableColumn RepLastNameColumn
		{
			get { return Schema.Columns[56]; }
		}
		public static TableSchema.TableColumn MonitoringType_TwoWayColumn
		{
			get { return Schema.Columns[57]; }
		}
		public static TableSchema.TableColumn MonitoringType_DigitalColumn
		{
			get { return Schema.Columns[58]; }
		}
		public static TableSchema.TableColumn SystemTypeIdColumn
		{
			get { return Schema.Columns[59]; }
		}
		public static TableSchema.TableColumn InstallDateColumn
		{
			get { return Schema.Columns[60]; }
		}
		public static TableSchema.TableColumn DateInstalled_MMColumn
		{
			get { return Schema.Columns[61]; }
		}
		public static TableSchema.TableColumn DateInstalled_DDColumn
		{
			get { return Schema.Columns[62]; }
		}
		public static TableSchema.TableColumn DateInstalled_YYColumn
		{
			get { return Schema.Columns[63]; }
		}
		public static TableSchema.TableColumn BillingDayColumn
		{
			get { return Schema.Columns[64]; }
		}
		public static TableSchema.TableColumn LastCancelDateColumn
		{
			get { return Schema.Columns[65]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string AccountID = @"AccountID";
			public const string BillingCustomerID = @"BillingCustomerID";
			public const string CustomerOwnerID = @"CustomerOwnerID";
			public const string CustomerSpouseID = @"CustomerSpouseID";
			public const string AccountNumber = @"AccountNumber";
			public const string OwnerFirstName = @"OwnerFirstName";
			public const string OwnerLastName = @"OwnerLastName";
			public const string SpouseFirstName = @"SpouseFirstName";
			public const string SpouseLastName = @"SpouseLastName";
			public const string EffDateMM = @"EffDateMM";
			public const string EffDateDD = @"EffDateDD";
			public const string EffDateYY = @"EffDateYY";
			public const string ExtendedServiceOption_Yes = @"ExtendedServiceOption_Yes";
			public const string ExtendedServiceOption_No = @"ExtendedServiceOption_No";
			public const string NameOfBusiness = @"NameOfBusiness";
			public const string SSO = @"SSO";
			public const string SSR = @"SSR";
			public const string PremiseAddressID = @"PremiseAddressID";
			public const string PremiseAddress = @"PremiseAddress";
			public const string PremiseCity = @"PremiseCity";
			public const string PremiseState = @"PremiseState";
			public const string PremiseZip = @"PremiseZip";
			public const string PremiseZip4 = @"PremiseZip4";
			public const string BillingAddressID = @"BillingAddressID";
			public const string BillingAddress = @"BillingAddress";
			public const string BillingCity = @"BillingCity";
			public const string BillingState = @"BillingState";
			public const string BillingZip = @"BillingZip";
			public const string BillingZip4 = @"BillingZip4";
			public const string PremiseAreaCode = @"PremiseAreaCode";
			public const string PremisePhone = @"PremisePhone";
			public const string SpouseAreaCode = @"SpouseAreaCode";
			public const string SpousePhone = @"SpousePhone";
			public const string OwnerEmail = @"OwnerEmail";
			public const string ActivationFee = @"ActivationFee";
			public const string MMR = @"MMR";
			public const string ActivationFee_3Installments = @"ActivationFee_3Installments";
			public const string CellularProvider_ADC = @"CellularProvider_ADC";
			public const string CellularProvider_TLG = @"CellularProvider_TLG";
			public const string CellularProvider_ANT = @"CellularProvider_ANT";
			public const string ChkAccount_ABARoutingNumber = @"ChkAccount_ABARoutingNumber";
			public const string ChkAccount_Number = @"ChkAccount_Number";
			public const string CC_NameOn = @"CC_NameOn";
			public const string CC_Number = @"CC_Number";
			public const string CC_TypeVisa = @"CC_TypeVisa";
			public const string CC_TypeMstr = @"CC_TypeMstr";
			public const string CC_TypeAmex = @"CC_TypeAmex";
			public const string CC_TypeDisc = @"CC_TypeDisc";
			public const string CC_ExpM = @"CC_ExpM";
			public const string CC_ExpY = @"CC_ExpY";
			public const string BillingTypeId = @"BillingTypeId";
			public const string InitialTerm0 = @"InitialTerm0";
			public const string InitialTerm1 = @"InitialTerm1";
			public const string MonthlyFee = @"MonthlyFee";
			public const string TotalPayments = @"TotalPayments";
			public const string RepLastName = @"RepLastName";
			public const string MonitoringType_TwoWay = @"MonitoringType_TwoWay";
			public const string MonitoringType_Digital = @"MonitoringType_Digital";
			public const string SystemTypeId = @"SystemTypeId";
			public const string InstallDate = @"InstallDate";
			public const string DateInstalled_MM = @"DateInstalled_MM";
			public const string DateInstalled_DD = @"DateInstalled_DD";
			public const string DateInstalled_YY = @"DateInstalled_YY";
			public const string BillingDay = @"BillingDay";
			public const string LastCancelDate = @"LastCancelDate";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the BX_DocumentFieldsSONXS001View class.
	/// </summary>
	[DataContract]
	public partial class BX_DocumentFieldsSONXS001ViewCollection : ReadOnlyList<BX_DocumentFieldsSONXS001View, BX_DocumentFieldsSONXS001ViewCollection>
	{
		public static BX_DocumentFieldsSONXS001ViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BX_DocumentFieldsSONXS001ViewCollection result = new BX_DocumentFieldsSONXS001ViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwBX_DocumentFieldsSONXS001 view.
	/// </summary>
	[DataContract]
	public partial class BX_DocumentFieldsSONXS001View : ReadOnlyRecord<BX_DocumentFieldsSONXS001View>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwBX_DocumentFieldsSONXS001", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerNumber = new TableSchema.TableColumn(schema);
				colvarCustomerNumber.ColumnName = "CustomerNumber";
				colvarCustomerNumber.DataType = DbType.Int64;
				colvarCustomerNumber.MaxLength = 0;
				colvarCustomerNumber.AutoIncrement = false;
				colvarCustomerNumber.IsNullable = false;
				colvarCustomerNumber.IsPrimaryKey = false;
				colvarCustomerNumber.IsForeignKey = false;
				colvarCustomerNumber.IsReadOnly = false;
				colvarCustomerNumber.DefaultSetting = @"";
				colvarCustomerNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerNumber);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarAccountNumber = new TableSchema.TableColumn(schema);
				colvarAccountNumber.ColumnName = "AccountNumber";
				colvarAccountNumber.DataType = DbType.Int64;
				colvarAccountNumber.MaxLength = 0;
				colvarAccountNumber.AutoIncrement = false;
				colvarAccountNumber.IsNullable = false;
				colvarAccountNumber.IsPrimaryKey = false;
				colvarAccountNumber.IsForeignKey = false;
				colvarAccountNumber.IsReadOnly = false;
				colvarAccountNumber.DefaultSetting = @"";
				colvarAccountNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountNumber);

				TableSchema.TableColumn colvarOwnerFirstName = new TableSchema.TableColumn(schema);
				colvarOwnerFirstName.ColumnName = "OwnerFirstName";
				colvarOwnerFirstName.DataType = DbType.String;
				colvarOwnerFirstName.MaxLength = 250;
				colvarOwnerFirstName.AutoIncrement = false;
				colvarOwnerFirstName.IsNullable = true;
				colvarOwnerFirstName.IsPrimaryKey = false;
				colvarOwnerFirstName.IsForeignKey = false;
				colvarOwnerFirstName.IsReadOnly = false;
				colvarOwnerFirstName.DefaultSetting = @"";
				colvarOwnerFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerFirstName);

				TableSchema.TableColumn colvarOwnerLastName = new TableSchema.TableColumn(schema);
				colvarOwnerLastName.ColumnName = "OwnerLastName";
				colvarOwnerLastName.DataType = DbType.String;
				colvarOwnerLastName.MaxLength = 250;
				colvarOwnerLastName.AutoIncrement = false;
				colvarOwnerLastName.IsNullable = true;
				colvarOwnerLastName.IsPrimaryKey = false;
				colvarOwnerLastName.IsForeignKey = false;
				colvarOwnerLastName.IsReadOnly = false;
				colvarOwnerLastName.DefaultSetting = @"";
				colvarOwnerLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerLastName);

				TableSchema.TableColumn colvarSpouseFirstName = new TableSchema.TableColumn(schema);
				colvarSpouseFirstName.ColumnName = "SpouseFirstName";
				colvarSpouseFirstName.DataType = DbType.String;
				colvarSpouseFirstName.MaxLength = 250;
				colvarSpouseFirstName.AutoIncrement = false;
				colvarSpouseFirstName.IsNullable = true;
				colvarSpouseFirstName.IsPrimaryKey = false;
				colvarSpouseFirstName.IsForeignKey = false;
				colvarSpouseFirstName.IsReadOnly = false;
				colvarSpouseFirstName.DefaultSetting = @"";
				colvarSpouseFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpouseFirstName);

				TableSchema.TableColumn colvarSpouseLastName = new TableSchema.TableColumn(schema);
				colvarSpouseLastName.ColumnName = "SpouseLastName";
				colvarSpouseLastName.DataType = DbType.String;
				colvarSpouseLastName.MaxLength = 250;
				colvarSpouseLastName.AutoIncrement = false;
				colvarSpouseLastName.IsNullable = true;
				colvarSpouseLastName.IsPrimaryKey = false;
				colvarSpouseLastName.IsForeignKey = false;
				colvarSpouseLastName.IsReadOnly = false;
				colvarSpouseLastName.DefaultSetting = @"";
				colvarSpouseLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpouseLastName);

				TableSchema.TableColumn colvarReceiverLine = new TableSchema.TableColumn(schema);
				colvarReceiverLine.ColumnName = "ReceiverLine";
				colvarReceiverLine.DataType = DbType.AnsiString;
				colvarReceiverLine.MaxLength = 10;
				colvarReceiverLine.AutoIncrement = false;
				colvarReceiverLine.IsNullable = false;
				colvarReceiverLine.IsPrimaryKey = false;
				colvarReceiverLine.IsForeignKey = false;
				colvarReceiverLine.IsReadOnly = false;
				colvarReceiverLine.DefaultSetting = @"";
				colvarReceiverLine.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLine);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwBX_DocumentFieldsSONXS001",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public BX_DocumentFieldsSONXS001View()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerNumber {
			get { return GetColumnValue<long>(Columns.CustomerNumber); }
			set { SetColumnValue(Columns.CustomerNumber, value); }
		}
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set { SetColumnValue(Columns.AccountID, value); }
		}
		[DataMember]
		public long AccountNumber {
			get { return GetColumnValue<long>(Columns.AccountNumber); }
			set { SetColumnValue(Columns.AccountNumber, value); }
		}
		[DataMember]
		public string OwnerFirstName {
			get { return GetColumnValue<string>(Columns.OwnerFirstName); }
			set { SetColumnValue(Columns.OwnerFirstName, value); }
		}
		[DataMember]
		public string OwnerLastName {
			get { return GetColumnValue<string>(Columns.OwnerLastName); }
			set { SetColumnValue(Columns.OwnerLastName, value); }
		}
		[DataMember]
		public string SpouseFirstName {
			get { return GetColumnValue<string>(Columns.SpouseFirstName); }
			set { SetColumnValue(Columns.SpouseFirstName, value); }
		}
		[DataMember]
		public string SpouseLastName {
			get { return GetColumnValue<string>(Columns.SpouseLastName); }
			set { SetColumnValue(Columns.SpouseLastName, value); }
		}
		[DataMember]
		public string ReceiverLine {
			get { return GetColumnValue<string>(Columns.ReceiverLine); }
			set { SetColumnValue(Columns.ReceiverLine, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerNumber.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerNumberColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn OwnerFirstNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn OwnerLastNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SpouseFirstNameColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SpouseLastNameColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ReceiverLineColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerNumber = @"CustomerNumber";
			public const string AccountID = @"AccountID";
			public const string AccountNumber = @"AccountNumber";
			public const string OwnerFirstName = @"OwnerFirstName";
			public const string OwnerLastName = @"OwnerLastName";
			public const string SpouseFirstName = @"SpouseFirstName";
			public const string SpouseLastName = @"SpouseLastName";
			public const string ReceiverLine = @"ReceiverLine";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the IE_LocationView class.
	/// </summary>
	[DataContract]
	public partial class IE_LocationViewCollection : ReadOnlyList<IE_LocationView, IE_LocationViewCollection>
	{
		public static IE_LocationViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_LocationViewCollection result = new IE_LocationViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwIE_Location view.
	/// </summary>
	[DataContract]
	public partial class IE_LocationView : ReadOnlyRecord<IE_LocationView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwIE_Location", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLocationID = new TableSchema.TableColumn(schema);
				colvarLocationID.ColumnName = "LocationID";
				colvarLocationID.DataType = DbType.AnsiString;
				colvarLocationID.MaxLength = 50;
				colvarLocationID.AutoIncrement = false;
				colvarLocationID.IsNullable = true;
				colvarLocationID.IsPrimaryKey = false;
				colvarLocationID.IsForeignKey = false;
				colvarLocationID.IsReadOnly = false;
				colvarLocationID.DefaultSetting = @"";
				colvarLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationID);

				TableSchema.TableColumn colvarLocationName = new TableSchema.TableColumn(schema);
				colvarLocationName.ColumnName = "LocationName";
				colvarLocationName.DataType = DbType.AnsiString;
				colvarLocationName.MaxLength = 250;
				colvarLocationName.AutoIncrement = false;
				colvarLocationName.IsNullable = true;
				colvarLocationName.IsPrimaryKey = false;
				colvarLocationName.IsForeignKey = false;
				colvarLocationName.IsReadOnly = false;
				colvarLocationName.DefaultSetting = @"";
				colvarLocationName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwIE_Location",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public IE_LocationView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public string LocationID {
			get { return GetColumnValue<string>(Columns.LocationID); }
			set { SetColumnValue(Columns.LocationID, value); }
		}
		[DataMember]
		public string LocationName {
			get { return GetColumnValue<string>(Columns.LocationName); }
			set { SetColumnValue(Columns.LocationName, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return LocationName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn LocationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LocationNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string LocationID = @"LocationID";
			public const string LocationName = @"LocationName";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the IE_PackingSlipView class.
	/// </summary>
	[DataContract]
	public partial class IE_PackingSlipViewCollection : ReadOnlyList<IE_PackingSlipView, IE_PackingSlipViewCollection>
	{
		public static IE_PackingSlipViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_PackingSlipViewCollection result = new IE_PackingSlipViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwIE_PackingSlip view.
	/// </summary>
	[DataContract]
	public partial class IE_PackingSlipView : ReadOnlyRecord<IE_PackingSlipView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwIE_PackingSlip", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPackingSlipID = new TableSchema.TableColumn(schema);
				colvarPackingSlipID.ColumnName = "PackingSlipID";
				colvarPackingSlipID.DataType = DbType.Int32;
				colvarPackingSlipID.MaxLength = 0;
				colvarPackingSlipID.AutoIncrement = false;
				colvarPackingSlipID.IsNullable = false;
				colvarPackingSlipID.IsPrimaryKey = false;
				colvarPackingSlipID.IsForeignKey = false;
				colvarPackingSlipID.IsReadOnly = false;
				colvarPackingSlipID.DefaultSetting = @"";
				colvarPackingSlipID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackingSlipID);

				TableSchema.TableColumn colvarPurchaseOrderId = new TableSchema.TableColumn(schema);
				colvarPurchaseOrderId.ColumnName = "PurchaseOrderId";
				colvarPurchaseOrderId.DataType = DbType.Int32;
				colvarPurchaseOrderId.MaxLength = 0;
				colvarPurchaseOrderId.AutoIncrement = false;
				colvarPurchaseOrderId.IsNullable = false;
				colvarPurchaseOrderId.IsPrimaryKey = false;
				colvarPurchaseOrderId.IsForeignKey = false;
				colvarPurchaseOrderId.IsReadOnly = false;
				colvarPurchaseOrderId.DefaultSetting = @"";
				colvarPurchaseOrderId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPurchaseOrderId);

				TableSchema.TableColumn colvarArrivalDate = new TableSchema.TableColumn(schema);
				colvarArrivalDate.ColumnName = "ArrivalDate";
				colvarArrivalDate.DataType = DbType.DateTime;
				colvarArrivalDate.MaxLength = 0;
				colvarArrivalDate.AutoIncrement = false;
				colvarArrivalDate.IsNullable = false;
				colvarArrivalDate.IsPrimaryKey = false;
				colvarArrivalDate.IsForeignKey = false;
				colvarArrivalDate.IsReadOnly = false;
				colvarArrivalDate.DefaultSetting = @"";
				colvarArrivalDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArrivalDate);

				TableSchema.TableColumn colvarCloseDate = new TableSchema.TableColumn(schema);
				colvarCloseDate.ColumnName = "CloseDate";
				colvarCloseDate.DataType = DbType.DateTime;
				colvarCloseDate.MaxLength = 0;
				colvarCloseDate.AutoIncrement = false;
				colvarCloseDate.IsNullable = true;
				colvarCloseDate.IsPrimaryKey = false;
				colvarCloseDate.IsForeignKey = false;
				colvarCloseDate.IsReadOnly = false;
				colvarCloseDate.DefaultSetting = @"";
				colvarCloseDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCloseDate);

				TableSchema.TableColumn colvarPackingSlipNumber = new TableSchema.TableColumn(schema);
				colvarPackingSlipNumber.ColumnName = "PackingSlipNumber";
				colvarPackingSlipNumber.DataType = DbType.String;
				colvarPackingSlipNumber.MaxLength = 25;
				colvarPackingSlipNumber.AutoIncrement = false;
				colvarPackingSlipNumber.IsNullable = true;
				colvarPackingSlipNumber.IsPrimaryKey = false;
				colvarPackingSlipNumber.IsForeignKey = false;
				colvarPackingSlipNumber.IsReadOnly = false;
				colvarPackingSlipNumber.DefaultSetting = @"";
				colvarPackingSlipNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackingSlipNumber);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarGPPONumber = new TableSchema.TableColumn(schema);
				colvarGPPONumber.ColumnName = "GPPONumber";
				colvarGPPONumber.DataType = DbType.AnsiString;
				colvarGPPONumber.MaxLength = 50;
				colvarGPPONumber.AutoIncrement = false;
				colvarGPPONumber.IsNullable = false;
				colvarGPPONumber.IsPrimaryKey = false;
				colvarGPPONumber.IsForeignKey = false;
				colvarGPPONumber.IsReadOnly = false;
				colvarGPPONumber.DefaultSetting = @"";
				colvarGPPONumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPPONumber);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwIE_PackingSlip",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public IE_PackingSlipView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int PackingSlipID {
			get { return GetColumnValue<int>(Columns.PackingSlipID); }
			set { SetColumnValue(Columns.PackingSlipID, value); }
		}
		[DataMember]
		public int PurchaseOrderId {
			get { return GetColumnValue<int>(Columns.PurchaseOrderId); }
			set { SetColumnValue(Columns.PurchaseOrderId, value); }
		}
		[DataMember]
		public DateTime ArrivalDate {
			get { return GetColumnValue<DateTime>(Columns.ArrivalDate); }
			set { SetColumnValue(Columns.ArrivalDate, value); }
		}
		[DataMember]
		public DateTime? CloseDate {
			get { return GetColumnValue<DateTime?>(Columns.CloseDate); }
			set { SetColumnValue(Columns.CloseDate, value); }
		}
		[DataMember]
		public string PackingSlipNumber {
			get { return GetColumnValue<string>(Columns.PackingSlipNumber); }
			set { SetColumnValue(Columns.PackingSlipNumber, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public string GPPONumber {
			get { return GetColumnValue<string>(Columns.GPPONumber); }
			set { SetColumnValue(Columns.GPPONumber, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return PackingSlipID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PackingSlipIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PurchaseOrderIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ArrivalDateColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CloseDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PackingSlipNumberColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn GPPONumberColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string PackingSlipID = @"PackingSlipID";
			public const string PurchaseOrderId = @"PurchaseOrderId";
			public const string ArrivalDate = @"ArrivalDate";
			public const string CloseDate = @"CloseDate";
			public const string PackingSlipNumber = @"PackingSlipNumber";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
			public const string GPPONumber = @"GPPONumber";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the IE_ProductBarcodeLocationView class.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcodeLocationViewCollection : ReadOnlyList<IE_ProductBarcodeLocationView, IE_ProductBarcodeLocationViewCollection>
	{
		public static IE_ProductBarcodeLocationViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_ProductBarcodeLocationViewCollection result = new IE_ProductBarcodeLocationViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwIE_ProductBarcodeLocation view.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcodeLocationView : ReadOnlyRecord<IE_ProductBarcodeLocationView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwIE_ProductBarcodeLocation", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarProductBarcodeId = new TableSchema.TableColumn(schema);
				colvarProductBarcodeId.ColumnName = "ProductBarcodeId";
				colvarProductBarcodeId.DataType = DbType.String;
				colvarProductBarcodeId.MaxLength = 50;
				colvarProductBarcodeId.AutoIncrement = false;
				colvarProductBarcodeId.IsNullable = false;
				colvarProductBarcodeId.IsPrimaryKey = false;
				colvarProductBarcodeId.IsForeignKey = false;
				colvarProductBarcodeId.IsReadOnly = false;
				colvarProductBarcodeId.DefaultSetting = @"";
				colvarProductBarcodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductBarcodeId);

				TableSchema.TableColumn colvarItemSKU = new TableSchema.TableColumn(schema);
				colvarItemSKU.ColumnName = "ItemSKU";
				colvarItemSKU.DataType = DbType.String;
				colvarItemSKU.MaxLength = 50;
				colvarItemSKU.AutoIncrement = false;
				colvarItemSKU.IsNullable = true;
				colvarItemSKU.IsPrimaryKey = false;
				colvarItemSKU.IsForeignKey = false;
				colvarItemSKU.IsReadOnly = false;
				colvarItemSKU.DefaultSetting = @"";
				colvarItemSKU.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemSKU);

				TableSchema.TableColumn colvarItemDesc = new TableSchema.TableColumn(schema);
				colvarItemDesc.ColumnName = "ItemDesc";
				colvarItemDesc.DataType = DbType.String;
				colvarItemDesc.MaxLength = 136;
				colvarItemDesc.AutoIncrement = false;
				colvarItemDesc.IsNullable = false;
				colvarItemDesc.IsPrimaryKey = false;
				colvarItemDesc.IsForeignKey = false;
				colvarItemDesc.IsReadOnly = false;
				colvarItemDesc.DefaultSetting = @"";
				colvarItemDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemDesc);

				TableSchema.TableColumn colvarLocationID = new TableSchema.TableColumn(schema);
				colvarLocationID.ColumnName = "LocationID";
				colvarLocationID.DataType = DbType.AnsiString;
				colvarLocationID.MaxLength = 50;
				colvarLocationID.AutoIncrement = false;
				colvarLocationID.IsNullable = true;
				colvarLocationID.IsPrimaryKey = false;
				colvarLocationID.IsForeignKey = false;
				colvarLocationID.IsReadOnly = false;
				colvarLocationID.DefaultSetting = @"";
				colvarLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwIE_ProductBarcodeLocation",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public IE_ProductBarcodeLocationView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public string ProductBarcodeId {
			get { return GetColumnValue<string>(Columns.ProductBarcodeId); }
			set { SetColumnValue(Columns.ProductBarcodeId, value); }
		}
		[DataMember]
		public string ItemSKU {
			get { return GetColumnValue<string>(Columns.ItemSKU); }
			set { SetColumnValue(Columns.ItemSKU, value); }
		}
		[DataMember]
		public string ItemDesc {
			get { return GetColumnValue<string>(Columns.ItemDesc); }
			set { SetColumnValue(Columns.ItemDesc, value); }
		}
		[DataMember]
		public string LocationID {
			get { return GetColumnValue<string>(Columns.LocationID); }
			set { SetColumnValue(Columns.LocationID, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return ItemSKU;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ProductBarcodeIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ItemSKUColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ItemDescColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn LocationIDColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string ProductBarcodeId = @"ProductBarcodeId";
			public const string ItemSKU = @"ItemSKU";
			public const string ItemDesc = @"ItemDesc";
			public const string LocationID = @"LocationID";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the IE_ProductBarcodeTrackingView class.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcodeTrackingViewCollection : ReadOnlyList<IE_ProductBarcodeTrackingView, IE_ProductBarcodeTrackingViewCollection>
	{
		public static IE_ProductBarcodeTrackingViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_ProductBarcodeTrackingViewCollection result = new IE_ProductBarcodeTrackingViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwIE_ProductBarcodeTracking view.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcodeTrackingView : ReadOnlyRecord<IE_ProductBarcodeTrackingView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwIE_ProductBarcodeTracking", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarProductBarcodeTrackingID = new TableSchema.TableColumn(schema);
				colvarProductBarcodeTrackingID.ColumnName = "ProductBarcodeTrackingID";
				colvarProductBarcodeTrackingID.DataType = DbType.Int64;
				colvarProductBarcodeTrackingID.MaxLength = 0;
				colvarProductBarcodeTrackingID.AutoIncrement = true;
				colvarProductBarcodeTrackingID.IsNullable = false;
				colvarProductBarcodeTrackingID.IsPrimaryKey = false;
				colvarProductBarcodeTrackingID.IsForeignKey = false;
				colvarProductBarcodeTrackingID.IsReadOnly = false;
				colvarProductBarcodeTrackingID.DefaultSetting = @"";
				colvarProductBarcodeTrackingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductBarcodeTrackingID);

				TableSchema.TableColumn colvarProductBarcodeTrackingTypeId = new TableSchema.TableColumn(schema);
				colvarProductBarcodeTrackingTypeId.ColumnName = "ProductBarcodeTrackingTypeId";
				colvarProductBarcodeTrackingTypeId.DataType = DbType.AnsiString;
				colvarProductBarcodeTrackingTypeId.MaxLength = 20;
				colvarProductBarcodeTrackingTypeId.AutoIncrement = false;
				colvarProductBarcodeTrackingTypeId.IsNullable = false;
				colvarProductBarcodeTrackingTypeId.IsPrimaryKey = false;
				colvarProductBarcodeTrackingTypeId.IsForeignKey = false;
				colvarProductBarcodeTrackingTypeId.IsReadOnly = false;
				colvarProductBarcodeTrackingTypeId.DefaultSetting = @"";
				colvarProductBarcodeTrackingTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductBarcodeTrackingTypeId);

				TableSchema.TableColumn colvarProductBarcodeId = new TableSchema.TableColumn(schema);
				colvarProductBarcodeId.ColumnName = "ProductBarcodeId";
				colvarProductBarcodeId.DataType = DbType.String;
				colvarProductBarcodeId.MaxLength = 50;
				colvarProductBarcodeId.AutoIncrement = false;
				colvarProductBarcodeId.IsNullable = false;
				colvarProductBarcodeId.IsPrimaryKey = false;
				colvarProductBarcodeId.IsForeignKey = false;
				colvarProductBarcodeId.IsReadOnly = false;
				colvarProductBarcodeId.DefaultSetting = @"";
				colvarProductBarcodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductBarcodeId);

				TableSchema.TableColumn colvarLocationTypeID = new TableSchema.TableColumn(schema);
				colvarLocationTypeID.ColumnName = "LocationTypeID";
				colvarLocationTypeID.DataType = DbType.AnsiString;
				colvarLocationTypeID.MaxLength = 20;
				colvarLocationTypeID.AutoIncrement = false;
				colvarLocationTypeID.IsNullable = true;
				colvarLocationTypeID.IsPrimaryKey = false;
				colvarLocationTypeID.IsForeignKey = false;
				colvarLocationTypeID.IsReadOnly = false;
				colvarLocationTypeID.DefaultSetting = @"";
				colvarLocationTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationTypeID);

				TableSchema.TableColumn colvarLocationID = new TableSchema.TableColumn(schema);
				colvarLocationID.ColumnName = "LocationID";
				colvarLocationID.DataType = DbType.AnsiString;
				colvarLocationID.MaxLength = 50;
				colvarLocationID.AutoIncrement = false;
				colvarLocationID.IsNullable = true;
				colvarLocationID.IsPrimaryKey = false;
				colvarLocationID.IsForeignKey = false;
				colvarLocationID.IsReadOnly = false;
				colvarLocationID.DefaultSetting = @"";
				colvarLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationID);

				TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
				colvarComment.ColumnName = "Comment";
				colvarComment.DataType = DbType.String;
				colvarComment.MaxLength = 2000;
				colvarComment.AutoIncrement = false;
				colvarComment.IsNullable = true;
				colvarComment.IsPrimaryKey = false;
				colvarComment.IsForeignKey = false;
				colvarComment.IsReadOnly = false;
				colvarComment.DefaultSetting = @"";
				colvarComment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwIE_ProductBarcodeTracking",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public IE_ProductBarcodeTrackingView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long ProductBarcodeTrackingID {
			get { return GetColumnValue<long>(Columns.ProductBarcodeTrackingID); }
			set { SetColumnValue(Columns.ProductBarcodeTrackingID, value); }
		}
		[DataMember]
		public string ProductBarcodeTrackingTypeId {
			get { return GetColumnValue<string>(Columns.ProductBarcodeTrackingTypeId); }
			set { SetColumnValue(Columns.ProductBarcodeTrackingTypeId, value); }
		}
		[DataMember]
		public string ProductBarcodeId {
			get { return GetColumnValue<string>(Columns.ProductBarcodeId); }
			set { SetColumnValue(Columns.ProductBarcodeId, value); }
		}
		[DataMember]
		public string LocationTypeID {
			get { return GetColumnValue<string>(Columns.LocationTypeID); }
			set { SetColumnValue(Columns.LocationTypeID, value); }
		}
		[DataMember]
		public string LocationID {
			get { return GetColumnValue<string>(Columns.LocationID); }
			set { SetColumnValue(Columns.LocationID, value); }
		}
		[DataMember]
		public string Comment {
			get { return GetColumnValue<string>(Columns.Comment); }
			set { SetColumnValue(Columns.Comment, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return ProductBarcodeTrackingTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ProductBarcodeTrackingIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ProductBarcodeTrackingTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ProductBarcodeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn LocationTypeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LocationIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CommentColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string ProductBarcodeTrackingID = @"ProductBarcodeTrackingID";
			public const string ProductBarcodeTrackingTypeId = @"ProductBarcodeTrackingTypeId";
			public const string ProductBarcodeId = @"ProductBarcodeId";
			public const string LocationTypeID = @"LocationTypeID";
			public const string LocationID = @"LocationID";
			public const string Comment = @"Comment";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the IE_PurchaseOrderItemsView class.
	/// </summary>
	[DataContract]
	public partial class IE_PurchaseOrderItemsViewCollection : ReadOnlyList<IE_PurchaseOrderItemsView, IE_PurchaseOrderItemsViewCollection>
	{
		public static IE_PurchaseOrderItemsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_PurchaseOrderItemsViewCollection result = new IE_PurchaseOrderItemsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwIE_PurchaseOrderItems view.
	/// </summary>
	[DataContract]
	public partial class IE_PurchaseOrderItemsView : ReadOnlyRecord<IE_PurchaseOrderItemsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwIE_PurchaseOrderItems", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPurchaseOrderItemID = new TableSchema.TableColumn(schema);
				colvarPurchaseOrderItemID.ColumnName = "PurchaseOrderItemID";
				colvarPurchaseOrderItemID.DataType = DbType.Int64;
				colvarPurchaseOrderItemID.MaxLength = 0;
				colvarPurchaseOrderItemID.AutoIncrement = false;
				colvarPurchaseOrderItemID.IsNullable = false;
				colvarPurchaseOrderItemID.IsPrimaryKey = false;
				colvarPurchaseOrderItemID.IsForeignKey = false;
				colvarPurchaseOrderItemID.IsReadOnly = false;
				colvarPurchaseOrderItemID.DefaultSetting = @"";
				colvarPurchaseOrderItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPurchaseOrderItemID);

				TableSchema.TableColumn colvarPurchaseOrderId = new TableSchema.TableColumn(schema);
				colvarPurchaseOrderId.ColumnName = "PurchaseOrderId";
				colvarPurchaseOrderId.DataType = DbType.Int32;
				colvarPurchaseOrderId.MaxLength = 0;
				colvarPurchaseOrderId.AutoIncrement = false;
				colvarPurchaseOrderId.IsNullable = false;
				colvarPurchaseOrderId.IsPrimaryKey = false;
				colvarPurchaseOrderId.IsForeignKey = false;
				colvarPurchaseOrderId.IsReadOnly = false;
				colvarPurchaseOrderId.DefaultSetting = @"";
				colvarPurchaseOrderId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPurchaseOrderId);

				TableSchema.TableColumn colvarItemId = new TableSchema.TableColumn(schema);
				colvarItemId.ColumnName = "ItemId";
				colvarItemId.DataType = DbType.AnsiString;
				colvarItemId.MaxLength = 50;
				colvarItemId.AutoIncrement = false;
				colvarItemId.IsNullable = false;
				colvarItemId.IsPrimaryKey = false;
				colvarItemId.IsForeignKey = false;
				colvarItemId.IsReadOnly = false;
				colvarItemId.DefaultSetting = @"";
				colvarItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemId);

				TableSchema.TableColumn colvarItemDesc = new TableSchema.TableColumn(schema);
				colvarItemDesc.ColumnName = "ItemDesc";
				colvarItemDesc.DataType = DbType.String;
				colvarItemDesc.MaxLength = 136;
				colvarItemDesc.AutoIncrement = false;
				colvarItemDesc.IsNullable = false;
				colvarItemDesc.IsPrimaryKey = false;
				colvarItemDesc.IsForeignKey = false;
				colvarItemDesc.IsReadOnly = false;
				colvarItemDesc.DefaultSetting = @"";
				colvarItemDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemDesc);

				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);

				TableSchema.TableColumn colvarWithBarcodeCount = new TableSchema.TableColumn(schema);
				colvarWithBarcodeCount.ColumnName = "WithBarcodeCount";
				colvarWithBarcodeCount.DataType = DbType.Int32;
				colvarWithBarcodeCount.MaxLength = 0;
				colvarWithBarcodeCount.AutoIncrement = false;
				colvarWithBarcodeCount.IsNullable = false;
				colvarWithBarcodeCount.IsPrimaryKey = false;
				colvarWithBarcodeCount.IsForeignKey = false;
				colvarWithBarcodeCount.IsReadOnly = false;
				colvarWithBarcodeCount.DefaultSetting = @"";
				colvarWithBarcodeCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWithBarcodeCount);

				TableSchema.TableColumn colvarWithoutBarcodeCount = new TableSchema.TableColumn(schema);
				colvarWithoutBarcodeCount.ColumnName = "WithoutBarcodeCount";
				colvarWithoutBarcodeCount.DataType = DbType.Int32;
				colvarWithoutBarcodeCount.MaxLength = 0;
				colvarWithoutBarcodeCount.AutoIncrement = false;
				colvarWithoutBarcodeCount.IsNullable = true;
				colvarWithoutBarcodeCount.IsPrimaryKey = false;
				colvarWithoutBarcodeCount.IsForeignKey = false;
				colvarWithoutBarcodeCount.IsReadOnly = false;
				colvarWithoutBarcodeCount.DefaultSetting = @"";
				colvarWithoutBarcodeCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWithoutBarcodeCount);

				TableSchema.TableColumn colvarProductSKU = new TableSchema.TableColumn(schema);
				colvarProductSKU.ColumnName = "ProductSKU";
				colvarProductSKU.DataType = DbType.String;
				colvarProductSKU.MaxLength = 50;
				colvarProductSKU.AutoIncrement = false;
				colvarProductSKU.IsNullable = true;
				colvarProductSKU.IsPrimaryKey = false;
				colvarProductSKU.IsForeignKey = false;
				colvarProductSKU.IsReadOnly = false;
				colvarProductSKU.DefaultSetting = @"";
				colvarProductSKU.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductSKU);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwIE_PurchaseOrderItems",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public IE_PurchaseOrderItemsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long PurchaseOrderItemID {
			get { return GetColumnValue<long>(Columns.PurchaseOrderItemID); }
			set { SetColumnValue(Columns.PurchaseOrderItemID, value); }
		}
		[DataMember]
		public int PurchaseOrderId {
			get { return GetColumnValue<int>(Columns.PurchaseOrderId); }
			set { SetColumnValue(Columns.PurchaseOrderId, value); }
		}
		[DataMember]
		public string ItemId {
			get { return GetColumnValue<string>(Columns.ItemId); }
			set { SetColumnValue(Columns.ItemId, value); }
		}
		[DataMember]
		public string ItemDesc {
			get { return GetColumnValue<string>(Columns.ItemDesc); }
			set { SetColumnValue(Columns.ItemDesc, value); }
		}
		[DataMember]
		public int Quantity {
			get { return GetColumnValue<int>(Columns.Quantity); }
			set { SetColumnValue(Columns.Quantity, value); }
		}
		[DataMember]
		public int WithBarcodeCount {
			get { return GetColumnValue<int>(Columns.WithBarcodeCount); }
			set { SetColumnValue(Columns.WithBarcodeCount, value); }
		}
		[DataMember]
		public int? WithoutBarcodeCount {
			get { return GetColumnValue<int?>(Columns.WithoutBarcodeCount); }
			set { SetColumnValue(Columns.WithoutBarcodeCount, value); }
		}
		[DataMember]
		public string ProductSKU {
			get { return GetColumnValue<string>(Columns.ProductSKU); }
			set { SetColumnValue(Columns.ProductSKU, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return PurchaseOrderItemID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PurchaseOrderItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PurchaseOrderIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ItemIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ItemDescColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn QuantityColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn WithBarcodeCountColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn WithoutBarcodeCountColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ProductSKUColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string PurchaseOrderItemID = @"PurchaseOrderItemID";
			public const string PurchaseOrderId = @"PurchaseOrderId";
			public const string ItemId = @"ItemId";
			public const string ItemDesc = @"ItemDesc";
			public const string Quantity = @"Quantity";
			public const string WithBarcodeCount = @"WithBarcodeCount";
			public const string WithoutBarcodeCount = @"WithoutBarcodeCount";
			public const string ProductSKU = @"ProductSKU";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MC_AccountNotesAllInfoView class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountNotesAllInfoViewCollection : ReadOnlyList<MC_AccountNotesAllInfoView, MC_AccountNotesAllInfoViewCollection>
	{
		public static MC_AccountNotesAllInfoViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountNotesAllInfoViewCollection result = new MC_AccountNotesAllInfoViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMC_AccountNotesAllInfo view.
	/// </summary>
	[DataContract]
	public partial class MC_AccountNotesAllInfoView : ReadOnlyRecord<MC_AccountNotesAllInfoView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMC_AccountNotesAllInfo", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarNoteID = new TableSchema.TableColumn(schema);
				colvarNoteID.ColumnName = "NoteID";
				colvarNoteID.DataType = DbType.Int64;
				colvarNoteID.MaxLength = 0;
				colvarNoteID.AutoIncrement = false;
				colvarNoteID.IsNullable = false;
				colvarNoteID.IsPrimaryKey = false;
				colvarNoteID.IsForeignKey = false;
				colvarNoteID.IsReadOnly = false;
				colvarNoteID.DefaultSetting = @"";
				colvarNoteID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoteID);

				TableSchema.TableColumn colvarNoteTypeId = new TableSchema.TableColumn(schema);
				colvarNoteTypeId.ColumnName = "NoteTypeId";
				colvarNoteTypeId.DataType = DbType.AnsiString;
				colvarNoteTypeId.MaxLength = 20;
				colvarNoteTypeId.AutoIncrement = false;
				colvarNoteTypeId.IsNullable = false;
				colvarNoteTypeId.IsPrimaryKey = false;
				colvarNoteTypeId.IsForeignKey = false;
				colvarNoteTypeId.IsReadOnly = false;
				colvarNoteTypeId.DefaultSetting = @"";
				colvarNoteTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoteTypeId);

				TableSchema.TableColumn colvarNoteType = new TableSchema.TableColumn(schema);
				colvarNoteType.ColumnName = "NoteType";
				colvarNoteType.DataType = DbType.String;
				colvarNoteType.MaxLength = 50;
				colvarNoteType.AutoIncrement = false;
				colvarNoteType.IsNullable = false;
				colvarNoteType.IsPrimaryKey = false;
				colvarNoteType.IsForeignKey = false;
				colvarNoteType.IsReadOnly = false;
				colvarNoteType.DefaultSetting = @"";
				colvarNoteType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoteType);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = true;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = false;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = true;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = false;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarNoteCategory1Id = new TableSchema.TableColumn(schema);
				colvarNoteCategory1Id.ColumnName = "NoteCategory1Id";
				colvarNoteCategory1Id.DataType = DbType.Int32;
				colvarNoteCategory1Id.MaxLength = 0;
				colvarNoteCategory1Id.AutoIncrement = false;
				colvarNoteCategory1Id.IsNullable = false;
				colvarNoteCategory1Id.IsPrimaryKey = false;
				colvarNoteCategory1Id.IsForeignKey = false;
				colvarNoteCategory1Id.IsReadOnly = false;
				colvarNoteCategory1Id.DefaultSetting = @"";
				colvarNoteCategory1Id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoteCategory1Id);

				TableSchema.TableColumn colvarCategory1 = new TableSchema.TableColumn(schema);
				colvarCategory1.ColumnName = "Category1";
				colvarCategory1.DataType = DbType.String;
				colvarCategory1.MaxLength = 50;
				colvarCategory1.AutoIncrement = false;
				colvarCategory1.IsNullable = false;
				colvarCategory1.IsPrimaryKey = false;
				colvarCategory1.IsForeignKey = false;
				colvarCategory1.IsReadOnly = false;
				colvarCategory1.DefaultSetting = @"";
				colvarCategory1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCategory1);

				TableSchema.TableColumn colvarDesc1 = new TableSchema.TableColumn(schema);
				colvarDesc1.ColumnName = "Desc1";
				colvarDesc1.DataType = DbType.String;
				colvarDesc1.MaxLength = -1;
				colvarDesc1.AutoIncrement = false;
				colvarDesc1.IsNullable = true;
				colvarDesc1.IsPrimaryKey = false;
				colvarDesc1.IsForeignKey = false;
				colvarDesc1.IsReadOnly = false;
				colvarDesc1.DefaultSetting = @"";
				colvarDesc1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesc1);

				TableSchema.TableColumn colvarNoteCategory2Id = new TableSchema.TableColumn(schema);
				colvarNoteCategory2Id.ColumnName = "NoteCategory2Id";
				colvarNoteCategory2Id.DataType = DbType.Int32;
				colvarNoteCategory2Id.MaxLength = 0;
				colvarNoteCategory2Id.AutoIncrement = false;
				colvarNoteCategory2Id.IsNullable = false;
				colvarNoteCategory2Id.IsPrimaryKey = false;
				colvarNoteCategory2Id.IsForeignKey = false;
				colvarNoteCategory2Id.IsReadOnly = false;
				colvarNoteCategory2Id.DefaultSetting = @"";
				colvarNoteCategory2Id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoteCategory2Id);

				TableSchema.TableColumn colvarCategory2 = new TableSchema.TableColumn(schema);
				colvarCategory2.ColumnName = "Category2";
				colvarCategory2.DataType = DbType.String;
				colvarCategory2.MaxLength = 50;
				colvarCategory2.AutoIncrement = false;
				colvarCategory2.IsNullable = false;
				colvarCategory2.IsPrimaryKey = false;
				colvarCategory2.IsForeignKey = false;
				colvarCategory2.IsReadOnly = false;
				colvarCategory2.DefaultSetting = @"";
				colvarCategory2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCategory2);

				TableSchema.TableColumn colvarDesc2 = new TableSchema.TableColumn(schema);
				colvarDesc2.ColumnName = "Desc2";
				colvarDesc2.DataType = DbType.String;
				colvarDesc2.MaxLength = -1;
				colvarDesc2.AutoIncrement = false;
				colvarDesc2.IsNullable = true;
				colvarDesc2.IsPrimaryKey = false;
				colvarDesc2.IsForeignKey = false;
				colvarDesc2.IsReadOnly = false;
				colvarDesc2.DefaultSetting = @"";
				colvarDesc2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesc2);

				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = -1;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = false;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMC_AccountNotesAllInfo",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MC_AccountNotesAllInfoView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long NoteID {
			get { return GetColumnValue<long>(Columns.NoteID); }
			set { SetColumnValue(Columns.NoteID, value); }
		}
		[DataMember]
		public string NoteTypeId {
			get { return GetColumnValue<string>(Columns.NoteTypeId); }
			set { SetColumnValue(Columns.NoteTypeId, value); }
		}
		[DataMember]
		public string NoteType {
			get { return GetColumnValue<string>(Columns.NoteType); }
			set { SetColumnValue(Columns.NoteType, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public long? CustomerId {
			get { return GetColumnValue<long?>(Columns.CustomerId); }
			set { SetColumnValue(Columns.CustomerId, value); }
		}
		[DataMember]
		public long? LeadId {
			get { return GetColumnValue<long?>(Columns.LeadId); }
			set { SetColumnValue(Columns.LeadId, value); }
		}
		[DataMember]
		public int NoteCategory1Id {
			get { return GetColumnValue<int>(Columns.NoteCategory1Id); }
			set { SetColumnValue(Columns.NoteCategory1Id, value); }
		}
		[DataMember]
		public string Category1 {
			get { return GetColumnValue<string>(Columns.Category1); }
			set { SetColumnValue(Columns.Category1, value); }
		}
		[DataMember]
		public string Desc1 {
			get { return GetColumnValue<string>(Columns.Desc1); }
			set { SetColumnValue(Columns.Desc1, value); }
		}
		[DataMember]
		public int NoteCategory2Id {
			get { return GetColumnValue<int>(Columns.NoteCategory2Id); }
			set { SetColumnValue(Columns.NoteCategory2Id, value); }
		}
		[DataMember]
		public string Category2 {
			get { return GetColumnValue<string>(Columns.Category2); }
			set { SetColumnValue(Columns.Category2, value); }
		}
		[DataMember]
		public string Desc2 {
			get { return GetColumnValue<string>(Columns.Desc2); }
			set { SetColumnValue(Columns.Desc2, value); }
		}
		[DataMember]
		public string Note {
			get { return GetColumnValue<string>(Columns.Note); }
			set { SetColumnValue(Columns.Note, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return NoteTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn NoteIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NoteTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn NoteTypeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn NoteCategory1IdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn Category1Column
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn Desc1Column
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn NoteCategory2IdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn Category2Column
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn Desc2Column
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn NoteColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[14]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string NoteID = @"NoteID";
			public const string NoteTypeId = @"NoteTypeId";
			public const string NoteType = @"NoteType";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string CustomerId = @"CustomerId";
			public const string LeadId = @"LeadId";
			public const string NoteCategory1Id = @"NoteCategory1Id";
			public const string Category1 = @"Category1";
			public const string Desc1 = @"Desc1";
			public const string NoteCategory2Id = @"NoteCategory2Id";
			public const string Category2 = @"Category2";
			public const string Desc2 = @"Desc2";
			public const string Note = @"Note";
			public const string CreatedBy = @"CreatedBy";
			public const string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MC_AddressesView class.
	/// </summary>
	[DataContract]
	public partial class MC_AddressesViewCollection : ReadOnlyList<MC_AddressesView, MC_AddressesViewCollection>
	{
		public static MC_AddressesViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AddressesViewCollection result = new MC_AddressesViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMC_Addresses view.
	/// </summary>
	[DataContract]
	public partial class MC_AddressesView : ReadOnlyRecord<MC_AddressesView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMC_Addresses", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressID = new TableSchema.TableColumn(schema);
				colvarAddressID.ColumnName = "AddressID";
				colvarAddressID.DataType = DbType.Int64;
				colvarAddressID.MaxLength = 0;
				colvarAddressID.AutoIncrement = false;
				colvarAddressID.IsNullable = false;
				colvarAddressID.IsPrimaryKey = false;
				colvarAddressID.IsForeignKey = false;
				colvarAddressID.IsReadOnly = false;
				colvarAddressID.DefaultSetting = @"";
				colvarAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = false;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = false;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"";
				colvarCountryId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarCountryName = new TableSchema.TableColumn(schema);
				colvarCountryName.ColumnName = "CountryName";
				colvarCountryName.DataType = DbType.String;
				colvarCountryName.MaxLength = 150;
				colvarCountryName.AutoIncrement = false;
				colvarCountryName.IsNullable = false;
				colvarCountryName.IsPrimaryKey = false;
				colvarCountryName.IsForeignKey = false;
				colvarCountryName.IsReadOnly = false;
				colvarCountryName.DefaultSetting = @"";
				colvarCountryName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryName);

				TableSchema.TableColumn colvarTimeZoneId = new TableSchema.TableColumn(schema);
				colvarTimeZoneId.ColumnName = "TimeZoneId";
				colvarTimeZoneId.DataType = DbType.Int32;
				colvarTimeZoneId.MaxLength = 0;
				colvarTimeZoneId.AutoIncrement = false;
				colvarTimeZoneId.IsNullable = false;
				colvarTimeZoneId.IsPrimaryKey = false;
				colvarTimeZoneId.IsForeignKey = false;
				colvarTimeZoneId.IsReadOnly = false;
				colvarTimeZoneId.DefaultSetting = @"";
				colvarTimeZoneId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneId);

				TableSchema.TableColumn colvarTimeZoneAB = new TableSchema.TableColumn(schema);
				colvarTimeZoneAB.ColumnName = "TimeZoneAB";
				colvarTimeZoneAB.DataType = DbType.AnsiString;
				colvarTimeZoneAB.MaxLength = 4;
				colvarTimeZoneAB.AutoIncrement = false;
				colvarTimeZoneAB.IsNullable = false;
				colvarTimeZoneAB.IsPrimaryKey = false;
				colvarTimeZoneAB.IsForeignKey = false;
				colvarTimeZoneAB.IsReadOnly = false;
				colvarTimeZoneAB.DefaultSetting = @"";
				colvarTimeZoneAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneAB);

				TableSchema.TableColumn colvarTimeZoneName = new TableSchema.TableColumn(schema);
				colvarTimeZoneName.ColumnName = "TimeZoneName";
				colvarTimeZoneName.DataType = DbType.AnsiString;
				colvarTimeZoneName.MaxLength = 50;
				colvarTimeZoneName.AutoIncrement = false;
				colvarTimeZoneName.IsNullable = false;
				colvarTimeZoneName.IsPrimaryKey = false;
				colvarTimeZoneName.IsForeignKey = false;
				colvarTimeZoneName.IsReadOnly = false;
				colvarTimeZoneName.DefaultSetting = @"";
				colvarTimeZoneName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneName);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = false;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = false;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarStateAB = new TableSchema.TableColumn(schema);
				colvarStateAB.ColumnName = "StateAB";
				colvarStateAB.DataType = DbType.AnsiStringFixedLength;
				colvarStateAB.MaxLength = 2;
				colvarStateAB.AutoIncrement = false;
				colvarStateAB.IsNullable = false;
				colvarStateAB.IsPrimaryKey = false;
				colvarStateAB.IsForeignKey = false;
				colvarStateAB.IsReadOnly = false;
				colvarStateAB.DefaultSetting = @"";
				colvarStateAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateAB);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.AnsiString;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarPlusFour = new TableSchema.TableColumn(schema);
				colvarPlusFour.ColumnName = "PlusFour";
				colvarPlusFour.DataType = DbType.AnsiString;
				colvarPlusFour.MaxLength = 4;
				colvarPlusFour.AutoIncrement = false;
				colvarPlusFour.IsNullable = true;
				colvarPlusFour.IsPrimaryKey = false;
				colvarPlusFour.IsForeignKey = false;
				colvarPlusFour.IsReadOnly = false;
				colvarPlusFour.DefaultSetting = @"";
				colvarPlusFour.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlusFour);

				TableSchema.TableColumn colvarCounty = new TableSchema.TableColumn(schema);
				colvarCounty.ColumnName = "County";
				colvarCounty.DataType = DbType.String;
				colvarCounty.MaxLength = 50;
				colvarCounty.AutoIncrement = false;
				colvarCounty.IsNullable = true;
				colvarCounty.IsPrimaryKey = false;
				colvarCounty.IsForeignKey = false;
				colvarCounty.IsReadOnly = false;
				colvarCounty.DefaultSetting = @"";
				colvarCounty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCounty);

				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "Phone";
				colvarPhone.DataType = DbType.AnsiString;
				colvarPhone.MaxLength = 20;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = true;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				colvarPhone.DefaultSetting = @"";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);

				TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
				colvarLatitude.ColumnName = "Latitude";
				colvarLatitude.DataType = DbType.Double;
				colvarLatitude.MaxLength = 0;
				colvarLatitude.AutoIncrement = false;
				colvarLatitude.IsNullable = false;
				colvarLatitude.IsPrimaryKey = false;
				colvarLatitude.IsForeignKey = false;
				colvarLatitude.IsReadOnly = false;
				colvarLatitude.DefaultSetting = @"";
				colvarLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitude);

				TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
				colvarLongitude.ColumnName = "Longitude";
				colvarLongitude.DataType = DbType.Double;
				colvarLongitude.MaxLength = 0;
				colvarLongitude.AutoIncrement = false;
				colvarLongitude.IsNullable = false;
				colvarLongitude.IsPrimaryKey = false;
				colvarLongitude.IsForeignKey = false;
				colvarLongitude.IsReadOnly = false;
				colvarLongitude.DefaultSetting = @"";
				colvarLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitude);

				TableSchema.TableColumn colvarCrossStreet = new TableSchema.TableColumn(schema);
				colvarCrossStreet.ColumnName = "CrossStreet";
				colvarCrossStreet.DataType = DbType.AnsiString;
				colvarCrossStreet.MaxLength = 50;
				colvarCrossStreet.AutoIncrement = false;
				colvarCrossStreet.IsNullable = true;
				colvarCrossStreet.IsPrimaryKey = false;
				colvarCrossStreet.IsForeignKey = false;
				colvarCrossStreet.IsReadOnly = false;
				colvarCrossStreet.DefaultSetting = @"";
				colvarCrossStreet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCrossStreet);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMC_Addresses",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MC_AddressesView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long AddressID {
			get { return GetColumnValue<long>(Columns.AddressID); }
			set { SetColumnValue(Columns.AddressID, value); }
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set { SetColumnValue(Columns.DealerId, value); }
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set { SetColumnValue(Columns.CountryId, value); }
		}
		[DataMember]
		public string CountryName {
			get { return GetColumnValue<string>(Columns.CountryName); }
			set { SetColumnValue(Columns.CountryName, value); }
		}
		[DataMember]
		public int TimeZoneId {
			get { return GetColumnValue<int>(Columns.TimeZoneId); }
			set { SetColumnValue(Columns.TimeZoneId, value); }
		}
		[DataMember]
		public string TimeZoneAB {
			get { return GetColumnValue<string>(Columns.TimeZoneAB); }
			set { SetColumnValue(Columns.TimeZoneAB, value); }
		}
		[DataMember]
		public string TimeZoneName {
			get { return GetColumnValue<string>(Columns.TimeZoneName); }
			set { SetColumnValue(Columns.TimeZoneName, value); }
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set { SetColumnValue(Columns.StreetAddress, value); }
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set { SetColumnValue(Columns.StreetAddress2, value); }
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set { SetColumnValue(Columns.StateId, value); }
		}
		[DataMember]
		public string StateAB {
			get { return GetColumnValue<string>(Columns.StateAB); }
			set { SetColumnValue(Columns.StateAB, value); }
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set { SetColumnValue(Columns.PostalCode, value); }
		}
		[DataMember]
		public string PlusFour {
			get { return GetColumnValue<string>(Columns.PlusFour); }
			set { SetColumnValue(Columns.PlusFour, value); }
		}
		[DataMember]
		public string County {
			get { return GetColumnValue<string>(Columns.County); }
			set { SetColumnValue(Columns.County, value); }
		}
		[DataMember]
		public string Phone {
			get { return GetColumnValue<string>(Columns.Phone); }
			set { SetColumnValue(Columns.Phone, value); }
		}
		[DataMember]
		public double Latitude {
			get { return GetColumnValue<double>(Columns.Latitude); }
			set { SetColumnValue(Columns.Latitude, value); }
		}
		[DataMember]
		public double Longitude {
			get { return GetColumnValue<double>(Columns.Longitude); }
			set { SetColumnValue(Columns.Longitude, value); }
		}
		[DataMember]
		public string CrossStreet {
			get { return GetColumnValue<string>(Columns.CrossStreet); }
			set { SetColumnValue(Columns.CrossStreet, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return AddressID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CountryNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TimeZoneIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TimeZoneABColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TimeZoneNameColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn StateABColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn PlusFourColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CountyColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PhoneColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn LatitudeColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn LongitudeColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn CrossStreetColumn
		{
			get { return Schema.Columns[18]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string AddressID = @"AddressID";
			public const string DealerId = @"DealerId";
			public const string CountryId = @"CountryId";
			public const string CountryName = @"CountryName";
			public const string TimeZoneId = @"TimeZoneId";
			public const string TimeZoneAB = @"TimeZoneAB";
			public const string TimeZoneName = @"TimeZoneName";
			public const string StreetAddress = @"StreetAddress";
			public const string StreetAddress2 = @"StreetAddress2";
			public const string City = @"City";
			public const string StateId = @"StateId";
			public const string StateAB = @"StateAB";
			public const string PostalCode = @"PostalCode";
			public const string PlusFour = @"PlusFour";
			public const string County = @"County";
			public const string Phone = @"Phone";
			public const string Latitude = @"Latitude";
			public const string Longitude = @"Longitude";
			public const string CrossStreet = @"CrossStreet";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountAndLeadInfoView class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountAndLeadInfoViewCollection : ReadOnlyList<MS_AccountAndLeadInfoView, MS_AccountAndLeadInfoViewCollection>
	{
		public static MS_AccountAndLeadInfoViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountAndLeadInfoViewCollection result = new MS_AccountAndLeadInfoViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_AccountAndLeadInfo view.
	/// </summary>
	[DataContract]
	public partial class MS_AccountAndLeadInfoView : ReadOnlyRecord<MS_AccountAndLeadInfoView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_AccountAndLeadInfo", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = false;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = false;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarIndustryAccountId = new TableSchema.TableColumn(schema);
				colvarIndustryAccountId.ColumnName = "IndustryAccountId";
				colvarIndustryAccountId.DataType = DbType.Int64;
				colvarIndustryAccountId.MaxLength = 0;
				colvarIndustryAccountId.AutoIncrement = false;
				colvarIndustryAccountId.IsNullable = true;
				colvarIndustryAccountId.IsPrimaryKey = false;
				colvarIndustryAccountId.IsForeignKey = false;
				colvarIndustryAccountId.IsReadOnly = false;
				colvarIndustryAccountId.DefaultSetting = @"";
				colvarIndustryAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountId);

				TableSchema.TableColumn colvarSystemTypeId = new TableSchema.TableColumn(schema);
				colvarSystemTypeId.ColumnName = "SystemTypeId";
				colvarSystemTypeId.DataType = DbType.AnsiString;
				colvarSystemTypeId.MaxLength = 20;
				colvarSystemTypeId.AutoIncrement = false;
				colvarSystemTypeId.IsNullable = true;
				colvarSystemTypeId.IsPrimaryKey = false;
				colvarSystemTypeId.IsForeignKey = false;
				colvarSystemTypeId.IsReadOnly = false;
				colvarSystemTypeId.DefaultSetting = @"";
				colvarSystemTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeId);

				TableSchema.TableColumn colvarCellularTypeId = new TableSchema.TableColumn(schema);
				colvarCellularTypeId.ColumnName = "CellularTypeId";
				colvarCellularTypeId.DataType = DbType.AnsiString;
				colvarCellularTypeId.MaxLength = 20;
				colvarCellularTypeId.AutoIncrement = false;
				colvarCellularTypeId.IsNullable = true;
				colvarCellularTypeId.IsPrimaryKey = false;
				colvarCellularTypeId.IsForeignKey = false;
				colvarCellularTypeId.IsReadOnly = false;
				colvarCellularTypeId.DefaultSetting = @"";
				colvarCellularTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularTypeId);

				TableSchema.TableColumn colvarPanelTypeId = new TableSchema.TableColumn(schema);
				colvarPanelTypeId.ColumnName = "PanelTypeId";
				colvarPanelTypeId.DataType = DbType.AnsiString;
				colvarPanelTypeId.MaxLength = 20;
				colvarPanelTypeId.AutoIncrement = false;
				colvarPanelTypeId.IsNullable = true;
				colvarPanelTypeId.IsPrimaryKey = false;
				colvarPanelTypeId.IsForeignKey = false;
				colvarPanelTypeId.IsReadOnly = false;
				colvarPanelTypeId.DefaultSetting = @"";
				colvarPanelTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeId);

				TableSchema.TableColumn colvarPanelItemId = new TableSchema.TableColumn(schema);
				colvarPanelItemId.ColumnName = "PanelItemId";
				colvarPanelItemId.DataType = DbType.AnsiString;
				colvarPanelItemId.MaxLength = 50;
				colvarPanelItemId.AutoIncrement = false;
				colvarPanelItemId.IsNullable = true;
				colvarPanelItemId.IsPrimaryKey = false;
				colvarPanelItemId.IsForeignKey = false;
				colvarPanelItemId.IsReadOnly = false;
				colvarPanelItemId.DefaultSetting = @"";
				colvarPanelItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelItemId);

				TableSchema.TableColumn colvarCellPackageItemId = new TableSchema.TableColumn(schema);
				colvarCellPackageItemId.ColumnName = "CellPackageItemId";
				colvarCellPackageItemId.DataType = DbType.AnsiString;
				colvarCellPackageItemId.MaxLength = 50;
				colvarCellPackageItemId.AutoIncrement = false;
				colvarCellPackageItemId.IsNullable = true;
				colvarCellPackageItemId.IsPrimaryKey = false;
				colvarCellPackageItemId.IsForeignKey = false;
				colvarCellPackageItemId.IsReadOnly = false;
				colvarCellPackageItemId.DefaultSetting = @"";
				colvarCellPackageItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellPackageItemId);

				TableSchema.TableColumn colvarContractId = new TableSchema.TableColumn(schema);
				colvarContractId.ColumnName = "ContractId";
				colvarContractId.DataType = DbType.Int32;
				colvarContractId.MaxLength = 0;
				colvarContractId.AutoIncrement = false;
				colvarContractId.IsNullable = true;
				colvarContractId.IsPrimaryKey = false;
				colvarContractId.IsForeignKey = false;
				colvarContractId.IsReadOnly = false;
				colvarContractId.DefaultSetting = @"";
				colvarContractId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_AccountAndLeadInfo",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_AccountAndLeadInfoView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set { SetColumnValue(Columns.AccountID, value); }
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set { SetColumnValue(Columns.LeadId, value); }
		}
		[DataMember]
		public long CustomerId {
			get { return GetColumnValue<long>(Columns.CustomerId); }
			set { SetColumnValue(Columns.CustomerId, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public long? IndustryAccountId {
			get { return GetColumnValue<long?>(Columns.IndustryAccountId); }
			set { SetColumnValue(Columns.IndustryAccountId, value); }
		}
		[DataMember]
		public string SystemTypeId {
			get { return GetColumnValue<string>(Columns.SystemTypeId); }
			set { SetColumnValue(Columns.SystemTypeId, value); }
		}
		[DataMember]
		public string CellularTypeId {
			get { return GetColumnValue<string>(Columns.CellularTypeId); }
			set { SetColumnValue(Columns.CellularTypeId, value); }
		}
		[DataMember]
		public string PanelTypeId {
			get { return GetColumnValue<string>(Columns.PanelTypeId); }
			set { SetColumnValue(Columns.PanelTypeId, value); }
		}
		[DataMember]
		public string PanelItemId {
			get { return GetColumnValue<string>(Columns.PanelItemId); }
			set { SetColumnValue(Columns.PanelItemId, value); }
		}
		[DataMember]
		public string CellPackageItemId {
			get { return GetColumnValue<string>(Columns.CellPackageItemId); }
			set { SetColumnValue(Columns.CellPackageItemId, value); }
		}
		[DataMember]
		public int? ContractId {
			get { return GetColumnValue<int?>(Columns.ContractId); }
			set { SetColumnValue(Columns.ContractId, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IndustryAccountIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SystemTypeIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CellularTypeIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PanelTypeIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PanelItemIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CellPackageItemIdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ContractIdColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string AccountID = @"AccountID";
			public const string LeadId = @"LeadId";
			public const string CustomerId = @"CustomerId";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string IndustryAccountId = @"IndustryAccountId";
			public const string SystemTypeId = @"SystemTypeId";
			public const string CellularTypeId = @"CellularTypeId";
			public const string PanelTypeId = @"PanelTypeId";
			public const string PanelItemId = @"PanelItemId";
			public const string CellPackageItemId = @"CellPackageItemId";
			public const string ContractId = @"ContractId";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountClientDetailsView class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountClientDetailsViewCollection : ReadOnlyList<MS_AccountClientDetailsView, MS_AccountClientDetailsViewCollection>
	{
		public static MS_AccountClientDetailsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountClientDetailsViewCollection result = new MS_AccountClientDetailsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_AccountClientDetails view.
	/// </summary>
	[DataContract]
	public partial class MS_AccountClientDetailsView : ReadOnlyRecord<MS_AccountClientDetailsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_AccountClientDetails", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerAccountID = new TableSchema.TableColumn(schema);
				colvarCustomerAccountID.ColumnName = "CustomerAccountID";
				colvarCustomerAccountID.DataType = DbType.Int64;
				colvarCustomerAccountID.MaxLength = 0;
				colvarCustomerAccountID.AutoIncrement = false;
				colvarCustomerAccountID.IsNullable = false;
				colvarCustomerAccountID.IsPrimaryKey = false;
				colvarCustomerAccountID.IsForeignKey = false;
				colvarCustomerAccountID.IsReadOnly = false;
				colvarCustomerAccountID.DefaultSetting = @"";
				colvarCustomerAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerAccountID);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = false;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = false;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"";
				colvarCustomerTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerTypeId);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = false;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = false;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = false;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.AnsiString;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarPlusFour = new TableSchema.TableColumn(schema);
				colvarPlusFour.ColumnName = "PlusFour";
				colvarPlusFour.DataType = DbType.AnsiString;
				colvarPlusFour.MaxLength = 4;
				colvarPlusFour.AutoIncrement = false;
				colvarPlusFour.IsNullable = true;
				colvarPlusFour.IsPrimaryKey = false;
				colvarPlusFour.IsForeignKey = false;
				colvarPlusFour.IsReadOnly = false;
				colvarPlusFour.DefaultSetting = @"";
				colvarPlusFour.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlusFour);

				TableSchema.TableColumn colvarCounty = new TableSchema.TableColumn(schema);
				colvarCounty.ColumnName = "County";
				colvarCounty.DataType = DbType.String;
				colvarCounty.MaxLength = 50;
				colvarCounty.AutoIncrement = false;
				colvarCounty.IsNullable = true;
				colvarCounty.IsPrimaryKey = false;
				colvarCounty.IsForeignKey = false;
				colvarCounty.IsReadOnly = false;
				colvarCounty.DefaultSetting = @"";
				colvarCounty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCounty);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = false;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = false;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"";
				colvarCountryId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = false;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarLocalizationId = new TableSchema.TableColumn(schema);
				colvarLocalizationId.ColumnName = "LocalizationId";
				colvarLocalizationId.DataType = DbType.AnsiString;
				colvarLocalizationId.MaxLength = 20;
				colvarLocalizationId.AutoIncrement = false;
				colvarLocalizationId.IsNullable = false;
				colvarLocalizationId.IsPrimaryKey = false;
				colvarLocalizationId.IsForeignKey = false;
				colvarLocalizationId.IsReadOnly = false;
				colvarLocalizationId.DefaultSetting = @"";
				colvarLocalizationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocalizationId);

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.String;
				colvarPrefix.MaxLength = 50;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = true;
				colvarPrefix.IsPrimaryKey = false;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPostfix = new TableSchema.TableColumn(schema);
				colvarPostfix.ColumnName = "Postfix";
				colvarPostfix.DataType = DbType.String;
				colvarPostfix.MaxLength = 50;
				colvarPostfix.AutoIncrement = false;
				colvarPostfix.IsNullable = true;
				colvarPostfix.IsPrimaryKey = false;
				colvarPostfix.IsForeignKey = false;
				colvarPostfix.IsReadOnly = false;
				colvarPostfix.DefaultSetting = @"";
				colvarPostfix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostfix);

				TableSchema.TableColumn colvarGender = new TableSchema.TableColumn(schema);
				colvarGender.ColumnName = "Gender";
				colvarGender.DataType = DbType.String;
				colvarGender.MaxLength = 10;
				colvarGender.AutoIncrement = false;
				colvarGender.IsNullable = false;
				colvarGender.IsPrimaryKey = false;
				colvarGender.IsForeignKey = false;
				colvarGender.IsReadOnly = false;
				colvarGender.DefaultSetting = @"";
				colvarGender.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGender);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.AnsiString;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.AnsiString;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.AnsiString;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarCustomerIsActive = new TableSchema.TableColumn(schema);
				colvarCustomerIsActive.ColumnName = "CustomerIsActive";
				colvarCustomerIsActive.DataType = DbType.Boolean;
				colvarCustomerIsActive.MaxLength = 0;
				colvarCustomerIsActive.AutoIncrement = false;
				colvarCustomerIsActive.IsNullable = false;
				colvarCustomerIsActive.IsPrimaryKey = false;
				colvarCustomerIsActive.IsForeignKey = false;
				colvarCustomerIsActive.IsReadOnly = false;
				colvarCustomerIsActive.DefaultSetting = @"";
				colvarCustomerIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerIsActive);

				TableSchema.TableColumn colvarIndustryAccountId = new TableSchema.TableColumn(schema);
				colvarIndustryAccountId.ColumnName = "IndustryAccountId";
				colvarIndustryAccountId.DataType = DbType.Int64;
				colvarIndustryAccountId.MaxLength = 0;
				colvarIndustryAccountId.AutoIncrement = false;
				colvarIndustryAccountId.IsNullable = true;
				colvarIndustryAccountId.IsPrimaryKey = false;
				colvarIndustryAccountId.IsForeignKey = false;
				colvarIndustryAccountId.IsReadOnly = false;
				colvarIndustryAccountId.DefaultSetting = @"";
				colvarIndustryAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountId);

				TableSchema.TableColumn colvarSystemTypeId = new TableSchema.TableColumn(schema);
				colvarSystemTypeId.ColumnName = "SystemTypeId";
				colvarSystemTypeId.DataType = DbType.AnsiString;
				colvarSystemTypeId.MaxLength = 20;
				colvarSystemTypeId.AutoIncrement = false;
				colvarSystemTypeId.IsNullable = true;
				colvarSystemTypeId.IsPrimaryKey = false;
				colvarSystemTypeId.IsForeignKey = false;
				colvarSystemTypeId.IsReadOnly = false;
				colvarSystemTypeId.DefaultSetting = @"";
				colvarSystemTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeId);

				TableSchema.TableColumn colvarCellularTypeId = new TableSchema.TableColumn(schema);
				colvarCellularTypeId.ColumnName = "CellularTypeId";
				colvarCellularTypeId.DataType = DbType.AnsiString;
				colvarCellularTypeId.MaxLength = 20;
				colvarCellularTypeId.AutoIncrement = false;
				colvarCellularTypeId.IsNullable = true;
				colvarCellularTypeId.IsPrimaryKey = false;
				colvarCellularTypeId.IsForeignKey = false;
				colvarCellularTypeId.IsReadOnly = false;
				colvarCellularTypeId.DefaultSetting = @"";
				colvarCellularTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularTypeId);

				TableSchema.TableColumn colvarPanelTypeId = new TableSchema.TableColumn(schema);
				colvarPanelTypeId.ColumnName = "PanelTypeId";
				colvarPanelTypeId.DataType = DbType.AnsiString;
				colvarPanelTypeId.MaxLength = 20;
				colvarPanelTypeId.AutoIncrement = false;
				colvarPanelTypeId.IsNullable = true;
				colvarPanelTypeId.IsPrimaryKey = false;
				colvarPanelTypeId.IsForeignKey = false;
				colvarPanelTypeId.IsReadOnly = false;
				colvarPanelTypeId.DefaultSetting = @"";
				colvarPanelTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeId);

				TableSchema.TableColumn colvarSimProductBarcodeId = new TableSchema.TableColumn(schema);
				colvarSimProductBarcodeId.ColumnName = "SimProductBarcodeId";
				colvarSimProductBarcodeId.DataType = DbType.String;
				colvarSimProductBarcodeId.MaxLength = 50;
				colvarSimProductBarcodeId.AutoIncrement = false;
				colvarSimProductBarcodeId.IsNullable = true;
				colvarSimProductBarcodeId.IsPrimaryKey = false;
				colvarSimProductBarcodeId.IsForeignKey = false;
				colvarSimProductBarcodeId.IsReadOnly = false;
				colvarSimProductBarcodeId.DefaultSetting = @"";
				colvarSimProductBarcodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSimProductBarcodeId);

				TableSchema.TableColumn colvarMsAccountIsActive = new TableSchema.TableColumn(schema);
				colvarMsAccountIsActive.ColumnName = "MsAccountIsActive";
				colvarMsAccountIsActive.DataType = DbType.Boolean;
				colvarMsAccountIsActive.MaxLength = 0;
				colvarMsAccountIsActive.AutoIncrement = false;
				colvarMsAccountIsActive.IsNullable = false;
				colvarMsAccountIsActive.IsPrimaryKey = false;
				colvarMsAccountIsActive.IsForeignKey = false;
				colvarMsAccountIsActive.IsReadOnly = false;
				colvarMsAccountIsActive.DefaultSetting = @"";
				colvarMsAccountIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAccountIsActive);

				TableSchema.TableColumn colvarIndustryAccount = new TableSchema.TableColumn(schema);
				colvarIndustryAccount.ColumnName = "IndustryAccount";
				colvarIndustryAccount.DataType = DbType.AnsiString;
				colvarIndustryAccount.MaxLength = 14;
				colvarIndustryAccount.AutoIncrement = false;
				colvarIndustryAccount.IsNullable = true;
				colvarIndustryAccount.IsPrimaryKey = false;
				colvarIndustryAccount.IsForeignKey = false;
				colvarIndustryAccount.IsReadOnly = false;
				colvarIndustryAccount.DefaultSetting = @"";
				colvarIndustryAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccount);

				TableSchema.TableColumn colvarDesignator = new TableSchema.TableColumn(schema);
				colvarDesignator.ColumnName = "Designator";
				colvarDesignator.DataType = DbType.AnsiString;
				colvarDesignator.MaxLength = 6;
				colvarDesignator.AutoIncrement = false;
				colvarDesignator.IsNullable = true;
				colvarDesignator.IsPrimaryKey = false;
				colvarDesignator.IsForeignKey = false;
				colvarDesignator.IsReadOnly = false;
				colvarDesignator.DefaultSetting = @"";
				colvarDesignator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesignator);

				TableSchema.TableColumn colvarSubscriberNumber = new TableSchema.TableColumn(schema);
				colvarSubscriberNumber.ColumnName = "SubscriberNumber";
				colvarSubscriberNumber.DataType = DbType.AnsiString;
				colvarSubscriberNumber.MaxLength = 6;
				colvarSubscriberNumber.AutoIncrement = false;
				colvarSubscriberNumber.IsNullable = true;
				colvarSubscriberNumber.IsPrimaryKey = false;
				colvarSubscriberNumber.IsForeignKey = false;
				colvarSubscriberNumber.IsReadOnly = false;
				colvarSubscriberNumber.DefaultSetting = @"";
				colvarSubscriberNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubscriberNumber);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_AccountClientDetails",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_AccountClientDetailsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerAccountID {
			get { return GetColumnValue<long>(Columns.CustomerAccountID); }
			set { SetColumnValue(Columns.CustomerAccountID, value); }
		}
		[DataMember]
		public long CustomerId {
			get { return GetColumnValue<long>(Columns.CustomerId); }
			set { SetColumnValue(Columns.CustomerId, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set { SetColumnValue(Columns.CustomerTypeId, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set { SetColumnValue(Columns.DealerId, value); }
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set { SetColumnValue(Columns.AddressId, value); }
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set { SetColumnValue(Columns.StreetAddress, value); }
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set { SetColumnValue(Columns.StreetAddress2, value); }
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set { SetColumnValue(Columns.StateId, value); }
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set { SetColumnValue(Columns.PostalCode, value); }
		}
		[DataMember]
		public string PlusFour {
			get { return GetColumnValue<string>(Columns.PlusFour); }
			set { SetColumnValue(Columns.PlusFour, value); }
		}
		[DataMember]
		public string County {
			get { return GetColumnValue<string>(Columns.County); }
			set { SetColumnValue(Columns.County, value); }
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set { SetColumnValue(Columns.CountryId, value); }
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set { SetColumnValue(Columns.LeadId, value); }
		}
		[DataMember]
		public string LocalizationId {
			get { return GetColumnValue<string>(Columns.LocalizationId); }
			set { SetColumnValue(Columns.LocalizationId, value); }
		}
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set { SetColumnValue(Columns.Prefix, value); }
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set { SetColumnValue(Columns.MiddleName, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string Postfix {
			get { return GetColumnValue<string>(Columns.Postfix); }
			set { SetColumnValue(Columns.Postfix, value); }
		}
		[DataMember]
		public string Gender {
			get { return GetColumnValue<string>(Columns.Gender); }
			set { SetColumnValue(Columns.Gender, value); }
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set { SetColumnValue(Columns.PhoneHome, value); }
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set { SetColumnValue(Columns.PhoneWork, value); }
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set { SetColumnValue(Columns.PhoneMobile, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set { SetColumnValue(Columns.DOB, value); }
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set { SetColumnValue(Columns.SSN, value); }
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set { SetColumnValue(Columns.Username, value); }
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set { SetColumnValue(Columns.Password, value); }
		}
		[DataMember]
		public bool CustomerIsActive {
			get { return GetColumnValue<bool>(Columns.CustomerIsActive); }
			set { SetColumnValue(Columns.CustomerIsActive, value); }
		}
		[DataMember]
		public long? IndustryAccountId {
			get { return GetColumnValue<long?>(Columns.IndustryAccountId); }
			set { SetColumnValue(Columns.IndustryAccountId, value); }
		}
		[DataMember]
		public string SystemTypeId {
			get { return GetColumnValue<string>(Columns.SystemTypeId); }
			set { SetColumnValue(Columns.SystemTypeId, value); }
		}
		[DataMember]
		public string CellularTypeId {
			get { return GetColumnValue<string>(Columns.CellularTypeId); }
			set { SetColumnValue(Columns.CellularTypeId, value); }
		}
		[DataMember]
		public string PanelTypeId {
			get { return GetColumnValue<string>(Columns.PanelTypeId); }
			set { SetColumnValue(Columns.PanelTypeId, value); }
		}
		[DataMember]
		public string SimProductBarcodeId {
			get { return GetColumnValue<string>(Columns.SimProductBarcodeId); }
			set { SetColumnValue(Columns.SimProductBarcodeId, value); }
		}
		[DataMember]
		public bool MsAccountIsActive {
			get { return GetColumnValue<bool>(Columns.MsAccountIsActive); }
			set { SetColumnValue(Columns.MsAccountIsActive, value); }
		}
		[DataMember]
		public string IndustryAccount {
			get { return GetColumnValue<string>(Columns.IndustryAccount); }
			set { SetColumnValue(Columns.IndustryAccount, value); }
		}
		[DataMember]
		public string Designator {
			get { return GetColumnValue<string>(Columns.Designator); }
			set { SetColumnValue(Columns.Designator, value); }
		}
		[DataMember]
		public string SubscriberNumber {
			get { return GetColumnValue<string>(Columns.SubscriberNumber); }
			set { SetColumnValue(Columns.SubscriberNumber, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerAccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerAccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn PlusFourColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CountyColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn LocalizationIdColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn PostfixColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn GenderColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn CustomerIsActiveColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn IndustryAccountIdColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn SystemTypeIdColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn CellularTypeIdColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn PanelTypeIdColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn SimProductBarcodeIdColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn MsAccountIsActiveColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn IndustryAccountColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn DesignatorColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn SubscriberNumberColumn
		{
			get { return Schema.Columns[40]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerAccountID = @"CustomerAccountID";
			public const string CustomerId = @"CustomerId";
			public const string AccountId = @"AccountId";
			public const string CustomerTypeId = @"CustomerTypeId";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string DealerId = @"DealerId";
			public const string AddressId = @"AddressId";
			public const string StreetAddress = @"StreetAddress";
			public const string StreetAddress2 = @"StreetAddress2";
			public const string City = @"City";
			public const string StateId = @"StateId";
			public const string PostalCode = @"PostalCode";
			public const string PlusFour = @"PlusFour";
			public const string County = @"County";
			public const string CountryId = @"CountryId";
			public const string LeadId = @"LeadId";
			public const string LocalizationId = @"LocalizationId";
			public const string Prefix = @"Prefix";
			public const string FirstName = @"FirstName";
			public const string MiddleName = @"MiddleName";
			public const string LastName = @"LastName";
			public const string Postfix = @"Postfix";
			public const string Gender = @"Gender";
			public const string PhoneHome = @"PhoneHome";
			public const string PhoneWork = @"PhoneWork";
			public const string PhoneMobile = @"PhoneMobile";
			public const string Email = @"Email";
			public const string DOB = @"DOB";
			public const string SSN = @"SSN";
			public const string Username = @"Username";
			public const string Password = @"Password";
			public const string CustomerIsActive = @"CustomerIsActive";
			public const string IndustryAccountId = @"IndustryAccountId";
			public const string SystemTypeId = @"SystemTypeId";
			public const string CellularTypeId = @"CellularTypeId";
			public const string PanelTypeId = @"PanelTypeId";
			public const string SimProductBarcodeId = @"SimProductBarcodeId";
			public const string MsAccountIsActive = @"MsAccountIsActive";
			public const string IndustryAccount = @"IndustryAccount";
			public const string Designator = @"Designator";
			public const string SubscriberNumber = @"SubscriberNumber";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountClientsView class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountClientsViewCollection : ReadOnlyList<MS_AccountClientsView, MS_AccountClientsViewCollection>
	{
		public static MS_AccountClientsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountClientsViewCollection result = new MS_AccountClientsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_AccountClients view.
	/// </summary>
	[DataContract]
	public partial class MS_AccountClientsView : ReadOnlyRecord<MS_AccountClientsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_AccountClients", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int64;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarAccountName = new TableSchema.TableColumn(schema);
				colvarAccountName.ColumnName = "AccountName";
				colvarAccountName.DataType = DbType.String;
				colvarAccountName.MaxLength = 50;
				colvarAccountName.AutoIncrement = false;
				colvarAccountName.IsNullable = true;
				colvarAccountName.IsPrimaryKey = false;
				colvarAccountName.IsForeignKey = false;
				colvarAccountName.IsReadOnly = false;
				colvarAccountName.DefaultSetting = @"";
				colvarAccountName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountName);

				TableSchema.TableColumn colvarAccountDesc = new TableSchema.TableColumn(schema);
				colvarAccountDesc.ColumnName = "AccountDesc";
				colvarAccountDesc.DataType = DbType.String;
				colvarAccountDesc.MaxLength = -1;
				colvarAccountDesc.AutoIncrement = false;
				colvarAccountDesc.IsNullable = true;
				colvarAccountDesc.IsPrimaryKey = false;
				colvarAccountDesc.IsForeignKey = false;
				colvarAccountDesc.IsReadOnly = false;
				colvarAccountDesc.DefaultSetting = @"";
				colvarAccountDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountDesc);

				TableSchema.TableColumn colvarEventID = new TableSchema.TableColumn(schema);
				colvarEventID.ColumnName = "EventID";
				colvarEventID.DataType = DbType.Int64;
				colvarEventID.MaxLength = 0;
				colvarEventID.AutoIncrement = false;
				colvarEventID.IsNullable = true;
				colvarEventID.IsPrimaryKey = false;
				colvarEventID.IsForeignKey = false;
				colvarEventID.IsReadOnly = false;
				colvarEventID.DefaultSetting = @"";
				colvarEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventID);

				TableSchema.TableColumn colvarEventDate = new TableSchema.TableColumn(schema);
				colvarEventDate.ColumnName = "EventDate";
				colvarEventDate.DataType = DbType.DateTime;
				colvarEventDate.MaxLength = 0;
				colvarEventDate.AutoIncrement = false;
				colvarEventDate.IsNullable = true;
				colvarEventDate.IsPrimaryKey = false;
				colvarEventDate.IsForeignKey = false;
				colvarEventDate.IsReadOnly = false;
				colvarEventDate.DefaultSetting = @"";
				colvarEventDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventDate);

				TableSchema.TableColumn colvarLastLatt = new TableSchema.TableColumn(schema);
				colvarLastLatt.ColumnName = "LastLatt";
				colvarLastLatt.DataType = DbType.AnsiString;
				colvarLastLatt.MaxLength = 50;
				colvarLastLatt.AutoIncrement = false;
				colvarLastLatt.IsNullable = true;
				colvarLastLatt.IsPrimaryKey = false;
				colvarLastLatt.IsForeignKey = false;
				colvarLastLatt.IsReadOnly = false;
				colvarLastLatt.DefaultSetting = @"";
				colvarLastLatt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastLatt);

				TableSchema.TableColumn colvarLastLong = new TableSchema.TableColumn(schema);
				colvarLastLong.ColumnName = "LastLong";
				colvarLastLong.DataType = DbType.AnsiString;
				colvarLastLong.MaxLength = 50;
				colvarLastLong.AutoIncrement = false;
				colvarLastLong.IsNullable = true;
				colvarLastLong.IsPrimaryKey = false;
				colvarLastLong.IsForeignKey = false;
				colvarLastLong.IsReadOnly = false;
				colvarLastLong.DefaultSetting = @"";
				colvarLastLong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastLong);

				TableSchema.TableColumn colvarUIName = new TableSchema.TableColumn(schema);
				colvarUIName.ColumnName = "UIName";
				colvarUIName.DataType = DbType.AnsiString;
				colvarUIName.MaxLength = 50;
				colvarUIName.AutoIncrement = false;
				colvarUIName.IsNullable = true;
				colvarUIName.IsPrimaryKey = false;
				colvarUIName.IsForeignKey = false;
				colvarUIName.IsReadOnly = false;
				colvarUIName.DefaultSetting = @"";
				colvarUIName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUIName);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = false;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"";
				colvarCustomerTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerTypeId);

				TableSchema.TableColumn colvarSystemTypeId = new TableSchema.TableColumn(schema);
				colvarSystemTypeId.ColumnName = "SystemTypeId";
				colvarSystemTypeId.DataType = DbType.AnsiString;
				colvarSystemTypeId.MaxLength = 20;
				colvarSystemTypeId.AutoIncrement = false;
				colvarSystemTypeId.IsNullable = true;
				colvarSystemTypeId.IsPrimaryKey = false;
				colvarSystemTypeId.IsForeignKey = false;
				colvarSystemTypeId.IsReadOnly = false;
				colvarSystemTypeId.DefaultSetting = @"";
				colvarSystemTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeId);

				TableSchema.TableColumn colvarPanelTypeId = new TableSchema.TableColumn(schema);
				colvarPanelTypeId.ColumnName = "PanelTypeId";
				colvarPanelTypeId.DataType = DbType.AnsiString;
				colvarPanelTypeId.MaxLength = 20;
				colvarPanelTypeId.AutoIncrement = false;
				colvarPanelTypeId.IsNullable = true;
				colvarPanelTypeId.IsPrimaryKey = false;
				colvarPanelTypeId.IsForeignKey = false;
				colvarPanelTypeId.IsReadOnly = false;
				colvarPanelTypeId.DefaultSetting = @"";
				colvarPanelTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeId);

				TableSchema.TableColumn colvarIndustryAccountId = new TableSchema.TableColumn(schema);
				colvarIndustryAccountId.ColumnName = "IndustryAccountId";
				colvarIndustryAccountId.DataType = DbType.Int64;
				colvarIndustryAccountId.MaxLength = 0;
				colvarIndustryAccountId.AutoIncrement = false;
				colvarIndustryAccountId.IsNullable = true;
				colvarIndustryAccountId.IsPrimaryKey = false;
				colvarIndustryAccountId.IsForeignKey = false;
				colvarIndustryAccountId.IsReadOnly = false;
				colvarIndustryAccountId.DefaultSetting = @"";
				colvarIndustryAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountId);

				TableSchema.TableColumn colvarIndustryAccount = new TableSchema.TableColumn(schema);
				colvarIndustryAccount.ColumnName = "IndustryAccount";
				colvarIndustryAccount.DataType = DbType.AnsiString;
				colvarIndustryAccount.MaxLength = 14;
				colvarIndustryAccount.AutoIncrement = false;
				colvarIndustryAccount.IsNullable = true;
				colvarIndustryAccount.IsPrimaryKey = false;
				colvarIndustryAccount.IsForeignKey = false;
				colvarIndustryAccount.IsReadOnly = false;
				colvarIndustryAccount.DefaultSetting = @"";
				colvarIndustryAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccount);

				TableSchema.TableColumn colvarDesignator = new TableSchema.TableColumn(schema);
				colvarDesignator.ColumnName = "Designator";
				colvarDesignator.DataType = DbType.AnsiString;
				colvarDesignator.MaxLength = 6;
				colvarDesignator.AutoIncrement = false;
				colvarDesignator.IsNullable = true;
				colvarDesignator.IsPrimaryKey = false;
				colvarDesignator.IsForeignKey = false;
				colvarDesignator.IsReadOnly = false;
				colvarDesignator.DefaultSetting = @"";
				colvarDesignator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesignator);

				TableSchema.TableColumn colvarSubscriberNumber = new TableSchema.TableColumn(schema);
				colvarSubscriberNumber.ColumnName = "SubscriberNumber";
				colvarSubscriberNumber.DataType = DbType.AnsiString;
				colvarSubscriberNumber.MaxLength = 6;
				colvarSubscriberNumber.AutoIncrement = false;
				colvarSubscriberNumber.IsNullable = true;
				colvarSubscriberNumber.IsPrimaryKey = false;
				colvarSubscriberNumber.IsForeignKey = false;
				colvarSubscriberNumber.IsReadOnly = false;
				colvarSubscriberNumber.DefaultSetting = @"";
				colvarSubscriberNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubscriberNumber);

				TableSchema.TableColumn colvarLastEvent = new TableSchema.TableColumn(schema);
				colvarLastEvent.ColumnName = "LastEvent";
				colvarLastEvent.DataType = DbType.DateTime;
				colvarLastEvent.MaxLength = 0;
				colvarLastEvent.AutoIncrement = false;
				colvarLastEvent.IsNullable = false;
				colvarLastEvent.IsPrimaryKey = false;
				colvarLastEvent.IsForeignKey = false;
				colvarLastEvent.IsReadOnly = false;
				colvarLastEvent.DefaultSetting = @"";
				colvarLastEvent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastEvent);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_AccountClients",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_AccountClientsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public long CustomerID {
			get { return GetColumnValue<long>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public string AccountName {
			get { return GetColumnValue<string>(Columns.AccountName); }
			set { SetColumnValue(Columns.AccountName, value); }
		}
		[DataMember]
		public string AccountDesc {
			get { return GetColumnValue<string>(Columns.AccountDesc); }
			set { SetColumnValue(Columns.AccountDesc, value); }
		}
		[DataMember]
		public long? EventID {
			get { return GetColumnValue<long?>(Columns.EventID); }
			set { SetColumnValue(Columns.EventID, value); }
		}
		[DataMember]
		public DateTime? EventDate {
			get { return GetColumnValue<DateTime?>(Columns.EventDate); }
			set { SetColumnValue(Columns.EventDate, value); }
		}
		[DataMember]
		public string LastLatt {
			get { return GetColumnValue<string>(Columns.LastLatt); }
			set { SetColumnValue(Columns.LastLatt, value); }
		}
		[DataMember]
		public string LastLong {
			get { return GetColumnValue<string>(Columns.LastLong); }
			set { SetColumnValue(Columns.LastLong, value); }
		}
		[DataMember]
		public string UIName {
			get { return GetColumnValue<string>(Columns.UIName); }
			set { SetColumnValue(Columns.UIName, value); }
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set { SetColumnValue(Columns.Username, value); }
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set { SetColumnValue(Columns.Password, value); }
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set { SetColumnValue(Columns.CustomerTypeId, value); }
		}
		[DataMember]
		public string SystemTypeId {
			get { return GetColumnValue<string>(Columns.SystemTypeId); }
			set { SetColumnValue(Columns.SystemTypeId, value); }
		}
		[DataMember]
		public string PanelTypeId {
			get { return GetColumnValue<string>(Columns.PanelTypeId); }
			set { SetColumnValue(Columns.PanelTypeId, value); }
		}
		[DataMember]
		public long? IndustryAccountId {
			get { return GetColumnValue<long?>(Columns.IndustryAccountId); }
			set { SetColumnValue(Columns.IndustryAccountId, value); }
		}
		[DataMember]
		public string IndustryAccount {
			get { return GetColumnValue<string>(Columns.IndustryAccount); }
			set { SetColumnValue(Columns.IndustryAccount, value); }
		}
		[DataMember]
		public string Designator {
			get { return GetColumnValue<string>(Columns.Designator); }
			set { SetColumnValue(Columns.Designator, value); }
		}
		[DataMember]
		public string SubscriberNumber {
			get { return GetColumnValue<string>(Columns.SubscriberNumber); }
			set { SetColumnValue(Columns.SubscriberNumber, value); }
		}
		[DataMember]
		public DateTime LastEvent {
			get { return GetColumnValue<DateTime>(Columns.LastEvent); }
			set { SetColumnValue(Columns.LastEvent, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerMasterFileId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AccountDescColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn EventIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn EventDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn LastLattColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn LastLongColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn UINameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn SystemTypeIdColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PanelTypeIdColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IndustryAccountIdColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IndustryAccountColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn DesignatorColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn SubscriberNumberColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn LastEventColumn
		{
			get { return Schema.Columns[19]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string CustomerID = @"CustomerID";
			public const string AccountId = @"AccountId";
			public const string AccountName = @"AccountName";
			public const string AccountDesc = @"AccountDesc";
			public const string EventID = @"EventID";
			public const string EventDate = @"EventDate";
			public const string LastLatt = @"LastLatt";
			public const string LastLong = @"LastLong";
			public const string UIName = @"UIName";
			public const string Username = @"Username";
			public const string Password = @"Password";
			public const string CustomerTypeId = @"CustomerTypeId";
			public const string SystemTypeId = @"SystemTypeId";
			public const string PanelTypeId = @"PanelTypeId";
			public const string IndustryAccountId = @"IndustryAccountId";
			public const string IndustryAccount = @"IndustryAccount";
			public const string Designator = @"Designator";
			public const string SubscriberNumber = @"SubscriberNumber";
			public const string LastEvent = @"LastEvent";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountDispatchAgencyAssignmentView class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountDispatchAgencyAssignmentViewCollection : ReadOnlyList<MS_AccountDispatchAgencyAssignmentView, MS_AccountDispatchAgencyAssignmentViewCollection>
	{
		public static MS_AccountDispatchAgencyAssignmentViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountDispatchAgencyAssignmentViewCollection result = new MS_AccountDispatchAgencyAssignmentViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_AccountDispatchAgencyAssignment view.
	/// </summary>
	[DataContract]
	public partial class MS_AccountDispatchAgencyAssignmentView : ReadOnlyRecord<MS_AccountDispatchAgencyAssignmentView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_AccountDispatchAgencyAssignment", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDispatchAgencyAssignmentID = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyAssignmentID.ColumnName = "DispatchAgencyAssignmentID";
				colvarDispatchAgencyAssignmentID.DataType = DbType.Int64;
				colvarDispatchAgencyAssignmentID.MaxLength = 0;
				colvarDispatchAgencyAssignmentID.AutoIncrement = false;
				colvarDispatchAgencyAssignmentID.IsNullable = false;
				colvarDispatchAgencyAssignmentID.IsPrimaryKey = false;
				colvarDispatchAgencyAssignmentID.IsForeignKey = false;
				colvarDispatchAgencyAssignmentID.IsReadOnly = false;
				colvarDispatchAgencyAssignmentID.DefaultSetting = @"";
				colvarDispatchAgencyAssignmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyAssignmentID);

				TableSchema.TableColumn colvarDispatchAgencyId = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyId.ColumnName = "DispatchAgencyId";
				colvarDispatchAgencyId.DataType = DbType.Int32;
				colvarDispatchAgencyId.MaxLength = 0;
				colvarDispatchAgencyId.AutoIncrement = false;
				colvarDispatchAgencyId.IsNullable = false;
				colvarDispatchAgencyId.IsPrimaryKey = false;
				colvarDispatchAgencyId.IsForeignKey = false;
				colvarDispatchAgencyId.IsReadOnly = false;
				colvarDispatchAgencyId.DefaultSetting = @"";
				colvarDispatchAgencyId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyId);

				TableSchema.TableColumn colvarDispatchAgencyTypeId = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyTypeId.ColumnName = "DispatchAgencyTypeId";
				colvarDispatchAgencyTypeId.DataType = DbType.Byte;
				colvarDispatchAgencyTypeId.MaxLength = 0;
				colvarDispatchAgencyTypeId.AutoIncrement = false;
				colvarDispatchAgencyTypeId.IsNullable = false;
				colvarDispatchAgencyTypeId.IsPrimaryKey = false;
				colvarDispatchAgencyTypeId.IsForeignKey = false;
				colvarDispatchAgencyTypeId.IsReadOnly = false;
				colvarDispatchAgencyTypeId.DefaultSetting = @"";
				colvarDispatchAgencyTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyTypeId);

				TableSchema.TableColumn colvarDispatchAgencyTypeName = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyTypeName.ColumnName = "DispatchAgencyTypeName";
				colvarDispatchAgencyTypeName.DataType = DbType.AnsiString;
				colvarDispatchAgencyTypeName.MaxLength = 50;
				colvarDispatchAgencyTypeName.AutoIncrement = false;
				colvarDispatchAgencyTypeName.IsNullable = false;
				colvarDispatchAgencyTypeName.IsPrimaryKey = false;
				colvarDispatchAgencyTypeName.IsForeignKey = false;
				colvarDispatchAgencyTypeName.IsReadOnly = false;
				colvarDispatchAgencyTypeName.DefaultSetting = @"";
				colvarDispatchAgencyTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyTypeName);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = false;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"";
				colvarMonitoringStationOSId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarMsAgencyNumber = new TableSchema.TableColumn(schema);
				colvarMsAgencyNumber.ColumnName = "MsAgencyNumber";
				colvarMsAgencyNumber.DataType = DbType.AnsiString;
				colvarMsAgencyNumber.MaxLength = 50;
				colvarMsAgencyNumber.AutoIncrement = false;
				colvarMsAgencyNumber.IsNullable = false;
				colvarMsAgencyNumber.IsPrimaryKey = false;
				colvarMsAgencyNumber.IsForeignKey = false;
				colvarMsAgencyNumber.IsReadOnly = false;
				colvarMsAgencyNumber.DefaultSetting = @"";
				colvarMsAgencyNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAgencyNumber);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarIndustryAccountID = new TableSchema.TableColumn(schema);
				colvarIndustryAccountID.ColumnName = "IndustryAccountID";
				colvarIndustryAccountID.DataType = DbType.Int64;
				colvarIndustryAccountID.MaxLength = 0;
				colvarIndustryAccountID.AutoIncrement = false;
				colvarIndustryAccountID.IsNullable = false;
				colvarIndustryAccountID.IsPrimaryKey = false;
				colvarIndustryAccountID.IsForeignKey = false;
				colvarIndustryAccountID.IsReadOnly = false;
				colvarIndustryAccountID.DefaultSetting = @"";
				colvarIndustryAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountID);

				TableSchema.TableColumn colvarCsNo = new TableSchema.TableColumn(schema);
				colvarCsNo.ColumnName = "CsNo";
				colvarCsNo.DataType = DbType.AnsiString;
				colvarCsNo.MaxLength = 15;
				colvarCsNo.AutoIncrement = false;
				colvarCsNo.IsNullable = true;
				colvarCsNo.IsPrimaryKey = false;
				colvarCsNo.IsForeignKey = false;
				colvarCsNo.IsReadOnly = false;
				colvarCsNo.DefaultSetting = @"";
				colvarCsNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsNo);

				TableSchema.TableColumn colvarDispatchAgencyName = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyName.ColumnName = "DispatchAgencyName";
				colvarDispatchAgencyName.DataType = DbType.String;
				colvarDispatchAgencyName.MaxLength = 100;
				colvarDispatchAgencyName.AutoIncrement = false;
				colvarDispatchAgencyName.IsNullable = false;
				colvarDispatchAgencyName.IsPrimaryKey = false;
				colvarDispatchAgencyName.IsForeignKey = false;
				colvarDispatchAgencyName.IsReadOnly = false;
				colvarDispatchAgencyName.DefaultSetting = @"";
				colvarDispatchAgencyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyName);

				TableSchema.TableColumn colvarPhone1 = new TableSchema.TableColumn(schema);
				colvarPhone1.ColumnName = "Phone1";
				colvarPhone1.DataType = DbType.AnsiString;
				colvarPhone1.MaxLength = 30;
				colvarPhone1.AutoIncrement = false;
				colvarPhone1.IsNullable = false;
				colvarPhone1.IsPrimaryKey = false;
				colvarPhone1.IsForeignKey = false;
				colvarPhone1.IsReadOnly = false;
				colvarPhone1.DefaultSetting = @"";
				colvarPhone1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone1);

				TableSchema.TableColumn colvarPermitNumber = new TableSchema.TableColumn(schema);
				colvarPermitNumber.ColumnName = "PermitNumber";
				colvarPermitNumber.DataType = DbType.AnsiString;
				colvarPermitNumber.MaxLength = 50;
				colvarPermitNumber.AutoIncrement = false;
				colvarPermitNumber.IsNullable = true;
				colvarPermitNumber.IsPrimaryKey = false;
				colvarPermitNumber.IsForeignKey = false;
				colvarPermitNumber.IsReadOnly = false;
				colvarPermitNumber.DefaultSetting = @"";
				colvarPermitNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermitNumber);

				TableSchema.TableColumn colvarPermitEffectiveDate = new TableSchema.TableColumn(schema);
				colvarPermitEffectiveDate.ColumnName = "PermitEffectiveDate";
				colvarPermitEffectiveDate.DataType = DbType.DateTime;
				colvarPermitEffectiveDate.MaxLength = 0;
				colvarPermitEffectiveDate.AutoIncrement = false;
				colvarPermitEffectiveDate.IsNullable = true;
				colvarPermitEffectiveDate.IsPrimaryKey = false;
				colvarPermitEffectiveDate.IsForeignKey = false;
				colvarPermitEffectiveDate.IsReadOnly = false;
				colvarPermitEffectiveDate.DefaultSetting = @"";
				colvarPermitEffectiveDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermitEffectiveDate);

				TableSchema.TableColumn colvarPermitExpireDate = new TableSchema.TableColumn(schema);
				colvarPermitExpireDate.ColumnName = "PermitExpireDate";
				colvarPermitExpireDate.DataType = DbType.DateTime;
				colvarPermitExpireDate.MaxLength = 0;
				colvarPermitExpireDate.AutoIncrement = false;
				colvarPermitExpireDate.IsNullable = true;
				colvarPermitExpireDate.IsPrimaryKey = false;
				colvarPermitExpireDate.IsForeignKey = false;
				colvarPermitExpireDate.IsReadOnly = false;
				colvarPermitExpireDate.DefaultSetting = @"";
				colvarPermitExpireDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermitExpireDate);

				TableSchema.TableColumn colvarIsVerified = new TableSchema.TableColumn(schema);
				colvarIsVerified.ColumnName = "IsVerified";
				colvarIsVerified.DataType = DbType.Boolean;
				colvarIsVerified.MaxLength = 0;
				colvarIsVerified.AutoIncrement = false;
				colvarIsVerified.IsNullable = false;
				colvarIsVerified.IsPrimaryKey = false;
				colvarIsVerified.IsForeignKey = false;
				colvarIsVerified.IsReadOnly = false;
				colvarIsVerified.DefaultSetting = @"";
				colvarIsVerified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVerified);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_AccountDispatchAgencyAssignment",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_AccountDispatchAgencyAssignmentView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long DispatchAgencyAssignmentID {
			get { return GetColumnValue<long>(Columns.DispatchAgencyAssignmentID); }
			set { SetColumnValue(Columns.DispatchAgencyAssignmentID, value); }
		}
		[DataMember]
		public int DispatchAgencyId {
			get { return GetColumnValue<int>(Columns.DispatchAgencyId); }
			set { SetColumnValue(Columns.DispatchAgencyId, value); }
		}
		[DataMember]
		public byte DispatchAgencyTypeId {
			get { return GetColumnValue<byte>(Columns.DispatchAgencyTypeId); }
			set { SetColumnValue(Columns.DispatchAgencyTypeId, value); }
		}
		[DataMember]
		public string DispatchAgencyTypeName {
			get { return GetColumnValue<string>(Columns.DispatchAgencyTypeName); }
			set { SetColumnValue(Columns.DispatchAgencyTypeName, value); }
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set { SetColumnValue(Columns.MonitoringStationOSId, value); }
		}
		[DataMember]
		public string MsAgencyNumber {
			get { return GetColumnValue<string>(Columns.MsAgencyNumber); }
			set { SetColumnValue(Columns.MsAgencyNumber, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public long IndustryAccountID {
			get { return GetColumnValue<long>(Columns.IndustryAccountID); }
			set { SetColumnValue(Columns.IndustryAccountID, value); }
		}
		[DataMember]
		public string CsNo {
			get { return GetColumnValue<string>(Columns.CsNo); }
			set { SetColumnValue(Columns.CsNo, value); }
		}
		[DataMember]
		public string DispatchAgencyName {
			get { return GetColumnValue<string>(Columns.DispatchAgencyName); }
			set { SetColumnValue(Columns.DispatchAgencyName, value); }
		}
		[DataMember]
		public string Phone1 {
			get { return GetColumnValue<string>(Columns.Phone1); }
			set { SetColumnValue(Columns.Phone1, value); }
		}
		[DataMember]
		public string PermitNumber {
			get { return GetColumnValue<string>(Columns.PermitNumber); }
			set { SetColumnValue(Columns.PermitNumber, value); }
		}
		[DataMember]
		public DateTime? PermitEffectiveDate {
			get { return GetColumnValue<DateTime?>(Columns.PermitEffectiveDate); }
			set { SetColumnValue(Columns.PermitEffectiveDate, value); }
		}
		[DataMember]
		public DateTime? PermitExpireDate {
			get { return GetColumnValue<DateTime?>(Columns.PermitExpireDate); }
			set { SetColumnValue(Columns.PermitExpireDate, value); }
		}
		[DataMember]
		public bool IsVerified {
			get { return GetColumnValue<bool>(Columns.IsVerified); }
			set { SetColumnValue(Columns.IsVerified, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return DispatchAgencyAssignmentID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn DispatchAgencyAssignmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DispatchAgencyIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DispatchAgencyTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DispatchAgencyTypeNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MsAgencyNumberColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IndustryAccountIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CsNoColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DispatchAgencyNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn Phone1Column
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PermitNumberColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn PermitEffectiveDateColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn PermitExpireDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsVerifiedColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string DispatchAgencyAssignmentID = @"DispatchAgencyAssignmentID";
			public const string DispatchAgencyId = @"DispatchAgencyId";
			public const string DispatchAgencyTypeId = @"DispatchAgencyTypeId";
			public const string DispatchAgencyTypeName = @"DispatchAgencyTypeName";
			public const string MonitoringStationOSId = @"MonitoringStationOSId";
			public const string MsAgencyNumber = @"MsAgencyNumber";
			public const string AccountId = @"AccountId";
			public const string IndustryAccountID = @"IndustryAccountID";
			public const string CsNo = @"CsNo";
			public const string DispatchAgencyName = @"DispatchAgencyName";
			public const string Phone1 = @"Phone1";
			public const string PermitNumber = @"PermitNumber";
			public const string PermitEffectiveDate = @"PermitEffectiveDate";
			public const string PermitExpireDate = @"PermitExpireDate";
			public const string IsVerified = @"IsVerified";
			public const string IsActive = @"IsActive";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountEquipmentInfoToGPView class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEquipmentInfoToGPViewCollection : ReadOnlyList<MS_AccountEquipmentInfoToGPView, MS_AccountEquipmentInfoToGPViewCollection>
	{
		public static MS_AccountEquipmentInfoToGPViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountEquipmentInfoToGPViewCollection result = new MS_AccountEquipmentInfoToGPViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_AccountEquipmentInfoToGP view.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEquipmentInfoToGPView : ReadOnlyRecord<MS_AccountEquipmentInfoToGPView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_AccountEquipmentInfoToGP", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterFileID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileID.ColumnName = "CustomerMasterFileID";
				colvarCustomerMasterFileID.DataType = DbType.Int64;
				colvarCustomerMasterFileID.MaxLength = 0;
				colvarCustomerMasterFileID.AutoIncrement = false;
				colvarCustomerMasterFileID.IsNullable = true;
				colvarCustomerMasterFileID.IsPrimaryKey = false;
				colvarCustomerMasterFileID.IsForeignKey = false;
				colvarCustomerMasterFileID.IsReadOnly = false;
				colvarCustomerMasterFileID.DefaultSetting = @"";
				colvarCustomerMasterFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarInvoiceID = new TableSchema.TableColumn(schema);
				colvarInvoiceID.ColumnName = "Invoice ID";
				colvarInvoiceID.DataType = DbType.Int64;
				colvarInvoiceID.MaxLength = 0;
				colvarInvoiceID.AutoIncrement = false;
				colvarInvoiceID.IsNullable = false;
				colvarInvoiceID.IsPrimaryKey = false;
				colvarInvoiceID.IsForeignKey = false;
				colvarInvoiceID.IsReadOnly = false;
				colvarInvoiceID.DefaultSetting = @"";
				colvarInvoiceID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceID);

				TableSchema.TableColumn colvarInvoiceTypeID = new TableSchema.TableColumn(schema);
				colvarInvoiceTypeID.ColumnName = "Invoice Type ID";
				colvarInvoiceTypeID.DataType = DbType.AnsiString;
				colvarInvoiceTypeID.MaxLength = 20;
				colvarInvoiceTypeID.AutoIncrement = false;
				colvarInvoiceTypeID.IsNullable = false;
				colvarInvoiceTypeID.IsPrimaryKey = false;
				colvarInvoiceTypeID.IsForeignKey = false;
				colvarInvoiceTypeID.IsReadOnly = false;
				colvarInvoiceTypeID.DefaultSetting = @"";
				colvarInvoiceTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceTypeID);

				TableSchema.TableColumn colvarInvoiceType = new TableSchema.TableColumn(schema);
				colvarInvoiceType.ColumnName = "Invoice Type";
				colvarInvoiceType.DataType = DbType.String;
				colvarInvoiceType.MaxLength = 50;
				colvarInvoiceType.AutoIncrement = false;
				colvarInvoiceType.IsNullable = false;
				colvarInvoiceType.IsPrimaryKey = false;
				colvarInvoiceType.IsForeignKey = false;
				colvarInvoiceType.IsReadOnly = false;
				colvarInvoiceType.DefaultSetting = @"";
				colvarInvoiceType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceType);

				TableSchema.TableColumn colvarProductSku = new TableSchema.TableColumn(schema);
				colvarProductSku.ColumnName = "Product Sku";
				colvarProductSku.DataType = DbType.String;
				colvarProductSku.MaxLength = 50;
				colvarProductSku.AutoIncrement = false;
				colvarProductSku.IsNullable = true;
				colvarProductSku.IsPrimaryKey = false;
				colvarProductSku.IsForeignKey = false;
				colvarProductSku.IsReadOnly = false;
				colvarProductSku.DefaultSetting = @"";
				colvarProductSku.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductSku);

				TableSchema.TableColumn colvarModelNumber = new TableSchema.TableColumn(schema);
				colvarModelNumber.ColumnName = "Model Number";
				colvarModelNumber.DataType = DbType.AnsiString;
				colvarModelNumber.MaxLength = 30;
				colvarModelNumber.AutoIncrement = false;
				colvarModelNumber.IsNullable = true;
				colvarModelNumber.IsPrimaryKey = false;
				colvarModelNumber.IsForeignKey = false;
				colvarModelNumber.IsReadOnly = false;
				colvarModelNumber.DefaultSetting = @"";
				colvarModelNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModelNumber);

				TableSchema.TableColumn colvarSalesRepID = new TableSchema.TableColumn(schema);
				colvarSalesRepID.ColumnName = "Sales Rep ID";
				colvarSalesRepID.DataType = DbType.String;
				colvarSalesRepID.MaxLength = 25;
				colvarSalesRepID.AutoIncrement = false;
				colvarSalesRepID.IsNullable = true;
				colvarSalesRepID.IsPrimaryKey = false;
				colvarSalesRepID.IsForeignKey = false;
				colvarSalesRepID.IsReadOnly = false;
				colvarSalesRepID.DefaultSetting = @"";
				colvarSalesRepID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepID);

				TableSchema.TableColumn colvarTechID = new TableSchema.TableColumn(schema);
				colvarTechID.ColumnName = "Tech ID";
				colvarTechID.DataType = DbType.String;
				colvarTechID.MaxLength = 25;
				colvarTechID.AutoIncrement = false;
				colvarTechID.IsNullable = true;
				colvarTechID.IsPrimaryKey = false;
				colvarTechID.IsForeignKey = false;
				colvarTechID.IsReadOnly = false;
				colvarTechID.DefaultSetting = @"";
				colvarTechID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechID);

				TableSchema.TableColumn colvarIsUpgrade = new TableSchema.TableColumn(schema);
				colvarIsUpgrade.ColumnName = "Is Upgrade";
				colvarIsUpgrade.DataType = DbType.Int32;
				colvarIsUpgrade.MaxLength = 0;
				colvarIsUpgrade.AutoIncrement = false;
				colvarIsUpgrade.IsNullable = false;
				colvarIsUpgrade.IsPrimaryKey = false;
				colvarIsUpgrade.IsForeignKey = false;
				colvarIsUpgrade.IsReadOnly = false;
				colvarIsUpgrade.DefaultSetting = @"";
				colvarIsUpgrade.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsUpgrade);

				TableSchema.TableColumn colvarIsExistingEquipment = new TableSchema.TableColumn(schema);
				colvarIsExistingEquipment.ColumnName = "Is Existing Equipment";
				colvarIsExistingEquipment.DataType = DbType.Boolean;
				colvarIsExistingEquipment.MaxLength = 0;
				colvarIsExistingEquipment.AutoIncrement = false;
				colvarIsExistingEquipment.IsNullable = false;
				colvarIsExistingEquipment.IsPrimaryKey = false;
				colvarIsExistingEquipment.IsForeignKey = false;
				colvarIsExistingEquipment.IsReadOnly = false;
				colvarIsExistingEquipment.DefaultSetting = @"";
				colvarIsExistingEquipment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExistingEquipment);

				TableSchema.TableColumn colvarRepTechCustUpgrade = new TableSchema.TableColumn(schema);
				colvarRepTechCustUpgrade.ColumnName = "Rep Tech Cust Upgrade";
				colvarRepTechCustUpgrade.DataType = DbType.AnsiString;
				colvarRepTechCustUpgrade.MaxLength = 50;
				colvarRepTechCustUpgrade.AutoIncrement = false;
				colvarRepTechCustUpgrade.IsNullable = false;
				colvarRepTechCustUpgrade.IsPrimaryKey = false;
				colvarRepTechCustUpgrade.IsForeignKey = false;
				colvarRepTechCustUpgrade.IsReadOnly = false;
				colvarRepTechCustUpgrade.DefaultSetting = @"";
				colvarRepTechCustUpgrade.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRepTechCustUpgrade);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_AccountEquipmentInfoToGP",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_AccountEquipmentInfoToGPView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long? CustomerMasterFileID {
			get { return GetColumnValue<long?>(Columns.CustomerMasterFileID); }
			set { SetColumnValue(Columns.CustomerMasterFileID, value); }
		}
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set { SetColumnValue(Columns.AccountID, value); }
		}
		[DataMember]
		public long InvoiceID {
			get { return GetColumnValue<long>(Columns.InvoiceID); }
			set { SetColumnValue(Columns.InvoiceID, value); }
		}
		[DataMember]
		public string InvoiceTypeID {
			get { return GetColumnValue<string>(Columns.InvoiceTypeID); }
			set { SetColumnValue(Columns.InvoiceTypeID, value); }
		}
		[DataMember]
		public string InvoiceType {
			get { return GetColumnValue<string>(Columns.InvoiceType); }
			set { SetColumnValue(Columns.InvoiceType, value); }
		}
		[DataMember]
		public string ProductSku {
			get { return GetColumnValue<string>(Columns.ProductSku); }
			set { SetColumnValue(Columns.ProductSku, value); }
		}
		[DataMember]
		public string ModelNumber {
			get { return GetColumnValue<string>(Columns.ModelNumber); }
			set { SetColumnValue(Columns.ModelNumber, value); }
		}
		[DataMember]
		public string SalesRepID {
			get { return GetColumnValue<string>(Columns.SalesRepID); }
			set { SetColumnValue(Columns.SalesRepID, value); }
		}
		[DataMember]
		public string TechID {
			get { return GetColumnValue<string>(Columns.TechID); }
			set { SetColumnValue(Columns.TechID, value); }
		}
		[DataMember]
		public int IsUpgrade {
			get { return GetColumnValue<int>(Columns.IsUpgrade); }
			set { SetColumnValue(Columns.IsUpgrade, value); }
		}
		[DataMember]
		public bool IsExistingEquipment {
			get { return GetColumnValue<bool>(Columns.IsExistingEquipment); }
			set { SetColumnValue(Columns.IsExistingEquipment, value); }
		}
		[DataMember]
		public string RepTechCustUpgrade {
			get { return GetColumnValue<string>(Columns.RepTechCustUpgrade); }
			set { SetColumnValue(Columns.RepTechCustUpgrade, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerMasterFileID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterFileIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn InvoiceIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn InvoiceTypeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn InvoiceTypeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ProductSkuColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModelNumberColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn SalesRepIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn TechIDColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsUpgradeColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsExistingEquipmentColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn RepTechCustUpgradeColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerMasterFileID = @"CustomerMasterFileID";
			public const string AccountID = @"AccountID";
			public const string InvoiceID = @"InvoiceID";
			public const string InvoiceTypeID = @"InvoiceTypeID";
			public const string InvoiceType = @"InvoiceType";
			public const string ProductSku = @"ProductSku";
			public const string ModelNumber = @"ModelNumber";
			public const string SalesRepID = @"SalesRepID";
			public const string TechID = @"TechID";
			public const string IsUpgrade = @"IsUpgrade";
			public const string IsExistingEquipment = @"IsExistingEquipment";
			public const string RepTechCustUpgrade = @"RepTechCustUpgrade";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountEquipmentsView class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEquipmentsViewCollection : ReadOnlyList<MS_AccountEquipmentsView, MS_AccountEquipmentsViewCollection>
	{
		public static MS_AccountEquipmentsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountEquipmentsViewCollection result = new MS_AccountEquipmentsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_AccountEquipments view.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEquipmentsView : ReadOnlyRecord<MS_AccountEquipmentsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_AccountEquipments", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountEquipmentID = new TableSchema.TableColumn(schema);
				colvarAccountEquipmentID.ColumnName = "AccountEquipmentID";
				colvarAccountEquipmentID.DataType = DbType.Int64;
				colvarAccountEquipmentID.MaxLength = 0;
				colvarAccountEquipmentID.AutoIncrement = false;
				colvarAccountEquipmentID.IsNullable = false;
				colvarAccountEquipmentID.IsPrimaryKey = false;
				colvarAccountEquipmentID.IsForeignKey = false;
				colvarAccountEquipmentID.IsReadOnly = false;
				colvarAccountEquipmentID.DefaultSetting = @"";
				colvarAccountEquipmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountEquipmentID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarEquipmentId = new TableSchema.TableColumn(schema);
				colvarEquipmentId.ColumnName = "EquipmentId";
				colvarEquipmentId.DataType = DbType.AnsiString;
				colvarEquipmentId.MaxLength = 50;
				colvarEquipmentId.AutoIncrement = false;
				colvarEquipmentId.IsNullable = false;
				colvarEquipmentId.IsPrimaryKey = false;
				colvarEquipmentId.IsForeignKey = false;
				colvarEquipmentId.IsReadOnly = false;
				colvarEquipmentId.DefaultSetting = @"";
				colvarEquipmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentId);

				TableSchema.TableColumn colvarItemSKU = new TableSchema.TableColumn(schema);
				colvarItemSKU.ColumnName = "ItemSKU";
				colvarItemSKU.DataType = DbType.String;
				colvarItemSKU.MaxLength = 31;
				colvarItemSKU.AutoIncrement = false;
				colvarItemSKU.IsNullable = false;
				colvarItemSKU.IsPrimaryKey = false;
				colvarItemSKU.IsForeignKey = false;
				colvarItemSKU.IsReadOnly = false;
				colvarItemSKU.DefaultSetting = @"";
				colvarItemSKU.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemSKU);

				TableSchema.TableColumn colvarItemDesc = new TableSchema.TableColumn(schema);
				colvarItemDesc.ColumnName = "ItemDesc";
				colvarItemDesc.DataType = DbType.String;
				colvarItemDesc.MaxLength = 101;
				colvarItemDesc.AutoIncrement = false;
				colvarItemDesc.IsNullable = false;
				colvarItemDesc.IsPrimaryKey = false;
				colvarItemDesc.IsForeignKey = false;
				colvarItemDesc.IsReadOnly = false;
				colvarItemDesc.DefaultSetting = @"";
				colvarItemDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemDesc);

				TableSchema.TableColumn colvarEquipmentLocationId = new TableSchema.TableColumn(schema);
				colvarEquipmentLocationId.ColumnName = "EquipmentLocationId";
				colvarEquipmentLocationId.DataType = DbType.Int32;
				colvarEquipmentLocationId.MaxLength = 0;
				colvarEquipmentLocationId.AutoIncrement = false;
				colvarEquipmentLocationId.IsNullable = true;
				colvarEquipmentLocationId.IsPrimaryKey = false;
				colvarEquipmentLocationId.IsForeignKey = false;
				colvarEquipmentLocationId.IsReadOnly = false;
				colvarEquipmentLocationId.DefaultSetting = @"";
				colvarEquipmentLocationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentLocationId);

				TableSchema.TableColumn colvarGPEmployeeId = new TableSchema.TableColumn(schema);
				colvarGPEmployeeId.ColumnName = "GPEmployeeId";
				colvarGPEmployeeId.DataType = DbType.AnsiString;
				colvarGPEmployeeId.MaxLength = 50;
				colvarGPEmployeeId.AutoIncrement = false;
				colvarGPEmployeeId.IsNullable = true;
				colvarGPEmployeeId.IsPrimaryKey = false;
				colvarGPEmployeeId.IsForeignKey = false;
				colvarGPEmployeeId.IsReadOnly = false;
				colvarGPEmployeeId.DefaultSetting = @"";
				colvarGPEmployeeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeId);

				TableSchema.TableColumn colvarAccountEquipmentUpgradeTypeId = new TableSchema.TableColumn(schema);
				colvarAccountEquipmentUpgradeTypeId.ColumnName = "AccountEquipmentUpgradeTypeId";
				colvarAccountEquipmentUpgradeTypeId.DataType = DbType.AnsiString;
				colvarAccountEquipmentUpgradeTypeId.MaxLength = 10;
				colvarAccountEquipmentUpgradeTypeId.AutoIncrement = false;
				colvarAccountEquipmentUpgradeTypeId.IsNullable = false;
				colvarAccountEquipmentUpgradeTypeId.IsPrimaryKey = false;
				colvarAccountEquipmentUpgradeTypeId.IsForeignKey = false;
				colvarAccountEquipmentUpgradeTypeId.IsReadOnly = false;
				colvarAccountEquipmentUpgradeTypeId.DefaultSetting = @"";
				colvarAccountEquipmentUpgradeTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountEquipmentUpgradeTypeId);

				TableSchema.TableColumn colvarPoints = new TableSchema.TableColumn(schema);
				colvarPoints.ColumnName = "Points";
				colvarPoints.DataType = DbType.Int32;
				colvarPoints.MaxLength = 0;
				colvarPoints.AutoIncrement = false;
				colvarPoints.IsNullable = false;
				colvarPoints.IsPrimaryKey = false;
				colvarPoints.IsForeignKey = false;
				colvarPoints.IsReadOnly = false;
				colvarPoints.DefaultSetting = @"";
				colvarPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPoints);

				TableSchema.TableColumn colvarActualPoints = new TableSchema.TableColumn(schema);
				colvarActualPoints.ColumnName = "ActualPoints";
				colvarActualPoints.DataType = DbType.Double;
				colvarActualPoints.MaxLength = 0;
				colvarActualPoints.AutoIncrement = false;
				colvarActualPoints.IsNullable = true;
				colvarActualPoints.IsPrimaryKey = false;
				colvarActualPoints.IsForeignKey = false;
				colvarActualPoints.IsReadOnly = false;
				colvarActualPoints.DefaultSetting = @"";
				colvarActualPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualPoints);

				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "Price";
				colvarPrice.DataType = DbType.Currency;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = false;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);

				TableSchema.TableColumn colvarIsExisting = new TableSchema.TableColumn(schema);
				colvarIsExisting.ColumnName = "IsExisting";
				colvarIsExisting.DataType = DbType.Boolean;
				colvarIsExisting.MaxLength = 0;
				colvarIsExisting.AutoIncrement = false;
				colvarIsExisting.IsNullable = false;
				colvarIsExisting.IsPrimaryKey = false;
				colvarIsExisting.IsForeignKey = false;
				colvarIsExisting.IsReadOnly = false;
				colvarIsExisting.DefaultSetting = @"";
				colvarIsExisting.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExisting);

				TableSchema.TableColumn colvarBarcodeId = new TableSchema.TableColumn(schema);
				colvarBarcodeId.ColumnName = "BarcodeId";
				colvarBarcodeId.DataType = DbType.String;
				colvarBarcodeId.MaxLength = 25;
				colvarBarcodeId.AutoIncrement = false;
				colvarBarcodeId.IsNullable = true;
				colvarBarcodeId.IsPrimaryKey = false;
				colvarBarcodeId.IsForeignKey = false;
				colvarBarcodeId.IsReadOnly = false;
				colvarBarcodeId.DefaultSetting = @"";
				colvarBarcodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeId);

				TableSchema.TableColumn colvarIsServiceUpgrade = new TableSchema.TableColumn(schema);
				colvarIsServiceUpgrade.ColumnName = "IsServiceUpgrade";
				colvarIsServiceUpgrade.DataType = DbType.Boolean;
				colvarIsServiceUpgrade.MaxLength = 0;
				colvarIsServiceUpgrade.AutoIncrement = false;
				colvarIsServiceUpgrade.IsNullable = false;
				colvarIsServiceUpgrade.IsPrimaryKey = false;
				colvarIsServiceUpgrade.IsForeignKey = false;
				colvarIsServiceUpgrade.IsReadOnly = false;
				colvarIsServiceUpgrade.DefaultSetting = @"";
				colvarIsServiceUpgrade.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsServiceUpgrade);

				TableSchema.TableColumn colvarIsExistingWiring = new TableSchema.TableColumn(schema);
				colvarIsExistingWiring.ColumnName = "IsExistingWiring";
				colvarIsExistingWiring.DataType = DbType.Boolean;
				colvarIsExistingWiring.MaxLength = 0;
				colvarIsExistingWiring.AutoIncrement = false;
				colvarIsExistingWiring.IsNullable = false;
				colvarIsExistingWiring.IsPrimaryKey = false;
				colvarIsExistingWiring.IsForeignKey = false;
				colvarIsExistingWiring.IsReadOnly = false;
				colvarIsExistingWiring.DefaultSetting = @"";
				colvarIsExistingWiring.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExistingWiring);

				TableSchema.TableColumn colvarIsMainPanel = new TableSchema.TableColumn(schema);
				colvarIsMainPanel.ColumnName = "IsMainPanel";
				colvarIsMainPanel.DataType = DbType.Boolean;
				colvarIsMainPanel.MaxLength = 0;
				colvarIsMainPanel.AutoIncrement = false;
				colvarIsMainPanel.IsNullable = false;
				colvarIsMainPanel.IsPrimaryKey = false;
				colvarIsMainPanel.IsForeignKey = false;
				colvarIsMainPanel.IsReadOnly = false;
				colvarIsMainPanel.DefaultSetting = @"";
				colvarIsMainPanel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMainPanel);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarAccountZoneAssignmentID = new TableSchema.TableColumn(schema);
				colvarAccountZoneAssignmentID.ColumnName = "AccountZoneAssignmentID";
				colvarAccountZoneAssignmentID.DataType = DbType.Int64;
				colvarAccountZoneAssignmentID.MaxLength = 0;
				colvarAccountZoneAssignmentID.AutoIncrement = false;
				colvarAccountZoneAssignmentID.IsNullable = false;
				colvarAccountZoneAssignmentID.IsPrimaryKey = false;
				colvarAccountZoneAssignmentID.IsForeignKey = false;
				colvarAccountZoneAssignmentID.IsReadOnly = false;
				colvarAccountZoneAssignmentID.DefaultSetting = @"";
				colvarAccountZoneAssignmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountZoneAssignmentID);

				TableSchema.TableColumn colvarAccountZoneTypeId = new TableSchema.TableColumn(schema);
				colvarAccountZoneTypeId.ColumnName = "AccountZoneTypeId";
				colvarAccountZoneTypeId.DataType = DbType.AnsiString;
				colvarAccountZoneTypeId.MaxLength = 10;
				colvarAccountZoneTypeId.AutoIncrement = false;
				colvarAccountZoneTypeId.IsNullable = false;
				colvarAccountZoneTypeId.IsPrimaryKey = false;
				colvarAccountZoneTypeId.IsForeignKey = false;
				colvarAccountZoneTypeId.IsReadOnly = false;
				colvarAccountZoneTypeId.DefaultSetting = @"";
				colvarAccountZoneTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountZoneTypeId);

				TableSchema.TableColumn colvarAccountEventId = new TableSchema.TableColumn(schema);
				colvarAccountEventId.ColumnName = "AccountEventId";
				colvarAccountEventId.DataType = DbType.Int32;
				colvarAccountEventId.MaxLength = 0;
				colvarAccountEventId.AutoIncrement = false;
				colvarAccountEventId.IsNullable = true;
				colvarAccountEventId.IsPrimaryKey = false;
				colvarAccountEventId.IsForeignKey = false;
				colvarAccountEventId.IsReadOnly = false;
				colvarAccountEventId.DefaultSetting = @"";
				colvarAccountEventId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountEventId);

				TableSchema.TableColumn colvarZone = new TableSchema.TableColumn(schema);
				colvarZone.ColumnName = "Zone";
				colvarZone.DataType = DbType.AnsiString;
				colvarZone.MaxLength = 3;
				colvarZone.AutoIncrement = false;
				colvarZone.IsNullable = true;
				colvarZone.IsPrimaryKey = false;
				colvarZone.IsForeignKey = false;
				colvarZone.IsReadOnly = false;
				colvarZone.DefaultSetting = @"";
				colvarZone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZone);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarEquipmentLocationDesc = new TableSchema.TableColumn(schema);
				colvarEquipmentLocationDesc.ColumnName = "EquipmentLocationDesc";
				colvarEquipmentLocationDesc.DataType = DbType.String;
				colvarEquipmentLocationDesc.MaxLength = 50;
				colvarEquipmentLocationDesc.AutoIncrement = false;
				colvarEquipmentLocationDesc.IsNullable = true;
				colvarEquipmentLocationDesc.IsPrimaryKey = false;
				colvarEquipmentLocationDesc.IsForeignKey = false;
				colvarEquipmentLocationDesc.IsReadOnly = false;
				colvarEquipmentLocationDesc.DefaultSetting = @"";
				colvarEquipmentLocationDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentLocationDesc);

				TableSchema.TableColumn colvarAccountZoneType = new TableSchema.TableColumn(schema);
				colvarAccountZoneType.ColumnName = "AccountZoneType";
				colvarAccountZoneType.DataType = DbType.AnsiString;
				colvarAccountZoneType.MaxLength = 50;
				colvarAccountZoneType.AutoIncrement = false;
				colvarAccountZoneType.IsNullable = false;
				colvarAccountZoneType.IsPrimaryKey = false;
				colvarAccountZoneType.IsForeignKey = false;
				colvarAccountZoneType.IsReadOnly = false;
				colvarAccountZoneType.DefaultSetting = @"";
				colvarAccountZoneType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountZoneType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_AccountEquipments",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_AccountEquipmentsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long AccountEquipmentID {
			get { return GetColumnValue<long>(Columns.AccountEquipmentID); }
			set { SetColumnValue(Columns.AccountEquipmentID, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public string EquipmentId {
			get { return GetColumnValue<string>(Columns.EquipmentId); }
			set { SetColumnValue(Columns.EquipmentId, value); }
		}
		[DataMember]
		public string ItemSKU {
			get { return GetColumnValue<string>(Columns.ItemSKU); }
			set { SetColumnValue(Columns.ItemSKU, value); }
		}
		[DataMember]
		public string ItemDesc {
			get { return GetColumnValue<string>(Columns.ItemDesc); }
			set { SetColumnValue(Columns.ItemDesc, value); }
		}
		[DataMember]
		public int? EquipmentLocationId {
			get { return GetColumnValue<int?>(Columns.EquipmentLocationId); }
			set { SetColumnValue(Columns.EquipmentLocationId, value); }
		}
		[DataMember]
		public string GPEmployeeId {
			get { return GetColumnValue<string>(Columns.GPEmployeeId); }
			set { SetColumnValue(Columns.GPEmployeeId, value); }
		}
		[DataMember]
		public string AccountEquipmentUpgradeTypeId {
			get { return GetColumnValue<string>(Columns.AccountEquipmentUpgradeTypeId); }
			set { SetColumnValue(Columns.AccountEquipmentUpgradeTypeId, value); }
		}
		[DataMember]
		public int Points {
			get { return GetColumnValue<int>(Columns.Points); }
			set { SetColumnValue(Columns.Points, value); }
		}
		[DataMember]
		public double? ActualPoints {
			get { return GetColumnValue<double?>(Columns.ActualPoints); }
			set { SetColumnValue(Columns.ActualPoints, value); }
		}
		[DataMember]
		public decimal Price {
			get { return GetColumnValue<decimal>(Columns.Price); }
			set { SetColumnValue(Columns.Price, value); }
		}
		[DataMember]
		public bool IsExisting {
			get { return GetColumnValue<bool>(Columns.IsExisting); }
			set { SetColumnValue(Columns.IsExisting, value); }
		}
		[DataMember]
		public string BarcodeId {
			get { return GetColumnValue<string>(Columns.BarcodeId); }
			set { SetColumnValue(Columns.BarcodeId, value); }
		}
		[DataMember]
		public bool IsServiceUpgrade {
			get { return GetColumnValue<bool>(Columns.IsServiceUpgrade); }
			set { SetColumnValue(Columns.IsServiceUpgrade, value); }
		}
		[DataMember]
		public bool IsExistingWiring {
			get { return GetColumnValue<bool>(Columns.IsExistingWiring); }
			set { SetColumnValue(Columns.IsExistingWiring, value); }
		}
		[DataMember]
		public bool IsMainPanel {
			get { return GetColumnValue<bool>(Columns.IsMainPanel); }
			set { SetColumnValue(Columns.IsMainPanel, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public long AccountZoneAssignmentID {
			get { return GetColumnValue<long>(Columns.AccountZoneAssignmentID); }
			set { SetColumnValue(Columns.AccountZoneAssignmentID, value); }
		}
		[DataMember]
		public string AccountZoneTypeId {
			get { return GetColumnValue<string>(Columns.AccountZoneTypeId); }
			set { SetColumnValue(Columns.AccountZoneTypeId, value); }
		}
		[DataMember]
		public int? AccountEventId {
			get { return GetColumnValue<int?>(Columns.AccountEventId); }
			set { SetColumnValue(Columns.AccountEventId, value); }
		}
		[DataMember]
		public string Zone {
			get { return GetColumnValue<string>(Columns.Zone); }
			set { SetColumnValue(Columns.Zone, value); }
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set { SetColumnValue(Columns.Comments, value); }
		}
		[DataMember]
		public string EquipmentLocationDesc {
			get { return GetColumnValue<string>(Columns.EquipmentLocationDesc); }
			set { SetColumnValue(Columns.EquipmentLocationDesc, value); }
		}
		[DataMember]
		public string AccountZoneType {
			get { return GetColumnValue<string>(Columns.AccountZoneType); }
			set { SetColumnValue(Columns.AccountZoneType, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return AccountEquipmentID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountEquipmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn EquipmentIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ItemSKUColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ItemDescColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn EquipmentLocationIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn GPEmployeeIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AccountEquipmentUpgradeTypeIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PointsColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ActualPointsColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn PriceColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsExistingColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn BarcodeIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsServiceUpgradeColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsExistingWiringColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsMainPanelColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn AccountZoneAssignmentIDColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn AccountZoneTypeIdColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn AccountEventIdColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn ZoneColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn EquipmentLocationDescColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn AccountZoneTypeColumn
		{
			get { return Schema.Columns[23]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string AccountEquipmentID = @"AccountEquipmentID";
			public const string AccountId = @"AccountId";
			public const string EquipmentId = @"EquipmentId";
			public const string ItemSKU = @"ItemSKU";
			public const string ItemDesc = @"ItemDesc";
			public const string EquipmentLocationId = @"EquipmentLocationId";
			public const string GPEmployeeId = @"GPEmployeeId";
			public const string AccountEquipmentUpgradeTypeId = @"AccountEquipmentUpgradeTypeId";
			public const string Points = @"Points";
			public const string ActualPoints = @"ActualPoints";
			public const string Price = @"Price";
			public const string IsExisting = @"IsExisting";
			public const string BarcodeId = @"BarcodeId";
			public const string IsServiceUpgrade = @"IsServiceUpgrade";
			public const string IsExistingWiring = @"IsExistingWiring";
			public const string IsMainPanel = @"IsMainPanel";
			public const string IsDeleted = @"IsDeleted";
			public const string AccountZoneAssignmentID = @"AccountZoneAssignmentID";
			public const string AccountZoneTypeId = @"AccountZoneTypeId";
			public const string AccountEventId = @"AccountEventId";
			public const string Zone = @"Zone";
			public const string Comments = @"Comments";
			public const string EquipmentLocationDesc = @"EquipmentLocationDesc";
			public const string AccountZoneType = @"AccountZoneType";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountEventView class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEventViewCollection : ReadOnlyList<MS_AccountEventView, MS_AccountEventViewCollection>
	{
		public static MS_AccountEventViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountEventViewCollection result = new MS_AccountEventViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_AccountEvent view.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEventView : ReadOnlyRecord<MS_AccountEventView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_AccountEvent", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentTypesZoneEventTypeID = new TableSchema.TableColumn(schema);
				colvarEquipmentTypesZoneEventTypeID.ColumnName = "EquipmentTypesZoneEventTypeID";
				colvarEquipmentTypesZoneEventTypeID.DataType = DbType.Int32;
				colvarEquipmentTypesZoneEventTypeID.MaxLength = 0;
				colvarEquipmentTypesZoneEventTypeID.AutoIncrement = false;
				colvarEquipmentTypesZoneEventTypeID.IsNullable = false;
				colvarEquipmentTypesZoneEventTypeID.IsPrimaryKey = false;
				colvarEquipmentTypesZoneEventTypeID.IsForeignKey = false;
				colvarEquipmentTypesZoneEventTypeID.IsReadOnly = false;
				colvarEquipmentTypesZoneEventTypeID.DefaultSetting = @"";
				colvarEquipmentTypesZoneEventTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentTypesZoneEventTypeID);

				TableSchema.TableColumn colvarEquipmentTypeID = new TableSchema.TableColumn(schema);
				colvarEquipmentTypeID.ColumnName = "EquipmentTypeID";
				colvarEquipmentTypeID.DataType = DbType.Int32;
				colvarEquipmentTypeID.MaxLength = 0;
				colvarEquipmentTypeID.AutoIncrement = false;
				colvarEquipmentTypeID.IsNullable = false;
				colvarEquipmentTypeID.IsPrimaryKey = false;
				colvarEquipmentTypeID.IsForeignKey = false;
				colvarEquipmentTypeID.IsReadOnly = false;
				colvarEquipmentTypeID.DefaultSetting = @"";
				colvarEquipmentTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentTypeID);

				TableSchema.TableColumn colvarAccountEventId = new TableSchema.TableColumn(schema);
				colvarAccountEventId.ColumnName = "AccountEventId";
				colvarAccountEventId.DataType = DbType.Int32;
				colvarAccountEventId.MaxLength = 0;
				colvarAccountEventId.AutoIncrement = false;
				colvarAccountEventId.IsNullable = false;
				colvarAccountEventId.IsPrimaryKey = false;
				colvarAccountEventId.IsForeignKey = false;
				colvarAccountEventId.IsReadOnly = false;
				colvarAccountEventId.DefaultSetting = @"";
				colvarAccountEventId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountEventId);

				TableSchema.TableColumn colvarMonitoringStationOSID = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSID.ColumnName = "MonitoringStationOSID";
				colvarMonitoringStationOSID.DataType = DbType.AnsiString;
				colvarMonitoringStationOSID.MaxLength = 50;
				colvarMonitoringStationOSID.AutoIncrement = false;
				colvarMonitoringStationOSID.IsNullable = true;
				colvarMonitoringStationOSID.IsPrimaryKey = false;
				colvarMonitoringStationOSID.IsForeignKey = false;
				colvarMonitoringStationOSID.IsReadOnly = false;
				colvarMonitoringStationOSID.DefaultSetting = @"";
				colvarMonitoringStationOSID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationOSID);

				TableSchema.TableColumn colvarSortOrder = new TableSchema.TableColumn(schema);
				colvarSortOrder.ColumnName = "SortOrder";
				colvarSortOrder.DataType = DbType.Int32;
				colvarSortOrder.MaxLength = 0;
				colvarSortOrder.AutoIncrement = false;
				colvarSortOrder.IsNullable = false;
				colvarSortOrder.IsPrimaryKey = false;
				colvarSortOrder.IsForeignKey = false;
				colvarSortOrder.IsReadOnly = false;
				colvarSortOrder.DefaultSetting = @"";
				colvarSortOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSortOrder);

				TableSchema.TableColumn colvarMoniEventID = new TableSchema.TableColumn(schema);
				colvarMoniEventID.ColumnName = "MoniEventID";
				colvarMoniEventID.DataType = DbType.Int32;
				colvarMoniEventID.MaxLength = 0;
				colvarMoniEventID.AutoIncrement = false;
				colvarMoniEventID.IsNullable = true;
				colvarMoniEventID.IsPrimaryKey = false;
				colvarMoniEventID.IsForeignKey = false;
				colvarMoniEventID.IsReadOnly = false;
				colvarMoniEventID.DefaultSetting = @"";
				colvarMoniEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoniEventID);

				TableSchema.TableColumn colvarAGEventID = new TableSchema.TableColumn(schema);
				colvarAGEventID.ColumnName = "AGEventID";
				colvarAGEventID.DataType = DbType.Int32;
				colvarAGEventID.MaxLength = 0;
				colvarAGEventID.AutoIncrement = false;
				colvarAGEventID.IsNullable = true;
				colvarAGEventID.IsPrimaryKey = false;
				colvarAGEventID.IsForeignKey = false;
				colvarAGEventID.IsReadOnly = false;
				colvarAGEventID.DefaultSetting = @"";
				colvarAGEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAGEventID);

				TableSchema.TableColumn colvarZoneEventTypeId = new TableSchema.TableColumn(schema);
				colvarZoneEventTypeId.ColumnName = "ZoneEventTypeId";
				colvarZoneEventTypeId.DataType = DbType.Int32;
				colvarZoneEventTypeId.MaxLength = 0;
				colvarZoneEventTypeId.AutoIncrement = false;
				colvarZoneEventTypeId.IsNullable = true;
				colvarZoneEventTypeId.IsPrimaryKey = false;
				colvarZoneEventTypeId.IsForeignKey = false;
				colvarZoneEventTypeId.IsReadOnly = false;
				colvarZoneEventTypeId.DefaultSetting = @"";
				colvarZoneEventTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZoneEventTypeId);

				TableSchema.TableColumn colvarevent_id = new TableSchema.TableColumn(schema);
				colvarevent_id.ColumnName = "event_id";
				colvarevent_id.DataType = DbType.Int32;
				colvarevent_id.MaxLength = 0;
				colvarevent_id.AutoIncrement = false;
				colvarevent_id.IsNullable = false;
				colvarevent_id.IsPrimaryKey = false;
				colvarevent_id.IsForeignKey = false;
				colvarevent_id.IsReadOnly = false;
				colvarevent_id.DefaultSetting = @"";
				colvarevent_id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarevent_id);

				TableSchema.TableColumn colvarservtype_id = new TableSchema.TableColumn(schema);
				colvarservtype_id.ColumnName = "servtype_id";
				colvarservtype_id.DataType = DbType.String;
				colvarservtype_id.MaxLength = 10;
				colvarservtype_id.AutoIncrement = false;
				colvarservtype_id.IsNullable = true;
				colvarservtype_id.IsPrimaryKey = false;
				colvarservtype_id.IsForeignKey = false;
				colvarservtype_id.IsReadOnly = false;
				colvarservtype_id.DefaultSetting = @"";
				colvarservtype_id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarservtype_id);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_AccountEvent",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_AccountEventView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int EquipmentTypesZoneEventTypeID {
			get { return GetColumnValue<int>(Columns.EquipmentTypesZoneEventTypeID); }
			set { SetColumnValue(Columns.EquipmentTypesZoneEventTypeID, value); }
		}
		[DataMember]
		public int EquipmentTypeID {
			get { return GetColumnValue<int>(Columns.EquipmentTypeID); }
			set { SetColumnValue(Columns.EquipmentTypeID, value); }
		}
		[DataMember]
		public int AccountEventId {
			get { return GetColumnValue<int>(Columns.AccountEventId); }
			set { SetColumnValue(Columns.AccountEventId, value); }
		}
		[DataMember]
		public string MonitoringStationOSID {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSID); }
			set { SetColumnValue(Columns.MonitoringStationOSID, value); }
		}
		[DataMember]
		public int SortOrder {
			get { return GetColumnValue<int>(Columns.SortOrder); }
			set { SetColumnValue(Columns.SortOrder, value); }
		}
		[DataMember]
		public int? MoniEventID {
			get { return GetColumnValue<int?>(Columns.MoniEventID); }
			set { SetColumnValue(Columns.MoniEventID, value); }
		}
		[DataMember]
		public int? AGEventID {
			get { return GetColumnValue<int?>(Columns.AGEventID); }
			set { SetColumnValue(Columns.AGEventID, value); }
		}
		[DataMember]
		public int? ZoneEventTypeId {
			get { return GetColumnValue<int?>(Columns.ZoneEventTypeId); }
			set { SetColumnValue(Columns.ZoneEventTypeId, value); }
		}
		[DataMember]
		public int event_id {
			get { return GetColumnValue<int>(Columns.event_id); }
			set { SetColumnValue(Columns.event_id, value); }
		}
		[DataMember]
		public string servtype_id {
			get { return GetColumnValue<string>(Columns.servtype_id); }
			set { SetColumnValue(Columns.servtype_id, value); }
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return EquipmentTypesZoneEventTypeID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentTypesZoneEventTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountEventIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SortOrderColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MoniEventIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AGEventIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ZoneEventTypeIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn event_idColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn servtype_idColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string EquipmentTypesZoneEventTypeID = @"EquipmentTypesZoneEventTypeID";
			public const string EquipmentTypeID = @"EquipmentTypeID";
			public const string AccountEventId = @"AccountEventId";
			public const string MonitoringStationOSID = @"MonitoringStationOSID";
			public const string SortOrder = @"SortOrder";
			public const string MoniEventID = @"MoniEventID";
			public const string AGEventID = @"AGEventID";
			public const string ZoneEventTypeId = @"ZoneEventTypeId";
			public const string event_id = @"event_id";
			public const string servtype_id = @"servtype_id";
			public const string Description = @"Description";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountMonitorInformationsView class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountMonitorInformationsViewCollection : ReadOnlyList<MS_AccountMonitorInformationsView, MS_AccountMonitorInformationsViewCollection>
	{
		public static MS_AccountMonitorInformationsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountMonitorInformationsViewCollection result = new MS_AccountMonitorInformationsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_AccountMonitorInformations view.
	/// </summary>
	[DataContract]
	public partial class MS_AccountMonitorInformationsView : ReadOnlyRecord<MS_AccountMonitorInformationsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_AccountMonitorInformations", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIndustryAccountId = new TableSchema.TableColumn(schema);
				colvarIndustryAccountId.ColumnName = "IndustryAccountId";
				colvarIndustryAccountId.DataType = DbType.Int64;
				colvarIndustryAccountId.MaxLength = 0;
				colvarIndustryAccountId.AutoIncrement = false;
				colvarIndustryAccountId.IsNullable = true;
				colvarIndustryAccountId.IsPrimaryKey = false;
				colvarIndustryAccountId.IsForeignKey = false;
				colvarIndustryAccountId.IsReadOnly = false;
				colvarIndustryAccountId.DefaultSetting = @"";
				colvarIndustryAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountId);

				TableSchema.TableColumn colvarCsid = new TableSchema.TableColumn(schema);
				colvarCsid.ColumnName = "Csid";
				colvarCsid.DataType = DbType.AnsiString;
				colvarCsid.MaxLength = 15;
				colvarCsid.AutoIncrement = false;
				colvarCsid.IsNullable = true;
				colvarCsid.IsPrimaryKey = false;
				colvarCsid.IsForeignKey = false;
				colvarCsid.IsReadOnly = false;
				colvarCsid.DefaultSetting = @"";
				colvarCsid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsid);

				TableSchema.TableColumn colvarReceiverLineId = new TableSchema.TableColumn(schema);
				colvarReceiverLineId.ColumnName = "ReceiverLineId";
				colvarReceiverLineId.DataType = DbType.AnsiString;
				colvarReceiverLineId.MaxLength = 30;
				colvarReceiverLineId.AutoIncrement = false;
				colvarReceiverLineId.IsNullable = true;
				colvarReceiverLineId.IsPrimaryKey = false;
				colvarReceiverLineId.IsForeignKey = false;
				colvarReceiverLineId.IsReadOnly = false;
				colvarReceiverLineId.DefaultSetting = @"";
				colvarReceiverLineId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineId);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = true;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = false;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"";
				colvarMonitoringStationOSId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarIndustryAccount2Id = new TableSchema.TableColumn(schema);
				colvarIndustryAccount2Id.ColumnName = "IndustryAccount2Id";
				colvarIndustryAccount2Id.DataType = DbType.Int64;
				colvarIndustryAccount2Id.MaxLength = 0;
				colvarIndustryAccount2Id.AutoIncrement = false;
				colvarIndustryAccount2Id.IsNullable = true;
				colvarIndustryAccount2Id.IsPrimaryKey = false;
				colvarIndustryAccount2Id.IsForeignKey = false;
				colvarIndustryAccount2Id.IsReadOnly = false;
				colvarIndustryAccount2Id.DefaultSetting = @"";
				colvarIndustryAccount2Id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccount2Id);

				TableSchema.TableColumn colvarCsid2 = new TableSchema.TableColumn(schema);
				colvarCsid2.ColumnName = "Csid2";
				colvarCsid2.DataType = DbType.AnsiString;
				colvarCsid2.MaxLength = 15;
				colvarCsid2.AutoIncrement = false;
				colvarCsid2.IsNullable = true;
				colvarCsid2.IsPrimaryKey = false;
				colvarCsid2.IsForeignKey = false;
				colvarCsid2.IsReadOnly = false;
				colvarCsid2.DefaultSetting = @"";
				colvarCsid2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsid2);

				TableSchema.TableColumn colvarReceiverLine2Id = new TableSchema.TableColumn(schema);
				colvarReceiverLine2Id.ColumnName = "ReceiverLine2Id";
				colvarReceiverLine2Id.DataType = DbType.AnsiString;
				colvarReceiverLine2Id.MaxLength = 30;
				colvarReceiverLine2Id.AutoIncrement = false;
				colvarReceiverLine2Id.IsNullable = true;
				colvarReceiverLine2Id.IsPrimaryKey = false;
				colvarReceiverLine2Id.IsForeignKey = false;
				colvarReceiverLine2Id.IsReadOnly = false;
				colvarReceiverLine2Id.DefaultSetting = @"";
				colvarReceiverLine2Id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLine2Id);

				TableSchema.TableColumn colvarTechId = new TableSchema.TableColumn(schema);
				colvarTechId.ColumnName = "TechId";
				colvarTechId.DataType = DbType.AnsiString;
				colvarTechId.MaxLength = 10;
				colvarTechId.AutoIncrement = false;
				colvarTechId.IsNullable = true;
				colvarTechId.IsPrimaryKey = false;
				colvarTechId.IsForeignKey = false;
				colvarTechId.IsReadOnly = false;
				colvarTechId.DefaultSetting = @"";
				colvarTechId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechId);

				TableSchema.TableColumn colvarTechFullName = new TableSchema.TableColumn(schema);
				colvarTechFullName.ColumnName = "TechFullName";
				colvarTechFullName.DataType = DbType.String;
				colvarTechFullName.MaxLength = 53;
				colvarTechFullName.AutoIncrement = false;
				colvarTechFullName.IsNullable = true;
				colvarTechFullName.IsPrimaryKey = false;
				colvarTechFullName.IsForeignKey = false;
				colvarTechFullName.IsReadOnly = false;
				colvarTechFullName.DefaultSetting = @"";
				colvarTechFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechFullName);

				TableSchema.TableColumn colvarSalesRepId = new TableSchema.TableColumn(schema);
				colvarSalesRepId.ColumnName = "SalesRepId";
				colvarSalesRepId.DataType = DbType.AnsiString;
				colvarSalesRepId.MaxLength = 10;
				colvarSalesRepId.AutoIncrement = false;
				colvarSalesRepId.IsNullable = false;
				colvarSalesRepId.IsPrimaryKey = false;
				colvarSalesRepId.IsForeignKey = false;
				colvarSalesRepId.IsReadOnly = false;
				colvarSalesRepId.DefaultSetting = @"";
				colvarSalesRepId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepId);

				TableSchema.TableColumn colvarSalesFullName = new TableSchema.TableColumn(schema);
				colvarSalesFullName.ColumnName = "SalesFullName";
				colvarSalesFullName.DataType = DbType.String;
				colvarSalesFullName.MaxLength = 53;
				colvarSalesFullName.AutoIncrement = false;
				colvarSalesFullName.IsNullable = true;
				colvarSalesFullName.IsPrimaryKey = false;
				colvarSalesFullName.IsForeignKey = false;
				colvarSalesFullName.IsReadOnly = false;
				colvarSalesFullName.DefaultSetting = @"";
				colvarSalesFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesFullName);

				TableSchema.TableColumn colvarSystemTypeId = new TableSchema.TableColumn(schema);
				colvarSystemTypeId.ColumnName = "SystemTypeId";
				colvarSystemTypeId.DataType = DbType.AnsiString;
				colvarSystemTypeId.MaxLength = 20;
				colvarSystemTypeId.AutoIncrement = false;
				colvarSystemTypeId.IsNullable = true;
				colvarSystemTypeId.IsPrimaryKey = false;
				colvarSystemTypeId.IsForeignKey = false;
				colvarSystemTypeId.IsReadOnly = false;
				colvarSystemTypeId.DefaultSetting = @"";
				colvarSystemTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeId);

				TableSchema.TableColumn colvarCellularTypeId = new TableSchema.TableColumn(schema);
				colvarCellularTypeId.ColumnName = "CellularTypeId";
				colvarCellularTypeId.DataType = DbType.AnsiString;
				colvarCellularTypeId.MaxLength = 20;
				colvarCellularTypeId.AutoIncrement = false;
				colvarCellularTypeId.IsNullable = true;
				colvarCellularTypeId.IsPrimaryKey = false;
				colvarCellularTypeId.IsForeignKey = false;
				colvarCellularTypeId.IsReadOnly = false;
				colvarCellularTypeId.DefaultSetting = @"";
				colvarCellularTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularTypeId);

				TableSchema.TableColumn colvarPanelTypeId = new TableSchema.TableColumn(schema);
				colvarPanelTypeId.ColumnName = "PanelTypeId";
				colvarPanelTypeId.DataType = DbType.AnsiString;
				colvarPanelTypeId.MaxLength = 20;
				colvarPanelTypeId.AutoIncrement = false;
				colvarPanelTypeId.IsNullable = true;
				colvarPanelTypeId.IsPrimaryKey = false;
				colvarPanelTypeId.IsForeignKey = false;
				colvarPanelTypeId.IsReadOnly = false;
				colvarPanelTypeId.DefaultSetting = @"";
				colvarPanelTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeId);

				TableSchema.TableColumn colvarDslSeizureId = new TableSchema.TableColumn(schema);
				colvarDslSeizureId.ColumnName = "DslSeizureId";
				colvarDslSeizureId.DataType = DbType.Int16;
				colvarDslSeizureId.MaxLength = 0;
				colvarDslSeizureId.AutoIncrement = false;
				colvarDslSeizureId.IsNullable = true;
				colvarDslSeizureId.IsPrimaryKey = false;
				colvarDslSeizureId.IsForeignKey = false;
				colvarDslSeizureId.IsReadOnly = false;
				colvarDslSeizureId.DefaultSetting = @"";
				colvarDslSeizureId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDslSeizureId);

				TableSchema.TableColumn colvarPanelItemId = new TableSchema.TableColumn(schema);
				colvarPanelItemId.ColumnName = "PanelItemId";
				colvarPanelItemId.DataType = DbType.AnsiString;
				colvarPanelItemId.MaxLength = 50;
				colvarPanelItemId.AutoIncrement = false;
				colvarPanelItemId.IsNullable = true;
				colvarPanelItemId.IsPrimaryKey = false;
				colvarPanelItemId.IsForeignKey = false;
				colvarPanelItemId.IsReadOnly = false;
				colvarPanelItemId.DefaultSetting = @"";
				colvarPanelItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelItemId);

				TableSchema.TableColumn colvarCellPackageItemId = new TableSchema.TableColumn(schema);
				colvarCellPackageItemId.ColumnName = "CellPackageItemId";
				colvarCellPackageItemId.DataType = DbType.AnsiString;
				colvarCellPackageItemId.MaxLength = 50;
				colvarCellPackageItemId.AutoIncrement = false;
				colvarCellPackageItemId.IsNullable = true;
				colvarCellPackageItemId.IsPrimaryKey = false;
				colvarCellPackageItemId.IsForeignKey = false;
				colvarCellPackageItemId.IsReadOnly = false;
				colvarCellPackageItemId.DefaultSetting = @"";
				colvarCellPackageItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellPackageItemId);

				TableSchema.TableColumn colvarContractId = new TableSchema.TableColumn(schema);
				colvarContractId.ColumnName = "ContractId";
				colvarContractId.DataType = DbType.Int32;
				colvarContractId.MaxLength = 0;
				colvarContractId.AutoIncrement = false;
				colvarContractId.IsNullable = true;
				colvarContractId.IsPrimaryKey = false;
				colvarContractId.IsForeignKey = false;
				colvarContractId.IsReadOnly = false;
				colvarContractId.DefaultSetting = @"";
				colvarContractId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractId);

				TableSchema.TableColumn colvarAccountPassword = new TableSchema.TableColumn(schema);
				colvarAccountPassword.ColumnName = "AccountPassword";
				colvarAccountPassword.DataType = DbType.String;
				colvarAccountPassword.MaxLength = 50;
				colvarAccountPassword.AutoIncrement = false;
				colvarAccountPassword.IsNullable = true;
				colvarAccountPassword.IsPrimaryKey = false;
				colvarAccountPassword.IsForeignKey = false;
				colvarAccountPassword.IsReadOnly = false;
				colvarAccountPassword.DefaultSetting = @"";
				colvarAccountPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountPassword);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_AccountMonitorInformations",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_AccountMonitorInformationsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set { SetColumnValue(Columns.AccountID, value); }
		}
		[DataMember]
		public long? IndustryAccountId {
			get { return GetColumnValue<long?>(Columns.IndustryAccountId); }
			set { SetColumnValue(Columns.IndustryAccountId, value); }
		}
		[DataMember]
		public string Csid {
			get { return GetColumnValue<string>(Columns.Csid); }
			set { SetColumnValue(Columns.Csid, value); }
		}
		[DataMember]
		public string ReceiverLineId {
			get { return GetColumnValue<string>(Columns.ReceiverLineId); }
			set { SetColumnValue(Columns.ReceiverLineId, value); }
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set { SetColumnValue(Columns.MonitoringStationOSId, value); }
		}
		[DataMember]
		public long? IndustryAccount2Id {
			get { return GetColumnValue<long?>(Columns.IndustryAccount2Id); }
			set { SetColumnValue(Columns.IndustryAccount2Id, value); }
		}
		[DataMember]
		public string Csid2 {
			get { return GetColumnValue<string>(Columns.Csid2); }
			set { SetColumnValue(Columns.Csid2, value); }
		}
		[DataMember]
		public string ReceiverLine2Id {
			get { return GetColumnValue<string>(Columns.ReceiverLine2Id); }
			set { SetColumnValue(Columns.ReceiverLine2Id, value); }
		}
		[DataMember]
		public string TechId {
			get { return GetColumnValue<string>(Columns.TechId); }
			set { SetColumnValue(Columns.TechId, value); }
		}
		[DataMember]
		public string TechFullName {
			get { return GetColumnValue<string>(Columns.TechFullName); }
			set { SetColumnValue(Columns.TechFullName, value); }
		}
		[DataMember]
		public string SalesRepId {
			get { return GetColumnValue<string>(Columns.SalesRepId); }
			set { SetColumnValue(Columns.SalesRepId, value); }
		}
		[DataMember]
		public string SalesFullName {
			get { return GetColumnValue<string>(Columns.SalesFullName); }
			set { SetColumnValue(Columns.SalesFullName, value); }
		}
		[DataMember]
		public string SystemTypeId {
			get { return GetColumnValue<string>(Columns.SystemTypeId); }
			set { SetColumnValue(Columns.SystemTypeId, value); }
		}
		[DataMember]
		public string CellularTypeId {
			get { return GetColumnValue<string>(Columns.CellularTypeId); }
			set { SetColumnValue(Columns.CellularTypeId, value); }
		}
		[DataMember]
		public string PanelTypeId {
			get { return GetColumnValue<string>(Columns.PanelTypeId); }
			set { SetColumnValue(Columns.PanelTypeId, value); }
		}
		[DataMember]
		public short? DslSeizureId {
			get { return GetColumnValue<short?>(Columns.DslSeizureId); }
			set { SetColumnValue(Columns.DslSeizureId, value); }
		}
		[DataMember]
		public string PanelItemId {
			get { return GetColumnValue<string>(Columns.PanelItemId); }
			set { SetColumnValue(Columns.PanelItemId, value); }
		}
		[DataMember]
		public string CellPackageItemId {
			get { return GetColumnValue<string>(Columns.CellPackageItemId); }
			set { SetColumnValue(Columns.CellPackageItemId, value); }
		}
		[DataMember]
		public int? ContractId {
			get { return GetColumnValue<int?>(Columns.ContractId); }
			set { SetColumnValue(Columns.ContractId, value); }
		}
		[DataMember]
		public string AccountPassword {
			get { return GetColumnValue<string>(Columns.AccountPassword); }
			set { SetColumnValue(Columns.AccountPassword, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IndustryAccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CsidColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ReceiverLineIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IndustryAccount2IdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn Csid2Column
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ReceiverLine2IdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn TechIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn TechFullNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn SalesRepIdColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn SalesFullNameColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn SystemTypeIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CellularTypeIdColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PanelTypeIdColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DslSeizureIdColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn PanelItemIdColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn CellPackageItemIdColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ContractIdColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn AccountPasswordColumn
		{
			get { return Schema.Columns[19]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string AccountID = @"AccountID";
			public const string IndustryAccountId = @"IndustryAccountId";
			public const string Csid = @"Csid";
			public const string ReceiverLineId = @"ReceiverLineId";
			public const string MonitoringStationOSId = @"MonitoringStationOSId";
			public const string IndustryAccount2Id = @"IndustryAccount2Id";
			public const string Csid2 = @"Csid2";
			public const string ReceiverLine2Id = @"ReceiverLine2Id";
			public const string TechId = @"TechId";
			public const string TechFullName = @"TechFullName";
			public const string SalesRepId = @"SalesRepId";
			public const string SalesFullName = @"SalesFullName";
			public const string SystemTypeId = @"SystemTypeId";
			public const string CellularTypeId = @"CellularTypeId";
			public const string PanelTypeId = @"PanelTypeId";
			public const string DslSeizureId = @"DslSeizureId";
			public const string PanelItemId = @"PanelItemId";
			public const string CellPackageItemId = @"CellPackageItemId";
			public const string ContractId = @"ContractId";
			public const string AccountPassword = @"AccountPassword";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountOnlineStatusInfoView class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountOnlineStatusInfoViewCollection : ReadOnlyList<MS_AccountOnlineStatusInfoView, MS_AccountOnlineStatusInfoViewCollection>
	{
		public static MS_AccountOnlineStatusInfoViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountOnlineStatusInfoViewCollection result = new MS_AccountOnlineStatusInfoViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_AccountOnlineStatusInfo view.
	/// </summary>
	[DataContract]
	public partial class MS_AccountOnlineStatusInfoView : ReadOnlyRecord<MS_AccountOnlineStatusInfoView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_AccountOnlineStatusInfo", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarKeyName = new TableSchema.TableColumn(schema);
				colvarKeyName.ColumnName = "KeyName";
				colvarKeyName.DataType = DbType.AnsiString;
				colvarKeyName.MaxLength = 100;
				colvarKeyName.AutoIncrement = false;
				colvarKeyName.IsNullable = true;
				colvarKeyName.IsPrimaryKey = false;
				colvarKeyName.IsForeignKey = false;
				colvarKeyName.IsReadOnly = false;
				colvarKeyName.DefaultSetting = @"";
				colvarKeyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKeyName);

				TableSchema.TableColumn colvarTextX = new TableSchema.TableColumn(schema);
				colvarTextX.ColumnName = "Text";
				colvarTextX.DataType = DbType.AnsiString;
				colvarTextX.MaxLength = 100;
				colvarTextX.AutoIncrement = false;
				colvarTextX.IsNullable = true;
				colvarTextX.IsPrimaryKey = false;
				colvarTextX.IsForeignKey = false;
				colvarTextX.IsReadOnly = false;
				colvarTextX.DefaultSetting = @"";
				colvarTextX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTextX);

				TableSchema.TableColumn colvarValueX = new TableSchema.TableColumn(schema);
				colvarValueX.ColumnName = "Value";
				colvarValueX.DataType = DbType.AnsiString;
				colvarValueX.MaxLength = 100;
				colvarValueX.AutoIncrement = false;
				colvarValueX.IsNullable = true;
				colvarValueX.IsPrimaryKey = false;
				colvarValueX.IsForeignKey = false;
				colvarValueX.IsReadOnly = false;
				colvarValueX.DefaultSetting = @"";
				colvarValueX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueX);

				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.AnsiString;
				colvarStatus.MaxLength = 100;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = true;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_AccountOnlineStatusInfo",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_AccountOnlineStatusInfoView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public string KeyName {
			get { return GetColumnValue<string>(Columns.KeyName); }
			set { SetColumnValue(Columns.KeyName, value); }
		}
		[DataMember]
		public string TextX {
			get { return GetColumnValue<string>(Columns.TextX); }
			set { SetColumnValue(Columns.TextX, value); }
		}
		[DataMember]
		public string ValueX {
			get { return GetColumnValue<string>(Columns.ValueX); }
			set { SetColumnValue(Columns.ValueX, value); }
		}
		[DataMember]
		public string Status {
			get { return GetColumnValue<string>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return TextX;
		}

		#region Typed Columns

		public static TableSchema.TableColumn KeyNameColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TextXColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ValueXColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn StatusColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string KeyName = @"KeyName";
			public const string TextX = @"TextX";
			public const string ValueX = @"ValueX";
			public const string Status = @"Status";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSalesInformationsView class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSalesInformationsViewCollection : ReadOnlyList<MS_AccountSalesInformationsView, MS_AccountSalesInformationsViewCollection>
	{
		public static MS_AccountSalesInformationsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSalesInformationsViewCollection result = new MS_AccountSalesInformationsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_AccountSalesInformations view.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSalesInformationsView : ReadOnlyRecord<MS_AccountSalesInformationsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_AccountSalesInformations", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarPaymentTypeId = new TableSchema.TableColumn(schema);
				colvarPaymentTypeId.ColumnName = "PaymentTypeId";
				colvarPaymentTypeId.DataType = DbType.AnsiString;
				colvarPaymentTypeId.MaxLength = 20;
				colvarPaymentTypeId.AutoIncrement = false;
				colvarPaymentTypeId.IsNullable = true;
				colvarPaymentTypeId.IsPrimaryKey = false;
				colvarPaymentTypeId.IsForeignKey = false;
				colvarPaymentTypeId.IsReadOnly = false;
				colvarPaymentTypeId.DefaultSetting = @"";
				colvarPaymentTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentTypeId);

				TableSchema.TableColumn colvarBillingDay = new TableSchema.TableColumn(schema);
				colvarBillingDay.ColumnName = "BillingDay";
				colvarBillingDay.DataType = DbType.Int16;
				colvarBillingDay.MaxLength = 0;
				colvarBillingDay.AutoIncrement = false;
				colvarBillingDay.IsNullable = true;
				colvarBillingDay.IsPrimaryKey = false;
				colvarBillingDay.IsForeignKey = false;
				colvarBillingDay.IsReadOnly = false;
				colvarBillingDay.DefaultSetting = @"";
				colvarBillingDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingDay);

				TableSchema.TableColumn colvarCurrentMonitoringStation = new TableSchema.TableColumn(schema);
				colvarCurrentMonitoringStation.ColumnName = "CurrentMonitoringStation";
				colvarCurrentMonitoringStation.DataType = DbType.String;
				colvarCurrentMonitoringStation.MaxLength = 150;
				colvarCurrentMonitoringStation.AutoIncrement = false;
				colvarCurrentMonitoringStation.IsNullable = true;
				colvarCurrentMonitoringStation.IsPrimaryKey = false;
				colvarCurrentMonitoringStation.IsForeignKey = false;
				colvarCurrentMonitoringStation.IsReadOnly = false;
				colvarCurrentMonitoringStation.DefaultSetting = @"";
				colvarCurrentMonitoringStation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentMonitoringStation);

				TableSchema.TableColumn colvarPanelTypeId = new TableSchema.TableColumn(schema);
				colvarPanelTypeId.ColumnName = "PanelTypeId";
				colvarPanelTypeId.DataType = DbType.AnsiString;
				colvarPanelTypeId.MaxLength = 20;
				colvarPanelTypeId.AutoIncrement = false;
				colvarPanelTypeId.IsNullable = true;
				colvarPanelTypeId.IsPrimaryKey = false;
				colvarPanelTypeId.IsForeignKey = false;
				colvarPanelTypeId.IsReadOnly = false;
				colvarPanelTypeId.DefaultSetting = @"";
				colvarPanelTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeId);

				TableSchema.TableColumn colvarPanelItemId = new TableSchema.TableColumn(schema);
				colvarPanelItemId.ColumnName = "PanelItemId";
				colvarPanelItemId.DataType = DbType.AnsiString;
				colvarPanelItemId.MaxLength = 50;
				colvarPanelItemId.AutoIncrement = false;
				colvarPanelItemId.IsNullable = true;
				colvarPanelItemId.IsPrimaryKey = false;
				colvarPanelItemId.IsForeignKey = false;
				colvarPanelItemId.IsReadOnly = false;
				colvarPanelItemId.DefaultSetting = @"";
				colvarPanelItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelItemId);

				TableSchema.TableColumn colvarIsTakeOver = new TableSchema.TableColumn(schema);
				colvarIsTakeOver.ColumnName = "IsTakeOver";
				colvarIsTakeOver.DataType = DbType.Boolean;
				colvarIsTakeOver.MaxLength = 0;
				colvarIsTakeOver.AutoIncrement = false;
				colvarIsTakeOver.IsNullable = true;
				colvarIsTakeOver.IsPrimaryKey = false;
				colvarIsTakeOver.IsForeignKey = false;
				colvarIsTakeOver.IsReadOnly = false;
				colvarIsTakeOver.DefaultSetting = @"";
				colvarIsTakeOver.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTakeOver);

				TableSchema.TableColumn colvarIsOwner = new TableSchema.TableColumn(schema);
				colvarIsOwner.ColumnName = "IsOwner";
				colvarIsOwner.DataType = DbType.Boolean;
				colvarIsOwner.MaxLength = 0;
				colvarIsOwner.AutoIncrement = false;
				colvarIsOwner.IsNullable = true;
				colvarIsOwner.IsPrimaryKey = false;
				colvarIsOwner.IsForeignKey = false;
				colvarIsOwner.IsReadOnly = false;
				colvarIsOwner.DefaultSetting = @"";
				colvarIsOwner.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsOwner);

				TableSchema.TableColumn colvarCellPackageItemId = new TableSchema.TableColumn(schema);
				colvarCellPackageItemId.ColumnName = "CellPackageItemId";
				colvarCellPackageItemId.DataType = DbType.AnsiString;
				colvarCellPackageItemId.MaxLength = 50;
				colvarCellPackageItemId.AutoIncrement = false;
				colvarCellPackageItemId.IsNullable = true;
				colvarCellPackageItemId.IsPrimaryKey = false;
				colvarCellPackageItemId.IsForeignKey = false;
				colvarCellPackageItemId.IsReadOnly = false;
				colvarCellPackageItemId.DefaultSetting = @"";
				colvarCellPackageItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellPackageItemId);

				TableSchema.TableColumn colvarCellServicePackage = new TableSchema.TableColumn(schema);
				colvarCellServicePackage.ColumnName = "CellServicePackage";
				colvarCellServicePackage.DataType = DbType.String;
				colvarCellServicePackage.MaxLength = 136;
				colvarCellServicePackage.AutoIncrement = false;
				colvarCellServicePackage.IsNullable = true;
				colvarCellServicePackage.IsPrimaryKey = false;
				colvarCellServicePackage.IsForeignKey = false;
				colvarCellServicePackage.IsReadOnly = false;
				colvarCellServicePackage.DefaultSetting = @"";
				colvarCellServicePackage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellServicePackage);

				TableSchema.TableColumn colvarCellularTypeId = new TableSchema.TableColumn(schema);
				colvarCellularTypeId.ColumnName = "CellularTypeId";
				colvarCellularTypeId.DataType = DbType.AnsiString;
				colvarCellularTypeId.MaxLength = 20;
				colvarCellularTypeId.AutoIncrement = false;
				colvarCellularTypeId.IsNullable = true;
				colvarCellularTypeId.IsPrimaryKey = false;
				colvarCellularTypeId.IsForeignKey = false;
				colvarCellularTypeId.IsReadOnly = false;
				colvarCellularTypeId.DefaultSetting = @"";
				colvarCellularTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularTypeId);

				TableSchema.TableColumn colvarCellularTypeName = new TableSchema.TableColumn(schema);
				colvarCellularTypeName.ColumnName = "CellularTypeName";
				colvarCellularTypeName.DataType = DbType.AnsiString;
				colvarCellularTypeName.MaxLength = 50;
				colvarCellularTypeName.AutoIncrement = false;
				colvarCellularTypeName.IsNullable = true;
				colvarCellularTypeName.IsPrimaryKey = false;
				colvarCellularTypeName.IsForeignKey = false;
				colvarCellularTypeName.IsReadOnly = false;
				colvarCellularTypeName.DefaultSetting = @"";
				colvarCellularTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularTypeName);

				TableSchema.TableColumn colvarCellularVendor = new TableSchema.TableColumn(schema);
				colvarCellularVendor.ColumnName = "CellularVendor";
				colvarCellularVendor.DataType = DbType.AnsiString;
				colvarCellularVendor.MaxLength = 50;
				colvarCellularVendor.AutoIncrement = false;
				colvarCellularVendor.IsNullable = true;
				colvarCellularVendor.IsPrimaryKey = false;
				colvarCellularVendor.IsForeignKey = false;
				colvarCellularVendor.IsReadOnly = false;
				colvarCellularVendor.DefaultSetting = @"";
				colvarCellularVendor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularVendor);

				TableSchema.TableColumn colvarSetupFee = new TableSchema.TableColumn(schema);
				colvarSetupFee.ColumnName = "SetupFee";
				colvarSetupFee.DataType = DbType.Currency;
				colvarSetupFee.MaxLength = 0;
				colvarSetupFee.AutoIncrement = false;
				colvarSetupFee.IsNullable = true;
				colvarSetupFee.IsPrimaryKey = false;
				colvarSetupFee.IsForeignKey = false;
				colvarSetupFee.IsReadOnly = false;
				colvarSetupFee.DefaultSetting = @"";
				colvarSetupFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSetupFee);

				TableSchema.TableColumn colvarSetupFee1stMonth = new TableSchema.TableColumn(schema);
				colvarSetupFee1stMonth.ColumnName = "SetupFee1stMonth";
				colvarSetupFee1stMonth.DataType = DbType.Currency;
				colvarSetupFee1stMonth.MaxLength = 0;
				colvarSetupFee1stMonth.AutoIncrement = false;
				colvarSetupFee1stMonth.IsNullable = true;
				colvarSetupFee1stMonth.IsPrimaryKey = false;
				colvarSetupFee1stMonth.IsForeignKey = false;
				colvarSetupFee1stMonth.IsReadOnly = false;
				colvarSetupFee1stMonth.DefaultSetting = @"";
				colvarSetupFee1stMonth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSetupFee1stMonth);

				TableSchema.TableColumn colvarMMR = new TableSchema.TableColumn(schema);
				colvarMMR.ColumnName = "MMR";
				colvarMMR.DataType = DbType.Currency;
				colvarMMR.MaxLength = 0;
				colvarMMR.AutoIncrement = false;
				colvarMMR.IsNullable = true;
				colvarMMR.IsPrimaryKey = false;
				colvarMMR.IsForeignKey = false;
				colvarMMR.IsReadOnly = false;
				colvarMMR.DefaultSetting = @"";
				colvarMMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMMR);

				TableSchema.TableColumn colvarOver3Months = new TableSchema.TableColumn(schema);
				colvarOver3Months.ColumnName = "Over3Months";
				colvarOver3Months.DataType = DbType.Boolean;
				colvarOver3Months.MaxLength = 0;
				colvarOver3Months.AutoIncrement = false;
				colvarOver3Months.IsNullable = true;
				colvarOver3Months.IsPrimaryKey = false;
				colvarOver3Months.IsForeignKey = false;
				colvarOver3Months.IsReadOnly = false;
				colvarOver3Months.DefaultSetting = @"";
				colvarOver3Months.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOver3Months);

				TableSchema.TableColumn colvarContractLength = new TableSchema.TableColumn(schema);
				colvarContractLength.ColumnName = "ContractLength";
				colvarContractLength.DataType = DbType.Int16;
				colvarContractLength.MaxLength = 0;
				colvarContractLength.AutoIncrement = false;
				colvarContractLength.IsNullable = true;
				colvarContractLength.IsPrimaryKey = false;
				colvarContractLength.IsForeignKey = false;
				colvarContractLength.IsReadOnly = false;
				colvarContractLength.DefaultSetting = @"";
				colvarContractLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractLength);

				TableSchema.TableColumn colvarContractId = new TableSchema.TableColumn(schema);
				colvarContractId.ColumnName = "ContractId";
				colvarContractId.DataType = DbType.Int32;
				colvarContractId.MaxLength = 0;
				colvarContractId.AutoIncrement = false;
				colvarContractId.IsNullable = true;
				colvarContractId.IsPrimaryKey = false;
				colvarContractId.IsForeignKey = false;
				colvarContractId.IsReadOnly = false;
				colvarContractId.DefaultSetting = @"";
				colvarContractId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractId);

				TableSchema.TableColumn colvarContractTemplateId = new TableSchema.TableColumn(schema);
				colvarContractTemplateId.ColumnName = "ContractTemplateId";
				colvarContractTemplateId.DataType = DbType.Int32;
				colvarContractTemplateId.MaxLength = 0;
				colvarContractTemplateId.AutoIncrement = false;
				colvarContractTemplateId.IsNullable = true;
				colvarContractTemplateId.IsPrimaryKey = false;
				colvarContractTemplateId.IsForeignKey = false;
				colvarContractTemplateId.IsReadOnly = false;
				colvarContractTemplateId.DefaultSetting = @"";
				colvarContractTemplateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractTemplateId);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarIsMoni = new TableSchema.TableColumn(schema);
				colvarIsMoni.ColumnName = "IsMoni";
				colvarIsMoni.DataType = DbType.Boolean;
				colvarIsMoni.MaxLength = 0;
				colvarIsMoni.AutoIncrement = false;
				colvarIsMoni.IsNullable = true;
				colvarIsMoni.IsPrimaryKey = false;
				colvarIsMoni.IsForeignKey = false;
				colvarIsMoni.IsReadOnly = false;
				colvarIsMoni.DefaultSetting = @"";
				colvarIsMoni.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMoni);

				TableSchema.TableColumn colvarContractSignedDate = new TableSchema.TableColumn(schema);
				colvarContractSignedDate.ColumnName = "ContractSignedDate";
				colvarContractSignedDate.DataType = DbType.DateTime;
				colvarContractSignedDate.MaxLength = 0;
				colvarContractSignedDate.AutoIncrement = false;
				colvarContractSignedDate.IsNullable = true;
				colvarContractSignedDate.IsPrimaryKey = false;
				colvarContractSignedDate.IsForeignKey = false;
				colvarContractSignedDate.IsReadOnly = false;
				colvarContractSignedDate.DefaultSetting = @"";
				colvarContractSignedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractSignedDate);

				TableSchema.TableColumn colvarSalesRepId = new TableSchema.TableColumn(schema);
				colvarSalesRepId.ColumnName = "SalesRepId";
				colvarSalesRepId.DataType = DbType.AnsiString;
				colvarSalesRepId.MaxLength = 10;
				colvarSalesRepId.AutoIncrement = false;
				colvarSalesRepId.IsNullable = true;
				colvarSalesRepId.IsPrimaryKey = false;
				colvarSalesRepId.IsForeignKey = false;
				colvarSalesRepId.IsReadOnly = false;
				colvarSalesRepId.DefaultSetting = @"";
				colvarSalesRepId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepId);

				TableSchema.TableColumn colvarInstallDate = new TableSchema.TableColumn(schema);
				colvarInstallDate.ColumnName = "InstallDate";
				colvarInstallDate.DataType = DbType.DateTime;
				colvarInstallDate.MaxLength = 0;
				colvarInstallDate.AutoIncrement = false;
				colvarInstallDate.IsNullable = true;
				colvarInstallDate.IsPrimaryKey = false;
				colvarInstallDate.IsForeignKey = false;
				colvarInstallDate.IsReadOnly = false;
				colvarInstallDate.DefaultSetting = @"";
				colvarInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallDate);

				TableSchema.TableColumn colvarTechId = new TableSchema.TableColumn(schema);
				colvarTechId.ColumnName = "TechId";
				colvarTechId.DataType = DbType.AnsiString;
				colvarTechId.MaxLength = 10;
				colvarTechId.AutoIncrement = false;
				colvarTechId.IsNullable = true;
				colvarTechId.IsPrimaryKey = false;
				colvarTechId.IsForeignKey = false;
				colvarTechId.IsReadOnly = false;
				colvarTechId.DefaultSetting = @"";
				colvarTechId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechId);

				TableSchema.TableColumn colvarCancelDate = new TableSchema.TableColumn(schema);
				colvarCancelDate.ColumnName = "CancelDate";
				colvarCancelDate.DataType = DbType.DateTime;
				colvarCancelDate.MaxLength = 0;
				colvarCancelDate.AutoIncrement = false;
				colvarCancelDate.IsNullable = true;
				colvarCancelDate.IsPrimaryKey = false;
				colvarCancelDate.IsForeignKey = false;
				colvarCancelDate.IsReadOnly = false;
				colvarCancelDate.DefaultSetting = @"";
				colvarCancelDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelDate);

				TableSchema.TableColumn colvarAccountCancelReasonId = new TableSchema.TableColumn(schema);
				colvarAccountCancelReasonId.ColumnName = "AccountCancelReasonId";
				colvarAccountCancelReasonId.DataType = DbType.AnsiString;
				colvarAccountCancelReasonId.MaxLength = 10;
				colvarAccountCancelReasonId.AutoIncrement = false;
				colvarAccountCancelReasonId.IsNullable = true;
				colvarAccountCancelReasonId.IsPrimaryKey = false;
				colvarAccountCancelReasonId.IsForeignKey = false;
				colvarAccountCancelReasonId.IsReadOnly = false;
				colvarAccountCancelReasonId.DefaultSetting = @"";
				colvarAccountCancelReasonId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountCancelReasonId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_AccountSalesInformations",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_AccountSalesInformationsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set { SetColumnValue(Columns.AccountID, value); }
		}
		[DataMember]
		public string PaymentTypeId {
			get { return GetColumnValue<string>(Columns.PaymentTypeId); }
			set { SetColumnValue(Columns.PaymentTypeId, value); }
		}
		[DataMember]
		public short? BillingDay {
			get { return GetColumnValue<short?>(Columns.BillingDay); }
			set { SetColumnValue(Columns.BillingDay, value); }
		}
		[DataMember]
		public string CurrentMonitoringStation {
			get { return GetColumnValue<string>(Columns.CurrentMonitoringStation); }
			set { SetColumnValue(Columns.CurrentMonitoringStation, value); }
		}
		[DataMember]
		public string PanelTypeId {
			get { return GetColumnValue<string>(Columns.PanelTypeId); }
			set { SetColumnValue(Columns.PanelTypeId, value); }
		}
		[DataMember]
		public string PanelItemId {
			get { return GetColumnValue<string>(Columns.PanelItemId); }
			set { SetColumnValue(Columns.PanelItemId, value); }
		}
		[DataMember]
		public bool? IsTakeOver {
			get { return GetColumnValue<bool?>(Columns.IsTakeOver); }
			set { SetColumnValue(Columns.IsTakeOver, value); }
		}
		[DataMember]
		public bool? IsOwner {
			get { return GetColumnValue<bool?>(Columns.IsOwner); }
			set { SetColumnValue(Columns.IsOwner, value); }
		}
		[DataMember]
		public string CellPackageItemId {
			get { return GetColumnValue<string>(Columns.CellPackageItemId); }
			set { SetColumnValue(Columns.CellPackageItemId, value); }
		}
		[DataMember]
		public string CellServicePackage {
			get { return GetColumnValue<string>(Columns.CellServicePackage); }
			set { SetColumnValue(Columns.CellServicePackage, value); }
		}
		[DataMember]
		public string CellularTypeId {
			get { return GetColumnValue<string>(Columns.CellularTypeId); }
			set { SetColumnValue(Columns.CellularTypeId, value); }
		}
		[DataMember]
		public string CellularTypeName {
			get { return GetColumnValue<string>(Columns.CellularTypeName); }
			set { SetColumnValue(Columns.CellularTypeName, value); }
		}
		[DataMember]
		public string CellularVendor {
			get { return GetColumnValue<string>(Columns.CellularVendor); }
			set { SetColumnValue(Columns.CellularVendor, value); }
		}
		[DataMember]
		public decimal? SetupFee {
			get { return GetColumnValue<decimal?>(Columns.SetupFee); }
			set { SetColumnValue(Columns.SetupFee, value); }
		}
		[DataMember]
		public decimal? SetupFee1stMonth {
			get { return GetColumnValue<decimal?>(Columns.SetupFee1stMonth); }
			set { SetColumnValue(Columns.SetupFee1stMonth, value); }
		}
		[DataMember]
		public decimal? MMR {
			get { return GetColumnValue<decimal?>(Columns.MMR); }
			set { SetColumnValue(Columns.MMR, value); }
		}
		[DataMember]
		public bool? Over3Months {
			get { return GetColumnValue<bool?>(Columns.Over3Months); }
			set { SetColumnValue(Columns.Over3Months, value); }
		}
		[DataMember]
		public short? ContractLength {
			get { return GetColumnValue<short?>(Columns.ContractLength); }
			set { SetColumnValue(Columns.ContractLength, value); }
		}
		[DataMember]
		public int? ContractId {
			get { return GetColumnValue<int?>(Columns.ContractId); }
			set { SetColumnValue(Columns.ContractId, value); }
		}
		[DataMember]
		public int? ContractTemplateId {
			get { return GetColumnValue<int?>(Columns.ContractTemplateId); }
			set { SetColumnValue(Columns.ContractTemplateId, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		[DataMember]
		public bool? IsMoni {
			get { return GetColumnValue<bool?>(Columns.IsMoni); }
			set { SetColumnValue(Columns.IsMoni, value); }
		}
		[DataMember]
		public DateTime? ContractSignedDate {
			get { return GetColumnValue<DateTime?>(Columns.ContractSignedDate); }
			set { SetColumnValue(Columns.ContractSignedDate, value); }
		}
		[DataMember]
		public string SalesRepId {
			get { return GetColumnValue<string>(Columns.SalesRepId); }
			set { SetColumnValue(Columns.SalesRepId, value); }
		}
		[DataMember]
		public DateTime? InstallDate {
			get { return GetColumnValue<DateTime?>(Columns.InstallDate); }
			set { SetColumnValue(Columns.InstallDate, value); }
		}
		[DataMember]
		public string TechId {
			get { return GetColumnValue<string>(Columns.TechId); }
			set { SetColumnValue(Columns.TechId, value); }
		}
		[DataMember]
		public DateTime? CancelDate {
			get { return GetColumnValue<DateTime?>(Columns.CancelDate); }
			set { SetColumnValue(Columns.CancelDate, value); }
		}
		[DataMember]
		public string AccountCancelReasonId {
			get { return GetColumnValue<string>(Columns.AccountCancelReasonId); }
			set { SetColumnValue(Columns.AccountCancelReasonId, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return PaymentTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PaymentTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BillingDayColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CurrentMonitoringStationColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PanelTypeIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn PanelItemIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsTakeOverColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsOwnerColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CellPackageItemIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CellServicePackageColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CellularTypeIdColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CellularTypeNameColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CellularVendorColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn SetupFeeColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn SetupFee1stMonthColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn MMRColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn Over3MonthsColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ContractLengthColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ContractIdColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn ContractTemplateIdColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn IsMoniColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn ContractSignedDateColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn SalesRepIdColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn InstallDateColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn TechIdColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn CancelDateColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn AccountCancelReasonIdColumn
		{
			get { return Schema.Columns[27]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string AccountID = @"AccountID";
			public const string PaymentTypeId = @"PaymentTypeId";
			public const string BillingDay = @"BillingDay";
			public const string CurrentMonitoringStation = @"CurrentMonitoringStation";
			public const string PanelTypeId = @"PanelTypeId";
			public const string PanelItemId = @"PanelItemId";
			public const string IsTakeOver = @"IsTakeOver";
			public const string IsOwner = @"IsOwner";
			public const string CellPackageItemId = @"CellPackageItemId";
			public const string CellServicePackage = @"CellServicePackage";
			public const string CellularTypeId = @"CellularTypeId";
			public const string CellularTypeName = @"CellularTypeName";
			public const string CellularVendor = @"CellularVendor";
			public const string SetupFee = @"SetupFee";
			public const string SetupFee1stMonth = @"SetupFee1stMonth";
			public const string MMR = @"MMR";
			public const string Over3Months = @"Over3Months";
			public const string ContractLength = @"ContractLength";
			public const string ContractId = @"ContractId";
			public const string ContractTemplateId = @"ContractTemplateId";
			public const string Email = @"Email";
			public const string IsMoni = @"IsMoni";
			public const string ContractSignedDate = @"ContractSignedDate";
			public const string SalesRepId = @"SalesRepId";
			public const string InstallDate = @"InstallDate";
			public const string TechId = @"TechId";
			public const string CancelDate = @"CancelDate";
			public const string AccountCancelReasonId = @"AccountCancelReasonId";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_DeviceEventsView class.
	/// </summary>
	[DataContract]
	public partial class MS_DeviceEventsViewCollection : ReadOnlyList<MS_DeviceEventsView, MS_DeviceEventsViewCollection>
	{
		public static MS_DeviceEventsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_DeviceEventsViewCollection result = new MS_DeviceEventsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_DeviceEvents view.
	/// </summary>
	[DataContract]
	public partial class MS_DeviceEventsView : ReadOnlyRecord<MS_DeviceEventsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_DeviceEvents", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEventID = new TableSchema.TableColumn(schema);
				colvarEventID.ColumnName = "EventID";
				colvarEventID.DataType = DbType.Int64;
				colvarEventID.MaxLength = 0;
				colvarEventID.AutoIncrement = true;
				colvarEventID.IsNullable = false;
				colvarEventID.IsPrimaryKey = false;
				colvarEventID.IsForeignKey = false;
				colvarEventID.IsReadOnly = false;
				colvarEventID.DefaultSetting = @"";
				colvarEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarDeviceNumber = new TableSchema.TableColumn(schema);
				colvarDeviceNumber.ColumnName = "DeviceNumber";
				colvarDeviceNumber.DataType = DbType.AnsiString;
				colvarDeviceNumber.MaxLength = 20;
				colvarDeviceNumber.AutoIncrement = false;
				colvarDeviceNumber.IsNullable = true;
				colvarDeviceNumber.IsPrimaryKey = false;
				colvarDeviceNumber.IsForeignKey = false;
				colvarDeviceNumber.IsReadOnly = false;
				colvarDeviceNumber.DefaultSetting = @"";
				colvarDeviceNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeviceNumber);

				TableSchema.TableColumn colvarEmergencyType = new TableSchema.TableColumn(schema);
				colvarEmergencyType.ColumnName = "EmergencyType";
				colvarEmergencyType.DataType = DbType.AnsiString;
				colvarEmergencyType.MaxLength = 20;
				colvarEmergencyType.AutoIncrement = false;
				colvarEmergencyType.IsNullable = true;
				colvarEmergencyType.IsPrimaryKey = false;
				colvarEmergencyType.IsForeignKey = false;
				colvarEmergencyType.IsReadOnly = false;
				colvarEmergencyType.DefaultSetting = @"";
				colvarEmergencyType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyType);

				TableSchema.TableColumn colvarURL = new TableSchema.TableColumn(schema);
				colvarURL.ColumnName = "URL";
				colvarURL.DataType = DbType.String;
				colvarURL.MaxLength = 500;
				colvarURL.AutoIncrement = false;
				colvarURL.IsNullable = true;
				colvarURL.IsPrimaryKey = false;
				colvarURL.IsForeignKey = false;
				colvarURL.IsReadOnly = false;
				colvarURL.DefaultSetting = @"";
				colvarURL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarURL);

				TableSchema.TableColumn colvarSuccessfull = new TableSchema.TableColumn(schema);
				colvarSuccessfull.ColumnName = "Successfull";
				colvarSuccessfull.DataType = DbType.Boolean;
				colvarSuccessfull.MaxLength = 0;
				colvarSuccessfull.AutoIncrement = false;
				colvarSuccessfull.IsNullable = false;
				colvarSuccessfull.IsPrimaryKey = false;
				colvarSuccessfull.IsForeignKey = false;
				colvarSuccessfull.IsReadOnly = false;
				colvarSuccessfull.DefaultSetting = @"";
				colvarSuccessfull.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuccessfull);

				TableSchema.TableColumn colvarServerName = new TableSchema.TableColumn(schema);
				colvarServerName.ColumnName = "ServerName";
				colvarServerName.DataType = DbType.String;
				colvarServerName.MaxLength = 50;
				colvarServerName.AutoIncrement = false;
				colvarServerName.IsNullable = false;
				colvarServerName.IsPrimaryKey = false;
				colvarServerName.IsForeignKey = false;
				colvarServerName.IsReadOnly = false;
				colvarServerName.DefaultSetting = @"";
				colvarServerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServerName);

				TableSchema.TableColumn colvarRequest = new TableSchema.TableColumn(schema);
				colvarRequest.ColumnName = "Request";
				colvarRequest.DataType = DbType.String;
				colvarRequest.MaxLength = -1;
				colvarRequest.AutoIncrement = false;
				colvarRequest.IsNullable = false;
				colvarRequest.IsPrimaryKey = false;
				colvarRequest.IsForeignKey = false;
				colvarRequest.IsReadOnly = false;
				colvarRequest.DefaultSetting = @"";
				colvarRequest.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequest);

				TableSchema.TableColumn colvarResponse = new TableSchema.TableColumn(schema);
				colvarResponse.ColumnName = "Response";
				colvarResponse.DataType = DbType.String;
				colvarResponse.MaxLength = -1;
				colvarResponse.AutoIncrement = false;
				colvarResponse.IsNullable = false;
				colvarResponse.IsPrimaryKey = false;
				colvarResponse.IsForeignKey = false;
				colvarResponse.IsReadOnly = false;
				colvarResponse.DefaultSetting = @"";
				colvarResponse.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResponse);

				TableSchema.TableColumn colvarMonitoringStationSuccessfull = new TableSchema.TableColumn(schema);
				colvarMonitoringStationSuccessfull.ColumnName = "MonitoringStationSuccessfull";
				colvarMonitoringStationSuccessfull.DataType = DbType.Boolean;
				colvarMonitoringStationSuccessfull.MaxLength = 0;
				colvarMonitoringStationSuccessfull.AutoIncrement = false;
				colvarMonitoringStationSuccessfull.IsNullable = false;
				colvarMonitoringStationSuccessfull.IsPrimaryKey = false;
				colvarMonitoringStationSuccessfull.IsForeignKey = false;
				colvarMonitoringStationSuccessfull.IsReadOnly = false;
				colvarMonitoringStationSuccessfull.DefaultSetting = @"";
				colvarMonitoringStationSuccessfull.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationSuccessfull);

				TableSchema.TableColumn colvarMonitoringStationResponse = new TableSchema.TableColumn(schema);
				colvarMonitoringStationResponse.ColumnName = "MonitoringStationResponse";
				colvarMonitoringStationResponse.DataType = DbType.String;
				colvarMonitoringStationResponse.MaxLength = 500;
				colvarMonitoringStationResponse.AutoIncrement = false;
				colvarMonitoringStationResponse.IsNullable = true;
				colvarMonitoringStationResponse.IsPrimaryKey = false;
				colvarMonitoringStationResponse.IsForeignKey = false;
				colvarMonitoringStationResponse.IsReadOnly = false;
				colvarMonitoringStationResponse.DefaultSetting = @"";
				colvarMonitoringStationResponse.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationResponse);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_DeviceEvents",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_DeviceEventsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long EventID {
			get { return GetColumnValue<long>(Columns.EventID); }
			set { SetColumnValue(Columns.EventID, value); }
		}
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set { SetColumnValue(Columns.AccountID, value); }
		}
		[DataMember]
		public string DeviceNumber {
			get { return GetColumnValue<string>(Columns.DeviceNumber); }
			set { SetColumnValue(Columns.DeviceNumber, value); }
		}
		[DataMember]
		public string EmergencyType {
			get { return GetColumnValue<string>(Columns.EmergencyType); }
			set { SetColumnValue(Columns.EmergencyType, value); }
		}
		[DataMember]
		public string URL {
			get { return GetColumnValue<string>(Columns.URL); }
			set { SetColumnValue(Columns.URL, value); }
		}
		[DataMember]
		public bool Successfull {
			get { return GetColumnValue<bool>(Columns.Successfull); }
			set { SetColumnValue(Columns.Successfull, value); }
		}
		[DataMember]
		public string ServerName {
			get { return GetColumnValue<string>(Columns.ServerName); }
			set { SetColumnValue(Columns.ServerName, value); }
		}
		[DataMember]
		public string Request {
			get { return GetColumnValue<string>(Columns.Request); }
			set { SetColumnValue(Columns.Request, value); }
		}
		[DataMember]
		public string Response {
			get { return GetColumnValue<string>(Columns.Response); }
			set { SetColumnValue(Columns.Response, value); }
		}
		[DataMember]
		public bool MonitoringStationSuccessfull {
			get { return GetColumnValue<bool>(Columns.MonitoringStationSuccessfull); }
			set { SetColumnValue(Columns.MonitoringStationSuccessfull, value); }
		}
		[DataMember]
		public string MonitoringStationResponse {
			get { return GetColumnValue<string>(Columns.MonitoringStationResponse); }
			set { SetColumnValue(Columns.MonitoringStationResponse, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return EventID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn EventIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DeviceNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn EmergencyTypeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn URLColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SuccessfullColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ServerNameColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn RequestColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ResponseColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn MonitoringStationSuccessfullColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn MonitoringStationResponseColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string EventID = @"EventID";
			public const string AccountID = @"AccountID";
			public const string DeviceNumber = @"DeviceNumber";
			public const string EmergencyType = @"EmergencyType";
			public const string URL = @"URL";
			public const string Successfull = @"Successfull";
			public const string ServerName = @"ServerName";
			public const string Request = @"Request";
			public const string Response = @"Response";
			public const string MonitoringStationSuccessfull = @"MonitoringStationSuccessfull";
			public const string MonitoringStationResponse = @"MonitoringStationResponse";
			public const string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_DispatchAgenciesView class.
	/// </summary>
	[DataContract]
	public partial class MS_DispatchAgenciesViewCollection : ReadOnlyList<MS_DispatchAgenciesView, MS_DispatchAgenciesViewCollection>
	{
		public static MS_DispatchAgenciesViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_DispatchAgenciesViewCollection result = new MS_DispatchAgenciesViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_DispatchAgencies view.
	/// </summary>
	[DataContract]
	public partial class MS_DispatchAgenciesView : ReadOnlyRecord<MS_DispatchAgenciesView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_DispatchAgencies", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDispatchAgencyID = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyID.ColumnName = "DispatchAgencyID";
				colvarDispatchAgencyID.DataType = DbType.Int32;
				colvarDispatchAgencyID.MaxLength = 0;
				colvarDispatchAgencyID.AutoIncrement = false;
				colvarDispatchAgencyID.IsNullable = false;
				colvarDispatchAgencyID.IsPrimaryKey = false;
				colvarDispatchAgencyID.IsForeignKey = false;
				colvarDispatchAgencyID.IsReadOnly = false;
				colvarDispatchAgencyID.DefaultSetting = @"";
				colvarDispatchAgencyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyID);

				TableSchema.TableColumn colvarDispatchAgencyTypeId = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyTypeId.ColumnName = "DispatchAgencyTypeId";
				colvarDispatchAgencyTypeId.DataType = DbType.Byte;
				colvarDispatchAgencyTypeId.MaxLength = 0;
				colvarDispatchAgencyTypeId.AutoIncrement = false;
				colvarDispatchAgencyTypeId.IsNullable = false;
				colvarDispatchAgencyTypeId.IsPrimaryKey = false;
				colvarDispatchAgencyTypeId.IsForeignKey = false;
				colvarDispatchAgencyTypeId.IsReadOnly = false;
				colvarDispatchAgencyTypeId.DefaultSetting = @"";
				colvarDispatchAgencyTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyTypeId);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = false;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"";
				colvarMonitoringStationOSId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarDispatchAgencyOsId = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyOsId.ColumnName = "DispatchAgencyOsId";
				colvarDispatchAgencyOsId.DataType = DbType.Int32;
				colvarDispatchAgencyOsId.MaxLength = 0;
				colvarDispatchAgencyOsId.AutoIncrement = false;
				colvarDispatchAgencyOsId.IsNullable = false;
				colvarDispatchAgencyOsId.IsPrimaryKey = false;
				colvarDispatchAgencyOsId.IsForeignKey = false;
				colvarDispatchAgencyOsId.IsReadOnly = false;
				colvarDispatchAgencyOsId.DefaultSetting = @"";
				colvarDispatchAgencyOsId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyOsId);

				TableSchema.TableColumn colvarDispatchAgencyName = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyName.ColumnName = "DispatchAgencyName";
				colvarDispatchAgencyName.DataType = DbType.String;
				colvarDispatchAgencyName.MaxLength = 100;
				colvarDispatchAgencyName.AutoIncrement = false;
				colvarDispatchAgencyName.IsNullable = false;
				colvarDispatchAgencyName.IsPrimaryKey = false;
				colvarDispatchAgencyName.IsForeignKey = false;
				colvarDispatchAgencyName.IsReadOnly = false;
				colvarDispatchAgencyName.DefaultSetting = @"";
				colvarDispatchAgencyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyName);

				TableSchema.TableColumn colvarMsAgencyNumber = new TableSchema.TableColumn(schema);
				colvarMsAgencyNumber.ColumnName = "MsAgencyNumber";
				colvarMsAgencyNumber.DataType = DbType.AnsiString;
				colvarMsAgencyNumber.MaxLength = 50;
				colvarMsAgencyNumber.AutoIncrement = false;
				colvarMsAgencyNumber.IsNullable = false;
				colvarMsAgencyNumber.IsPrimaryKey = false;
				colvarMsAgencyNumber.IsForeignKey = false;
				colvarMsAgencyNumber.IsReadOnly = false;
				colvarMsAgencyNumber.DefaultSetting = @"";
				colvarMsAgencyNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAgencyNumber);

				TableSchema.TableColumn colvarAddress1 = new TableSchema.TableColumn(schema);
				colvarAddress1.ColumnName = "Address1";
				colvarAddress1.DataType = DbType.String;
				colvarAddress1.MaxLength = 100;
				colvarAddress1.AutoIncrement = false;
				colvarAddress1.IsNullable = true;
				colvarAddress1.IsPrimaryKey = false;
				colvarAddress1.IsForeignKey = false;
				colvarAddress1.IsReadOnly = false;
				colvarAddress1.DefaultSetting = @"";
				colvarAddress1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress1);

				TableSchema.TableColumn colvarAddress2 = new TableSchema.TableColumn(schema);
				colvarAddress2.ColumnName = "Address2";
				colvarAddress2.DataType = DbType.String;
				colvarAddress2.MaxLength = 100;
				colvarAddress2.AutoIncrement = false;
				colvarAddress2.IsNullable = true;
				colvarAddress2.IsPrimaryKey = false;
				colvarAddress2.IsForeignKey = false;
				colvarAddress2.IsReadOnly = false;
				colvarAddress2.DefaultSetting = @"";
				colvarAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "State";
				colvarState.DataType = DbType.AnsiString;
				colvarState.MaxLength = 2;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = true;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				colvarState.DefaultSetting = @"";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.String;
				colvarZipCode.MaxLength = 10;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = true;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarPhone1 = new TableSchema.TableColumn(schema);
				colvarPhone1.ColumnName = "Phone1";
				colvarPhone1.DataType = DbType.String;
				colvarPhone1.MaxLength = 15;
				colvarPhone1.AutoIncrement = false;
				colvarPhone1.IsNullable = true;
				colvarPhone1.IsPrimaryKey = false;
				colvarPhone1.IsForeignKey = false;
				colvarPhone1.IsReadOnly = false;
				colvarPhone1.DefaultSetting = @"";
				colvarPhone1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone1);

				TableSchema.TableColumn colvarPhone2 = new TableSchema.TableColumn(schema);
				colvarPhone2.ColumnName = "Phone2";
				colvarPhone2.DataType = DbType.String;
				colvarPhone2.MaxLength = 15;
				colvarPhone2.AutoIncrement = false;
				colvarPhone2.IsNullable = true;
				colvarPhone2.IsPrimaryKey = false;
				colvarPhone2.IsForeignKey = false;
				colvarPhone2.IsReadOnly = false;
				colvarPhone2.DefaultSetting = @"";
				colvarPhone2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone2);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarDispatchAgencyType = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyType.ColumnName = "DispatchAgencyType";
				colvarDispatchAgencyType.DataType = DbType.AnsiString;
				colvarDispatchAgencyType.MaxLength = 50;
				colvarDispatchAgencyType.AutoIncrement = false;
				colvarDispatchAgencyType.IsNullable = false;
				colvarDispatchAgencyType.IsPrimaryKey = false;
				colvarDispatchAgencyType.IsForeignKey = false;
				colvarDispatchAgencyType.IsReadOnly = false;
				colvarDispatchAgencyType.DefaultSetting = @"";
				colvarDispatchAgencyType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_DispatchAgencies",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_DispatchAgenciesView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int DispatchAgencyID {
			get { return GetColumnValue<int>(Columns.DispatchAgencyID); }
			set { SetColumnValue(Columns.DispatchAgencyID, value); }
		}
		[DataMember]
		public byte DispatchAgencyTypeId {
			get { return GetColumnValue<byte>(Columns.DispatchAgencyTypeId); }
			set { SetColumnValue(Columns.DispatchAgencyTypeId, value); }
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set { SetColumnValue(Columns.MonitoringStationOSId, value); }
		}
		[DataMember]
		public int DispatchAgencyOsId {
			get { return GetColumnValue<int>(Columns.DispatchAgencyOsId); }
			set { SetColumnValue(Columns.DispatchAgencyOsId, value); }
		}
		[DataMember]
		public string DispatchAgencyName {
			get { return GetColumnValue<string>(Columns.DispatchAgencyName); }
			set { SetColumnValue(Columns.DispatchAgencyName, value); }
		}
		[DataMember]
		public string MsAgencyNumber {
			get { return GetColumnValue<string>(Columns.MsAgencyNumber); }
			set { SetColumnValue(Columns.MsAgencyNumber, value); }
		}
		[DataMember]
		public string Address1 {
			get { return GetColumnValue<string>(Columns.Address1); }
			set { SetColumnValue(Columns.Address1, value); }
		}
		[DataMember]
		public string Address2 {
			get { return GetColumnValue<string>(Columns.Address2); }
			set { SetColumnValue(Columns.Address2, value); }
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		[DataMember]
		public string State {
			get { return GetColumnValue<string>(Columns.State); }
			set { SetColumnValue(Columns.State, value); }
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set { SetColumnValue(Columns.ZipCode, value); }
		}
		[DataMember]
		public string Phone1 {
			get { return GetColumnValue<string>(Columns.Phone1); }
			set { SetColumnValue(Columns.Phone1, value); }
		}
		[DataMember]
		public string Phone2 {
			get { return GetColumnValue<string>(Columns.Phone2); }
			set { SetColumnValue(Columns.Phone2, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		[DataMember]
		public string DispatchAgencyType {
			get { return GetColumnValue<string>(Columns.DispatchAgencyType); }
			set { SetColumnValue(Columns.DispatchAgencyType, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return DispatchAgencyID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn DispatchAgencyIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DispatchAgencyTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DispatchAgencyOsIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DispatchAgencyNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MsAgencyNumberColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn Address1Column
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn Address2Column
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn StateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn Phone1Column
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn Phone2Column
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn DispatchAgencyTypeColumn
		{
			get { return Schema.Columns[19]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string DispatchAgencyID = @"DispatchAgencyID";
			public const string DispatchAgencyTypeId = @"DispatchAgencyTypeId";
			public const string MonitoringStationOSId = @"MonitoringStationOSId";
			public const string DispatchAgencyOsId = @"DispatchAgencyOsId";
			public const string DispatchAgencyName = @"DispatchAgencyName";
			public const string MsAgencyNumber = @"MsAgencyNumber";
			public const string Address1 = @"Address1";
			public const string Address2 = @"Address2";
			public const string City = @"City";
			public const string State = @"State";
			public const string ZipCode = @"ZipCode";
			public const string Phone1 = @"Phone1";
			public const string Phone2 = @"Phone2";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
			public const string CreatedBy = @"CreatedBy";
			public const string CreatedOn = @"CreatedOn";
			public const string ModifiedBy = @"ModifiedBy";
			public const string ModifiedOn = @"ModifiedOn";
			public const string DispatchAgencyType = @"DispatchAgencyType";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentAccountZoneTypeEventsView class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentAccountZoneTypeEventsViewCollection : ReadOnlyList<MS_EquipmentAccountZoneTypeEventsView, MS_EquipmentAccountZoneTypeEventsViewCollection>
	{
		public static MS_EquipmentAccountZoneTypeEventsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentAccountZoneTypeEventsViewCollection result = new MS_EquipmentAccountZoneTypeEventsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_EquipmentAccountZoneTypeEvents view.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentAccountZoneTypeEventsView : ReadOnlyRecord<MS_EquipmentAccountZoneTypeEventsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_EquipmentAccountZoneTypeEvents", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountEventID = new TableSchema.TableColumn(schema);
				colvarAccountEventID.ColumnName = "AccountEventID";
				colvarAccountEventID.DataType = DbType.Int32;
				colvarAccountEventID.MaxLength = 0;
				colvarAccountEventID.AutoIncrement = false;
				colvarAccountEventID.IsNullable = false;
				colvarAccountEventID.IsPrimaryKey = false;
				colvarAccountEventID.IsForeignKey = false;
				colvarAccountEventID.IsReadOnly = false;
				colvarAccountEventID.DefaultSetting = @"";
				colvarAccountEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountEventID);

				TableSchema.TableColumn colvarEquipmentAccountZoneTypeId = new TableSchema.TableColumn(schema);
				colvarEquipmentAccountZoneTypeId.ColumnName = "EquipmentAccountZoneTypeId";
				colvarEquipmentAccountZoneTypeId.DataType = DbType.Int32;
				colvarEquipmentAccountZoneTypeId.MaxLength = 0;
				colvarEquipmentAccountZoneTypeId.AutoIncrement = false;
				colvarEquipmentAccountZoneTypeId.IsNullable = false;
				colvarEquipmentAccountZoneTypeId.IsPrimaryKey = false;
				colvarEquipmentAccountZoneTypeId.IsForeignKey = false;
				colvarEquipmentAccountZoneTypeId.IsReadOnly = false;
				colvarEquipmentAccountZoneTypeId.DefaultSetting = @"";
				colvarEquipmentAccountZoneTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentAccountZoneTypeId);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = false;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"";
				colvarMonitoringStationOSId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarEventID = new TableSchema.TableColumn(schema);
				colvarEventID.ColumnName = "EventID";
				colvarEventID.DataType = DbType.Int32;
				colvarEventID.MaxLength = 0;
				colvarEventID.AutoIncrement = false;
				colvarEventID.IsNullable = true;
				colvarEventID.IsPrimaryKey = false;
				colvarEventID.IsForeignKey = false;
				colvarEventID.IsReadOnly = false;
				colvarEventID.DefaultSetting = @"";
				colvarEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsDefault = new TableSchema.TableColumn(schema);
				colvarIsDefault.ColumnName = "IsDefault";
				colvarIsDefault.DataType = DbType.Boolean;
				colvarIsDefault.MaxLength = 0;
				colvarIsDefault.AutoIncrement = false;
				colvarIsDefault.IsNullable = true;
				colvarIsDefault.IsPrimaryKey = false;
				colvarIsDefault.IsForeignKey = false;
				colvarIsDefault.IsReadOnly = false;
				colvarIsDefault.DefaultSetting = @"";
				colvarIsDefault.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDefault);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_EquipmentAccountZoneTypeEvents",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_EquipmentAccountZoneTypeEventsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int AccountEventID {
			get { return GetColumnValue<int>(Columns.AccountEventID); }
			set { SetColumnValue(Columns.AccountEventID, value); }
		}
		[DataMember]
		public int EquipmentAccountZoneTypeId {
			get { return GetColumnValue<int>(Columns.EquipmentAccountZoneTypeId); }
			set { SetColumnValue(Columns.EquipmentAccountZoneTypeId, value); }
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set { SetColumnValue(Columns.MonitoringStationOSId, value); }
		}
		[DataMember]
		public int? EventID {
			get { return GetColumnValue<int?>(Columns.EventID); }
			set { SetColumnValue(Columns.EventID, value); }
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		[DataMember]
		public bool? IsDefault {
			get { return GetColumnValue<bool?>(Columns.IsDefault); }
			set { SetColumnValue(Columns.IsDefault, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return AccountEventID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountEventIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentAccountZoneTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn EventIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDefaultColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string AccountEventID = @"AccountEventID";
			public const string EquipmentAccountZoneTypeId = @"EquipmentAccountZoneTypeId";
			public const string MonitoringStationOSId = @"MonitoringStationOSId";
			public const string EventID = @"EventID";
			public const string Description = @"Description";
			public const string IsDefault = @"IsDefault";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentAccountZoneTypesView class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentAccountZoneTypesViewCollection : ReadOnlyList<MS_EquipmentAccountZoneTypesView, MS_EquipmentAccountZoneTypesViewCollection>
	{
		public static MS_EquipmentAccountZoneTypesViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentAccountZoneTypesViewCollection result = new MS_EquipmentAccountZoneTypesViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_EquipmentAccountZoneTypes view.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentAccountZoneTypesView : ReadOnlyRecord<MS_EquipmentAccountZoneTypesView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_EquipmentAccountZoneTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentAccountZoneTypeID = new TableSchema.TableColumn(schema);
				colvarEquipmentAccountZoneTypeID.ColumnName = "EquipmentAccountZoneTypeID";
				colvarEquipmentAccountZoneTypeID.DataType = DbType.Int32;
				colvarEquipmentAccountZoneTypeID.MaxLength = 0;
				colvarEquipmentAccountZoneTypeID.AutoIncrement = false;
				colvarEquipmentAccountZoneTypeID.IsNullable = false;
				colvarEquipmentAccountZoneTypeID.IsPrimaryKey = false;
				colvarEquipmentAccountZoneTypeID.IsForeignKey = false;
				colvarEquipmentAccountZoneTypeID.IsReadOnly = false;
				colvarEquipmentAccountZoneTypeID.DefaultSetting = @"";
				colvarEquipmentAccountZoneTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentAccountZoneTypeID);

				TableSchema.TableColumn colvarEquipmentID = new TableSchema.TableColumn(schema);
				colvarEquipmentID.ColumnName = "EquipmentID";
				colvarEquipmentID.DataType = DbType.AnsiString;
				colvarEquipmentID.MaxLength = 50;
				colvarEquipmentID.AutoIncrement = false;
				colvarEquipmentID.IsNullable = false;
				colvarEquipmentID.IsPrimaryKey = false;
				colvarEquipmentID.IsForeignKey = false;
				colvarEquipmentID.IsReadOnly = false;
				colvarEquipmentID.DefaultSetting = @"";
				colvarEquipmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentID);

				TableSchema.TableColumn colvarAccountZoneTypeId = new TableSchema.TableColumn(schema);
				colvarAccountZoneTypeId.ColumnName = "AccountZoneTypeId";
				colvarAccountZoneTypeId.DataType = DbType.AnsiString;
				colvarAccountZoneTypeId.MaxLength = 10;
				colvarAccountZoneTypeId.AutoIncrement = false;
				colvarAccountZoneTypeId.IsNullable = false;
				colvarAccountZoneTypeId.IsPrimaryKey = false;
				colvarAccountZoneTypeId.IsForeignKey = false;
				colvarAccountZoneTypeId.IsReadOnly = false;
				colvarAccountZoneTypeId.DefaultSetting = @"";
				colvarAccountZoneTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountZoneTypeId);

				TableSchema.TableColumn colvarAccountZoneType = new TableSchema.TableColumn(schema);
				colvarAccountZoneType.ColumnName = "AccountZoneType";
				colvarAccountZoneType.DataType = DbType.AnsiString;
				colvarAccountZoneType.MaxLength = 50;
				colvarAccountZoneType.AutoIncrement = false;
				colvarAccountZoneType.IsNullable = false;
				colvarAccountZoneType.IsPrimaryKey = false;
				colvarAccountZoneType.IsForeignKey = false;
				colvarAccountZoneType.IsReadOnly = false;
				colvarAccountZoneType.DefaultSetting = @"";
				colvarAccountZoneType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountZoneType);

				TableSchema.TableColumn colvarIsDefault = new TableSchema.TableColumn(schema);
				colvarIsDefault.ColumnName = "IsDefault";
				colvarIsDefault.DataType = DbType.Boolean;
				colvarIsDefault.MaxLength = 0;
				colvarIsDefault.AutoIncrement = false;
				colvarIsDefault.IsNullable = true;
				colvarIsDefault.IsPrimaryKey = false;
				colvarIsDefault.IsForeignKey = false;
				colvarIsDefault.IsReadOnly = false;
				colvarIsDefault.DefaultSetting = @"";
				colvarIsDefault.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDefault);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_EquipmentAccountZoneTypes",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_EquipmentAccountZoneTypesView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int EquipmentAccountZoneTypeID {
			get { return GetColumnValue<int>(Columns.EquipmentAccountZoneTypeID); }
			set { SetColumnValue(Columns.EquipmentAccountZoneTypeID, value); }
		}
		[DataMember]
		public string EquipmentID {
			get { return GetColumnValue<string>(Columns.EquipmentID); }
			set { SetColumnValue(Columns.EquipmentID, value); }
		}
		[DataMember]
		public string AccountZoneTypeId {
			get { return GetColumnValue<string>(Columns.AccountZoneTypeId); }
			set { SetColumnValue(Columns.AccountZoneTypeId, value); }
		}
		[DataMember]
		public string AccountZoneType {
			get { return GetColumnValue<string>(Columns.AccountZoneType); }
			set { SetColumnValue(Columns.AccountZoneType, value); }
		}
		[DataMember]
		public bool? IsDefault {
			get { return GetColumnValue<bool?>(Columns.IsDefault); }
			set { SetColumnValue(Columns.IsDefault, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return EquipmentID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentAccountZoneTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountZoneTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountZoneTypeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDefaultColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string EquipmentAccountZoneTypeID = @"EquipmentAccountZoneTypeID";
			public const string EquipmentID = @"EquipmentID";
			public const string AccountZoneTypeId = @"AccountZoneTypeId";
			public const string AccountZoneType = @"AccountZoneType";
			public const string IsDefault = @"IsDefault";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentLocationsView class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentLocationsViewCollection : ReadOnlyList<MS_EquipmentLocationsView, MS_EquipmentLocationsViewCollection>
	{
		public static MS_EquipmentLocationsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentLocationsViewCollection result = new MS_EquipmentLocationsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_EquipmentLocations view.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentLocationsView : ReadOnlyRecord<MS_EquipmentLocationsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_EquipmentLocations", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentLocationID = new TableSchema.TableColumn(schema);
				colvarEquipmentLocationID.ColumnName = "EquipmentLocationID";
				colvarEquipmentLocationID.DataType = DbType.Int32;
				colvarEquipmentLocationID.MaxLength = 0;
				colvarEquipmentLocationID.AutoIncrement = true;
				colvarEquipmentLocationID.IsNullable = false;
				colvarEquipmentLocationID.IsPrimaryKey = false;
				colvarEquipmentLocationID.IsForeignKey = false;
				colvarEquipmentLocationID.IsReadOnly = false;
				colvarEquipmentLocationID.DefaultSetting = @"";
				colvarEquipmentLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentLocationID);

				TableSchema.TableColumn colvarEquipmentLocationDesc = new TableSchema.TableColumn(schema);
				colvarEquipmentLocationDesc.ColumnName = "EquipmentLocationDesc";
				colvarEquipmentLocationDesc.DataType = DbType.String;
				colvarEquipmentLocationDesc.MaxLength = 50;
				colvarEquipmentLocationDesc.AutoIncrement = false;
				colvarEquipmentLocationDesc.IsNullable = false;
				colvarEquipmentLocationDesc.IsPrimaryKey = false;
				colvarEquipmentLocationDesc.IsForeignKey = false;
				colvarEquipmentLocationDesc.IsReadOnly = false;
				colvarEquipmentLocationDesc.DefaultSetting = @"";
				colvarEquipmentLocationDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentLocationDesc);

				TableSchema.TableColumn colvarMonitronicsCode = new TableSchema.TableColumn(schema);
				colvarMonitronicsCode.ColumnName = "MonitronicsCode";
				colvarMonitronicsCode.DataType = DbType.AnsiString;
				colvarMonitronicsCode.MaxLength = 10;
				colvarMonitronicsCode.AutoIncrement = false;
				colvarMonitronicsCode.IsNullable = true;
				colvarMonitronicsCode.IsPrimaryKey = false;
				colvarMonitronicsCode.IsForeignKey = false;
				colvarMonitronicsCode.IsReadOnly = false;
				colvarMonitronicsCode.DefaultSetting = @"";
				colvarMonitronicsCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitronicsCode);

				TableSchema.TableColumn colvarCriticomCode = new TableSchema.TableColumn(schema);
				colvarCriticomCode.ColumnName = "CriticomCode";
				colvarCriticomCode.DataType = DbType.AnsiString;
				colvarCriticomCode.MaxLength = 10;
				colvarCriticomCode.AutoIncrement = false;
				colvarCriticomCode.IsNullable = true;
				colvarCriticomCode.IsPrimaryKey = false;
				colvarCriticomCode.IsForeignKey = false;
				colvarCriticomCode.IsReadOnly = false;
				colvarCriticomCode.DefaultSetting = @"";
				colvarCriticomCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCriticomCode);

				TableSchema.TableColumn colvarAvantGuardCode = new TableSchema.TableColumn(schema);
				colvarAvantGuardCode.ColumnName = "AvantGuardCode";
				colvarAvantGuardCode.DataType = DbType.AnsiString;
				colvarAvantGuardCode.MaxLength = 10;
				colvarAvantGuardCode.AutoIncrement = false;
				colvarAvantGuardCode.IsNullable = true;
				colvarAvantGuardCode.IsPrimaryKey = false;
				colvarAvantGuardCode.IsForeignKey = false;
				colvarAvantGuardCode.IsReadOnly = false;
				colvarAvantGuardCode.DefaultSetting = @"";
				colvarAvantGuardCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAvantGuardCode);

				TableSchema.TableColumn colvarLocationCode = new TableSchema.TableColumn(schema);
				colvarLocationCode.ColumnName = "LocationCode";
				colvarLocationCode.DataType = DbType.AnsiString;
				colvarLocationCode.MaxLength = 10;
				colvarLocationCode.AutoIncrement = false;
				colvarLocationCode.IsNullable = true;
				colvarLocationCode.IsPrimaryKey = false;
				colvarLocationCode.IsForeignKey = false;
				colvarLocationCode.IsReadOnly = false;
				colvarLocationCode.DefaultSetting = @"";
				colvarLocationCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationCode);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_EquipmentLocations",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_EquipmentLocationsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int EquipmentLocationID {
			get { return GetColumnValue<int>(Columns.EquipmentLocationID); }
			set { SetColumnValue(Columns.EquipmentLocationID, value); }
		}
		[DataMember]
		public string EquipmentLocationDesc {
			get { return GetColumnValue<string>(Columns.EquipmentLocationDesc); }
			set { SetColumnValue(Columns.EquipmentLocationDesc, value); }
		}
		[DataMember]
		public string MonitronicsCode {
			get { return GetColumnValue<string>(Columns.MonitronicsCode); }
			set { SetColumnValue(Columns.MonitronicsCode, value); }
		}
		[DataMember]
		public string CriticomCode {
			get { return GetColumnValue<string>(Columns.CriticomCode); }
			set { SetColumnValue(Columns.CriticomCode, value); }
		}
		[DataMember]
		public string AvantGuardCode {
			get { return GetColumnValue<string>(Columns.AvantGuardCode); }
			set { SetColumnValue(Columns.AvantGuardCode, value); }
		}
		[DataMember]
		public string LocationCode {
			get { return GetColumnValue<string>(Columns.LocationCode); }
			set { SetColumnValue(Columns.LocationCode, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return EquipmentLocationDesc;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentLocationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentLocationDescColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitronicsCodeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CriticomCodeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AvantGuardCodeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn LocationCodeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string EquipmentLocationID = @"EquipmentLocationID";
			public const string EquipmentLocationDesc = @"EquipmentLocationDesc";
			public const string MonitronicsCode = @"MonitronicsCode";
			public const string CriticomCode = @"CriticomCode";
			public const string AvantGuardCode = @"AvantGuardCode";
			public const string LocationCode = @"LocationCode";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentsView class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentsViewCollection : ReadOnlyList<MS_EquipmentsView, MS_EquipmentsViewCollection>
	{
		public static MS_EquipmentsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentsViewCollection result = new MS_EquipmentsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_Equipments view.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentsView : ReadOnlyRecord<MS_EquipmentsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_Equipments", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentID = new TableSchema.TableColumn(schema);
				colvarEquipmentID.ColumnName = "EquipmentID";
				colvarEquipmentID.DataType = DbType.AnsiString;
				colvarEquipmentID.MaxLength = 50;
				colvarEquipmentID.AutoIncrement = false;
				colvarEquipmentID.IsNullable = false;
				colvarEquipmentID.IsPrimaryKey = false;
				colvarEquipmentID.IsForeignKey = false;
				colvarEquipmentID.IsReadOnly = false;
				colvarEquipmentID.DefaultSetting = @"";
				colvarEquipmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentID);

				TableSchema.TableColumn colvarEquipmentMonitoredTypeId = new TableSchema.TableColumn(schema);
				colvarEquipmentMonitoredTypeId.ColumnName = "EquipmentMonitoredTypeId";
				colvarEquipmentMonitoredTypeId.DataType = DbType.Int32;
				colvarEquipmentMonitoredTypeId.MaxLength = 0;
				colvarEquipmentMonitoredTypeId.AutoIncrement = false;
				colvarEquipmentMonitoredTypeId.IsNullable = true;
				colvarEquipmentMonitoredTypeId.IsPrimaryKey = false;
				colvarEquipmentMonitoredTypeId.IsForeignKey = false;
				colvarEquipmentMonitoredTypeId.IsReadOnly = false;
				colvarEquipmentMonitoredTypeId.DefaultSetting = @"";
				colvarEquipmentMonitoredTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentMonitoredTypeId);

				TableSchema.TableColumn colvarEquipmentTypeId = new TableSchema.TableColumn(schema);
				colvarEquipmentTypeId.ColumnName = "EquipmentTypeId";
				colvarEquipmentTypeId.DataType = DbType.Int32;
				colvarEquipmentTypeId.MaxLength = 0;
				colvarEquipmentTypeId.AutoIncrement = false;
				colvarEquipmentTypeId.IsNullable = true;
				colvarEquipmentTypeId.IsPrimaryKey = false;
				colvarEquipmentTypeId.IsForeignKey = false;
				colvarEquipmentTypeId.IsReadOnly = false;
				colvarEquipmentTypeId.DefaultSetting = @"";
				colvarEquipmentTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentTypeId);

				TableSchema.TableColumn colvarAccountZoneTypeId = new TableSchema.TableColumn(schema);
				colvarAccountZoneTypeId.ColumnName = "AccountZoneTypeId";
				colvarAccountZoneTypeId.DataType = DbType.AnsiString;
				colvarAccountZoneTypeId.MaxLength = 10;
				colvarAccountZoneTypeId.AutoIncrement = false;
				colvarAccountZoneTypeId.IsNullable = false;
				colvarAccountZoneTypeId.IsPrimaryKey = false;
				colvarAccountZoneTypeId.IsForeignKey = false;
				colvarAccountZoneTypeId.IsReadOnly = false;
				colvarAccountZoneTypeId.DefaultSetting = @"";
				colvarAccountZoneTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountZoneTypeId);

				TableSchema.TableColumn colvarEquipmentPanelTypeId = new TableSchema.TableColumn(schema);
				colvarEquipmentPanelTypeId.ColumnName = "EquipmentPanelTypeId";
				colvarEquipmentPanelTypeId.DataType = DbType.Int32;
				colvarEquipmentPanelTypeId.MaxLength = 0;
				colvarEquipmentPanelTypeId.AutoIncrement = false;
				colvarEquipmentPanelTypeId.IsNullable = true;
				colvarEquipmentPanelTypeId.IsPrimaryKey = false;
				colvarEquipmentPanelTypeId.IsForeignKey = false;
				colvarEquipmentPanelTypeId.IsReadOnly = false;
				colvarEquipmentPanelTypeId.DefaultSetting = @"";
				colvarEquipmentPanelTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentPanelTypeId);

				TableSchema.TableColumn colvarGPItemNmbr = new TableSchema.TableColumn(schema);
				colvarGPItemNmbr.ColumnName = "GPItemNmbr";
				colvarGPItemNmbr.DataType = DbType.String;
				colvarGPItemNmbr.MaxLength = 31;
				colvarGPItemNmbr.AutoIncrement = false;
				colvarGPItemNmbr.IsNullable = false;
				colvarGPItemNmbr.IsPrimaryKey = false;
				colvarGPItemNmbr.IsForeignKey = false;
				colvarGPItemNmbr.IsReadOnly = false;
				colvarGPItemNmbr.DefaultSetting = @"";
				colvarGPItemNmbr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPItemNmbr);

				TableSchema.TableColumn colvarItemDescription = new TableSchema.TableColumn(schema);
				colvarItemDescription.ColumnName = "ItemDescription";
				colvarItemDescription.DataType = DbType.String;
				colvarItemDescription.MaxLength = 101;
				colvarItemDescription.AutoIncrement = false;
				colvarItemDescription.IsNullable = false;
				colvarItemDescription.IsPrimaryKey = false;
				colvarItemDescription.IsForeignKey = false;
				colvarItemDescription.IsReadOnly = false;
				colvarItemDescription.DefaultSetting = @"";
				colvarItemDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemDescription);

				TableSchema.TableColumn colvarShortName = new TableSchema.TableColumn(schema);
				colvarShortName.ColumnName = "ShortName";
				colvarShortName.DataType = DbType.String;
				colvarShortName.MaxLength = 20;
				colvarShortName.AutoIncrement = false;
				colvarShortName.IsNullable = true;
				colvarShortName.IsPrimaryKey = false;
				colvarShortName.IsForeignKey = false;
				colvarShortName.IsReadOnly = false;
				colvarShortName.DefaultSetting = @"";
				colvarShortName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortName);

				TableSchema.TableColumn colvarGenDescription = new TableSchema.TableColumn(schema);
				colvarGenDescription.ColumnName = "GenDescription";
				colvarGenDescription.DataType = DbType.String;
				colvarGenDescription.MaxLength = 150;
				colvarGenDescription.AutoIncrement = false;
				colvarGenDescription.IsNullable = true;
				colvarGenDescription.IsPrimaryKey = false;
				colvarGenDescription.IsForeignKey = false;
				colvarGenDescription.IsReadOnly = false;
				colvarGenDescription.DefaultSetting = @"";
				colvarGenDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGenDescription);

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 136;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = false;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = false;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarShowInInventory = new TableSchema.TableColumn(schema);
				colvarShowInInventory.ColumnName = "ShowInInventory";
				colvarShowInInventory.DataType = DbType.Boolean;
				colvarShowInInventory.MaxLength = 0;
				colvarShowInInventory.AutoIncrement = false;
				colvarShowInInventory.IsNullable = false;
				colvarShowInInventory.IsPrimaryKey = false;
				colvarShowInInventory.IsForeignKey = false;
				colvarShowInInventory.IsReadOnly = false;
				colvarShowInInventory.DefaultSetting = @"";
				colvarShowInInventory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShowInInventory);

				TableSchema.TableColumn colvarPoints = new TableSchema.TableColumn(schema);
				colvarPoints.ColumnName = "Points";
				colvarPoints.DataType = DbType.Byte;
				colvarPoints.MaxLength = 0;
				colvarPoints.AutoIncrement = false;
				colvarPoints.IsNullable = false;
				colvarPoints.IsPrimaryKey = false;
				colvarPoints.IsForeignKey = false;
				colvarPoints.IsReadOnly = false;
				colvarPoints.DefaultSetting = @"";
				colvarPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPoints);

				TableSchema.TableColumn colvarActualPoints = new TableSchema.TableColumn(schema);
				colvarActualPoints.ColumnName = "ActualPoints";
				colvarActualPoints.DataType = DbType.Double;
				colvarActualPoints.MaxLength = 0;
				colvarActualPoints.AutoIncrement = false;
				colvarActualPoints.IsNullable = true;
				colvarActualPoints.IsPrimaryKey = false;
				colvarActualPoints.IsForeignKey = false;
				colvarActualPoints.IsReadOnly = false;
				colvarActualPoints.DefaultSetting = @"";
				colvarActualPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualPoints);

				TableSchema.TableColumn colvarRetailPrice = new TableSchema.TableColumn(schema);
				colvarRetailPrice.ColumnName = "RetailPrice";
				colvarRetailPrice.DataType = DbType.Currency;
				colvarRetailPrice.MaxLength = 0;
				colvarRetailPrice.AutoIncrement = false;
				colvarRetailPrice.IsNullable = false;
				colvarRetailPrice.IsPrimaryKey = false;
				colvarRetailPrice.IsForeignKey = false;
				colvarRetailPrice.IsReadOnly = false;
				colvarRetailPrice.DefaultSetting = @"";
				colvarRetailPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRetailPrice);

				TableSchema.TableColumn colvarIsCellUnit = new TableSchema.TableColumn(schema);
				colvarIsCellUnit.ColumnName = "IsCellUnit";
				colvarIsCellUnit.DataType = DbType.Boolean;
				colvarIsCellUnit.MaxLength = 0;
				colvarIsCellUnit.AutoIncrement = false;
				colvarIsCellUnit.IsNullable = true;
				colvarIsCellUnit.IsPrimaryKey = false;
				colvarIsCellUnit.IsForeignKey = false;
				colvarIsCellUnit.IsReadOnly = false;
				colvarIsCellUnit.DefaultSetting = @"";
				colvarIsCellUnit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCellUnit);

				TableSchema.TableColumn colvarAuditDay = new TableSchema.TableColumn(schema);
				colvarAuditDay.ColumnName = "AuditDay";
				colvarAuditDay.DataType = DbType.Int32;
				colvarAuditDay.MaxLength = 0;
				colvarAuditDay.AutoIncrement = false;
				colvarAuditDay.IsNullable = true;
				colvarAuditDay.IsPrimaryKey = false;
				colvarAuditDay.IsForeignKey = false;
				colvarAuditDay.IsReadOnly = false;
				colvarAuditDay.DefaultSetting = @"";
				colvarAuditDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuditDay);

				TableSchema.TableColumn colvarEmployeeCost = new TableSchema.TableColumn(schema);
				colvarEmployeeCost.ColumnName = "EmployeeCost";
				colvarEmployeeCost.DataType = DbType.Currency;
				colvarEmployeeCost.MaxLength = 0;
				colvarEmployeeCost.AutoIncrement = false;
				colvarEmployeeCost.IsNullable = true;
				colvarEmployeeCost.IsPrimaryKey = false;
				colvarEmployeeCost.IsForeignKey = false;
				colvarEmployeeCost.IsReadOnly = false;
				colvarEmployeeCost.DefaultSetting = @"";
				colvarEmployeeCost.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmployeeCost);

				TableSchema.TableColumn colvarDefaultTechStockLevel = new TableSchema.TableColumn(schema);
				colvarDefaultTechStockLevel.ColumnName = "DefaultTechStockLevel";
				colvarDefaultTechStockLevel.DataType = DbType.Int32;
				colvarDefaultTechStockLevel.MaxLength = 0;
				colvarDefaultTechStockLevel.AutoIncrement = false;
				colvarDefaultTechStockLevel.IsNullable = true;
				colvarDefaultTechStockLevel.IsPrimaryKey = false;
				colvarDefaultTechStockLevel.IsForeignKey = false;
				colvarDefaultTechStockLevel.IsReadOnly = false;
				colvarDefaultTechStockLevel.DefaultSetting = @"";
				colvarDefaultTechStockLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultTechStockLevel);

				TableSchema.TableColumn colvarIsHighlighted = new TableSchema.TableColumn(schema);
				colvarIsHighlighted.ColumnName = "IsHighlighted";
				colvarIsHighlighted.DataType = DbType.Boolean;
				colvarIsHighlighted.MaxLength = 0;
				colvarIsHighlighted.AutoIncrement = false;
				colvarIsHighlighted.IsNullable = false;
				colvarIsHighlighted.IsPrimaryKey = false;
				colvarIsHighlighted.IsForeignKey = false;
				colvarIsHighlighted.IsReadOnly = false;
				colvarIsHighlighted.DefaultSetting = @"";
				colvarIsHighlighted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHighlighted);

				TableSchema.TableColumn colvarIsWireless = new TableSchema.TableColumn(schema);
				colvarIsWireless.ColumnName = "IsWireless";
				colvarIsWireless.DataType = DbType.Boolean;
				colvarIsWireless.MaxLength = 0;
				colvarIsWireless.AutoIncrement = false;
				colvarIsWireless.IsNullable = false;
				colvarIsWireless.IsPrimaryKey = false;
				colvarIsWireless.IsForeignKey = false;
				colvarIsWireless.IsReadOnly = false;
				colvarIsWireless.DefaultSetting = @"";
				colvarIsWireless.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsWireless);

				TableSchema.TableColumn colvarIsExisting = new TableSchema.TableColumn(schema);
				colvarIsExisting.ColumnName = "IsExisting";
				colvarIsExisting.DataType = DbType.Boolean;
				colvarIsExisting.MaxLength = 0;
				colvarIsExisting.AutoIncrement = false;
				colvarIsExisting.IsNullable = false;
				colvarIsExisting.IsPrimaryKey = false;
				colvarIsExisting.IsForeignKey = false;
				colvarIsExisting.IsReadOnly = false;
				colvarIsExisting.DefaultSetting = @"";
				colvarIsExisting.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExisting);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_Equipments",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_EquipmentsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public string EquipmentID {
			get { return GetColumnValue<string>(Columns.EquipmentID); }
			set { SetColumnValue(Columns.EquipmentID, value); }
		}
		[DataMember]
		public int? EquipmentMonitoredTypeId {
			get { return GetColumnValue<int?>(Columns.EquipmentMonitoredTypeId); }
			set { SetColumnValue(Columns.EquipmentMonitoredTypeId, value); }
		}
		[DataMember]
		public int? EquipmentTypeId {
			get { return GetColumnValue<int?>(Columns.EquipmentTypeId); }
			set { SetColumnValue(Columns.EquipmentTypeId, value); }
		}
		[DataMember]
		public string AccountZoneTypeId {
			get { return GetColumnValue<string>(Columns.AccountZoneTypeId); }
			set { SetColumnValue(Columns.AccountZoneTypeId, value); }
		}
		[DataMember]
		public int? EquipmentPanelTypeId {
			get { return GetColumnValue<int?>(Columns.EquipmentPanelTypeId); }
			set { SetColumnValue(Columns.EquipmentPanelTypeId, value); }
		}
		[DataMember]
		public string GPItemNmbr {
			get { return GetColumnValue<string>(Columns.GPItemNmbr); }
			set { SetColumnValue(Columns.GPItemNmbr, value); }
		}
		[DataMember]
		public string ItemDescription {
			get { return GetColumnValue<string>(Columns.ItemDescription); }
			set { SetColumnValue(Columns.ItemDescription, value); }
		}
		[DataMember]
		public string ShortName {
			get { return GetColumnValue<string>(Columns.ShortName); }
			set { SetColumnValue(Columns.ShortName, value); }
		}
		[DataMember]
		public string GenDescription {
			get { return GetColumnValue<string>(Columns.GenDescription); }
			set { SetColumnValue(Columns.GenDescription, value); }
		}
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set { SetColumnValue(Columns.FullName, value); }
		}
		[DataMember]
		public bool ShowInInventory {
			get { return GetColumnValue<bool>(Columns.ShowInInventory); }
			set { SetColumnValue(Columns.ShowInInventory, value); }
		}
		[DataMember]
		public byte Points {
			get { return GetColumnValue<byte>(Columns.Points); }
			set { SetColumnValue(Columns.Points, value); }
		}
		[DataMember]
		public double? ActualPoints {
			get { return GetColumnValue<double?>(Columns.ActualPoints); }
			set { SetColumnValue(Columns.ActualPoints, value); }
		}
		[DataMember]
		public decimal RetailPrice {
			get { return GetColumnValue<decimal>(Columns.RetailPrice); }
			set { SetColumnValue(Columns.RetailPrice, value); }
		}
		[DataMember]
		public bool? IsCellUnit {
			get { return GetColumnValue<bool?>(Columns.IsCellUnit); }
			set { SetColumnValue(Columns.IsCellUnit, value); }
		}
		[DataMember]
		public int? AuditDay {
			get { return GetColumnValue<int?>(Columns.AuditDay); }
			set { SetColumnValue(Columns.AuditDay, value); }
		}
		[DataMember]
		public decimal? EmployeeCost {
			get { return GetColumnValue<decimal?>(Columns.EmployeeCost); }
			set { SetColumnValue(Columns.EmployeeCost, value); }
		}
		[DataMember]
		public int? DefaultTechStockLevel {
			get { return GetColumnValue<int?>(Columns.DefaultTechStockLevel); }
			set { SetColumnValue(Columns.DefaultTechStockLevel, value); }
		}
		[DataMember]
		public bool IsHighlighted {
			get { return GetColumnValue<bool>(Columns.IsHighlighted); }
			set { SetColumnValue(Columns.IsHighlighted, value); }
		}
		[DataMember]
		public bool IsWireless {
			get { return GetColumnValue<bool>(Columns.IsWireless); }
			set { SetColumnValue(Columns.IsWireless, value); }
		}
		[DataMember]
		public bool IsExisting {
			get { return GetColumnValue<bool>(Columns.IsExisting); }
			set { SetColumnValue(Columns.IsExisting, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return EquipmentID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentMonitoredTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn EquipmentTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountZoneTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn EquipmentPanelTypeIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn GPItemNmbrColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ItemDescriptionColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ShortNameColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn GenDescriptionColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ShowInInventoryColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PointsColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ActualPointsColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn RetailPriceColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsCellUnitColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn AuditDayColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn EmployeeCostColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn DefaultTechStockLevelColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn IsHighlightedColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsWirelessColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsExistingColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[22]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string EquipmentID = @"EquipmentID";
			public const string EquipmentMonitoredTypeId = @"EquipmentMonitoredTypeId";
			public const string EquipmentTypeId = @"EquipmentTypeId";
			public const string AccountZoneTypeId = @"AccountZoneTypeId";
			public const string EquipmentPanelTypeId = @"EquipmentPanelTypeId";
			public const string GPItemNmbr = @"GPItemNmbr";
			public const string ItemDescription = @"ItemDescription";
			public const string ShortName = @"ShortName";
			public const string GenDescription = @"GenDescription";
			public const string FullName = @"FullName";
			public const string ShowInInventory = @"ShowInInventory";
			public const string Points = @"Points";
			public const string ActualPoints = @"ActualPoints";
			public const string RetailPrice = @"RetailPrice";
			public const string IsCellUnit = @"IsCellUnit";
			public const string AuditDay = @"AuditDay";
			public const string EmployeeCost = @"EmployeeCost";
			public const string DefaultTechStockLevel = @"DefaultTechStockLevel";
			public const string IsHighlighted = @"IsHighlighted";
			public const string IsWireless = @"IsWireless";
			public const string IsExisting = @"IsExisting";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_IndustryAccountNumbersView class.
	/// </summary>
	[DataContract]
	public partial class MS_IndustryAccountNumbersViewCollection : ReadOnlyList<MS_IndustryAccountNumbersView, MS_IndustryAccountNumbersViewCollection>
	{
		public static MS_IndustryAccountNumbersViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_IndustryAccountNumbersViewCollection result = new MS_IndustryAccountNumbersViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_IndustryAccountNumbers view.
	/// </summary>
	[DataContract]
	public partial class MS_IndustryAccountNumbersView : ReadOnlyRecord<MS_IndustryAccountNumbersView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_IndustryAccountNumbers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarIndustryAccountID = new TableSchema.TableColumn(schema);
				colvarIndustryAccountID.ColumnName = "IndustryAccountID";
				colvarIndustryAccountID.DataType = DbType.Int64;
				colvarIndustryAccountID.MaxLength = 0;
				colvarIndustryAccountID.AutoIncrement = false;
				colvarIndustryAccountID.IsNullable = false;
				colvarIndustryAccountID.IsPrimaryKey = false;
				colvarIndustryAccountID.IsForeignKey = false;
				colvarIndustryAccountID.IsReadOnly = false;
				colvarIndustryAccountID.DefaultSetting = @"";
				colvarIndustryAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarReceiverLineId = new TableSchema.TableColumn(schema);
				colvarReceiverLineId.ColumnName = "ReceiverLineId";
				colvarReceiverLineId.DataType = DbType.AnsiString;
				colvarReceiverLineId.MaxLength = 20;
				colvarReceiverLineId.AutoIncrement = false;
				colvarReceiverLineId.IsNullable = false;
				colvarReceiverLineId.IsPrimaryKey = false;
				colvarReceiverLineId.IsForeignKey = false;
				colvarReceiverLineId.IsReadOnly = false;
				colvarReceiverLineId.DefaultSetting = @"";
				colvarReceiverLineId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineId);

				TableSchema.TableColumn colvarReceiverLineBlockId = new TableSchema.TableColumn(schema);
				colvarReceiverLineBlockId.ColumnName = "ReceiverLineBlockId";
				colvarReceiverLineBlockId.DataType = DbType.AnsiString;
				colvarReceiverLineBlockId.MaxLength = 50;
				colvarReceiverLineBlockId.AutoIncrement = false;
				colvarReceiverLineBlockId.IsNullable = false;
				colvarReceiverLineBlockId.IsPrimaryKey = false;
				colvarReceiverLineBlockId.IsForeignKey = false;
				colvarReceiverLineBlockId.IsReadOnly = false;
				colvarReceiverLineBlockId.DefaultSetting = @"";
				colvarReceiverLineBlockId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineBlockId);

				TableSchema.TableColumn colvarIndustryAccount = new TableSchema.TableColumn(schema);
				colvarIndustryAccount.ColumnName = "IndustryAccount";
				colvarIndustryAccount.DataType = DbType.AnsiString;
				colvarIndustryAccount.MaxLength = 14;
				colvarIndustryAccount.AutoIncrement = false;
				colvarIndustryAccount.IsNullable = true;
				colvarIndustryAccount.IsPrimaryKey = false;
				colvarIndustryAccount.IsForeignKey = false;
				colvarIndustryAccount.IsReadOnly = false;
				colvarIndustryAccount.DefaultSetting = @"";
				colvarIndustryAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccount);

				TableSchema.TableColumn colvarDesignator = new TableSchema.TableColumn(schema);
				colvarDesignator.ColumnName = "Designator";
				colvarDesignator.DataType = DbType.AnsiString;
				colvarDesignator.MaxLength = 6;
				colvarDesignator.AutoIncrement = false;
				colvarDesignator.IsNullable = true;
				colvarDesignator.IsPrimaryKey = false;
				colvarDesignator.IsForeignKey = false;
				colvarDesignator.IsReadOnly = false;
				colvarDesignator.DefaultSetting = @"";
				colvarDesignator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesignator);

				TableSchema.TableColumn colvarSubscriberNumber = new TableSchema.TableColumn(schema);
				colvarSubscriberNumber.ColumnName = "SubscriberNumber";
				colvarSubscriberNumber.DataType = DbType.AnsiString;
				colvarSubscriberNumber.MaxLength = 6;
				colvarSubscriberNumber.AutoIncrement = false;
				colvarSubscriberNumber.IsNullable = true;
				colvarSubscriberNumber.IsPrimaryKey = false;
				colvarSubscriberNumber.IsForeignKey = false;
				colvarSubscriberNumber.IsReadOnly = false;
				colvarSubscriberNumber.DefaultSetting = @"";
				colvarSubscriberNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubscriberNumber);

				TableSchema.TableColumn colvarReceiverNumber = new TableSchema.TableColumn(schema);
				colvarReceiverNumber.ColumnName = "ReceiverNumber";
				colvarReceiverNumber.DataType = DbType.AnsiString;
				colvarReceiverNumber.MaxLength = 50;
				colvarReceiverNumber.AutoIncrement = false;
				colvarReceiverNumber.IsNullable = false;
				colvarReceiverNumber.IsPrimaryKey = false;
				colvarReceiverNumber.IsForeignKey = false;
				colvarReceiverNumber.IsReadOnly = false;
				colvarReceiverNumber.DefaultSetting = @"";
				colvarReceiverNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverNumber);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_IndustryAccountNumbers",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_IndustryAccountNumbersView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long IndustryAccountID {
			get { return GetColumnValue<long>(Columns.IndustryAccountID); }
			set { SetColumnValue(Columns.IndustryAccountID, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public string ReceiverLineId {
			get { return GetColumnValue<string>(Columns.ReceiverLineId); }
			set { SetColumnValue(Columns.ReceiverLineId, value); }
		}
		[DataMember]
		public string ReceiverLineBlockId {
			get { return GetColumnValue<string>(Columns.ReceiverLineBlockId); }
			set { SetColumnValue(Columns.ReceiverLineBlockId, value); }
		}
		[DataMember]
		public string IndustryAccount {
			get { return GetColumnValue<string>(Columns.IndustryAccount); }
			set { SetColumnValue(Columns.IndustryAccount, value); }
		}
		[DataMember]
		public string Designator {
			get { return GetColumnValue<string>(Columns.Designator); }
			set { SetColumnValue(Columns.Designator, value); }
		}
		[DataMember]
		public string SubscriberNumber {
			get { return GetColumnValue<string>(Columns.SubscriberNumber); }
			set { SetColumnValue(Columns.SubscriberNumber, value); }
		}
		[DataMember]
		public string ReceiverNumber {
			get { return GetColumnValue<string>(Columns.ReceiverNumber); }
			set { SetColumnValue(Columns.ReceiverNumber, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return IndustryAccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IndustryAccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ReceiverLineIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ReceiverLineBlockIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IndustryAccountColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DesignatorColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SubscriberNumberColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ReceiverNumberColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string IndustryAccountID = @"IndustryAccountID";
			public const string AccountId = @"AccountId";
			public const string ReceiverLineId = @"ReceiverLineId";
			public const string ReceiverLineBlockId = @"ReceiverLineBlockId";
			public const string IndustryAccount = @"IndustryAccount";
			public const string Designator = @"Designator";
			public const string SubscriberNumber = @"SubscriberNumber";
			public const string ReceiverNumber = @"ReceiverNumber";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_IndustryAccountNumbersWithReceiverLineInfoView class.
	/// </summary>
	[DataContract]
	public partial class MS_IndustryAccountNumbersWithReceiverLineInfoViewCollection : ReadOnlyList<MS_IndustryAccountNumbersWithReceiverLineInfoView, MS_IndustryAccountNumbersWithReceiverLineInfoViewCollection>
	{
		public static MS_IndustryAccountNumbersWithReceiverLineInfoViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_IndustryAccountNumbersWithReceiverLineInfoViewCollection result = new MS_IndustryAccountNumbersWithReceiverLineInfoViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_IndustryAccountNumbersWithReceiverLineInfo view.
	/// </summary>
	[DataContract]
	public partial class MS_IndustryAccountNumbersWithReceiverLineInfoView : ReadOnlyRecord<MS_IndustryAccountNumbersWithReceiverLineInfoView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_IndustryAccountNumbersWithReceiverLineInfo", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarIndustryAccountID = new TableSchema.TableColumn(schema);
				colvarIndustryAccountID.ColumnName = "IndustryAccountID";
				colvarIndustryAccountID.DataType = DbType.Int64;
				colvarIndustryAccountID.MaxLength = 0;
				colvarIndustryAccountID.AutoIncrement = false;
				colvarIndustryAccountID.IsNullable = false;
				colvarIndustryAccountID.IsPrimaryKey = false;
				colvarIndustryAccountID.IsForeignKey = false;
				colvarIndustryAccountID.IsReadOnly = false;
				colvarIndustryAccountID.DefaultSetting = @"";
				colvarIndustryAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarReceiverNumber = new TableSchema.TableColumn(schema);
				colvarReceiverNumber.ColumnName = "ReceiverNumber";
				colvarReceiverNumber.DataType = DbType.AnsiString;
				colvarReceiverNumber.MaxLength = 50;
				colvarReceiverNumber.AutoIncrement = false;
				colvarReceiverNumber.IsNullable = false;
				colvarReceiverNumber.IsPrimaryKey = false;
				colvarReceiverNumber.IsForeignKey = false;
				colvarReceiverNumber.IsReadOnly = false;
				colvarReceiverNumber.DefaultSetting = @"";
				colvarReceiverNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverNumber);

				TableSchema.TableColumn colvarDesignator = new TableSchema.TableColumn(schema);
				colvarDesignator.ColumnName = "Designator";
				colvarDesignator.DataType = DbType.AnsiString;
				colvarDesignator.MaxLength = 6;
				colvarDesignator.AutoIncrement = false;
				colvarDesignator.IsNullable = true;
				colvarDesignator.IsPrimaryKey = false;
				colvarDesignator.IsForeignKey = false;
				colvarDesignator.IsReadOnly = false;
				colvarDesignator.DefaultSetting = @"";
				colvarDesignator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesignator);

				TableSchema.TableColumn colvarSubscriberNumber = new TableSchema.TableColumn(schema);
				colvarSubscriberNumber.ColumnName = "SubscriberNumber";
				colvarSubscriberNumber.DataType = DbType.AnsiString;
				colvarSubscriberNumber.MaxLength = 6;
				colvarSubscriberNumber.AutoIncrement = false;
				colvarSubscriberNumber.IsNullable = true;
				colvarSubscriberNumber.IsPrimaryKey = false;
				colvarSubscriberNumber.IsForeignKey = false;
				colvarSubscriberNumber.IsReadOnly = false;
				colvarSubscriberNumber.DefaultSetting = @"";
				colvarSubscriberNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubscriberNumber);

				TableSchema.TableColumn colvarIndustryAccount = new TableSchema.TableColumn(schema);
				colvarIndustryAccount.ColumnName = "IndustryAccount";
				colvarIndustryAccount.DataType = DbType.AnsiString;
				colvarIndustryAccount.MaxLength = 14;
				colvarIndustryAccount.AutoIncrement = false;
				colvarIndustryAccount.IsNullable = true;
				colvarIndustryAccount.IsPrimaryKey = false;
				colvarIndustryAccount.IsForeignKey = false;
				colvarIndustryAccount.IsReadOnly = false;
				colvarIndustryAccount.DefaultSetting = @"";
				colvarIndustryAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccount);

				TableSchema.TableColumn colvarMonitoringStationOSID = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSID.ColumnName = "MonitoringStationOSID";
				colvarMonitoringStationOSID.DataType = DbType.AnsiString;
				colvarMonitoringStationOSID.MaxLength = 50;
				colvarMonitoringStationOSID.AutoIncrement = false;
				colvarMonitoringStationOSID.IsNullable = false;
				colvarMonitoringStationOSID.IsPrimaryKey = false;
				colvarMonitoringStationOSID.IsForeignKey = false;
				colvarMonitoringStationOSID.IsReadOnly = false;
				colvarMonitoringStationOSID.DefaultSetting = @"";
				colvarMonitoringStationOSID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationOSID);

				TableSchema.TableColumn colvarOSDescription = new TableSchema.TableColumn(schema);
				colvarOSDescription.ColumnName = "OSDescription";
				colvarOSDescription.DataType = DbType.String;
				colvarOSDescription.MaxLength = 50;
				colvarOSDescription.AutoIncrement = false;
				colvarOSDescription.IsNullable = false;
				colvarOSDescription.IsPrimaryKey = false;
				colvarOSDescription.IsForeignKey = false;
				colvarOSDescription.IsReadOnly = false;
				colvarOSDescription.DefaultSetting = @"";
				colvarOSDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOSDescription);

				TableSchema.TableColumn colvarMonitoringStationName = new TableSchema.TableColumn(schema);
				colvarMonitoringStationName.ColumnName = "MonitoringStationName";
				colvarMonitoringStationName.DataType = DbType.String;
				colvarMonitoringStationName.MaxLength = 150;
				colvarMonitoringStationName.AutoIncrement = false;
				colvarMonitoringStationName.IsNullable = false;
				colvarMonitoringStationName.IsPrimaryKey = false;
				colvarMonitoringStationName.IsForeignKey = false;
				colvarMonitoringStationName.IsReadOnly = false;
				colvarMonitoringStationName.DefaultSetting = @"";
				colvarMonitoringStationName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationName);

				TableSchema.TableColumn colvarPrimaryCSID = new TableSchema.TableColumn(schema);
				colvarPrimaryCSID.ColumnName = "PrimaryCSID";
				colvarPrimaryCSID.DataType = DbType.AnsiString;
				colvarPrimaryCSID.MaxLength = 3;
				colvarPrimaryCSID.AutoIncrement = false;
				colvarPrimaryCSID.IsNullable = false;
				colvarPrimaryCSID.IsPrimaryKey = false;
				colvarPrimaryCSID.IsForeignKey = false;
				colvarPrimaryCSID.IsReadOnly = false;
				colvarPrimaryCSID.DefaultSetting = @"";
				colvarPrimaryCSID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrimaryCSID);

				TableSchema.TableColumn colvarSecondaryCSID = new TableSchema.TableColumn(schema);
				colvarSecondaryCSID.ColumnName = "SecondaryCSID";
				colvarSecondaryCSID.DataType = DbType.AnsiString;
				colvarSecondaryCSID.MaxLength = 3;
				colvarSecondaryCSID.AutoIncrement = false;
				colvarSecondaryCSID.IsNullable = false;
				colvarSecondaryCSID.IsPrimaryKey = false;
				colvarSecondaryCSID.IsForeignKey = false;
				colvarSecondaryCSID.IsReadOnly = false;
				colvarSecondaryCSID.DefaultSetting = @"";
				colvarSecondaryCSID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSecondaryCSID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_IndustryAccountNumbersWithReceiverLineInfo",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_IndustryAccountNumbersWithReceiverLineInfoView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long IndustryAccountID {
			get { return GetColumnValue<long>(Columns.IndustryAccountID); }
			set { SetColumnValue(Columns.IndustryAccountID, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public string ReceiverNumber {
			get { return GetColumnValue<string>(Columns.ReceiverNumber); }
			set { SetColumnValue(Columns.ReceiverNumber, value); }
		}
		[DataMember]
		public string Designator {
			get { return GetColumnValue<string>(Columns.Designator); }
			set { SetColumnValue(Columns.Designator, value); }
		}
		[DataMember]
		public string SubscriberNumber {
			get { return GetColumnValue<string>(Columns.SubscriberNumber); }
			set { SetColumnValue(Columns.SubscriberNumber, value); }
		}
		[DataMember]
		public string IndustryAccount {
			get { return GetColumnValue<string>(Columns.IndustryAccount); }
			set { SetColumnValue(Columns.IndustryAccount, value); }
		}
		[DataMember]
		public string MonitoringStationOSID {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSID); }
			set { SetColumnValue(Columns.MonitoringStationOSID, value); }
		}
		[DataMember]
		public string OSDescription {
			get { return GetColumnValue<string>(Columns.OSDescription); }
			set { SetColumnValue(Columns.OSDescription, value); }
		}
		[DataMember]
		public string MonitoringStationName {
			get { return GetColumnValue<string>(Columns.MonitoringStationName); }
			set { SetColumnValue(Columns.MonitoringStationName, value); }
		}
		[DataMember]
		public string PrimaryCSID {
			get { return GetColumnValue<string>(Columns.PrimaryCSID); }
			set { SetColumnValue(Columns.PrimaryCSID, value); }
		}
		[DataMember]
		public string SecondaryCSID {
			get { return GetColumnValue<string>(Columns.SecondaryCSID); }
			set { SetColumnValue(Columns.SecondaryCSID, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return IndustryAccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IndustryAccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ReceiverNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DesignatorColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SubscriberNumberColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IndustryAccountColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn OSDescriptionColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn MonitoringStationNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn PrimaryCSIDColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn SecondaryCSIDColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string IndustryAccountID = @"IndustryAccountID";
			public const string AccountId = @"AccountId";
			public const string ReceiverNumber = @"ReceiverNumber";
			public const string Designator = @"Designator";
			public const string SubscriberNumber = @"SubscriberNumber";
			public const string IndustryAccount = @"IndustryAccount";
			public const string MonitoringStationOSID = @"MonitoringStationOSID";
			public const string OSDescription = @"OSDescription";
			public const string MonitoringStationName = @"MonitoringStationName";
			public const string PrimaryCSID = @"PrimaryCSID";
			public const string SecondaryCSID = @"SecondaryCSID";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_IndustryNumberByCallerIdView class.
	/// </summary>
	[DataContract]
	public partial class MS_IndustryNumberByCallerIdViewCollection : ReadOnlyList<MS_IndustryNumberByCallerIdView, MS_IndustryNumberByCallerIdViewCollection>
	{
		public static MS_IndustryNumberByCallerIdViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_IndustryNumberByCallerIdViewCollection result = new MS_IndustryNumberByCallerIdViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_IndustryNumberByCallerId view.
	/// </summary>
	[DataContract]
	public partial class MS_IndustryNumberByCallerIdView : ReadOnlyRecord<MS_IndustryNumberByCallerIdView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_IndustryNumberByCallerId", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIndustryAccountID = new TableSchema.TableColumn(schema);
				colvarIndustryAccountID.ColumnName = "IndustryAccountID";
				colvarIndustryAccountID.DataType = DbType.Int64;
				colvarIndustryAccountID.MaxLength = 0;
				colvarIndustryAccountID.AutoIncrement = false;
				colvarIndustryAccountID.IsNullable = false;
				colvarIndustryAccountID.IsPrimaryKey = false;
				colvarIndustryAccountID.IsForeignKey = false;
				colvarIndustryAccountID.IsReadOnly = false;
				colvarIndustryAccountID.DefaultSetting = @"";
				colvarIndustryAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountID);

				TableSchema.TableColumn colvarReceiverLineID = new TableSchema.TableColumn(schema);
				colvarReceiverLineID.ColumnName = "ReceiverLineID";
				colvarReceiverLineID.DataType = DbType.AnsiString;
				colvarReceiverLineID.MaxLength = 20;
				colvarReceiverLineID.AutoIncrement = false;
				colvarReceiverLineID.IsNullable = false;
				colvarReceiverLineID.IsPrimaryKey = false;
				colvarReceiverLineID.IsForeignKey = false;
				colvarReceiverLineID.IsReadOnly = false;
				colvarReceiverLineID.DefaultSetting = @"";
				colvarReceiverLineID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineID);

				TableSchema.TableColumn colvarReceiverLineBlockID = new TableSchema.TableColumn(schema);
				colvarReceiverLineBlockID.ColumnName = "ReceiverLineBlockID";
				colvarReceiverLineBlockID.DataType = DbType.AnsiString;
				colvarReceiverLineBlockID.MaxLength = 50;
				colvarReceiverLineBlockID.AutoIncrement = false;
				colvarReceiverLineBlockID.IsNullable = false;
				colvarReceiverLineBlockID.IsPrimaryKey = false;
				colvarReceiverLineBlockID.IsForeignKey = false;
				colvarReceiverLineBlockID.IsReadOnly = false;
				colvarReceiverLineBlockID.DefaultSetting = @"";
				colvarReceiverLineBlockID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineBlockID);

				TableSchema.TableColumn colvarGpsWatchPhoneNumber = new TableSchema.TableColumn(schema);
				colvarGpsWatchPhoneNumber.ColumnName = "GpsWatchPhoneNumber";
				colvarGpsWatchPhoneNumber.DataType = DbType.AnsiString;
				colvarGpsWatchPhoneNumber.MaxLength = 20;
				colvarGpsWatchPhoneNumber.AutoIncrement = false;
				colvarGpsWatchPhoneNumber.IsNullable = true;
				colvarGpsWatchPhoneNumber.IsPrimaryKey = false;
				colvarGpsWatchPhoneNumber.IsForeignKey = false;
				colvarGpsWatchPhoneNumber.IsReadOnly = false;
				colvarGpsWatchPhoneNumber.DefaultSetting = @"";
				colvarGpsWatchPhoneNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGpsWatchPhoneNumber);

				TableSchema.TableColumn colvarCsid = new TableSchema.TableColumn(schema);
				colvarCsid.ColumnName = "Csid";
				colvarCsid.DataType = DbType.AnsiString;
				colvarCsid.MaxLength = 15;
				colvarCsid.AutoIncrement = false;
				colvarCsid.IsNullable = true;
				colvarCsid.IsPrimaryKey = false;
				colvarCsid.IsForeignKey = false;
				colvarCsid.IsReadOnly = false;
				colvarCsid.DefaultSetting = @"";
				colvarCsid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsid);

				TableSchema.TableColumn colvarMonitoringStationsID = new TableSchema.TableColumn(schema);
				colvarMonitoringStationsID.ColumnName = "MonitoringStationsID";
				colvarMonitoringStationsID.DataType = DbType.AnsiString;
				colvarMonitoringStationsID.MaxLength = 50;
				colvarMonitoringStationsID.AutoIncrement = false;
				colvarMonitoringStationsID.IsNullable = false;
				colvarMonitoringStationsID.IsPrimaryKey = false;
				colvarMonitoringStationsID.IsForeignKey = false;
				colvarMonitoringStationsID.IsReadOnly = false;
				colvarMonitoringStationsID.DefaultSetting = @"";
				colvarMonitoringStationsID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationsID);

				TableSchema.TableColumn colvarMonitoringStationName = new TableSchema.TableColumn(schema);
				colvarMonitoringStationName.ColumnName = "MonitoringStationName";
				colvarMonitoringStationName.DataType = DbType.String;
				colvarMonitoringStationName.MaxLength = 150;
				colvarMonitoringStationName.AutoIncrement = false;
				colvarMonitoringStationName.IsNullable = false;
				colvarMonitoringStationName.IsPrimaryKey = false;
				colvarMonitoringStationName.IsForeignKey = false;
				colvarMonitoringStationName.IsReadOnly = false;
				colvarMonitoringStationName.DefaultSetting = @"";
				colvarMonitoringStationName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationName);

				TableSchema.TableColumn colvarMonitoringStationOSID = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSID.ColumnName = "MonitoringStationOSID";
				colvarMonitoringStationOSID.DataType = DbType.AnsiString;
				colvarMonitoringStationOSID.MaxLength = 50;
				colvarMonitoringStationOSID.AutoIncrement = false;
				colvarMonitoringStationOSID.IsNullable = false;
				colvarMonitoringStationOSID.IsPrimaryKey = false;
				colvarMonitoringStationOSID.IsForeignKey = false;
				colvarMonitoringStationOSID.IsReadOnly = false;
				colvarMonitoringStationOSID.DefaultSetting = @"";
				colvarMonitoringStationOSID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationOSID);

				TableSchema.TableColumn colvarOSDescription = new TableSchema.TableColumn(schema);
				colvarOSDescription.ColumnName = "OSDescription";
				colvarOSDescription.DataType = DbType.String;
				colvarOSDescription.MaxLength = 50;
				colvarOSDescription.AutoIncrement = false;
				colvarOSDescription.IsNullable = false;
				colvarOSDescription.IsPrimaryKey = false;
				colvarOSDescription.IsForeignKey = false;
				colvarOSDescription.IsReadOnly = false;
				colvarOSDescription.DefaultSetting = @"";
				colvarOSDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOSDescription);

				TableSchema.TableColumn colvarInTestMode = new TableSchema.TableColumn(schema);
				colvarInTestMode.ColumnName = "InTestMode";
				colvarInTestMode.DataType = DbType.Boolean;
				colvarInTestMode.MaxLength = 0;
				colvarInTestMode.AutoIncrement = false;
				colvarInTestMode.IsNullable = false;
				colvarInTestMode.IsPrimaryKey = false;
				colvarInTestMode.IsForeignKey = false;
				colvarInTestMode.IsReadOnly = false;
				colvarInTestMode.DefaultSetting = @"";
				colvarInTestMode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInTestMode);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_IndustryNumberByCallerId",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_IndustryNumberByCallerIdView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set { SetColumnValue(Columns.AccountID, value); }
		}
		[DataMember]
		public long IndustryAccountID {
			get { return GetColumnValue<long>(Columns.IndustryAccountID); }
			set { SetColumnValue(Columns.IndustryAccountID, value); }
		}
		[DataMember]
		public string ReceiverLineID {
			get { return GetColumnValue<string>(Columns.ReceiverLineID); }
			set { SetColumnValue(Columns.ReceiverLineID, value); }
		}
		[DataMember]
		public string ReceiverLineBlockID {
			get { return GetColumnValue<string>(Columns.ReceiverLineBlockID); }
			set { SetColumnValue(Columns.ReceiverLineBlockID, value); }
		}
		[DataMember]
		public string GpsWatchPhoneNumber {
			get { return GetColumnValue<string>(Columns.GpsWatchPhoneNumber); }
			set { SetColumnValue(Columns.GpsWatchPhoneNumber, value); }
		}
		[DataMember]
		public string Csid {
			get { return GetColumnValue<string>(Columns.Csid); }
			set { SetColumnValue(Columns.Csid, value); }
		}
		[DataMember]
		public string MonitoringStationsID {
			get { return GetColumnValue<string>(Columns.MonitoringStationsID); }
			set { SetColumnValue(Columns.MonitoringStationsID, value); }
		}
		[DataMember]
		public string MonitoringStationName {
			get { return GetColumnValue<string>(Columns.MonitoringStationName); }
			set { SetColumnValue(Columns.MonitoringStationName, value); }
		}
		[DataMember]
		public string MonitoringStationOSID {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSID); }
			set { SetColumnValue(Columns.MonitoringStationOSID, value); }
		}
		[DataMember]
		public string OSDescription {
			get { return GetColumnValue<string>(Columns.OSDescription); }
			set { SetColumnValue(Columns.OSDescription, value); }
		}
		[DataMember]
		public bool InTestMode {
			get { return GetColumnValue<bool>(Columns.InTestMode); }
			set { SetColumnValue(Columns.InTestMode, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IndustryAccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ReceiverLineIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ReceiverLineBlockIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GpsWatchPhoneNumberColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CsidColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MonitoringStationsIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn MonitoringStationNameColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIDColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn OSDescriptionColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn InTestModeColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string AccountID = @"AccountID";
			public const string IndustryAccountID = @"IndustryAccountID";
			public const string ReceiverLineID = @"ReceiverLineID";
			public const string ReceiverLineBlockID = @"ReceiverLineBlockID";
			public const string GpsWatchPhoneNumber = @"GpsWatchPhoneNumber";
			public const string Csid = @"Csid";
			public const string MonitoringStationsID = @"MonitoringStationsID";
			public const string MonitoringStationName = @"MonitoringStationName";
			public const string MonitoringStationOSID = @"MonitoringStationOSID";
			public const string OSDescription = @"OSDescription";
			public const string InTestMode = @"InTestMode";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntitySystemTypeXRefView class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySystemTypeXRefViewCollection : ReadOnlyList<MS_MonitronicsEntitySystemTypeXRefView, MS_MonitronicsEntitySystemTypeXRefViewCollection>
	{
		public static MS_MonitronicsEntitySystemTypeXRefViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntitySystemTypeXRefViewCollection result = new MS_MonitronicsEntitySystemTypeXRefViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_MonitronicsEntitySystemTypeXRef view.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySystemTypeXRefView : ReadOnlyRecord<MS_MonitronicsEntitySystemTypeXRefView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_MonitronicsEntitySystemTypeXRef", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSystemTypeXRefID = new TableSchema.TableColumn(schema);
				colvarSystemTypeXRefID.ColumnName = "SystemTypeXRefID";
				colvarSystemTypeXRefID.DataType = DbType.Int32;
				colvarSystemTypeXRefID.MaxLength = 0;
				colvarSystemTypeXRefID.AutoIncrement = false;
				colvarSystemTypeXRefID.IsNullable = false;
				colvarSystemTypeXRefID.IsPrimaryKey = false;
				colvarSystemTypeXRefID.IsForeignKey = false;
				colvarSystemTypeXRefID.IsReadOnly = false;
				colvarSystemTypeXRefID.DefaultSetting = @"";
				colvarSystemTypeXRefID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeXRefID);

				TableSchema.TableColumn colvarDigitalSystemTypeId = new TableSchema.TableColumn(schema);
				colvarDigitalSystemTypeId.ColumnName = "DigitalSystemTypeId";
				colvarDigitalSystemTypeId.DataType = DbType.AnsiString;
				colvarDigitalSystemTypeId.MaxLength = 50;
				colvarDigitalSystemTypeId.AutoIncrement = false;
				colvarDigitalSystemTypeId.IsNullable = false;
				colvarDigitalSystemTypeId.IsPrimaryKey = false;
				colvarDigitalSystemTypeId.IsForeignKey = false;
				colvarDigitalSystemTypeId.IsReadOnly = false;
				colvarDigitalSystemTypeId.DefaultSetting = @"";
				colvarDigitalSystemTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDigitalSystemTypeId);

				TableSchema.TableColumn colvarDIGDECS = new TableSchema.TableColumn(schema);
				colvarDIGDECS.ColumnName = "DIG DECS";
				colvarDIGDECS.DataType = DbType.AnsiString;
				colvarDIGDECS.MaxLength = 50;
				colvarDIGDECS.AutoIncrement = false;
				colvarDIGDECS.IsNullable = false;
				colvarDIGDECS.IsPrimaryKey = false;
				colvarDIGDECS.IsForeignKey = false;
				colvarDIGDECS.IsReadOnly = false;
				colvarDIGDECS.DefaultSetting = @"";
				colvarDIGDECS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDIGDECS);

				TableSchema.TableColumn colvarTwoWayDeviceId = new TableSchema.TableColumn(schema);
				colvarTwoWayDeviceId.ColumnName = "TwoWayDeviceId";
				colvarTwoWayDeviceId.DataType = DbType.AnsiString;
				colvarTwoWayDeviceId.MaxLength = 50;
				colvarTwoWayDeviceId.AutoIncrement = false;
				colvarTwoWayDeviceId.IsNullable = true;
				colvarTwoWayDeviceId.IsPrimaryKey = false;
				colvarTwoWayDeviceId.IsForeignKey = false;
				colvarTwoWayDeviceId.IsReadOnly = false;
				colvarTwoWayDeviceId.DefaultSetting = @"";
				colvarTwoWayDeviceId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTwoWayDeviceId);

				TableSchema.TableColumn colvarTWODESC = new TableSchema.TableColumn(schema);
				colvarTWODESC.ColumnName = "TWO DESC";
				colvarTWODESC.DataType = DbType.AnsiString;
				colvarTWODESC.MaxLength = 50;
				colvarTWODESC.AutoIncrement = false;
				colvarTWODESC.IsNullable = true;
				colvarTWODESC.IsPrimaryKey = false;
				colvarTWODESC.IsForeignKey = false;
				colvarTWODESC.IsReadOnly = false;
				colvarTWODESC.DefaultSetting = @"";
				colvarTWODESC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTWODESC);

				TableSchema.TableColumn colvarCellSystemTypeId = new TableSchema.TableColumn(schema);
				colvarCellSystemTypeId.ColumnName = "CellSystemTypeId";
				colvarCellSystemTypeId.DataType = DbType.AnsiString;
				colvarCellSystemTypeId.MaxLength = 50;
				colvarCellSystemTypeId.AutoIncrement = false;
				colvarCellSystemTypeId.IsNullable = false;
				colvarCellSystemTypeId.IsPrimaryKey = false;
				colvarCellSystemTypeId.IsForeignKey = false;
				colvarCellSystemTypeId.IsReadOnly = false;
				colvarCellSystemTypeId.DefaultSetting = @"";
				colvarCellSystemTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellSystemTypeId);

				TableSchema.TableColumn colvarCELLDESC = new TableSchema.TableColumn(schema);
				colvarCELLDESC.ColumnName = "CELL DESC";
				colvarCELLDESC.DataType = DbType.AnsiString;
				colvarCELLDESC.MaxLength = 50;
				colvarCELLDESC.AutoIncrement = false;
				colvarCELLDESC.IsNullable = true;
				colvarCELLDESC.IsPrimaryKey = false;
				colvarCELLDESC.IsForeignKey = false;
				colvarCELLDESC.IsReadOnly = false;
				colvarCELLDESC.DefaultSetting = @"";
				colvarCELLDESC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCELLDESC);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_MonitronicsEntitySystemTypeXRef",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_MonitronicsEntitySystemTypeXRefView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int SystemTypeXRefID {
			get { return GetColumnValue<int>(Columns.SystemTypeXRefID); }
			set { SetColumnValue(Columns.SystemTypeXRefID, value); }
		}
		[DataMember]
		public string DigitalSystemTypeId {
			get { return GetColumnValue<string>(Columns.DigitalSystemTypeId); }
			set { SetColumnValue(Columns.DigitalSystemTypeId, value); }
		}
		[DataMember]
		public string DIGDECS {
			get { return GetColumnValue<string>(Columns.DIGDECS); }
			set { SetColumnValue(Columns.DIGDECS, value); }
		}
		[DataMember]
		public string TwoWayDeviceId {
			get { return GetColumnValue<string>(Columns.TwoWayDeviceId); }
			set { SetColumnValue(Columns.TwoWayDeviceId, value); }
		}
		[DataMember]
		public string TWODESC {
			get { return GetColumnValue<string>(Columns.TWODESC); }
			set { SetColumnValue(Columns.TWODESC, value); }
		}
		[DataMember]
		public string CellSystemTypeId {
			get { return GetColumnValue<string>(Columns.CellSystemTypeId); }
			set { SetColumnValue(Columns.CellSystemTypeId, value); }
		}
		[DataMember]
		public string CELLDESC {
			get { return GetColumnValue<string>(Columns.CELLDESC); }
			set { SetColumnValue(Columns.CELLDESC, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return DigitalSystemTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SystemTypeXRefIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DigitalSystemTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DIGDECSColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TwoWayDeviceIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TWODESCColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CellSystemTypeIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CELLDESCColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string SystemTypeXRefID = @"SystemTypeXRefID";
			public const string DigitalSystemTypeId = @"DigitalSystemTypeId";
			public const string DIGDECS = @"DIGDECS";
			public const string TwoWayDeviceId = @"TwoWayDeviceId";
			public const string TWODESC = @"TWODESC";
			public const string CellSystemTypeId = @"CellSystemTypeId";
			public const string CELLDESC = @"CELLDESC";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the MS_ReceiverBlockCellDeviceInfoView class.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverBlockCellDeviceInfoViewCollection : ReadOnlyList<MS_ReceiverBlockCellDeviceInfoView, MS_ReceiverBlockCellDeviceInfoViewCollection>
	{
		public static MS_ReceiverBlockCellDeviceInfoViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_ReceiverBlockCellDeviceInfoViewCollection result = new MS_ReceiverBlockCellDeviceInfoViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwMS_ReceiverBlockCellDeviceInfo view.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverBlockCellDeviceInfoView : ReadOnlyRecord<MS_ReceiverBlockCellDeviceInfoView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwMS_ReceiverBlockCellDeviceInfo", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarReceiverLineBlockID = new TableSchema.TableColumn(schema);
				colvarReceiverLineBlockID.ColumnName = "ReceiverLineBlockID";
				colvarReceiverLineBlockID.DataType = DbType.AnsiString;
				colvarReceiverLineBlockID.MaxLength = 50;
				colvarReceiverLineBlockID.AutoIncrement = false;
				colvarReceiverLineBlockID.IsNullable = false;
				colvarReceiverLineBlockID.IsPrimaryKey = false;
				colvarReceiverLineBlockID.IsForeignKey = false;
				colvarReceiverLineBlockID.IsReadOnly = false;
				colvarReceiverLineBlockID.DefaultSetting = @"";
				colvarReceiverLineBlockID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineBlockID);

				TableSchema.TableColumn colvarVendor = new TableSchema.TableColumn(schema);
				colvarVendor.ColumnName = "Vendor";
				colvarVendor.DataType = DbType.AnsiString;
				colvarVendor.MaxLength = 8;
				colvarVendor.AutoIncrement = false;
				colvarVendor.IsNullable = false;
				colvarVendor.IsPrimaryKey = false;
				colvarVendor.IsForeignKey = false;
				colvarVendor.IsReadOnly = false;
				colvarVendor.DefaultSetting = @"";
				colvarVendor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVendor);

				TableSchema.TableColumn colvarMACAddress = new TableSchema.TableColumn(schema);
				colvarMACAddress.ColumnName = "MACAddress";
				colvarMACAddress.DataType = DbType.String;
				colvarMACAddress.MaxLength = 50;
				colvarMACAddress.AutoIncrement = false;
				colvarMACAddress.IsNullable = false;
				colvarMACAddress.IsPrimaryKey = false;
				colvarMACAddress.IsForeignKey = false;
				colvarMACAddress.IsReadOnly = false;
				colvarMACAddress.DefaultSetting = @"";
				colvarMACAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMACAddress);

				TableSchema.TableColumn colvarCRCNumber = new TableSchema.TableColumn(schema);
				colvarCRCNumber.ColumnName = "CRCNumber";
				colvarCRCNumber.DataType = DbType.String;
				colvarCRCNumber.MaxLength = 50;
				colvarCRCNumber.AutoIncrement = false;
				colvarCRCNumber.IsNullable = true;
				colvarCRCNumber.IsPrimaryKey = false;
				colvarCRCNumber.IsForeignKey = false;
				colvarCRCNumber.IsReadOnly = false;
				colvarCRCNumber.DefaultSetting = @"";
				colvarCRCNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRCNumber);

				TableSchema.TableColumn colvarIsTwoWay = new TableSchema.TableColumn(schema);
				colvarIsTwoWay.ColumnName = "IsTwoWay";
				colvarIsTwoWay.DataType = DbType.Boolean;
				colvarIsTwoWay.MaxLength = 0;
				colvarIsTwoWay.AutoIncrement = false;
				colvarIsTwoWay.IsNullable = true;
				colvarIsTwoWay.IsPrimaryKey = false;
				colvarIsTwoWay.IsForeignKey = false;
				colvarIsTwoWay.IsReadOnly = false;
				colvarIsTwoWay.DefaultSetting = @"";
				colvarIsTwoWay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTwoWay);

				TableSchema.TableColumn colvarRegisteredDate = new TableSchema.TableColumn(schema);
				colvarRegisteredDate.ColumnName = "RegisteredDate";
				colvarRegisteredDate.DataType = DbType.DateTime;
				colvarRegisteredDate.MaxLength = 0;
				colvarRegisteredDate.AutoIncrement = false;
				colvarRegisteredDate.IsNullable = true;
				colvarRegisteredDate.IsPrimaryKey = false;
				colvarRegisteredDate.IsForeignKey = false;
				colvarRegisteredDate.IsReadOnly = false;
				colvarRegisteredDate.DefaultSetting = @"";
				colvarRegisteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegisteredDate);

				TableSchema.TableColumn colvarUnRegisteredDate = new TableSchema.TableColumn(schema);
				colvarUnRegisteredDate.ColumnName = "UnRegisteredDate";
				colvarUnRegisteredDate.DataType = DbType.DateTime;
				colvarUnRegisteredDate.MaxLength = 0;
				colvarUnRegisteredDate.AutoIncrement = false;
				colvarUnRegisteredDate.IsNullable = true;
				colvarUnRegisteredDate.IsPrimaryKey = false;
				colvarUnRegisteredDate.IsForeignKey = false;
				colvarUnRegisteredDate.IsReadOnly = false;
				colvarUnRegisteredDate.DefaultSetting = @"";
				colvarUnRegisteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnRegisteredDate);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwMS_ReceiverBlockCellDeviceInfo",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public MS_ReceiverBlockCellDeviceInfoView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public string ReceiverLineBlockID {
			get { return GetColumnValue<string>(Columns.ReceiverLineBlockID); }
			set { SetColumnValue(Columns.ReceiverLineBlockID, value); }
		}
		[DataMember]
		public string Vendor {
			get { return GetColumnValue<string>(Columns.Vendor); }
			set { SetColumnValue(Columns.Vendor, value); }
		}
		[DataMember]
		public string MACAddress {
			get { return GetColumnValue<string>(Columns.MACAddress); }
			set { SetColumnValue(Columns.MACAddress, value); }
		}
		[DataMember]
		public string CRCNumber {
			get { return GetColumnValue<string>(Columns.CRCNumber); }
			set { SetColumnValue(Columns.CRCNumber, value); }
		}
		[DataMember]
		public bool? IsTwoWay {
			get { return GetColumnValue<bool?>(Columns.IsTwoWay); }
			set { SetColumnValue(Columns.IsTwoWay, value); }
		}
		[DataMember]
		public DateTime? RegisteredDate {
			get { return GetColumnValue<DateTime?>(Columns.RegisteredDate); }
			set { SetColumnValue(Columns.RegisteredDate, value); }
		}
		[DataMember]
		public DateTime? UnRegisteredDate {
			get { return GetColumnValue<DateTime?>(Columns.UnRegisteredDate); }
			set { SetColumnValue(Columns.UnRegisteredDate, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return Vendor;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ReceiverLineBlockIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn VendorColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MACAddressColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CRCNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsTwoWayColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RegisteredDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn UnRegisteredDateColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string ReceiverLineBlockID = @"ReceiverLineBlockID";
			public const string Vendor = @"Vendor";
			public const string MACAddress = @"MACAddress";
			public const string CRCNumber = @"CRCNumber";
			public const string IsTwoWay = @"IsTwoWay";
			public const string RegisteredDate = @"RegisteredDate";
			public const string UnRegisteredDate = @"UnRegisteredDate";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the QL_CreditReportTransactionAndTokenView class.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportTransactionAndTokenViewCollection : ReadOnlyList<QL_CreditReportTransactionAndTokenView, QL_CreditReportTransactionAndTokenViewCollection>
	{
		public static QL_CreditReportTransactionAndTokenViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_CreditReportTransactionAndTokenViewCollection result = new QL_CreditReportTransactionAndTokenViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwQL_CreditReportTransactionAndToken view.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportTransactionAndTokenView : ReadOnlyRecord<QL_CreditReportTransactionAndTokenView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwQL_CreditReportTransactionAndToken", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditReportID = new TableSchema.TableColumn(schema);
				colvarCreditReportID.ColumnName = "CreditReportID";
				colvarCreditReportID.DataType = DbType.Int64;
				colvarCreditReportID.MaxLength = 0;
				colvarCreditReportID.AutoIncrement = false;
				colvarCreditReportID.IsNullable = false;
				colvarCreditReportID.IsPrimaryKey = false;
				colvarCreditReportID.IsForeignKey = false;
				colvarCreditReportID.IsReadOnly = false;
				colvarCreditReportID.DefaultSetting = @"";
				colvarCreditReportID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReportID);

				TableSchema.TableColumn colvarVendorName = new TableSchema.TableColumn(schema);
				colvarVendorName.ColumnName = "VendorName";
				colvarVendorName.DataType = DbType.String;
				colvarVendorName.MaxLength = 50;
				colvarVendorName.AutoIncrement = false;
				colvarVendorName.IsNullable = false;
				colvarVendorName.IsPrimaryKey = false;
				colvarVendorName.IsForeignKey = false;
				colvarVendorName.IsReadOnly = false;
				colvarVendorName.DefaultSetting = @"";
				colvarVendorName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVendorName);

				TableSchema.TableColumn colvarBureauId = new TableSchema.TableColumn(schema);
				colvarBureauId.ColumnName = "BureauId";
				colvarBureauId.DataType = DbType.AnsiStringFixedLength;
				colvarBureauId.MaxLength = 2;
				colvarBureauId.AutoIncrement = false;
				colvarBureauId.IsNullable = false;
				colvarBureauId.IsPrimaryKey = false;
				colvarBureauId.IsForeignKey = false;
				colvarBureauId.IsReadOnly = false;
				colvarBureauId.DefaultSetting = @"";
				colvarBureauId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBureauId);

				TableSchema.TableColumn colvarTransactionID = new TableSchema.TableColumn(schema);
				colvarTransactionID.ColumnName = "TransactionID";
				colvarTransactionID.DataType = DbType.AnsiString;
				colvarTransactionID.MaxLength = 50;
				colvarTransactionID.AutoIncrement = false;
				colvarTransactionID.IsNullable = true;
				colvarTransactionID.IsPrimaryKey = false;
				colvarTransactionID.IsForeignKey = false;
				colvarTransactionID.IsReadOnly = false;
				colvarTransactionID.DefaultSetting = @"";
				colvarTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionID);

				TableSchema.TableColumn colvarToken = new TableSchema.TableColumn(schema);
				colvarToken.ColumnName = "Token";
				colvarToken.DataType = DbType.AnsiString;
				colvarToken.MaxLength = 50;
				colvarToken.AutoIncrement = false;
				colvarToken.IsNullable = true;
				colvarToken.IsPrimaryKey = false;
				colvarToken.IsForeignKey = false;
				colvarToken.IsReadOnly = false;
				colvarToken.DefaultSetting = @"";
				colvarToken.ForeignKeyTableName = "";
				schema.Columns.Add(colvarToken);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwQL_CreditReportTransactionAndToken",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public QL_CreditReportTransactionAndTokenView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CreditReportID {
			get { return GetColumnValue<long>(Columns.CreditReportID); }
			set { SetColumnValue(Columns.CreditReportID, value); }
		}
		[DataMember]
		public string VendorName {
			get { return GetColumnValue<string>(Columns.VendorName); }
			set { SetColumnValue(Columns.VendorName, value); }
		}
		[DataMember]
		public string BureauId {
			get { return GetColumnValue<string>(Columns.BureauId); }
			set { SetColumnValue(Columns.BureauId, value); }
		}
		[DataMember]
		public string TransactionID {
			get { return GetColumnValue<string>(Columns.TransactionID); }
			set { SetColumnValue(Columns.TransactionID, value); }
		}
		[DataMember]
		public string Token {
			get { return GetColumnValue<string>(Columns.Token); }
			set { SetColumnValue(Columns.Token, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return VendorName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditReportIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn VendorNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BureauIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TransactionIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TokenColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CreditReportID = @"CreditReportID";
			public const string VendorName = @"VendorName";
			public const string BureauId = @"BureauId";
			public const string TransactionID = @"TransactionID";
			public const string Token = @"Token";
			public const string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the QL_LeadBasicInfoView class.
	/// </summary>
	[DataContract]
	public partial class QL_LeadBasicInfoViewCollection : ReadOnlyList<QL_LeadBasicInfoView, QL_LeadBasicInfoViewCollection>
	{
		public static QL_LeadBasicInfoViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_LeadBasicInfoViewCollection result = new QL_LeadBasicInfoViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwQL_LeadBasicInfo view.
	/// </summary>
	[DataContract]
	public partial class QL_LeadBasicInfoView : ReadOnlyRecord<QL_LeadBasicInfoView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwQL_LeadBasicInfo", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLeadID = new TableSchema.TableColumn(schema);
				colvarLeadID.ColumnName = "LeadID";
				colvarLeadID.DataType = DbType.Int64;
				colvarLeadID.MaxLength = 0;
				colvarLeadID.AutoIncrement = false;
				colvarLeadID.IsNullable = false;
				colvarLeadID.IsPrimaryKey = false;
				colvarLeadID.IsForeignKey = false;
				colvarLeadID.IsReadOnly = false;
				colvarLeadID.DefaultSetting = @"";
				colvarLeadID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadID);

				TableSchema.TableColumn colvarCustomerMasterFileID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileID.ColumnName = "CustomerMasterFileID";
				colvarCustomerMasterFileID.DataType = DbType.Int64;
				colvarCustomerMasterFileID.MaxLength = 0;
				colvarCustomerMasterFileID.AutoIncrement = false;
				colvarCustomerMasterFileID.IsNullable = false;
				colvarCustomerMasterFileID.IsPrimaryKey = false;
				colvarCustomerMasterFileID.IsForeignKey = false;
				colvarCustomerMasterFileID.IsReadOnly = false;
				colvarCustomerMasterFileID.DefaultSetting = @"";
				colvarCustomerMasterFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileID);

				TableSchema.TableColumn colvarAddressID = new TableSchema.TableColumn(schema);
				colvarAddressID.ColumnName = "AddressID";
				colvarAddressID.DataType = DbType.Int64;
				colvarAddressID.MaxLength = 0;
				colvarAddressID.AutoIncrement = false;
				colvarAddressID.IsNullable = false;
				colvarAddressID.IsPrimaryKey = false;
				colvarAddressID.IsForeignKey = false;
				colvarAddressID.IsReadOnly = false;
				colvarAddressID.DefaultSetting = @"";
				colvarAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarLocalizationId = new TableSchema.TableColumn(schema);
				colvarLocalizationId.ColumnName = "LocalizationId";
				colvarLocalizationId.DataType = DbType.AnsiString;
				colvarLocalizationId.MaxLength = 20;
				colvarLocalizationId.AutoIncrement = false;
				colvarLocalizationId.IsNullable = false;
				colvarLocalizationId.IsPrimaryKey = false;
				colvarLocalizationId.IsForeignKey = false;
				colvarLocalizationId.IsReadOnly = false;
				colvarLocalizationId.DefaultSetting = @"";
				colvarLocalizationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocalizationId);

				TableSchema.TableColumn colvarTeamLocationId = new TableSchema.TableColumn(schema);
				colvarTeamLocationId.ColumnName = "TeamLocationId";
				colvarTeamLocationId.DataType = DbType.Int32;
				colvarTeamLocationId.MaxLength = 0;
				colvarTeamLocationId.AutoIncrement = false;
				colvarTeamLocationId.IsNullable = false;
				colvarTeamLocationId.IsPrimaryKey = false;
				colvarTeamLocationId.IsForeignKey = false;
				colvarTeamLocationId.IsReadOnly = false;
				colvarTeamLocationId.DefaultSetting = @"";
				colvarTeamLocationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationId);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = false;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"";
				colvarCustomerTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerTypeId);

				TableSchema.TableColumn colvarSeasonId = new TableSchema.TableColumn(schema);
				colvarSeasonId.ColumnName = "SeasonId";
				colvarSeasonId.DataType = DbType.Int32;
				colvarSeasonId.MaxLength = 0;
				colvarSeasonId.AutoIncrement = false;
				colvarSeasonId.IsNullable = false;
				colvarSeasonId.IsPrimaryKey = false;
				colvarSeasonId.IsForeignKey = false;
				colvarSeasonId.IsReadOnly = false;
				colvarSeasonId.DefaultSetting = @"";
				colvarSeasonId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonId);

				TableSchema.TableColumn colvarSalesRepId = new TableSchema.TableColumn(schema);
				colvarSalesRepId.ColumnName = "SalesRepId";
				colvarSalesRepId.DataType = DbType.AnsiString;
				colvarSalesRepId.MaxLength = 10;
				colvarSalesRepId.AutoIncrement = false;
				colvarSalesRepId.IsNullable = false;
				colvarSalesRepId.IsPrimaryKey = false;
				colvarSalesRepId.IsForeignKey = false;
				colvarSalesRepId.IsReadOnly = false;
				colvarSalesRepId.DefaultSetting = @"";
				colvarSalesRepId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepId);

				TableSchema.TableColumn colvarSalutation = new TableSchema.TableColumn(schema);
				colvarSalutation.ColumnName = "Salutation";
				colvarSalutation.DataType = DbType.String;
				colvarSalutation.MaxLength = 50;
				colvarSalutation.AutoIncrement = false;
				colvarSalutation.IsNullable = true;
				colvarSalutation.IsPrimaryKey = false;
				colvarSalutation.IsForeignKey = false;
				colvarSalutation.IsReadOnly = false;
				colvarSalutation.DefaultSetting = @"";
				colvarSalutation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalutation);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarSuffix = new TableSchema.TableColumn(schema);
				colvarSuffix.ColumnName = "Suffix";
				colvarSuffix.DataType = DbType.String;
				colvarSuffix.MaxLength = 50;
				colvarSuffix.AutoIncrement = false;
				colvarSuffix.IsNullable = true;
				colvarSuffix.IsPrimaryKey = false;
				colvarSuffix.IsForeignKey = false;
				colvarSuffix.IsReadOnly = false;
				colvarSuffix.DefaultSetting = @"";
				colvarSuffix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuffix);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarDL = new TableSchema.TableColumn(schema);
				colvarDL.ColumnName = "DL";
				colvarDL.DataType = DbType.String;
				colvarDL.MaxLength = 30;
				colvarDL.AutoIncrement = false;
				colvarDL.IsNullable = true;
				colvarDL.IsPrimaryKey = false;
				colvarDL.IsForeignKey = false;
				colvarDL.IsReadOnly = false;
				colvarDL.DefaultSetting = @"";
				colvarDL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDL);

				TableSchema.TableColumn colvarDLStateID = new TableSchema.TableColumn(schema);
				colvarDLStateID.ColumnName = "DLStateID";
				colvarDLStateID.DataType = DbType.AnsiString;
				colvarDLStateID.MaxLength = 4;
				colvarDLStateID.AutoIncrement = false;
				colvarDLStateID.IsNullable = true;
				colvarDLStateID.IsPrimaryKey = false;
				colvarDLStateID.IsForeignKey = false;
				colvarDLStateID.IsReadOnly = false;
				colvarDLStateID.DefaultSetting = @"";
				colvarDLStateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLStateID);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.String;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.String;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.String;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = false;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = false;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.String;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarPlusFour = new TableSchema.TableColumn(schema);
				colvarPlusFour.ColumnName = "PlusFour";
				colvarPlusFour.DataType = DbType.String;
				colvarPlusFour.MaxLength = 4;
				colvarPlusFour.AutoIncrement = false;
				colvarPlusFour.IsNullable = true;
				colvarPlusFour.IsPrimaryKey = false;
				colvarPlusFour.IsForeignKey = false;
				colvarPlusFour.IsReadOnly = false;
				colvarPlusFour.DefaultSetting = @"";
				colvarPlusFour.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlusFour);

				TableSchema.TableColumn colvarPremisePhone = new TableSchema.TableColumn(schema);
				colvarPremisePhone.ColumnName = "PremisePhone";
				colvarPremisePhone.DataType = DbType.AnsiString;
				colvarPremisePhone.MaxLength = 20;
				colvarPremisePhone.AutoIncrement = false;
				colvarPremisePhone.IsNullable = true;
				colvarPremisePhone.IsPrimaryKey = false;
				colvarPremisePhone.IsForeignKey = false;
				colvarPremisePhone.IsReadOnly = false;
				colvarPremisePhone.DefaultSetting = @"";
				colvarPremisePhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremisePhone);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwQL_LeadBasicInfo",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public QL_LeadBasicInfoView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long LeadID {
			get { return GetColumnValue<long>(Columns.LeadID); }
			set { SetColumnValue(Columns.LeadID, value); }
		}
		[DataMember]
		public long CustomerMasterFileID {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileID); }
			set { SetColumnValue(Columns.CustomerMasterFileID, value); }
		}
		[DataMember]
		public long AddressID {
			get { return GetColumnValue<long>(Columns.AddressID); }
			set { SetColumnValue(Columns.AddressID, value); }
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set { SetColumnValue(Columns.DealerId, value); }
		}
		[DataMember]
		public string LocalizationId {
			get { return GetColumnValue<string>(Columns.LocalizationId); }
			set { SetColumnValue(Columns.LocalizationId, value); }
		}
		[DataMember]
		public int TeamLocationId {
			get { return GetColumnValue<int>(Columns.TeamLocationId); }
			set { SetColumnValue(Columns.TeamLocationId, value); }
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set { SetColumnValue(Columns.CustomerTypeId, value); }
		}
		[DataMember]
		public int SeasonId {
			get { return GetColumnValue<int>(Columns.SeasonId); }
			set { SetColumnValue(Columns.SeasonId, value); }
		}
		[DataMember]
		public string SalesRepId {
			get { return GetColumnValue<string>(Columns.SalesRepId); }
			set { SetColumnValue(Columns.SalesRepId, value); }
		}
		[DataMember]
		public string Salutation {
			get { return GetColumnValue<string>(Columns.Salutation); }
			set { SetColumnValue(Columns.Salutation, value); }
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set { SetColumnValue(Columns.MiddleName, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string Suffix {
			get { return GetColumnValue<string>(Columns.Suffix); }
			set { SetColumnValue(Columns.Suffix, value); }
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set { SetColumnValue(Columns.SSN, value); }
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set { SetColumnValue(Columns.DOB, value); }
		}
		[DataMember]
		public string DL {
			get { return GetColumnValue<string>(Columns.DL); }
			set { SetColumnValue(Columns.DL, value); }
		}
		[DataMember]
		public string DLStateID {
			get { return GetColumnValue<string>(Columns.DLStateID); }
			set { SetColumnValue(Columns.DLStateID, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set { SetColumnValue(Columns.PhoneHome, value); }
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set { SetColumnValue(Columns.PhoneWork, value); }
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set { SetColumnValue(Columns.PhoneMobile, value); }
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set { SetColumnValue(Columns.StreetAddress, value); }
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set { SetColumnValue(Columns.StateId, value); }
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set { SetColumnValue(Columns.PostalCode, value); }
		}
		[DataMember]
		public string PlusFour {
			get { return GetColumnValue<string>(Columns.PlusFour); }
			set { SetColumnValue(Columns.PlusFour, value); }
		}
		[DataMember]
		public string PremisePhone {
			get { return GetColumnValue<string>(Columns.PremisePhone); }
			set { SetColumnValue(Columns.PremisePhone, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return LeadID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LeadIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AddressIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LocalizationIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TeamLocationIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn SeasonIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn SalesRepIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn SalutationColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn SuffixColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn DLColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn DLStateIDColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn PlusFourColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn PremisePhoneColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[29]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string LeadID = @"LeadID";
			public const string CustomerMasterFileID = @"CustomerMasterFileID";
			public const string AddressID = @"AddressID";
			public const string DealerId = @"DealerId";
			public const string LocalizationId = @"LocalizationId";
			public const string TeamLocationId = @"TeamLocationId";
			public const string CustomerTypeId = @"CustomerTypeId";
			public const string SeasonId = @"SeasonId";
			public const string SalesRepId = @"SalesRepId";
			public const string Salutation = @"Salutation";
			public const string FirstName = @"FirstName";
			public const string MiddleName = @"MiddleName";
			public const string LastName = @"LastName";
			public const string Suffix = @"Suffix";
			public const string SSN = @"SSN";
			public const string DOB = @"DOB";
			public const string DL = @"DL";
			public const string DLStateID = @"DLStateID";
			public const string Email = @"Email";
			public const string PhoneHome = @"PhoneHome";
			public const string PhoneWork = @"PhoneWork";
			public const string PhoneMobile = @"PhoneMobile";
			public const string StreetAddress = @"StreetAddress";
			public const string City = @"City";
			public const string StateId = @"StateId";
			public const string PostalCode = @"PostalCode";
			public const string PlusFour = @"PlusFour";
			public const string PremisePhone = @"PremisePhone";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the QL_LeadProductOffersView class.
	/// </summary>
	[DataContract]
	public partial class QL_LeadProductOffersViewCollection : ReadOnlyList<QL_LeadProductOffersView, QL_LeadProductOffersViewCollection>
	{
		public static QL_LeadProductOffersViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_LeadProductOffersViewCollection result = new QL_LeadProductOffersViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwQL_LeadProductOffers view.
	/// </summary>
	[DataContract]
	public partial class QL_LeadProductOffersView : ReadOnlyRecord<QL_LeadProductOffersView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwQL_LeadProductOffers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLeadProductOfferedId = new TableSchema.TableColumn(schema);
				colvarLeadProductOfferedId.ColumnName = "LeadProductOfferedId";
				colvarLeadProductOfferedId.DataType = DbType.Int64;
				colvarLeadProductOfferedId.MaxLength = 0;
				colvarLeadProductOfferedId.AutoIncrement = false;
				colvarLeadProductOfferedId.IsNullable = false;
				colvarLeadProductOfferedId.IsPrimaryKey = false;
				colvarLeadProductOfferedId.IsForeignKey = false;
				colvarLeadProductOfferedId.IsReadOnly = false;
				colvarLeadProductOfferedId.DefaultSetting = @"";
				colvarLeadProductOfferedId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadProductOfferedId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = false;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarSalesRepId = new TableSchema.TableColumn(schema);
				colvarSalesRepId.ColumnName = "SalesRepId";
				colvarSalesRepId.DataType = DbType.AnsiString;
				colvarSalesRepId.MaxLength = 10;
				colvarSalesRepId.AutoIncrement = false;
				colvarSalesRepId.IsNullable = false;
				colvarSalesRepId.IsPrimaryKey = false;
				colvarSalesRepId.IsForeignKey = false;
				colvarSalesRepId.IsReadOnly = false;
				colvarSalesRepId.DefaultSetting = @"";
				colvarSalesRepId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepId);

				TableSchema.TableColumn colvarSalesRepFullName = new TableSchema.TableColumn(schema);
				colvarSalesRepFullName.ColumnName = "SalesRepFullName";
				colvarSalesRepFullName.DataType = DbType.String;
				colvarSalesRepFullName.MaxLength = 100;
				colvarSalesRepFullName.AutoIncrement = false;
				colvarSalesRepFullName.IsNullable = true;
				colvarSalesRepFullName.IsPrimaryKey = false;
				colvarSalesRepFullName.IsForeignKey = false;
				colvarSalesRepFullName.IsReadOnly = false;
				colvarSalesRepFullName.DefaultSetting = @"";
				colvarSalesRepFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepFullName);

				TableSchema.TableColumn colvarProductSkwID = new TableSchema.TableColumn(schema);
				colvarProductSkwID.ColumnName = "ProductSkwID";
				colvarProductSkwID.DataType = DbType.AnsiString;
				colvarProductSkwID.MaxLength = 50;
				colvarProductSkwID.AutoIncrement = false;
				colvarProductSkwID.IsNullable = false;
				colvarProductSkwID.IsPrimaryKey = false;
				colvarProductSkwID.IsForeignKey = false;
				colvarProductSkwID.IsReadOnly = false;
				colvarProductSkwID.DefaultSetting = @"";
				colvarProductSkwID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductSkwID);

				TableSchema.TableColumn colvarProductTypeID = new TableSchema.TableColumn(schema);
				colvarProductTypeID.ColumnName = "ProductTypeID";
				colvarProductTypeID.DataType = DbType.AnsiString;
				colvarProductTypeID.MaxLength = 30;
				colvarProductTypeID.AutoIncrement = false;
				colvarProductTypeID.IsNullable = false;
				colvarProductTypeID.IsPrimaryKey = false;
				colvarProductTypeID.IsForeignKey = false;
				colvarProductTypeID.IsReadOnly = false;
				colvarProductTypeID.DefaultSetting = @"";
				colvarProductTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductTypeID);

				TableSchema.TableColumn colvarProductTypeName = new TableSchema.TableColumn(schema);
				colvarProductTypeName.ColumnName = "ProductTypeName";
				colvarProductTypeName.DataType = DbType.String;
				colvarProductTypeName.MaxLength = 150;
				colvarProductTypeName.AutoIncrement = false;
				colvarProductTypeName.IsNullable = false;
				colvarProductTypeName.IsPrimaryKey = false;
				colvarProductTypeName.IsForeignKey = false;
				colvarProductTypeName.IsReadOnly = false;
				colvarProductTypeName.DefaultSetting = @"";
				colvarProductTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductTypeName);

				TableSchema.TableColumn colvarProductName = new TableSchema.TableColumn(schema);
				colvarProductName.ColumnName = "ProductName";
				colvarProductName.DataType = DbType.String;
				colvarProductName.MaxLength = 150;
				colvarProductName.AutoIncrement = false;
				colvarProductName.IsNullable = false;
				colvarProductName.IsPrimaryKey = false;
				colvarProductName.IsForeignKey = false;
				colvarProductName.IsReadOnly = false;
				colvarProductName.DefaultSetting = @"";
				colvarProductName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductName);

				TableSchema.TableColumn colvarShortName = new TableSchema.TableColumn(schema);
				colvarShortName.ColumnName = "ShortName";
				colvarShortName.DataType = DbType.String;
				colvarShortName.MaxLength = 50;
				colvarShortName.AutoIncrement = false;
				colvarShortName.IsNullable = false;
				colvarShortName.IsPrimaryKey = false;
				colvarShortName.IsForeignKey = false;
				colvarShortName.IsReadOnly = false;
				colvarShortName.DefaultSetting = @"";
				colvarShortName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortName);

				TableSchema.TableColumn colvarProductImageName = new TableSchema.TableColumn(schema);
				colvarProductImageName.ColumnName = "ProductImageName";
				colvarProductImageName.DataType = DbType.String;
				colvarProductImageName.MaxLength = 50;
				colvarProductImageName.AutoIncrement = false;
				colvarProductImageName.IsNullable = true;
				colvarProductImageName.IsPrimaryKey = false;
				colvarProductImageName.IsForeignKey = false;
				colvarProductImageName.IsReadOnly = false;
				colvarProductImageName.DefaultSetting = @"";
				colvarProductImageName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductImageName);

				TableSchema.TableColumn colvarOfferDate = new TableSchema.TableColumn(schema);
				colvarOfferDate.ColumnName = "OfferDate";
				colvarOfferDate.DataType = DbType.DateTime;
				colvarOfferDate.MaxLength = 0;
				colvarOfferDate.AutoIncrement = false;
				colvarOfferDate.IsNullable = false;
				colvarOfferDate.IsPrimaryKey = false;
				colvarOfferDate.IsForeignKey = false;
				colvarOfferDate.IsReadOnly = false;
				colvarOfferDate.DefaultSetting = @"";
				colvarOfferDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfferDate);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwQL_LeadProductOffers",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public QL_LeadProductOffersView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long LeadProductOfferedId {
			get { return GetColumnValue<long>(Columns.LeadProductOfferedId); }
			set { SetColumnValue(Columns.LeadProductOfferedId, value); }
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set { SetColumnValue(Columns.LeadId, value); }
		}
		[DataMember]
		public string SalesRepId {
			get { return GetColumnValue<string>(Columns.SalesRepId); }
			set { SetColumnValue(Columns.SalesRepId, value); }
		}
		[DataMember]
		public string SalesRepFullName {
			get { return GetColumnValue<string>(Columns.SalesRepFullName); }
			set { SetColumnValue(Columns.SalesRepFullName, value); }
		}
		[DataMember]
		public string ProductSkwID {
			get { return GetColumnValue<string>(Columns.ProductSkwID); }
			set { SetColumnValue(Columns.ProductSkwID, value); }
		}
		[DataMember]
		public string ProductTypeID {
			get { return GetColumnValue<string>(Columns.ProductTypeID); }
			set { SetColumnValue(Columns.ProductTypeID, value); }
		}
		[DataMember]
		public string ProductTypeName {
			get { return GetColumnValue<string>(Columns.ProductTypeName); }
			set { SetColumnValue(Columns.ProductTypeName, value); }
		}
		[DataMember]
		public string ProductName {
			get { return GetColumnValue<string>(Columns.ProductName); }
			set { SetColumnValue(Columns.ProductName, value); }
		}
		[DataMember]
		public string ShortName {
			get { return GetColumnValue<string>(Columns.ShortName); }
			set { SetColumnValue(Columns.ShortName, value); }
		}
		[DataMember]
		public string ProductImageName {
			get { return GetColumnValue<string>(Columns.ProductImageName); }
			set { SetColumnValue(Columns.ProductImageName, value); }
		}
		[DataMember]
		public DateTime OfferDate {
			get { return GetColumnValue<DateTime>(Columns.OfferDate); }
			set { SetColumnValue(Columns.OfferDate, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return LeadProductOfferedId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LeadProductOfferedIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SalesRepIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SalesRepFullNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ProductSkwIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ProductTypeIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ProductTypeNameColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ProductNameColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ShortNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ProductImageNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn OfferDateColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string LeadProductOfferedId = @"LeadProductOfferedId";
			public const string LeadId = @"LeadId";
			public const string SalesRepId = @"SalesRepId";
			public const string SalesRepFullName = @"SalesRepFullName";
			public const string ProductSkwID = @"ProductSkwID";
			public const string ProductTypeID = @"ProductTypeID";
			public const string ProductTypeName = @"ProductTypeName";
			public const string ProductName = @"ProductName";
			public const string ShortName = @"ShortName";
			public const string ProductImageName = @"ProductImageName";
			public const string OfferDate = @"OfferDate";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the QL_LeadSearchResultView class.
	/// </summary>
	[DataContract]
	public partial class QL_LeadSearchResultViewCollection : ReadOnlyList<QL_LeadSearchResultView, QL_LeadSearchResultViewCollection>
	{
		public static QL_LeadSearchResultViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_LeadSearchResultViewCollection result = new QL_LeadSearchResultViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwQL_LeadSearchResult view.
	/// </summary>
	[DataContract]
	public partial class QL_LeadSearchResultView : ReadOnlyRecord<QL_LeadSearchResultView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwQL_LeadSearchResult", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarLeadID = new TableSchema.TableColumn(schema);
				colvarLeadID.ColumnName = "LeadID";
				colvarLeadID.DataType = DbType.Int64;
				colvarLeadID.MaxLength = 0;
				colvarLeadID.AutoIncrement = false;
				colvarLeadID.IsNullable = false;
				colvarLeadID.IsPrimaryKey = false;
				colvarLeadID.IsForeignKey = false;
				colvarLeadID.IsReadOnly = false;
				colvarLeadID.DefaultSetting = @"";
				colvarLeadID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarLocalizationId = new TableSchema.TableColumn(schema);
				colvarLocalizationId.ColumnName = "LocalizationId";
				colvarLocalizationId.DataType = DbType.AnsiString;
				colvarLocalizationId.MaxLength = 20;
				colvarLocalizationId.AutoIncrement = false;
				colvarLocalizationId.IsNullable = false;
				colvarLocalizationId.IsPrimaryKey = false;
				colvarLocalizationId.IsForeignKey = false;
				colvarLocalizationId.IsReadOnly = false;
				colvarLocalizationId.DefaultSetting = @"";
				colvarLocalizationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocalizationId);

				TableSchema.TableColumn colvarLeadDispositionId = new TableSchema.TableColumn(schema);
				colvarLeadDispositionId.ColumnName = "LeadDispositionId";
				colvarLeadDispositionId.DataType = DbType.Int32;
				colvarLeadDispositionId.MaxLength = 0;
				colvarLeadDispositionId.AutoIncrement = false;
				colvarLeadDispositionId.IsNullable = false;
				colvarLeadDispositionId.IsPrimaryKey = false;
				colvarLeadDispositionId.IsForeignKey = false;
				colvarLeadDispositionId.IsReadOnly = false;
				colvarLeadDispositionId.DefaultSetting = @"";
				colvarLeadDispositionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadDispositionId);

				TableSchema.TableColumn colvarLeadDisposition = new TableSchema.TableColumn(schema);
				colvarLeadDisposition.ColumnName = "LeadDisposition";
				colvarLeadDisposition.DataType = DbType.String;
				colvarLeadDisposition.MaxLength = 50;
				colvarLeadDisposition.AutoIncrement = false;
				colvarLeadDisposition.IsNullable = false;
				colvarLeadDisposition.IsPrimaryKey = false;
				colvarLeadDisposition.IsForeignKey = false;
				colvarLeadDisposition.IsReadOnly = false;
				colvarLeadDisposition.DefaultSetting = @"";
				colvarLeadDisposition.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadDisposition);

				TableSchema.TableColumn colvarLeadDispositionDateChange = new TableSchema.TableColumn(schema);
				colvarLeadDispositionDateChange.ColumnName = "LeadDispositionDateChange";
				colvarLeadDispositionDateChange.DataType = DbType.DateTime;
				colvarLeadDispositionDateChange.MaxLength = 0;
				colvarLeadDispositionDateChange.AutoIncrement = false;
				colvarLeadDispositionDateChange.IsNullable = true;
				colvarLeadDispositionDateChange.IsPrimaryKey = false;
				colvarLeadDispositionDateChange.IsForeignKey = false;
				colvarLeadDispositionDateChange.IsReadOnly = false;
				colvarLeadDispositionDateChange.DefaultSetting = @"";
				colvarLeadDispositionDateChange.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadDispositionDateChange);

				TableSchema.TableColumn colvarLeadSourceId = new TableSchema.TableColumn(schema);
				colvarLeadSourceId.ColumnName = "LeadSourceId";
				colvarLeadSourceId.DataType = DbType.Int32;
				colvarLeadSourceId.MaxLength = 0;
				colvarLeadSourceId.AutoIncrement = false;
				colvarLeadSourceId.IsNullable = false;
				colvarLeadSourceId.IsPrimaryKey = false;
				colvarLeadSourceId.IsForeignKey = false;
				colvarLeadSourceId.IsReadOnly = false;
				colvarLeadSourceId.DefaultSetting = @"";
				colvarLeadSourceId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadSourceId);

				TableSchema.TableColumn colvarLeadSource = new TableSchema.TableColumn(schema);
				colvarLeadSource.ColumnName = "LeadSource";
				colvarLeadSource.DataType = DbType.String;
				colvarLeadSource.MaxLength = 50;
				colvarLeadSource.AutoIncrement = false;
				colvarLeadSource.IsNullable = false;
				colvarLeadSource.IsPrimaryKey = false;
				colvarLeadSource.IsForeignKey = false;
				colvarLeadSource.IsReadOnly = false;
				colvarLeadSource.DefaultSetting = @"";
				colvarLeadSource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadSource);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.String;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.String;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.String;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarSalesRepId = new TableSchema.TableColumn(schema);
				colvarSalesRepId.ColumnName = "SalesRepId";
				colvarSalesRepId.DataType = DbType.AnsiString;
				colvarSalesRepId.MaxLength = 10;
				colvarSalesRepId.AutoIncrement = false;
				colvarSalesRepId.IsNullable = false;
				colvarSalesRepId.IsPrimaryKey = false;
				colvarSalesRepId.IsForeignKey = false;
				colvarSalesRepId.IsReadOnly = false;
				colvarSalesRepId.DefaultSetting = @"";
				colvarSalesRepId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepId);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarDL = new TableSchema.TableColumn(schema);
				colvarDL.ColumnName = "DL";
				colvarDL.DataType = DbType.String;
				colvarDL.MaxLength = 30;
				colvarDL.AutoIncrement = false;
				colvarDL.IsNullable = true;
				colvarDL.IsPrimaryKey = false;
				colvarDL.IsForeignKey = false;
				colvarDL.IsReadOnly = false;
				colvarDL.DefaultSetting = @"";
				colvarDL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDL);

				TableSchema.TableColumn colvarDLStateID = new TableSchema.TableColumn(schema);
				colvarDLStateID.ColumnName = "DLStateID";
				colvarDLStateID.DataType = DbType.AnsiString;
				colvarDLStateID.MaxLength = 4;
				colvarDLStateID.AutoIncrement = false;
				colvarDLStateID.IsNullable = true;
				colvarDLStateID.IsPrimaryKey = false;
				colvarDLStateID.IsForeignKey = false;
				colvarDLStateID.IsReadOnly = false;
				colvarDLStateID.DefaultSetting = @"";
				colvarDLStateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLStateID);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarIsCustomer = new TableSchema.TableColumn(schema);
				colvarIsCustomer.ColumnName = "IsCustomer";
				colvarIsCustomer.DataType = DbType.Boolean;
				colvarIsCustomer.MaxLength = 0;
				colvarIsCustomer.AutoIncrement = false;
				colvarIsCustomer.IsNullable = true;
				colvarIsCustomer.IsPrimaryKey = false;
				colvarIsCustomer.IsForeignKey = false;
				colvarIsCustomer.IsReadOnly = false;
				colvarIsCustomer.DefaultSetting = @"";
				colvarIsCustomer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCustomer);

				TableSchema.TableColumn colvarRowNum = new TableSchema.TableColumn(schema);
				colvarRowNum.ColumnName = "RowNum";
				colvarRowNum.DataType = DbType.Int32;
				colvarRowNum.MaxLength = 0;
				colvarRowNum.AutoIncrement = false;
				colvarRowNum.IsNullable = true;
				colvarRowNum.IsPrimaryKey = false;
				colvarRowNum.IsForeignKey = false;
				colvarRowNum.IsReadOnly = false;
				colvarRowNum.DefaultSetting = @"";
				colvarRowNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowNum);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwQL_LeadSearchResult",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public QL_LeadSearchResultView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public long LeadID {
			get { return GetColumnValue<long>(Columns.LeadID); }
			set { SetColumnValue(Columns.LeadID, value); }
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set { SetColumnValue(Columns.DealerId, value); }
		}
		[DataMember]
		public string LocalizationId {
			get { return GetColumnValue<string>(Columns.LocalizationId); }
			set { SetColumnValue(Columns.LocalizationId, value); }
		}
		[DataMember]
		public int LeadDispositionId {
			get { return GetColumnValue<int>(Columns.LeadDispositionId); }
			set { SetColumnValue(Columns.LeadDispositionId, value); }
		}
		[DataMember]
		public string LeadDisposition {
			get { return GetColumnValue<string>(Columns.LeadDisposition); }
			set { SetColumnValue(Columns.LeadDisposition, value); }
		}
		[DataMember]
		public DateTime? LeadDispositionDateChange {
			get { return GetColumnValue<DateTime?>(Columns.LeadDispositionDateChange); }
			set { SetColumnValue(Columns.LeadDispositionDateChange, value); }
		}
		[DataMember]
		public int LeadSourceId {
			get { return GetColumnValue<int>(Columns.LeadSourceId); }
			set { SetColumnValue(Columns.LeadSourceId, value); }
		}
		[DataMember]
		public string LeadSource {
			get { return GetColumnValue<string>(Columns.LeadSource); }
			set { SetColumnValue(Columns.LeadSource, value); }
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set { SetColumnValue(Columns.PhoneHome, value); }
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set { SetColumnValue(Columns.PhoneMobile, value); }
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set { SetColumnValue(Columns.PhoneWork, value); }
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set { SetColumnValue(Columns.DOB, value); }
		}
		[DataMember]
		public string SalesRepId {
			get { return GetColumnValue<string>(Columns.SalesRepId); }
			set { SetColumnValue(Columns.SalesRepId, value); }
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set { SetColumnValue(Columns.SSN, value); }
		}
		[DataMember]
		public string DL {
			get { return GetColumnValue<string>(Columns.DL); }
			set { SetColumnValue(Columns.DL, value); }
		}
		[DataMember]
		public string DLStateID {
			get { return GetColumnValue<string>(Columns.DLStateID); }
			set { SetColumnValue(Columns.DLStateID, value); }
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		[DataMember]
		public bool? IsCustomer {
			get { return GetColumnValue<bool?>(Columns.IsCustomer); }
			set { SetColumnValue(Columns.IsCustomer, value); }
		}
		[DataMember]
		public int? RowNum {
			get { return GetColumnValue<int?>(Columns.RowNum); }
			set { SetColumnValue(Columns.RowNum, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return CustomerMasterFileId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LeadIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn LocalizationIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LeadDispositionIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn LeadDispositionColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn LeadDispositionDateChangeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn LeadSourceIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn LeadSourceColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn SalesRepIdColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn DLColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn DLStateIDColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsCustomerColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn RowNumColumn
		{
			get { return Schema.Columns[21]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string LeadID = @"LeadID";
			public const string DealerId = @"DealerId";
			public const string LocalizationId = @"LocalizationId";
			public const string LeadDispositionId = @"LeadDispositionId";
			public const string LeadDisposition = @"LeadDisposition";
			public const string LeadDispositionDateChange = @"LeadDispositionDateChange";
			public const string LeadSourceId = @"LeadSourceId";
			public const string LeadSource = @"LeadSource";
			public const string FirstName = @"FirstName";
			public const string LastName = @"LastName";
			public const string PhoneHome = @"PhoneHome";
			public const string PhoneMobile = @"PhoneMobile";
			public const string PhoneWork = @"PhoneWork";
			public const string DOB = @"DOB";
			public const string SalesRepId = @"SalesRepId";
			public const string SSN = @"SSN";
			public const string DL = @"DL";
			public const string DLStateID = @"DLStateID";
			public const string Email = @"Email";
			public const string IsCustomer = @"IsCustomer";
			public const string RowNum = @"RowNum";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the QL_QualifyCustomerInfoView class.
	/// </summary>
	[DataContract]
	public partial class QL_QualifyCustomerInfoViewCollection : ReadOnlyList<QL_QualifyCustomerInfoView, QL_QualifyCustomerInfoViewCollection>
	{
		public static QL_QualifyCustomerInfoViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_QualifyCustomerInfoViewCollection result = new QL_QualifyCustomerInfoViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwQL_QualifyCustomerInfo view.
	/// </summary>
	[DataContract]
	public partial class QL_QualifyCustomerInfoView : ReadOnlyRecord<QL_QualifyCustomerInfoView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwQL_QualifyCustomerInfo", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLeadID = new TableSchema.TableColumn(schema);
				colvarLeadID.ColumnName = "LeadID";
				colvarLeadID.DataType = DbType.Int64;
				colvarLeadID.MaxLength = 0;
				colvarLeadID.AutoIncrement = false;
				colvarLeadID.IsNullable = false;
				colvarLeadID.IsPrimaryKey = false;
				colvarLeadID.IsForeignKey = false;
				colvarLeadID.IsReadOnly = false;
				colvarLeadID.DefaultSetting = @"";
				colvarLeadID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadID);

				TableSchema.TableColumn colvarSeasonId = new TableSchema.TableColumn(schema);
				colvarSeasonId.ColumnName = "SeasonId";
				colvarSeasonId.DataType = DbType.Int32;
				colvarSeasonId.MaxLength = 0;
				colvarSeasonId.AutoIncrement = false;
				colvarSeasonId.IsNullable = false;
				colvarSeasonId.IsPrimaryKey = false;
				colvarSeasonId.IsForeignKey = false;
				colvarSeasonId.IsReadOnly = false;
				colvarSeasonId.DefaultSetting = @"";
				colvarSeasonId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonId);

				TableSchema.TableColumn colvarCustomerName = new TableSchema.TableColumn(schema);
				colvarCustomerName.ColumnName = "CustomerName";
				colvarCustomerName.DataType = DbType.String;
				colvarCustomerName.MaxLength = 170;
				colvarCustomerName.AutoIncrement = false;
				colvarCustomerName.IsNullable = true;
				colvarCustomerName.IsPrimaryKey = false;
				colvarCustomerName.IsForeignKey = false;
				colvarCustomerName.IsReadOnly = false;
				colvarCustomerName.DefaultSetting = @"";
				colvarCustomerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerName);

				TableSchema.TableColumn colvarCustomerEmail = new TableSchema.TableColumn(schema);
				colvarCustomerEmail.ColumnName = "CustomerEmail";
				colvarCustomerEmail.DataType = DbType.String;
				colvarCustomerEmail.MaxLength = 256;
				colvarCustomerEmail.AutoIncrement = false;
				colvarCustomerEmail.IsNullable = true;
				colvarCustomerEmail.IsPrimaryKey = false;
				colvarCustomerEmail.IsForeignKey = false;
				colvarCustomerEmail.IsReadOnly = false;
				colvarCustomerEmail.DefaultSetting = @"";
				colvarCustomerEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerEmail);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarAddressID = new TableSchema.TableColumn(schema);
				colvarAddressID.ColumnName = "AddressID";
				colvarAddressID.DataType = DbType.Int64;
				colvarAddressID.MaxLength = 0;
				colvarAddressID.AutoIncrement = false;
				colvarAddressID.IsNullable = false;
				colvarAddressID.IsPrimaryKey = false;
				colvarAddressID.IsForeignKey = false;
				colvarAddressID.IsReadOnly = false;
				colvarAddressID.DefaultSetting = @"";
				colvarAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressID);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = false;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = false;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarCounty = new TableSchema.TableColumn(schema);
				colvarCounty.ColumnName = "County";
				colvarCounty.DataType = DbType.String;
				colvarCounty.MaxLength = 50;
				colvarCounty.AutoIncrement = false;
				colvarCounty.IsNullable = true;
				colvarCounty.IsPrimaryKey = false;
				colvarCounty.IsForeignKey = false;
				colvarCounty.IsReadOnly = false;
				colvarCounty.DefaultSetting = @"";
				colvarCounty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCounty);

				TableSchema.TableColumn colvarTimeZoneId = new TableSchema.TableColumn(schema);
				colvarTimeZoneId.ColumnName = "TimeZoneId";
				colvarTimeZoneId.DataType = DbType.Int32;
				colvarTimeZoneId.MaxLength = 0;
				colvarTimeZoneId.AutoIncrement = false;
				colvarTimeZoneId.IsNullable = false;
				colvarTimeZoneId.IsPrimaryKey = false;
				colvarTimeZoneId.IsForeignKey = false;
				colvarTimeZoneId.IsReadOnly = false;
				colvarTimeZoneId.DefaultSetting = @"";
				colvarTimeZoneId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneId);

				TableSchema.TableColumn colvarTimeZoneName = new TableSchema.TableColumn(schema);
				colvarTimeZoneName.ColumnName = "TimeZoneName";
				colvarTimeZoneName.DataType = DbType.AnsiString;
				colvarTimeZoneName.MaxLength = 50;
				colvarTimeZoneName.AutoIncrement = false;
				colvarTimeZoneName.IsNullable = false;
				colvarTimeZoneName.IsPrimaryKey = false;
				colvarTimeZoneName.IsForeignKey = false;
				colvarTimeZoneName.IsReadOnly = false;
				colvarTimeZoneName.DefaultSetting = @"";
				colvarTimeZoneName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneName);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.String;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "Phone";
				colvarPhone.DataType = DbType.AnsiString;
				colvarPhone.MaxLength = 20;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = true;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				colvarPhone.DefaultSetting = @"";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);

				TableSchema.TableColumn colvarCreditReportID = new TableSchema.TableColumn(schema);
				colvarCreditReportID.ColumnName = "CreditReportID";
				colvarCreditReportID.DataType = DbType.Int64;
				colvarCreditReportID.MaxLength = 0;
				colvarCreditReportID.AutoIncrement = false;
				colvarCreditReportID.IsNullable = false;
				colvarCreditReportID.IsPrimaryKey = false;
				colvarCreditReportID.IsForeignKey = false;
				colvarCreditReportID.IsReadOnly = false;
				colvarCreditReportID.DefaultSetting = @"";
				colvarCreditReportID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReportID);

				TableSchema.TableColumn colvarIsHit = new TableSchema.TableColumn(schema);
				colvarIsHit.ColumnName = "IsHit";
				colvarIsHit.DataType = DbType.Boolean;
				colvarIsHit.MaxLength = 0;
				colvarIsHit.AutoIncrement = false;
				colvarIsHit.IsNullable = false;
				colvarIsHit.IsPrimaryKey = false;
				colvarIsHit.IsForeignKey = false;
				colvarIsHit.IsReadOnly = false;
				colvarIsHit.DefaultSetting = @"";
				colvarIsHit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHit);

				TableSchema.TableColumn colvarCRStatus = new TableSchema.TableColumn(schema);
				colvarCRStatus.ColumnName = "CRStatus";
				colvarCRStatus.DataType = DbType.AnsiString;
				colvarCRStatus.MaxLength = 16;
				colvarCRStatus.AutoIncrement = false;
				colvarCRStatus.IsNullable = false;
				colvarCRStatus.IsPrimaryKey = false;
				colvarCRStatus.IsForeignKey = false;
				colvarCRStatus.IsReadOnly = false;
				colvarCRStatus.DefaultSetting = @"";
				colvarCRStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRStatus);

				TableSchema.TableColumn colvarScore = new TableSchema.TableColumn(schema);
				colvarScore.ColumnName = "Score";
				colvarScore.DataType = DbType.Int32;
				colvarScore.MaxLength = 0;
				colvarScore.AutoIncrement = false;
				colvarScore.IsNullable = false;
				colvarScore.IsPrimaryKey = false;
				colvarScore.IsForeignKey = false;
				colvarScore.IsReadOnly = false;
				colvarScore.DefaultSetting = @"";
				colvarScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScore);

				TableSchema.TableColumn colvarBureauName = new TableSchema.TableColumn(schema);
				colvarBureauName.ColumnName = "BureauName";
				colvarBureauName.DataType = DbType.String;
				colvarBureauName.MaxLength = 50;
				colvarBureauName.AutoIncrement = false;
				colvarBureauName.IsNullable = false;
				colvarBureauName.IsPrimaryKey = false;
				colvarBureauName.IsForeignKey = false;
				colvarBureauName.IsReadOnly = false;
				colvarBureauName.DefaultSetting = @"";
				colvarBureauName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBureauName);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
				colvarCompanyID.ColumnName = "CompanyID";
				colvarCompanyID.DataType = DbType.String;
				colvarCompanyID.MaxLength = 25;
				colvarCompanyID.AutoIncrement = false;
				colvarCompanyID.IsNullable = true;
				colvarCompanyID.IsPrimaryKey = false;
				colvarCompanyID.IsForeignKey = false;
				colvarCompanyID.IsReadOnly = false;
				colvarCompanyID.DefaultSetting = @"";
				colvarCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyID);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPreferredName = new TableSchema.TableColumn(schema);
				colvarPreferredName.ColumnName = "PreferredName";
				colvarPreferredName.DataType = DbType.String;
				colvarPreferredName.MaxLength = 50;
				colvarPreferredName.AutoIncrement = false;
				colvarPreferredName.IsNullable = true;
				colvarPreferredName.IsPrimaryKey = false;
				colvarPreferredName.IsForeignKey = false;
				colvarPreferredName.IsReadOnly = false;
				colvarPreferredName.DefaultSetting = @"";
				colvarPreferredName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreferredName);

				TableSchema.TableColumn colvarRepEmail = new TableSchema.TableColumn(schema);
				colvarRepEmail.ColumnName = "RepEmail";
				colvarRepEmail.DataType = DbType.String;
				colvarRepEmail.MaxLength = 100;
				colvarRepEmail.AutoIncrement = false;
				colvarRepEmail.IsNullable = true;
				colvarRepEmail.IsPrimaryKey = false;
				colvarRepEmail.IsForeignKey = false;
				colvarRepEmail.IsReadOnly = false;
				colvarRepEmail.DefaultSetting = @"";
				colvarRepEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRepEmail);

				TableSchema.TableColumn colvarPhoneCell = new TableSchema.TableColumn(schema);
				colvarPhoneCell.ColumnName = "PhoneCell";
				colvarPhoneCell.DataType = DbType.String;
				colvarPhoneCell.MaxLength = 50;
				colvarPhoneCell.AutoIncrement = false;
				colvarPhoneCell.IsNullable = true;
				colvarPhoneCell.IsPrimaryKey = false;
				colvarPhoneCell.IsForeignKey = false;
				colvarPhoneCell.IsReadOnly = false;
				colvarPhoneCell.DefaultSetting = @"";
				colvarPhoneCell.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneCell);

				TableSchema.TableColumn colvarPhoneCellCarrierID = new TableSchema.TableColumn(schema);
				colvarPhoneCellCarrierID.ColumnName = "PhoneCellCarrierID";
				colvarPhoneCellCarrierID.DataType = DbType.Int16;
				colvarPhoneCellCarrierID.MaxLength = 0;
				colvarPhoneCellCarrierID.AutoIncrement = false;
				colvarPhoneCellCarrierID.IsNullable = true;
				colvarPhoneCellCarrierID.IsPrimaryKey = false;
				colvarPhoneCellCarrierID.IsForeignKey = false;
				colvarPhoneCellCarrierID.IsReadOnly = false;
				colvarPhoneCellCarrierID.DefaultSetting = @"";
				colvarPhoneCellCarrierID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneCellCarrierID);

				TableSchema.TableColumn colvarPhoneCellCarrier = new TableSchema.TableColumn(schema);
				colvarPhoneCellCarrier.ColumnName = "PhoneCellCarrier";
				colvarPhoneCellCarrier.DataType = DbType.AnsiString;
				colvarPhoneCellCarrier.MaxLength = 20;
				colvarPhoneCellCarrier.AutoIncrement = false;
				colvarPhoneCellCarrier.IsNullable = true;
				colvarPhoneCellCarrier.IsPrimaryKey = false;
				colvarPhoneCellCarrier.IsForeignKey = false;
				colvarPhoneCellCarrier.IsReadOnly = false;
				colvarPhoneCellCarrier.DefaultSetting = @"";
				colvarPhoneCellCarrier.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneCellCarrier);

				TableSchema.TableColumn colvarSeasonName = new TableSchema.TableColumn(schema);
				colvarSeasonName.ColumnName = "SeasonName";
				colvarSeasonName.DataType = DbType.String;
				colvarSeasonName.MaxLength = 50;
				colvarSeasonName.AutoIncrement = false;
				colvarSeasonName.IsNullable = false;
				colvarSeasonName.IsPrimaryKey = false;
				colvarSeasonName.IsForeignKey = false;
				colvarSeasonName.IsReadOnly = false;
				colvarSeasonName.DefaultSetting = @"";
				colvarSeasonName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonName);

				TableSchema.TableColumn colvarExcellentCreditScoreThreshold = new TableSchema.TableColumn(schema);
				colvarExcellentCreditScoreThreshold.ColumnName = "ExcellentCreditScoreThreshold";
				colvarExcellentCreditScoreThreshold.DataType = DbType.Int32;
				colvarExcellentCreditScoreThreshold.MaxLength = 0;
				colvarExcellentCreditScoreThreshold.AutoIncrement = false;
				colvarExcellentCreditScoreThreshold.IsNullable = false;
				colvarExcellentCreditScoreThreshold.IsPrimaryKey = false;
				colvarExcellentCreditScoreThreshold.IsForeignKey = false;
				colvarExcellentCreditScoreThreshold.IsReadOnly = false;
				colvarExcellentCreditScoreThreshold.DefaultSetting = @"";
				colvarExcellentCreditScoreThreshold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExcellentCreditScoreThreshold);

				TableSchema.TableColumn colvarPassCreditScoreThreshold = new TableSchema.TableColumn(schema);
				colvarPassCreditScoreThreshold.ColumnName = "PassCreditScoreThreshold";
				colvarPassCreditScoreThreshold.DataType = DbType.Int32;
				colvarPassCreditScoreThreshold.MaxLength = 0;
				colvarPassCreditScoreThreshold.AutoIncrement = false;
				colvarPassCreditScoreThreshold.IsNullable = false;
				colvarPassCreditScoreThreshold.IsPrimaryKey = false;
				colvarPassCreditScoreThreshold.IsForeignKey = false;
				colvarPassCreditScoreThreshold.IsReadOnly = false;
				colvarPassCreditScoreThreshold.DefaultSetting = @"";
				colvarPassCreditScoreThreshold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassCreditScoreThreshold);

				TableSchema.TableColumn colvarSubCreditScoreThreshold = new TableSchema.TableColumn(schema);
				colvarSubCreditScoreThreshold.ColumnName = "SubCreditScoreThreshold";
				colvarSubCreditScoreThreshold.DataType = DbType.Int32;
				colvarSubCreditScoreThreshold.MaxLength = 0;
				colvarSubCreditScoreThreshold.AutoIncrement = false;
				colvarSubCreditScoreThreshold.IsNullable = false;
				colvarSubCreditScoreThreshold.IsPrimaryKey = false;
				colvarSubCreditScoreThreshold.IsForeignKey = false;
				colvarSubCreditScoreThreshold.IsReadOnly = false;
				colvarSubCreditScoreThreshold.DefaultSetting = @"";
				colvarSubCreditScoreThreshold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubCreditScoreThreshold);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwQL_QualifyCustomerInfo",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public QL_QualifyCustomerInfoView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long LeadID {
			get { return GetColumnValue<long>(Columns.LeadID); }
			set { SetColumnValue(Columns.LeadID, value); }
		}
		[DataMember]
		public int SeasonId {
			get { return GetColumnValue<int>(Columns.SeasonId); }
			set { SetColumnValue(Columns.SeasonId, value); }
		}
		[DataMember]
		public string CustomerName {
			get { return GetColumnValue<string>(Columns.CustomerName); }
			set { SetColumnValue(Columns.CustomerName, value); }
		}
		[DataMember]
		public string CustomerEmail {
			get { return GetColumnValue<string>(Columns.CustomerEmail); }
			set { SetColumnValue(Columns.CustomerEmail, value); }
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set { SetColumnValue(Columns.DOB, value); }
		}
		[DataMember]
		public long AddressID {
			get { return GetColumnValue<long>(Columns.AddressID); }
			set { SetColumnValue(Columns.AddressID, value); }
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set { SetColumnValue(Columns.StreetAddress, value); }
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set { SetColumnValue(Columns.StreetAddress2, value); }
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set { SetColumnValue(Columns.StateId, value); }
		}
		[DataMember]
		public string County {
			get { return GetColumnValue<string>(Columns.County); }
			set { SetColumnValue(Columns.County, value); }
		}
		[DataMember]
		public int TimeZoneId {
			get { return GetColumnValue<int>(Columns.TimeZoneId); }
			set { SetColumnValue(Columns.TimeZoneId, value); }
		}
		[DataMember]
		public string TimeZoneName {
			get { return GetColumnValue<string>(Columns.TimeZoneName); }
			set { SetColumnValue(Columns.TimeZoneName, value); }
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set { SetColumnValue(Columns.PostalCode, value); }
		}
		[DataMember]
		public string Phone {
			get { return GetColumnValue<string>(Columns.Phone); }
			set { SetColumnValue(Columns.Phone, value); }
		}
		[DataMember]
		public long CreditReportID {
			get { return GetColumnValue<long>(Columns.CreditReportID); }
			set { SetColumnValue(Columns.CreditReportID, value); }
		}
		[DataMember]
		public bool IsHit {
			get { return GetColumnValue<bool>(Columns.IsHit); }
			set { SetColumnValue(Columns.IsHit, value); }
		}
		[DataMember]
		public string CRStatus {
			get { return GetColumnValue<string>(Columns.CRStatus); }
			set { SetColumnValue(Columns.CRStatus, value); }
		}
		[DataMember]
		public int Score {
			get { return GetColumnValue<int>(Columns.Score); }
			set { SetColumnValue(Columns.Score, value); }
		}
		[DataMember]
		public string BureauName {
			get { return GetColumnValue<string>(Columns.BureauName); }
			set { SetColumnValue(Columns.BureauName, value); }
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set { SetColumnValue(Columns.UserID, value); }
		}
		[DataMember]
		public string CompanyID {
			get { return GetColumnValue<string>(Columns.CompanyID); }
			set { SetColumnValue(Columns.CompanyID, value); }
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set { SetColumnValue(Columns.MiddleName, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string PreferredName {
			get { return GetColumnValue<string>(Columns.PreferredName); }
			set { SetColumnValue(Columns.PreferredName, value); }
		}
		[DataMember]
		public string RepEmail {
			get { return GetColumnValue<string>(Columns.RepEmail); }
			set { SetColumnValue(Columns.RepEmail, value); }
		}
		[DataMember]
		public string PhoneCell {
			get { return GetColumnValue<string>(Columns.PhoneCell); }
			set { SetColumnValue(Columns.PhoneCell, value); }
		}
		[DataMember]
		public short? PhoneCellCarrierID {
			get { return GetColumnValue<short?>(Columns.PhoneCellCarrierID); }
			set { SetColumnValue(Columns.PhoneCellCarrierID, value); }
		}
		[DataMember]
		public string PhoneCellCarrier {
			get { return GetColumnValue<string>(Columns.PhoneCellCarrier); }
			set { SetColumnValue(Columns.PhoneCellCarrier, value); }
		}
		[DataMember]
		public string SeasonName {
			get { return GetColumnValue<string>(Columns.SeasonName); }
			set { SetColumnValue(Columns.SeasonName, value); }
		}
		[DataMember]
		public int ExcellentCreditScoreThreshold {
			get { return GetColumnValue<int>(Columns.ExcellentCreditScoreThreshold); }
			set { SetColumnValue(Columns.ExcellentCreditScoreThreshold, value); }
		}
		[DataMember]
		public int PassCreditScoreThreshold {
			get { return GetColumnValue<int>(Columns.PassCreditScoreThreshold); }
			set { SetColumnValue(Columns.PassCreditScoreThreshold, value); }
		}
		[DataMember]
		public int SubCreditScoreThreshold {
			get { return GetColumnValue<int>(Columns.SubCreditScoreThreshold); }
			set { SetColumnValue(Columns.SubCreditScoreThreshold, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return LeadID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LeadIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerEmailColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AddressIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CountyColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn TimeZoneIdColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn TimeZoneNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PhoneColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreditReportIDColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsHitColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn CRStatusColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ScoreColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn BureauNameColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CompanyIDColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn PreferredNameColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn RepEmailColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn PhoneCellColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn PhoneCellCarrierIDColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn PhoneCellCarrierColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn SeasonNameColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn ExcellentCreditScoreThresholdColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn PassCreditScoreThresholdColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn SubCreditScoreThresholdColumn
		{
			get { return Schema.Columns[33]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string LeadID = @"LeadID";
			public const string SeasonId = @"SeasonId";
			public const string CustomerName = @"CustomerName";
			public const string CustomerEmail = @"CustomerEmail";
			public const string DOB = @"DOB";
			public const string AddressID = @"AddressID";
			public const string StreetAddress = @"StreetAddress";
			public const string StreetAddress2 = @"StreetAddress2";
			public const string City = @"City";
			public const string StateId = @"StateId";
			public const string County = @"County";
			public const string TimeZoneId = @"TimeZoneId";
			public const string TimeZoneName = @"TimeZoneName";
			public const string PostalCode = @"PostalCode";
			public const string Phone = @"Phone";
			public const string CreditReportID = @"CreditReportID";
			public const string IsHit = @"IsHit";
			public const string CRStatus = @"CRStatus";
			public const string Score = @"Score";
			public const string BureauName = @"BureauName";
			public const string UserID = @"UserID";
			public const string CompanyID = @"CompanyID";
			public const string FirstName = @"FirstName";
			public const string MiddleName = @"MiddleName";
			public const string LastName = @"LastName";
			public const string PreferredName = @"PreferredName";
			public const string RepEmail = @"RepEmail";
			public const string PhoneCell = @"PhoneCell";
			public const string PhoneCellCarrierID = @"PhoneCellCarrierID";
			public const string PhoneCellCarrier = @"PhoneCellCarrier";
			public const string SeasonName = @"SeasonName";
			public const string ExcellentCreditScoreThreshold = @"ExcellentCreditScoreThreshold";
			public const string PassCreditScoreThreshold = @"PassCreditScoreThreshold";
			public const string SubCreditScoreThreshold = @"SubCreditScoreThreshold";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the RandNumberView class.
	/// </summary>
	[DataContract]
	public partial class RandNumberViewCollection : ReadOnlyList<RandNumberView, RandNumberViewCollection>
	{
		public static RandNumberViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RandNumberViewCollection result = new RandNumberViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwRandNumber view.
	/// </summary>
	[DataContract]
	public partial class RandNumberView : ReadOnlyRecord<RandNumberView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwRandNumber", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarrndResult = new TableSchema.TableColumn(schema);
				colvarrndResult.ColumnName = "rndResult";
				colvarrndResult.DataType = DbType.Double;
				colvarrndResult.MaxLength = 0;
				colvarrndResult.AutoIncrement = false;
				colvarrndResult.IsNullable = true;
				colvarrndResult.IsPrimaryKey = false;
				colvarrndResult.IsForeignKey = false;
				colvarrndResult.IsReadOnly = false;
				colvarrndResult.DefaultSetting = @"";
				colvarrndResult.ForeignKeyTableName = "";
				schema.Columns.Add(colvarrndResult);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwRandNumber",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public RandNumberView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public double? rndResult {
			get { return GetColumnValue<double?>(Columns.rndResult); }
			set { SetColumnValue(Columns.rndResult, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return rndResult.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn rndResultColumn
		{
			get { return Schema.Columns[0]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string rndResult = @"rndResult";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the SAE_BillingHistoryView class.
	/// </summary>
	[DataContract]
	public partial class SAE_BillingHistoryViewCollection : ReadOnlyList<SAE_BillingHistoryView, SAE_BillingHistoryViewCollection>
	{
		public static SAE_BillingHistoryViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_BillingHistoryViewCollection result = new SAE_BillingHistoryViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwSAE_BillingHistory view.
	/// </summary>
	[DataContract]
	public partial class SAE_BillingHistoryView : ReadOnlyRecord<SAE_BillingHistoryView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwSAE_BillingHistory", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarBillingType = new TableSchema.TableColumn(schema);
				colvarBillingType.ColumnName = "BillingType";
				colvarBillingType.DataType = DbType.AnsiString;
				colvarBillingType.MaxLength = 7;
				colvarBillingType.AutoIncrement = false;
				colvarBillingType.IsNullable = false;
				colvarBillingType.IsPrimaryKey = false;
				colvarBillingType.IsForeignKey = false;
				colvarBillingType.IsReadOnly = false;
				colvarBillingType.DefaultSetting = @"";
				colvarBillingType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingType);

				TableSchema.TableColumn colvarBillingDate = new TableSchema.TableColumn(schema);
				colvarBillingDate.ColumnName = "BillingDate";
				colvarBillingDate.DataType = DbType.DateTime;
				colvarBillingDate.MaxLength = 0;
				colvarBillingDate.AutoIncrement = false;
				colvarBillingDate.IsNullable = true;
				colvarBillingDate.IsPrimaryKey = false;
				colvarBillingDate.IsForeignKey = false;
				colvarBillingDate.IsReadOnly = false;
				colvarBillingDate.DefaultSetting = @"";
				colvarBillingDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingDate);

				TableSchema.TableColumn colvarBillingNumber = new TableSchema.TableColumn(schema);
				colvarBillingNumber.ColumnName = "BillingNumber";
				colvarBillingNumber.DataType = DbType.AnsiString;
				colvarBillingNumber.MaxLength = 50;
				colvarBillingNumber.AutoIncrement = false;
				colvarBillingNumber.IsNullable = true;
				colvarBillingNumber.IsPrimaryKey = false;
				colvarBillingNumber.IsForeignKey = false;
				colvarBillingNumber.IsReadOnly = false;
				colvarBillingNumber.DefaultSetting = @"";
				colvarBillingNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingNumber);

				TableSchema.TableColumn colvarBillingAmount = new TableSchema.TableColumn(schema);
				colvarBillingAmount.ColumnName = "BillingAmount";
				colvarBillingAmount.DataType = DbType.Currency;
				colvarBillingAmount.MaxLength = 0;
				colvarBillingAmount.AutoIncrement = false;
				colvarBillingAmount.IsNullable = true;
				colvarBillingAmount.IsPrimaryKey = false;
				colvarBillingAmount.IsForeignKey = false;
				colvarBillingAmount.IsReadOnly = false;
				colvarBillingAmount.DefaultSetting = @"";
				colvarBillingAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingAmount);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwSAE_BillingHistory",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public SAE_BillingHistoryView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public string BillingType {
			get { return GetColumnValue<string>(Columns.BillingType); }
			set { SetColumnValue(Columns.BillingType, value); }
		}
		[DataMember]
		public DateTime? BillingDate {
			get { return GetColumnValue<DateTime?>(Columns.BillingDate); }
			set { SetColumnValue(Columns.BillingDate, value); }
		}
		[DataMember]
		public string BillingNumber {
			get { return GetColumnValue<string>(Columns.BillingNumber); }
			set { SetColumnValue(Columns.BillingNumber, value); }
		}
		[DataMember]
		public decimal? BillingAmount {
			get { return GetColumnValue<decimal?>(Columns.BillingAmount); }
			set { SetColumnValue(Columns.BillingAmount, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return BillingType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BillingTypeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BillingDateColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BillingNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn BillingAmountColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string BillingType = @"BillingType";
			public const string BillingDate = @"BillingDate";
			public const string BillingNumber = @"BillingNumber";
			public const string BillingAmount = @"BillingAmount";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the SAE_BillingInfoSummaryView class.
	/// </summary>
	[DataContract]
	public partial class SAE_BillingInfoSummaryViewCollection : ReadOnlyList<SAE_BillingInfoSummaryView, SAE_BillingInfoSummaryViewCollection>
	{
		public static SAE_BillingInfoSummaryViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_BillingInfoSummaryViewCollection result = new SAE_BillingInfoSummaryViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwSAE_BillingInfoSummary view.
	/// </summary>
	[DataContract]
	public partial class SAE_BillingInfoSummaryView : ReadOnlyRecord<SAE_BillingInfoSummaryView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwSAE_BillingInfoSummary", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSummaryID = new TableSchema.TableColumn(schema);
				colvarSummaryID.ColumnName = "SummaryID";
				colvarSummaryID.DataType = DbType.Int64;
				colvarSummaryID.MaxLength = 0;
				colvarSummaryID.AutoIncrement = false;
				colvarSummaryID.IsNullable = false;
				colvarSummaryID.IsPrimaryKey = false;
				colvarSummaryID.IsForeignKey = false;
				colvarSummaryID.IsReadOnly = false;
				colvarSummaryID.DefaultSetting = @"";
				colvarSummaryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSummaryID);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarAccountName = new TableSchema.TableColumn(schema);
				colvarAccountName.ColumnName = "AccountName";
				colvarAccountName.DataType = DbType.String;
				colvarAccountName.MaxLength = 100;
				colvarAccountName.AutoIncrement = false;
				colvarAccountName.IsNullable = true;
				colvarAccountName.IsPrimaryKey = false;
				colvarAccountName.IsForeignKey = false;
				colvarAccountName.IsReadOnly = false;
				colvarAccountName.DefaultSetting = @"";
				colvarAccountName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountName);

				TableSchema.TableColumn colvarAccountDesc = new TableSchema.TableColumn(schema);
				colvarAccountDesc.ColumnName = "AccountDesc";
				colvarAccountDesc.DataType = DbType.String;
				colvarAccountDesc.MaxLength = -1;
				colvarAccountDesc.AutoIncrement = false;
				colvarAccountDesc.IsNullable = true;
				colvarAccountDesc.IsPrimaryKey = false;
				colvarAccountDesc.IsForeignKey = false;
				colvarAccountDesc.IsReadOnly = false;
				colvarAccountDesc.DefaultSetting = @"";
				colvarAccountDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountDesc);

				TableSchema.TableColumn colvarAmountDue = new TableSchema.TableColumn(schema);
				colvarAmountDue.ColumnName = "AmountDue";
				colvarAmountDue.DataType = DbType.Currency;
				colvarAmountDue.MaxLength = 0;
				colvarAmountDue.AutoIncrement = false;
				colvarAmountDue.IsNullable = true;
				colvarAmountDue.IsPrimaryKey = false;
				colvarAmountDue.IsForeignKey = false;
				colvarAmountDue.IsReadOnly = false;
				colvarAmountDue.DefaultSetting = @"";
				colvarAmountDue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmountDue);

				TableSchema.TableColumn colvarDueDate = new TableSchema.TableColumn(schema);
				colvarDueDate.ColumnName = "DueDate";
				colvarDueDate.DataType = DbType.DateTime;
				colvarDueDate.MaxLength = 0;
				colvarDueDate.AutoIncrement = false;
				colvarDueDate.IsNullable = true;
				colvarDueDate.IsPrimaryKey = false;
				colvarDueDate.IsForeignKey = false;
				colvarDueDate.IsReadOnly = false;
				colvarDueDate.DefaultSetting = @"";
				colvarDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDueDate);

				TableSchema.TableColumn colvarNumberOfUnites = new TableSchema.TableColumn(schema);
				colvarNumberOfUnites.ColumnName = "NumberOfUnites";
				colvarNumberOfUnites.DataType = DbType.Int16;
				colvarNumberOfUnites.MaxLength = 0;
				colvarNumberOfUnites.AutoIncrement = false;
				colvarNumberOfUnites.IsNullable = true;
				colvarNumberOfUnites.IsPrimaryKey = false;
				colvarNumberOfUnites.IsForeignKey = false;
				colvarNumberOfUnites.IsReadOnly = false;
				colvarNumberOfUnites.DefaultSetting = @"";
				colvarNumberOfUnites.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumberOfUnites);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwSAE_BillingInfoSummary",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public SAE_BillingInfoSummaryView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long SummaryID {
			get { return GetColumnValue<long>(Columns.SummaryID); }
			set { SetColumnValue(Columns.SummaryID, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public string AccountName {
			get { return GetColumnValue<string>(Columns.AccountName); }
			set { SetColumnValue(Columns.AccountName, value); }
		}
		[DataMember]
		public string AccountDesc {
			get { return GetColumnValue<string>(Columns.AccountDesc); }
			set { SetColumnValue(Columns.AccountDesc, value); }
		}
		[DataMember]
		public decimal? AmountDue {
			get { return GetColumnValue<decimal?>(Columns.AmountDue); }
			set { SetColumnValue(Columns.AmountDue, value); }
		}
		[DataMember]
		public DateTime? DueDate {
			get { return GetColumnValue<DateTime?>(Columns.DueDate); }
			set { SetColumnValue(Columns.DueDate, value); }
		}
		[DataMember]
		public short? NumberOfUnites {
			get { return GetColumnValue<short?>(Columns.NumberOfUnites); }
			set { SetColumnValue(Columns.NumberOfUnites, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return SummaryID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SummaryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AccountDescColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AmountDueColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DueDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn NumberOfUnitesColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string SummaryID = @"SummaryID";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string AccountId = @"AccountId";
			public const string AccountName = @"AccountName";
			public const string AccountDesc = @"AccountDesc";
			public const string AmountDue = @"AmountDue";
			public const string DueDate = @"DueDate";
			public const string NumberOfUnites = @"NumberOfUnites";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the SE_AccountTicketsView class.
	/// </summary>
	[DataContract]
	public partial class SE_AccountTicketsViewCollection : ReadOnlyList<SE_AccountTicketsView, SE_AccountTicketsViewCollection>
	{
		public static SE_AccountTicketsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_AccountTicketsViewCollection result = new SE_AccountTicketsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwSE_AccountTickets view.
	/// </summary>
	[DataContract]
	public partial class SE_AccountTicketsView : ReadOnlyRecord<SE_AccountTicketsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwSE_AccountTickets", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTicketID = new TableSchema.TableColumn(schema);
				colvarTicketID.ColumnName = "TicketID";
				colvarTicketID.DataType = DbType.Int64;
				colvarTicketID.MaxLength = 0;
				colvarTicketID.AutoIncrement = false;
				colvarTicketID.IsNullable = false;
				colvarTicketID.IsPrimaryKey = false;
				colvarTicketID.IsForeignKey = false;
				colvarTicketID.IsReadOnly = false;
				colvarTicketID.DefaultSetting = @"";
				colvarTicketID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarMonitoringStationNo = new TableSchema.TableColumn(schema);
				colvarMonitoringStationNo.ColumnName = "MonitoringStationNo";
				colvarMonitoringStationNo.DataType = DbType.Int64;
				colvarMonitoringStationNo.MaxLength = 0;
				colvarMonitoringStationNo.AutoIncrement = false;
				colvarMonitoringStationNo.IsNullable = true;
				colvarMonitoringStationNo.IsPrimaryKey = false;
				colvarMonitoringStationNo.IsForeignKey = false;
				colvarMonitoringStationNo.IsReadOnly = false;
				colvarMonitoringStationNo.DefaultSetting = @"";
				colvarMonitoringStationNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationNo);

				TableSchema.TableColumn colvarTicketTypeId = new TableSchema.TableColumn(schema);
				colvarTicketTypeId.ColumnName = "TicketTypeId";
				colvarTicketTypeId.DataType = DbType.Int32;
				colvarTicketTypeId.MaxLength = 0;
				colvarTicketTypeId.AutoIncrement = false;
				colvarTicketTypeId.IsNullable = false;
				colvarTicketTypeId.IsPrimaryKey = false;
				colvarTicketTypeId.IsForeignKey = false;
				colvarTicketTypeId.IsReadOnly = false;
				colvarTicketTypeId.DefaultSetting = @"";
				colvarTicketTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketTypeId);

				TableSchema.TableColumn colvarTicketTypeName = new TableSchema.TableColumn(schema);
				colvarTicketTypeName.ColumnName = "TicketTypeName";
				colvarTicketTypeName.DataType = DbType.String;
				colvarTicketTypeName.MaxLength = 50;
				colvarTicketTypeName.AutoIncrement = false;
				colvarTicketTypeName.IsNullable = false;
				colvarTicketTypeName.IsPrimaryKey = false;
				colvarTicketTypeName.IsForeignKey = false;
				colvarTicketTypeName.IsReadOnly = false;
				colvarTicketTypeName.DefaultSetting = @"";
				colvarTicketTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketTypeName);

				TableSchema.TableColumn colvarStatusCodeId = new TableSchema.TableColumn(schema);
				colvarStatusCodeId.ColumnName = "StatusCodeId";
				colvarStatusCodeId.DataType = DbType.Int32;
				colvarStatusCodeId.MaxLength = 0;
				colvarStatusCodeId.AutoIncrement = false;
				colvarStatusCodeId.IsNullable = false;
				colvarStatusCodeId.IsPrimaryKey = false;
				colvarStatusCodeId.IsForeignKey = false;
				colvarStatusCodeId.IsReadOnly = false;
				colvarStatusCodeId.DefaultSetting = @"";
				colvarStatusCodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusCodeId);

				TableSchema.TableColumn colvarStatusCode = new TableSchema.TableColumn(schema);
				colvarStatusCode.ColumnName = "StatusCode";
				colvarStatusCode.DataType = DbType.String;
				colvarStatusCode.MaxLength = 50;
				colvarStatusCode.AutoIncrement = false;
				colvarStatusCode.IsNullable = false;
				colvarStatusCode.IsPrimaryKey = false;
				colvarStatusCode.IsForeignKey = false;
				colvarStatusCode.IsReadOnly = false;
				colvarStatusCode.DefaultSetting = @"";
				colvarStatusCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusCode);

				TableSchema.TableColumn colvarMoniConfirmation = new TableSchema.TableColumn(schema);
				colvarMoniConfirmation.ColumnName = "MoniConfirmation";
				colvarMoniConfirmation.DataType = DbType.String;
				colvarMoniConfirmation.MaxLength = 50;
				colvarMoniConfirmation.AutoIncrement = false;
				colvarMoniConfirmation.IsNullable = true;
				colvarMoniConfirmation.IsPrimaryKey = false;
				colvarMoniConfirmation.IsForeignKey = false;
				colvarMoniConfirmation.IsReadOnly = false;
				colvarMoniConfirmation.DefaultSetting = @"";
				colvarMoniConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoniConfirmation);

				TableSchema.TableColumn colvarTechnicianId = new TableSchema.TableColumn(schema);
				colvarTechnicianId.ColumnName = "TechnicianId";
				colvarTechnicianId.DataType = DbType.AnsiString;
				colvarTechnicianId.MaxLength = 20;
				colvarTechnicianId.AutoIncrement = false;
				colvarTechnicianId.IsNullable = true;
				colvarTechnicianId.IsPrimaryKey = false;
				colvarTechnicianId.IsForeignKey = false;
				colvarTechnicianId.IsReadOnly = false;
				colvarTechnicianId.DefaultSetting = @"";
				colvarTechnicianId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianId);

				TableSchema.TableColumn colvarTechnicianName = new TableSchema.TableColumn(schema);
				colvarTechnicianName.ColumnName = "TechnicianName";
				colvarTechnicianName.DataType = DbType.String;
				colvarTechnicianName.MaxLength = 250;
				colvarTechnicianName.AutoIncrement = false;
				colvarTechnicianName.IsNullable = true;
				colvarTechnicianName.IsPrimaryKey = false;
				colvarTechnicianName.IsForeignKey = false;
				colvarTechnicianName.IsReadOnly = false;
				colvarTechnicianName.DefaultSetting = @"";
				colvarTechnicianName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianName);

				TableSchema.TableColumn colvarTripCharges = new TableSchema.TableColumn(schema);
				colvarTripCharges.ColumnName = "TripCharges";
				colvarTripCharges.DataType = DbType.Currency;
				colvarTripCharges.MaxLength = 0;
				colvarTripCharges.AutoIncrement = false;
				colvarTripCharges.IsNullable = true;
				colvarTripCharges.IsPrimaryKey = false;
				colvarTripCharges.IsForeignKey = false;
				colvarTripCharges.IsReadOnly = false;
				colvarTripCharges.DefaultSetting = @"";
				colvarTripCharges.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTripCharges);

				TableSchema.TableColumn colvarAppointment = new TableSchema.TableColumn(schema);
				colvarAppointment.ColumnName = "Appointment";
				colvarAppointment.DataType = DbType.String;
				colvarAppointment.MaxLength = 50;
				colvarAppointment.AutoIncrement = false;
				colvarAppointment.IsNullable = true;
				colvarAppointment.IsPrimaryKey = false;
				colvarAppointment.IsForeignKey = false;
				colvarAppointment.IsReadOnly = false;
				colvarAppointment.DefaultSetting = @"";
				colvarAppointment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppointment);

				TableSchema.TableColumn colvarAgentConfirmation = new TableSchema.TableColumn(schema);
				colvarAgentConfirmation.ColumnName = "AgentConfirmation";
				colvarAgentConfirmation.DataType = DbType.String;
				colvarAgentConfirmation.MaxLength = 50;
				colvarAgentConfirmation.AutoIncrement = false;
				colvarAgentConfirmation.IsNullable = true;
				colvarAgentConfirmation.IsPrimaryKey = false;
				colvarAgentConfirmation.IsForeignKey = false;
				colvarAgentConfirmation.IsReadOnly = false;
				colvarAgentConfirmation.DefaultSetting = @"";
				colvarAgentConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgentConfirmation);

				TableSchema.TableColumn colvarExpirationDate = new TableSchema.TableColumn(schema);
				colvarExpirationDate.ColumnName = "ExpirationDate";
				colvarExpirationDate.DataType = DbType.DateTime;
				colvarExpirationDate.MaxLength = 0;
				colvarExpirationDate.AutoIncrement = false;
				colvarExpirationDate.IsNullable = true;
				colvarExpirationDate.IsPrimaryKey = false;
				colvarExpirationDate.IsForeignKey = false;
				colvarExpirationDate.IsReadOnly = false;
				colvarExpirationDate.DefaultSetting = @"";
				colvarExpirationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpirationDate);

				TableSchema.TableColumn colvarNotes = new TableSchema.TableColumn(schema);
				colvarNotes.ColumnName = "Notes";
				colvarNotes.DataType = DbType.String;
				colvarNotes.MaxLength = 1000;
				colvarNotes.AutoIncrement = false;
				colvarNotes.IsNullable = true;
				colvarNotes.IsPrimaryKey = false;
				colvarNotes.IsForeignKey = false;
				colvarNotes.IsReadOnly = false;
				colvarNotes.DefaultSetting = @"";
				colvarNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotes);

				TableSchema.TableColumn colvarIsTechEnRoute = new TableSchema.TableColumn(schema);
				colvarIsTechEnRoute.ColumnName = "IsTechEnRoute";
				colvarIsTechEnRoute.DataType = DbType.Boolean;
				colvarIsTechEnRoute.MaxLength = 0;
				colvarIsTechEnRoute.AutoIncrement = false;
				colvarIsTechEnRoute.IsNullable = false;
				colvarIsTechEnRoute.IsPrimaryKey = false;
				colvarIsTechEnRoute.IsForeignKey = false;
				colvarIsTechEnRoute.IsReadOnly = false;
				colvarIsTechEnRoute.DefaultSetting = @"";
				colvarIsTechEnRoute.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechEnRoute);

				TableSchema.TableColumn colvarIsTechDelayed = new TableSchema.TableColumn(schema);
				colvarIsTechDelayed.ColumnName = "IsTechDelayed";
				colvarIsTechDelayed.DataType = DbType.Boolean;
				colvarIsTechDelayed.MaxLength = 0;
				colvarIsTechDelayed.AutoIncrement = false;
				colvarIsTechDelayed.IsNullable = false;
				colvarIsTechDelayed.IsPrimaryKey = false;
				colvarIsTechDelayed.IsForeignKey = false;
				colvarIsTechDelayed.IsReadOnly = false;
				colvarIsTechDelayed.DefaultSetting = @"";
				colvarIsTechDelayed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechDelayed);

				TableSchema.TableColumn colvarIsTechCompleted = new TableSchema.TableColumn(schema);
				colvarIsTechCompleted.ColumnName = "IsTechCompleted";
				colvarIsTechCompleted.DataType = DbType.Boolean;
				colvarIsTechCompleted.MaxLength = 0;
				colvarIsTechCompleted.AutoIncrement = false;
				colvarIsTechCompleted.IsNullable = false;
				colvarIsTechCompleted.IsPrimaryKey = false;
				colvarIsTechCompleted.IsForeignKey = false;
				colvarIsTechCompleted.IsReadOnly = false;
				colvarIsTechCompleted.DefaultSetting = @"";
				colvarIsTechCompleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechCompleted);

				TableSchema.TableColumn colvarConfirmationNo = new TableSchema.TableColumn(schema);
				colvarConfirmationNo.ColumnName = "ConfirmationNo";
				colvarConfirmationNo.DataType = DbType.String;
				colvarConfirmationNo.MaxLength = 50;
				colvarConfirmationNo.AutoIncrement = false;
				colvarConfirmationNo.IsNullable = true;
				colvarConfirmationNo.IsPrimaryKey = false;
				colvarConfirmationNo.IsForeignKey = false;
				colvarConfirmationNo.IsReadOnly = false;
				colvarConfirmationNo.DefaultSetting = @"";
				colvarConfirmationNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConfirmationNo);

				TableSchema.TableColumn colvarClosingNote = new TableSchema.TableColumn(schema);
				colvarClosingNote.ColumnName = "ClosingNote";
				colvarClosingNote.DataType = DbType.String;
				colvarClosingNote.MaxLength = 1000;
				colvarClosingNote.AutoIncrement = false;
				colvarClosingNote.IsNullable = true;
				colvarClosingNote.IsPrimaryKey = false;
				colvarClosingNote.IsForeignKey = false;
				colvarClosingNote.IsReadOnly = false;
				colvarClosingNote.DefaultSetting = @"";
				colvarClosingNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClosingNote);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwSE_AccountTickets",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public SE_AccountTicketsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long TicketID {
			get { return GetColumnValue<long>(Columns.TicketID); }
			set { SetColumnValue(Columns.TicketID, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public long? MonitoringStationNo {
			get { return GetColumnValue<long?>(Columns.MonitoringStationNo); }
			set { SetColumnValue(Columns.MonitoringStationNo, value); }
		}
		[DataMember]
		public int TicketTypeId {
			get { return GetColumnValue<int>(Columns.TicketTypeId); }
			set { SetColumnValue(Columns.TicketTypeId, value); }
		}
		[DataMember]
		public string TicketTypeName {
			get { return GetColumnValue<string>(Columns.TicketTypeName); }
			set { SetColumnValue(Columns.TicketTypeName, value); }
		}
		[DataMember]
		public int StatusCodeId {
			get { return GetColumnValue<int>(Columns.StatusCodeId); }
			set { SetColumnValue(Columns.StatusCodeId, value); }
		}
		[DataMember]
		public string StatusCode {
			get { return GetColumnValue<string>(Columns.StatusCode); }
			set { SetColumnValue(Columns.StatusCode, value); }
		}
		[DataMember]
		public string MoniConfirmation {
			get { return GetColumnValue<string>(Columns.MoniConfirmation); }
			set { SetColumnValue(Columns.MoniConfirmation, value); }
		}
		[DataMember]
		public string TechnicianId {
			get { return GetColumnValue<string>(Columns.TechnicianId); }
			set { SetColumnValue(Columns.TechnicianId, value); }
		}
		[DataMember]
		public string TechnicianName {
			get { return GetColumnValue<string>(Columns.TechnicianName); }
			set { SetColumnValue(Columns.TechnicianName, value); }
		}
		[DataMember]
		public decimal? TripCharges {
			get { return GetColumnValue<decimal?>(Columns.TripCharges); }
			set { SetColumnValue(Columns.TripCharges, value); }
		}
		[DataMember]
		public string Appointment {
			get { return GetColumnValue<string>(Columns.Appointment); }
			set { SetColumnValue(Columns.Appointment, value); }
		}
		[DataMember]
		public string AgentConfirmation {
			get { return GetColumnValue<string>(Columns.AgentConfirmation); }
			set { SetColumnValue(Columns.AgentConfirmation, value); }
		}
		[DataMember]
		public DateTime? ExpirationDate {
			get { return GetColumnValue<DateTime?>(Columns.ExpirationDate); }
			set { SetColumnValue(Columns.ExpirationDate, value); }
		}
		[DataMember]
		public string Notes {
			get { return GetColumnValue<string>(Columns.Notes); }
			set { SetColumnValue(Columns.Notes, value); }
		}
		[DataMember]
		public bool IsTechEnRoute {
			get { return GetColumnValue<bool>(Columns.IsTechEnRoute); }
			set { SetColumnValue(Columns.IsTechEnRoute, value); }
		}
		[DataMember]
		public bool IsTechDelayed {
			get { return GetColumnValue<bool>(Columns.IsTechDelayed); }
			set { SetColumnValue(Columns.IsTechDelayed, value); }
		}
		[DataMember]
		public bool IsTechCompleted {
			get { return GetColumnValue<bool>(Columns.IsTechCompleted); }
			set { SetColumnValue(Columns.IsTechCompleted, value); }
		}
		[DataMember]
		public string ConfirmationNo {
			get { return GetColumnValue<string>(Columns.ConfirmationNo); }
			set { SetColumnValue(Columns.ConfirmationNo, value); }
		}
		[DataMember]
		public string ClosingNote {
			get { return GetColumnValue<string>(Columns.ClosingNote); }
			set { SetColumnValue(Columns.ClosingNote, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return TicketID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TicketIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitoringStationNoColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TicketTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TicketTypeNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StatusCodeIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn StatusCodeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn MoniConfirmationColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn TechnicianIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn TechnicianNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn TripChargesColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn AppointmentColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn AgentConfirmationColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ExpirationDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn NotesColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsTechEnRouteColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsTechDelayedColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsTechCompletedColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ConfirmationNoColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn ClosingNoteColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[20]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string TicketID = @"TicketID";
			public const string AccountId = @"AccountId";
			public const string MonitoringStationNo = @"MonitoringStationNo";
			public const string TicketTypeId = @"TicketTypeId";
			public const string TicketTypeName = @"TicketTypeName";
			public const string StatusCodeId = @"StatusCodeId";
			public const string StatusCode = @"StatusCode";
			public const string MoniConfirmation = @"MoniConfirmation";
			public const string TechnicianId = @"TechnicianId";
			public const string TechnicianName = @"TechnicianName";
			public const string TripCharges = @"TripCharges";
			public const string Appointment = @"Appointment";
			public const string AgentConfirmation = @"AgentConfirmation";
			public const string ExpirationDate = @"ExpirationDate";
			public const string Notes = @"Notes";
			public const string IsTechEnRoute = @"IsTechEnRoute";
			public const string IsTechDelayed = @"IsTechDelayed";
			public const string IsTechCompleted = @"IsTechCompleted";
			public const string ConfirmationNo = @"ConfirmationNo";
			public const string ClosingNote = @"ClosingNote";
			public const string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the SE_ScheduleBlocksView class.
	/// </summary>
	[DataContract]
	public partial class SE_ScheduleBlocksViewCollection : ReadOnlyList<SE_ScheduleBlocksView, SE_ScheduleBlocksViewCollection>
	{
		public static SE_ScheduleBlocksViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_ScheduleBlocksViewCollection result = new SE_ScheduleBlocksViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwSE_ScheduleBlocks view.
	/// </summary>
	[DataContract]
	public partial class SE_ScheduleBlocksView : ReadOnlyRecord<SE_ScheduleBlocksView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwSE_ScheduleBlocks", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBlockID = new TableSchema.TableColumn(schema);
				colvarBlockID.ColumnName = "BlockID";
				colvarBlockID.DataType = DbType.Int64;
				colvarBlockID.MaxLength = 0;
				colvarBlockID.AutoIncrement = true;
				colvarBlockID.IsNullable = false;
				colvarBlockID.IsPrimaryKey = false;
				colvarBlockID.IsForeignKey = false;
				colvarBlockID.IsReadOnly = false;
				colvarBlockID.DefaultSetting = @"";
				colvarBlockID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBlockID);

				TableSchema.TableColumn colvarBlock = new TableSchema.TableColumn(schema);
				colvarBlock.ColumnName = "Block";
				colvarBlock.DataType = DbType.String;
				colvarBlock.MaxLength = 2;
				colvarBlock.AutoIncrement = false;
				colvarBlock.IsNullable = false;
				colvarBlock.IsPrimaryKey = false;
				colvarBlock.IsForeignKey = false;
				colvarBlock.IsReadOnly = false;
				colvarBlock.DefaultSetting = @"";
				colvarBlock.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBlock);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.String;
				colvarZipCode.MaxLength = 5;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = true;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarMaxRadius = new TableSchema.TableColumn(schema);
				colvarMaxRadius.ColumnName = "MaxRadius";
				colvarMaxRadius.DataType = DbType.Double;
				colvarMaxRadius.MaxLength = 0;
				colvarMaxRadius.AutoIncrement = false;
				colvarMaxRadius.IsNullable = true;
				colvarMaxRadius.IsPrimaryKey = false;
				colvarMaxRadius.IsForeignKey = false;
				colvarMaxRadius.IsReadOnly = false;
				colvarMaxRadius.DefaultSetting = @"";
				colvarMaxRadius.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxRadius);

				TableSchema.TableColumn colvarDistance = new TableSchema.TableColumn(schema);
				colvarDistance.ColumnName = "Distance";
				colvarDistance.DataType = DbType.Double;
				colvarDistance.MaxLength = 0;
				colvarDistance.AutoIncrement = false;
				colvarDistance.IsNullable = true;
				colvarDistance.IsPrimaryKey = false;
				colvarDistance.IsForeignKey = false;
				colvarDistance.IsReadOnly = false;
				colvarDistance.DefaultSetting = @"";
				colvarDistance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDistance);

				TableSchema.TableColumn colvarStartTime = new TableSchema.TableColumn(schema);
				colvarStartTime.ColumnName = "StartTime";
				colvarStartTime.DataType = DbType.DateTime;
				colvarStartTime.MaxLength = 0;
				colvarStartTime.AutoIncrement = false;
				colvarStartTime.IsNullable = true;
				colvarStartTime.IsPrimaryKey = false;
				colvarStartTime.IsForeignKey = false;
				colvarStartTime.IsReadOnly = false;
				colvarStartTime.DefaultSetting = @"";
				colvarStartTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartTime);

				TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
				colvarEndTime.ColumnName = "EndTime";
				colvarEndTime.DataType = DbType.DateTime;
				colvarEndTime.MaxLength = 0;
				colvarEndTime.AutoIncrement = false;
				colvarEndTime.IsNullable = true;
				colvarEndTime.IsPrimaryKey = false;
				colvarEndTime.IsForeignKey = false;
				colvarEndTime.IsReadOnly = false;
				colvarEndTime.DefaultSetting = @"";
				colvarEndTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndTime);

				TableSchema.TableColumn colvarAvailableSlots = new TableSchema.TableColumn(schema);
				colvarAvailableSlots.ColumnName = "AvailableSlots";
				colvarAvailableSlots.DataType = DbType.Int32;
				colvarAvailableSlots.MaxLength = 0;
				colvarAvailableSlots.AutoIncrement = false;
				colvarAvailableSlots.IsNullable = true;
				colvarAvailableSlots.IsPrimaryKey = false;
				colvarAvailableSlots.IsForeignKey = false;
				colvarAvailableSlots.IsReadOnly = false;
				colvarAvailableSlots.DefaultSetting = @"";
				colvarAvailableSlots.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAvailableSlots);

				TableSchema.TableColumn colvarTechnicianId = new TableSchema.TableColumn(schema);
				colvarTechnicianId.ColumnName = "TechnicianId";
				colvarTechnicianId.DataType = DbType.AnsiString;
				colvarTechnicianId.MaxLength = 20;
				colvarTechnicianId.AutoIncrement = false;
				colvarTechnicianId.IsNullable = true;
				colvarTechnicianId.IsPrimaryKey = false;
				colvarTechnicianId.IsForeignKey = false;
				colvarTechnicianId.IsReadOnly = false;
				colvarTechnicianId.DefaultSetting = @"";
				colvarTechnicianId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianId);

				TableSchema.TableColumn colvarTechnicianName = new TableSchema.TableColumn(schema);
				colvarTechnicianName.ColumnName = "TechnicianName";
				colvarTechnicianName.DataType = DbType.String;
				colvarTechnicianName.MaxLength = 250;
				colvarTechnicianName.AutoIncrement = false;
				colvarTechnicianName.IsNullable = true;
				colvarTechnicianName.IsPrimaryKey = false;
				colvarTechnicianName.IsForeignKey = false;
				colvarTechnicianName.IsReadOnly = false;
				colvarTechnicianName.DefaultSetting = @"";
				colvarTechnicianName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianName);

				TableSchema.TableColumn colvarIsTechConfirmed = new TableSchema.TableColumn(schema);
				colvarIsTechConfirmed.ColumnName = "IsTechConfirmed";
				colvarIsTechConfirmed.DataType = DbType.Boolean;
				colvarIsTechConfirmed.MaxLength = 0;
				colvarIsTechConfirmed.AutoIncrement = false;
				colvarIsTechConfirmed.IsNullable = true;
				colvarIsTechConfirmed.IsPrimaryKey = false;
				colvarIsTechConfirmed.IsForeignKey = false;
				colvarIsTechConfirmed.IsReadOnly = false;
				colvarIsTechConfirmed.DefaultSetting = @"";
				colvarIsTechConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechConfirmed);

				TableSchema.TableColumn colvarDateTechConfirmed = new TableSchema.TableColumn(schema);
				colvarDateTechConfirmed.ColumnName = "DateTechConfirmed";
				colvarDateTechConfirmed.DataType = DbType.DateTime;
				colvarDateTechConfirmed.MaxLength = 0;
				colvarDateTechConfirmed.AutoIncrement = false;
				colvarDateTechConfirmed.IsNullable = true;
				colvarDateTechConfirmed.IsPrimaryKey = false;
				colvarDateTechConfirmed.IsForeignKey = false;
				colvarDateTechConfirmed.IsReadOnly = false;
				colvarDateTechConfirmed.DefaultSetting = @"";
				colvarDateTechConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateTechConfirmed);

				TableSchema.TableColumn colvarBlockLatitude = new TableSchema.TableColumn(schema);
				colvarBlockLatitude.ColumnName = "BlockLatitude";
				colvarBlockLatitude.DataType = DbType.Double;
				colvarBlockLatitude.MaxLength = 0;
				colvarBlockLatitude.AutoIncrement = false;
				colvarBlockLatitude.IsNullable = true;
				colvarBlockLatitude.IsPrimaryKey = false;
				colvarBlockLatitude.IsForeignKey = false;
				colvarBlockLatitude.IsReadOnly = false;
				colvarBlockLatitude.DefaultSetting = @"";
				colvarBlockLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBlockLatitude);

				TableSchema.TableColumn colvarBlockLongitude = new TableSchema.TableColumn(schema);
				colvarBlockLongitude.ColumnName = "BlockLongitude";
				colvarBlockLongitude.DataType = DbType.Double;
				colvarBlockLongitude.MaxLength = 0;
				colvarBlockLongitude.AutoIncrement = false;
				colvarBlockLongitude.IsNullable = true;
				colvarBlockLongitude.IsPrimaryKey = false;
				colvarBlockLongitude.IsForeignKey = false;
				colvarBlockLongitude.IsReadOnly = false;
				colvarBlockLongitude.DefaultSetting = @"";
				colvarBlockLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBlockLongitude);

				TableSchema.TableColumn colvarTicketLatitude = new TableSchema.TableColumn(schema);
				colvarTicketLatitude.ColumnName = "TicketLatitude";
				colvarTicketLatitude.DataType = DbType.Double;
				colvarTicketLatitude.MaxLength = 0;
				colvarTicketLatitude.AutoIncrement = false;
				colvarTicketLatitude.IsNullable = true;
				colvarTicketLatitude.IsPrimaryKey = false;
				colvarTicketLatitude.IsForeignKey = false;
				colvarTicketLatitude.IsReadOnly = false;
				colvarTicketLatitude.DefaultSetting = @"";
				colvarTicketLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketLatitude);

				TableSchema.TableColumn colvarTicketLongitude = new TableSchema.TableColumn(schema);
				colvarTicketLongitude.ColumnName = "TicketLongitude";
				colvarTicketLongitude.DataType = DbType.Double;
				colvarTicketLongitude.MaxLength = 0;
				colvarTicketLongitude.AutoIncrement = false;
				colvarTicketLongitude.IsNullable = true;
				colvarTicketLongitude.IsPrimaryKey = false;
				colvarTicketLongitude.IsForeignKey = false;
				colvarTicketLongitude.IsReadOnly = false;
				colvarTicketLongitude.DefaultSetting = @"";
				colvarTicketLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketLongitude);

				TableSchema.TableColumn colvarCurrentTicketId = new TableSchema.TableColumn(schema);
				colvarCurrentTicketId.ColumnName = "CurrentTicketId";
				colvarCurrentTicketId.DataType = DbType.Int64;
				colvarCurrentTicketId.MaxLength = 0;
				colvarCurrentTicketId.AutoIncrement = false;
				colvarCurrentTicketId.IsNullable = true;
				colvarCurrentTicketId.IsPrimaryKey = false;
				colvarCurrentTicketId.IsForeignKey = false;
				colvarCurrentTicketId.IsReadOnly = false;
				colvarCurrentTicketId.DefaultSetting = @"";
				colvarCurrentTicketId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentTicketId);

				TableSchema.TableColumn colvarIsRed = new TableSchema.TableColumn(schema);
				colvarIsRed.ColumnName = "IsRed";
				colvarIsRed.DataType = DbType.Boolean;
				colvarIsRed.MaxLength = 0;
				colvarIsRed.AutoIncrement = false;
				colvarIsRed.IsNullable = true;
				colvarIsRed.IsPrimaryKey = false;
				colvarIsRed.IsForeignKey = false;
				colvarIsRed.IsReadOnly = false;
				colvarIsRed.DefaultSetting = @"";
				colvarIsRed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsRed);

				TableSchema.TableColumn colvarColor = new TableSchema.TableColumn(schema);
				colvarColor.ColumnName = "Color";
				colvarColor.DataType = DbType.AnsiString;
				colvarColor.MaxLength = 50;
				colvarColor.AutoIncrement = false;
				colvarColor.IsNullable = true;
				colvarColor.IsPrimaryKey = false;
				colvarColor.IsForeignKey = false;
				colvarColor.IsReadOnly = false;
				colvarColor.DefaultSetting = @"";
				colvarColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColor);

				TableSchema.TableColumn colvarIsBlocked = new TableSchema.TableColumn(schema);
				colvarIsBlocked.ColumnName = "IsBlocked";
				colvarIsBlocked.DataType = DbType.Boolean;
				colvarIsBlocked.MaxLength = 0;
				colvarIsBlocked.AutoIncrement = false;
				colvarIsBlocked.IsNullable = false;
				colvarIsBlocked.IsPrimaryKey = false;
				colvarIsBlocked.IsForeignKey = false;
				colvarIsBlocked.IsReadOnly = false;
				colvarIsBlocked.DefaultSetting = @"";
				colvarIsBlocked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsBlocked);

				TableSchema.TableColumn colvarNoOfTickets = new TableSchema.TableColumn(schema);
				colvarNoOfTickets.ColumnName = "NoOfTickets";
				colvarNoOfTickets.DataType = DbType.Int32;
				colvarNoOfTickets.MaxLength = 0;
				colvarNoOfTickets.AutoIncrement = false;
				colvarNoOfTickets.IsNullable = true;
				colvarNoOfTickets.IsPrimaryKey = false;
				colvarNoOfTickets.IsForeignKey = false;
				colvarNoOfTickets.IsReadOnly = false;
				colvarNoOfTickets.DefaultSetting = @"";
				colvarNoOfTickets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoOfTickets);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwSE_ScheduleBlocks",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public SE_ScheduleBlocksView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long BlockID {
			get { return GetColumnValue<long>(Columns.BlockID); }
			set { SetColumnValue(Columns.BlockID, value); }
		}
		[DataMember]
		public string Block {
			get { return GetColumnValue<string>(Columns.Block); }
			set { SetColumnValue(Columns.Block, value); }
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set { SetColumnValue(Columns.ZipCode, value); }
		}
		[DataMember]
		public double? MaxRadius {
			get { return GetColumnValue<double?>(Columns.MaxRadius); }
			set { SetColumnValue(Columns.MaxRadius, value); }
		}
		[DataMember]
		public double? Distance {
			get { return GetColumnValue<double?>(Columns.Distance); }
			set { SetColumnValue(Columns.Distance, value); }
		}
		[DataMember]
		public DateTime? StartTime {
			get { return GetColumnValue<DateTime?>(Columns.StartTime); }
			set { SetColumnValue(Columns.StartTime, value); }
		}
		[DataMember]
		public DateTime? EndTime {
			get { return GetColumnValue<DateTime?>(Columns.EndTime); }
			set { SetColumnValue(Columns.EndTime, value); }
		}
		[DataMember]
		public int? AvailableSlots {
			get { return GetColumnValue<int?>(Columns.AvailableSlots); }
			set { SetColumnValue(Columns.AvailableSlots, value); }
		}
		[DataMember]
		public string TechnicianId {
			get { return GetColumnValue<string>(Columns.TechnicianId); }
			set { SetColumnValue(Columns.TechnicianId, value); }
		}
		[DataMember]
		public string TechnicianName {
			get { return GetColumnValue<string>(Columns.TechnicianName); }
			set { SetColumnValue(Columns.TechnicianName, value); }
		}
		[DataMember]
		public bool? IsTechConfirmed {
			get { return GetColumnValue<bool?>(Columns.IsTechConfirmed); }
			set { SetColumnValue(Columns.IsTechConfirmed, value); }
		}
		[DataMember]
		public DateTime? DateTechConfirmed {
			get { return GetColumnValue<DateTime?>(Columns.DateTechConfirmed); }
			set { SetColumnValue(Columns.DateTechConfirmed, value); }
		}
		[DataMember]
		public double? BlockLatitude {
			get { return GetColumnValue<double?>(Columns.BlockLatitude); }
			set { SetColumnValue(Columns.BlockLatitude, value); }
		}
		[DataMember]
		public double? BlockLongitude {
			get { return GetColumnValue<double?>(Columns.BlockLongitude); }
			set { SetColumnValue(Columns.BlockLongitude, value); }
		}
		[DataMember]
		public double? TicketLatitude {
			get { return GetColumnValue<double?>(Columns.TicketLatitude); }
			set { SetColumnValue(Columns.TicketLatitude, value); }
		}
		[DataMember]
		public double? TicketLongitude {
			get { return GetColumnValue<double?>(Columns.TicketLongitude); }
			set { SetColumnValue(Columns.TicketLongitude, value); }
		}
		[DataMember]
		public long? CurrentTicketId {
			get { return GetColumnValue<long?>(Columns.CurrentTicketId); }
			set { SetColumnValue(Columns.CurrentTicketId, value); }
		}
		[DataMember]
		public bool? IsRed {
			get { return GetColumnValue<bool?>(Columns.IsRed); }
			set { SetColumnValue(Columns.IsRed, value); }
		}
		[DataMember]
		public string Color {
			get { return GetColumnValue<string>(Columns.Color); }
			set { SetColumnValue(Columns.Color, value); }
		}
		[DataMember]
		public bool IsBlocked {
			get { return GetColumnValue<bool>(Columns.IsBlocked); }
			set { SetColumnValue(Columns.IsBlocked, value); }
		}
		[DataMember]
		public int? NoOfTickets {
			get { return GetColumnValue<int?>(Columns.NoOfTickets); }
			set { SetColumnValue(Columns.NoOfTickets, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return Block;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BlockIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BlockColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MaxRadiusColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DistanceColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StartTimeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn EndTimeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AvailableSlotsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn TechnicianIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn TechnicianNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsTechConfirmedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DateTechConfirmedColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn BlockLatitudeColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn BlockLongitudeColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn TicketLatitudeColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn TicketLongitudeColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CurrentTicketIdColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsRedColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ColorColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsBlockedColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn NoOfTicketsColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[21]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string BlockID = @"BlockID";
			public const string Block = @"Block";
			public const string ZipCode = @"ZipCode";
			public const string MaxRadius = @"MaxRadius";
			public const string Distance = @"Distance";
			public const string StartTime = @"StartTime";
			public const string EndTime = @"EndTime";
			public const string AvailableSlots = @"AvailableSlots";
			public const string TechnicianId = @"TechnicianId";
			public const string TechnicianName = @"TechnicianName";
			public const string IsTechConfirmed = @"IsTechConfirmed";
			public const string DateTechConfirmed = @"DateTechConfirmed";
			public const string BlockLatitude = @"BlockLatitude";
			public const string BlockLongitude = @"BlockLongitude";
			public const string TicketLatitude = @"TicketLatitude";
			public const string TicketLongitude = @"TicketLongitude";
			public const string CurrentTicketId = @"CurrentTicketId";
			public const string IsRed = @"IsRed";
			public const string Color = @"Color";
			public const string IsBlocked = @"IsBlocked";
			public const string NoOfTickets = @"NoOfTickets";
			public const string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the SE_ScheduleBlockTicketsView class.
	/// </summary>
	[DataContract]
	public partial class SE_ScheduleBlockTicketsViewCollection : ReadOnlyList<SE_ScheduleBlockTicketsView, SE_ScheduleBlockTicketsViewCollection>
	{
		public static SE_ScheduleBlockTicketsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_ScheduleBlockTicketsViewCollection result = new SE_ScheduleBlockTicketsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwSE_ScheduleBlockTickets view.
	/// </summary>
	[DataContract]
	public partial class SE_ScheduleBlockTicketsView : ReadOnlyRecord<SE_ScheduleBlockTicketsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwSE_ScheduleBlockTickets", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTicketID = new TableSchema.TableColumn(schema);
				colvarTicketID.ColumnName = "TicketID";
				colvarTicketID.DataType = DbType.Int64;
				colvarTicketID.MaxLength = 0;
				colvarTicketID.AutoIncrement = false;
				colvarTicketID.IsNullable = false;
				colvarTicketID.IsPrimaryKey = false;
				colvarTicketID.IsForeignKey = false;
				colvarTicketID.IsReadOnly = false;
				colvarTicketID.DefaultSetting = @"";
				colvarTicketID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarMonitoringStationNo = new TableSchema.TableColumn(schema);
				colvarMonitoringStationNo.ColumnName = "MonitoringStationNo";
				colvarMonitoringStationNo.DataType = DbType.Int64;
				colvarMonitoringStationNo.MaxLength = 0;
				colvarMonitoringStationNo.AutoIncrement = false;
				colvarMonitoringStationNo.IsNullable = true;
				colvarMonitoringStationNo.IsPrimaryKey = false;
				colvarMonitoringStationNo.IsForeignKey = false;
				colvarMonitoringStationNo.IsReadOnly = false;
				colvarMonitoringStationNo.DefaultSetting = @"";
				colvarMonitoringStationNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationNo);

				TableSchema.TableColumn colvarTicketTypeId = new TableSchema.TableColumn(schema);
				colvarTicketTypeId.ColumnName = "TicketTypeId";
				colvarTicketTypeId.DataType = DbType.Int32;
				colvarTicketTypeId.MaxLength = 0;
				colvarTicketTypeId.AutoIncrement = false;
				colvarTicketTypeId.IsNullable = false;
				colvarTicketTypeId.IsPrimaryKey = false;
				colvarTicketTypeId.IsForeignKey = false;
				colvarTicketTypeId.IsReadOnly = false;
				colvarTicketTypeId.DefaultSetting = @"";
				colvarTicketTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketTypeId);

				TableSchema.TableColumn colvarTicketTypeName = new TableSchema.TableColumn(schema);
				colvarTicketTypeName.ColumnName = "TicketTypeName";
				colvarTicketTypeName.DataType = DbType.String;
				colvarTicketTypeName.MaxLength = 50;
				colvarTicketTypeName.AutoIncrement = false;
				colvarTicketTypeName.IsNullable = false;
				colvarTicketTypeName.IsPrimaryKey = false;
				colvarTicketTypeName.IsForeignKey = false;
				colvarTicketTypeName.IsReadOnly = false;
				colvarTicketTypeName.DefaultSetting = @"";
				colvarTicketTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketTypeName);

				TableSchema.TableColumn colvarWeight = new TableSchema.TableColumn(schema);
				colvarWeight.ColumnName = "Weight";
				colvarWeight.DataType = DbType.Double;
				colvarWeight.MaxLength = 0;
				colvarWeight.AutoIncrement = false;
				colvarWeight.IsNullable = true;
				colvarWeight.IsPrimaryKey = false;
				colvarWeight.IsForeignKey = false;
				colvarWeight.IsReadOnly = false;
				colvarWeight.DefaultSetting = @"";
				colvarWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeight);

				TableSchema.TableColumn colvarStatusCodeId = new TableSchema.TableColumn(schema);
				colvarStatusCodeId.ColumnName = "StatusCodeId";
				colvarStatusCodeId.DataType = DbType.Int32;
				colvarStatusCodeId.MaxLength = 0;
				colvarStatusCodeId.AutoIncrement = false;
				colvarStatusCodeId.IsNullable = false;
				colvarStatusCodeId.IsPrimaryKey = false;
				colvarStatusCodeId.IsForeignKey = false;
				colvarStatusCodeId.IsReadOnly = false;
				colvarStatusCodeId.DefaultSetting = @"";
				colvarStatusCodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusCodeId);

				TableSchema.TableColumn colvarStatusCode = new TableSchema.TableColumn(schema);
				colvarStatusCode.ColumnName = "StatusCode";
				colvarStatusCode.DataType = DbType.String;
				colvarStatusCode.MaxLength = 50;
				colvarStatusCode.AutoIncrement = false;
				colvarStatusCode.IsNullable = false;
				colvarStatusCode.IsPrimaryKey = false;
				colvarStatusCode.IsForeignKey = false;
				colvarStatusCode.IsReadOnly = false;
				colvarStatusCode.DefaultSetting = @"";
				colvarStatusCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusCode);

				TableSchema.TableColumn colvarMoniConfirmation = new TableSchema.TableColumn(schema);
				colvarMoniConfirmation.ColumnName = "MoniConfirmation";
				colvarMoniConfirmation.DataType = DbType.String;
				colvarMoniConfirmation.MaxLength = 50;
				colvarMoniConfirmation.AutoIncrement = false;
				colvarMoniConfirmation.IsNullable = true;
				colvarMoniConfirmation.IsPrimaryKey = false;
				colvarMoniConfirmation.IsForeignKey = false;
				colvarMoniConfirmation.IsReadOnly = false;
				colvarMoniConfirmation.DefaultSetting = @"";
				colvarMoniConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoniConfirmation);

				TableSchema.TableColumn colvarIsTechConfirmed = new TableSchema.TableColumn(schema);
				colvarIsTechConfirmed.ColumnName = "IsTechConfirmed";
				colvarIsTechConfirmed.DataType = DbType.Boolean;
				colvarIsTechConfirmed.MaxLength = 0;
				colvarIsTechConfirmed.AutoIncrement = false;
				colvarIsTechConfirmed.IsNullable = true;
				colvarIsTechConfirmed.IsPrimaryKey = false;
				colvarIsTechConfirmed.IsForeignKey = false;
				colvarIsTechConfirmed.IsReadOnly = false;
				colvarIsTechConfirmed.DefaultSetting = @"";
				colvarIsTechConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechConfirmed);

				TableSchema.TableColumn colvarDateTechConfirmed = new TableSchema.TableColumn(schema);
				colvarDateTechConfirmed.ColumnName = "DateTechConfirmed";
				colvarDateTechConfirmed.DataType = DbType.DateTime;
				colvarDateTechConfirmed.MaxLength = 0;
				colvarDateTechConfirmed.AutoIncrement = false;
				colvarDateTechConfirmed.IsNullable = true;
				colvarDateTechConfirmed.IsPrimaryKey = false;
				colvarDateTechConfirmed.IsForeignKey = false;
				colvarDateTechConfirmed.IsReadOnly = false;
				colvarDateTechConfirmed.DefaultSetting = @"";
				colvarDateTechConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateTechConfirmed);

				TableSchema.TableColumn colvarTechnicianId = new TableSchema.TableColumn(schema);
				colvarTechnicianId.ColumnName = "TechnicianId";
				colvarTechnicianId.DataType = DbType.AnsiString;
				colvarTechnicianId.MaxLength = 20;
				colvarTechnicianId.AutoIncrement = false;
				colvarTechnicianId.IsNullable = true;
				colvarTechnicianId.IsPrimaryKey = false;
				colvarTechnicianId.IsForeignKey = false;
				colvarTechnicianId.IsReadOnly = false;
				colvarTechnicianId.DefaultSetting = @"";
				colvarTechnicianId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianId);

				TableSchema.TableColumn colvarTripCharges = new TableSchema.TableColumn(schema);
				colvarTripCharges.ColumnName = "TripCharges";
				colvarTripCharges.DataType = DbType.Currency;
				colvarTripCharges.MaxLength = 0;
				colvarTripCharges.AutoIncrement = false;
				colvarTripCharges.IsNullable = true;
				colvarTripCharges.IsPrimaryKey = false;
				colvarTripCharges.IsForeignKey = false;
				colvarTripCharges.IsReadOnly = false;
				colvarTripCharges.DefaultSetting = @"";
				colvarTripCharges.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTripCharges);

				TableSchema.TableColumn colvarAppointment = new TableSchema.TableColumn(schema);
				colvarAppointment.ColumnName = "Appointment";
				colvarAppointment.DataType = DbType.String;
				colvarAppointment.MaxLength = 50;
				colvarAppointment.AutoIncrement = false;
				colvarAppointment.IsNullable = true;
				colvarAppointment.IsPrimaryKey = false;
				colvarAppointment.IsForeignKey = false;
				colvarAppointment.IsReadOnly = false;
				colvarAppointment.DefaultSetting = @"";
				colvarAppointment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppointment);

				TableSchema.TableColumn colvarAgentConfirmation = new TableSchema.TableColumn(schema);
				colvarAgentConfirmation.ColumnName = "AgentConfirmation";
				colvarAgentConfirmation.DataType = DbType.String;
				colvarAgentConfirmation.MaxLength = 50;
				colvarAgentConfirmation.AutoIncrement = false;
				colvarAgentConfirmation.IsNullable = true;
				colvarAgentConfirmation.IsPrimaryKey = false;
				colvarAgentConfirmation.IsForeignKey = false;
				colvarAgentConfirmation.IsReadOnly = false;
				colvarAgentConfirmation.DefaultSetting = @"";
				colvarAgentConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgentConfirmation);

				TableSchema.TableColumn colvarExpirationDate = new TableSchema.TableColumn(schema);
				colvarExpirationDate.ColumnName = "ExpirationDate";
				colvarExpirationDate.DataType = DbType.DateTime;
				colvarExpirationDate.MaxLength = 0;
				colvarExpirationDate.AutoIncrement = false;
				colvarExpirationDate.IsNullable = true;
				colvarExpirationDate.IsPrimaryKey = false;
				colvarExpirationDate.IsForeignKey = false;
				colvarExpirationDate.IsReadOnly = false;
				colvarExpirationDate.DefaultSetting = @"";
				colvarExpirationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpirationDate);

				TableSchema.TableColumn colvarNotes = new TableSchema.TableColumn(schema);
				colvarNotes.ColumnName = "Notes";
				colvarNotes.DataType = DbType.String;
				colvarNotes.MaxLength = 1000;
				colvarNotes.AutoIncrement = false;
				colvarNotes.IsNullable = true;
				colvarNotes.IsPrimaryKey = false;
				colvarNotes.IsForeignKey = false;
				colvarNotes.IsReadOnly = false;
				colvarNotes.DefaultSetting = @"";
				colvarNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotes);

				TableSchema.TableColumn colvarIsTechEnRoute = new TableSchema.TableColumn(schema);
				colvarIsTechEnRoute.ColumnName = "IsTechEnRoute";
				colvarIsTechEnRoute.DataType = DbType.Boolean;
				colvarIsTechEnRoute.MaxLength = 0;
				colvarIsTechEnRoute.AutoIncrement = false;
				colvarIsTechEnRoute.IsNullable = false;
				colvarIsTechEnRoute.IsPrimaryKey = false;
				colvarIsTechEnRoute.IsForeignKey = false;
				colvarIsTechEnRoute.IsReadOnly = false;
				colvarIsTechEnRoute.DefaultSetting = @"";
				colvarIsTechEnRoute.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechEnRoute);

				TableSchema.TableColumn colvarIsTechDelayed = new TableSchema.TableColumn(schema);
				colvarIsTechDelayed.ColumnName = "IsTechDelayed";
				colvarIsTechDelayed.DataType = DbType.Boolean;
				colvarIsTechDelayed.MaxLength = 0;
				colvarIsTechDelayed.AutoIncrement = false;
				colvarIsTechDelayed.IsNullable = false;
				colvarIsTechDelayed.IsPrimaryKey = false;
				colvarIsTechDelayed.IsForeignKey = false;
				colvarIsTechDelayed.IsReadOnly = false;
				colvarIsTechDelayed.DefaultSetting = @"";
				colvarIsTechDelayed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechDelayed);

				TableSchema.TableColumn colvarIsTechCompleted = new TableSchema.TableColumn(schema);
				colvarIsTechCompleted.ColumnName = "IsTechCompleted";
				colvarIsTechCompleted.DataType = DbType.Boolean;
				colvarIsTechCompleted.MaxLength = 0;
				colvarIsTechCompleted.AutoIncrement = false;
				colvarIsTechCompleted.IsNullable = false;
				colvarIsTechCompleted.IsPrimaryKey = false;
				colvarIsTechCompleted.IsForeignKey = false;
				colvarIsTechCompleted.IsReadOnly = false;
				colvarIsTechCompleted.DefaultSetting = @"";
				colvarIsTechCompleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechCompleted);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCustomerFullName = new TableSchema.TableColumn(schema);
				colvarCustomerFullName.ColumnName = "CustomerFullName";
				colvarCustomerFullName.DataType = DbType.String;
				colvarCustomerFullName.MaxLength = 170;
				colvarCustomerFullName.AutoIncrement = false;
				colvarCustomerFullName.IsNullable = true;
				colvarCustomerFullName.IsPrimaryKey = false;
				colvarCustomerFullName.IsForeignKey = false;
				colvarCustomerFullName.IsReadOnly = false;
				colvarCustomerFullName.DefaultSetting = @"";
				colvarCustomerFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerFullName);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.String;
				colvarAddress.MaxLength = 150;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = true;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = true;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarCounty = new TableSchema.TableColumn(schema);
				colvarCounty.ColumnName = "County";
				colvarCounty.DataType = DbType.String;
				colvarCounty.MaxLength = 50;
				colvarCounty.AutoIncrement = false;
				colvarCounty.IsNullable = true;
				colvarCounty.IsPrimaryKey = false;
				colvarCounty.IsForeignKey = false;
				colvarCounty.IsReadOnly = false;
				colvarCounty.DefaultSetting = @"";
				colvarCounty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCounty);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.AnsiString;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = true;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarCityStateZip = new TableSchema.TableColumn(schema);
				colvarCityStateZip.ColumnName = "CityStateZip";
				colvarCityStateZip.DataType = DbType.String;
				colvarCityStateZip.MaxLength = 150;
				colvarCityStateZip.AutoIncrement = false;
				colvarCityStateZip.IsNullable = true;
				colvarCityStateZip.IsPrimaryKey = false;
				colvarCityStateZip.IsForeignKey = false;
				colvarCityStateZip.IsReadOnly = false;
				colvarCityStateZip.DefaultSetting = @"";
				colvarCityStateZip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCityStateZip);

				TableSchema.TableColumn colvarCompleteAddress = new TableSchema.TableColumn(schema);
				colvarCompleteAddress.ColumnName = "CompleteAddress";
				colvarCompleteAddress.DataType = DbType.String;
				colvarCompleteAddress.MaxLength = 113;
				colvarCompleteAddress.AutoIncrement = false;
				colvarCompleteAddress.IsNullable = true;
				colvarCompleteAddress.IsPrimaryKey = false;
				colvarCompleteAddress.IsForeignKey = false;
				colvarCompleteAddress.IsReadOnly = false;
				colvarCompleteAddress.DefaultSetting = @"";
				colvarCompleteAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompleteAddress);

				TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
				colvarLatitude.ColumnName = "Latitude";
				colvarLatitude.DataType = DbType.Double;
				colvarLatitude.MaxLength = 0;
				colvarLatitude.AutoIncrement = false;
				colvarLatitude.IsNullable = true;
				colvarLatitude.IsPrimaryKey = false;
				colvarLatitude.IsForeignKey = false;
				colvarLatitude.IsReadOnly = false;
				colvarLatitude.DefaultSetting = @"";
				colvarLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitude);

				TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
				colvarLongitude.ColumnName = "Longitude";
				colvarLongitude.DataType = DbType.Double;
				colvarLongitude.MaxLength = 0;
				colvarLongitude.AutoIncrement = false;
				colvarLongitude.IsNullable = true;
				colvarLongitude.IsPrimaryKey = false;
				colvarLongitude.IsForeignKey = false;
				colvarLongitude.IsReadOnly = false;
				colvarLongitude.DefaultSetting = @"";
				colvarLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitude);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.AnsiString;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.AnsiString;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarBlockId = new TableSchema.TableColumn(schema);
				colvarBlockId.ColumnName = "BlockId";
				colvarBlockId.DataType = DbType.Int64;
				colvarBlockId.MaxLength = 0;
				colvarBlockId.AutoIncrement = false;
				colvarBlockId.IsNullable = true;
				colvarBlockId.IsPrimaryKey = false;
				colvarBlockId.IsForeignKey = false;
				colvarBlockId.IsReadOnly = false;
				colvarBlockId.DefaultSetting = @"";
				colvarBlockId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBlockId);

				TableSchema.TableColumn colvarAppointmentDate = new TableSchema.TableColumn(schema);
				colvarAppointmentDate.ColumnName = "AppointmentDate";
				colvarAppointmentDate.DataType = DbType.DateTime;
				colvarAppointmentDate.MaxLength = 0;
				colvarAppointmentDate.AutoIncrement = false;
				colvarAppointmentDate.IsNullable = true;
				colvarAppointmentDate.IsPrimaryKey = false;
				colvarAppointmentDate.IsForeignKey = false;
				colvarAppointmentDate.IsReadOnly = false;
				colvarAppointmentDate.DefaultSetting = @"";
				colvarAppointmentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppointmentDate);

				TableSchema.TableColumn colvarTravelTime = new TableSchema.TableColumn(schema);
				colvarTravelTime.ColumnName = "TravelTime";
				colvarTravelTime.DataType = DbType.Int32;
				colvarTravelTime.MaxLength = 0;
				colvarTravelTime.AutoIncrement = false;
				colvarTravelTime.IsNullable = true;
				colvarTravelTime.IsPrimaryKey = false;
				colvarTravelTime.IsForeignKey = false;
				colvarTravelTime.IsReadOnly = false;
				colvarTravelTime.DefaultSetting = @"";
				colvarTravelTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTravelTime);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.String;
				colvarZipCode.MaxLength = 5;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = true;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarMaxRadius = new TableSchema.TableColumn(schema);
				colvarMaxRadius.ColumnName = "MaxRadius";
				colvarMaxRadius.DataType = DbType.Double;
				colvarMaxRadius.MaxLength = 0;
				colvarMaxRadius.AutoIncrement = false;
				colvarMaxRadius.IsNullable = true;
				colvarMaxRadius.IsPrimaryKey = false;
				colvarMaxRadius.IsForeignKey = false;
				colvarMaxRadius.IsReadOnly = false;
				colvarMaxRadius.DefaultSetting = @"";
				colvarMaxRadius.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxRadius);

				TableSchema.TableColumn colvarDistance = new TableSchema.TableColumn(schema);
				colvarDistance.ColumnName = "Distance";
				colvarDistance.DataType = DbType.Double;
				colvarDistance.MaxLength = 0;
				colvarDistance.AutoIncrement = false;
				colvarDistance.IsNullable = true;
				colvarDistance.IsPrimaryKey = false;
				colvarDistance.IsForeignKey = false;
				colvarDistance.IsReadOnly = false;
				colvarDistance.DefaultSetting = @"";
				colvarDistance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDistance);

				TableSchema.TableColumn colvarStartTime = new TableSchema.TableColumn(schema);
				colvarStartTime.ColumnName = "StartTime";
				colvarStartTime.DataType = DbType.DateTime;
				colvarStartTime.MaxLength = 0;
				colvarStartTime.AutoIncrement = false;
				colvarStartTime.IsNullable = true;
				colvarStartTime.IsPrimaryKey = false;
				colvarStartTime.IsForeignKey = false;
				colvarStartTime.IsReadOnly = false;
				colvarStartTime.DefaultSetting = @"";
				colvarStartTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartTime);

				TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
				colvarEndTime.ColumnName = "EndTime";
				colvarEndTime.DataType = DbType.DateTime;
				colvarEndTime.MaxLength = 0;
				colvarEndTime.AutoIncrement = false;
				colvarEndTime.IsNullable = true;
				colvarEndTime.IsPrimaryKey = false;
				colvarEndTime.IsForeignKey = false;
				colvarEndTime.IsReadOnly = false;
				colvarEndTime.DefaultSetting = @"";
				colvarEndTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndTime);

				TableSchema.TableColumn colvarScheduleTicketId = new TableSchema.TableColumn(schema);
				colvarScheduleTicketId.ColumnName = "ScheduleTicketId";
				colvarScheduleTicketId.DataType = DbType.Int64;
				colvarScheduleTicketId.MaxLength = 0;
				colvarScheduleTicketId.AutoIncrement = false;
				colvarScheduleTicketId.IsNullable = true;
				colvarScheduleTicketId.IsPrimaryKey = false;
				colvarScheduleTicketId.IsForeignKey = false;
				colvarScheduleTicketId.IsReadOnly = false;
				colvarScheduleTicketId.DefaultSetting = @"";
				colvarScheduleTicketId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScheduleTicketId);

				TableSchema.TableColumn colvarScheduleTicketDeleted = new TableSchema.TableColumn(schema);
				colvarScheduleTicketDeleted.ColumnName = "ScheduleTicketDeleted";
				colvarScheduleTicketDeleted.DataType = DbType.Boolean;
				colvarScheduleTicketDeleted.MaxLength = 0;
				colvarScheduleTicketDeleted.AutoIncrement = false;
				colvarScheduleTicketDeleted.IsNullable = true;
				colvarScheduleTicketDeleted.IsPrimaryKey = false;
				colvarScheduleTicketDeleted.IsForeignKey = false;
				colvarScheduleTicketDeleted.IsReadOnly = false;
				colvarScheduleTicketDeleted.DefaultSetting = @"";
				colvarScheduleTicketDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScheduleTicketDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwSE_ScheduleBlockTickets",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public SE_ScheduleBlockTicketsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long TicketID {
			get { return GetColumnValue<long>(Columns.TicketID); }
			set { SetColumnValue(Columns.TicketID, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public long? MonitoringStationNo {
			get { return GetColumnValue<long?>(Columns.MonitoringStationNo); }
			set { SetColumnValue(Columns.MonitoringStationNo, value); }
		}
		[DataMember]
		public int TicketTypeId {
			get { return GetColumnValue<int>(Columns.TicketTypeId); }
			set { SetColumnValue(Columns.TicketTypeId, value); }
		}
		[DataMember]
		public string TicketTypeName {
			get { return GetColumnValue<string>(Columns.TicketTypeName); }
			set { SetColumnValue(Columns.TicketTypeName, value); }
		}
		[DataMember]
		public double? Weight {
			get { return GetColumnValue<double?>(Columns.Weight); }
			set { SetColumnValue(Columns.Weight, value); }
		}
		[DataMember]
		public int StatusCodeId {
			get { return GetColumnValue<int>(Columns.StatusCodeId); }
			set { SetColumnValue(Columns.StatusCodeId, value); }
		}
		[DataMember]
		public string StatusCode {
			get { return GetColumnValue<string>(Columns.StatusCode); }
			set { SetColumnValue(Columns.StatusCode, value); }
		}
		[DataMember]
		public string MoniConfirmation {
			get { return GetColumnValue<string>(Columns.MoniConfirmation); }
			set { SetColumnValue(Columns.MoniConfirmation, value); }
		}
		[DataMember]
		public bool? IsTechConfirmed {
			get { return GetColumnValue<bool?>(Columns.IsTechConfirmed); }
			set { SetColumnValue(Columns.IsTechConfirmed, value); }
		}
		[DataMember]
		public DateTime? DateTechConfirmed {
			get { return GetColumnValue<DateTime?>(Columns.DateTechConfirmed); }
			set { SetColumnValue(Columns.DateTechConfirmed, value); }
		}
		[DataMember]
		public string TechnicianId {
			get { return GetColumnValue<string>(Columns.TechnicianId); }
			set { SetColumnValue(Columns.TechnicianId, value); }
		}
		[DataMember]
		public decimal? TripCharges {
			get { return GetColumnValue<decimal?>(Columns.TripCharges); }
			set { SetColumnValue(Columns.TripCharges, value); }
		}
		[DataMember]
		public string Appointment {
			get { return GetColumnValue<string>(Columns.Appointment); }
			set { SetColumnValue(Columns.Appointment, value); }
		}
		[DataMember]
		public string AgentConfirmation {
			get { return GetColumnValue<string>(Columns.AgentConfirmation); }
			set { SetColumnValue(Columns.AgentConfirmation, value); }
		}
		[DataMember]
		public DateTime? ExpirationDate {
			get { return GetColumnValue<DateTime?>(Columns.ExpirationDate); }
			set { SetColumnValue(Columns.ExpirationDate, value); }
		}
		[DataMember]
		public string Notes {
			get { return GetColumnValue<string>(Columns.Notes); }
			set { SetColumnValue(Columns.Notes, value); }
		}
		[DataMember]
		public bool IsTechEnRoute {
			get { return GetColumnValue<bool>(Columns.IsTechEnRoute); }
			set { SetColumnValue(Columns.IsTechEnRoute, value); }
		}
		[DataMember]
		public bool IsTechDelayed {
			get { return GetColumnValue<bool>(Columns.IsTechDelayed); }
			set { SetColumnValue(Columns.IsTechDelayed, value); }
		}
		[DataMember]
		public bool IsTechCompleted {
			get { return GetColumnValue<bool>(Columns.IsTechCompleted); }
			set { SetColumnValue(Columns.IsTechCompleted, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public string CustomerFullName {
			get { return GetColumnValue<string>(Columns.CustomerFullName); }
			set { SetColumnValue(Columns.CustomerFullName, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public string Address {
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set { SetColumnValue(Columns.StreetAddress, value); }
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set { SetColumnValue(Columns.StreetAddress2, value); }
		}
		[DataMember]
		public string County {
			get { return GetColumnValue<string>(Columns.County); }
			set { SetColumnValue(Columns.County, value); }
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set { SetColumnValue(Columns.PostalCode, value); }
		}
		[DataMember]
		public string CityStateZip {
			get { return GetColumnValue<string>(Columns.CityStateZip); }
			set { SetColumnValue(Columns.CityStateZip, value); }
		}
		[DataMember]
		public string CompleteAddress {
			get { return GetColumnValue<string>(Columns.CompleteAddress); }
			set { SetColumnValue(Columns.CompleteAddress, value); }
		}
		[DataMember]
		public double? Latitude {
			get { return GetColumnValue<double?>(Columns.Latitude); }
			set { SetColumnValue(Columns.Latitude, value); }
		}
		[DataMember]
		public double? Longitude {
			get { return GetColumnValue<double?>(Columns.Longitude); }
			set { SetColumnValue(Columns.Longitude, value); }
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set { SetColumnValue(Columns.PhoneHome, value); }
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set { SetColumnValue(Columns.PhoneMobile, value); }
		}
		[DataMember]
		public long? BlockId {
			get { return GetColumnValue<long?>(Columns.BlockId); }
			set { SetColumnValue(Columns.BlockId, value); }
		}
		[DataMember]
		public DateTime? AppointmentDate {
			get { return GetColumnValue<DateTime?>(Columns.AppointmentDate); }
			set { SetColumnValue(Columns.AppointmentDate, value); }
		}
		[DataMember]
		public int? TravelTime {
			get { return GetColumnValue<int?>(Columns.TravelTime); }
			set { SetColumnValue(Columns.TravelTime, value); }
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set { SetColumnValue(Columns.ZipCode, value); }
		}
		[DataMember]
		public double? MaxRadius {
			get { return GetColumnValue<double?>(Columns.MaxRadius); }
			set { SetColumnValue(Columns.MaxRadius, value); }
		}
		[DataMember]
		public double? Distance {
			get { return GetColumnValue<double?>(Columns.Distance); }
			set { SetColumnValue(Columns.Distance, value); }
		}
		[DataMember]
		public DateTime? StartTime {
			get { return GetColumnValue<DateTime?>(Columns.StartTime); }
			set { SetColumnValue(Columns.StartTime, value); }
		}
		[DataMember]
		public DateTime? EndTime {
			get { return GetColumnValue<DateTime?>(Columns.EndTime); }
			set { SetColumnValue(Columns.EndTime, value); }
		}
		[DataMember]
		public long? ScheduleTicketId {
			get { return GetColumnValue<long?>(Columns.ScheduleTicketId); }
			set { SetColumnValue(Columns.ScheduleTicketId, value); }
		}
		[DataMember]
		public bool? ScheduleTicketDeleted {
			get { return GetColumnValue<bool?>(Columns.ScheduleTicketDeleted); }
			set { SetColumnValue(Columns.ScheduleTicketDeleted, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return TicketID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TicketIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitoringStationNoColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TicketTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TicketTypeNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn WeightColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn StatusCodeIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn StatusCodeColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn MoniConfirmationColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsTechConfirmedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DateTechConfirmedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn TechnicianIdColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn TripChargesColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn AppointmentColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn AgentConfirmationColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ExpirationDateColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn NotesColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsTechEnRouteColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn IsTechDelayedColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsTechCompletedColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CustomerFullNameColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn AddressColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn CountyColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn CityStateZipColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn CompleteAddressColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn LatitudeColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn LongitudeColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn BlockIdColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn AppointmentDateColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn TravelTimeColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn MaxRadiusColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn DistanceColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn StartTimeColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn EndTimeColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn ScheduleTicketIdColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn ScheduleTicketDeletedColumn
		{
			get { return Schema.Columns[44]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string TicketID = @"TicketID";
			public const string AccountId = @"AccountId";
			public const string MonitoringStationNo = @"MonitoringStationNo";
			public const string TicketTypeId = @"TicketTypeId";
			public const string TicketTypeName = @"TicketTypeName";
			public const string Weight = @"Weight";
			public const string StatusCodeId = @"StatusCodeId";
			public const string StatusCode = @"StatusCode";
			public const string MoniConfirmation = @"MoniConfirmation";
			public const string IsTechConfirmed = @"IsTechConfirmed";
			public const string DateTechConfirmed = @"DateTechConfirmed";
			public const string TechnicianId = @"TechnicianId";
			public const string TripCharges = @"TripCharges";
			public const string Appointment = @"Appointment";
			public const string AgentConfirmation = @"AgentConfirmation";
			public const string ExpirationDate = @"ExpirationDate";
			public const string Notes = @"Notes";
			public const string IsTechEnRoute = @"IsTechEnRoute";
			public const string IsTechDelayed = @"IsTechDelayed";
			public const string IsTechCompleted = @"IsTechCompleted";
			public const string IsDeleted = @"IsDeleted";
			public const string CustomerFullName = @"CustomerFullName";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string Address = @"Address";
			public const string StreetAddress = @"StreetAddress";
			public const string StreetAddress2 = @"StreetAddress2";
			public const string County = @"County";
			public const string City = @"City";
			public const string PostalCode = @"PostalCode";
			public const string CityStateZip = @"CityStateZip";
			public const string CompleteAddress = @"CompleteAddress";
			public const string Latitude = @"Latitude";
			public const string Longitude = @"Longitude";
			public const string PhoneHome = @"PhoneHome";
			public const string PhoneMobile = @"PhoneMobile";
			public const string BlockId = @"BlockId";
			public const string AppointmentDate = @"AppointmentDate";
			public const string TravelTime = @"TravelTime";
			public const string ZipCode = @"ZipCode";
			public const string MaxRadius = @"MaxRadius";
			public const string Distance = @"Distance";
			public const string StartTime = @"StartTime";
			public const string EndTime = @"EndTime";
			public const string ScheduleTicketId = @"ScheduleTicketId";
			public const string ScheduleTicketDeleted = @"ScheduleTicketDeleted";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the SE_TechnicianScheduleBlocksView class.
	/// </summary>
	[DataContract]
	public partial class SE_TechnicianScheduleBlocksViewCollection : ReadOnlyList<SE_TechnicianScheduleBlocksView, SE_TechnicianScheduleBlocksViewCollection>
	{
		public static SE_TechnicianScheduleBlocksViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_TechnicianScheduleBlocksViewCollection result = new SE_TechnicianScheduleBlocksViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwSE_TechnicianScheduleBlocks view.
	/// </summary>
	[DataContract]
	public partial class SE_TechnicianScheduleBlocksView : ReadOnlyRecord<SE_TechnicianScheduleBlocksView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwSE_TechnicianScheduleBlocks", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBlockID = new TableSchema.TableColumn(schema);
				colvarBlockID.ColumnName = "BlockID";
				colvarBlockID.DataType = DbType.Int64;
				colvarBlockID.MaxLength = 0;
				colvarBlockID.AutoIncrement = true;
				colvarBlockID.IsNullable = false;
				colvarBlockID.IsPrimaryKey = false;
				colvarBlockID.IsForeignKey = false;
				colvarBlockID.IsReadOnly = false;
				colvarBlockID.DefaultSetting = @"";
				colvarBlockID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBlockID);

				TableSchema.TableColumn colvarBlock = new TableSchema.TableColumn(schema);
				colvarBlock.ColumnName = "Block";
				colvarBlock.DataType = DbType.String;
				colvarBlock.MaxLength = 2;
				colvarBlock.AutoIncrement = false;
				colvarBlock.IsNullable = false;
				colvarBlock.IsPrimaryKey = false;
				colvarBlock.IsForeignKey = false;
				colvarBlock.IsReadOnly = false;
				colvarBlock.DefaultSetting = @"";
				colvarBlock.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBlock);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.String;
				colvarZipCode.MaxLength = 5;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = true;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarMaxRadius = new TableSchema.TableColumn(schema);
				colvarMaxRadius.ColumnName = "MaxRadius";
				colvarMaxRadius.DataType = DbType.Double;
				colvarMaxRadius.MaxLength = 0;
				colvarMaxRadius.AutoIncrement = false;
				colvarMaxRadius.IsNullable = true;
				colvarMaxRadius.IsPrimaryKey = false;
				colvarMaxRadius.IsForeignKey = false;
				colvarMaxRadius.IsReadOnly = false;
				colvarMaxRadius.DefaultSetting = @"";
				colvarMaxRadius.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxRadius);

				TableSchema.TableColumn colvarDistance = new TableSchema.TableColumn(schema);
				colvarDistance.ColumnName = "Distance";
				colvarDistance.DataType = DbType.Double;
				colvarDistance.MaxLength = 0;
				colvarDistance.AutoIncrement = false;
				colvarDistance.IsNullable = true;
				colvarDistance.IsPrimaryKey = false;
				colvarDistance.IsForeignKey = false;
				colvarDistance.IsReadOnly = false;
				colvarDistance.DefaultSetting = @"";
				colvarDistance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDistance);

				TableSchema.TableColumn colvarStartTime = new TableSchema.TableColumn(schema);
				colvarStartTime.ColumnName = "StartTime";
				colvarStartTime.DataType = DbType.DateTime;
				colvarStartTime.MaxLength = 0;
				colvarStartTime.AutoIncrement = false;
				colvarStartTime.IsNullable = true;
				colvarStartTime.IsPrimaryKey = false;
				colvarStartTime.IsForeignKey = false;
				colvarStartTime.IsReadOnly = false;
				colvarStartTime.DefaultSetting = @"";
				colvarStartTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartTime);

				TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
				colvarEndTime.ColumnName = "EndTime";
				colvarEndTime.DataType = DbType.DateTime;
				colvarEndTime.MaxLength = 0;
				colvarEndTime.AutoIncrement = false;
				colvarEndTime.IsNullable = true;
				colvarEndTime.IsPrimaryKey = false;
				colvarEndTime.IsForeignKey = false;
				colvarEndTime.IsReadOnly = false;
				colvarEndTime.DefaultSetting = @"";
				colvarEndTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndTime);

				TableSchema.TableColumn colvarAvailableSlots = new TableSchema.TableColumn(schema);
				colvarAvailableSlots.ColumnName = "AvailableSlots";
				colvarAvailableSlots.DataType = DbType.Int32;
				colvarAvailableSlots.MaxLength = 0;
				colvarAvailableSlots.AutoIncrement = false;
				colvarAvailableSlots.IsNullable = true;
				colvarAvailableSlots.IsPrimaryKey = false;
				colvarAvailableSlots.IsForeignKey = false;
				colvarAvailableSlots.IsReadOnly = false;
				colvarAvailableSlots.DefaultSetting = @"";
				colvarAvailableSlots.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAvailableSlots);

				TableSchema.TableColumn colvarTechnicianId = new TableSchema.TableColumn(schema);
				colvarTechnicianId.ColumnName = "TechnicianId";
				colvarTechnicianId.DataType = DbType.AnsiString;
				colvarTechnicianId.MaxLength = 20;
				colvarTechnicianId.AutoIncrement = false;
				colvarTechnicianId.IsNullable = true;
				colvarTechnicianId.IsPrimaryKey = false;
				colvarTechnicianId.IsForeignKey = false;
				colvarTechnicianId.IsReadOnly = false;
				colvarTechnicianId.DefaultSetting = @"";
				colvarTechnicianId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianId);

				TableSchema.TableColumn colvarTechnicianName = new TableSchema.TableColumn(schema);
				colvarTechnicianName.ColumnName = "TechnicianName";
				colvarTechnicianName.DataType = DbType.String;
				colvarTechnicianName.MaxLength = 250;
				colvarTechnicianName.AutoIncrement = false;
				colvarTechnicianName.IsNullable = true;
				colvarTechnicianName.IsPrimaryKey = false;
				colvarTechnicianName.IsForeignKey = false;
				colvarTechnicianName.IsReadOnly = false;
				colvarTechnicianName.DefaultSetting = @"";
				colvarTechnicianName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianName);

				TableSchema.TableColumn colvarIsTechConfirmed = new TableSchema.TableColumn(schema);
				colvarIsTechConfirmed.ColumnName = "IsTechConfirmed";
				colvarIsTechConfirmed.DataType = DbType.Boolean;
				colvarIsTechConfirmed.MaxLength = 0;
				colvarIsTechConfirmed.AutoIncrement = false;
				colvarIsTechConfirmed.IsNullable = true;
				colvarIsTechConfirmed.IsPrimaryKey = false;
				colvarIsTechConfirmed.IsForeignKey = false;
				colvarIsTechConfirmed.IsReadOnly = false;
				colvarIsTechConfirmed.DefaultSetting = @"";
				colvarIsTechConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechConfirmed);

				TableSchema.TableColumn colvarDateTechConfirmed = new TableSchema.TableColumn(schema);
				colvarDateTechConfirmed.ColumnName = "DateTechConfirmed";
				colvarDateTechConfirmed.DataType = DbType.DateTime;
				colvarDateTechConfirmed.MaxLength = 0;
				colvarDateTechConfirmed.AutoIncrement = false;
				colvarDateTechConfirmed.IsNullable = true;
				colvarDateTechConfirmed.IsPrimaryKey = false;
				colvarDateTechConfirmed.IsForeignKey = false;
				colvarDateTechConfirmed.IsReadOnly = false;
				colvarDateTechConfirmed.DefaultSetting = @"";
				colvarDateTechConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateTechConfirmed);

				TableSchema.TableColumn colvarCurrentTicketId = new TableSchema.TableColumn(schema);
				colvarCurrentTicketId.ColumnName = "CurrentTicketId";
				colvarCurrentTicketId.DataType = DbType.Int64;
				colvarCurrentTicketId.MaxLength = 0;
				colvarCurrentTicketId.AutoIncrement = false;
				colvarCurrentTicketId.IsNullable = true;
				colvarCurrentTicketId.IsPrimaryKey = false;
				colvarCurrentTicketId.IsForeignKey = false;
				colvarCurrentTicketId.IsReadOnly = false;
				colvarCurrentTicketId.DefaultSetting = @"";
				colvarCurrentTicketId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentTicketId);

				TableSchema.TableColumn colvarIsRed = new TableSchema.TableColumn(schema);
				colvarIsRed.ColumnName = "IsRed";
				colvarIsRed.DataType = DbType.Boolean;
				colvarIsRed.MaxLength = 0;
				colvarIsRed.AutoIncrement = false;
				colvarIsRed.IsNullable = true;
				colvarIsRed.IsPrimaryKey = false;
				colvarIsRed.IsForeignKey = false;
				colvarIsRed.IsReadOnly = false;
				colvarIsRed.DefaultSetting = @"";
				colvarIsRed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsRed);

				TableSchema.TableColumn colvarColor = new TableSchema.TableColumn(schema);
				colvarColor.ColumnName = "Color";
				colvarColor.DataType = DbType.AnsiString;
				colvarColor.MaxLength = 50;
				colvarColor.AutoIncrement = false;
				colvarColor.IsNullable = true;
				colvarColor.IsPrimaryKey = false;
				colvarColor.IsForeignKey = false;
				colvarColor.IsReadOnly = false;
				colvarColor.DefaultSetting = @"";
				colvarColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColor);

				TableSchema.TableColumn colvarIsBlocked = new TableSchema.TableColumn(schema);
				colvarIsBlocked.ColumnName = "IsBlocked";
				colvarIsBlocked.DataType = DbType.Boolean;
				colvarIsBlocked.MaxLength = 0;
				colvarIsBlocked.AutoIncrement = false;
				colvarIsBlocked.IsNullable = false;
				colvarIsBlocked.IsPrimaryKey = false;
				colvarIsBlocked.IsForeignKey = false;
				colvarIsBlocked.IsReadOnly = false;
				colvarIsBlocked.DefaultSetting = @"";
				colvarIsBlocked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsBlocked);

				TableSchema.TableColumn colvarNoOfTickets = new TableSchema.TableColumn(schema);
				colvarNoOfTickets.ColumnName = "NoOfTickets";
				colvarNoOfTickets.DataType = DbType.Int32;
				colvarNoOfTickets.MaxLength = 0;
				colvarNoOfTickets.AutoIncrement = false;
				colvarNoOfTickets.IsNullable = true;
				colvarNoOfTickets.IsPrimaryKey = false;
				colvarNoOfTickets.IsForeignKey = false;
				colvarNoOfTickets.IsReadOnly = false;
				colvarNoOfTickets.DefaultSetting = @"";
				colvarNoOfTickets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoOfTickets);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwSE_TechnicianScheduleBlocks",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public SE_TechnicianScheduleBlocksView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long BlockID {
			get { return GetColumnValue<long>(Columns.BlockID); }
			set { SetColumnValue(Columns.BlockID, value); }
		}
		[DataMember]
		public string Block {
			get { return GetColumnValue<string>(Columns.Block); }
			set { SetColumnValue(Columns.Block, value); }
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set { SetColumnValue(Columns.ZipCode, value); }
		}
		[DataMember]
		public double? MaxRadius {
			get { return GetColumnValue<double?>(Columns.MaxRadius); }
			set { SetColumnValue(Columns.MaxRadius, value); }
		}
		[DataMember]
		public double? Distance {
			get { return GetColumnValue<double?>(Columns.Distance); }
			set { SetColumnValue(Columns.Distance, value); }
		}
		[DataMember]
		public DateTime? StartTime {
			get { return GetColumnValue<DateTime?>(Columns.StartTime); }
			set { SetColumnValue(Columns.StartTime, value); }
		}
		[DataMember]
		public DateTime? EndTime {
			get { return GetColumnValue<DateTime?>(Columns.EndTime); }
			set { SetColumnValue(Columns.EndTime, value); }
		}
		[DataMember]
		public int? AvailableSlots {
			get { return GetColumnValue<int?>(Columns.AvailableSlots); }
			set { SetColumnValue(Columns.AvailableSlots, value); }
		}
		[DataMember]
		public string TechnicianId {
			get { return GetColumnValue<string>(Columns.TechnicianId); }
			set { SetColumnValue(Columns.TechnicianId, value); }
		}
		[DataMember]
		public string TechnicianName {
			get { return GetColumnValue<string>(Columns.TechnicianName); }
			set { SetColumnValue(Columns.TechnicianName, value); }
		}
		[DataMember]
		public bool? IsTechConfirmed {
			get { return GetColumnValue<bool?>(Columns.IsTechConfirmed); }
			set { SetColumnValue(Columns.IsTechConfirmed, value); }
		}
		[DataMember]
		public DateTime? DateTechConfirmed {
			get { return GetColumnValue<DateTime?>(Columns.DateTechConfirmed); }
			set { SetColumnValue(Columns.DateTechConfirmed, value); }
		}
		[DataMember]
		public long? CurrentTicketId {
			get { return GetColumnValue<long?>(Columns.CurrentTicketId); }
			set { SetColumnValue(Columns.CurrentTicketId, value); }
		}
		[DataMember]
		public bool? IsRed {
			get { return GetColumnValue<bool?>(Columns.IsRed); }
			set { SetColumnValue(Columns.IsRed, value); }
		}
		[DataMember]
		public string Color {
			get { return GetColumnValue<string>(Columns.Color); }
			set { SetColumnValue(Columns.Color, value); }
		}
		[DataMember]
		public bool IsBlocked {
			get { return GetColumnValue<bool>(Columns.IsBlocked); }
			set { SetColumnValue(Columns.IsBlocked, value); }
		}
		[DataMember]
		public int? NoOfTickets {
			get { return GetColumnValue<int?>(Columns.NoOfTickets); }
			set { SetColumnValue(Columns.NoOfTickets, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return Block;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BlockIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BlockColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MaxRadiusColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DistanceColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StartTimeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn EndTimeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AvailableSlotsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn TechnicianIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn TechnicianNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsTechConfirmedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DateTechConfirmedColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CurrentTicketIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsRedColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ColorColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsBlockedColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn NoOfTicketsColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[17]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string BlockID = @"BlockID";
			public const string Block = @"Block";
			public const string ZipCode = @"ZipCode";
			public const string MaxRadius = @"MaxRadius";
			public const string Distance = @"Distance";
			public const string StartTime = @"StartTime";
			public const string EndTime = @"EndTime";
			public const string AvailableSlots = @"AvailableSlots";
			public const string TechnicianId = @"TechnicianId";
			public const string TechnicianName = @"TechnicianName";
			public const string IsTechConfirmed = @"IsTechConfirmed";
			public const string DateTechConfirmed = @"DateTechConfirmed";
			public const string CurrentTicketId = @"CurrentTicketId";
			public const string IsRed = @"IsRed";
			public const string Color = @"Color";
			public const string IsBlocked = @"IsBlocked";
			public const string NoOfTickets = @"NoOfTickets";
			public const string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the SE_TicketsView class.
	/// </summary>
	[DataContract]
	public partial class SE_TicketsViewCollection : ReadOnlyList<SE_TicketsView, SE_TicketsViewCollection>
	{
		public static SE_TicketsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_TicketsViewCollection result = new SE_TicketsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwSE_Tickets view.
	/// </summary>
	[DataContract]
	public partial class SE_TicketsView : ReadOnlyRecord<SE_TicketsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwSE_Tickets", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTicketID = new TableSchema.TableColumn(schema);
				colvarTicketID.ColumnName = "TicketID";
				colvarTicketID.DataType = DbType.Int64;
				colvarTicketID.MaxLength = 0;
				colvarTicketID.AutoIncrement = false;
				colvarTicketID.IsNullable = false;
				colvarTicketID.IsPrimaryKey = false;
				colvarTicketID.IsForeignKey = false;
				colvarTicketID.IsReadOnly = false;
				colvarTicketID.DefaultSetting = @"";
				colvarTicketID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarMonitoringStationNo = new TableSchema.TableColumn(schema);
				colvarMonitoringStationNo.ColumnName = "MonitoringStationNo";
				colvarMonitoringStationNo.DataType = DbType.Int64;
				colvarMonitoringStationNo.MaxLength = 0;
				colvarMonitoringStationNo.AutoIncrement = false;
				colvarMonitoringStationNo.IsNullable = true;
				colvarMonitoringStationNo.IsPrimaryKey = false;
				colvarMonitoringStationNo.IsForeignKey = false;
				colvarMonitoringStationNo.IsReadOnly = false;
				colvarMonitoringStationNo.DefaultSetting = @"";
				colvarMonitoringStationNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationNo);

				TableSchema.TableColumn colvarTicketTypeId = new TableSchema.TableColumn(schema);
				colvarTicketTypeId.ColumnName = "TicketTypeId";
				colvarTicketTypeId.DataType = DbType.Int32;
				colvarTicketTypeId.MaxLength = 0;
				colvarTicketTypeId.AutoIncrement = false;
				colvarTicketTypeId.IsNullable = false;
				colvarTicketTypeId.IsPrimaryKey = false;
				colvarTicketTypeId.IsForeignKey = false;
				colvarTicketTypeId.IsReadOnly = false;
				colvarTicketTypeId.DefaultSetting = @"";
				colvarTicketTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketTypeId);

				TableSchema.TableColumn colvarTicketTypeName = new TableSchema.TableColumn(schema);
				colvarTicketTypeName.ColumnName = "TicketTypeName";
				colvarTicketTypeName.DataType = DbType.String;
				colvarTicketTypeName.MaxLength = 50;
				colvarTicketTypeName.AutoIncrement = false;
				colvarTicketTypeName.IsNullable = false;
				colvarTicketTypeName.IsPrimaryKey = false;
				colvarTicketTypeName.IsForeignKey = false;
				colvarTicketTypeName.IsReadOnly = false;
				colvarTicketTypeName.DefaultSetting = @"";
				colvarTicketTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketTypeName);

				TableSchema.TableColumn colvarStatusCodeId = new TableSchema.TableColumn(schema);
				colvarStatusCodeId.ColumnName = "StatusCodeId";
				colvarStatusCodeId.DataType = DbType.Int32;
				colvarStatusCodeId.MaxLength = 0;
				colvarStatusCodeId.AutoIncrement = false;
				colvarStatusCodeId.IsNullable = false;
				colvarStatusCodeId.IsPrimaryKey = false;
				colvarStatusCodeId.IsForeignKey = false;
				colvarStatusCodeId.IsReadOnly = false;
				colvarStatusCodeId.DefaultSetting = @"";
				colvarStatusCodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusCodeId);

				TableSchema.TableColumn colvarStatusCode = new TableSchema.TableColumn(schema);
				colvarStatusCode.ColumnName = "StatusCode";
				colvarStatusCode.DataType = DbType.String;
				colvarStatusCode.MaxLength = 50;
				colvarStatusCode.AutoIncrement = false;
				colvarStatusCode.IsNullable = false;
				colvarStatusCode.IsPrimaryKey = false;
				colvarStatusCode.IsForeignKey = false;
				colvarStatusCode.IsReadOnly = false;
				colvarStatusCode.DefaultSetting = @"";
				colvarStatusCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusCode);

				TableSchema.TableColumn colvarMoniConfirmation = new TableSchema.TableColumn(schema);
				colvarMoniConfirmation.ColumnName = "MoniConfirmation";
				colvarMoniConfirmation.DataType = DbType.String;
				colvarMoniConfirmation.MaxLength = 50;
				colvarMoniConfirmation.AutoIncrement = false;
				colvarMoniConfirmation.IsNullable = true;
				colvarMoniConfirmation.IsPrimaryKey = false;
				colvarMoniConfirmation.IsForeignKey = false;
				colvarMoniConfirmation.IsReadOnly = false;
				colvarMoniConfirmation.DefaultSetting = @"";
				colvarMoniConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoniConfirmation);

				TableSchema.TableColumn colvarTechnicianId = new TableSchema.TableColumn(schema);
				colvarTechnicianId.ColumnName = "TechnicianId";
				colvarTechnicianId.DataType = DbType.AnsiString;
				colvarTechnicianId.MaxLength = 20;
				colvarTechnicianId.AutoIncrement = false;
				colvarTechnicianId.IsNullable = true;
				colvarTechnicianId.IsPrimaryKey = false;
				colvarTechnicianId.IsForeignKey = false;
				colvarTechnicianId.IsReadOnly = false;
				colvarTechnicianId.DefaultSetting = @"";
				colvarTechnicianId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianId);

				TableSchema.TableColumn colvarTechnicianName = new TableSchema.TableColumn(schema);
				colvarTechnicianName.ColumnName = "TechnicianName";
				colvarTechnicianName.DataType = DbType.String;
				colvarTechnicianName.MaxLength = 250;
				colvarTechnicianName.AutoIncrement = false;
				colvarTechnicianName.IsNullable = true;
				colvarTechnicianName.IsPrimaryKey = false;
				colvarTechnicianName.IsForeignKey = false;
				colvarTechnicianName.IsReadOnly = false;
				colvarTechnicianName.DefaultSetting = @"";
				colvarTechnicianName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianName);

				TableSchema.TableColumn colvarTripCharges = new TableSchema.TableColumn(schema);
				colvarTripCharges.ColumnName = "TripCharges";
				colvarTripCharges.DataType = DbType.Currency;
				colvarTripCharges.MaxLength = 0;
				colvarTripCharges.AutoIncrement = false;
				colvarTripCharges.IsNullable = true;
				colvarTripCharges.IsPrimaryKey = false;
				colvarTripCharges.IsForeignKey = false;
				colvarTripCharges.IsReadOnly = false;
				colvarTripCharges.DefaultSetting = @"";
				colvarTripCharges.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTripCharges);

				TableSchema.TableColumn colvarAppointment = new TableSchema.TableColumn(schema);
				colvarAppointment.ColumnName = "Appointment";
				colvarAppointment.DataType = DbType.String;
				colvarAppointment.MaxLength = 50;
				colvarAppointment.AutoIncrement = false;
				colvarAppointment.IsNullable = true;
				colvarAppointment.IsPrimaryKey = false;
				colvarAppointment.IsForeignKey = false;
				colvarAppointment.IsReadOnly = false;
				colvarAppointment.DefaultSetting = @"";
				colvarAppointment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppointment);

				TableSchema.TableColumn colvarAgentConfirmation = new TableSchema.TableColumn(schema);
				colvarAgentConfirmation.ColumnName = "AgentConfirmation";
				colvarAgentConfirmation.DataType = DbType.String;
				colvarAgentConfirmation.MaxLength = 50;
				colvarAgentConfirmation.AutoIncrement = false;
				colvarAgentConfirmation.IsNullable = true;
				colvarAgentConfirmation.IsPrimaryKey = false;
				colvarAgentConfirmation.IsForeignKey = false;
				colvarAgentConfirmation.IsReadOnly = false;
				colvarAgentConfirmation.DefaultSetting = @"";
				colvarAgentConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgentConfirmation);

				TableSchema.TableColumn colvarExpirationDate = new TableSchema.TableColumn(schema);
				colvarExpirationDate.ColumnName = "ExpirationDate";
				colvarExpirationDate.DataType = DbType.DateTime;
				colvarExpirationDate.MaxLength = 0;
				colvarExpirationDate.AutoIncrement = false;
				colvarExpirationDate.IsNullable = true;
				colvarExpirationDate.IsPrimaryKey = false;
				colvarExpirationDate.IsForeignKey = false;
				colvarExpirationDate.IsReadOnly = false;
				colvarExpirationDate.DefaultSetting = @"";
				colvarExpirationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpirationDate);

				TableSchema.TableColumn colvarNotes = new TableSchema.TableColumn(schema);
				colvarNotes.ColumnName = "Notes";
				colvarNotes.DataType = DbType.String;
				colvarNotes.MaxLength = 1000;
				colvarNotes.AutoIncrement = false;
				colvarNotes.IsNullable = true;
				colvarNotes.IsPrimaryKey = false;
				colvarNotes.IsForeignKey = false;
				colvarNotes.IsReadOnly = false;
				colvarNotes.DefaultSetting = @"";
				colvarNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotes);

				TableSchema.TableColumn colvarIsTechEnRoute = new TableSchema.TableColumn(schema);
				colvarIsTechEnRoute.ColumnName = "IsTechEnRoute";
				colvarIsTechEnRoute.DataType = DbType.Boolean;
				colvarIsTechEnRoute.MaxLength = 0;
				colvarIsTechEnRoute.AutoIncrement = false;
				colvarIsTechEnRoute.IsNullable = false;
				colvarIsTechEnRoute.IsPrimaryKey = false;
				colvarIsTechEnRoute.IsForeignKey = false;
				colvarIsTechEnRoute.IsReadOnly = false;
				colvarIsTechEnRoute.DefaultSetting = @"";
				colvarIsTechEnRoute.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechEnRoute);

				TableSchema.TableColumn colvarIsTechDelayed = new TableSchema.TableColumn(schema);
				colvarIsTechDelayed.ColumnName = "IsTechDelayed";
				colvarIsTechDelayed.DataType = DbType.Boolean;
				colvarIsTechDelayed.MaxLength = 0;
				colvarIsTechDelayed.AutoIncrement = false;
				colvarIsTechDelayed.IsNullable = false;
				colvarIsTechDelayed.IsPrimaryKey = false;
				colvarIsTechDelayed.IsForeignKey = false;
				colvarIsTechDelayed.IsReadOnly = false;
				colvarIsTechDelayed.DefaultSetting = @"";
				colvarIsTechDelayed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechDelayed);

				TableSchema.TableColumn colvarIsTechCompleted = new TableSchema.TableColumn(schema);
				colvarIsTechCompleted.ColumnName = "IsTechCompleted";
				colvarIsTechCompleted.DataType = DbType.Boolean;
				colvarIsTechCompleted.MaxLength = 0;
				colvarIsTechCompleted.AutoIncrement = false;
				colvarIsTechCompleted.IsNullable = false;
				colvarIsTechCompleted.IsPrimaryKey = false;
				colvarIsTechCompleted.IsForeignKey = false;
				colvarIsTechCompleted.IsReadOnly = false;
				colvarIsTechCompleted.DefaultSetting = @"";
				colvarIsTechCompleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechCompleted);

				TableSchema.TableColumn colvarConfirmationNo = new TableSchema.TableColumn(schema);
				colvarConfirmationNo.ColumnName = "ConfirmationNo";
				colvarConfirmationNo.DataType = DbType.String;
				colvarConfirmationNo.MaxLength = 50;
				colvarConfirmationNo.AutoIncrement = false;
				colvarConfirmationNo.IsNullable = true;
				colvarConfirmationNo.IsPrimaryKey = false;
				colvarConfirmationNo.IsForeignKey = false;
				colvarConfirmationNo.IsReadOnly = false;
				colvarConfirmationNo.DefaultSetting = @"";
				colvarConfirmationNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConfirmationNo);

				TableSchema.TableColumn colvarClosingNote = new TableSchema.TableColumn(schema);
				colvarClosingNote.ColumnName = "ClosingNote";
				colvarClosingNote.DataType = DbType.String;
				colvarClosingNote.MaxLength = 1000;
				colvarClosingNote.AutoIncrement = false;
				colvarClosingNote.IsNullable = true;
				colvarClosingNote.IsPrimaryKey = false;
				colvarClosingNote.IsForeignKey = false;
				colvarClosingNote.IsReadOnly = false;
				colvarClosingNote.DefaultSetting = @"";
				colvarClosingNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClosingNote);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCustomerFullName = new TableSchema.TableColumn(schema);
				colvarCustomerFullName.ColumnName = "CustomerFullName";
				colvarCustomerFullName.DataType = DbType.String;
				colvarCustomerFullName.MaxLength = 170;
				colvarCustomerFullName.AutoIncrement = false;
				colvarCustomerFullName.IsNullable = true;
				colvarCustomerFullName.IsPrimaryKey = false;
				colvarCustomerFullName.IsForeignKey = false;
				colvarCustomerFullName.IsReadOnly = false;
				colvarCustomerFullName.DefaultSetting = @"";
				colvarCustomerFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerFullName);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.String;
				colvarAddress.MaxLength = 150;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = true;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = false;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarCounty = new TableSchema.TableColumn(schema);
				colvarCounty.ColumnName = "County";
				colvarCounty.DataType = DbType.String;
				colvarCounty.MaxLength = 50;
				colvarCounty.AutoIncrement = false;
				colvarCounty.IsNullable = true;
				colvarCounty.IsPrimaryKey = false;
				colvarCounty.IsForeignKey = false;
				colvarCounty.IsReadOnly = false;
				colvarCounty.DefaultSetting = @"";
				colvarCounty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCounty);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.AnsiString;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarCityStateZip = new TableSchema.TableColumn(schema);
				colvarCityStateZip.ColumnName = "CityStateZip";
				colvarCityStateZip.DataType = DbType.String;
				colvarCityStateZip.MaxLength = 150;
				colvarCityStateZip.AutoIncrement = false;
				colvarCityStateZip.IsNullable = true;
				colvarCityStateZip.IsPrimaryKey = false;
				colvarCityStateZip.IsForeignKey = false;
				colvarCityStateZip.IsReadOnly = false;
				colvarCityStateZip.DefaultSetting = @"";
				colvarCityStateZip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCityStateZip);

				TableSchema.TableColumn colvarCompleteAddress = new TableSchema.TableColumn(schema);
				colvarCompleteAddress.ColumnName = "CompleteAddress";
				colvarCompleteAddress.DataType = DbType.String;
				colvarCompleteAddress.MaxLength = 113;
				colvarCompleteAddress.AutoIncrement = false;
				colvarCompleteAddress.IsNullable = false;
				colvarCompleteAddress.IsPrimaryKey = false;
				colvarCompleteAddress.IsForeignKey = false;
				colvarCompleteAddress.IsReadOnly = false;
				colvarCompleteAddress.DefaultSetting = @"";
				colvarCompleteAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompleteAddress);

				TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
				colvarLatitude.ColumnName = "Latitude";
				colvarLatitude.DataType = DbType.Double;
				colvarLatitude.MaxLength = 0;
				colvarLatitude.AutoIncrement = false;
				colvarLatitude.IsNullable = false;
				colvarLatitude.IsPrimaryKey = false;
				colvarLatitude.IsForeignKey = false;
				colvarLatitude.IsReadOnly = false;
				colvarLatitude.DefaultSetting = @"";
				colvarLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitude);

				TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
				colvarLongitude.ColumnName = "Longitude";
				colvarLongitude.DataType = DbType.Double;
				colvarLongitude.MaxLength = 0;
				colvarLongitude.AutoIncrement = false;
				colvarLongitude.IsNullable = false;
				colvarLongitude.IsPrimaryKey = false;
				colvarLongitude.IsForeignKey = false;
				colvarLongitude.IsReadOnly = false;
				colvarLongitude.DefaultSetting = @"";
				colvarLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitude);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.AnsiString;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.AnsiString;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwSE_Tickets",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public SE_TicketsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long TicketID {
			get { return GetColumnValue<long>(Columns.TicketID); }
			set { SetColumnValue(Columns.TicketID, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public long? MonitoringStationNo {
			get { return GetColumnValue<long?>(Columns.MonitoringStationNo); }
			set { SetColumnValue(Columns.MonitoringStationNo, value); }
		}
		[DataMember]
		public int TicketTypeId {
			get { return GetColumnValue<int>(Columns.TicketTypeId); }
			set { SetColumnValue(Columns.TicketTypeId, value); }
		}
		[DataMember]
		public string TicketTypeName {
			get { return GetColumnValue<string>(Columns.TicketTypeName); }
			set { SetColumnValue(Columns.TicketTypeName, value); }
		}
		[DataMember]
		public int StatusCodeId {
			get { return GetColumnValue<int>(Columns.StatusCodeId); }
			set { SetColumnValue(Columns.StatusCodeId, value); }
		}
		[DataMember]
		public string StatusCode {
			get { return GetColumnValue<string>(Columns.StatusCode); }
			set { SetColumnValue(Columns.StatusCode, value); }
		}
		[DataMember]
		public string MoniConfirmation {
			get { return GetColumnValue<string>(Columns.MoniConfirmation); }
			set { SetColumnValue(Columns.MoniConfirmation, value); }
		}
		[DataMember]
		public string TechnicianId {
			get { return GetColumnValue<string>(Columns.TechnicianId); }
			set { SetColumnValue(Columns.TechnicianId, value); }
		}
		[DataMember]
		public string TechnicianName {
			get { return GetColumnValue<string>(Columns.TechnicianName); }
			set { SetColumnValue(Columns.TechnicianName, value); }
		}
		[DataMember]
		public decimal? TripCharges {
			get { return GetColumnValue<decimal?>(Columns.TripCharges); }
			set { SetColumnValue(Columns.TripCharges, value); }
		}
		[DataMember]
		public string Appointment {
			get { return GetColumnValue<string>(Columns.Appointment); }
			set { SetColumnValue(Columns.Appointment, value); }
		}
		[DataMember]
		public string AgentConfirmation {
			get { return GetColumnValue<string>(Columns.AgentConfirmation); }
			set { SetColumnValue(Columns.AgentConfirmation, value); }
		}
		[DataMember]
		public DateTime? ExpirationDate {
			get { return GetColumnValue<DateTime?>(Columns.ExpirationDate); }
			set { SetColumnValue(Columns.ExpirationDate, value); }
		}
		[DataMember]
		public string Notes {
			get { return GetColumnValue<string>(Columns.Notes); }
			set { SetColumnValue(Columns.Notes, value); }
		}
		[DataMember]
		public bool IsTechEnRoute {
			get { return GetColumnValue<bool>(Columns.IsTechEnRoute); }
			set { SetColumnValue(Columns.IsTechEnRoute, value); }
		}
		[DataMember]
		public bool IsTechDelayed {
			get { return GetColumnValue<bool>(Columns.IsTechDelayed); }
			set { SetColumnValue(Columns.IsTechDelayed, value); }
		}
		[DataMember]
		public bool IsTechCompleted {
			get { return GetColumnValue<bool>(Columns.IsTechCompleted); }
			set { SetColumnValue(Columns.IsTechCompleted, value); }
		}
		[DataMember]
		public string ConfirmationNo {
			get { return GetColumnValue<string>(Columns.ConfirmationNo); }
			set { SetColumnValue(Columns.ConfirmationNo, value); }
		}
		[DataMember]
		public string ClosingNote {
			get { return GetColumnValue<string>(Columns.ClosingNote); }
			set { SetColumnValue(Columns.ClosingNote, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public string CustomerFullName {
			get { return GetColumnValue<string>(Columns.CustomerFullName); }
			set { SetColumnValue(Columns.CustomerFullName, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public string Address {
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set { SetColumnValue(Columns.StreetAddress, value); }
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set { SetColumnValue(Columns.StreetAddress2, value); }
		}
		[DataMember]
		public string County {
			get { return GetColumnValue<string>(Columns.County); }
			set { SetColumnValue(Columns.County, value); }
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set { SetColumnValue(Columns.PostalCode, value); }
		}
		[DataMember]
		public string CityStateZip {
			get { return GetColumnValue<string>(Columns.CityStateZip); }
			set { SetColumnValue(Columns.CityStateZip, value); }
		}
		[DataMember]
		public string CompleteAddress {
			get { return GetColumnValue<string>(Columns.CompleteAddress); }
			set { SetColumnValue(Columns.CompleteAddress, value); }
		}
		[DataMember]
		public double Latitude {
			get { return GetColumnValue<double>(Columns.Latitude); }
			set { SetColumnValue(Columns.Latitude, value); }
		}
		[DataMember]
		public double Longitude {
			get { return GetColumnValue<double>(Columns.Longitude); }
			set { SetColumnValue(Columns.Longitude, value); }
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set { SetColumnValue(Columns.PhoneHome, value); }
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set { SetColumnValue(Columns.PhoneMobile, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return TicketID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TicketIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitoringStationNoColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TicketTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TicketTypeNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StatusCodeIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn StatusCodeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn MoniConfirmationColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn TechnicianIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn TechnicianNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn TripChargesColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn AppointmentColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn AgentConfirmationColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ExpirationDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn NotesColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsTechEnRouteColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsTechDelayedColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsTechCompletedColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ConfirmationNoColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn ClosingNoteColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CustomerFullNameColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn AddressColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn CountyColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn CityStateZipColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn CompleteAddressColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn LatitudeColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn LongitudeColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[34]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string TicketID = @"TicketID";
			public const string AccountId = @"AccountId";
			public const string MonitoringStationNo = @"MonitoringStationNo";
			public const string TicketTypeId = @"TicketTypeId";
			public const string TicketTypeName = @"TicketTypeName";
			public const string StatusCodeId = @"StatusCodeId";
			public const string StatusCode = @"StatusCode";
			public const string MoniConfirmation = @"MoniConfirmation";
			public const string TechnicianId = @"TechnicianId";
			public const string TechnicianName = @"TechnicianName";
			public const string TripCharges = @"TripCharges";
			public const string Appointment = @"Appointment";
			public const string AgentConfirmation = @"AgentConfirmation";
			public const string ExpirationDate = @"ExpirationDate";
			public const string Notes = @"Notes";
			public const string IsTechEnRoute = @"IsTechEnRoute";
			public const string IsTechDelayed = @"IsTechDelayed";
			public const string IsTechCompleted = @"IsTechCompleted";
			public const string ConfirmationNo = @"ConfirmationNo";
			public const string ClosingNote = @"ClosingNote";
			public const string IsDeleted = @"IsDeleted";
			public const string CustomerFullName = @"CustomerFullName";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string Address = @"Address";
			public const string StreetAddress = @"StreetAddress";
			public const string StreetAddress2 = @"StreetAddress2";
			public const string County = @"County";
			public const string City = @"City";
			public const string PostalCode = @"PostalCode";
			public const string CityStateZip = @"CityStateZip";
			public const string CompleteAddress = @"CompleteAddress";
			public const string Latitude = @"Latitude";
			public const string Longitude = @"Longitude";
			public const string PhoneHome = @"PhoneHome";
			public const string PhoneMobile = @"PhoneMobile";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the TS_ServiceTicketStatusView class.
	/// </summary>
	[DataContract]
	public partial class TS_ServiceTicketStatusViewCollection : ReadOnlyList<TS_ServiceTicketStatusView, TS_ServiceTicketStatusViewCollection>
	{
		public static TS_ServiceTicketStatusViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TS_ServiceTicketStatusViewCollection result = new TS_ServiceTicketStatusViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwTS_ServiceTicketStatus view.
	/// </summary>
	[DataContract]
	public partial class TS_ServiceTicketStatusView : ReadOnlyRecord<TS_ServiceTicketStatusView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwTS_ServiceTicketStatus", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int64;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = false;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = false;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarVersion = new TableSchema.TableColumn(schema);
				colvarVersion.ColumnName = "Version";
				colvarVersion.DataType = DbType.Int32;
				colvarVersion.MaxLength = 0;
				colvarVersion.AutoIncrement = false;
				colvarVersion.IsNullable = false;
				colvarVersion.IsPrimaryKey = false;
				colvarVersion.IsForeignKey = false;
				colvarVersion.IsReadOnly = false;
				colvarVersion.DefaultSetting = @"";
				colvarVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersion);

				TableSchema.TableColumn colvarServiceTypeId = new TableSchema.TableColumn(schema);
				colvarServiceTypeId.ColumnName = "ServiceTypeId";
				colvarServiceTypeId.DataType = DbType.Int32;
				colvarServiceTypeId.MaxLength = 0;
				colvarServiceTypeId.AutoIncrement = false;
				colvarServiceTypeId.IsNullable = false;
				colvarServiceTypeId.IsPrimaryKey = false;
				colvarServiceTypeId.IsForeignKey = false;
				colvarServiceTypeId.IsReadOnly = false;
				colvarServiceTypeId.DefaultSetting = @"";
				colvarServiceTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceTypeId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarCurrentAppointmentId = new TableSchema.TableColumn(schema);
				colvarCurrentAppointmentId.ColumnName = "CurrentAppointmentId";
				colvarCurrentAppointmentId.DataType = DbType.Int64;
				colvarCurrentAppointmentId.MaxLength = 0;
				colvarCurrentAppointmentId.AutoIncrement = false;
				colvarCurrentAppointmentId.IsNullable = true;
				colvarCurrentAppointmentId.IsPrimaryKey = false;
				colvarCurrentAppointmentId.IsForeignKey = false;
				colvarCurrentAppointmentId.IsReadOnly = false;
				colvarCurrentAppointmentId.DefaultSetting = @"";
				colvarCurrentAppointmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentAppointmentId);

				TableSchema.TableColumn colvarNotes = new TableSchema.TableColumn(schema);
				colvarNotes.ColumnName = "Notes";
				colvarNotes.DataType = DbType.String;
				colvarNotes.MaxLength = 1000;
				colvarNotes.AutoIncrement = false;
				colvarNotes.IsNullable = true;
				colvarNotes.IsPrimaryKey = false;
				colvarNotes.IsForeignKey = false;
				colvarNotes.IsReadOnly = false;
				colvarNotes.DefaultSetting = @"";
				colvarNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotes);

				TableSchema.TableColumn colvarCompletedNote = new TableSchema.TableColumn(schema);
				colvarCompletedNote.ColumnName = "CompletedNote";
				colvarCompletedNote.DataType = DbType.String;
				colvarCompletedNote.MaxLength = 1000;
				colvarCompletedNote.AutoIncrement = false;
				colvarCompletedNote.IsNullable = true;
				colvarCompletedNote.IsPrimaryKey = false;
				colvarCompletedNote.IsForeignKey = false;
				colvarCompletedNote.IsReadOnly = false;
				colvarCompletedNote.DefaultSetting = @"";
				colvarCompletedNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompletedNote);

				TableSchema.TableColumn colvarCompletedOn = new TableSchema.TableColumn(schema);
				colvarCompletedOn.ColumnName = "CompletedOn";
				colvarCompletedOn.DataType = DbType.DateTime;
				colvarCompletedOn.MaxLength = 0;
				colvarCompletedOn.AutoIncrement = false;
				colvarCompletedOn.IsNullable = true;
				colvarCompletedOn.IsPrimaryKey = false;
				colvarCompletedOn.IsForeignKey = false;
				colvarCompletedOn.IsReadOnly = false;
				colvarCompletedOn.DefaultSetting = @"";
				colvarCompletedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompletedOn);

				TableSchema.TableColumn colvarMSTicketNum = new TableSchema.TableColumn(schema);
				colvarMSTicketNum.ColumnName = "MSTicketNum";
				colvarMSTicketNum.DataType = DbType.Int64;
				colvarMSTicketNum.MaxLength = 0;
				colvarMSTicketNum.AutoIncrement = false;
				colvarMSTicketNum.IsNullable = true;
				colvarMSTicketNum.IsPrimaryKey = false;
				colvarMSTicketNum.IsForeignKey = false;
				colvarMSTicketNum.IsReadOnly = false;
				colvarMSTicketNum.DefaultSetting = @"";
				colvarMSTicketNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMSTicketNum);

				TableSchema.TableColumn colvarMSConfirmation = new TableSchema.TableColumn(schema);
				colvarMSConfirmation.ColumnName = "MSConfirmation";
				colvarMSConfirmation.DataType = DbType.String;
				colvarMSConfirmation.MaxLength = 50;
				colvarMSConfirmation.AutoIncrement = false;
				colvarMSConfirmation.IsNullable = true;
				colvarMSConfirmation.IsPrimaryKey = false;
				colvarMSConfirmation.IsForeignKey = false;
				colvarMSConfirmation.IsReadOnly = false;
				colvarMSConfirmation.DefaultSetting = @"";
				colvarMSConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMSConfirmation);

				TableSchema.TableColumn colvarDealerConfirmation = new TableSchema.TableColumn(schema);
				colvarDealerConfirmation.ColumnName = "DealerConfirmation";
				colvarDealerConfirmation.DataType = DbType.String;
				colvarDealerConfirmation.MaxLength = 50;
				colvarDealerConfirmation.AutoIncrement = false;
				colvarDealerConfirmation.IsNullable = true;
				colvarDealerConfirmation.IsPrimaryKey = false;
				colvarDealerConfirmation.IsForeignKey = false;
				colvarDealerConfirmation.IsReadOnly = false;
				colvarDealerConfirmation.DefaultSetting = @"";
				colvarDealerConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerConfirmation);

				TableSchema.TableColumn colvarAppointmentId = new TableSchema.TableColumn(schema);
				colvarAppointmentId.ColumnName = "AppointmentId";
				colvarAppointmentId.DataType = DbType.Int64;
				colvarAppointmentId.MaxLength = 0;
				colvarAppointmentId.AutoIncrement = false;
				colvarAppointmentId.IsNullable = true;
				colvarAppointmentId.IsPrimaryKey = false;
				colvarAppointmentId.IsForeignKey = false;
				colvarAppointmentId.IsReadOnly = false;
				colvarAppointmentId.DefaultSetting = @"";
				colvarAppointmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppointmentId);

				TableSchema.TableColumn colvarTechId = new TableSchema.TableColumn(schema);
				colvarTechId.ColumnName = "TechId";
				colvarTechId.DataType = DbType.Int32;
				colvarTechId.MaxLength = 0;
				colvarTechId.AutoIncrement = false;
				colvarTechId.IsNullable = true;
				colvarTechId.IsPrimaryKey = false;
				colvarTechId.IsForeignKey = false;
				colvarTechId.IsReadOnly = false;
				colvarTechId.DefaultSetting = @"";
				colvarTechId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechId);

				TableSchema.TableColumn colvarTechFullName = new TableSchema.TableColumn(schema);
				colvarTechFullName.ColumnName = "TechFullName";
				colvarTechFullName.DataType = DbType.String;
				colvarTechFullName.MaxLength = 101;
				colvarTechFullName.AutoIncrement = false;
				colvarTechFullName.IsNullable = true;
				colvarTechFullName.IsPrimaryKey = false;
				colvarTechFullName.IsForeignKey = false;
				colvarTechFullName.IsReadOnly = false;
				colvarTechFullName.DefaultSetting = @"";
				colvarTechFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechFullName);

				TableSchema.TableColumn colvarStartOn = new TableSchema.TableColumn(schema);
				colvarStartOn.ColumnName = "StartOn";
				colvarStartOn.DataType = DbType.DateTime;
				colvarStartOn.MaxLength = 0;
				colvarStartOn.AutoIncrement = false;
				colvarStartOn.IsNullable = true;
				colvarStartOn.IsPrimaryKey = false;
				colvarStartOn.IsForeignKey = false;
				colvarStartOn.IsReadOnly = false;
				colvarStartOn.DefaultSetting = @"";
				colvarStartOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartOn);

				TableSchema.TableColumn colvarEndOn = new TableSchema.TableColumn(schema);
				colvarEndOn.ColumnName = "EndOn";
				colvarEndOn.DataType = DbType.DateTime;
				colvarEndOn.MaxLength = 0;
				colvarEndOn.AutoIncrement = false;
				colvarEndOn.IsNullable = true;
				colvarEndOn.IsPrimaryKey = false;
				colvarEndOn.IsForeignKey = false;
				colvarEndOn.IsReadOnly = false;
				colvarEndOn.DefaultSetting = @"";
				colvarEndOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndOn);

				TableSchema.TableColumn colvarTravelTime = new TableSchema.TableColumn(schema);
				colvarTravelTime.ColumnName = "TravelTime";
				colvarTravelTime.DataType = DbType.Int32;
				colvarTravelTime.MaxLength = 0;
				colvarTravelTime.AutoIncrement = false;
				colvarTravelTime.IsNullable = true;
				colvarTravelTime.IsPrimaryKey = false;
				colvarTravelTime.IsForeignKey = false;
				colvarTravelTime.IsReadOnly = false;
				colvarTravelTime.DefaultSetting = @"";
				colvarTravelTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTravelTime);

				TableSchema.TableColumn colvarTechEnRouteOn = new TableSchema.TableColumn(schema);
				colvarTechEnRouteOn.ColumnName = "TechEnRouteOn";
				colvarTechEnRouteOn.DataType = DbType.DateTime;
				colvarTechEnRouteOn.MaxLength = 0;
				colvarTechEnRouteOn.AutoIncrement = false;
				colvarTechEnRouteOn.IsNullable = true;
				colvarTechEnRouteOn.IsPrimaryKey = false;
				colvarTechEnRouteOn.IsForeignKey = false;
				colvarTechEnRouteOn.IsReadOnly = false;
				colvarTechEnRouteOn.DefaultSetting = @"";
				colvarTechEnRouteOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechEnRouteOn);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = false;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = false;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = false;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.AnsiString;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
				colvarLatitude.ColumnName = "Latitude";
				colvarLatitude.DataType = DbType.Double;
				colvarLatitude.MaxLength = 0;
				colvarLatitude.AutoIncrement = false;
				colvarLatitude.IsNullable = false;
				colvarLatitude.IsPrimaryKey = false;
				colvarLatitude.IsForeignKey = false;
				colvarLatitude.IsReadOnly = false;
				colvarLatitude.DefaultSetting = @"";
				colvarLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitude);

				TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
				colvarLongitude.ColumnName = "Longitude";
				colvarLongitude.DataType = DbType.Double;
				colvarLongitude.MaxLength = 0;
				colvarLongitude.AutoIncrement = false;
				colvarLongitude.IsNullable = false;
				colvarLongitude.IsPrimaryKey = false;
				colvarLongitude.IsForeignKey = false;
				colvarLongitude.IsReadOnly = false;
				colvarLongitude.DefaultSetting = @"";
				colvarLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitude);

				TableSchema.TableColumn colvarTechGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarTechGPEmployeeID.ColumnName = "TechGPEmployeeID";
				colvarTechGPEmployeeID.DataType = DbType.String;
				colvarTechGPEmployeeID.MaxLength = 25;
				colvarTechGPEmployeeID.AutoIncrement = false;
				colvarTechGPEmployeeID.IsNullable = true;
				colvarTechGPEmployeeID.IsPrimaryKey = false;
				colvarTechGPEmployeeID.IsForeignKey = false;
				colvarTechGPEmployeeID.IsReadOnly = false;
				colvarTechGPEmployeeID.DefaultSetting = @"";
				colvarTechGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechGPEmployeeID);

				TableSchema.TableColumn colvarStatusCodeId = new TableSchema.TableColumn(schema);
				colvarStatusCodeId.ColumnName = "StatusCodeId";
				colvarStatusCodeId.DataType = DbType.Int32;
				colvarStatusCodeId.MaxLength = 0;
				colvarStatusCodeId.AutoIncrement = false;
				colvarStatusCodeId.IsNullable = true;
				colvarStatusCodeId.IsPrimaryKey = false;
				colvarStatusCodeId.IsForeignKey = false;
				colvarStatusCodeId.IsReadOnly = false;
				colvarStatusCodeId.DefaultSetting = @"";
				colvarStatusCodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusCodeId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwTS_ServiceTicketStatus",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public TS_ServiceTicketStatusView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public long ID {
			get { return GetColumnValue<long>(Columns.ID); }
			set { SetColumnValue(Columns.ID, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public int Version {
			get { return GetColumnValue<int>(Columns.Version); }
			set { SetColumnValue(Columns.Version, value); }
		}
		[DataMember]
		public int ServiceTypeId {
			get { return GetColumnValue<int>(Columns.ServiceTypeId); }
			set { SetColumnValue(Columns.ServiceTypeId, value); }
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set { SetColumnValue(Columns.AccountId, value); }
		}
		[DataMember]
		public long? CurrentAppointmentId {
			get { return GetColumnValue<long?>(Columns.CurrentAppointmentId); }
			set { SetColumnValue(Columns.CurrentAppointmentId, value); }
		}
		[DataMember]
		public string Notes {
			get { return GetColumnValue<string>(Columns.Notes); }
			set { SetColumnValue(Columns.Notes, value); }
		}
		[DataMember]
		public string CompletedNote {
			get { return GetColumnValue<string>(Columns.CompletedNote); }
			set { SetColumnValue(Columns.CompletedNote, value); }
		}
		[DataMember]
		public DateTime? CompletedOn {
			get { return GetColumnValue<DateTime?>(Columns.CompletedOn); }
			set { SetColumnValue(Columns.CompletedOn, value); }
		}
		[DataMember]
		public long? MSTicketNum {
			get { return GetColumnValue<long?>(Columns.MSTicketNum); }
			set { SetColumnValue(Columns.MSTicketNum, value); }
		}
		[DataMember]
		public string MSConfirmation {
			get { return GetColumnValue<string>(Columns.MSConfirmation); }
			set { SetColumnValue(Columns.MSConfirmation, value); }
		}
		[DataMember]
		public string DealerConfirmation {
			get { return GetColumnValue<string>(Columns.DealerConfirmation); }
			set { SetColumnValue(Columns.DealerConfirmation, value); }
		}
		[DataMember]
		public long? AppointmentId {
			get { return GetColumnValue<long?>(Columns.AppointmentId); }
			set { SetColumnValue(Columns.AppointmentId, value); }
		}
		[DataMember]
		public int? TechId {
			get { return GetColumnValue<int?>(Columns.TechId); }
			set { SetColumnValue(Columns.TechId, value); }
		}
		[DataMember]
		public string TechFullName {
			get { return GetColumnValue<string>(Columns.TechFullName); }
			set { SetColumnValue(Columns.TechFullName, value); }
		}
		[DataMember]
		public DateTime? StartOn {
			get { return GetColumnValue<DateTime?>(Columns.StartOn); }
			set { SetColumnValue(Columns.StartOn, value); }
		}
		[DataMember]
		public DateTime? EndOn {
			get { return GetColumnValue<DateTime?>(Columns.EndOn); }
			set { SetColumnValue(Columns.EndOn, value); }
		}
		[DataMember]
		public int? TravelTime {
			get { return GetColumnValue<int?>(Columns.TravelTime); }
			set { SetColumnValue(Columns.TravelTime, value); }
		}
		[DataMember]
		public DateTime? TechEnRouteOn {
			get { return GetColumnValue<DateTime?>(Columns.TechEnRouteOn); }
			set { SetColumnValue(Columns.TechEnRouteOn, value); }
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set { SetColumnValue(Columns.CustomerMasterFileId, value); }
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set { SetColumnValue(Columns.FirstName, value); }
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set { SetColumnValue(Columns.MiddleName, value); }
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set { SetColumnValue(Columns.LastName, value); }
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set { SetColumnValue(Columns.StreetAddress, value); }
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set { SetColumnValue(Columns.StreetAddress2, value); }
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set { SetColumnValue(Columns.StateId, value); }
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set { SetColumnValue(Columns.PostalCode, value); }
		}
		[DataMember]
		public double Latitude {
			get { return GetColumnValue<double>(Columns.Latitude); }
			set { SetColumnValue(Columns.Latitude, value); }
		}
		[DataMember]
		public double Longitude {
			get { return GetColumnValue<double>(Columns.Longitude); }
			set { SetColumnValue(Columns.Longitude, value); }
		}
		[DataMember]
		public string TechGPEmployeeID {
			get { return GetColumnValue<string>(Columns.TechGPEmployeeID); }
			set { SetColumnValue(Columns.TechGPEmployeeID, value); }
		}
		[DataMember]
		public int? StatusCodeId {
			get { return GetColumnValue<int?>(Columns.StatusCodeId); }
			set { SetColumnValue(Columns.StatusCodeId, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return ID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn VersionColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ServiceTypeIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CurrentAppointmentIdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn NotesColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CompletedNoteColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CompletedOnColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn MSTicketNumColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn MSConfirmationColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DealerConfirmationColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn AppointmentIdColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn TechIdColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn TechFullNameColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn StartOnColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn EndOnColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn TravelTimeColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn TechEnRouteOnColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn LatitudeColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn LongitudeColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn TechGPEmployeeIDColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn StatusCodeIdColumn
		{
			get { return Schema.Columns[35]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string ID = @"ID";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
			public const string ModifiedOn = @"ModifiedOn";
			public const string ModifiedBy = @"ModifiedBy";
			public const string IsDeleted = @"IsDeleted";
			public const string Version = @"Version";
			public const string ServiceTypeId = @"ServiceTypeId";
			public const string AccountId = @"AccountId";
			public const string CurrentAppointmentId = @"CurrentAppointmentId";
			public const string Notes = @"Notes";
			public const string CompletedNote = @"CompletedNote";
			public const string CompletedOn = @"CompletedOn";
			public const string MSTicketNum = @"MSTicketNum";
			public const string MSConfirmation = @"MSConfirmation";
			public const string DealerConfirmation = @"DealerConfirmation";
			public const string AppointmentId = @"AppointmentId";
			public const string TechId = @"TechId";
			public const string TechFullName = @"TechFullName";
			public const string StartOn = @"StartOn";
			public const string EndOn = @"EndOn";
			public const string TravelTime = @"TravelTime";
			public const string TechEnRouteOn = @"TechEnRouteOn";
			public const string CustomerMasterFileId = @"CustomerMasterFileId";
			public const string FirstName = @"FirstName";
			public const string MiddleName = @"MiddleName";
			public const string LastName = @"LastName";
			public const string StreetAddress = @"StreetAddress";
			public const string StreetAddress2 = @"StreetAddress2";
			public const string City = @"City";
			public const string StateId = @"StateId";
			public const string PostalCode = @"PostalCode";
			public const string Latitude = @"Latitude";
			public const string Longitude = @"Longitude";
			public const string TechGPEmployeeID = @"TechGPEmployeeID";
			public const string StatusCodeId = @"StatusCodeId";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the TS_TechView class.
	/// </summary>
	[DataContract]
	public partial class TS_TechViewCollection : ReadOnlyList<TS_TechView, TS_TechViewCollection>
	{
		public static TS_TechViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TS_TechViewCollection result = new TS_TechViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwTS_Tech view.
	/// </summary>
	[DataContract]
	public partial class TS_TechView : ReadOnlyRecord<TS_TechView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwTS_Tech", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRecruitId = new TableSchema.TableColumn(schema);
				colvarRecruitId.ColumnName = "RecruitId";
				colvarRecruitId.DataType = DbType.Int32;
				colvarRecruitId.MaxLength = 0;
				colvarRecruitId.AutoIncrement = false;
				colvarRecruitId.IsNullable = false;
				colvarRecruitId.IsPrimaryKey = false;
				colvarRecruitId.IsForeignKey = false;
				colvarRecruitId.IsReadOnly = false;
				colvarRecruitId.DefaultSetting = @"";
				colvarRecruitId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitId);

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int32;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = false;
				colvarID.IsNullable = true;
				colvarID.IsPrimaryKey = false;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = true;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarVersion = new TableSchema.TableColumn(schema);
				colvarVersion.ColumnName = "Version";
				colvarVersion.DataType = DbType.Int32;
				colvarVersion.MaxLength = 0;
				colvarVersion.AutoIncrement = false;
				colvarVersion.IsNullable = true;
				colvarVersion.IsPrimaryKey = false;
				colvarVersion.IsForeignKey = false;
				colvarVersion.IsReadOnly = false;
				colvarVersion.DefaultSetting = @"";
				colvarVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersion);

				TableSchema.TableColumn colvarStartLocation = new TableSchema.TableColumn(schema);
				colvarStartLocation.ColumnName = "StartLocation";
				colvarStartLocation.DataType = DbType.String;
				colvarStartLocation.MaxLength = 512;
				colvarStartLocation.AutoIncrement = false;
				colvarStartLocation.IsNullable = true;
				colvarStartLocation.IsPrimaryKey = false;
				colvarStartLocation.IsForeignKey = false;
				colvarStartLocation.IsReadOnly = false;
				colvarStartLocation.DefaultSetting = @"";
				colvarStartLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartLocation);

				TableSchema.TableColumn colvarStartLocLatitude = new TableSchema.TableColumn(schema);
				colvarStartLocLatitude.ColumnName = "StartLocLatitude";
				colvarStartLocLatitude.DataType = DbType.Double;
				colvarStartLocLatitude.MaxLength = 0;
				colvarStartLocLatitude.AutoIncrement = false;
				colvarStartLocLatitude.IsNullable = true;
				colvarStartLocLatitude.IsPrimaryKey = false;
				colvarStartLocLatitude.IsForeignKey = false;
				colvarStartLocLatitude.IsReadOnly = false;
				colvarStartLocLatitude.DefaultSetting = @"";
				colvarStartLocLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartLocLatitude);

				TableSchema.TableColumn colvarStartLocLongitude = new TableSchema.TableColumn(schema);
				colvarStartLocLongitude.ColumnName = "StartLocLongitude";
				colvarStartLocLongitude.DataType = DbType.Double;
				colvarStartLocLongitude.MaxLength = 0;
				colvarStartLocLongitude.AutoIncrement = false;
				colvarStartLocLongitude.IsNullable = true;
				colvarStartLocLongitude.IsPrimaryKey = false;
				colvarStartLocLongitude.IsForeignKey = false;
				colvarStartLocLongitude.IsReadOnly = false;
				colvarStartLocLongitude.DefaultSetting = @"";
				colvarStartLocLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartLocLongitude);

				TableSchema.TableColumn colvarMaxRadius = new TableSchema.TableColumn(schema);
				colvarMaxRadius.ColumnName = "MaxRadius";
				colvarMaxRadius.DataType = DbType.Int32;
				colvarMaxRadius.MaxLength = 0;
				colvarMaxRadius.AutoIncrement = false;
				colvarMaxRadius.IsNullable = true;
				colvarMaxRadius.IsPrimaryKey = false;
				colvarMaxRadius.IsForeignKey = false;
				colvarMaxRadius.IsReadOnly = false;
				colvarMaxRadius.DefaultSetting = @"";
				colvarMaxRadius.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxRadius);

				TableSchema.TableColumn colvarUserTypeTeamTypeID = new TableSchema.TableColumn(schema);
				colvarUserTypeTeamTypeID.ColumnName = "UserTypeTeamTypeID";
				colvarUserTypeTeamTypeID.DataType = DbType.Int32;
				colvarUserTypeTeamTypeID.MaxLength = 0;
				colvarUserTypeTeamTypeID.AutoIncrement = false;
				colvarUserTypeTeamTypeID.IsNullable = false;
				colvarUserTypeTeamTypeID.IsPrimaryKey = false;
				colvarUserTypeTeamTypeID.IsForeignKey = false;
				colvarUserTypeTeamTypeID.IsReadOnly = false;
				colvarUserTypeTeamTypeID.DefaultSetting = @"";
				colvarUserTypeTeamTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserTypeTeamTypeID);

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 101;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = true;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = false;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 25;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarSeasonName = new TableSchema.TableColumn(schema);
				colvarSeasonName.ColumnName = "SeasonName";
				colvarSeasonName.DataType = DbType.String;
				colvarSeasonName.MaxLength = 50;
				colvarSeasonName.AutoIncrement = false;
				colvarSeasonName.IsNullable = false;
				colvarSeasonName.IsPrimaryKey = false;
				colvarSeasonName.IsForeignKey = false;
				colvarSeasonName.IsReadOnly = false;
				colvarSeasonName.DefaultSetting = @"";
				colvarSeasonName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwTS_Tech",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public TS_TechView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int RecruitId {
			get { return GetColumnValue<int>(Columns.RecruitId); }
			set { SetColumnValue(Columns.RecruitId, value); }
		}
		[DataMember]
		public int? ID {
			get { return GetColumnValue<int?>(Columns.ID); }
			set { SetColumnValue(Columns.ID, value); }
		}
		[DataMember]
		public DateTime? CreatedOn {
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public DateTime? ModifiedOn {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		[DataMember]
		public bool? IsDeleted {
			get { return GetColumnValue<bool?>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public int? Version {
			get { return GetColumnValue<int?>(Columns.Version); }
			set { SetColumnValue(Columns.Version, value); }
		}
		[DataMember]
		public string StartLocation {
			get { return GetColumnValue<string>(Columns.StartLocation); }
			set { SetColumnValue(Columns.StartLocation, value); }
		}
		[DataMember]
		public double? StartLocLatitude {
			get { return GetColumnValue<double?>(Columns.StartLocLatitude); }
			set { SetColumnValue(Columns.StartLocLatitude, value); }
		}
		[DataMember]
		public double? StartLocLongitude {
			get { return GetColumnValue<double?>(Columns.StartLocLongitude); }
			set { SetColumnValue(Columns.StartLocLongitude, value); }
		}
		[DataMember]
		public int? MaxRadius {
			get { return GetColumnValue<int?>(Columns.MaxRadius); }
			set { SetColumnValue(Columns.MaxRadius, value); }
		}
		[DataMember]
		public int UserTypeTeamTypeID {
			get { return GetColumnValue<int>(Columns.UserTypeTeamTypeID); }
			set { SetColumnValue(Columns.UserTypeTeamTypeID, value); }
		}
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set { SetColumnValue(Columns.FullName, value); }
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set { SetColumnValue(Columns.GPEmployeeID, value); }
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set { SetColumnValue(Columns.SeasonID, value); }
		}
		[DataMember]
		public string SeasonName {
			get { return GetColumnValue<string>(Columns.SeasonName); }
			set { SetColumnValue(Columns.SeasonName, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return RecruitId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RecruitIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn VersionColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn StartLocationColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn StartLocLatitudeColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn StartLocLongitudeColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn MaxRadiusColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn UserTypeTeamTypeIDColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn SeasonNameColumn
		{
			get { return Schema.Columns[16]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string RecruitId = @"RecruitId";
			public const string ID = @"ID";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
			public const string ModifiedOn = @"ModifiedOn";
			public const string ModifiedBy = @"ModifiedBy";
			public const string IsDeleted = @"IsDeleted";
			public const string Version = @"Version";
			public const string StartLocation = @"StartLocation";
			public const string StartLocLatitude = @"StartLocLatitude";
			public const string StartLocLongitude = @"StartLocLongitude";
			public const string MaxRadius = @"MaxRadius";
			public const string UserTypeTeamTypeID = @"UserTypeTeamTypeID";
			public const string FullName = @"FullName";
			public const string GPEmployeeID = @"GPEmployeeID";
			public const string SeasonID = @"SeasonID";
			public const string SeasonName = @"SeasonName";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the UI_ApplicationMenuView class.
	/// </summary>
	[DataContract]
	public partial class UI_ApplicationMenuViewCollection : ReadOnlyList<UI_ApplicationMenuView, UI_ApplicationMenuViewCollection>
	{
		public static UI_ApplicationMenuViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_ApplicationMenuViewCollection result = new UI_ApplicationMenuViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwUI_ApplicationMenu view.
	/// </summary>
	[DataContract]
	public partial class UI_ApplicationMenuView : ReadOnlyRecord<UI_ApplicationMenuView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwUI_ApplicationMenu", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarApplicationID = new TableSchema.TableColumn(schema);
				colvarApplicationID.ColumnName = "ApplicationID";
				colvarApplicationID.DataType = DbType.Int32;
				colvarApplicationID.MaxLength = 0;
				colvarApplicationID.AutoIncrement = false;
				colvarApplicationID.IsNullable = false;
				colvarApplicationID.IsPrimaryKey = false;
				colvarApplicationID.IsForeignKey = false;
				colvarApplicationID.IsReadOnly = false;
				colvarApplicationID.DefaultSetting = @"";
				colvarApplicationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationID);

				TableSchema.TableColumn colvarApplicationFriendlyName = new TableSchema.TableColumn(schema);
				colvarApplicationFriendlyName.ColumnName = "ApplicationFriendlyName";
				colvarApplicationFriendlyName.DataType = DbType.String;
				colvarApplicationFriendlyName.MaxLength = 100;
				colvarApplicationFriendlyName.AutoIncrement = false;
				colvarApplicationFriendlyName.IsNullable = false;
				colvarApplicationFriendlyName.IsPrimaryKey = false;
				colvarApplicationFriendlyName.IsForeignKey = false;
				colvarApplicationFriendlyName.IsReadOnly = false;
				colvarApplicationFriendlyName.DefaultSetting = @"";
				colvarApplicationFriendlyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationFriendlyName);

				TableSchema.TableColumn colvarMenuItemID = new TableSchema.TableColumn(schema);
				colvarMenuItemID.ColumnName = "MenuItemID";
				colvarMenuItemID.DataType = DbType.Int32;
				colvarMenuItemID.MaxLength = 0;
				colvarMenuItemID.AutoIncrement = false;
				colvarMenuItemID.IsNullable = false;
				colvarMenuItemID.IsPrimaryKey = false;
				colvarMenuItemID.IsForeignKey = false;
				colvarMenuItemID.IsReadOnly = false;
				colvarMenuItemID.DefaultSetting = @"";
				colvarMenuItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMenuItemID);

				TableSchema.TableColumn colvarMenuID = new TableSchema.TableColumn(schema);
				colvarMenuID.ColumnName = "MenuID";
				colvarMenuID.DataType = DbType.Int32;
				colvarMenuID.MaxLength = 0;
				colvarMenuID.AutoIncrement = false;
				colvarMenuID.IsNullable = false;
				colvarMenuID.IsPrimaryKey = false;
				colvarMenuID.IsForeignKey = false;
				colvarMenuID.IsReadOnly = false;
				colvarMenuID.DefaultSetting = @"";
				colvarMenuID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMenuID);

				TableSchema.TableColumn colvarActionID = new TableSchema.TableColumn(schema);
				colvarActionID.ColumnName = "ActionID";
				colvarActionID.DataType = DbType.Int32;
				colvarActionID.MaxLength = 0;
				colvarActionID.AutoIncrement = false;
				colvarActionID.IsNullable = true;
				colvarActionID.IsPrimaryKey = false;
				colvarActionID.IsForeignKey = false;
				colvarActionID.IsReadOnly = false;
				colvarActionID.DefaultSetting = @"";
				colvarActionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActionID);

				TableSchema.TableColumn colvarParentItemID = new TableSchema.TableColumn(schema);
				colvarParentItemID.ColumnName = "ParentItemID";
				colvarParentItemID.DataType = DbType.Int32;
				colvarParentItemID.MaxLength = 0;
				colvarParentItemID.AutoIncrement = false;
				colvarParentItemID.IsNullable = true;
				colvarParentItemID.IsPrimaryKey = false;
				colvarParentItemID.IsForeignKey = false;
				colvarParentItemID.IsReadOnly = false;
				colvarParentItemID.DefaultSetting = @"";
				colvarParentItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParentItemID);

				TableSchema.TableColumn colvarSourceMenuItemID = new TableSchema.TableColumn(schema);
				colvarSourceMenuItemID.ColumnName = "SourceMenuItemID";
				colvarSourceMenuItemID.DataType = DbType.Int32;
				colvarSourceMenuItemID.MaxLength = 0;
				colvarSourceMenuItemID.AutoIncrement = false;
				colvarSourceMenuItemID.IsNullable = true;
				colvarSourceMenuItemID.IsPrimaryKey = false;
				colvarSourceMenuItemID.IsForeignKey = false;
				colvarSourceMenuItemID.IsReadOnly = false;
				colvarSourceMenuItemID.DefaultSetting = @"";
				colvarSourceMenuItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSourceMenuItemID);

				TableSchema.TableColumn colvarLabel = new TableSchema.TableColumn(schema);
				colvarLabel.ColumnName = "Label";
				colvarLabel.DataType = DbType.String;
				colvarLabel.MaxLength = 255;
				colvarLabel.AutoIncrement = false;
				colvarLabel.IsNullable = false;
				colvarLabel.IsPrimaryKey = false;
				colvarLabel.IsForeignKey = false;
				colvarLabel.IsReadOnly = false;
				colvarLabel.DefaultSetting = @"";
				colvarLabel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLabel);

				TableSchema.TableColumn colvarToolTip = new TableSchema.TableColumn(schema);
				colvarToolTip.ColumnName = "ToolTip";
				colvarToolTip.DataType = DbType.String;
				colvarToolTip.MaxLength = 25;
				colvarToolTip.AutoIncrement = false;
				colvarToolTip.IsNullable = true;
				colvarToolTip.IsPrimaryKey = false;
				colvarToolTip.IsForeignKey = false;
				colvarToolTip.IsReadOnly = false;
				colvarToolTip.DefaultSetting = @"";
				colvarToolTip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarToolTip);

				TableSchema.TableColumn colvarIsVisible = new TableSchema.TableColumn(schema);
				colvarIsVisible.ColumnName = "IsVisible";
				colvarIsVisible.DataType = DbType.Boolean;
				colvarIsVisible.MaxLength = 0;
				colvarIsVisible.AutoIncrement = false;
				colvarIsVisible.IsNullable = false;
				colvarIsVisible.IsPrimaryKey = false;
				colvarIsVisible.IsForeignKey = false;
				colvarIsVisible.IsReadOnly = false;
				colvarIsVisible.DefaultSetting = @"";
				colvarIsVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVisible);

				TableSchema.TableColumn colvarShowInDashboard = new TableSchema.TableColumn(schema);
				colvarShowInDashboard.ColumnName = "ShowInDashboard";
				colvarShowInDashboard.DataType = DbType.Boolean;
				colvarShowInDashboard.MaxLength = 0;
				colvarShowInDashboard.AutoIncrement = false;
				colvarShowInDashboard.IsNullable = false;
				colvarShowInDashboard.IsPrimaryKey = false;
				colvarShowInDashboard.IsForeignKey = false;
				colvarShowInDashboard.IsReadOnly = false;
				colvarShowInDashboard.DefaultSetting = @"";
				colvarShowInDashboard.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShowInDashboard);

				TableSchema.TableColumn colvarActionPriority = new TableSchema.TableColumn(schema);
				colvarActionPriority.ColumnName = "ActionPriority";
				colvarActionPriority.DataType = DbType.Int32;
				colvarActionPriority.MaxLength = 0;
				colvarActionPriority.AutoIncrement = false;
				colvarActionPriority.IsNullable = false;
				colvarActionPriority.IsPrimaryKey = false;
				colvarActionPriority.IsForeignKey = false;
				colvarActionPriority.IsReadOnly = false;
				colvarActionPriority.DefaultSetting = @"";
				colvarActionPriority.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActionPriority);

				TableSchema.TableColumn colvarApplicationVersionID = new TableSchema.TableColumn(schema);
				colvarApplicationVersionID.ColumnName = "ApplicationVersionID";
				colvarApplicationVersionID.DataType = DbType.Int32;
				colvarApplicationVersionID.MaxLength = 0;
				colvarApplicationVersionID.AutoIncrement = false;
				colvarApplicationVersionID.IsNullable = false;
				colvarApplicationVersionID.IsPrimaryKey = false;
				colvarApplicationVersionID.IsForeignKey = false;
				colvarApplicationVersionID.IsReadOnly = false;
				colvarApplicationVersionID.DefaultSetting = @"";
				colvarApplicationVersionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationVersionID);

				TableSchema.TableColumn colvarActionName = new TableSchema.TableColumn(schema);
				colvarActionName.ColumnName = "ActionName";
				colvarActionName.DataType = DbType.String;
				colvarActionName.MaxLength = 50;
				colvarActionName.AutoIncrement = false;
				colvarActionName.IsNullable = true;
				colvarActionName.IsPrimaryKey = false;
				colvarActionName.IsForeignKey = false;
				colvarActionName.IsReadOnly = false;
				colvarActionName.DefaultSetting = @"";
				colvarActionName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActionName);

				TableSchema.TableColumn colvarSmallIconFileID = new TableSchema.TableColumn(schema);
				colvarSmallIconFileID.ColumnName = "SmallIconFileID";
				colvarSmallIconFileID.DataType = DbType.Int32;
				colvarSmallIconFileID.MaxLength = 0;
				colvarSmallIconFileID.AutoIncrement = false;
				colvarSmallIconFileID.IsNullable = true;
				colvarSmallIconFileID.IsPrimaryKey = false;
				colvarSmallIconFileID.IsForeignKey = false;
				colvarSmallIconFileID.IsReadOnly = false;
				colvarSmallIconFileID.DefaultSetting = @"";
				colvarSmallIconFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSmallIconFileID);

				TableSchema.TableColumn colvarIsOverrideable = new TableSchema.TableColumn(schema);
				colvarIsOverrideable.ColumnName = "IsOverrideable";
				colvarIsOverrideable.DataType = DbType.Boolean;
				colvarIsOverrideable.MaxLength = 0;
				colvarIsOverrideable.AutoIncrement = false;
				colvarIsOverrideable.IsNullable = false;
				colvarIsOverrideable.IsPrimaryKey = false;
				colvarIsOverrideable.IsForeignKey = false;
				colvarIsOverrideable.IsReadOnly = false;
				colvarIsOverrideable.DefaultSetting = @"";
				colvarIsOverrideable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsOverrideable);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwUI_ApplicationMenu",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public UI_ApplicationMenuView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int ApplicationID {
			get { return GetColumnValue<int>(Columns.ApplicationID); }
			set { SetColumnValue(Columns.ApplicationID, value); }
		}
		[DataMember]
		public string ApplicationFriendlyName {
			get { return GetColumnValue<string>(Columns.ApplicationFriendlyName); }
			set { SetColumnValue(Columns.ApplicationFriendlyName, value); }
		}
		[DataMember]
		public int MenuItemID {
			get { return GetColumnValue<int>(Columns.MenuItemID); }
			set { SetColumnValue(Columns.MenuItemID, value); }
		}
		[DataMember]
		public int MenuID {
			get { return GetColumnValue<int>(Columns.MenuID); }
			set { SetColumnValue(Columns.MenuID, value); }
		}
		[DataMember]
		public int? ActionID {
			get { return GetColumnValue<int?>(Columns.ActionID); }
			set { SetColumnValue(Columns.ActionID, value); }
		}
		[DataMember]
		public int? ParentItemID {
			get { return GetColumnValue<int?>(Columns.ParentItemID); }
			set { SetColumnValue(Columns.ParentItemID, value); }
		}
		[DataMember]
		public int? SourceMenuItemID {
			get { return GetColumnValue<int?>(Columns.SourceMenuItemID); }
			set { SetColumnValue(Columns.SourceMenuItemID, value); }
		}
		[DataMember]
		public string Label {
			get { return GetColumnValue<string>(Columns.Label); }
			set { SetColumnValue(Columns.Label, value); }
		}
		[DataMember]
		public string ToolTip {
			get { return GetColumnValue<string>(Columns.ToolTip); }
			set { SetColumnValue(Columns.ToolTip, value); }
		}
		[DataMember]
		public bool IsVisible {
			get { return GetColumnValue<bool>(Columns.IsVisible); }
			set { SetColumnValue(Columns.IsVisible, value); }
		}
		[DataMember]
		public bool ShowInDashboard {
			get { return GetColumnValue<bool>(Columns.ShowInDashboard); }
			set { SetColumnValue(Columns.ShowInDashboard, value); }
		}
		[DataMember]
		public int ActionPriority {
			get { return GetColumnValue<int>(Columns.ActionPriority); }
			set { SetColumnValue(Columns.ActionPriority, value); }
		}
		[DataMember]
		public int ApplicationVersionID {
			get { return GetColumnValue<int>(Columns.ApplicationVersionID); }
			set { SetColumnValue(Columns.ApplicationVersionID, value); }
		}
		[DataMember]
		public string ActionName {
			get { return GetColumnValue<string>(Columns.ActionName); }
			set { SetColumnValue(Columns.ActionName, value); }
		}
		[DataMember]
		public int? SmallIconFileID {
			get { return GetColumnValue<int?>(Columns.SmallIconFileID); }
			set { SetColumnValue(Columns.SmallIconFileID, value); }
		}
		[DataMember]
		public bool IsOverrideable {
			get { return GetColumnValue<bool>(Columns.IsOverrideable); }
			set { SetColumnValue(Columns.IsOverrideable, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return ApplicationFriendlyName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ApplicationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApplicationFriendlyNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MenuItemIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MenuIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ActionIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ParentItemIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SourceMenuItemIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn LabelColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ToolTipColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsVisibleColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ShowInDashboardColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ActionPriorityColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ApplicationVersionIDColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ActionNameColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn SmallIconFileIDColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsOverrideableColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string ApplicationID = @"ApplicationID";
			public const string ApplicationFriendlyName = @"ApplicationFriendlyName";
			public const string MenuItemID = @"MenuItemID";
			public const string MenuID = @"MenuID";
			public const string ActionID = @"ActionID";
			public const string ParentItemID = @"ParentItemID";
			public const string SourceMenuItemID = @"SourceMenuItemID";
			public const string Label = @"Label";
			public const string ToolTip = @"ToolTip";
			public const string IsVisible = @"IsVisible";
			public const string ShowInDashboard = @"ShowInDashboard";
			public const string ActionPriority = @"ActionPriority";
			public const string ApplicationVersionID = @"ApplicationVersionID";
			public const string ActionName = @"ActionName";
			public const string SmallIconFileID = @"SmallIconFileID";
			public const string IsOverrideable = @"IsOverrideable";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the UI_ApplicationVersionsView class.
	/// </summary>
	[DataContract]
	public partial class UI_ApplicationVersionsViewCollection : ReadOnlyList<UI_ApplicationVersionsView, UI_ApplicationVersionsViewCollection>
	{
		public static UI_ApplicationVersionsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_ApplicationVersionsViewCollection result = new UI_ApplicationVersionsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwUI_ApplicationVersions view.
	/// </summary>
	[DataContract]
	public partial class UI_ApplicationVersionsView : ReadOnlyRecord<UI_ApplicationVersionsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwUI_ApplicationVersions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarApplicationID = new TableSchema.TableColumn(schema);
				colvarApplicationID.ColumnName = "ApplicationID";
				colvarApplicationID.DataType = DbType.Int32;
				colvarApplicationID.MaxLength = 0;
				colvarApplicationID.AutoIncrement = false;
				colvarApplicationID.IsNullable = false;
				colvarApplicationID.IsPrimaryKey = false;
				colvarApplicationID.IsForeignKey = false;
				colvarApplicationID.IsReadOnly = false;
				colvarApplicationID.DefaultSetting = @"";
				colvarApplicationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationID);

				TableSchema.TableColumn colvarIconFileId = new TableSchema.TableColumn(schema);
				colvarIconFileId.ColumnName = "IconFileId";
				colvarIconFileId.DataType = DbType.Int32;
				colvarIconFileId.MaxLength = 0;
				colvarIconFileId.AutoIncrement = false;
				colvarIconFileId.IsNullable = true;
				colvarIconFileId.IsPrimaryKey = false;
				colvarIconFileId.IsForeignKey = false;
				colvarIconFileId.IsReadOnly = false;
				colvarIconFileId.DefaultSetting = @"";
				colvarIconFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIconFileId);

				TableSchema.TableColumn colvarSmallIconFileId = new TableSchema.TableColumn(schema);
				colvarSmallIconFileId.ColumnName = "SmallIconFileId";
				colvarSmallIconFileId.DataType = DbType.Int32;
				colvarSmallIconFileId.MaxLength = 0;
				colvarSmallIconFileId.AutoIncrement = false;
				colvarSmallIconFileId.IsNullable = true;
				colvarSmallIconFileId.IsPrimaryKey = false;
				colvarSmallIconFileId.IsForeignKey = false;
				colvarSmallIconFileId.IsReadOnly = false;
				colvarSmallIconFileId.DefaultSetting = @"";
				colvarSmallIconFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSmallIconFileId);

				TableSchema.TableColumn colvarApplicationName = new TableSchema.TableColumn(schema);
				colvarApplicationName.ColumnName = "ApplicationName";
				colvarApplicationName.DataType = DbType.String;
				colvarApplicationName.MaxLength = 255;
				colvarApplicationName.AutoIncrement = false;
				colvarApplicationName.IsNullable = false;
				colvarApplicationName.IsPrimaryKey = false;
				colvarApplicationName.IsForeignKey = false;
				colvarApplicationName.IsReadOnly = false;
				colvarApplicationName.DefaultSetting = @"";
				colvarApplicationName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationName);

				TableSchema.TableColumn colvarFriendlyName = new TableSchema.TableColumn(schema);
				colvarFriendlyName.ColumnName = "FriendlyName";
				colvarFriendlyName.DataType = DbType.String;
				colvarFriendlyName.MaxLength = 100;
				colvarFriendlyName.AutoIncrement = false;
				colvarFriendlyName.IsNullable = false;
				colvarFriendlyName.IsPrimaryKey = false;
				colvarFriendlyName.IsForeignKey = false;
				colvarFriendlyName.IsReadOnly = false;
				colvarFriendlyName.DefaultSetting = @"";
				colvarFriendlyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFriendlyName);

				TableSchema.TableColumn colvarExecutableFileName = new TableSchema.TableColumn(schema);
				colvarExecutableFileName.ColumnName = "ExecutableFileName";
				colvarExecutableFileName.DataType = DbType.String;
				colvarExecutableFileName.MaxLength = 255;
				colvarExecutableFileName.AutoIncrement = false;
				colvarExecutableFileName.IsNullable = false;
				colvarExecutableFileName.IsPrimaryKey = false;
				colvarExecutableFileName.IsForeignKey = false;
				colvarExecutableFileName.IsReadOnly = false;
				colvarExecutableFileName.DefaultSetting = @"";
				colvarExecutableFileName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExecutableFileName);

				TableSchema.TableColumn colvarDeployedFileID = new TableSchema.TableColumn(schema);
				colvarDeployedFileID.ColumnName = "DeployedFileID";
				colvarDeployedFileID.DataType = DbType.Int32;
				colvarDeployedFileID.MaxLength = 0;
				colvarDeployedFileID.AutoIncrement = false;
				colvarDeployedFileID.IsNullable = false;
				colvarDeployedFileID.IsPrimaryKey = false;
				colvarDeployedFileID.IsForeignKey = false;
				colvarDeployedFileID.IsReadOnly = false;
				colvarDeployedFileID.DefaultSetting = @"";
				colvarDeployedFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeployedFileID);

				TableSchema.TableColumn colvarVersionNumber = new TableSchema.TableColumn(schema);
				colvarVersionNumber.ColumnName = "VersionNumber";
				colvarVersionNumber.DataType = DbType.AnsiString;
				colvarVersionNumber.MaxLength = 43;
				colvarVersionNumber.AutoIncrement = false;
				colvarVersionNumber.IsNullable = true;
				colvarVersionNumber.IsPrimaryKey = false;
				colvarVersionNumber.IsForeignKey = false;
				colvarVersionNumber.IsReadOnly = false;
				colvarVersionNumber.DefaultSetting = @"";
				colvarVersionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersionNumber);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwUI_ApplicationVersions",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public UI_ApplicationVersionsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int ApplicationID {
			get { return GetColumnValue<int>(Columns.ApplicationID); }
			set { SetColumnValue(Columns.ApplicationID, value); }
		}
		[DataMember]
		public int? IconFileId {
			get { return GetColumnValue<int?>(Columns.IconFileId); }
			set { SetColumnValue(Columns.IconFileId, value); }
		}
		[DataMember]
		public int? SmallIconFileId {
			get { return GetColumnValue<int?>(Columns.SmallIconFileId); }
			set { SetColumnValue(Columns.SmallIconFileId, value); }
		}
		[DataMember]
		public string ApplicationName {
			get { return GetColumnValue<string>(Columns.ApplicationName); }
			set { SetColumnValue(Columns.ApplicationName, value); }
		}
		[DataMember]
		public string FriendlyName {
			get { return GetColumnValue<string>(Columns.FriendlyName); }
			set { SetColumnValue(Columns.FriendlyName, value); }
		}
		[DataMember]
		public string ExecutableFileName {
			get { return GetColumnValue<string>(Columns.ExecutableFileName); }
			set { SetColumnValue(Columns.ExecutableFileName, value); }
		}
		[DataMember]
		public int DeployedFileID {
			get { return GetColumnValue<int>(Columns.DeployedFileID); }
			set { SetColumnValue(Columns.DeployedFileID, value); }
		}
		[DataMember]
		public string VersionNumber {
			get { return GetColumnValue<string>(Columns.VersionNumber); }
			set { SetColumnValue(Columns.VersionNumber, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return ApplicationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ApplicationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IconFileIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SmallIconFileIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ApplicationNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn FriendlyNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ExecutableFileNameColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DeployedFileIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn VersionNumberColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string ApplicationID = @"ApplicationID";
			public const string IconFileId = @"IconFileId";
			public const string SmallIconFileId = @"SmallIconFileId";
			public const string ApplicationName = @"ApplicationName";
			public const string FriendlyName = @"FriendlyName";
			public const string ExecutableFileName = @"ExecutableFileName";
			public const string DeployedFileID = @"DeployedFileID";
			public const string VersionNumber = @"VersionNumber";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the UI_ApplicationVersionsCurrentVersionsView class.
	/// </summary>
	[DataContract]
	public partial class UI_ApplicationVersionsCurrentVersionsViewCollection : ReadOnlyList<UI_ApplicationVersionsCurrentVersionsView, UI_ApplicationVersionsCurrentVersionsViewCollection>
	{
		public static UI_ApplicationVersionsCurrentVersionsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_ApplicationVersionsCurrentVersionsViewCollection result = new UI_ApplicationVersionsCurrentVersionsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwUI_ApplicationVersionsCurrentVersions view.
	/// </summary>
	[DataContract]
	public partial class UI_ApplicationVersionsCurrentVersionsView : ReadOnlyRecord<UI_ApplicationVersionsCurrentVersionsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwUI_ApplicationVersionsCurrentVersions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarApplicationVersionID = new TableSchema.TableColumn(schema);
				colvarApplicationVersionID.ColumnName = "ApplicationVersionID";
				colvarApplicationVersionID.DataType = DbType.Int32;
				colvarApplicationVersionID.MaxLength = 0;
				colvarApplicationVersionID.AutoIncrement = true;
				colvarApplicationVersionID.IsNullable = false;
				colvarApplicationVersionID.IsPrimaryKey = false;
				colvarApplicationVersionID.IsForeignKey = false;
				colvarApplicationVersionID.IsReadOnly = false;
				colvarApplicationVersionID.DefaultSetting = @"";
				colvarApplicationVersionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationVersionID);

				TableSchema.TableColumn colvarApplicationId = new TableSchema.TableColumn(schema);
				colvarApplicationId.ColumnName = "ApplicationId";
				colvarApplicationId.DataType = DbType.Int32;
				colvarApplicationId.MaxLength = 0;
				colvarApplicationId.AutoIncrement = false;
				colvarApplicationId.IsNullable = false;
				colvarApplicationId.IsPrimaryKey = false;
				colvarApplicationId.IsForeignKey = false;
				colvarApplicationId.IsReadOnly = false;
				colvarApplicationId.DefaultSetting = @"";
				colvarApplicationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationId);

				TableSchema.TableColumn colvarDeployedFileId = new TableSchema.TableColumn(schema);
				colvarDeployedFileId.ColumnName = "DeployedFileId";
				colvarDeployedFileId.DataType = DbType.Int32;
				colvarDeployedFileId.MaxLength = 0;
				colvarDeployedFileId.AutoIncrement = false;
				colvarDeployedFileId.IsNullable = false;
				colvarDeployedFileId.IsPrimaryKey = false;
				colvarDeployedFileId.IsForeignKey = false;
				colvarDeployedFileId.IsReadOnly = false;
				colvarDeployedFileId.DefaultSetting = @"";
				colvarDeployedFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeployedFileId);

				TableSchema.TableColumn colvarMajorVersionNumber = new TableSchema.TableColumn(schema);
				colvarMajorVersionNumber.ColumnName = "MajorVersionNumber";
				colvarMajorVersionNumber.DataType = DbType.Int32;
				colvarMajorVersionNumber.MaxLength = 0;
				colvarMajorVersionNumber.AutoIncrement = false;
				colvarMajorVersionNumber.IsNullable = false;
				colvarMajorVersionNumber.IsPrimaryKey = false;
				colvarMajorVersionNumber.IsForeignKey = false;
				colvarMajorVersionNumber.IsReadOnly = false;
				colvarMajorVersionNumber.DefaultSetting = @"";
				colvarMajorVersionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMajorVersionNumber);

				TableSchema.TableColumn colvarMinorVersionNumber = new TableSchema.TableColumn(schema);
				colvarMinorVersionNumber.ColumnName = "MinorVersionNumber";
				colvarMinorVersionNumber.DataType = DbType.Int32;
				colvarMinorVersionNumber.MaxLength = 0;
				colvarMinorVersionNumber.AutoIncrement = false;
				colvarMinorVersionNumber.IsNullable = false;
				colvarMinorVersionNumber.IsPrimaryKey = false;
				colvarMinorVersionNumber.IsForeignKey = false;
				colvarMinorVersionNumber.IsReadOnly = false;
				colvarMinorVersionNumber.DefaultSetting = @"";
				colvarMinorVersionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinorVersionNumber);

				TableSchema.TableColumn colvarBuildNumber = new TableSchema.TableColumn(schema);
				colvarBuildNumber.ColumnName = "BuildNumber";
				colvarBuildNumber.DataType = DbType.Int32;
				colvarBuildNumber.MaxLength = 0;
				colvarBuildNumber.AutoIncrement = false;
				colvarBuildNumber.IsNullable = false;
				colvarBuildNumber.IsPrimaryKey = false;
				colvarBuildNumber.IsForeignKey = false;
				colvarBuildNumber.IsReadOnly = false;
				colvarBuildNumber.DefaultSetting = @"";
				colvarBuildNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBuildNumber);

				TableSchema.TableColumn colvarRevisionNumber = new TableSchema.TableColumn(schema);
				colvarRevisionNumber.ColumnName = "RevisionNumber";
				colvarRevisionNumber.DataType = DbType.AnsiString;
				colvarRevisionNumber.MaxLength = 43;
				colvarRevisionNumber.AutoIncrement = false;
				colvarRevisionNumber.IsNullable = true;
				colvarRevisionNumber.IsPrimaryKey = false;
				colvarRevisionNumber.IsForeignKey = false;
				colvarRevisionNumber.IsReadOnly = false;
				colvarRevisionNumber.DefaultSetting = @"";
				colvarRevisionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRevisionNumber);

				TableSchema.TableColumn colvarVersionNumber = new TableSchema.TableColumn(schema);
				colvarVersionNumber.ColumnName = "VersionNumber";
				colvarVersionNumber.DataType = DbType.AnsiString;
				colvarVersionNumber.MaxLength = 43;
				colvarVersionNumber.AutoIncrement = false;
				colvarVersionNumber.IsNullable = true;
				colvarVersionNumber.IsPrimaryKey = false;
				colvarVersionNumber.IsForeignKey = false;
				colvarVersionNumber.IsReadOnly = false;
				colvarVersionNumber.DefaultSetting = @"";
				colvarVersionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersionNumber);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarRN = new TableSchema.TableColumn(schema);
				colvarRN.ColumnName = "RN";
				colvarRN.DataType = DbType.Int64;
				colvarRN.MaxLength = 0;
				colvarRN.AutoIncrement = false;
				colvarRN.IsNullable = true;
				colvarRN.IsPrimaryKey = false;
				colvarRN.IsForeignKey = false;
				colvarRN.IsReadOnly = false;
				colvarRN.DefaultSetting = @"";
				colvarRN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRN);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwUI_ApplicationVersionsCurrentVersions",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public UI_ApplicationVersionsCurrentVersionsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int ApplicationVersionID {
			get { return GetColumnValue<int>(Columns.ApplicationVersionID); }
			set { SetColumnValue(Columns.ApplicationVersionID, value); }
		}
		[DataMember]
		public int ApplicationId {
			get { return GetColumnValue<int>(Columns.ApplicationId); }
			set { SetColumnValue(Columns.ApplicationId, value); }
		}
		[DataMember]
		public int DeployedFileId {
			get { return GetColumnValue<int>(Columns.DeployedFileId); }
			set { SetColumnValue(Columns.DeployedFileId, value); }
		}
		[DataMember]
		public int MajorVersionNumber {
			get { return GetColumnValue<int>(Columns.MajorVersionNumber); }
			set { SetColumnValue(Columns.MajorVersionNumber, value); }
		}
		[DataMember]
		public int MinorVersionNumber {
			get { return GetColumnValue<int>(Columns.MinorVersionNumber); }
			set { SetColumnValue(Columns.MinorVersionNumber, value); }
		}
		[DataMember]
		public int BuildNumber {
			get { return GetColumnValue<int>(Columns.BuildNumber); }
			set { SetColumnValue(Columns.BuildNumber, value); }
		}
		[DataMember]
		public string RevisionNumber {
			get { return GetColumnValue<string>(Columns.RevisionNumber); }
			set { SetColumnValue(Columns.RevisionNumber, value); }
		}
		[DataMember]
		public string VersionNumber {
			get { return GetColumnValue<string>(Columns.VersionNumber); }
			set { SetColumnValue(Columns.VersionNumber, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public long? RN {
			get { return GetColumnValue<long?>(Columns.RN); }
			set { SetColumnValue(Columns.RN, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return ApplicationVersionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ApplicationVersionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApplicationIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DeployedFileIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MajorVersionNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MinorVersionNumberColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn BuildNumberColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RevisionNumberColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn VersionNumberColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn RNColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string ApplicationVersionID = @"ApplicationVersionID";
			public const string ApplicationId = @"ApplicationId";
			public const string DeployedFileId = @"DeployedFileId";
			public const string MajorVersionNumber = @"MajorVersionNumber";
			public const string MinorVersionNumber = @"MinorVersionNumber";
			public const string BuildNumber = @"BuildNumber";
			public const string RevisionNumber = @"RevisionNumber";
			public const string VersionNumber = @"VersionNumber";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
			public const string RN = @"RN";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the UI_MenuItemsExpandedPermissionsView class.
	/// </summary>
	[DataContract]
	public partial class UI_MenuItemsExpandedPermissionsViewCollection : ReadOnlyList<UI_MenuItemsExpandedPermissionsView, UI_MenuItemsExpandedPermissionsViewCollection>
	{
		public static UI_MenuItemsExpandedPermissionsViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_MenuItemsExpandedPermissionsViewCollection result = new UI_MenuItemsExpandedPermissionsViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwUI_MenuItemsExpandedPermissions view.
	/// </summary>
	[DataContract]
	public partial class UI_MenuItemsExpandedPermissionsView : ReadOnlyRecord<UI_MenuItemsExpandedPermissionsView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwUI_MenuItemsExpandedPermissions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarApplicationVersionID = new TableSchema.TableColumn(schema);
				colvarApplicationVersionID.ColumnName = "ApplicationVersionID";
				colvarApplicationVersionID.DataType = DbType.Int32;
				colvarApplicationVersionID.MaxLength = 0;
				colvarApplicationVersionID.AutoIncrement = true;
				colvarApplicationVersionID.IsNullable = false;
				colvarApplicationVersionID.IsPrimaryKey = false;
				colvarApplicationVersionID.IsForeignKey = false;
				colvarApplicationVersionID.IsReadOnly = false;
				colvarApplicationVersionID.DefaultSetting = @"";
				colvarApplicationVersionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationVersionID);

				TableSchema.TableColumn colvarApplicationId = new TableSchema.TableColumn(schema);
				colvarApplicationId.ColumnName = "ApplicationId";
				colvarApplicationId.DataType = DbType.Int32;
				colvarApplicationId.MaxLength = 0;
				colvarApplicationId.AutoIncrement = false;
				colvarApplicationId.IsNullable = false;
				colvarApplicationId.IsPrimaryKey = false;
				colvarApplicationId.IsForeignKey = false;
				colvarApplicationId.IsReadOnly = false;
				colvarApplicationId.DefaultSetting = @"";
				colvarApplicationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationId);

				TableSchema.TableColumn colvarDeployedFileId = new TableSchema.TableColumn(schema);
				colvarDeployedFileId.ColumnName = "DeployedFileId";
				colvarDeployedFileId.DataType = DbType.Int32;
				colvarDeployedFileId.MaxLength = 0;
				colvarDeployedFileId.AutoIncrement = false;
				colvarDeployedFileId.IsNullable = false;
				colvarDeployedFileId.IsPrimaryKey = false;
				colvarDeployedFileId.IsForeignKey = false;
				colvarDeployedFileId.IsReadOnly = false;
				colvarDeployedFileId.DefaultSetting = @"";
				colvarDeployedFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeployedFileId);

				TableSchema.TableColumn colvarMajorVersionNumber = new TableSchema.TableColumn(schema);
				colvarMajorVersionNumber.ColumnName = "MajorVersionNumber";
				colvarMajorVersionNumber.DataType = DbType.Int32;
				colvarMajorVersionNumber.MaxLength = 0;
				colvarMajorVersionNumber.AutoIncrement = false;
				colvarMajorVersionNumber.IsNullable = false;
				colvarMajorVersionNumber.IsPrimaryKey = false;
				colvarMajorVersionNumber.IsForeignKey = false;
				colvarMajorVersionNumber.IsReadOnly = false;
				colvarMajorVersionNumber.DefaultSetting = @"";
				colvarMajorVersionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMajorVersionNumber);

				TableSchema.TableColumn colvarMinorVersionNumber = new TableSchema.TableColumn(schema);
				colvarMinorVersionNumber.ColumnName = "MinorVersionNumber";
				colvarMinorVersionNumber.DataType = DbType.Int32;
				colvarMinorVersionNumber.MaxLength = 0;
				colvarMinorVersionNumber.AutoIncrement = false;
				colvarMinorVersionNumber.IsNullable = false;
				colvarMinorVersionNumber.IsPrimaryKey = false;
				colvarMinorVersionNumber.IsForeignKey = false;
				colvarMinorVersionNumber.IsReadOnly = false;
				colvarMinorVersionNumber.DefaultSetting = @"";
				colvarMinorVersionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinorVersionNumber);

				TableSchema.TableColumn colvarBuildNumber = new TableSchema.TableColumn(schema);
				colvarBuildNumber.ColumnName = "BuildNumber";
				colvarBuildNumber.DataType = DbType.Int32;
				colvarBuildNumber.MaxLength = 0;
				colvarBuildNumber.AutoIncrement = false;
				colvarBuildNumber.IsNullable = false;
				colvarBuildNumber.IsPrimaryKey = false;
				colvarBuildNumber.IsForeignKey = false;
				colvarBuildNumber.IsReadOnly = false;
				colvarBuildNumber.DefaultSetting = @"";
				colvarBuildNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBuildNumber);

				TableSchema.TableColumn colvarRevisionNumber = new TableSchema.TableColumn(schema);
				colvarRevisionNumber.ColumnName = "RevisionNumber";
				colvarRevisionNumber.DataType = DbType.AnsiString;
				colvarRevisionNumber.MaxLength = 43;
				colvarRevisionNumber.AutoIncrement = false;
				colvarRevisionNumber.IsNullable = true;
				colvarRevisionNumber.IsPrimaryKey = false;
				colvarRevisionNumber.IsForeignKey = false;
				colvarRevisionNumber.IsReadOnly = false;
				colvarRevisionNumber.DefaultSetting = @"";
				colvarRevisionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRevisionNumber);

				TableSchema.TableColumn colvarVersionNumber = new TableSchema.TableColumn(schema);
				colvarVersionNumber.ColumnName = "VersionNumber";
				colvarVersionNumber.DataType = DbType.AnsiString;
				colvarVersionNumber.MaxLength = 43;
				colvarVersionNumber.AutoIncrement = false;
				colvarVersionNumber.IsNullable = true;
				colvarVersionNumber.IsPrimaryKey = false;
				colvarVersionNumber.IsForeignKey = false;
				colvarVersionNumber.IsReadOnly = false;
				colvarVersionNumber.DefaultSetting = @"";
				colvarVersionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersionNumber);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarRN = new TableSchema.TableColumn(schema);
				colvarRN.ColumnName = "RN";
				colvarRN.DataType = DbType.Int64;
				colvarRN.MaxLength = 0;
				colvarRN.AutoIncrement = false;
				colvarRN.IsNullable = true;
				colvarRN.IsPrimaryKey = false;
				colvarRN.IsForeignKey = false;
				colvarRN.IsReadOnly = false;
				colvarRN.DefaultSetting = @"";
				colvarRN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRN);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwUI_MenuItemsExpandedPermissions",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public UI_MenuItemsExpandedPermissionsView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int ApplicationVersionID {
			get { return GetColumnValue<int>(Columns.ApplicationVersionID); }
			set { SetColumnValue(Columns.ApplicationVersionID, value); }
		}
		[DataMember]
		public int ApplicationId {
			get { return GetColumnValue<int>(Columns.ApplicationId); }
			set { SetColumnValue(Columns.ApplicationId, value); }
		}
		[DataMember]
		public int DeployedFileId {
			get { return GetColumnValue<int>(Columns.DeployedFileId); }
			set { SetColumnValue(Columns.DeployedFileId, value); }
		}
		[DataMember]
		public int MajorVersionNumber {
			get { return GetColumnValue<int>(Columns.MajorVersionNumber); }
			set { SetColumnValue(Columns.MajorVersionNumber, value); }
		}
		[DataMember]
		public int MinorVersionNumber {
			get { return GetColumnValue<int>(Columns.MinorVersionNumber); }
			set { SetColumnValue(Columns.MinorVersionNumber, value); }
		}
		[DataMember]
		public int BuildNumber {
			get { return GetColumnValue<int>(Columns.BuildNumber); }
			set { SetColumnValue(Columns.BuildNumber, value); }
		}
		[DataMember]
		public string RevisionNumber {
			get { return GetColumnValue<string>(Columns.RevisionNumber); }
			set { SetColumnValue(Columns.RevisionNumber, value); }
		}
		[DataMember]
		public string VersionNumber {
			get { return GetColumnValue<string>(Columns.VersionNumber); }
			set { SetColumnValue(Columns.VersionNumber, value); }
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set { SetColumnValue(Columns.IsActive, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public long? RN {
			get { return GetColumnValue<long?>(Columns.RN); }
			set { SetColumnValue(Columns.RN, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return ApplicationVersionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ApplicationVersionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApplicationIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DeployedFileIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MajorVersionNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MinorVersionNumberColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn BuildNumberColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RevisionNumberColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn VersionNumberColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn RNColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string ApplicationVersionID = @"ApplicationVersionID";
			public const string ApplicationId = @"ApplicationId";
			public const string DeployedFileId = @"DeployedFileId";
			public const string MajorVersionNumber = @"MajorVersionNumber";
			public const string MinorVersionNumber = @"MinorVersionNumber";
			public const string BuildNumber = @"BuildNumber";
			public const string RevisionNumber = @"RevisionNumber";
			public const string VersionNumber = @"VersionNumber";
			public const string IsActive = @"IsActive";
			public const string IsDeleted = @"IsDeleted";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
			public const string RN = @"RN";
		}
		#endregion Columns Struct
	}
	/// <summary>
	/// Strongly-typed collection for the UI_MenusCurrentMenusView class.
	/// </summary>
	[DataContract]
	public partial class UI_MenusCurrentMenusViewCollection : ReadOnlyList<UI_MenusCurrentMenusView, UI_MenusCurrentMenusViewCollection>
	{
		public static UI_MenusCurrentMenusViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_MenusCurrentMenusViewCollection result = new UI_MenusCurrentMenusViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
	}

	/// <summary>
	/// This is a Read-only wrapper class for the vwUI_MenusCurrentMenus view.
	/// </summary>
	[DataContract]
	public partial class UI_MenusCurrentMenusView : ReadOnlyRecord<UI_MenusCurrentMenusView>
	{
		#region Default Settings
		protected static void SetSQLProps() { GetTableSchema(); }
		#endregion

		#region Schema Accessor
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwUI_MenusCurrentMenus", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMenuID = new TableSchema.TableColumn(schema);
				colvarMenuID.ColumnName = "MenuID";
				colvarMenuID.DataType = DbType.Int32;
				colvarMenuID.MaxLength = 0;
				colvarMenuID.AutoIncrement = true;
				colvarMenuID.IsNullable = false;
				colvarMenuID.IsPrimaryKey = false;
				colvarMenuID.IsForeignKey = false;
				colvarMenuID.IsReadOnly = false;
				colvarMenuID.DefaultSetting = @"";
				colvarMenuID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMenuID);

				TableSchema.TableColumn colvarApplicationVersionId = new TableSchema.TableColumn(schema);
				colvarApplicationVersionId.ColumnName = "ApplicationVersionId";
				colvarApplicationVersionId.DataType = DbType.Int32;
				colvarApplicationVersionId.MaxLength = 0;
				colvarApplicationVersionId.AutoIncrement = false;
				colvarApplicationVersionId.IsNullable = false;
				colvarApplicationVersionId.IsPrimaryKey = false;
				colvarApplicationVersionId.IsForeignKey = false;
				colvarApplicationVersionId.IsReadOnly = false;
				colvarApplicationVersionId.DefaultSetting = @"";
				colvarApplicationVersionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationVersionId);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarRN = new TableSchema.TableColumn(schema);
				colvarRN.ColumnName = "RN";
				colvarRN.DataType = DbType.Int64;
				colvarRN.MaxLength = 0;
				colvarRN.AutoIncrement = false;
				colvarRN.IsNullable = true;
				colvarRN.IsPrimaryKey = false;
				colvarRN.IsForeignKey = false;
				colvarRN.IsReadOnly = false;
				colvarRN.DefaultSetting = @"";
				colvarRN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRN);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("vwUI_MenusCurrentMenus",schema);
			}
		}
		#endregion //Schema Accessor

		#region Query Accessor
		public static Query CreateQuery()
		{
			return new Query(Schema);
		}
		#endregion //Query Accessor

		#region .ctors
		public UI_MenusCurrentMenusView()
		{
			SetSQLProps();SetDefaults();MarkNew();
		}
		#endregion

		#region Properties
		[DataMember]
		public int MenuID {
			get { return GetColumnValue<int>(Columns.MenuID); }
			set { SetColumnValue(Columns.MenuID, value); }
		}
		[DataMember]
		public int ApplicationVersionId {
			get { return GetColumnValue<int>(Columns.ApplicationVersionId); }
			set { SetColumnValue(Columns.ApplicationVersionId, value); }
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		[DataMember]
		public long? RN {
			get { return GetColumnValue<long?>(Columns.RN); }
			set { SetColumnValue(Columns.RN, value); }
		}

		#endregion //Properties

		public override string ToString()
		{
			return MenuID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MenuIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApplicationVersionIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RNColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public const string MenuID = @"MenuID";
			public const string ApplicationVersionId = @"ApplicationVersionId";
			public const string IsDeleted = @"IsDeleted";
			public const string CreatedOn = @"CreatedOn";
			public const string CreatedBy = @"CreatedBy";
			public const string RN = @"RN";
		}
		#endregion Columns Struct
	}
}
