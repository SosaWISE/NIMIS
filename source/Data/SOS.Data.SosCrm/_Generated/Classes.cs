


using System;
using System.ComponentModel;
using System.Linq;
using SubSonic;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;
using System.Data;
using System.Data.SqlClient;
using System.Runtime.Serialization;
using SOS.Data;

namespace SOS.Data.SosCrm
{
	/// <summary>
	/// Strongly-typed collection for the AE_AccountAddressType class.
	/// </summary>
	[DataContract]
	public partial class AE_AccountAddressTypeCollection : ActiveList<AE_AccountAddressType, AE_AccountAddressTypeCollection>
	{
		public static AE_AccountAddressTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_AccountAddressTypeCollection result = new AE_AccountAddressTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_AccountAddressType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_AccountAddressTypes table.
	/// </summary>
	[DataContract]
	public partial class AE_AccountAddressType : ActiveRecord<AE_AccountAddressType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_AccountAddressType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_AccountAddressTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountAddressTypeID = new TableSchema.TableColumn(schema);
				colvarAccountAddressTypeID.ColumnName = "AccountAddressTypeID";
				colvarAccountAddressTypeID.DataType = DbType.AnsiString;
				colvarAccountAddressTypeID.MaxLength = 20;
				colvarAccountAddressTypeID.AutoIncrement = false;
				colvarAccountAddressTypeID.IsNullable = false;
				colvarAccountAddressTypeID.IsPrimaryKey = true;
				colvarAccountAddressTypeID.IsForeignKey = false;
				colvarAccountAddressTypeID.IsReadOnly = false;
				colvarAccountAddressTypeID.DefaultSetting = @"";
				colvarAccountAddressTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountAddressTypeID);

				TableSchema.TableColumn colvarAccountAddressType = new TableSchema.TableColumn(schema);
				colvarAccountAddressType.ColumnName = "AccountAddressType";
				colvarAccountAddressType.DataType = DbType.AnsiString;
				colvarAccountAddressType.MaxLength = 50;
				colvarAccountAddressType.AutoIncrement = false;
				colvarAccountAddressType.IsNullable = false;
				colvarAccountAddressType.IsPrimaryKey = false;
				colvarAccountAddressType.IsForeignKey = false;
				colvarAccountAddressType.IsReadOnly = false;
				colvarAccountAddressType.DefaultSetting = @"";
				colvarAccountAddressType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountAddressType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_AccountAddressTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_AccountAddressType LoadFrom(AE_AccountAddressType item)
		{
			AE_AccountAddressType result = new AE_AccountAddressType();
			if (item.AccountAddressTypeID != default(string)) {
				result.LoadByKey(item.AccountAddressTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AccountAddressTypeID {
			get { return GetColumnValue<string>(Columns.AccountAddressTypeID); }
			set {
				SetColumnValue(Columns.AccountAddressTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountAddressTypeID));
			}
		}
		[DataMember]
		public string AccountAddressType {
			get { return GetColumnValue<string>(Columns.AccountAddressType); }
			set {
				SetColumnValue(Columns.AccountAddressType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountAddressType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountAddressType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountAddressTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountAddressTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountAddressTypeID = @"AccountAddressTypeID";
			public static readonly string AccountAddressType = @"AccountAddressType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountAddressTypeID; }
		}
		*/

		#region Foreign Collections

		private MC_AccountAddressCollection _MC_AccountAddressesCol;
		//Relationship: FK_MC_AccountAddresses_AE_AccountAddressTypes
		public MC_AccountAddressCollection MC_AccountAddressesCol
		{
			get
			{
				if(_MC_AccountAddressesCol == null) {
					_MC_AccountAddressesCol = new MC_AccountAddressCollection();
					_MC_AccountAddressesCol.LoadAndCloseReader(MC_AccountAddress.Query()
						.WHERE(MC_AccountAddress.Columns.AccountAddressTypeId, AccountAddressTypeID).ExecuteReader());
				}
				return _MC_AccountAddressesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_AgingStep class.
	/// </summary>
	[DataContract]
	public partial class AE_AgingStepCollection : ActiveList<AE_AgingStep, AE_AgingStepCollection>
	{
		public static AE_AgingStepCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_AgingStepCollection result = new AE_AgingStepCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_AgingStep item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_AgingSteps table.
	/// </summary>
	[DataContract]
	public partial class AE_AgingStep : ActiveRecord<AE_AgingStep>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_AgingStep()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_AgingSteps", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAgingStepID = new TableSchema.TableColumn(schema);
				colvarAgingStepID.ColumnName = "AgingStepID";
				colvarAgingStepID.DataType = DbType.AnsiString;
				colvarAgingStepID.MaxLength = 10;
				colvarAgingStepID.AutoIncrement = false;
				colvarAgingStepID.IsNullable = false;
				colvarAgingStepID.IsPrimaryKey = true;
				colvarAgingStepID.IsForeignKey = false;
				colvarAgingStepID.IsReadOnly = false;
				colvarAgingStepID.DefaultSetting = @"";
				colvarAgingStepID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgingStepID);

				TableSchema.TableColumn colvarAgingStep = new TableSchema.TableColumn(schema);
				colvarAgingStep.ColumnName = "AgingStep";
				colvarAgingStep.DataType = DbType.AnsiString;
				colvarAgingStep.MaxLength = 50;
				colvarAgingStep.AutoIncrement = false;
				colvarAgingStep.IsNullable = true;
				colvarAgingStep.IsPrimaryKey = false;
				colvarAgingStep.IsForeignKey = false;
				colvarAgingStep.IsReadOnly = false;
				colvarAgingStep.DefaultSetting = @"";
				colvarAgingStep.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgingStep);

				TableSchema.TableColumn colvarStepOrder = new TableSchema.TableColumn(schema);
				colvarStepOrder.ColumnName = "StepOrder";
				colvarStepOrder.DataType = DbType.Int16;
				colvarStepOrder.MaxLength = 0;
				colvarStepOrder.AutoIncrement = false;
				colvarStepOrder.IsNullable = false;
				colvarStepOrder.IsPrimaryKey = false;
				colvarStepOrder.IsForeignKey = false;
				colvarStepOrder.IsReadOnly = false;
				colvarStepOrder.DefaultSetting = @"((0))";
				colvarStepOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStepOrder);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_AgingSteps",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_AgingStep LoadFrom(AE_AgingStep item)
		{
			AE_AgingStep result = new AE_AgingStep();
			if (item.AgingStepID != default(string)) {
				result.LoadByKey(item.AgingStepID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AgingStepID {
			get { return GetColumnValue<string>(Columns.AgingStepID); }
			set {
				SetColumnValue(Columns.AgingStepID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgingStepID));
			}
		}
		[DataMember]
		public string AgingStep {
			get { return GetColumnValue<string>(Columns.AgingStep); }
			set {
				SetColumnValue(Columns.AgingStep, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgingStep));
			}
		}
		[DataMember]
		public short StepOrder {
			get { return GetColumnValue<short>(Columns.StepOrder); }
			set {
				SetColumnValue(Columns.StepOrder, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StepOrder));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AgingStep;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AgingStepIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AgingStepColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn StepOrderColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AgingStepID = @"AgingStepID";
			public static readonly string AgingStep = @"AgingStep";
			public static readonly string StepOrder = @"StepOrder";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AgingStepID; }
		}
		*/

		#region Foreign Collections

		private SAE_AgingCollection _SAE_AgingsCol;
		//Relationship: FK_SAE_Aging_AE_AgingSteps
		public SAE_AgingCollection SAE_AgingsCol
		{
			get
			{
				if(_SAE_AgingsCol == null) {
					_SAE_AgingsCol = new SAE_AgingCollection();
					_SAE_AgingsCol.LoadAndCloseReader(SAE_Aging.Query()
						.WHERE(SAE_Aging.Columns.AgingStepId, AgingStepID).ExecuteReader());
				}
				return _SAE_AgingsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_BankAccountType class.
	/// </summary>
	[DataContract]
	public partial class AE_BankAccountTypeCollection : ActiveList<AE_BankAccountType, AE_BankAccountTypeCollection>
	{
		public static AE_BankAccountTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_BankAccountTypeCollection result = new AE_BankAccountTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_BankAccountType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_BankAccountTypes table.
	/// </summary>
	[DataContract]
	public partial class AE_BankAccountType : ActiveRecord<AE_BankAccountType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_BankAccountType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_BankAccountTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBankAccountTypeID = new TableSchema.TableColumn(schema);
				colvarBankAccountTypeID.ColumnName = "BankAccountTypeID";
				colvarBankAccountTypeID.DataType = DbType.Int32;
				colvarBankAccountTypeID.MaxLength = 0;
				colvarBankAccountTypeID.AutoIncrement = true;
				colvarBankAccountTypeID.IsNullable = false;
				colvarBankAccountTypeID.IsPrimaryKey = true;
				colvarBankAccountTypeID.IsForeignKey = false;
				colvarBankAccountTypeID.IsReadOnly = false;
				colvarBankAccountTypeID.DefaultSetting = @"";
				colvarBankAccountTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBankAccountTypeID);

				TableSchema.TableColumn colvarBankAccountType = new TableSchema.TableColumn(schema);
				colvarBankAccountType.ColumnName = "BankAccountType";
				colvarBankAccountType.DataType = DbType.String;
				colvarBankAccountType.MaxLength = 50;
				colvarBankAccountType.AutoIncrement = false;
				colvarBankAccountType.IsNullable = false;
				colvarBankAccountType.IsPrimaryKey = false;
				colvarBankAccountType.IsForeignKey = false;
				colvarBankAccountType.IsReadOnly = false;
				colvarBankAccountType.DefaultSetting = @"";
				colvarBankAccountType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBankAccountType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_BankAccountTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_BankAccountType LoadFrom(AE_BankAccountType item)
		{
			AE_BankAccountType result = new AE_BankAccountType();
			if (item.BankAccountTypeID != default(int)) {
				result.LoadByKey(item.BankAccountTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BankAccountTypeID {
			get { return GetColumnValue<int>(Columns.BankAccountTypeID); }
			set {
				SetColumnValue(Columns.BankAccountTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BankAccountTypeID));
			}
		}
		[DataMember]
		public string BankAccountType {
			get { return GetColumnValue<string>(Columns.BankAccountType); }
			set {
				SetColumnValue(Columns.BankAccountType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BankAccountType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return BankAccountType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BankAccountTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BankAccountTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BankAccountTypeID = @"BankAccountTypeID";
			public static readonly string BankAccountType = @"BankAccountType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BankAccountTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_BillingCustomer class.
	/// </summary>
	[DataContract]
	public partial class AE_BillingCustomerCollection : ActiveList<AE_BillingCustomer, AE_BillingCustomerCollection>
	{
		public static AE_BillingCustomerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_BillingCustomerCollection result = new AE_BillingCustomerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_BillingCustomer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_BillingCustomers table.
	/// </summary>
	[DataContract]
	public partial class AE_BillingCustomer : ActiveRecord<AE_BillingCustomer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_BillingCustomer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_BillingCustomers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBillingCustomerID = new TableSchema.TableColumn(schema);
				colvarBillingCustomerID.ColumnName = "BillingCustomerID";
				colvarBillingCustomerID.DataType = DbType.Int64;
				colvarBillingCustomerID.MaxLength = 0;
				colvarBillingCustomerID.AutoIncrement = true;
				colvarBillingCustomerID.IsNullable = false;
				colvarBillingCustomerID.IsPrimaryKey = true;
				colvarBillingCustomerID.IsForeignKey = false;
				colvarBillingCustomerID.IsReadOnly = false;
				colvarBillingCustomerID.DefaultSetting = @"";
				colvarBillingCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingCustomerID);

				TableSchema.TableColumn colvarBillingTypeId = new TableSchema.TableColumn(schema);
				colvarBillingTypeId.ColumnName = "BillingTypeId";
				colvarBillingTypeId.DataType = DbType.AnsiString;
				colvarBillingTypeId.MaxLength = 10;
				colvarBillingTypeId.AutoIncrement = false;
				colvarBillingTypeId.IsNullable = false;
				colvarBillingTypeId.IsPrimaryKey = false;
				colvarBillingTypeId.IsForeignKey = true;
				colvarBillingTypeId.IsReadOnly = false;
				colvarBillingTypeId.DefaultSetting = @"('CC')";
				colvarBillingTypeId.ForeignKeyTableName = "AE_BillingTypes";
				schema.Columns.Add(colvarBillingTypeId);

				TableSchema.TableColumn colvarContractId = new TableSchema.TableColumn(schema);
				colvarContractId.ColumnName = "ContractId";
				colvarContractId.DataType = DbType.Int32;
				colvarContractId.MaxLength = 0;
				colvarContractId.AutoIncrement = false;
				colvarContractId.IsNullable = false;
				colvarContractId.IsPrimaryKey = false;
				colvarContractId.IsForeignKey = true;
				colvarContractId.IsReadOnly = false;
				colvarContractId.DefaultSetting = @"";
				colvarContractId.ForeignKeyTableName = "AE_Contracts";
				schema.Columns.Add(colvarContractId);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = true;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "AE_Customers";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarMonthlyFee = new TableSchema.TableColumn(schema);
				colvarMonthlyFee.ColumnName = "MonthlyFee";
				colvarMonthlyFee.DataType = DbType.Currency;
				colvarMonthlyFee.MaxLength = 0;
				colvarMonthlyFee.AutoIncrement = false;
				colvarMonthlyFee.IsNullable = false;
				colvarMonthlyFee.IsPrimaryKey = false;
				colvarMonthlyFee.IsForeignKey = false;
				colvarMonthlyFee.IsReadOnly = false;
				colvarMonthlyFee.DefaultSetting = @"((10))";
				colvarMonthlyFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthlyFee);

				TableSchema.TableColumn colvarCcNameOn = new TableSchema.TableColumn(schema);
				colvarCcNameOn.ColumnName = "CcNameOn";
				colvarCcNameOn.DataType = DbType.String;
				colvarCcNameOn.MaxLength = 50;
				colvarCcNameOn.AutoIncrement = false;
				colvarCcNameOn.IsNullable = true;
				colvarCcNameOn.IsPrimaryKey = false;
				colvarCcNameOn.IsForeignKey = false;
				colvarCcNameOn.IsReadOnly = false;
				colvarCcNameOn.DefaultSetting = @"";
				colvarCcNameOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcNameOn);

				TableSchema.TableColumn colvarCcNumber = new TableSchema.TableColumn(schema);
				colvarCcNumber.ColumnName = "CcNumber";
				colvarCcNumber.DataType = DbType.String;
				colvarCcNumber.MaxLength = 50;
				colvarCcNumber.AutoIncrement = false;
				colvarCcNumber.IsNullable = true;
				colvarCcNumber.IsPrimaryKey = false;
				colvarCcNumber.IsForeignKey = false;
				colvarCcNumber.IsReadOnly = false;
				colvarCcNumber.DefaultSetting = @"";
				colvarCcNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcNumber);

				TableSchema.TableColumn colvarCcType = new TableSchema.TableColumn(schema);
				colvarCcType.ColumnName = "CcType";
				colvarCcType.DataType = DbType.String;
				colvarCcType.MaxLength = 10;
				colvarCcType.AutoIncrement = false;
				colvarCcType.IsNullable = true;
				colvarCcType.IsPrimaryKey = false;
				colvarCcType.IsForeignKey = false;
				colvarCcType.IsReadOnly = false;
				colvarCcType.DefaultSetting = @"";
				colvarCcType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcType);

				TableSchema.TableColumn colvarCcv = new TableSchema.TableColumn(schema);
				colvarCcv.ColumnName = "Ccv";
				colvarCcv.DataType = DbType.String;
				colvarCcv.MaxLength = 50;
				colvarCcv.AutoIncrement = false;
				colvarCcv.IsNullable = true;
				colvarCcv.IsPrimaryKey = false;
				colvarCcv.IsForeignKey = false;
				colvarCcv.IsReadOnly = false;
				colvarCcv.DefaultSetting = @"";
				colvarCcv.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcv);

				TableSchema.TableColumn colvarCcExpMonth = new TableSchema.TableColumn(schema);
				colvarCcExpMonth.ColumnName = "CcExpMonth";
				colvarCcExpMonth.DataType = DbType.Int16;
				colvarCcExpMonth.MaxLength = 0;
				colvarCcExpMonth.AutoIncrement = false;
				colvarCcExpMonth.IsNullable = true;
				colvarCcExpMonth.IsPrimaryKey = false;
				colvarCcExpMonth.IsForeignKey = false;
				colvarCcExpMonth.IsReadOnly = false;
				colvarCcExpMonth.DefaultSetting = @"";
				colvarCcExpMonth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcExpMonth);

				TableSchema.TableColumn colvarCcExpYear = new TableSchema.TableColumn(schema);
				colvarCcExpYear.ColumnName = "CcExpYear";
				colvarCcExpYear.DataType = DbType.Int32;
				colvarCcExpYear.MaxLength = 0;
				colvarCcExpYear.AutoIncrement = false;
				colvarCcExpYear.IsNullable = true;
				colvarCcExpYear.IsPrimaryKey = false;
				colvarCcExpYear.IsForeignKey = false;
				colvarCcExpYear.IsReadOnly = false;
				colvarCcExpYear.DefaultSetting = @"";
				colvarCcExpYear.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCcExpYear);

				TableSchema.TableColumn colvarBkRoutingNumber = new TableSchema.TableColumn(schema);
				colvarBkRoutingNumber.ColumnName = "BkRoutingNumber";
				colvarBkRoutingNumber.DataType = DbType.AnsiString;
				colvarBkRoutingNumber.MaxLength = 50;
				colvarBkRoutingNumber.AutoIncrement = false;
				colvarBkRoutingNumber.IsNullable = true;
				colvarBkRoutingNumber.IsPrimaryKey = false;
				colvarBkRoutingNumber.IsForeignKey = false;
				colvarBkRoutingNumber.IsReadOnly = false;
				colvarBkRoutingNumber.DefaultSetting = @"";
				colvarBkRoutingNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBkRoutingNumber);

				TableSchema.TableColumn colvarBkAccountNumber = new TableSchema.TableColumn(schema);
				colvarBkAccountNumber.ColumnName = "BkAccountNumber";
				colvarBkAccountNumber.DataType = DbType.AnsiString;
				colvarBkAccountNumber.MaxLength = 50;
				colvarBkAccountNumber.AutoIncrement = false;
				colvarBkAccountNumber.IsNullable = true;
				colvarBkAccountNumber.IsPrimaryKey = false;
				colvarBkAccountNumber.IsForeignKey = false;
				colvarBkAccountNumber.IsReadOnly = false;
				colvarBkAccountNumber.DefaultSetting = @"";
				colvarBkAccountNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBkAccountNumber);

				TableSchema.TableColumn colvarBkCheckNumber = new TableSchema.TableColumn(schema);
				colvarBkCheckNumber.ColumnName = "BkCheckNumber";
				colvarBkCheckNumber.DataType = DbType.AnsiString;
				colvarBkCheckNumber.MaxLength = 50;
				colvarBkCheckNumber.AutoIncrement = false;
				colvarBkCheckNumber.IsNullable = true;
				colvarBkCheckNumber.IsPrimaryKey = false;
				colvarBkCheckNumber.IsForeignKey = false;
				colvarBkCheckNumber.IsReadOnly = false;
				colvarBkCheckNumber.DefaultSetting = @"";
				colvarBkCheckNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBkCheckNumber);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarModifiedById = new TableSchema.TableColumn(schema);
				colvarModifiedById.ColumnName = "ModifiedById";
				colvarModifiedById.DataType = DbType.String;
				colvarModifiedById.MaxLength = 50;
				colvarModifiedById.AutoIncrement = false;
				colvarModifiedById.IsNullable = false;
				colvarModifiedById.IsPrimaryKey = false;
				colvarModifiedById.IsForeignKey = false;
				colvarModifiedById.IsReadOnly = false;
				colvarModifiedById.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedById);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedById = new TableSchema.TableColumn(schema);
				colvarCreatedById.ColumnName = "CreatedById";
				colvarCreatedById.DataType = DbType.String;
				colvarCreatedById.MaxLength = 50;
				colvarCreatedById.AutoIncrement = false;
				colvarCreatedById.IsNullable = false;
				colvarCreatedById.IsPrimaryKey = false;
				colvarCreatedById.IsForeignKey = false;
				colvarCreatedById.IsReadOnly = false;
				colvarCreatedById.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedById);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_BillingCustomers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_BillingCustomer LoadFrom(AE_BillingCustomer item)
		{
			AE_BillingCustomer result = new AE_BillingCustomer();
			if (item.BillingCustomerID != default(long)) {
				result.LoadByKey(item.BillingCustomerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long BillingCustomerID {
			get { return GetColumnValue<long>(Columns.BillingCustomerID); }
			set {
				SetColumnValue(Columns.BillingCustomerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BillingCustomerID));
			}
		}
		[DataMember]
		public string BillingTypeId {
			get { return GetColumnValue<string>(Columns.BillingTypeId); }
			set {
				SetColumnValue(Columns.BillingTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BillingTypeId));
			}
		}
		[DataMember]
		public int ContractId {
			get { return GetColumnValue<int>(Columns.ContractId); }
			set {
				SetColumnValue(Columns.ContractId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractId));
			}
		}
		[DataMember]
		public long CustomerId {
			get { return GetColumnValue<long>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public decimal MonthlyFee {
			get { return GetColumnValue<decimal>(Columns.MonthlyFee); }
			set {
				SetColumnValue(Columns.MonthlyFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonthlyFee));
			}
		}
		[DataMember]
		public string CcNameOn {
			get { return GetColumnValue<string>(Columns.CcNameOn); }
			set {
				SetColumnValue(Columns.CcNameOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CcNameOn));
			}
		}
		[DataMember]
		public string CcNumber {
			get { return GetColumnValue<string>(Columns.CcNumber); }
			set {
				SetColumnValue(Columns.CcNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CcNumber));
			}
		}
		[DataMember]
		public string CcType {
			get { return GetColumnValue<string>(Columns.CcType); }
			set {
				SetColumnValue(Columns.CcType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CcType));
			}
		}
		[DataMember]
		public string Ccv {
			get { return GetColumnValue<string>(Columns.Ccv); }
			set {
				SetColumnValue(Columns.Ccv, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Ccv));
			}
		}
		[DataMember]
		public short? CcExpMonth {
			get { return GetColumnValue<short?>(Columns.CcExpMonth); }
			set {
				SetColumnValue(Columns.CcExpMonth, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CcExpMonth));
			}
		}
		[DataMember]
		public int? CcExpYear {
			get { return GetColumnValue<int?>(Columns.CcExpYear); }
			set {
				SetColumnValue(Columns.CcExpYear, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CcExpYear));
			}
		}
		[DataMember]
		public string BkRoutingNumber {
			get { return GetColumnValue<string>(Columns.BkRoutingNumber); }
			set {
				SetColumnValue(Columns.BkRoutingNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BkRoutingNumber));
			}
		}
		[DataMember]
		public string BkAccountNumber {
			get { return GetColumnValue<string>(Columns.BkAccountNumber); }
			set {
				SetColumnValue(Columns.BkAccountNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BkAccountNumber));
			}
		}
		[DataMember]
		public string BkCheckNumber {
			get { return GetColumnValue<string>(Columns.BkCheckNumber); }
			set {
				SetColumnValue(Columns.BkCheckNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BkCheckNumber));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string ModifiedById {
			get { return GetColumnValue<string>(Columns.ModifiedById); }
			set {
				SetColumnValue(Columns.ModifiedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedById));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedById {
			get { return GetColumnValue<string>(Columns.CreatedById); }
			set {
				SetColumnValue(Columns.CreatedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedById));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_BillingType _BillingType;
		//Relationship: FK_AE_BillingCustomers_AE_BillingTypes
		public AE_BillingType BillingType
		{
			get
			{
				if(_BillingType == null) {
					_BillingType = AE_BillingType.FetchByID(this.BillingTypeId);
				}
				return _BillingType;
			}
			set
			{
				SetColumnValue("BillingTypeId", value.BillingTypeID);
				_BillingType = value;
			}
		}

		private AE_Contract _Contract;
		//Relationship: FK_AE_BillingCustomers_AE_Contracts
		public AE_Contract Contract
		{
			get
			{
				if(_Contract == null) {
					_Contract = AE_Contract.FetchByID(this.ContractId);
				}
				return _Contract;
			}
			set
			{
				SetColumnValue("ContractId", value.ContractID);
				_Contract = value;
			}
		}

		private AE_Customer _Customer;
		//Relationship: FK_AE_BillingCustomers_AE_Customers
		public AE_Customer Customer
		{
			get
			{
				if(_Customer == null) {
					_Customer = AE_Customer.FetchByID(this.CustomerId);
				}
				return _Customer;
			}
			set
			{
				SetColumnValue("CustomerId", value.CustomerID);
				_Customer = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BillingTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BillingCustomerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BillingTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ContractIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MonthlyFeeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CcNameOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CcNumberColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CcTypeColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CcvColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CcExpMonthColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CcExpYearColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn BkRoutingNumberColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn BkAccountNumberColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn BkCheckNumberColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ModifiedByIdColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn CreatedByIdColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[20]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BillingCustomerID = @"BillingCustomerID";
			public static readonly string BillingTypeId = @"BillingTypeId";
			public static readonly string ContractId = @"ContractId";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string MonthlyFee = @"MonthlyFee";
			public static readonly string CcNameOn = @"CcNameOn";
			public static readonly string CcNumber = @"CcNumber";
			public static readonly string CcType = @"CcType";
			public static readonly string Ccv = @"Ccv";
			public static readonly string CcExpMonth = @"CcExpMonth";
			public static readonly string CcExpYear = @"CcExpYear";
			public static readonly string BkRoutingNumber = @"BkRoutingNumber";
			public static readonly string BkAccountNumber = @"BkAccountNumber";
			public static readonly string BkCheckNumber = @"BkCheckNumber";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string ModifiedById = @"ModifiedById";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedById = @"CreatedById";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BillingCustomerID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_BillingType class.
	/// </summary>
	[DataContract]
	public partial class AE_BillingTypeCollection : ActiveList<AE_BillingType, AE_BillingTypeCollection>
	{
		public static AE_BillingTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_BillingTypeCollection result = new AE_BillingTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_BillingType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_BillingTypes table.
	/// </summary>
	[DataContract]
	public partial class AE_BillingType : ActiveRecord<AE_BillingType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Credit_CardID = "CC";
			[EnumMember()] public const string CheckID = "CHECK";
			[EnumMember()] public const string Electronic_Funds_TransferID = "EFT";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_BillingType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_BillingTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBillingTypeID = new TableSchema.TableColumn(schema);
				colvarBillingTypeID.ColumnName = "BillingTypeID";
				colvarBillingTypeID.DataType = DbType.AnsiString;
				colvarBillingTypeID.MaxLength = 10;
				colvarBillingTypeID.AutoIncrement = false;
				colvarBillingTypeID.IsNullable = false;
				colvarBillingTypeID.IsPrimaryKey = true;
				colvarBillingTypeID.IsForeignKey = false;
				colvarBillingTypeID.IsReadOnly = false;
				colvarBillingTypeID.DefaultSetting = @"";
				colvarBillingTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingTypeID);

				TableSchema.TableColumn colvarBillingType = new TableSchema.TableColumn(schema);
				colvarBillingType.ColumnName = "BillingType";
				colvarBillingType.DataType = DbType.AnsiString;
				colvarBillingType.MaxLength = 50;
				colvarBillingType.AutoIncrement = false;
				colvarBillingType.IsNullable = false;
				colvarBillingType.IsPrimaryKey = false;
				colvarBillingType.IsForeignKey = false;
				colvarBillingType.IsReadOnly = false;
				colvarBillingType.DefaultSetting = @"";
				colvarBillingType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_BillingTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_BillingType LoadFrom(AE_BillingType item)
		{
			AE_BillingType result = new AE_BillingType();
			if (item.BillingTypeID != default(string)) {
				result.LoadByKey(item.BillingTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string BillingTypeID {
			get { return GetColumnValue<string>(Columns.BillingTypeID); }
			set {
				SetColumnValue(Columns.BillingTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BillingTypeID));
			}
		}
		[DataMember]
		public string BillingType {
			get { return GetColumnValue<string>(Columns.BillingType); }
			set {
				SetColumnValue(Columns.BillingType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BillingType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return BillingType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BillingTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BillingTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BillingTypeID = @"BillingTypeID";
			public static readonly string BillingType = @"BillingType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BillingTypeID; }
		}
		*/

		#region Foreign Collections

		private AE_BillingCustomerCollection _AE_BillingCustomersCol;
		//Relationship: FK_AE_BillingCustomers_AE_BillingTypes
		public AE_BillingCustomerCollection AE_BillingCustomersCol
		{
			get
			{
				if(_AE_BillingCustomersCol == null) {
					_AE_BillingCustomersCol = new AE_BillingCustomerCollection();
					_AE_BillingCustomersCol.LoadAndCloseReader(AE_BillingCustomer.Query()
						.WHERE(AE_BillingCustomer.Columns.BillingTypeId, BillingTypeID).ExecuteReader());
				}
				return _AE_BillingCustomersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_Contract class.
	/// </summary>
	[DataContract]
	public partial class AE_ContractCollection : ActiveList<AE_Contract, AE_ContractCollection>
	{
		public static AE_ContractCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ContractCollection result = new AE_ContractCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_Contract item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_Contracts table.
	/// </summary>
	[DataContract]
	public partial class AE_Contract : ActiveRecord<AE_Contract>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_Contract()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_Contracts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContractID = new TableSchema.TableColumn(schema);
				colvarContractID.ColumnName = "ContractID";
				colvarContractID.DataType = DbType.Int32;
				colvarContractID.MaxLength = 0;
				colvarContractID.AutoIncrement = true;
				colvarContractID.IsNullable = false;
				colvarContractID.IsPrimaryKey = true;
				colvarContractID.IsForeignKey = false;
				colvarContractID.IsReadOnly = false;
				colvarContractID.DefaultSetting = @"";
				colvarContractID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractID);

				TableSchema.TableColumn colvarContractTemplateId = new TableSchema.TableColumn(schema);
				colvarContractTemplateId.ColumnName = "ContractTemplateId";
				colvarContractTemplateId.DataType = DbType.Int32;
				colvarContractTemplateId.MaxLength = 0;
				colvarContractTemplateId.AutoIncrement = false;
				colvarContractTemplateId.IsNullable = false;
				colvarContractTemplateId.IsPrimaryKey = false;
				colvarContractTemplateId.IsForeignKey = true;
				colvarContractTemplateId.IsReadOnly = false;
				colvarContractTemplateId.DefaultSetting = @"";
				colvarContractTemplateId.ForeignKeyTableName = "AE_ContractTemplates";
				schema.Columns.Add(colvarContractTemplateId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = true;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarContractName = new TableSchema.TableColumn(schema);
				colvarContractName.ColumnName = "ContractName";
				colvarContractName.DataType = DbType.String;
				colvarContractName.MaxLength = 50;
				colvarContractName.AutoIncrement = false;
				colvarContractName.IsNullable = false;
				colvarContractName.IsPrimaryKey = false;
				colvarContractName.IsForeignKey = false;
				colvarContractName.IsReadOnly = false;
				colvarContractName.DefaultSetting = @"";
				colvarContractName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractName);

				TableSchema.TableColumn colvarContractLength = new TableSchema.TableColumn(schema);
				colvarContractLength.ColumnName = "ContractLength";
				colvarContractLength.DataType = DbType.Int16;
				colvarContractLength.MaxLength = 0;
				colvarContractLength.AutoIncrement = false;
				colvarContractLength.IsNullable = false;
				colvarContractLength.IsPrimaryKey = false;
				colvarContractLength.IsForeignKey = false;
				colvarContractLength.IsReadOnly = false;
				colvarContractLength.DefaultSetting = @"";
				colvarContractLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractLength);

				TableSchema.TableColumn colvarEffectiveDate = new TableSchema.TableColumn(schema);
				colvarEffectiveDate.ColumnName = "EffectiveDate";
				colvarEffectiveDate.DataType = DbType.DateTime;
				colvarEffectiveDate.MaxLength = 0;
				colvarEffectiveDate.AutoIncrement = false;
				colvarEffectiveDate.IsNullable = false;
				colvarEffectiveDate.IsPrimaryKey = false;
				colvarEffectiveDate.IsForeignKey = false;
				colvarEffectiveDate.IsReadOnly = false;
				colvarEffectiveDate.DefaultSetting = @"(getdate())";
				colvarEffectiveDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEffectiveDate);

				TableSchema.TableColumn colvarMonthlyFee = new TableSchema.TableColumn(schema);
				colvarMonthlyFee.ColumnName = "MonthlyFee";
				colvarMonthlyFee.DataType = DbType.Currency;
				colvarMonthlyFee.MaxLength = 0;
				colvarMonthlyFee.AutoIncrement = false;
				colvarMonthlyFee.IsNullable = false;
				colvarMonthlyFee.IsPrimaryKey = false;
				colvarMonthlyFee.IsForeignKey = false;
				colvarMonthlyFee.IsReadOnly = false;
				colvarMonthlyFee.DefaultSetting = @"((10))";
				colvarMonthlyFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthlyFee);

				TableSchema.TableColumn colvarShortDesc = new TableSchema.TableColumn(schema);
				colvarShortDesc.ColumnName = "ShortDesc";
				colvarShortDesc.DataType = DbType.AnsiString;
				colvarShortDesc.MaxLength = 2147483647;
				colvarShortDesc.AutoIncrement = false;
				colvarShortDesc.IsNullable = true;
				colvarShortDesc.IsPrimaryKey = false;
				colvarShortDesc.IsForeignKey = false;
				colvarShortDesc.IsReadOnly = false;
				colvarShortDesc.DefaultSetting = @"";
				colvarShortDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortDesc);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarModifiedById = new TableSchema.TableColumn(schema);
				colvarModifiedById.ColumnName = "ModifiedById";
				colvarModifiedById.DataType = DbType.String;
				colvarModifiedById.MaxLength = 50;
				colvarModifiedById.AutoIncrement = false;
				colvarModifiedById.IsNullable = false;
				colvarModifiedById.IsPrimaryKey = false;
				colvarModifiedById.IsForeignKey = false;
				colvarModifiedById.IsReadOnly = false;
				colvarModifiedById.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedById);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedById = new TableSchema.TableColumn(schema);
				colvarCreatedById.ColumnName = "CreatedById";
				colvarCreatedById.DataType = DbType.String;
				colvarCreatedById.MaxLength = 50;
				colvarCreatedById.AutoIncrement = false;
				colvarCreatedById.IsNullable = false;
				colvarCreatedById.IsPrimaryKey = false;
				colvarCreatedById.IsForeignKey = false;
				colvarCreatedById.IsReadOnly = false;
				colvarCreatedById.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedById);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_Contracts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_Contract LoadFrom(AE_Contract item)
		{
			AE_Contract result = new AE_Contract();
			if (item.ContractID != default(int)) {
				result.LoadByKey(item.ContractID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContractID {
			get { return GetColumnValue<int>(Columns.ContractID); }
			set {
				SetColumnValue(Columns.ContractID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractID));
			}
		}
		[DataMember]
		public int ContractTemplateId {
			get { return GetColumnValue<int>(Columns.ContractTemplateId); }
			set {
				SetColumnValue(Columns.ContractTemplateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractTemplateId));
			}
		}
		[DataMember]
		public long? AccountId {
			get { return GetColumnValue<long?>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public string ContractName {
			get { return GetColumnValue<string>(Columns.ContractName); }
			set {
				SetColumnValue(Columns.ContractName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractName));
			}
		}
		[DataMember]
		public short ContractLength {
			get { return GetColumnValue<short>(Columns.ContractLength); }
			set {
				SetColumnValue(Columns.ContractLength, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractLength));
			}
		}
		[DataMember]
		public DateTime EffectiveDate {
			get { return GetColumnValue<DateTime>(Columns.EffectiveDate); }
			set {
				SetColumnValue(Columns.EffectiveDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EffectiveDate));
			}
		}
		[DataMember]
		public decimal MonthlyFee {
			get { return GetColumnValue<decimal>(Columns.MonthlyFee); }
			set {
				SetColumnValue(Columns.MonthlyFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonthlyFee));
			}
		}
		[DataMember]
		public string ShortDesc {
			get { return GetColumnValue<string>(Columns.ShortDesc); }
			set {
				SetColumnValue(Columns.ShortDesc, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortDesc));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string ModifiedById {
			get { return GetColumnValue<string>(Columns.ModifiedById); }
			set {
				SetColumnValue(Columns.ModifiedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedById));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedById {
			get { return GetColumnValue<string>(Columns.CreatedById); }
			set {
				SetColumnValue(Columns.CreatedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedById));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_ContractTemplate _ContractTemplate;
		//Relationship: FK_AE_Contracts_AE_ContractTemplates
		public AE_ContractTemplate ContractTemplate
		{
			get
			{
				if(_ContractTemplate == null) {
					_ContractTemplate = AE_ContractTemplate.FetchByID(this.ContractTemplateId);
				}
				return _ContractTemplate;
			}
			set
			{
				SetColumnValue("ContractTemplateId", value.ContractTemplateID);
				_ContractTemplate = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ContractID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContractIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContractTemplateIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ContractNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ContractLengthColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn EffectiveDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MonthlyFeeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ShortDescColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedByIdColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedByIdColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[14]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContractID = @"ContractID";
			public static readonly string ContractTemplateId = @"ContractTemplateId";
			public static readonly string AccountId = @"AccountId";
			public static readonly string ContractName = @"ContractName";
			public static readonly string ContractLength = @"ContractLength";
			public static readonly string EffectiveDate = @"EffectiveDate";
			public static readonly string MonthlyFee = @"MonthlyFee";
			public static readonly string ShortDesc = @"ShortDesc";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string ModifiedById = @"ModifiedById";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedById = @"CreatedById";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContractID; }
		}
		*/

		#region Foreign Collections

		private AE_BillingCustomerCollection _AE_BillingCustomersCol;
		//Relationship: FK_AE_BillingCustomers_AE_Contracts
		public AE_BillingCustomerCollection AE_BillingCustomersCol
		{
			get
			{
				if(_AE_BillingCustomersCol == null) {
					_AE_BillingCustomersCol = new AE_BillingCustomerCollection();
					_AE_BillingCustomersCol.LoadAndCloseReader(AE_BillingCustomer.Query()
						.WHERE(AE_BillingCustomer.Columns.ContractId, ContractID).ExecuteReader());
				}
				return _AE_BillingCustomersCol;
			}
		}

		private AE_InvoiceCollection _AE_InvoicesCol;
		//Relationship: FK_AE_Invoices_AE_Contracts
		public AE_InvoiceCollection AE_InvoicesCol
		{
			get
			{
				if(_AE_InvoicesCol == null) {
					_AE_InvoicesCol = new AE_InvoiceCollection();
					_AE_InvoicesCol.LoadAndCloseReader(AE_Invoice.Query()
						.WHERE(AE_Invoice.Columns.ContractId, ContractID).ExecuteReader());
				}
				return _AE_InvoicesCol;
			}
		}

		private MS_AccountCollection _MS_AccountsCol;
		//Relationship: FK_MS_Accounts_AE_Contracts
		public MS_AccountCollection MS_AccountsCol
		{
			get
			{
				if(_MS_AccountsCol == null) {
					_MS_AccountsCol = new MS_AccountCollection();
					_MS_AccountsCol.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.ContractId, ContractID).ExecuteReader());
				}
				return _MS_AccountsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_ContractTemplate class.
	/// </summary>
	[DataContract]
	public partial class AE_ContractTemplateCollection : ActiveList<AE_ContractTemplate, AE_ContractTemplateCollection>
	{
		public static AE_ContractTemplateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ContractTemplateCollection result = new AE_ContractTemplateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_ContractTemplate item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_ContractTemplates table.
	/// </summary>
	[DataContract]
	public partial class AE_ContractTemplate : ActiveRecord<AE_ContractTemplate>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_ContractTemplate()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_ContractTemplates", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContractTemplateID = new TableSchema.TableColumn(schema);
				colvarContractTemplateID.ColumnName = "ContractTemplateID";
				colvarContractTemplateID.DataType = DbType.Int32;
				colvarContractTemplateID.MaxLength = 0;
				colvarContractTemplateID.AutoIncrement = true;
				colvarContractTemplateID.IsNullable = false;
				colvarContractTemplateID.IsPrimaryKey = true;
				colvarContractTemplateID.IsForeignKey = false;
				colvarContractTemplateID.IsReadOnly = false;
				colvarContractTemplateID.DefaultSetting = @"";
				colvarContractTemplateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractTemplateID);

				TableSchema.TableColumn colvarContractName = new TableSchema.TableColumn(schema);
				colvarContractName.ColumnName = "ContractName";
				colvarContractName.DataType = DbType.String;
				colvarContractName.MaxLength = 50;
				colvarContractName.AutoIncrement = false;
				colvarContractName.IsNullable = false;
				colvarContractName.IsPrimaryKey = false;
				colvarContractName.IsForeignKey = false;
				colvarContractName.IsReadOnly = false;
				colvarContractName.DefaultSetting = @"";
				colvarContractName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractName);

				TableSchema.TableColumn colvarContractLength = new TableSchema.TableColumn(schema);
				colvarContractLength.ColumnName = "ContractLength";
				colvarContractLength.DataType = DbType.Int16;
				colvarContractLength.MaxLength = 0;
				colvarContractLength.AutoIncrement = false;
				colvarContractLength.IsNullable = false;
				colvarContractLength.IsPrimaryKey = false;
				colvarContractLength.IsForeignKey = false;
				colvarContractLength.IsReadOnly = false;
				colvarContractLength.DefaultSetting = @"";
				colvarContractLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractLength);

				TableSchema.TableColumn colvarMonthlyFee = new TableSchema.TableColumn(schema);
				colvarMonthlyFee.ColumnName = "MonthlyFee";
				colvarMonthlyFee.DataType = DbType.Currency;
				colvarMonthlyFee.MaxLength = 0;
				colvarMonthlyFee.AutoIncrement = false;
				colvarMonthlyFee.IsNullable = false;
				colvarMonthlyFee.IsPrimaryKey = false;
				colvarMonthlyFee.IsForeignKey = false;
				colvarMonthlyFee.IsReadOnly = false;
				colvarMonthlyFee.DefaultSetting = @"((10))";
				colvarMonthlyFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthlyFee);

				TableSchema.TableColumn colvarShortDesc = new TableSchema.TableColumn(schema);
				colvarShortDesc.ColumnName = "ShortDesc";
				colvarShortDesc.DataType = DbType.AnsiString;
				colvarShortDesc.MaxLength = 2147483647;
				colvarShortDesc.AutoIncrement = false;
				colvarShortDesc.IsNullable = true;
				colvarShortDesc.IsPrimaryKey = false;
				colvarShortDesc.IsForeignKey = false;
				colvarShortDesc.IsReadOnly = false;
				colvarShortDesc.DefaultSetting = @"";
				colvarShortDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortDesc);

				TableSchema.TableColumn colvarReadable = new TableSchema.TableColumn(schema);
				colvarReadable.ColumnName = "Readable";
				colvarReadable.DataType = DbType.String;
				colvarReadable.MaxLength = 50;
				colvarReadable.AutoIncrement = false;
				colvarReadable.IsNullable = false;
				colvarReadable.IsPrimaryKey = false;
				colvarReadable.IsForeignKey = false;
				colvarReadable.IsReadOnly = false;
				colvarReadable.DefaultSetting = @"";
				colvarReadable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReadable);

				TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
				colvarOrderNumber.ColumnName = "OrderNumber";
				colvarOrderNumber.DataType = DbType.Int16;
				colvarOrderNumber.MaxLength = 0;
				colvarOrderNumber.AutoIncrement = false;
				colvarOrderNumber.IsNullable = false;
				colvarOrderNumber.IsPrimaryKey = false;
				colvarOrderNumber.IsForeignKey = false;
				colvarOrderNumber.IsReadOnly = false;
				colvarOrderNumber.DefaultSetting = @"((0))";
				colvarOrderNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNumber);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_ContractTemplates",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_ContractTemplate LoadFrom(AE_ContractTemplate item)
		{
			AE_ContractTemplate result = new AE_ContractTemplate();
			if (item.ContractTemplateID != default(int)) {
				result.LoadByKey(item.ContractTemplateID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContractTemplateID {
			get { return GetColumnValue<int>(Columns.ContractTemplateID); }
			set {
				SetColumnValue(Columns.ContractTemplateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractTemplateID));
			}
		}
		[DataMember]
		public string ContractName {
			get { return GetColumnValue<string>(Columns.ContractName); }
			set {
				SetColumnValue(Columns.ContractName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractName));
			}
		}
		[DataMember]
		public short ContractLength {
			get { return GetColumnValue<short>(Columns.ContractLength); }
			set {
				SetColumnValue(Columns.ContractLength, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractLength));
			}
		}
		[DataMember]
		public decimal MonthlyFee {
			get { return GetColumnValue<decimal>(Columns.MonthlyFee); }
			set {
				SetColumnValue(Columns.MonthlyFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonthlyFee));
			}
		}
		[DataMember]
		public string ShortDesc {
			get { return GetColumnValue<string>(Columns.ShortDesc); }
			set {
				SetColumnValue(Columns.ShortDesc, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortDesc));
			}
		}
		[DataMember]
		public string Readable {
			get { return GetColumnValue<string>(Columns.Readable); }
			set {
				SetColumnValue(Columns.Readable, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Readable));
			}
		}
		[DataMember]
		public short OrderNumber {
			get { return GetColumnValue<short>(Columns.OrderNumber); }
			set {
				SetColumnValue(Columns.OrderNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OrderNumber));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ContractName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContractTemplateIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContractNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ContractLengthColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MonthlyFeeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ShortDescColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ReadableColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn OrderNumberColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContractTemplateID = @"ContractTemplateID";
			public static readonly string ContractName = @"ContractName";
			public static readonly string ContractLength = @"ContractLength";
			public static readonly string MonthlyFee = @"MonthlyFee";
			public static readonly string ShortDesc = @"ShortDesc";
			public static readonly string Readable = @"Readable";
			public static readonly string OrderNumber = @"OrderNumber";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContractTemplateID; }
		}
		*/

		#region Foreign Collections

		private AE_ContractCollection _AE_ContractsCol;
		//Relationship: FK_AE_Contracts_AE_ContractTemplates
		public AE_ContractCollection AE_ContractsCol
		{
			get
			{
				if(_AE_ContractsCol == null) {
					_AE_ContractsCol = new AE_ContractCollection();
					_AE_ContractsCol.LoadAndCloseReader(AE_Contract.Query()
						.WHERE(AE_Contract.Columns.ContractTemplateId, ContractTemplateID).ExecuteReader());
				}
				return _AE_ContractsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_CreditCardType class.
	/// </summary>
	[DataContract]
	public partial class AE_CreditCardTypeCollection : ActiveList<AE_CreditCardType, AE_CreditCardTypeCollection>
	{
		public static AE_CreditCardTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CreditCardTypeCollection result = new AE_CreditCardTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_CreditCardType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_CreditCardTypes table.
	/// </summary>
	[DataContract]
	public partial class AE_CreditCardType : ActiveRecord<AE_CreditCardType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_CreditCardType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_CreditCardTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditCardTypeID = new TableSchema.TableColumn(schema);
				colvarCreditCardTypeID.ColumnName = "CreditCardTypeID";
				colvarCreditCardTypeID.DataType = DbType.Int32;
				colvarCreditCardTypeID.MaxLength = 0;
				colvarCreditCardTypeID.AutoIncrement = true;
				colvarCreditCardTypeID.IsNullable = false;
				colvarCreditCardTypeID.IsPrimaryKey = true;
				colvarCreditCardTypeID.IsForeignKey = false;
				colvarCreditCardTypeID.IsReadOnly = false;
				colvarCreditCardTypeID.DefaultSetting = @"";
				colvarCreditCardTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditCardTypeID);

				TableSchema.TableColumn colvarCreditCardType = new TableSchema.TableColumn(schema);
				colvarCreditCardType.ColumnName = "CreditCardType";
				colvarCreditCardType.DataType = DbType.String;
				colvarCreditCardType.MaxLength = 50;
				colvarCreditCardType.AutoIncrement = false;
				colvarCreditCardType.IsNullable = false;
				colvarCreditCardType.IsPrimaryKey = false;
				colvarCreditCardType.IsForeignKey = false;
				colvarCreditCardType.IsReadOnly = false;
				colvarCreditCardType.DefaultSetting = @"";
				colvarCreditCardType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditCardType);

				TableSchema.TableColumn colvarAbbreviation = new TableSchema.TableColumn(schema);
				colvarAbbreviation.ColumnName = "Abbreviation";
				colvarAbbreviation.DataType = DbType.String;
				colvarAbbreviation.MaxLength = 4;
				colvarAbbreviation.AutoIncrement = false;
				colvarAbbreviation.IsNullable = false;
				colvarAbbreviation.IsPrimaryKey = false;
				colvarAbbreviation.IsForeignKey = false;
				colvarAbbreviation.IsReadOnly = false;
				colvarAbbreviation.DefaultSetting = @"";
				colvarAbbreviation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAbbreviation);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_CreditCardTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_CreditCardType LoadFrom(AE_CreditCardType item)
		{
			AE_CreditCardType result = new AE_CreditCardType();
			if (item.CreditCardTypeID != default(int)) {
				result.LoadByKey(item.CreditCardTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CreditCardTypeID {
			get { return GetColumnValue<int>(Columns.CreditCardTypeID); }
			set {
				SetColumnValue(Columns.CreditCardTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditCardTypeID));
			}
		}
		[DataMember]
		public string CreditCardType {
			get { return GetColumnValue<string>(Columns.CreditCardType); }
			set {
				SetColumnValue(Columns.CreditCardType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditCardType));
			}
		}
		[DataMember]
		public string Abbreviation {
			get { return GetColumnValue<string>(Columns.Abbreviation); }
			set {
				SetColumnValue(Columns.Abbreviation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Abbreviation));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CreditCardType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditCardTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CreditCardTypeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AbbreviationColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditCardTypeID = @"CreditCardTypeID";
			public static readonly string CreditCardType = @"CreditCardType";
			public static readonly string Abbreviation = @"Abbreviation";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditCardTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerAccount class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerAccountCollection : ActiveList<AE_CustomerAccount, AE_CustomerAccountCollection>
	{
		public static AE_CustomerAccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerAccountCollection result = new AE_CustomerAccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_CustomerAccount item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_CustomerAccounts table.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerAccount : ActiveRecord<AE_CustomerAccount>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_CustomerAccount()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_CustomerAccounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerAccountID = new TableSchema.TableColumn(schema);
				colvarCustomerAccountID.ColumnName = "CustomerAccountID";
				colvarCustomerAccountID.DataType = DbType.Int64;
				colvarCustomerAccountID.MaxLength = 0;
				colvarCustomerAccountID.AutoIncrement = true;
				colvarCustomerAccountID.IsNullable = false;
				colvarCustomerAccountID.IsPrimaryKey = true;
				colvarCustomerAccountID.IsForeignKey = false;
				colvarCustomerAccountID.IsReadOnly = false;
				colvarCustomerAccountID.DefaultSetting = @"";
				colvarCustomerAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerAccountID);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = true;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "QL_Leads";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MC_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = true;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "AE_Customers";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = true;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"";
				colvarCustomerTypeId.ForeignKeyTableName = "AE_CustomerTypes";
				schema.Columns.Add(colvarCustomerTypeId);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_CustomerAccounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_CustomerAccount LoadFrom(AE_CustomerAccount item)
		{
			AE_CustomerAccount result = new AE_CustomerAccount();
			if (item.CustomerAccountID != default(long)) {
				result.LoadByKey(item.CustomerAccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CustomerAccountID {
			get { return GetColumnValue<long>(Columns.CustomerAccountID); }
			set {
				SetColumnValue(Columns.CustomerAccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerAccountID));
			}
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set {
				SetColumnValue(Columns.LeadId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadId));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public long CustomerId {
			get { return GetColumnValue<long>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set {
				SetColumnValue(Columns.CustomerTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerTypeId));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Customer _Customer;
		//Relationship: FK_AE_CustomerAccounts_AE_Customers
		public AE_Customer Customer
		{
			get
			{
				if(_Customer == null) {
					_Customer = AE_Customer.FetchByID(this.CustomerId);
				}
				return _Customer;
			}
			set
			{
				SetColumnValue("CustomerId", value.CustomerID);
				_Customer = value;
			}
		}

		private AE_CustomerType _CustomerType;
		//Relationship: FK_AE_CustomerAccounts_AE_CustomerTypes
		public AE_CustomerType CustomerType
		{
			get
			{
				if(_CustomerType == null) {
					_CustomerType = AE_CustomerType.FetchByID(this.CustomerTypeId);
				}
				return _CustomerType;
			}
			set
			{
				SetColumnValue("CustomerTypeId", value.CustomerTypeID);
				_CustomerType = value;
			}
		}

		private MC_Account _Account;
		//Relationship: FK_AE_CustomerAccounts_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		private QL_Lead _Lead;
		//Relationship: FK_AE_CustomerAccounts_QL_Leads
		public QL_Lead Lead
		{
			get
			{
				if(_Lead == null) {
					_Lead = QL_Lead.FetchByID(this.LeadId);
				}
				return _Lead;
			}
			set
			{
				SetColumnValue("LeadId", value.LeadID);
				_Lead = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CustomerAccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerAccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerAccountID = @"CustomerAccountID";
			public static readonly string LeadId = @"LeadId";
			public static readonly string AccountId = @"AccountId";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string CustomerTypeId = @"CustomerTypeId";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerAccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerAddress class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerAddressCollection : ActiveList<AE_CustomerAddress, AE_CustomerAddressCollection>
	{
		public static AE_CustomerAddressCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerAddressCollection result = new AE_CustomerAddressCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_CustomerAddress item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_CustomerAddress table.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerAddress : ActiveRecord<AE_CustomerAddress>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_CustomerAddress()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_CustomerAddress", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerAddressID = new TableSchema.TableColumn(schema);
				colvarCustomerAddressID.ColumnName = "CustomerAddressID";
				colvarCustomerAddressID.DataType = DbType.Int64;
				colvarCustomerAddressID.MaxLength = 0;
				colvarCustomerAddressID.AutoIncrement = true;
				colvarCustomerAddressID.IsNullable = false;
				colvarCustomerAddressID.IsPrimaryKey = true;
				colvarCustomerAddressID.IsForeignKey = false;
				colvarCustomerAddressID.IsReadOnly = false;
				colvarCustomerAddressID.DefaultSetting = @"";
				colvarCustomerAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerAddressID);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = true;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "AE_Customers";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = true;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "MC_Addresses";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarCustomerAddressTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerAddressTypeId.ColumnName = "CustomerAddressTypeId";
				colvarCustomerAddressTypeId.DataType = DbType.AnsiString;
				colvarCustomerAddressTypeId.MaxLength = 20;
				colvarCustomerAddressTypeId.AutoIncrement = false;
				colvarCustomerAddressTypeId.IsNullable = false;
				colvarCustomerAddressTypeId.IsPrimaryKey = false;
				colvarCustomerAddressTypeId.IsForeignKey = true;
				colvarCustomerAddressTypeId.IsReadOnly = false;
				colvarCustomerAddressTypeId.DefaultSetting = @"";
				colvarCustomerAddressTypeId.ForeignKeyTableName = "AE_CustomerAddressTypes";
				schema.Columns.Add(colvarCustomerAddressTypeId);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_CustomerAddress",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_CustomerAddress LoadFrom(AE_CustomerAddress item)
		{
			AE_CustomerAddress result = new AE_CustomerAddress();
			if (item.CustomerAddressID != default(long)) {
				result.LoadByKey(item.CustomerAddressID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CustomerAddressID {
			get { return GetColumnValue<long>(Columns.CustomerAddressID); }
			set {
				SetColumnValue(Columns.CustomerAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerAddressID));
			}
		}
		[DataMember]
		public long CustomerId {
			get { return GetColumnValue<long>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set {
				SetColumnValue(Columns.AddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressId));
			}
		}
		[DataMember]
		public string CustomerAddressTypeId {
			get { return GetColumnValue<string>(Columns.CustomerAddressTypeId); }
			set {
				SetColumnValue(Columns.CustomerAddressTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerAddressTypeId));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_CustomerAddressType _CustomerAddressType;
		//Relationship: FK_AE_CustomerAddress_AE_CustomerAddressTypes
		public AE_CustomerAddressType CustomerAddressType
		{
			get
			{
				if(_CustomerAddressType == null) {
					_CustomerAddressType = AE_CustomerAddressType.FetchByID(this.CustomerAddressTypeId);
				}
				return _CustomerAddressType;
			}
			set
			{
				SetColumnValue("CustomerAddressTypeId", value.CustomerAddressTypeID);
				_CustomerAddressType = value;
			}
		}

		private AE_Customer _Customer;
		//Relationship: FK_AE_CustomerAddress_AE_Customers
		public AE_Customer Customer
		{
			get
			{
				if(_Customer == null) {
					_Customer = AE_Customer.FetchByID(this.CustomerId);
				}
				return _Customer;
			}
			set
			{
				SetColumnValue("CustomerId", value.CustomerID);
				_Customer = value;
			}
		}

		private MC_Address _Address;
		//Relationship: FK_AE_CustomerAddress_MC_Addresses
		public MC_Address Address
		{
			get
			{
				if(_Address == null) {
					_Address = MC_Address.FetchByID(this.AddressId);
				}
				return _Address;
			}
			set
			{
				SetColumnValue("AddressId", value.AddressID);
				_Address = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CustomerAddressID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerAddressIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerAddressTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerAddressID = @"CustomerAddressID";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string AddressId = @"AddressId";
			public static readonly string CustomerAddressTypeId = @"CustomerAddressTypeId";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerAddressID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerAddressType class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerAddressTypeCollection : ActiveList<AE_CustomerAddressType, AE_CustomerAddressTypeCollection>
	{
		public static AE_CustomerAddressTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerAddressTypeCollection result = new AE_CustomerAddressTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_CustomerAddressType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_CustomerAddressTypes table.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerAddressType : ActiveRecord<AE_CustomerAddressType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Billing_AddressID = "BILL";
			[EnumMember()] public const string OtherID = "OTHR";
			[EnumMember()] public const string Premise_AddressID = "PREM";
			[EnumMember()] public const string Primary_Customer_AddressID = "PRI";
			[EnumMember()] public const string Secondary_Customer_AddressID = "SEC";
			[EnumMember()] public const string Shipping_AddressID = "SHIP";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_CustomerAddressType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_CustomerAddressTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerAddressTypeID = new TableSchema.TableColumn(schema);
				colvarCustomerAddressTypeID.ColumnName = "CustomerAddressTypeID";
				colvarCustomerAddressTypeID.DataType = DbType.AnsiString;
				colvarCustomerAddressTypeID.MaxLength = 20;
				colvarCustomerAddressTypeID.AutoIncrement = false;
				colvarCustomerAddressTypeID.IsNullable = false;
				colvarCustomerAddressTypeID.IsPrimaryKey = true;
				colvarCustomerAddressTypeID.IsForeignKey = false;
				colvarCustomerAddressTypeID.IsReadOnly = false;
				colvarCustomerAddressTypeID.DefaultSetting = @"";
				colvarCustomerAddressTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerAddressTypeID);

				TableSchema.TableColumn colvarCustomerAddressType = new TableSchema.TableColumn(schema);
				colvarCustomerAddressType.ColumnName = "CustomerAddressType";
				colvarCustomerAddressType.DataType = DbType.AnsiString;
				colvarCustomerAddressType.MaxLength = 50;
				colvarCustomerAddressType.AutoIncrement = false;
				colvarCustomerAddressType.IsNullable = false;
				colvarCustomerAddressType.IsPrimaryKey = false;
				colvarCustomerAddressType.IsForeignKey = false;
				colvarCustomerAddressType.IsReadOnly = false;
				colvarCustomerAddressType.DefaultSetting = @"";
				colvarCustomerAddressType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerAddressType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_CustomerAddressTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_CustomerAddressType LoadFrom(AE_CustomerAddressType item)
		{
			AE_CustomerAddressType result = new AE_CustomerAddressType();
			if (item.CustomerAddressTypeID != default(string)) {
				result.LoadByKey(item.CustomerAddressTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CustomerAddressTypeID {
			get { return GetColumnValue<string>(Columns.CustomerAddressTypeID); }
			set {
				SetColumnValue(Columns.CustomerAddressTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerAddressTypeID));
			}
		}
		[DataMember]
		public string CustomerAddressType {
			get { return GetColumnValue<string>(Columns.CustomerAddressType); }
			set {
				SetColumnValue(Columns.CustomerAddressType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerAddressType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CustomerAddressType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerAddressTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerAddressTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerAddressTypeID = @"CustomerAddressTypeID";
			public static readonly string CustomerAddressType = @"CustomerAddressType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerAddressTypeID; }
		}
		*/

		#region Foreign Collections

		private AE_CustomerAddressCollection _AE_CustomerAddressesCol;
		//Relationship: FK_AE_CustomerAddress_AE_CustomerAddressTypes
		public AE_CustomerAddressCollection AE_CustomerAddressesCol
		{
			get
			{
				if(_AE_CustomerAddressesCol == null) {
					_AE_CustomerAddressesCol = new AE_CustomerAddressCollection();
					_AE_CustomerAddressesCol.LoadAndCloseReader(AE_CustomerAddress.Query()
						.WHERE(AE_CustomerAddress.Columns.CustomerAddressTypeId, CustomerAddressTypeID).ExecuteReader());
				}
				return _AE_CustomerAddressesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerGpsClient class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerGpsClientCollection : ActiveList<AE_CustomerGpsClient, AE_CustomerGpsClientCollection>
	{
		public static AE_CustomerGpsClientCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerGpsClientCollection result = new AE_CustomerGpsClientCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_CustomerGpsClient item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_CustomerGpsClients table.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerGpsClient : ActiveRecord<AE_CustomerGpsClient>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_CustomerGpsClient()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_CustomerGpsClients", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerGpsClientID = new TableSchema.TableColumn(schema);
				colvarCustomerGpsClientID.ColumnName = "CustomerGpsClientID";
				colvarCustomerGpsClientID.DataType = DbType.Int64;
				colvarCustomerGpsClientID.MaxLength = 0;
				colvarCustomerGpsClientID.AutoIncrement = true;
				colvarCustomerGpsClientID.IsNullable = false;
				colvarCustomerGpsClientID.IsPrimaryKey = true;
				colvarCustomerGpsClientID.IsForeignKey = false;
				colvarCustomerGpsClientID.IsReadOnly = false;
				colvarCustomerGpsClientID.DefaultSetting = @"";
				colvarCustomerGpsClientID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerGpsClientID);

				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int64;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = true;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "AE_Customers";
				schema.Columns.Add(colvarCustomerID);

				TableSchema.TableColumn colvarAuthUserId = new TableSchema.TableColumn(schema);
				colvarAuthUserId.ColumnName = "AuthUserId";
				colvarAuthUserId.DataType = DbType.Int32;
				colvarAuthUserId.MaxLength = 0;
				colvarAuthUserId.AutoIncrement = false;
				colvarAuthUserId.IsNullable = true;
				colvarAuthUserId.IsPrimaryKey = false;
				colvarAuthUserId.IsForeignKey = false;
				colvarAuthUserId.IsReadOnly = false;
				colvarAuthUserId.DefaultSetting = @"";
				colvarAuthUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthUserId);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarLastLoginOn = new TableSchema.TableColumn(schema);
				colvarLastLoginOn.ColumnName = "LastLoginOn";
				colvarLastLoginOn.DataType = DbType.DateTime;
				colvarLastLoginOn.MaxLength = 0;
				colvarLastLoginOn.AutoIncrement = false;
				colvarLastLoginOn.IsNullable = true;
				colvarLastLoginOn.IsPrimaryKey = false;
				colvarLastLoginOn.IsForeignKey = false;
				colvarLastLoginOn.IsReadOnly = false;
				colvarLastLoginOn.DefaultSetting = @"";
				colvarLastLoginOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastLoginOn);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_CustomerGpsClients",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_CustomerGpsClient LoadFrom(AE_CustomerGpsClient item)
		{
			AE_CustomerGpsClient result = new AE_CustomerGpsClient();
			if (item.CustomerGpsClientID != default(long)) {
				result.LoadByKey(item.CustomerGpsClientID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CustomerGpsClientID {
			get { return GetColumnValue<long>(Columns.CustomerGpsClientID); }
			set {
				SetColumnValue(Columns.CustomerGpsClientID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerGpsClientID));
			}
		}
		[DataMember]
		public long CustomerID {
			get { return GetColumnValue<long>(Columns.CustomerID); }
			set {
				SetColumnValue(Columns.CustomerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerID));
			}
		}
		[DataMember]
		public int? AuthUserId {
			get { return GetColumnValue<int?>(Columns.AuthUserId); }
			set {
				SetColumnValue(Columns.AuthUserId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthUserId));
			}
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set {
				SetColumnValue(Columns.Username, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Username));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}
		[DataMember]
		public DateTime? LastLoginOn {
			get { return GetColumnValue<DateTime?>(Columns.LastLoginOn); }
			set {
				SetColumnValue(Columns.LastLoginOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastLoginOn));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Customer _Customer;
		//Relationship: FK_AE_CustomerGpsClients_AE_Customers
		public AE_Customer Customer
		{
			get
			{
				if(_Customer == null) {
					_Customer = AE_Customer.FetchByID(this.CustomerID);
				}
				return _Customer;
			}
			set
			{
				SetColumnValue("CustomerID", value.CustomerID);
				_Customer = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CustomerGpsClientID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerGpsClientIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AuthUserIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn LastLoginOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerGpsClientID = @"CustomerGpsClientID";
			public static readonly string CustomerID = @"CustomerID";
			public static readonly string AuthUserId = @"AuthUserId";
			public static readonly string Username = @"Username";
			public static readonly string Password = @"Password";
			public static readonly string LastLoginOn = @"LastLoginOn";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerGpsClientID; }
		}
		*/

		#region Foreign Collections

		private AE_GpsClientToCustomerMasterCollection _AE_GpsClientToCustomerMastersCol;
		//Relationship: FK_AE_GpsClientToCustomerMaster_AE_CustomerGpsClients
		public AE_GpsClientToCustomerMasterCollection AE_GpsClientToCustomerMastersCol
		{
			get
			{
				if(_AE_GpsClientToCustomerMastersCol == null) {
					_AE_GpsClientToCustomerMastersCol = new AE_GpsClientToCustomerMasterCollection();
					_AE_GpsClientToCustomerMastersCol.LoadAndCloseReader(AE_GpsClientToCustomerMaster.Query()
						.WHERE(AE_GpsClientToCustomerMaster.Columns.CustomerGpsClientId, CustomerGpsClientID).ExecuteReader());
				}
				return _AE_GpsClientToCustomerMastersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerMasterFile class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerMasterFileCollection : ActiveList<AE_CustomerMasterFile, AE_CustomerMasterFileCollection>
	{
		public static AE_CustomerMasterFileCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerMasterFileCollection result = new AE_CustomerMasterFileCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_CustomerMasterFile item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_CustomerMasterFiles table.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerMasterFile : ActiveRecord<AE_CustomerMasterFile>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_CustomerMasterFile()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_CustomerMasterFiles", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterFileID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileID.ColumnName = "CustomerMasterFileID";
				colvarCustomerMasterFileID.DataType = DbType.Int64;
				colvarCustomerMasterFileID.MaxLength = 0;
				colvarCustomerMasterFileID.AutoIncrement = true;
				colvarCustomerMasterFileID.IsNullable = false;
				colvarCustomerMasterFileID.IsPrimaryKey = true;
				colvarCustomerMasterFileID.IsForeignKey = false;
				colvarCustomerMasterFileID.IsReadOnly = false;
				colvarCustomerMasterFileID.DefaultSetting = @"";
				colvarCustomerMasterFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarGPCustomerClassId = new TableSchema.TableColumn(schema);
				colvarGPCustomerClassId.ColumnName = "GPCustomerClassId";
				colvarGPCustomerClassId.DataType = DbType.AnsiString;
				colvarGPCustomerClassId.MaxLength = 15;
				colvarGPCustomerClassId.AutoIncrement = false;
				colvarGPCustomerClassId.IsNullable = false;
				colvarGPCustomerClassId.IsPrimaryKey = false;
				colvarGPCustomerClassId.IsForeignKey = false;
				colvarGPCustomerClassId.IsReadOnly = false;
				colvarGPCustomerClassId.DefaultSetting = @"('DEFAULT')";
				colvarGPCustomerClassId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPCustomerClassId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_CustomerMasterFiles",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_CustomerMasterFile LoadFrom(AE_CustomerMasterFile item)
		{
			AE_CustomerMasterFile result = new AE_CustomerMasterFile();
			if (item.CustomerMasterFileID != default(long)) {
				result.LoadByKey(item.CustomerMasterFileID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CustomerMasterFileID {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileID); }
			set {
				SetColumnValue(Columns.CustomerMasterFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileID));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string GPCustomerClassId {
			get { return GetColumnValue<string>(Columns.GPCustomerClassId); }
			set {
				SetColumnValue(Columns.GPCustomerClassId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPCustomerClassId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Dealer _Dealer;
		//Relationship: FK_AE_CustomerMasterFiles_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CustomerMasterFileID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterFileIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn GPCustomerClassIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerMasterFileID = @"CustomerMasterFileID";
			public static readonly string DealerId = @"DealerId";
			public static readonly string GPCustomerClassId = @"GPCustomerClassId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerMasterFileID; }
		}
		*/

		#region Foreign Collections

		private AE_CustomerMasterFileViewHistoryCollection _AE_CustomerMasterFileViewHistoriesCol;
		//Relationship: FK_AE_CustomerMasterFileViewHistory_AE_CustomerMasterFiles
		public AE_CustomerMasterFileViewHistoryCollection AE_CustomerMasterFileViewHistoriesCol
		{
			get
			{
				if(_AE_CustomerMasterFileViewHistoriesCol == null) {
					_AE_CustomerMasterFileViewHistoriesCol = new AE_CustomerMasterFileViewHistoryCollection();
					_AE_CustomerMasterFileViewHistoriesCol.LoadAndCloseReader(AE_CustomerMasterFileViewHistory.Query()
						.WHERE(AE_CustomerMasterFileViewHistory.Columns.CustomerMasterFileId, CustomerMasterFileID).ExecuteReader());
				}
				return _AE_CustomerMasterFileViewHistoriesCol;
			}
		}

		private AE_CustomerMasterToCustomerCollection _AE_CustomerMasterToCustomersCol;
		//Relationship: FK_AE_CustomerMasterToCustomer_AE_CustomerMasterFiles
		public AE_CustomerMasterToCustomerCollection AE_CustomerMasterToCustomersCol
		{
			get
			{
				if(_AE_CustomerMasterToCustomersCol == null) {
					_AE_CustomerMasterToCustomersCol = new AE_CustomerMasterToCustomerCollection();
					_AE_CustomerMasterToCustomersCol.LoadAndCloseReader(AE_CustomerMasterToCustomer.Query()
						.WHERE(AE_CustomerMasterToCustomer.Columns.CustomerMasterFileId, CustomerMasterFileID).ExecuteReader());
				}
				return _AE_CustomerMasterToCustomersCol;
			}
		}

		private AE_CustomerCollection _AE_CustomersCol;
		//Relationship: FK_AE_Customers_AE_CustomerMasterFiles
		public AE_CustomerCollection AE_CustomersCol
		{
			get
			{
				if(_AE_CustomersCol == null) {
					_AE_CustomersCol = new AE_CustomerCollection();
					_AE_CustomersCol.LoadAndCloseReader(AE_Customer.Query()
						.WHERE(AE_Customer.Columns.CustomerMasterFileId, CustomerMasterFileID).ExecuteReader());
				}
				return _AE_CustomersCol;
			}
		}

		private AE_GpsClientToCustomerMasterCollection _AE_GpsClientToCustomerMastersCol;
		//Relationship: FK_AE_GpsClientToCustomerMaster_AE_CustomerMasterFiles
		public AE_GpsClientToCustomerMasterCollection AE_GpsClientToCustomerMastersCol
		{
			get
			{
				if(_AE_GpsClientToCustomerMastersCol == null) {
					_AE_GpsClientToCustomerMastersCol = new AE_GpsClientToCustomerMasterCollection();
					_AE_GpsClientToCustomerMastersCol.LoadAndCloseReader(AE_GpsClientToCustomerMaster.Query()
						.WHERE(AE_GpsClientToCustomerMaster.Columns.CustomerMasterFileId, CustomerMasterFileID).ExecuteReader());
				}
				return _AE_GpsClientToCustomerMastersCol;
			}
		}

		private CA_AppointmentCollection _CA_AppointmentsCol;
		//Relationship: FK_CA_Appointments_AE_CustomerMasterFiles
		public CA_AppointmentCollection CA_AppointmentsCol
		{
			get
			{
				if(_CA_AppointmentsCol == null) {
					_CA_AppointmentsCol = new CA_AppointmentCollection();
					_CA_AppointmentsCol.LoadAndCloseReader(CA_Appointment.Query()
						.WHERE(CA_Appointment.Columns.CustomerMasterFileId, CustomerMasterFileID).ExecuteReader());
				}
				return _CA_AppointmentsCol;
			}
		}

		private MC_AccountNoteCollection _MC_AccountNotesCol;
		//Relationship: FK_MC_AccountNotes_AE_CustomerMasterFiles
		public MC_AccountNoteCollection MC_AccountNotesCol
		{
			get
			{
				if(_MC_AccountNotesCol == null) {
					_MC_AccountNotesCol = new MC_AccountNoteCollection();
					_MC_AccountNotesCol.LoadAndCloseReader(MC_AccountNote.Query()
						.WHERE(MC_AccountNote.Columns.CustomerMasterFileId, CustomerMasterFileID).ExecuteReader());
				}
				return _MC_AccountNotesCol;
			}
		}

		private QL_CustomerMasterLeadCollection _QL_CustomerMasterLeadsCol;
		//Relationship: FK_QL_CustomerMasterLeads_AE_CustomerMasterFiles
		public QL_CustomerMasterLeadCollection QL_CustomerMasterLeadsCol
		{
			get
			{
				if(_QL_CustomerMasterLeadsCol == null) {
					_QL_CustomerMasterLeadsCol = new QL_CustomerMasterLeadCollection();
					_QL_CustomerMasterLeadsCol.LoadAndCloseReader(QL_CustomerMasterLead.Query()
						.WHERE(QL_CustomerMasterLead.Columns.CustomerMasterFileId, CustomerMasterFileID).ExecuteReader());
				}
				return _QL_CustomerMasterLeadsCol;
			}
		}

		private QL_LeadCollection _QL_LeadsCol;
		//Relationship: FK_QL_Leads_AE_CustomerMasterFiles
		public QL_LeadCollection QL_LeadsCol
		{
			get
			{
				if(_QL_LeadsCol == null) {
					_QL_LeadsCol = new QL_LeadCollection();
					_QL_LeadsCol.LoadAndCloseReader(QL_Lead.Query()
						.WHERE(QL_Lead.Columns.CustomerMasterFileId, CustomerMasterFileID).ExecuteReader());
				}
				return _QL_LeadsCol;
			}
		}

		private SAE_AgingCollection _SAE_AgingsCol;
		//Relationship: FK_SAE_Aging_AE_CustomerMasterFiles
		public SAE_AgingCollection SAE_AgingsCol
		{
			get
			{
				if(_SAE_AgingsCol == null) {
					_SAE_AgingsCol = new SAE_AgingCollection();
					_SAE_AgingsCol.LoadAndCloseReader(SAE_Aging.Query()
						.WHERE(SAE_Aging.Columns.CustomerMasterFileID, CustomerMasterFileID).ExecuteReader());
				}
				return _SAE_AgingsCol;
			}
		}

		private SAE_BillingHistoryCollection _SAE_BillingHistoriesCol;
		//Relationship: FK_SAE_BillingHistory_AE_CustomerMasterFiles
		public SAE_BillingHistoryCollection SAE_BillingHistoriesCol
		{
			get
			{
				if(_SAE_BillingHistoriesCol == null) {
					_SAE_BillingHistoriesCol = new SAE_BillingHistoryCollection();
					_SAE_BillingHistoriesCol.LoadAndCloseReader(SAE_BillingHistory.Query()
						.WHERE(SAE_BillingHistory.Columns.CustomerMasterFileId, CustomerMasterFileID).ExecuteReader());
				}
				return _SAE_BillingHistoriesCol;
			}
		}

		private SAE_BillingInfoSummaryCollection _SAE_BillingInfoSummariesCol;
		//Relationship: FK_SAE_CustomerMasterFileBillingInfoSummary_AE_CustomerMasterFiles
		public SAE_BillingInfoSummaryCollection SAE_BillingInfoSummariesCol
		{
			get
			{
				if(_SAE_BillingInfoSummariesCol == null) {
					_SAE_BillingInfoSummariesCol = new SAE_BillingInfoSummaryCollection();
					_SAE_BillingInfoSummariesCol.LoadAndCloseReader(SAE_BillingInfoSummary.Query()
						.WHERE(SAE_BillingInfoSummary.Columns.CustomerMasterFileId, CustomerMasterFileID).ExecuteReader());
				}
				return _SAE_BillingInfoSummariesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerMasterFileViewHistory class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerMasterFileViewHistoryCollection : ActiveList<AE_CustomerMasterFileViewHistory, AE_CustomerMasterFileViewHistoryCollection>
	{
		public static AE_CustomerMasterFileViewHistoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerMasterFileViewHistoryCollection result = new AE_CustomerMasterFileViewHistoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_CustomerMasterFileViewHistory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_CustomerMasterFileViewHistory table.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerMasterFileViewHistory : ActiveRecord<AE_CustomerMasterFileViewHistory>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_CustomerMasterFileViewHistory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_CustomerMasterFileViewHistory", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterFileViewID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileViewID.ColumnName = "CustomerMasterFileViewID";
				colvarCustomerMasterFileViewID.DataType = DbType.Guid;
				colvarCustomerMasterFileViewID.MaxLength = 0;
				colvarCustomerMasterFileViewID.AutoIncrement = false;
				colvarCustomerMasterFileViewID.IsNullable = false;
				colvarCustomerMasterFileViewID.IsPrimaryKey = true;
				colvarCustomerMasterFileViewID.IsForeignKey = false;
				colvarCustomerMasterFileViewID.IsReadOnly = false;
				colvarCustomerMasterFileViewID.DefaultSetting = @"(newid())";
				colvarCustomerMasterFileViewID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileViewID);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = true;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "AE_CustomerMasterFiles";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarViewedBy = new TableSchema.TableColumn(schema);
				colvarViewedBy.ColumnName = "ViewedBy";
				colvarViewedBy.DataType = DbType.AnsiString;
				colvarViewedBy.MaxLength = 50;
				colvarViewedBy.AutoIncrement = false;
				colvarViewedBy.IsNullable = false;
				colvarViewedBy.IsPrimaryKey = false;
				colvarViewedBy.IsForeignKey = false;
				colvarViewedBy.IsReadOnly = false;
				colvarViewedBy.DefaultSetting = @"";
				colvarViewedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarViewedBy);

				TableSchema.TableColumn colvarViewedOn = new TableSchema.TableColumn(schema);
				colvarViewedOn.ColumnName = "ViewedOn";
				colvarViewedOn.DataType = DbType.DateTime;
				colvarViewedOn.MaxLength = 0;
				colvarViewedOn.AutoIncrement = false;
				colvarViewedOn.IsNullable = false;
				colvarViewedOn.IsPrimaryKey = false;
				colvarViewedOn.IsForeignKey = false;
				colvarViewedOn.IsReadOnly = false;
				colvarViewedOn.DefaultSetting = @"";
				colvarViewedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarViewedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_CustomerMasterFileViewHistory",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_CustomerMasterFileViewHistory LoadFrom(AE_CustomerMasterFileViewHistory item)
		{
			AE_CustomerMasterFileViewHistory result = new AE_CustomerMasterFileViewHistory();
			if (item.CustomerMasterFileViewID != default(Guid)) {
				result.LoadByKey(item.CustomerMasterFileViewID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public Guid CustomerMasterFileViewID {
			get { return GetColumnValue<Guid>(Columns.CustomerMasterFileViewID); }
			set {
				SetColumnValue(Columns.CustomerMasterFileViewID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileViewID));
			}
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set {
				SetColumnValue(Columns.CustomerMasterFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileId));
			}
		}
		[DataMember]
		public string ViewedBy {
			get { return GetColumnValue<string>(Columns.ViewedBy); }
			set {
				SetColumnValue(Columns.ViewedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ViewedBy));
			}
		}
		[DataMember]
		public DateTime ViewedOn {
			get { return GetColumnValue<DateTime>(Columns.ViewedOn); }
			set {
				SetColumnValue(Columns.ViewedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ViewedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_CustomerMasterFile _CustomerMasterFile;
		//Relationship: FK_AE_CustomerMasterFileViewHistory_AE_CustomerMasterFiles
		public AE_CustomerMasterFile CustomerMasterFile
		{
			get
			{
				if(_CustomerMasterFile == null) {
					_CustomerMasterFile = AE_CustomerMasterFile.FetchByID(this.CustomerMasterFileId);
				}
				return _CustomerMasterFile;
			}
			set
			{
				SetColumnValue("CustomerMasterFileId", value.CustomerMasterFileID);
				_CustomerMasterFile = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CustomerMasterFileViewID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterFileViewIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ViewedByColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ViewedOnColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerMasterFileViewID = @"CustomerMasterFileViewID";
			public static readonly string CustomerMasterFileId = @"CustomerMasterFileId";
			public static readonly string ViewedBy = @"ViewedBy";
			public static readonly string ViewedOn = @"ViewedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerMasterFileViewID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerMasterToCustomer class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerMasterToCustomerCollection : ActiveList<AE_CustomerMasterToCustomer, AE_CustomerMasterToCustomerCollection>
	{
		public static AE_CustomerMasterToCustomerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerMasterToCustomerCollection result = new AE_CustomerMasterToCustomerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_CustomerMasterToCustomer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_CustomerMasterToCustomer table.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerMasterToCustomer : ActiveRecord<AE_CustomerMasterToCustomer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_CustomerMasterToCustomer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_CustomerMasterToCustomer", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterToCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterToCustomerID.ColumnName = "CustomerMasterToCustomerID";
				colvarCustomerMasterToCustomerID.DataType = DbType.Int64;
				colvarCustomerMasterToCustomerID.MaxLength = 0;
				colvarCustomerMasterToCustomerID.AutoIncrement = true;
				colvarCustomerMasterToCustomerID.IsNullable = false;
				colvarCustomerMasterToCustomerID.IsPrimaryKey = true;
				colvarCustomerMasterToCustomerID.IsForeignKey = false;
				colvarCustomerMasterToCustomerID.IsReadOnly = false;
				colvarCustomerMasterToCustomerID.DefaultSetting = @"";
				colvarCustomerMasterToCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterToCustomerID);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = true;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "AE_CustomerMasterFiles";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = true;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "AE_Customers";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = true;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"";
				colvarCustomerTypeId.ForeignKeyTableName = "AE_CustomerTypes";
				schema.Columns.Add(colvarCustomerTypeId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_CustomerMasterToCustomer",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_CustomerMasterToCustomer LoadFrom(AE_CustomerMasterToCustomer item)
		{
			AE_CustomerMasterToCustomer result = new AE_CustomerMasterToCustomer();
			if (item.CustomerMasterToCustomerID != default(long)) {
				result.LoadByKey(item.CustomerMasterToCustomerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CustomerMasterToCustomerID {
			get { return GetColumnValue<long>(Columns.CustomerMasterToCustomerID); }
			set {
				SetColumnValue(Columns.CustomerMasterToCustomerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterToCustomerID));
			}
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set {
				SetColumnValue(Columns.CustomerMasterFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileId));
			}
		}
		[DataMember]
		public long CustomerId {
			get { return GetColumnValue<long>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set {
				SetColumnValue(Columns.CustomerTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerTypeId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_CustomerMasterFile _CustomerMasterFile;
		//Relationship: FK_AE_CustomerMasterToCustomer_AE_CustomerMasterFiles
		public AE_CustomerMasterFile CustomerMasterFile
		{
			get
			{
				if(_CustomerMasterFile == null) {
					_CustomerMasterFile = AE_CustomerMasterFile.FetchByID(this.CustomerMasterFileId);
				}
				return _CustomerMasterFile;
			}
			set
			{
				SetColumnValue("CustomerMasterFileId", value.CustomerMasterFileID);
				_CustomerMasterFile = value;
			}
		}

		private AE_Customer _Customer;
		//Relationship: FK_AE_CustomerMasterToCustomer_AE_Customers
		public AE_Customer Customer
		{
			get
			{
				if(_Customer == null) {
					_Customer = AE_Customer.FetchByID(this.CustomerId);
				}
				return _Customer;
			}
			set
			{
				SetColumnValue("CustomerId", value.CustomerID);
				_Customer = value;
			}
		}

		private AE_CustomerType _CustomerType;
		//Relationship: FK_AE_CustomerMasterToCustomer_AE_CustomerTypes
		public AE_CustomerType CustomerType
		{
			get
			{
				if(_CustomerType == null) {
					_CustomerType = AE_CustomerType.FetchByID(this.CustomerTypeId);
				}
				return _CustomerType;
			}
			set
			{
				SetColumnValue("CustomerTypeId", value.CustomerTypeID);
				_CustomerType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CustomerMasterToCustomerID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterToCustomerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerMasterToCustomerID = @"CustomerMasterToCustomerID";
			public static readonly string CustomerMasterFileId = @"CustomerMasterFileId";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string CustomerTypeId = @"CustomerTypeId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerMasterToCustomerID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_Customer class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerCollection : ActiveList<AE_Customer, AE_CustomerCollection>
	{
		public static AE_CustomerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerCollection result = new AE_CustomerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_Customer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_Customers table.
	/// </summary>
	[DataContract]
	public partial class AE_Customer : ActiveRecord<AE_Customer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_Customer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_Customers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int64;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = true;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = true;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = true;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"('PRI')";
				colvarCustomerTypeId.ForeignKeyTableName = "AE_CustomerTypes";
				schema.Columns.Add(colvarCustomerTypeId);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = true;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "AE_CustomerMasterFiles";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"((5000))";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = true;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "MC_Addresses";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = true;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "QL_Leads";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarLocalizationId = new TableSchema.TableColumn(schema);
				colvarLocalizationId.ColumnName = "LocalizationId";
				colvarLocalizationId.DataType = DbType.AnsiString;
				colvarLocalizationId.MaxLength = 20;
				colvarLocalizationId.AutoIncrement = false;
				colvarLocalizationId.IsNullable = false;
				colvarLocalizationId.IsPrimaryKey = false;
				colvarLocalizationId.IsForeignKey = true;
				colvarLocalizationId.IsReadOnly = false;
				colvarLocalizationId.DefaultSetting = @"('en-US')";
				colvarLocalizationId.ForeignKeyTableName = "MC_Localization";
				schema.Columns.Add(colvarLocalizationId);

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.String;
				colvarPrefix.MaxLength = 50;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = true;
				colvarPrefix.IsPrimaryKey = false;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPostfix = new TableSchema.TableColumn(schema);
				colvarPostfix.ColumnName = "Postfix";
				colvarPostfix.DataType = DbType.String;
				colvarPostfix.MaxLength = 50;
				colvarPostfix.AutoIncrement = false;
				colvarPostfix.IsNullable = true;
				colvarPostfix.IsPrimaryKey = false;
				colvarPostfix.IsForeignKey = false;
				colvarPostfix.IsReadOnly = false;
				colvarPostfix.DefaultSetting = @"";
				colvarPostfix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostfix);

				TableSchema.TableColumn colvarBusinessName = new TableSchema.TableColumn(schema);
				colvarBusinessName.ColumnName = "BusinessName";
				colvarBusinessName.DataType = DbType.String;
				colvarBusinessName.MaxLength = 50;
				colvarBusinessName.AutoIncrement = false;
				colvarBusinessName.IsNullable = true;
				colvarBusinessName.IsPrimaryKey = false;
				colvarBusinessName.IsForeignKey = false;
				colvarBusinessName.IsReadOnly = false;
				colvarBusinessName.DefaultSetting = @"";
				colvarBusinessName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBusinessName);

				TableSchema.TableColumn colvarGender = new TableSchema.TableColumn(schema);
				colvarGender.ColumnName = "Gender";
				colvarGender.DataType = DbType.String;
				colvarGender.MaxLength = 10;
				colvarGender.AutoIncrement = false;
				colvarGender.IsNullable = false;
				colvarGender.IsPrimaryKey = false;
				colvarGender.IsForeignKey = false;
				colvarGender.IsReadOnly = false;
				colvarGender.DefaultSetting = @"(N'Male')";
				colvarGender.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGender);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.AnsiString;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.AnsiString;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.AnsiString;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_Customers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_Customer LoadFrom(AE_Customer item)
		{
			AE_Customer result = new AE_Customer();
			if (item.CustomerID != default(long)) {
				result.LoadByKey(item.CustomerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CustomerID {
			get { return GetColumnValue<long>(Columns.CustomerID); }
			set {
				SetColumnValue(Columns.CustomerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerID));
			}
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set {
				SetColumnValue(Columns.CustomerTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerTypeId));
			}
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set {
				SetColumnValue(Columns.CustomerMasterFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileId));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set {
				SetColumnValue(Columns.AddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressId));
			}
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set {
				SetColumnValue(Columns.LeadId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadId));
			}
		}
		[DataMember]
		public string LocalizationId {
			get { return GetColumnValue<string>(Columns.LocalizationId); }
			set {
				SetColumnValue(Columns.LocalizationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LocalizationId));
			}
		}
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set {
				SetColumnValue(Columns.Prefix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Prefix));
			}
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set {
				SetColumnValue(Columns.FirstName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FirstName));
			}
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set {
				SetColumnValue(Columns.MiddleName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiddleName));
			}
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set {
				SetColumnValue(Columns.LastName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastName));
			}
		}
		[DataMember]
		public string Postfix {
			get { return GetColumnValue<string>(Columns.Postfix); }
			set {
				SetColumnValue(Columns.Postfix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Postfix));
			}
		}
		[DataMember]
		public string BusinessName {
			get { return GetColumnValue<string>(Columns.BusinessName); }
			set {
				SetColumnValue(Columns.BusinessName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BusinessName));
			}
		}
		[DataMember]
		public string Gender {
			get { return GetColumnValue<string>(Columns.Gender); }
			set {
				SetColumnValue(Columns.Gender, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Gender));
			}
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set {
				SetColumnValue(Columns.PhoneHome, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneHome));
			}
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set {
				SetColumnValue(Columns.PhoneWork, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneWork));
			}
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set {
				SetColumnValue(Columns.PhoneMobile, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneMobile));
			}
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set {
				SetColumnValue(Columns.Email, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Email));
			}
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set {
				SetColumnValue(Columns.DOB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DOB));
			}
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set {
				SetColumnValue(Columns.SSN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SSN));
			}
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set {
				SetColumnValue(Columns.Username, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Username));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_CustomerMasterFile _CustomerMasterFile;
		//Relationship: FK_AE_Customers_AE_CustomerMasterFiles
		public AE_CustomerMasterFile CustomerMasterFile
		{
			get
			{
				if(_CustomerMasterFile == null) {
					_CustomerMasterFile = AE_CustomerMasterFile.FetchByID(this.CustomerMasterFileId);
				}
				return _CustomerMasterFile;
			}
			set
			{
				SetColumnValue("CustomerMasterFileId", value.CustomerMasterFileID);
				_CustomerMasterFile = value;
			}
		}

		private AE_CustomerType _CustomerType;
		//Relationship: FK_AE_Customers_AE_CustomerTypes
		public AE_CustomerType CustomerType
		{
			get
			{
				if(_CustomerType == null) {
					_CustomerType = AE_CustomerType.FetchByID(this.CustomerTypeId);
				}
				return _CustomerType;
			}
			set
			{
				SetColumnValue("CustomerTypeId", value.CustomerTypeID);
				_CustomerType = value;
			}
		}

		private AE_Dealer _Dealer;
		//Relationship: FK_AE_Customers_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		private MC_Address _Address;
		//Relationship: FK_AE_Customers_MC_Addresss
		public MC_Address Address
		{
			get
			{
				if(_Address == null) {
					_Address = MC_Address.FetchByID(this.AddressId);
				}
				return _Address;
			}
			set
			{
				SetColumnValue("AddressId", value.AddressID);
				_Address = value;
			}
		}

		private MC_Localization _Localization;
		//Relationship: FK_AE_Customers_MC_Localization
		public MC_Localization Localization
		{
			get
			{
				if(_Localization == null) {
					_Localization = MC_Localization.FetchByID(this.LocalizationId);
				}
				return _Localization;
			}
			set
			{
				SetColumnValue("LocalizationId", value.LocalizationID);
				_Localization = value;
			}
		}

		private QL_Lead _Lead;
		//Relationship: FK_AE_Customers_QL_Leads
		public QL_Lead Lead
		{
			get
			{
				if(_Lead == null) {
					_Lead = QL_Lead.FetchByID(this.LeadId);
				}
				return _Lead;
			}
			set
			{
				SetColumnValue("LeadId", value.LeadID);
				_Lead = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CustomerTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn LocalizationIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PostfixColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn BusinessNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn GenderColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[28]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerID = @"CustomerID";
			public static readonly string CustomerTypeId = @"CustomerTypeId";
			public static readonly string CustomerMasterFileId = @"CustomerMasterFileId";
			public static readonly string DealerId = @"DealerId";
			public static readonly string AddressId = @"AddressId";
			public static readonly string LeadId = @"LeadId";
			public static readonly string LocalizationId = @"LocalizationId";
			public static readonly string Prefix = @"Prefix";
			public static readonly string FirstName = @"FirstName";
			public static readonly string MiddleName = @"MiddleName";
			public static readonly string LastName = @"LastName";
			public static readonly string Postfix = @"Postfix";
			public static readonly string BusinessName = @"BusinessName";
			public static readonly string Gender = @"Gender";
			public static readonly string PhoneHome = @"PhoneHome";
			public static readonly string PhoneWork = @"PhoneWork";
			public static readonly string PhoneMobile = @"PhoneMobile";
			public static readonly string Email = @"Email";
			public static readonly string DOB = @"DOB";
			public static readonly string SSN = @"SSN";
			public static readonly string Username = @"Username";
			public static readonly string Password = @"Password";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerID; }
		}
		*/

		#region Foreign Collections

		private AE_BillingCustomerCollection _AE_BillingCustomersCol;
		//Relationship: FK_AE_BillingCustomers_AE_Customers
		public AE_BillingCustomerCollection AE_BillingCustomersCol
		{
			get
			{
				if(_AE_BillingCustomersCol == null) {
					_AE_BillingCustomersCol = new AE_BillingCustomerCollection();
					_AE_BillingCustomersCol.LoadAndCloseReader(AE_BillingCustomer.Query()
						.WHERE(AE_BillingCustomer.Columns.CustomerId, CustomerID).ExecuteReader());
				}
				return _AE_BillingCustomersCol;
			}
		}

		private AE_CustomerAccountCollection _AE_CustomerAccountsCol;
		//Relationship: FK_AE_CustomerAccounts_AE_Customers
		public AE_CustomerAccountCollection AE_CustomerAccountsCol
		{
			get
			{
				if(_AE_CustomerAccountsCol == null) {
					_AE_CustomerAccountsCol = new AE_CustomerAccountCollection();
					_AE_CustomerAccountsCol.LoadAndCloseReader(AE_CustomerAccount.Query()
						.WHERE(AE_CustomerAccount.Columns.CustomerId, CustomerID).ExecuteReader());
				}
				return _AE_CustomerAccountsCol;
			}
		}

		private AE_CustomerAddressCollection _AE_CustomerAddressesCol;
		//Relationship: FK_AE_CustomerAddress_AE_Customers
		public AE_CustomerAddressCollection AE_CustomerAddressesCol
		{
			get
			{
				if(_AE_CustomerAddressesCol == null) {
					_AE_CustomerAddressesCol = new AE_CustomerAddressCollection();
					_AE_CustomerAddressesCol.LoadAndCloseReader(AE_CustomerAddress.Query()
						.WHERE(AE_CustomerAddress.Columns.CustomerId, CustomerID).ExecuteReader());
				}
				return _AE_CustomerAddressesCol;
			}
		}

		private AE_CustomerGpsClientCollection _AE_CustomerGpsClientsCol;
		//Relationship: FK_AE_CustomerGpsClients_AE_Customers
		public AE_CustomerGpsClientCollection AE_CustomerGpsClientsCol
		{
			get
			{
				if(_AE_CustomerGpsClientsCol == null) {
					_AE_CustomerGpsClientsCol = new AE_CustomerGpsClientCollection();
					_AE_CustomerGpsClientsCol.LoadAndCloseReader(AE_CustomerGpsClient.Query()
						.WHERE(AE_CustomerGpsClient.Columns.CustomerID, CustomerID).ExecuteReader());
				}
				return _AE_CustomerGpsClientsCol;
			}
		}

		private AE_CustomerMasterToCustomerCollection _AE_CustomerMasterToCustomersCol;
		//Relationship: FK_AE_CustomerMasterToCustomer_AE_Customers
		public AE_CustomerMasterToCustomerCollection AE_CustomerMasterToCustomersCol
		{
			get
			{
				if(_AE_CustomerMasterToCustomersCol == null) {
					_AE_CustomerMasterToCustomersCol = new AE_CustomerMasterToCustomerCollection();
					_AE_CustomerMasterToCustomersCol.LoadAndCloseReader(AE_CustomerMasterToCustomer.Query()
						.WHERE(AE_CustomerMasterToCustomer.Columns.CustomerId, CustomerID).ExecuteReader());
				}
				return _AE_CustomerMasterToCustomersCol;
			}
		}

		private AE_DealerPurchaseOrderItemCollection _AE_DealerPurchaseOrderItemsCol;
		//Relationship: FK_AE_DealerPurchaseOrderItems_AE_Customers
		public AE_DealerPurchaseOrderItemCollection AE_DealerPurchaseOrderItemsCol
		{
			get
			{
				if(_AE_DealerPurchaseOrderItemsCol == null) {
					_AE_DealerPurchaseOrderItemsCol = new AE_DealerPurchaseOrderItemCollection();
					_AE_DealerPurchaseOrderItemsCol.LoadAndCloseReader(AE_DealerPurchaseOrderItem.Query()
						.WHERE(AE_DealerPurchaseOrderItem.Columns.CustomerId, CustomerID).ExecuteReader());
				}
				return _AE_DealerPurchaseOrderItemsCol;
			}
		}

		private AE_DealerPurchaseOrderCollection _AE_DealerPurchaseOrdersCol;
		//Relationship: FK_AE_DealerPurchaseOrders_AE_Customers
		public AE_DealerPurchaseOrderCollection AE_DealerPurchaseOrdersCol
		{
			get
			{
				if(_AE_DealerPurchaseOrdersCol == null) {
					_AE_DealerPurchaseOrdersCol = new AE_DealerPurchaseOrderCollection();
					_AE_DealerPurchaseOrdersCol.LoadAndCloseReader(AE_DealerPurchaseOrder.Query()
						.WHERE(AE_DealerPurchaseOrder.Columns.CustomerId, CustomerID).ExecuteReader());
				}
				return _AE_DealerPurchaseOrdersCol;
			}
		}

		private CA_AppointmentCollection _CA_AppointmentsCol;
		//Relationship: FK_CA_Appointments_AE_Customers
		public CA_AppointmentCollection CA_AppointmentsCol
		{
			get
			{
				if(_CA_AppointmentsCol == null) {
					_CA_AppointmentsCol = new CA_AppointmentCollection();
					_CA_AppointmentsCol.LoadAndCloseReader(CA_Appointment.Query()
						.WHERE(CA_Appointment.Columns.CustomerId, CustomerID).ExecuteReader());
				}
				return _CA_AppointmentsCol;
			}
		}

		private MC_AccountNoteCollection _MC_AccountNotesCol;
		//Relationship: FK_MC_AccountNotes_AE_Customers
		public MC_AccountNoteCollection MC_AccountNotesCol
		{
			get
			{
				if(_MC_AccountNotesCol == null) {
					_MC_AccountNotesCol = new MC_AccountNoteCollection();
					_MC_AccountNotesCol.LoadAndCloseReader(MC_AccountNote.Query()
						.WHERE(MC_AccountNote.Columns.CustomerId, CustomerID).ExecuteReader());
				}
				return _MC_AccountNotesCol;
			}
		}

		private MC_AccountCollection _MC_AccountsCol;
		//Relationship: FK_MC_Accounts_AE_Customers
		public MC_AccountCollection MC_AccountsCol
		{
			get
			{
				if(_MC_AccountsCol == null) {
					_MC_AccountsCol = new MC_AccountCollection();
					_MC_AccountsCol.LoadAndCloseReader(MC_Account.Query()
						.WHERE(MC_Account.Columns.ShipContactId, CustomerID).ExecuteReader());
				}
				return _MC_AccountsCol;
			}
		}

		private MS_AccountCustomerCollection _MS_AccountCustomersCol;
		//Relationship: FK_MS_AccountCustomers_AE_Customers
		public MS_AccountCustomerCollection MS_AccountCustomersCol
		{
			get
			{
				if(_MS_AccountCustomersCol == null) {
					_MS_AccountCustomersCol = new MS_AccountCustomerCollection();
					_MS_AccountCustomersCol.LoadAndCloseReader(MS_AccountCustomer.Query()
						.WHERE(MS_AccountCustomer.Columns.CustomerId, CustomerID).ExecuteReader());
				}
				return _MS_AccountCustomersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerSetupStatus class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSetupStatusCollection : ActiveList<AE_CustomerSetupStatus, AE_CustomerSetupStatusCollection>
	{
		public static AE_CustomerSetupStatusCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerSetupStatusCollection result = new AE_CustomerSetupStatusCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_CustomerSetupStatus item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_CustomerSetupStatus table.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerSetupStatus : ActiveRecord<AE_CustomerSetupStatus>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_CustomerSetupStatus()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_CustomerSetupStatus", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int64;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = true;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);

				TableSchema.TableColumn colvarIsStep01MonitoredPartyComplete = new TableSchema.TableColumn(schema);
				colvarIsStep01MonitoredPartyComplete.ColumnName = "IsStep01MonitoredPartyComplete";
				colvarIsStep01MonitoredPartyComplete.DataType = DbType.Boolean;
				colvarIsStep01MonitoredPartyComplete.MaxLength = 0;
				colvarIsStep01MonitoredPartyComplete.AutoIncrement = false;
				colvarIsStep01MonitoredPartyComplete.IsNullable = false;
				colvarIsStep01MonitoredPartyComplete.IsPrimaryKey = false;
				colvarIsStep01MonitoredPartyComplete.IsForeignKey = false;
				colvarIsStep01MonitoredPartyComplete.IsReadOnly = false;
				colvarIsStep01MonitoredPartyComplete.DefaultSetting = @"";
				colvarIsStep01MonitoredPartyComplete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsStep01MonitoredPartyComplete);

				TableSchema.TableColumn colvarIsStep01MonitoredPartyOn = new TableSchema.TableColumn(schema);
				colvarIsStep01MonitoredPartyOn.ColumnName = "IsStep01MonitoredPartyOn";
				colvarIsStep01MonitoredPartyOn.DataType = DbType.DateTime;
				colvarIsStep01MonitoredPartyOn.MaxLength = 0;
				colvarIsStep01MonitoredPartyOn.AutoIncrement = false;
				colvarIsStep01MonitoredPartyOn.IsNullable = false;
				colvarIsStep01MonitoredPartyOn.IsPrimaryKey = false;
				colvarIsStep01MonitoredPartyOn.IsForeignKey = false;
				colvarIsStep01MonitoredPartyOn.IsReadOnly = false;
				colvarIsStep01MonitoredPartyOn.DefaultSetting = @"";
				colvarIsStep01MonitoredPartyOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsStep01MonitoredPartyOn);

				TableSchema.TableColumn colvarIsSubmitOnlineComplete = new TableSchema.TableColumn(schema);
				colvarIsSubmitOnlineComplete.ColumnName = "IsSubmitOnlineComplete";
				colvarIsSubmitOnlineComplete.DataType = DbType.Boolean;
				colvarIsSubmitOnlineComplete.MaxLength = 0;
				colvarIsSubmitOnlineComplete.AutoIncrement = false;
				colvarIsSubmitOnlineComplete.IsNullable = false;
				colvarIsSubmitOnlineComplete.IsPrimaryKey = false;
				colvarIsSubmitOnlineComplete.IsForeignKey = false;
				colvarIsSubmitOnlineComplete.IsReadOnly = false;
				colvarIsSubmitOnlineComplete.DefaultSetting = @"";
				colvarIsSubmitOnlineComplete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSubmitOnlineComplete);

				TableSchema.TableColumn colvarIsSubmitOnlineCompleteOn = new TableSchema.TableColumn(schema);
				colvarIsSubmitOnlineCompleteOn.ColumnName = "IsSubmitOnlineCompleteOn";
				colvarIsSubmitOnlineCompleteOn.DataType = DbType.DateTime;
				colvarIsSubmitOnlineCompleteOn.MaxLength = 0;
				colvarIsSubmitOnlineCompleteOn.AutoIncrement = false;
				colvarIsSubmitOnlineCompleteOn.IsNullable = false;
				colvarIsSubmitOnlineCompleteOn.IsPrimaryKey = false;
				colvarIsSubmitOnlineCompleteOn.IsForeignKey = false;
				colvarIsSubmitOnlineCompleteOn.IsReadOnly = false;
				colvarIsSubmitOnlineCompleteOn.DefaultSetting = @"";
				colvarIsSubmitOnlineCompleteOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSubmitOnlineCompleteOn);

				TableSchema.TableColumn colvarSetupIsComplete = new TableSchema.TableColumn(schema);
				colvarSetupIsComplete.ColumnName = "SetupIsComplete";
				colvarSetupIsComplete.DataType = DbType.Boolean;
				colvarSetupIsComplete.MaxLength = 0;
				colvarSetupIsComplete.AutoIncrement = false;
				colvarSetupIsComplete.IsNullable = false;
				colvarSetupIsComplete.IsPrimaryKey = false;
				colvarSetupIsComplete.IsForeignKey = false;
				colvarSetupIsComplete.IsReadOnly = false;
				colvarSetupIsComplete.DefaultSetting = @"";
				colvarSetupIsComplete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSetupIsComplete);

				TableSchema.TableColumn colvarSetupIsCompleteOn = new TableSchema.TableColumn(schema);
				colvarSetupIsCompleteOn.ColumnName = "SetupIsCompleteOn";
				colvarSetupIsCompleteOn.DataType = DbType.DateTime;
				colvarSetupIsCompleteOn.MaxLength = 0;
				colvarSetupIsCompleteOn.AutoIncrement = false;
				colvarSetupIsCompleteOn.IsNullable = false;
				colvarSetupIsCompleteOn.IsPrimaryKey = false;
				colvarSetupIsCompleteOn.IsForeignKey = false;
				colvarSetupIsCompleteOn.IsReadOnly = false;
				colvarSetupIsCompleteOn.DefaultSetting = @"";
				colvarSetupIsCompleteOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSetupIsCompleteOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_CustomerSetupStatus",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_CustomerSetupStatus LoadFrom(AE_CustomerSetupStatus item)
		{
			AE_CustomerSetupStatus result = new AE_CustomerSetupStatus();
			if (item.CustomerID != default(long)) {
				result.LoadByKey(item.CustomerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CustomerID {
			get { return GetColumnValue<long>(Columns.CustomerID); }
			set {
				SetColumnValue(Columns.CustomerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerID));
			}
		}
		[DataMember]
		public bool IsStep01MonitoredPartyComplete {
			get { return GetColumnValue<bool>(Columns.IsStep01MonitoredPartyComplete); }
			set {
				SetColumnValue(Columns.IsStep01MonitoredPartyComplete, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsStep01MonitoredPartyComplete));
			}
		}
		[DataMember]
		public DateTime IsStep01MonitoredPartyOn {
			get { return GetColumnValue<DateTime>(Columns.IsStep01MonitoredPartyOn); }
			set {
				SetColumnValue(Columns.IsStep01MonitoredPartyOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsStep01MonitoredPartyOn));
			}
		}
		[DataMember]
		public bool IsSubmitOnlineComplete {
			get { return GetColumnValue<bool>(Columns.IsSubmitOnlineComplete); }
			set {
				SetColumnValue(Columns.IsSubmitOnlineComplete, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSubmitOnlineComplete));
			}
		}
		[DataMember]
		public DateTime IsSubmitOnlineCompleteOn {
			get { return GetColumnValue<DateTime>(Columns.IsSubmitOnlineCompleteOn); }
			set {
				SetColumnValue(Columns.IsSubmitOnlineCompleteOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSubmitOnlineCompleteOn));
			}
		}
		[DataMember]
		public bool SetupIsComplete {
			get { return GetColumnValue<bool>(Columns.SetupIsComplete); }
			set {
				SetColumnValue(Columns.SetupIsComplete, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SetupIsComplete));
			}
		}
		[DataMember]
		public DateTime SetupIsCompleteOn {
			get { return GetColumnValue<DateTime>(Columns.SetupIsCompleteOn); }
			set {
				SetColumnValue(Columns.SetupIsCompleteOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SetupIsCompleteOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CustomerID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IsStep01MonitoredPartyCompleteColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsStep01MonitoredPartyOnColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsSubmitOnlineCompleteColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsSubmitOnlineCompleteOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SetupIsCompleteColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SetupIsCompleteOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerID = @"CustomerID";
			public static readonly string IsStep01MonitoredPartyComplete = @"IsStep01MonitoredPartyComplete";
			public static readonly string IsStep01MonitoredPartyOn = @"IsStep01MonitoredPartyOn";
			public static readonly string IsSubmitOnlineComplete = @"IsSubmitOnlineComplete";
			public static readonly string IsSubmitOnlineCompleteOn = @"IsSubmitOnlineCompleteOn";
			public static readonly string SetupIsComplete = @"SetupIsComplete";
			public static readonly string SetupIsCompleteOn = @"SetupIsCompleteOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_CustomerType class.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerTypeCollection : ActiveList<AE_CustomerType, AE_CustomerTypeCollection>
	{
		public static AE_CustomerTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_CustomerTypeCollection result = new AE_CustomerTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_CustomerType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_CustomerTypes table.
	/// </summary>
	[DataContract]
	public partial class AE_CustomerType : ActiveRecord<AE_CustomerType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Billing_CustomerID = "BILL";
			[EnumMember()] public const string Gps_Client_CustomerID = "GPSCLNT";
			[EnumMember()] public const string LeadID = "LEAD";
			[EnumMember()] public const string Primary_Contracted_CustomerID = "PRI";
			[EnumMember()] public const string Secondary_Contracted_CustomerID = "SEC";
			[EnumMember()] public const string Shipping_CustomerID = "SHIP";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_CustomerType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_CustomerTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerTypeID = new TableSchema.TableColumn(schema);
				colvarCustomerTypeID.ColumnName = "CustomerTypeID";
				colvarCustomerTypeID.DataType = DbType.AnsiString;
				colvarCustomerTypeID.MaxLength = 20;
				colvarCustomerTypeID.AutoIncrement = false;
				colvarCustomerTypeID.IsNullable = false;
				colvarCustomerTypeID.IsPrimaryKey = true;
				colvarCustomerTypeID.IsForeignKey = false;
				colvarCustomerTypeID.IsReadOnly = false;
				colvarCustomerTypeID.DefaultSetting = @"";
				colvarCustomerTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerTypeID);

				TableSchema.TableColumn colvarCustomerType = new TableSchema.TableColumn(schema);
				colvarCustomerType.ColumnName = "CustomerType";
				colvarCustomerType.DataType = DbType.String;
				colvarCustomerType.MaxLength = 50;
				colvarCustomerType.AutoIncrement = false;
				colvarCustomerType.IsNullable = false;
				colvarCustomerType.IsPrimaryKey = false;
				colvarCustomerType.IsForeignKey = false;
				colvarCustomerType.IsReadOnly = false;
				colvarCustomerType.DefaultSetting = @"";
				colvarCustomerType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_CustomerTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_CustomerType LoadFrom(AE_CustomerType item)
		{
			AE_CustomerType result = new AE_CustomerType();
			if (item.CustomerTypeID != default(string)) {
				result.LoadByKey(item.CustomerTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CustomerTypeID {
			get { return GetColumnValue<string>(Columns.CustomerTypeID); }
			set {
				SetColumnValue(Columns.CustomerTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerTypeID));
			}
		}
		[DataMember]
		public string CustomerType {
			get { return GetColumnValue<string>(Columns.CustomerType); }
			set {
				SetColumnValue(Columns.CustomerType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CustomerType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerTypeID = @"CustomerTypeID";
			public static readonly string CustomerType = @"CustomerType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerTypeID; }
		}
		*/

		#region Foreign Collections

		private AE_CustomerAccountCollection _AE_CustomerAccountsCol;
		//Relationship: FK_AE_CustomerAccounts_AE_CustomerTypes
		public AE_CustomerAccountCollection AE_CustomerAccountsCol
		{
			get
			{
				if(_AE_CustomerAccountsCol == null) {
					_AE_CustomerAccountsCol = new AE_CustomerAccountCollection();
					_AE_CustomerAccountsCol.LoadAndCloseReader(AE_CustomerAccount.Query()
						.WHERE(AE_CustomerAccount.Columns.CustomerTypeId, CustomerTypeID).ExecuteReader());
				}
				return _AE_CustomerAccountsCol;
			}
		}

		private AE_CustomerMasterToCustomerCollection _AE_CustomerMasterToCustomersCol;
		//Relationship: FK_AE_CustomerMasterToCustomer_AE_CustomerTypes
		public AE_CustomerMasterToCustomerCollection AE_CustomerMasterToCustomersCol
		{
			get
			{
				if(_AE_CustomerMasterToCustomersCol == null) {
					_AE_CustomerMasterToCustomersCol = new AE_CustomerMasterToCustomerCollection();
					_AE_CustomerMasterToCustomersCol.LoadAndCloseReader(AE_CustomerMasterToCustomer.Query()
						.WHERE(AE_CustomerMasterToCustomer.Columns.CustomerTypeId, CustomerTypeID).ExecuteReader());
				}
				return _AE_CustomerMasterToCustomersCol;
			}
		}

		private AE_CustomerCollection _AE_CustomersCol;
		//Relationship: FK_AE_Customers_AE_CustomerTypes
		public AE_CustomerCollection AE_CustomersCol
		{
			get
			{
				if(_AE_CustomersCol == null) {
					_AE_CustomersCol = new AE_CustomerCollection();
					_AE_CustomersCol.LoadAndCloseReader(AE_Customer.Query()
						.WHERE(AE_Customer.Columns.CustomerTypeId, CustomerTypeID).ExecuteReader());
				}
				return _AE_CustomersCol;
			}
		}

		private QL_CustomerMasterLeadCollection _QL_CustomerMasterLeadsCol;
		//Relationship: FK_QL_CustomerMasterLeads_AE_CustomerTypes
		public QL_CustomerMasterLeadCollection QL_CustomerMasterLeadsCol
		{
			get
			{
				if(_QL_CustomerMasterLeadsCol == null) {
					_QL_CustomerMasterLeadsCol = new QL_CustomerMasterLeadCollection();
					_QL_CustomerMasterLeadsCol.LoadAndCloseReader(QL_CustomerMasterLead.Query()
						.WHERE(QL_CustomerMasterLead.Columns.CustomerTypeId, CustomerTypeID).ExecuteReader());
				}
				return _QL_CustomerMasterLeadsCol;
			}
		}

		private QL_LeadCollection _QL_LeadsCol;
		//Relationship: FK_QL_Leads_AE_CustomerTypes
		public QL_LeadCollection QL_LeadsCol
		{
			get
			{
				if(_QL_LeadsCol == null) {
					_QL_LeadsCol = new QL_LeadCollection();
					_QL_LeadsCol.LoadAndCloseReader(QL_Lead.Query()
						.WHERE(QL_Lead.Columns.CustomerTypeId, CustomerTypeID).ExecuteReader());
				}
				return _QL_LeadsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_DealerPurchaseOrderItem class.
	/// </summary>
	[DataContract]
	public partial class AE_DealerPurchaseOrderItemCollection : ActiveList<AE_DealerPurchaseOrderItem, AE_DealerPurchaseOrderItemCollection>
	{
		public static AE_DealerPurchaseOrderItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_DealerPurchaseOrderItemCollection result = new AE_DealerPurchaseOrderItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_DealerPurchaseOrderItem item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_DealerPurchaseOrderItems table.
	/// </summary>
	[DataContract]
	public partial class AE_DealerPurchaseOrderItem : ActiveRecord<AE_DealerPurchaseOrderItem>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_DealerPurchaseOrderItem()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_DealerPurchaseOrderItems", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDealerPoItemID = new TableSchema.TableColumn(schema);
				colvarDealerPoItemID.ColumnName = "DealerPoItemID";
				colvarDealerPoItemID.DataType = DbType.Int64;
				colvarDealerPoItemID.MaxLength = 0;
				colvarDealerPoItemID.AutoIncrement = true;
				colvarDealerPoItemID.IsNullable = false;
				colvarDealerPoItemID.IsPrimaryKey = true;
				colvarDealerPoItemID.IsForeignKey = false;
				colvarDealerPoItemID.IsReadOnly = false;
				colvarDealerPoItemID.DefaultSetting = @"";
				colvarDealerPoItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerPoItemID);

				TableSchema.TableColumn colvarDealerPoId = new TableSchema.TableColumn(schema);
				colvarDealerPoId.ColumnName = "DealerPoId";
				colvarDealerPoId.DataType = DbType.Int32;
				colvarDealerPoId.MaxLength = 0;
				colvarDealerPoId.AutoIncrement = false;
				colvarDealerPoId.IsNullable = false;
				colvarDealerPoId.IsPrimaryKey = false;
				colvarDealerPoId.IsForeignKey = true;
				colvarDealerPoId.IsReadOnly = false;
				colvarDealerPoId.DefaultSetting = @"";
				colvarDealerPoId.ForeignKeyTableName = "AE_DealerPurchaseOrders";
				schema.Columns.Add(colvarDealerPoId);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = true;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "AE_Customers";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarProductSkwId = new TableSchema.TableColumn(schema);
				colvarProductSkwId.ColumnName = "ProductSkwId";
				colvarProductSkwId.DataType = DbType.AnsiString;
				colvarProductSkwId.MaxLength = 50;
				colvarProductSkwId.AutoIncrement = false;
				colvarProductSkwId.IsNullable = false;
				colvarProductSkwId.IsPrimaryKey = false;
				colvarProductSkwId.IsForeignKey = true;
				colvarProductSkwId.IsReadOnly = false;
				colvarProductSkwId.DefaultSetting = @"";
				colvarProductSkwId.ForeignKeyTableName = "AE_Products";
				schema.Columns.Add(colvarProductSkwId);

				TableSchema.TableColumn colvarQty = new TableSchema.TableColumn(schema);
				colvarQty.ColumnName = "Qty";
				colvarQty.DataType = DbType.Int16;
				colvarQty.MaxLength = 0;
				colvarQty.AutoIncrement = false;
				colvarQty.IsNullable = false;
				colvarQty.IsPrimaryKey = false;
				colvarQty.IsForeignKey = false;
				colvarQty.IsReadOnly = false;
				colvarQty.DefaultSetting = @"((1))";
				colvarQty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQty);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_DealerPurchaseOrderItems",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_DealerPurchaseOrderItem LoadFrom(AE_DealerPurchaseOrderItem item)
		{
			AE_DealerPurchaseOrderItem result = new AE_DealerPurchaseOrderItem();
			if (item.DealerPoItemID != default(long)) {
				result.LoadByKey(item.DealerPoItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long DealerPoItemID {
			get { return GetColumnValue<long>(Columns.DealerPoItemID); }
			set {
				SetColumnValue(Columns.DealerPoItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerPoItemID));
			}
		}
		[DataMember]
		public int DealerPoId {
			get { return GetColumnValue<int>(Columns.DealerPoId); }
			set {
				SetColumnValue(Columns.DealerPoId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerPoId));
			}
		}
		[DataMember]
		public long CustomerId {
			get { return GetColumnValue<long>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public string ProductSkwId {
			get { return GetColumnValue<string>(Columns.ProductSkwId); }
			set {
				SetColumnValue(Columns.ProductSkwId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductSkwId));
			}
		}
		[DataMember]
		public short Qty {
			get { return GetColumnValue<short>(Columns.Qty); }
			set {
				SetColumnValue(Columns.Qty, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Qty));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Customer _Customer;
		//Relationship: FK_AE_DealerPurchaseOrderItems_AE_Customers
		public AE_Customer Customer
		{
			get
			{
				if(_Customer == null) {
					_Customer = AE_Customer.FetchByID(this.CustomerId);
				}
				return _Customer;
			}
			set
			{
				SetColumnValue("CustomerId", value.CustomerID);
				_Customer = value;
			}
		}

		private AE_DealerPurchaseOrder _DealerPo;
		//Relationship: FK_AE_DealerPurchaseOrderItems_AE_DealerPurchaseOrders
		public AE_DealerPurchaseOrder DealerPo
		{
			get
			{
				if(_DealerPo == null) {
					_DealerPo = AE_DealerPurchaseOrder.FetchByID(this.DealerPoId);
				}
				return _DealerPo;
			}
			set
			{
				SetColumnValue("DealerPoId", value.DealerPoID);
				_DealerPo = value;
			}
		}

		private AE_Product _ProductSkw;
		//Relationship: FK_AE_DealerPurchaseOrderItems_AE_Products
		public AE_Product ProductSkw
		{
			get
			{
				if(_ProductSkw == null) {
					_ProductSkw = AE_Product.FetchByID(this.ProductSkwId);
				}
				return _ProductSkw;
			}
			set
			{
				SetColumnValue("ProductSkwId", value.ProductSkwID);
				_ProductSkw = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return DealerPoItemID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn DealerPoItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerPoIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ProductSkwIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn QtyColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DealerPoItemID = @"DealerPoItemID";
			public static readonly string DealerPoId = @"DealerPoId";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string ProductSkwId = @"ProductSkwId";
			public static readonly string Qty = @"Qty";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DealerPoItemID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_DealerPurchaseOrder class.
	/// </summary>
	[DataContract]
	public partial class AE_DealerPurchaseOrderCollection : ActiveList<AE_DealerPurchaseOrder, AE_DealerPurchaseOrderCollection>
	{
		public static AE_DealerPurchaseOrderCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_DealerPurchaseOrderCollection result = new AE_DealerPurchaseOrderCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_DealerPurchaseOrder item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_DealerPurchaseOrders table.
	/// </summary>
	[DataContract]
	public partial class AE_DealerPurchaseOrder : ActiveRecord<AE_DealerPurchaseOrder>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_DealerPurchaseOrder()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_DealerPurchaseOrders", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDealerPoID = new TableSchema.TableColumn(schema);
				colvarDealerPoID.ColumnName = "DealerPoID";
				colvarDealerPoID.DataType = DbType.Int32;
				colvarDealerPoID.MaxLength = 0;
				colvarDealerPoID.AutoIncrement = true;
				colvarDealerPoID.IsNullable = false;
				colvarDealerPoID.IsPrimaryKey = true;
				colvarDealerPoID.IsForeignKey = false;
				colvarDealerPoID.IsReadOnly = false;
				colvarDealerPoID.DefaultSetting = @"";
				colvarDealerPoID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerPoID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = true;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "AE_Customers";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarCloseDate = new TableSchema.TableColumn(schema);
				colvarCloseDate.ColumnName = "CloseDate";
				colvarCloseDate.DataType = DbType.DateTime;
				colvarCloseDate.MaxLength = 0;
				colvarCloseDate.AutoIncrement = false;
				colvarCloseDate.IsNullable = false;
				colvarCloseDate.IsPrimaryKey = false;
				colvarCloseDate.IsForeignKey = false;
				colvarCloseDate.IsReadOnly = false;
				colvarCloseDate.DefaultSetting = @"";
				colvarCloseDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCloseDate);

				TableSchema.TableColumn colvarIsFirstCustomerOrder = new TableSchema.TableColumn(schema);
				colvarIsFirstCustomerOrder.ColumnName = "IsFirstCustomerOrder";
				colvarIsFirstCustomerOrder.DataType = DbType.Boolean;
				colvarIsFirstCustomerOrder.MaxLength = 0;
				colvarIsFirstCustomerOrder.AutoIncrement = false;
				colvarIsFirstCustomerOrder.IsNullable = false;
				colvarIsFirstCustomerOrder.IsPrimaryKey = false;
				colvarIsFirstCustomerOrder.IsForeignKey = false;
				colvarIsFirstCustomerOrder.IsReadOnly = false;
				colvarIsFirstCustomerOrder.DefaultSetting = @"((0))";
				colvarIsFirstCustomerOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsFirstCustomerOrder);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_DealerPurchaseOrders",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_DealerPurchaseOrder LoadFrom(AE_DealerPurchaseOrder item)
		{
			AE_DealerPurchaseOrder result = new AE_DealerPurchaseOrder();
			if (item.DealerPoID != default(int)) {
				result.LoadByKey(item.DealerPoID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DealerPoID {
			get { return GetColumnValue<int>(Columns.DealerPoID); }
			set {
				SetColumnValue(Columns.DealerPoID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerPoID));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public long CustomerId {
			get { return GetColumnValue<long>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public DateTime CloseDate {
			get { return GetColumnValue<DateTime>(Columns.CloseDate); }
			set {
				SetColumnValue(Columns.CloseDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CloseDate));
			}
		}
		[DataMember]
		public bool IsFirstCustomerOrder {
			get { return GetColumnValue<bool>(Columns.IsFirstCustomerOrder); }
			set {
				SetColumnValue(Columns.IsFirstCustomerOrder, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsFirstCustomerOrder));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Customer _Customer;
		//Relationship: FK_AE_DealerPurchaseOrders_AE_Customers
		public AE_Customer Customer
		{
			get
			{
				if(_Customer == null) {
					_Customer = AE_Customer.FetchByID(this.CustomerId);
				}
				return _Customer;
			}
			set
			{
				SetColumnValue("CustomerId", value.CustomerID);
				_Customer = value;
			}
		}

		private AE_Dealer _Dealer;
		//Relationship: FK_AE_DealerPurchaseOrders_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return DealerPoID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn DealerPoIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CloseDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsFirstCustomerOrderColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DealerPoID = @"DealerPoID";
			public static readonly string DealerId = @"DealerId";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string CloseDate = @"CloseDate";
			public static readonly string IsFirstCustomerOrder = @"IsFirstCustomerOrder";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DealerPoID; }
		}
		*/

		#region Foreign Collections

		private AE_DealerPurchaseOrderItemCollection _AE_DealerPurchaseOrderItemsCol;
		//Relationship: FK_AE_DealerPurchaseOrderItems_AE_DealerPurchaseOrders
		public AE_DealerPurchaseOrderItemCollection AE_DealerPurchaseOrderItemsCol
		{
			get
			{
				if(_AE_DealerPurchaseOrderItemsCol == null) {
					_AE_DealerPurchaseOrderItemsCol = new AE_DealerPurchaseOrderItemCollection();
					_AE_DealerPurchaseOrderItemsCol.LoadAndCloseReader(AE_DealerPurchaseOrderItem.Query()
						.WHERE(AE_DealerPurchaseOrderItem.Columns.DealerPoId, DealerPoID).ExecuteReader());
				}
				return _AE_DealerPurchaseOrderItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_Dealer class.
	/// </summary>
	[DataContract]
	public partial class AE_DealerCollection : ActiveList<AE_Dealer, AE_DealerCollection>
	{
		public static AE_DealerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_DealerCollection result = new AE_DealerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_Dealer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_Dealers table.
	/// </summary>
	[DataContract]
	public partial class AE_Dealer : ActiveRecord<AE_Dealer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_Dealer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_Dealers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDealerID = new TableSchema.TableColumn(schema);
				colvarDealerID.ColumnName = "DealerID";
				colvarDealerID.DataType = DbType.Int32;
				colvarDealerID.MaxLength = 0;
				colvarDealerID.AutoIncrement = true;
				colvarDealerID.IsNullable = false;
				colvarDealerID.IsPrimaryKey = true;
				colvarDealerID.IsForeignKey = false;
				colvarDealerID.IsReadOnly = false;
				colvarDealerID.DefaultSetting = @"";
				colvarDealerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerID);

				TableSchema.TableColumn colvarDealerName = new TableSchema.TableColumn(schema);
				colvarDealerName.ColumnName = "DealerName";
				colvarDealerName.DataType = DbType.String;
				colvarDealerName.MaxLength = 150;
				colvarDealerName.AutoIncrement = false;
				colvarDealerName.IsNullable = false;
				colvarDealerName.IsPrimaryKey = false;
				colvarDealerName.IsForeignKey = false;
				colvarDealerName.IsReadOnly = false;
				colvarDealerName.DefaultSetting = @"";
				colvarDealerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerName);

				TableSchema.TableColumn colvarContactFirstName = new TableSchema.TableColumn(schema);
				colvarContactFirstName.ColumnName = "ContactFirstName";
				colvarContactFirstName.DataType = DbType.String;
				colvarContactFirstName.MaxLength = 50;
				colvarContactFirstName.AutoIncrement = false;
				colvarContactFirstName.IsNullable = false;
				colvarContactFirstName.IsPrimaryKey = false;
				colvarContactFirstName.IsForeignKey = false;
				colvarContactFirstName.IsReadOnly = false;
				colvarContactFirstName.DefaultSetting = @"";
				colvarContactFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactFirstName);

				TableSchema.TableColumn colvarContactLastName = new TableSchema.TableColumn(schema);
				colvarContactLastName.ColumnName = "ContactLastName";
				colvarContactLastName.DataType = DbType.String;
				colvarContactLastName.MaxLength = 50;
				colvarContactLastName.AutoIncrement = false;
				colvarContactLastName.IsNullable = false;
				colvarContactLastName.IsPrimaryKey = false;
				colvarContactLastName.IsForeignKey = false;
				colvarContactLastName.IsReadOnly = false;
				colvarContactLastName.DefaultSetting = @"";
				colvarContactLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactLastName);

				TableSchema.TableColumn colvarContactEmail = new TableSchema.TableColumn(schema);
				colvarContactEmail.ColumnName = "ContactEmail";
				colvarContactEmail.DataType = DbType.String;
				colvarContactEmail.MaxLength = 500;
				colvarContactEmail.AutoIncrement = false;
				colvarContactEmail.IsNullable = false;
				colvarContactEmail.IsPrimaryKey = false;
				colvarContactEmail.IsForeignKey = false;
				colvarContactEmail.IsReadOnly = false;
				colvarContactEmail.DefaultSetting = @"";
				colvarContactEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactEmail);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.AnsiStringFixedLength;
				colvarPhoneWork.MaxLength = 20;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = false;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.AnsiStringFixedLength;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarPhoneFax = new TableSchema.TableColumn(schema);
				colvarPhoneFax.ColumnName = "PhoneFax";
				colvarPhoneFax.DataType = DbType.AnsiStringFixedLength;
				colvarPhoneFax.MaxLength = 20;
				colvarPhoneFax.AutoIncrement = false;
				colvarPhoneFax.IsNullable = true;
				colvarPhoneFax.IsPrimaryKey = false;
				colvarPhoneFax.IsForeignKey = false;
				colvarPhoneFax.IsReadOnly = false;
				colvarPhoneFax.DefaultSetting = @"";
				colvarPhoneFax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneFax);

				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.String;
				colvarAddress.MaxLength = 50;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = false;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);

				TableSchema.TableColumn colvarAddress2 = new TableSchema.TableColumn(schema);
				colvarAddress2.ColumnName = "Address2";
				colvarAddress2.DataType = DbType.String;
				colvarAddress2.MaxLength = 50;
				colvarAddress2.AutoIncrement = false;
				colvarAddress2.IsNullable = true;
				colvarAddress2.IsPrimaryKey = false;
				colvarAddress2.IsForeignKey = false;
				colvarAddress2.IsReadOnly = false;
				colvarAddress2.DefaultSetting = @"";
				colvarAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarStateAB = new TableSchema.TableColumn(schema);
				colvarStateAB.ColumnName = "StateAB";
				colvarStateAB.DataType = DbType.AnsiStringFixedLength;
				colvarStateAB.MaxLength = 2;
				colvarStateAB.AutoIncrement = false;
				colvarStateAB.IsNullable = false;
				colvarStateAB.IsPrimaryKey = false;
				colvarStateAB.IsForeignKey = false;
				colvarStateAB.IsReadOnly = false;
				colvarStateAB.DefaultSetting = @"";
				colvarStateAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateAB);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.AnsiStringFixedLength;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarPlusFour = new TableSchema.TableColumn(schema);
				colvarPlusFour.ColumnName = "PlusFour";
				colvarPlusFour.DataType = DbType.AnsiStringFixedLength;
				colvarPlusFour.MaxLength = 4;
				colvarPlusFour.AutoIncrement = false;
				colvarPlusFour.IsNullable = true;
				colvarPlusFour.IsPrimaryKey = false;
				colvarPlusFour.IsForeignKey = false;
				colvarPlusFour.IsReadOnly = false;
				colvarPlusFour.DefaultSetting = @"";
				colvarPlusFour.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlusFour);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 500;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = false;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 20;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = false;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_Dealers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_Dealer LoadFrom(AE_Dealer item)
		{
			AE_Dealer result = new AE_Dealer();
			if (item.DealerID != default(int)) {
				result.LoadByKey(item.DealerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DealerID {
			get { return GetColumnValue<int>(Columns.DealerID); }
			set {
				SetColumnValue(Columns.DealerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerID));
			}
		}
		[DataMember]
		public string DealerName {
			get { return GetColumnValue<string>(Columns.DealerName); }
			set {
				SetColumnValue(Columns.DealerName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerName));
			}
		}
		[DataMember]
		public string ContactFirstName {
			get { return GetColumnValue<string>(Columns.ContactFirstName); }
			set {
				SetColumnValue(Columns.ContactFirstName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactFirstName));
			}
		}
		[DataMember]
		public string ContactLastName {
			get { return GetColumnValue<string>(Columns.ContactLastName); }
			set {
				SetColumnValue(Columns.ContactLastName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactLastName));
			}
		}
		[DataMember]
		public string ContactEmail {
			get { return GetColumnValue<string>(Columns.ContactEmail); }
			set {
				SetColumnValue(Columns.ContactEmail, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactEmail));
			}
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set {
				SetColumnValue(Columns.PhoneWork, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneWork));
			}
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set {
				SetColumnValue(Columns.PhoneMobile, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneMobile));
			}
		}
		[DataMember]
		public string PhoneFax {
			get { return GetColumnValue<string>(Columns.PhoneFax); }
			set {
				SetColumnValue(Columns.PhoneFax, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneFax));
			}
		}
		[DataMember]
		public string Address {
			get { return GetColumnValue<string>(Columns.Address); }
			set {
				SetColumnValue(Columns.Address, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Address));
			}
		}
		[DataMember]
		public string Address2 {
			get { return GetColumnValue<string>(Columns.Address2); }
			set {
				SetColumnValue(Columns.Address2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Address2));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string StateAB {
			get { return GetColumnValue<string>(Columns.StateAB); }
			set {
				SetColumnValue(Columns.StateAB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateAB));
			}
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set {
				SetColumnValue(Columns.PostalCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostalCode));
			}
		}
		[DataMember]
		public string PlusFour {
			get { return GetColumnValue<string>(Columns.PlusFour); }
			set {
				SetColumnValue(Columns.PlusFour, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PlusFour));
			}
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set {
				SetColumnValue(Columns.Username, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Username));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return DealerName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DealerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ContactFirstNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ContactLastNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ContactEmailColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PhoneFaxColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn AddressColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn Address2Column
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn StateABColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn PlusFourColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[22]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DealerID = @"DealerID";
			public static readonly string DealerName = @"DealerName";
			public static readonly string ContactFirstName = @"ContactFirstName";
			public static readonly string ContactLastName = @"ContactLastName";
			public static readonly string ContactEmail = @"ContactEmail";
			public static readonly string PhoneWork = @"PhoneWork";
			public static readonly string PhoneMobile = @"PhoneMobile";
			public static readonly string PhoneFax = @"PhoneFax";
			public static readonly string Address = @"Address";
			public static readonly string Address2 = @"Address2";
			public static readonly string City = @"City";
			public static readonly string StateAB = @"StateAB";
			public static readonly string PostalCode = @"PostalCode";
			public static readonly string PlusFour = @"PlusFour";
			public static readonly string Username = @"Username";
			public static readonly string Password = @"Password";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DealerID; }
		}
		*/

		#region Foreign Collections

		private AE_CustomerMasterFileCollection _AE_CustomerMasterFilesCol;
		//Relationship: FK_AE_CustomerMasterFiles_AE_Dealers
		public AE_CustomerMasterFileCollection AE_CustomerMasterFilesCol
		{
			get
			{
				if(_AE_CustomerMasterFilesCol == null) {
					_AE_CustomerMasterFilesCol = new AE_CustomerMasterFileCollection();
					_AE_CustomerMasterFilesCol.LoadAndCloseReader(AE_CustomerMasterFile.Query()
						.WHERE(AE_CustomerMasterFile.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _AE_CustomerMasterFilesCol;
			}
		}

		private AE_CustomerCollection _AE_CustomersCol;
		//Relationship: FK_AE_Customers_AE_Dealers
		public AE_CustomerCollection AE_CustomersCol
		{
			get
			{
				if(_AE_CustomersCol == null) {
					_AE_CustomersCol = new AE_CustomerCollection();
					_AE_CustomersCol.LoadAndCloseReader(AE_Customer.Query()
						.WHERE(AE_Customer.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _AE_CustomersCol;
			}
		}

		private AE_DealerPurchaseOrderCollection _AE_DealerPurchaseOrdersCol;
		//Relationship: FK_AE_DealerPurchaseOrders_AE_Dealers
		public AE_DealerPurchaseOrderCollection AE_DealerPurchaseOrdersCol
		{
			get
			{
				if(_AE_DealerPurchaseOrdersCol == null) {
					_AE_DealerPurchaseOrdersCol = new AE_DealerPurchaseOrderCollection();
					_AE_DealerPurchaseOrdersCol.LoadAndCloseReader(AE_DealerPurchaseOrder.Query()
						.WHERE(AE_DealerPurchaseOrder.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _AE_DealerPurchaseOrdersCol;
			}
		}

		private AE_InvoiceTemplateCollection _AE_InvoiceTemplatesCol;
		//Relationship: FK_AE_InvoiceTemplates_AE_Dealers
		public AE_InvoiceTemplateCollection AE_InvoiceTemplatesCol
		{
			get
			{
				if(_AE_InvoiceTemplatesCol == null) {
					_AE_InvoiceTemplatesCol = new AE_InvoiceTemplateCollection();
					_AE_InvoiceTemplatesCol.LoadAndCloseReader(AE_InvoiceTemplate.Query()
						.WHERE(AE_InvoiceTemplate.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _AE_InvoiceTemplatesCol;
			}
		}

		private CA_AppointmentCollection _CA_AppointmentsCol;
		//Relationship: FK_CA_Appointments_AE_Dealers
		public CA_AppointmentCollection CA_AppointmentsCol
		{
			get
			{
				if(_CA_AppointmentsCol == null) {
					_CA_AppointmentsCol = new CA_AppointmentCollection();
					_CA_AppointmentsCol.LoadAndCloseReader(CA_Appointment.Query()
						.WHERE(CA_Appointment.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _CA_AppointmentsCol;
			}
		}

		private MC_AccountCollection _MC_AccountsCol;
		//Relationship: FK_MC_Accounts_AE_Dealers
		public MC_AccountCollection MC_AccountsCol
		{
			get
			{
				if(_MC_AccountsCol == null) {
					_MC_AccountsCol = new MC_AccountCollection();
					_MC_AccountsCol.LoadAndCloseReader(MC_Account.Query()
						.WHERE(MC_Account.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _MC_AccountsCol;
			}
		}

		private MC_DealerUserCollection _MC_DealerUsersCol;
		//Relationship: FK_MC_DealerUsers_AE_Dealers
		public MC_DealerUserCollection MC_DealerUsersCol
		{
			get
			{
				if(_MC_DealerUsersCol == null) {
					_MC_DealerUsersCol = new MC_DealerUserCollection();
					_MC_DealerUsersCol.LoadAndCloseReader(MC_DealerUser.Query()
						.WHERE(MC_DealerUser.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _MC_DealerUsersCol;
			}
		}

		private MS_DealerCollection _MS_DealersCol;
		//Relationship: FK_MS_Dealers_AE_Dealers
		public MS_DealerCollection MS_DealersCol
		{
			get
			{
				if(_MS_DealersCol == null) {
					_MS_DealersCol = new MS_DealerCollection();
					_MS_DealersCol.LoadAndCloseReader(MS_Dealer.Query()
						.WHERE(MS_Dealer.Columns.DealerID, DealerID).ExecuteReader());
				}
				return _MS_DealersCol;
			}
		}

		private MS_ReceiverLineCollection _MS_ReceiverLinesCol;
		//Relationship: FK_MS_ReceiverLines_AE_Dealers
		public MS_ReceiverLineCollection MS_ReceiverLinesCol
		{
			get
			{
				if(_MS_ReceiverLinesCol == null) {
					_MS_ReceiverLinesCol = new MS_ReceiverLineCollection();
					_MS_ReceiverLinesCol.LoadAndCloseReader(MS_ReceiverLine.Query()
						.WHERE(MS_ReceiverLine.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _MS_ReceiverLinesCol;
			}
		}

		private QL_AddressCollection _QL_AddressesCol;
		//Relationship: FK_QL_Address_AE_Dealers
		public QL_AddressCollection QL_AddressesCol
		{
			get
			{
				if(_QL_AddressesCol == null) {
					_QL_AddressesCol = new QL_AddressCollection();
					_QL_AddressesCol.LoadAndCloseReader(QL_Address.Query()
						.WHERE(QL_Address.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _QL_AddressesCol;
			}
		}

		private QL_CreditScoreGroupsByDealersAndSeasonCollection _QL_CreditScoreGroupsByDealersAndSeasonsCol;
		//Relationship: FK_QL_CreditScoreGroupsByDealersAndSeasons_AE_Dealers
		public QL_CreditScoreGroupsByDealersAndSeasonCollection QL_CreditScoreGroupsByDealersAndSeasonsCol
		{
			get
			{
				if(_QL_CreditScoreGroupsByDealersAndSeasonsCol == null) {
					_QL_CreditScoreGroupsByDealersAndSeasonsCol = new QL_CreditScoreGroupsByDealersAndSeasonCollection();
					_QL_CreditScoreGroupsByDealersAndSeasonsCol.LoadAndCloseReader(QL_CreditScoreGroupsByDealersAndSeason.Query()
						.WHERE(QL_CreditScoreGroupsByDealersAndSeason.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _QL_CreditScoreGroupsByDealersAndSeasonsCol;
			}
		}

		private QL_LeadDispositionCollection _QL_LeadDispositionsCol;
		//Relationship: FK_QL_LeadDispositions_AE_Dealers
		public QL_LeadDispositionCollection QL_LeadDispositionsCol
		{
			get
			{
				if(_QL_LeadDispositionsCol == null) {
					_QL_LeadDispositionsCol = new QL_LeadDispositionCollection();
					_QL_LeadDispositionsCol.LoadAndCloseReader(QL_LeadDisposition.Query()
						.WHERE(QL_LeadDisposition.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _QL_LeadDispositionsCol;
			}
		}

		private QL_LeadCollection _QL_LeadsCol;
		//Relationship: FK_QL_Leads_AE_Dealers
		public QL_LeadCollection QL_LeadsCol
		{
			get
			{
				if(_QL_LeadsCol == null) {
					_QL_LeadsCol = new QL_LeadCollection();
					_QL_LeadsCol.LoadAndCloseReader(QL_Lead.Query()
						.WHERE(QL_Lead.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _QL_LeadsCol;
			}
		}

		private QL_LeadSourceCollection _QL_LeadSourcesCol;
		//Relationship: FK_QL_LeadSources_AE_Dealers
		public QL_LeadSourceCollection QL_LeadSourcesCol
		{
			get
			{
				if(_QL_LeadSourcesCol == null) {
					_QL_LeadSourcesCol = new QL_LeadSourceCollection();
					_QL_LeadSourcesCol.LoadAndCloseReader(QL_LeadSource.Query()
						.WHERE(QL_LeadSource.Columns.DealerId, DealerID).ExecuteReader());
				}
				return _QL_LeadSourcesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_GpsClientToCustomerMaster class.
	/// </summary>
	[DataContract]
	public partial class AE_GpsClientToCustomerMasterCollection : ActiveList<AE_GpsClientToCustomerMaster, AE_GpsClientToCustomerMasterCollection>
	{
		public static AE_GpsClientToCustomerMasterCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_GpsClientToCustomerMasterCollection result = new AE_GpsClientToCustomerMasterCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_GpsClientToCustomerMaster item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_GpsClientToCustomerMaster table.
	/// </summary>
	[DataContract]
	public partial class AE_GpsClientToCustomerMaster : ActiveRecord<AE_GpsClientToCustomerMaster>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_GpsClientToCustomerMaster()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_GpsClientToCustomerMaster", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerGpsClientToCustomerMasterID = new TableSchema.TableColumn(schema);
				colvarCustomerGpsClientToCustomerMasterID.ColumnName = "CustomerGpsClientToCustomerMasterID";
				colvarCustomerGpsClientToCustomerMasterID.DataType = DbType.Int64;
				colvarCustomerGpsClientToCustomerMasterID.MaxLength = 0;
				colvarCustomerGpsClientToCustomerMasterID.AutoIncrement = true;
				colvarCustomerGpsClientToCustomerMasterID.IsNullable = false;
				colvarCustomerGpsClientToCustomerMasterID.IsPrimaryKey = true;
				colvarCustomerGpsClientToCustomerMasterID.IsForeignKey = false;
				colvarCustomerGpsClientToCustomerMasterID.IsReadOnly = false;
				colvarCustomerGpsClientToCustomerMasterID.DefaultSetting = @"";
				colvarCustomerGpsClientToCustomerMasterID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerGpsClientToCustomerMasterID);

				TableSchema.TableColumn colvarCustomerGpsClientId = new TableSchema.TableColumn(schema);
				colvarCustomerGpsClientId.ColumnName = "CustomerGpsClientId";
				colvarCustomerGpsClientId.DataType = DbType.Int64;
				colvarCustomerGpsClientId.MaxLength = 0;
				colvarCustomerGpsClientId.AutoIncrement = false;
				colvarCustomerGpsClientId.IsNullable = false;
				colvarCustomerGpsClientId.IsPrimaryKey = false;
				colvarCustomerGpsClientId.IsForeignKey = true;
				colvarCustomerGpsClientId.IsReadOnly = false;
				colvarCustomerGpsClientId.DefaultSetting = @"";
				colvarCustomerGpsClientId.ForeignKeyTableName = "AE_CustomerGpsClients";
				schema.Columns.Add(colvarCustomerGpsClientId);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = true;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "AE_CustomerMasterFiles";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = true;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_GpsClientToCustomerMaster",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_GpsClientToCustomerMaster LoadFrom(AE_GpsClientToCustomerMaster item)
		{
			AE_GpsClientToCustomerMaster result = new AE_GpsClientToCustomerMaster();
			if (item.CustomerGpsClientToCustomerMasterID != default(long)) {
				result.LoadByKey(item.CustomerGpsClientToCustomerMasterID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CustomerGpsClientToCustomerMasterID {
			get { return GetColumnValue<long>(Columns.CustomerGpsClientToCustomerMasterID); }
			set {
				SetColumnValue(Columns.CustomerGpsClientToCustomerMasterID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerGpsClientToCustomerMasterID));
			}
		}
		[DataMember]
		public long CustomerGpsClientId {
			get { return GetColumnValue<long>(Columns.CustomerGpsClientId); }
			set {
				SetColumnValue(Columns.CustomerGpsClientId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerGpsClientId));
			}
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set {
				SetColumnValue(Columns.CustomerMasterFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool? IsDeleted {
			get { return GetColumnValue<bool?>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_CustomerGpsClient _CustomerGpsClient;
		//Relationship: FK_AE_GpsClientToCustomerMaster_AE_CustomerGpsClients
		public AE_CustomerGpsClient CustomerGpsClient
		{
			get
			{
				if(_CustomerGpsClient == null) {
					_CustomerGpsClient = AE_CustomerGpsClient.FetchByID(this.CustomerGpsClientId);
				}
				return _CustomerGpsClient;
			}
			set
			{
				SetColumnValue("CustomerGpsClientId", value.CustomerGpsClientID);
				_CustomerGpsClient = value;
			}
		}

		private AE_CustomerMasterFile _CustomerMasterFile;
		//Relationship: FK_AE_GpsClientToCustomerMaster_AE_CustomerMasterFiles
		public AE_CustomerMasterFile CustomerMasterFile
		{
			get
			{
				if(_CustomerMasterFile == null) {
					_CustomerMasterFile = AE_CustomerMasterFile.FetchByID(this.CustomerMasterFileId);
				}
				return _CustomerMasterFile;
			}
			set
			{
				SetColumnValue("CustomerMasterFileId", value.CustomerMasterFileID);
				_CustomerMasterFile = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CustomerGpsClientToCustomerMasterID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerGpsClientToCustomerMasterIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerGpsClientIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerGpsClientToCustomerMasterID = @"CustomerGpsClientToCustomerMasterID";
			public static readonly string CustomerGpsClientId = @"CustomerGpsClientId";
			public static readonly string CustomerMasterFileId = @"CustomerMasterFileId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerGpsClientToCustomerMasterID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_InvoiceItem class.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceItemCollection : ActiveList<AE_InvoiceItem, AE_InvoiceItemCollection>
	{
		public static AE_InvoiceItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_InvoiceItemCollection result = new AE_InvoiceItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_InvoiceItem item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_InvoiceItems table.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceItem : ActiveRecord<AE_InvoiceItem>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_InvoiceItem()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_InvoiceItems", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInvoiceItemID = new TableSchema.TableColumn(schema);
				colvarInvoiceItemID.ColumnName = "InvoiceItemID";
				colvarInvoiceItemID.DataType = DbType.Int64;
				colvarInvoiceItemID.MaxLength = 0;
				colvarInvoiceItemID.AutoIncrement = true;
				colvarInvoiceItemID.IsNullable = false;
				colvarInvoiceItemID.IsPrimaryKey = true;
				colvarInvoiceItemID.IsForeignKey = false;
				colvarInvoiceItemID.IsReadOnly = false;
				colvarInvoiceItemID.DefaultSetting = @"";
				colvarInvoiceItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceItemID);

				TableSchema.TableColumn colvarInvoiceId = new TableSchema.TableColumn(schema);
				colvarInvoiceId.ColumnName = "InvoiceId";
				colvarInvoiceId.DataType = DbType.Int64;
				colvarInvoiceId.MaxLength = 0;
				colvarInvoiceId.AutoIncrement = false;
				colvarInvoiceId.IsNullable = false;
				colvarInvoiceId.IsPrimaryKey = false;
				colvarInvoiceId.IsForeignKey = true;
				colvarInvoiceId.IsReadOnly = false;
				colvarInvoiceId.DefaultSetting = @"";
				colvarInvoiceId.ForeignKeyTableName = "AE_Invoices";
				schema.Columns.Add(colvarInvoiceId);

				TableSchema.TableColumn colvarItemId = new TableSchema.TableColumn(schema);
				colvarItemId.ColumnName = "ItemId";
				colvarItemId.DataType = DbType.AnsiString;
				colvarItemId.MaxLength = 50;
				colvarItemId.AutoIncrement = false;
				colvarItemId.IsNullable = false;
				colvarItemId.IsPrimaryKey = false;
				colvarItemId.IsForeignKey = true;
				colvarItemId.IsReadOnly = false;
				colvarItemId.DefaultSetting = @"";
				colvarItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarItemId);

				TableSchema.TableColumn colvarProductBarcodeId = new TableSchema.TableColumn(schema);
				colvarProductBarcodeId.ColumnName = "ProductBarcodeId";
				colvarProductBarcodeId.DataType = DbType.String;
				colvarProductBarcodeId.MaxLength = 50;
				colvarProductBarcodeId.AutoIncrement = false;
				colvarProductBarcodeId.IsNullable = true;
				colvarProductBarcodeId.IsPrimaryKey = false;
				colvarProductBarcodeId.IsForeignKey = true;
				colvarProductBarcodeId.IsReadOnly = false;
				colvarProductBarcodeId.DefaultSetting = @"";
				colvarProductBarcodeId.ForeignKeyTableName = "IE_ProductBarcodes";
				schema.Columns.Add(colvarProductBarcodeId);

				TableSchema.TableColumn colvarTaxOptionId = new TableSchema.TableColumn(schema);
				colvarTaxOptionId.ColumnName = "TaxOptionId";
				colvarTaxOptionId.DataType = DbType.AnsiStringFixedLength;
				colvarTaxOptionId.MaxLength = 3;
				colvarTaxOptionId.AutoIncrement = false;
				colvarTaxOptionId.IsNullable = false;
				colvarTaxOptionId.IsPrimaryKey = false;
				colvarTaxOptionId.IsForeignKey = true;
				colvarTaxOptionId.IsReadOnly = false;
				colvarTaxOptionId.DefaultSetting = @"";
				colvarTaxOptionId.ForeignKeyTableName = "AE_TaxOptions";
				schema.Columns.Add(colvarTaxOptionId);

				TableSchema.TableColumn colvarQty = new TableSchema.TableColumn(schema);
				colvarQty.ColumnName = "Qty";
				colvarQty.DataType = DbType.Int16;
				colvarQty.MaxLength = 0;
				colvarQty.AutoIncrement = false;
				colvarQty.IsNullable = false;
				colvarQty.IsPrimaryKey = false;
				colvarQty.IsForeignKey = false;
				colvarQty.IsReadOnly = false;
				colvarQty.DefaultSetting = @"((1))";
				colvarQty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQty);

				TableSchema.TableColumn colvarCost = new TableSchema.TableColumn(schema);
				colvarCost.ColumnName = "Cost";
				colvarCost.DataType = DbType.Currency;
				colvarCost.MaxLength = 0;
				colvarCost.AutoIncrement = false;
				colvarCost.IsNullable = false;
				colvarCost.IsPrimaryKey = false;
				colvarCost.IsForeignKey = false;
				colvarCost.IsReadOnly = false;
				colvarCost.DefaultSetting = @"";
				colvarCost.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCost);

				TableSchema.TableColumn colvarRetailPrice = new TableSchema.TableColumn(schema);
				colvarRetailPrice.ColumnName = "RetailPrice";
				colvarRetailPrice.DataType = DbType.Currency;
				colvarRetailPrice.MaxLength = 0;
				colvarRetailPrice.AutoIncrement = false;
				colvarRetailPrice.IsNullable = false;
				colvarRetailPrice.IsPrimaryKey = false;
				colvarRetailPrice.IsForeignKey = false;
				colvarRetailPrice.IsReadOnly = false;
				colvarRetailPrice.DefaultSetting = @"";
				colvarRetailPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRetailPrice);

				TableSchema.TableColumn colvarPriceWithTax = new TableSchema.TableColumn(schema);
				colvarPriceWithTax.ColumnName = "PriceWithTax";
				colvarPriceWithTax.DataType = DbType.Currency;
				colvarPriceWithTax.MaxLength = 0;
				colvarPriceWithTax.AutoIncrement = false;
				colvarPriceWithTax.IsNullable = true;
				colvarPriceWithTax.IsPrimaryKey = false;
				colvarPriceWithTax.IsForeignKey = false;
				colvarPriceWithTax.IsReadOnly = false;
				colvarPriceWithTax.DefaultSetting = @"";
				colvarPriceWithTax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriceWithTax);

				TableSchema.TableColumn colvarSystemPoints = new TableSchema.TableColumn(schema);
				colvarSystemPoints.ColumnName = "SystemPoints";
				colvarSystemPoints.DataType = DbType.Decimal;
				colvarSystemPoints.MaxLength = 0;
				colvarSystemPoints.AutoIncrement = false;
				colvarSystemPoints.IsNullable = false;
				colvarSystemPoints.IsPrimaryKey = false;
				colvarSystemPoints.IsForeignKey = false;
				colvarSystemPoints.IsReadOnly = false;
				colvarSystemPoints.DefaultSetting = @"((0))";
				colvarSystemPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemPoints);

				TableSchema.TableColumn colvarSalesmanId = new TableSchema.TableColumn(schema);
				colvarSalesmanId.ColumnName = "SalesmanId";
				colvarSalesmanId.DataType = DbType.String;
				colvarSalesmanId.MaxLength = 25;
				colvarSalesmanId.AutoIncrement = false;
				colvarSalesmanId.IsNullable = true;
				colvarSalesmanId.IsPrimaryKey = false;
				colvarSalesmanId.IsForeignKey = false;
				colvarSalesmanId.IsReadOnly = false;
				colvarSalesmanId.DefaultSetting = @"";
				colvarSalesmanId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesmanId);

				TableSchema.TableColumn colvarTechnicianId = new TableSchema.TableColumn(schema);
				colvarTechnicianId.ColumnName = "TechnicianId";
				colvarTechnicianId.DataType = DbType.String;
				colvarTechnicianId.MaxLength = 25;
				colvarTechnicianId.AutoIncrement = false;
				colvarTechnicianId.IsNullable = true;
				colvarTechnicianId.IsPrimaryKey = false;
				colvarTechnicianId.IsForeignKey = false;
				colvarTechnicianId.IsReadOnly = false;
				colvarTechnicianId.DefaultSetting = @"";
				colvarTechnicianId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_InvoiceItems",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_InvoiceItem LoadFrom(AE_InvoiceItem item)
		{
			AE_InvoiceItem result = new AE_InvoiceItem();
			if (item.InvoiceItemID != default(long)) {
				result.LoadByKey(item.InvoiceItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long InvoiceItemID {
			get { return GetColumnValue<long>(Columns.InvoiceItemID); }
			set {
				SetColumnValue(Columns.InvoiceItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceItemID));
			}
		}
		[DataMember]
		public long InvoiceId {
			get { return GetColumnValue<long>(Columns.InvoiceId); }
			set {
				SetColumnValue(Columns.InvoiceId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceId));
			}
		}
		[DataMember]
		public string ItemId {
			get { return GetColumnValue<string>(Columns.ItemId); }
			set {
				SetColumnValue(Columns.ItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemId));
			}
		}
		[DataMember]
		public string ProductBarcodeId {
			get { return GetColumnValue<string>(Columns.ProductBarcodeId); }
			set {
				SetColumnValue(Columns.ProductBarcodeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductBarcodeId));
			}
		}
		[DataMember]
		public string TaxOptionId {
			get { return GetColumnValue<string>(Columns.TaxOptionId); }
			set {
				SetColumnValue(Columns.TaxOptionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TaxOptionId));
			}
		}
		[DataMember]
		public short Qty {
			get { return GetColumnValue<short>(Columns.Qty); }
			set {
				SetColumnValue(Columns.Qty, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Qty));
			}
		}
		[DataMember]
		public decimal Cost {
			get { return GetColumnValue<decimal>(Columns.Cost); }
			set {
				SetColumnValue(Columns.Cost, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Cost));
			}
		}
		[DataMember]
		public decimal RetailPrice {
			get { return GetColumnValue<decimal>(Columns.RetailPrice); }
			set {
				SetColumnValue(Columns.RetailPrice, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RetailPrice));
			}
		}
		[DataMember]
		public decimal? PriceWithTax {
			get { return GetColumnValue<decimal?>(Columns.PriceWithTax); }
			set {
				SetColumnValue(Columns.PriceWithTax, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PriceWithTax));
			}
		}
		[DataMember]
		public decimal SystemPoints {
			get { return GetColumnValue<decimal>(Columns.SystemPoints); }
			set {
				SetColumnValue(Columns.SystemPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemPoints));
			}
		}
		[DataMember]
		public string SalesmanId {
			get { return GetColumnValue<string>(Columns.SalesmanId); }
			set {
				SetColumnValue(Columns.SalesmanId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesmanId));
			}
		}
		[DataMember]
		public string TechnicianId {
			get { return GetColumnValue<string>(Columns.TechnicianId); }
			set {
				SetColumnValue(Columns.TechnicianId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechnicianId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Invoice _Invoice;
		//Relationship: FK_AE_InvoiceItems_AE_Invoices
		public AE_Invoice Invoice
		{
			get
			{
				if(_Invoice == null) {
					_Invoice = AE_Invoice.FetchByID(this.InvoiceId);
				}
				return _Invoice;
			}
			set
			{
				SetColumnValue("InvoiceId", value.InvoiceID);
				_Invoice = value;
			}
		}

		private AE_Item _Item;
		//Relationship: FK_AE_InvoiceItems_AE_Items
		public AE_Item Item
		{
			get
			{
				if(_Item == null) {
					_Item = AE_Item.FetchByID(this.ItemId);
				}
				return _Item;
			}
			set
			{
				SetColumnValue("ItemId", value.ItemID);
				_Item = value;
			}
		}

		private AE_TaxOption _TaxOption;
		//Relationship: FK_AE_InvoiceItems_AE_TaxOptions
		public AE_TaxOption TaxOption
		{
			get
			{
				if(_TaxOption == null) {
					_TaxOption = AE_TaxOption.FetchByID(this.TaxOptionId);
				}
				return _TaxOption;
			}
			set
			{
				SetColumnValue("TaxOptionId", value.TaxOptionID);
				_TaxOption = value;
			}
		}

		private IE_ProductBarcode _ProductBarcode;
		//Relationship: FK_AE_InvoiceItems_IE_ProductBarcodes
		public IE_ProductBarcode ProductBarcode
		{
			get
			{
				if(_ProductBarcode == null) {
					_ProductBarcode = IE_ProductBarcode.FetchByID(this.ProductBarcodeId);
				}
				return _ProductBarcode;
			}
			set
			{
				SetColumnValue("ProductBarcodeId", value.ProductBarcodeID);
				_ProductBarcode = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return InvoiceItemID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn InvoiceItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn InvoiceIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ItemIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ProductBarcodeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TaxOptionIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn QtyColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CostColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn RetailPriceColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PriceWithTaxColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn SystemPointsColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn SalesmanIdColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn TechnicianIdColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[18]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string InvoiceItemID = @"InvoiceItemID";
			public static readonly string InvoiceId = @"InvoiceId";
			public static readonly string ItemId = @"ItemId";
			public static readonly string ProductBarcodeId = @"ProductBarcodeId";
			public static readonly string TaxOptionId = @"TaxOptionId";
			public static readonly string Qty = @"Qty";
			public static readonly string Cost = @"Cost";
			public static readonly string RetailPrice = @"RetailPrice";
			public static readonly string PriceWithTax = @"PriceWithTax";
			public static readonly string SystemPoints = @"SystemPoints";
			public static readonly string SalesmanId = @"SalesmanId";
			public static readonly string TechnicianId = @"TechnicianId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return InvoiceItemID; }
		}
		*/

		#region Foreign Collections

		private MC_AccountInventoryCollection _MC_AccountInventoriesCol;
		//Relationship: FK_MC_AccountInventory_AE_InvoiceItems
		public MC_AccountInventoryCollection MC_AccountInventoriesCol
		{
			get
			{
				if(_MC_AccountInventoriesCol == null) {
					_MC_AccountInventoriesCol = new MC_AccountInventoryCollection();
					_MC_AccountInventoriesCol.LoadAndCloseReader(MC_AccountInventory.Query()
						.WHERE(MC_AccountInventory.Columns.InvoiceItemId, InvoiceItemID).ExecuteReader());
				}
				return _MC_AccountInventoriesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_InvoicePaymentJoin class.
	/// </summary>
	[DataContract]
	public partial class AE_InvoicePaymentJoinCollection : ActiveList<AE_InvoicePaymentJoin, AE_InvoicePaymentJoinCollection>
	{
		public static AE_InvoicePaymentJoinCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_InvoicePaymentJoinCollection result = new AE_InvoicePaymentJoinCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_InvoicePaymentJoin item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_InvoicePaymentJoins table.
	/// </summary>
	[DataContract]
	public partial class AE_InvoicePaymentJoin : ActiveRecord<AE_InvoicePaymentJoin>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_InvoicePaymentJoin()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_InvoicePaymentJoins", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInvoicePaymentJoinID = new TableSchema.TableColumn(schema);
				colvarInvoicePaymentJoinID.ColumnName = "InvoicePaymentJoinID";
				colvarInvoicePaymentJoinID.DataType = DbType.Int64;
				colvarInvoicePaymentJoinID.MaxLength = 0;
				colvarInvoicePaymentJoinID.AutoIncrement = true;
				colvarInvoicePaymentJoinID.IsNullable = false;
				colvarInvoicePaymentJoinID.IsPrimaryKey = true;
				colvarInvoicePaymentJoinID.IsForeignKey = false;
				colvarInvoicePaymentJoinID.IsReadOnly = false;
				colvarInvoicePaymentJoinID.DefaultSetting = @"";
				colvarInvoicePaymentJoinID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoicePaymentJoinID);

				TableSchema.TableColumn colvarInvoiceId = new TableSchema.TableColumn(schema);
				colvarInvoiceId.ColumnName = "InvoiceId";
				colvarInvoiceId.DataType = DbType.Int64;
				colvarInvoiceId.MaxLength = 0;
				colvarInvoiceId.AutoIncrement = false;
				colvarInvoiceId.IsNullable = false;
				colvarInvoiceId.IsPrimaryKey = false;
				colvarInvoiceId.IsForeignKey = true;
				colvarInvoiceId.IsReadOnly = false;
				colvarInvoiceId.DefaultSetting = @"";
				colvarInvoiceId.ForeignKeyTableName = "AE_Invoices";
				schema.Columns.Add(colvarInvoiceId);

				TableSchema.TableColumn colvarPaymentId = new TableSchema.TableColumn(schema);
				colvarPaymentId.ColumnName = "PaymentId";
				colvarPaymentId.DataType = DbType.Int64;
				colvarPaymentId.MaxLength = 0;
				colvarPaymentId.AutoIncrement = false;
				colvarPaymentId.IsNullable = false;
				colvarPaymentId.IsPrimaryKey = false;
				colvarPaymentId.IsForeignKey = true;
				colvarPaymentId.IsReadOnly = false;
				colvarPaymentId.DefaultSetting = @"";
				colvarPaymentId.ForeignKeyTableName = "AE_Payments";
				schema.Columns.Add(colvarPaymentId);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedById = new TableSchema.TableColumn(schema);
				colvarCreatedById.ColumnName = "CreatedById";
				colvarCreatedById.DataType = DbType.String;
				colvarCreatedById.MaxLength = 50;
				colvarCreatedById.AutoIncrement = false;
				colvarCreatedById.IsNullable = false;
				colvarCreatedById.IsPrimaryKey = false;
				colvarCreatedById.IsForeignKey = false;
				colvarCreatedById.IsReadOnly = false;
				colvarCreatedById.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedById);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_InvoicePaymentJoins",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_InvoicePaymentJoin LoadFrom(AE_InvoicePaymentJoin item)
		{
			AE_InvoicePaymentJoin result = new AE_InvoicePaymentJoin();
			if (item.InvoicePaymentJoinID != default(long)) {
				result.LoadByKey(item.InvoicePaymentJoinID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long InvoicePaymentJoinID {
			get { return GetColumnValue<long>(Columns.InvoicePaymentJoinID); }
			set {
				SetColumnValue(Columns.InvoicePaymentJoinID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoicePaymentJoinID));
			}
		}
		[DataMember]
		public long InvoiceId {
			get { return GetColumnValue<long>(Columns.InvoiceId); }
			set {
				SetColumnValue(Columns.InvoiceId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceId));
			}
		}
		[DataMember]
		public long PaymentId {
			get { return GetColumnValue<long>(Columns.PaymentId); }
			set {
				SetColumnValue(Columns.PaymentId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaymentId));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedById {
			get { return GetColumnValue<string>(Columns.CreatedById); }
			set {
				SetColumnValue(Columns.CreatedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedById));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Invoice _Invoice;
		//Relationship: FK_AE_InvoicePaymentJoins_AE_Invoices
		public AE_Invoice Invoice
		{
			get
			{
				if(_Invoice == null) {
					_Invoice = AE_Invoice.FetchByID(this.InvoiceId);
				}
				return _Invoice;
			}
			set
			{
				SetColumnValue("InvoiceId", value.InvoiceID);
				_Invoice = value;
			}
		}

		private AE_Payment _Payment;
		//Relationship: FK_AE_InvoicePaymentJoins_AE_Payments
		public AE_Payment Payment
		{
			get
			{
				if(_Payment == null) {
					_Payment = AE_Payment.FetchByID(this.PaymentId);
				}
				return _Payment;
			}
			set
			{
				SetColumnValue("PaymentId", value.PaymentID);
				_Payment = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return InvoicePaymentJoinID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn InvoicePaymentJoinIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn InvoiceIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PaymentIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string InvoicePaymentJoinID = @"InvoicePaymentJoinID";
			public static readonly string InvoiceId = @"InvoiceId";
			public static readonly string PaymentId = @"PaymentId";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedById = @"CreatedById";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return InvoicePaymentJoinID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_Invoice class.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceCollection : ActiveList<AE_Invoice, AE_InvoiceCollection>
	{
		public static AE_InvoiceCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_InvoiceCollection result = new AE_InvoiceCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_Invoice item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_Invoices table.
	/// </summary>
	[DataContract]
	public partial class AE_Invoice : ActiveRecord<AE_Invoice>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_Invoice()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_Invoices", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInvoiceID = new TableSchema.TableColumn(schema);
				colvarInvoiceID.ColumnName = "InvoiceID";
				colvarInvoiceID.DataType = DbType.Int64;
				colvarInvoiceID.MaxLength = 0;
				colvarInvoiceID.AutoIncrement = true;
				colvarInvoiceID.IsNullable = false;
				colvarInvoiceID.IsPrimaryKey = true;
				colvarInvoiceID.IsForeignKey = false;
				colvarInvoiceID.IsReadOnly = false;
				colvarInvoiceID.DefaultSetting = @"";
				colvarInvoiceID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MC_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarInvoiceTypeId = new TableSchema.TableColumn(schema);
				colvarInvoiceTypeId.ColumnName = "InvoiceTypeId";
				colvarInvoiceTypeId.DataType = DbType.AnsiString;
				colvarInvoiceTypeId.MaxLength = 20;
				colvarInvoiceTypeId.AutoIncrement = false;
				colvarInvoiceTypeId.IsNullable = false;
				colvarInvoiceTypeId.IsPrimaryKey = false;
				colvarInvoiceTypeId.IsForeignKey = true;
				colvarInvoiceTypeId.IsReadOnly = false;
				colvarInvoiceTypeId.DefaultSetting = @"";
				colvarInvoiceTypeId.ForeignKeyTableName = "AE_InvoiceTypes";
				schema.Columns.Add(colvarInvoiceTypeId);

				TableSchema.TableColumn colvarContractId = new TableSchema.TableColumn(schema);
				colvarContractId.ColumnName = "ContractId";
				colvarContractId.DataType = DbType.Int32;
				colvarContractId.MaxLength = 0;
				colvarContractId.AutoIncrement = false;
				colvarContractId.IsNullable = true;
				colvarContractId.IsPrimaryKey = false;
				colvarContractId.IsForeignKey = true;
				colvarContractId.IsReadOnly = false;
				colvarContractId.DefaultSetting = @"";
				colvarContractId.ForeignKeyTableName = "AE_Contracts";
				schema.Columns.Add(colvarContractId);

				TableSchema.TableColumn colvarTaxScheduleId = new TableSchema.TableColumn(schema);
				colvarTaxScheduleId.ColumnName = "TaxScheduleId";
				colvarTaxScheduleId.DataType = DbType.Int32;
				colvarTaxScheduleId.MaxLength = 0;
				colvarTaxScheduleId.AutoIncrement = false;
				colvarTaxScheduleId.IsNullable = true;
				colvarTaxScheduleId.IsPrimaryKey = false;
				colvarTaxScheduleId.IsForeignKey = false;
				colvarTaxScheduleId.IsReadOnly = false;
				colvarTaxScheduleId.DefaultSetting = @"";
				colvarTaxScheduleId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxScheduleId);

				TableSchema.TableColumn colvarPaymentTermId = new TableSchema.TableColumn(schema);
				colvarPaymentTermId.ColumnName = "PaymentTermId";
				colvarPaymentTermId.DataType = DbType.Int32;
				colvarPaymentTermId.MaxLength = 0;
				colvarPaymentTermId.AutoIncrement = false;
				colvarPaymentTermId.IsNullable = true;
				colvarPaymentTermId.IsPrimaryKey = false;
				colvarPaymentTermId.IsForeignKey = false;
				colvarPaymentTermId.IsReadOnly = false;
				colvarPaymentTermId.DefaultSetting = @"";
				colvarPaymentTermId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentTermId);

				TableSchema.TableColumn colvarDocDate = new TableSchema.TableColumn(schema);
				colvarDocDate.ColumnName = "DocDate";
				colvarDocDate.DataType = DbType.AnsiString;
				colvarDocDate.MaxLength = 0;
				colvarDocDate.AutoIncrement = false;
				colvarDocDate.IsNullable = false;
				colvarDocDate.IsPrimaryKey = false;
				colvarDocDate.IsForeignKey = false;
				colvarDocDate.IsReadOnly = false;
				colvarDocDate.DefaultSetting = @"";
				colvarDocDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocDate);

				TableSchema.TableColumn colvarPostedDate = new TableSchema.TableColumn(schema);
				colvarPostedDate.ColumnName = "PostedDate";
				colvarPostedDate.DataType = DbType.AnsiString;
				colvarPostedDate.MaxLength = 0;
				colvarPostedDate.AutoIncrement = false;
				colvarPostedDate.IsNullable = true;
				colvarPostedDate.IsPrimaryKey = false;
				colvarPostedDate.IsForeignKey = false;
				colvarPostedDate.IsReadOnly = false;
				colvarPostedDate.DefaultSetting = @"";
				colvarPostedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostedDate);

				TableSchema.TableColumn colvarDueDate = new TableSchema.TableColumn(schema);
				colvarDueDate.ColumnName = "DueDate";
				colvarDueDate.DataType = DbType.AnsiString;
				colvarDueDate.MaxLength = 0;
				colvarDueDate.AutoIncrement = false;
				colvarDueDate.IsNullable = true;
				colvarDueDate.IsPrimaryKey = false;
				colvarDueDate.IsForeignKey = false;
				colvarDueDate.IsReadOnly = false;
				colvarDueDate.DefaultSetting = @"";
				colvarDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDueDate);

				TableSchema.TableColumn colvarGLPostDate = new TableSchema.TableColumn(schema);
				colvarGLPostDate.ColumnName = "GLPostDate";
				colvarGLPostDate.DataType = DbType.AnsiString;
				colvarGLPostDate.MaxLength = 0;
				colvarGLPostDate.AutoIncrement = false;
				colvarGLPostDate.IsNullable = true;
				colvarGLPostDate.IsPrimaryKey = false;
				colvarGLPostDate.IsForeignKey = false;
				colvarGLPostDate.IsReadOnly = false;
				colvarGLPostDate.DefaultSetting = @"";
				colvarGLPostDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGLPostDate);

				TableSchema.TableColumn colvarCurrentTransactionAmount = new TableSchema.TableColumn(schema);
				colvarCurrentTransactionAmount.ColumnName = "CurrentTransactionAmount";
				colvarCurrentTransactionAmount.DataType = DbType.Currency;
				colvarCurrentTransactionAmount.MaxLength = 0;
				colvarCurrentTransactionAmount.AutoIncrement = false;
				colvarCurrentTransactionAmount.IsNullable = true;
				colvarCurrentTransactionAmount.IsPrimaryKey = false;
				colvarCurrentTransactionAmount.IsForeignKey = false;
				colvarCurrentTransactionAmount.IsReadOnly = false;
				colvarCurrentTransactionAmount.DefaultSetting = @"";
				colvarCurrentTransactionAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentTransactionAmount);

				TableSchema.TableColumn colvarSalesAmount = new TableSchema.TableColumn(schema);
				colvarSalesAmount.ColumnName = "SalesAmount";
				colvarSalesAmount.DataType = DbType.Currency;
				colvarSalesAmount.MaxLength = 0;
				colvarSalesAmount.AutoIncrement = false;
				colvarSalesAmount.IsNullable = false;
				colvarSalesAmount.IsPrimaryKey = false;
				colvarSalesAmount.IsForeignKey = false;
				colvarSalesAmount.IsReadOnly = false;
				colvarSalesAmount.DefaultSetting = @"";
				colvarSalesAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesAmount);

				TableSchema.TableColumn colvarOriginalTransactionAmount = new TableSchema.TableColumn(schema);
				colvarOriginalTransactionAmount.ColumnName = "OriginalTransactionAmount";
				colvarOriginalTransactionAmount.DataType = DbType.Currency;
				colvarOriginalTransactionAmount.MaxLength = 0;
				colvarOriginalTransactionAmount.AutoIncrement = false;
				colvarOriginalTransactionAmount.IsNullable = false;
				colvarOriginalTransactionAmount.IsPrimaryKey = false;
				colvarOriginalTransactionAmount.IsForeignKey = false;
				colvarOriginalTransactionAmount.IsReadOnly = false;
				colvarOriginalTransactionAmount.DefaultSetting = @"";
				colvarOriginalTransactionAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginalTransactionAmount);

				TableSchema.TableColumn colvarCostAmount = new TableSchema.TableColumn(schema);
				colvarCostAmount.ColumnName = "CostAmount";
				colvarCostAmount.DataType = DbType.Currency;
				colvarCostAmount.MaxLength = 0;
				colvarCostAmount.AutoIncrement = false;
				colvarCostAmount.IsNullable = false;
				colvarCostAmount.IsPrimaryKey = false;
				colvarCostAmount.IsForeignKey = false;
				colvarCostAmount.IsReadOnly = false;
				colvarCostAmount.DefaultSetting = @"";
				colvarCostAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCostAmount);

				TableSchema.TableColumn colvarTaxAmount = new TableSchema.TableColumn(schema);
				colvarTaxAmount.ColumnName = "TaxAmount";
				colvarTaxAmount.DataType = DbType.Currency;
				colvarTaxAmount.MaxLength = 0;
				colvarTaxAmount.AutoIncrement = false;
				colvarTaxAmount.IsNullable = false;
				colvarTaxAmount.IsPrimaryKey = false;
				colvarTaxAmount.IsForeignKey = false;
				colvarTaxAmount.IsReadOnly = false;
				colvarTaxAmount.DefaultSetting = @"";
				colvarTaxAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxAmount);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarModifiedById = new TableSchema.TableColumn(schema);
				colvarModifiedById.ColumnName = "ModifiedById";
				colvarModifiedById.DataType = DbType.String;
				colvarModifiedById.MaxLength = 50;
				colvarModifiedById.AutoIncrement = false;
				colvarModifiedById.IsNullable = false;
				colvarModifiedById.IsPrimaryKey = false;
				colvarModifiedById.IsForeignKey = false;
				colvarModifiedById.IsReadOnly = false;
				colvarModifiedById.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedById);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedById = new TableSchema.TableColumn(schema);
				colvarCreatedById.ColumnName = "CreatedById";
				colvarCreatedById.DataType = DbType.String;
				colvarCreatedById.MaxLength = 50;
				colvarCreatedById.AutoIncrement = false;
				colvarCreatedById.IsNullable = false;
				colvarCreatedById.IsPrimaryKey = false;
				colvarCreatedById.IsForeignKey = false;
				colvarCreatedById.IsReadOnly = false;
				colvarCreatedById.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedById);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_Invoices",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_Invoice LoadFrom(AE_Invoice item)
		{
			AE_Invoice result = new AE_Invoice();
			if (item.InvoiceID != default(long)) {
				result.LoadByKey(item.InvoiceID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long InvoiceID {
			get { return GetColumnValue<long>(Columns.InvoiceID); }
			set {
				SetColumnValue(Columns.InvoiceID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceID));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public string InvoiceTypeId {
			get { return GetColumnValue<string>(Columns.InvoiceTypeId); }
			set {
				SetColumnValue(Columns.InvoiceTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceTypeId));
			}
		}
		[DataMember]
		public int? ContractId {
			get { return GetColumnValue<int?>(Columns.ContractId); }
			set {
				SetColumnValue(Columns.ContractId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractId));
			}
		}
		[DataMember]
		public int? TaxScheduleId {
			get { return GetColumnValue<int?>(Columns.TaxScheduleId); }
			set {
				SetColumnValue(Columns.TaxScheduleId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TaxScheduleId));
			}
		}
		[DataMember]
		public int? PaymentTermId {
			get { return GetColumnValue<int?>(Columns.PaymentTermId); }
			set {
				SetColumnValue(Columns.PaymentTermId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaymentTermId));
			}
		}
		[DataMember]
		public string DocDate {
			get { return GetColumnValue<string>(Columns.DocDate); }
			set {
				SetColumnValue(Columns.DocDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocDate));
			}
		}
		[DataMember]
		public string PostedDate {
			get { return GetColumnValue<string>(Columns.PostedDate); }
			set {
				SetColumnValue(Columns.PostedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostedDate));
			}
		}
		[DataMember]
		public string DueDate {
			get { return GetColumnValue<string>(Columns.DueDate); }
			set {
				SetColumnValue(Columns.DueDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DueDate));
			}
		}
		[DataMember]
		public string GLPostDate {
			get { return GetColumnValue<string>(Columns.GLPostDate); }
			set {
				SetColumnValue(Columns.GLPostDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GLPostDate));
			}
		}
		[DataMember]
		public decimal? CurrentTransactionAmount {
			get { return GetColumnValue<decimal?>(Columns.CurrentTransactionAmount); }
			set {
				SetColumnValue(Columns.CurrentTransactionAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CurrentTransactionAmount));
			}
		}
		[DataMember]
		public decimal SalesAmount {
			get { return GetColumnValue<decimal>(Columns.SalesAmount); }
			set {
				SetColumnValue(Columns.SalesAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesAmount));
			}
		}
		[DataMember]
		public decimal OriginalTransactionAmount {
			get { return GetColumnValue<decimal>(Columns.OriginalTransactionAmount); }
			set {
				SetColumnValue(Columns.OriginalTransactionAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OriginalTransactionAmount));
			}
		}
		[DataMember]
		public decimal CostAmount {
			get { return GetColumnValue<decimal>(Columns.CostAmount); }
			set {
				SetColumnValue(Columns.CostAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CostAmount));
			}
		}
		[DataMember]
		public decimal TaxAmount {
			get { return GetColumnValue<decimal>(Columns.TaxAmount); }
			set {
				SetColumnValue(Columns.TaxAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TaxAmount));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string ModifiedById {
			get { return GetColumnValue<string>(Columns.ModifiedById); }
			set {
				SetColumnValue(Columns.ModifiedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedById));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedById {
			get { return GetColumnValue<string>(Columns.CreatedById); }
			set {
				SetColumnValue(Columns.CreatedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedById));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Contract _Contract;
		//Relationship: FK_AE_Invoices_AE_Contracts
		public AE_Contract Contract
		{
			get
			{
				if(_Contract == null) {
					_Contract = AE_Contract.FetchByID(this.ContractId);
				}
				return _Contract;
			}
			set
			{
				SetColumnValue("ContractId", value.ContractID);
				_Contract = value;
			}
		}

		private AE_InvoiceType _InvoiceType;
		//Relationship: FK_AE_Invoices_AE_InvoiceTypes
		public AE_InvoiceType InvoiceType
		{
			get
			{
				if(_InvoiceType == null) {
					_InvoiceType = AE_InvoiceType.FetchByID(this.InvoiceTypeId);
				}
				return _InvoiceType;
			}
			set
			{
				SetColumnValue("InvoiceTypeId", value.InvoiceTypeID);
				_InvoiceType = value;
			}
		}

		private MC_Account _Account;
		//Relationship: FK_AE_Invoices_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return InvoiceID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn InvoiceIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn InvoiceTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ContractIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TaxScheduleIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn PaymentTermIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DocDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PostedDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DueDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn GLPostDateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CurrentTransactionAmountColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn SalesAmountColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn OriginalTransactionAmountColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CostAmountColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn TaxAmountColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ModifiedByIdColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn CreatedByIdColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[21]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string InvoiceID = @"InvoiceID";
			public static readonly string AccountId = @"AccountId";
			public static readonly string InvoiceTypeId = @"InvoiceTypeId";
			public static readonly string ContractId = @"ContractId";
			public static readonly string TaxScheduleId = @"TaxScheduleId";
			public static readonly string PaymentTermId = @"PaymentTermId";
			public static readonly string DocDate = @"DocDate";
			public static readonly string PostedDate = @"PostedDate";
			public static readonly string DueDate = @"DueDate";
			public static readonly string GLPostDate = @"GLPostDate";
			public static readonly string CurrentTransactionAmount = @"CurrentTransactionAmount";
			public static readonly string SalesAmount = @"SalesAmount";
			public static readonly string OriginalTransactionAmount = @"OriginalTransactionAmount";
			public static readonly string CostAmount = @"CostAmount";
			public static readonly string TaxAmount = @"TaxAmount";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string ModifiedById = @"ModifiedById";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedById = @"CreatedById";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return InvoiceID; }
		}
		*/

		#region Foreign Collections

		private AE_InvoiceItemCollection _AE_InvoiceItemsCol;
		//Relationship: FK_AE_InvoiceItems_AE_Invoices
		public AE_InvoiceItemCollection AE_InvoiceItemsCol
		{
			get
			{
				if(_AE_InvoiceItemsCol == null) {
					_AE_InvoiceItemsCol = new AE_InvoiceItemCollection();
					_AE_InvoiceItemsCol.LoadAndCloseReader(AE_InvoiceItem.Query()
						.WHERE(AE_InvoiceItem.Columns.InvoiceId, InvoiceID).ExecuteReader());
				}
				return _AE_InvoiceItemsCol;
			}
		}

		private AE_InvoicePaymentJoinCollection _AE_InvoicePaymentJoinsCol;
		//Relationship: FK_AE_InvoicePaymentJoins_AE_Invoices
		public AE_InvoicePaymentJoinCollection AE_InvoicePaymentJoinsCol
		{
			get
			{
				if(_AE_InvoicePaymentJoinsCol == null) {
					_AE_InvoicePaymentJoinsCol = new AE_InvoicePaymentJoinCollection();
					_AE_InvoicePaymentJoinsCol.LoadAndCloseReader(AE_InvoicePaymentJoin.Query()
						.WHERE(AE_InvoicePaymentJoin.Columns.InvoiceId, InvoiceID).ExecuteReader());
				}
				return _AE_InvoicePaymentJoinsCol;
			}
		}

		private MG_TransactionCollection _MG_TransactionsCol;
		//Relationship: FK_MG_Transactions_AE_Invoices
		public MG_TransactionCollection MG_TransactionsCol
		{
			get
			{
				if(_MG_TransactionsCol == null) {
					_MG_TransactionsCol = new MG_TransactionCollection();
					_MG_TransactionsCol.LoadAndCloseReader(MG_Transaction.Query()
						.WHERE(MG_Transaction.Columns.InvoiceId, InvoiceID).ExecuteReader());
				}
				return _MG_TransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_InvoiceTemplateItem class.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceTemplateItemCollection : ActiveList<AE_InvoiceTemplateItem, AE_InvoiceTemplateItemCollection>
	{
		public static AE_InvoiceTemplateItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_InvoiceTemplateItemCollection result = new AE_InvoiceTemplateItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_InvoiceTemplateItem item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_InvoiceTemplateItems table.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceTemplateItem : ActiveRecord<AE_InvoiceTemplateItem>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_InvoiceTemplateItem()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_InvoiceTemplateItems", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInvoiceTemplateItemID = new TableSchema.TableColumn(schema);
				colvarInvoiceTemplateItemID.ColumnName = "InvoiceTemplateItemID";
				colvarInvoiceTemplateItemID.DataType = DbType.Int64;
				colvarInvoiceTemplateItemID.MaxLength = 0;
				colvarInvoiceTemplateItemID.AutoIncrement = true;
				colvarInvoiceTemplateItemID.IsNullable = false;
				colvarInvoiceTemplateItemID.IsPrimaryKey = true;
				colvarInvoiceTemplateItemID.IsForeignKey = false;
				colvarInvoiceTemplateItemID.IsReadOnly = false;
				colvarInvoiceTemplateItemID.DefaultSetting = @"";
				colvarInvoiceTemplateItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceTemplateItemID);

				TableSchema.TableColumn colvarInvoiceTemplateId = new TableSchema.TableColumn(schema);
				colvarInvoiceTemplateId.ColumnName = "InvoiceTemplateId";
				colvarInvoiceTemplateId.DataType = DbType.Int64;
				colvarInvoiceTemplateId.MaxLength = 0;
				colvarInvoiceTemplateId.AutoIncrement = false;
				colvarInvoiceTemplateId.IsNullable = false;
				colvarInvoiceTemplateId.IsPrimaryKey = false;
				colvarInvoiceTemplateId.IsForeignKey = true;
				colvarInvoiceTemplateId.IsReadOnly = false;
				colvarInvoiceTemplateId.DefaultSetting = @"";
				colvarInvoiceTemplateId.ForeignKeyTableName = "AE_InvoiceTemplates";
				schema.Columns.Add(colvarInvoiceTemplateId);

				TableSchema.TableColumn colvarItemId = new TableSchema.TableColumn(schema);
				colvarItemId.ColumnName = "ItemId";
				colvarItemId.DataType = DbType.AnsiString;
				colvarItemId.MaxLength = 50;
				colvarItemId.AutoIncrement = false;
				colvarItemId.IsNullable = false;
				colvarItemId.IsPrimaryKey = false;
				colvarItemId.IsForeignKey = false;
				colvarItemId.IsReadOnly = false;
				colvarItemId.DefaultSetting = @"";
				colvarItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemId);

				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int16;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"((1))";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);

				TableSchema.TableColumn colvarSortOrder = new TableSchema.TableColumn(schema);
				colvarSortOrder.ColumnName = "SortOrder";
				colvarSortOrder.DataType = DbType.Int16;
				colvarSortOrder.MaxLength = 0;
				colvarSortOrder.AutoIncrement = false;
				colvarSortOrder.IsNullable = false;
				colvarSortOrder.IsPrimaryKey = false;
				colvarSortOrder.IsForeignKey = false;
				colvarSortOrder.IsReadOnly = false;
				colvarSortOrder.DefaultSetting = @"((1))";
				colvarSortOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSortOrder);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_InvoiceTemplateItems",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_InvoiceTemplateItem LoadFrom(AE_InvoiceTemplateItem item)
		{
			AE_InvoiceTemplateItem result = new AE_InvoiceTemplateItem();
			if (item.InvoiceTemplateItemID != default(long)) {
				result.LoadByKey(item.InvoiceTemplateItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long InvoiceTemplateItemID {
			get { return GetColumnValue<long>(Columns.InvoiceTemplateItemID); }
			set {
				SetColumnValue(Columns.InvoiceTemplateItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceTemplateItemID));
			}
		}
		[DataMember]
		public long InvoiceTemplateId {
			get { return GetColumnValue<long>(Columns.InvoiceTemplateId); }
			set {
				SetColumnValue(Columns.InvoiceTemplateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceTemplateId));
			}
		}
		[DataMember]
		public string ItemId {
			get { return GetColumnValue<string>(Columns.ItemId); }
			set {
				SetColumnValue(Columns.ItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemId));
			}
		}
		[DataMember]
		public short Quantity {
			get { return GetColumnValue<short>(Columns.Quantity); }
			set {
				SetColumnValue(Columns.Quantity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Quantity));
			}
		}
		[DataMember]
		public short SortOrder {
			get { return GetColumnValue<short>(Columns.SortOrder); }
			set {
				SetColumnValue(Columns.SortOrder, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SortOrder));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_InvoiceTemplate _InvoiceTemplate;
		//Relationship: FK_AE_InvoiceTemplateItems_AE_InvoiceTemplates
		public AE_InvoiceTemplate InvoiceTemplate
		{
			get
			{
				if(_InvoiceTemplate == null) {
					_InvoiceTemplate = AE_InvoiceTemplate.FetchByID(this.InvoiceTemplateId);
				}
				return _InvoiceTemplate;
			}
			set
			{
				SetColumnValue("InvoiceTemplateId", value.InvoiceTemplateID);
				_InvoiceTemplate = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return InvoiceTemplateItemID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn InvoiceTemplateItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn InvoiceTemplateIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ItemIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn QuantityColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SortOrderColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string InvoiceTemplateItemID = @"InvoiceTemplateItemID";
			public static readonly string InvoiceTemplateId = @"InvoiceTemplateId";
			public static readonly string ItemId = @"ItemId";
			public static readonly string Quantity = @"Quantity";
			public static readonly string SortOrder = @"SortOrder";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return InvoiceTemplateItemID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_InvoiceTemplate class.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceTemplateCollection : ActiveList<AE_InvoiceTemplate, AE_InvoiceTemplateCollection>
	{
		public static AE_InvoiceTemplateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_InvoiceTemplateCollection result = new AE_InvoiceTemplateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_InvoiceTemplate item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_InvoiceTemplates table.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceTemplate : ActiveRecord<AE_InvoiceTemplate>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_InvoiceTemplate()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_InvoiceTemplates", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInvoiceTemplateID = new TableSchema.TableColumn(schema);
				colvarInvoiceTemplateID.ColumnName = "InvoiceTemplateID";
				colvarInvoiceTemplateID.DataType = DbType.Int64;
				colvarInvoiceTemplateID.MaxLength = 0;
				colvarInvoiceTemplateID.AutoIncrement = true;
				colvarInvoiceTemplateID.IsNullable = false;
				colvarInvoiceTemplateID.IsPrimaryKey = true;
				colvarInvoiceTemplateID.IsForeignKey = false;
				colvarInvoiceTemplateID.IsReadOnly = false;
				colvarInvoiceTemplateID.DefaultSetting = @"";
				colvarInvoiceTemplateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceTemplateID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarActivationItemId = new TableSchema.TableColumn(schema);
				colvarActivationItemId.ColumnName = "ActivationItemId";
				colvarActivationItemId.DataType = DbType.AnsiString;
				colvarActivationItemId.MaxLength = 50;
				colvarActivationItemId.AutoIncrement = false;
				colvarActivationItemId.IsNullable = true;
				colvarActivationItemId.IsPrimaryKey = false;
				colvarActivationItemId.IsForeignKey = true;
				colvarActivationItemId.IsReadOnly = false;
				colvarActivationItemId.DefaultSetting = @"";
				colvarActivationItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarActivationItemId);

				TableSchema.TableColumn colvarActivationDiscountItemId = new TableSchema.TableColumn(schema);
				colvarActivationDiscountItemId.ColumnName = "ActivationDiscountItemId";
				colvarActivationDiscountItemId.DataType = DbType.AnsiString;
				colvarActivationDiscountItemId.MaxLength = 50;
				colvarActivationDiscountItemId.AutoIncrement = false;
				colvarActivationDiscountItemId.IsNullable = true;
				colvarActivationDiscountItemId.IsPrimaryKey = false;
				colvarActivationDiscountItemId.IsForeignKey = true;
				colvarActivationDiscountItemId.IsReadOnly = false;
				colvarActivationDiscountItemId.DefaultSetting = @"";
				colvarActivationDiscountItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarActivationDiscountItemId);

				TableSchema.TableColumn colvarMMRItemId = new TableSchema.TableColumn(schema);
				colvarMMRItemId.ColumnName = "MMRItemId";
				colvarMMRItemId.DataType = DbType.AnsiString;
				colvarMMRItemId.MaxLength = 50;
				colvarMMRItemId.AutoIncrement = false;
				colvarMMRItemId.IsNullable = true;
				colvarMMRItemId.IsPrimaryKey = false;
				colvarMMRItemId.IsForeignKey = true;
				colvarMMRItemId.IsReadOnly = false;
				colvarMMRItemId.DefaultSetting = @"";
				colvarMMRItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarMMRItemId);

				TableSchema.TableColumn colvarMMRDiscountItemId = new TableSchema.TableColumn(schema);
				colvarMMRDiscountItemId.ColumnName = "MMRDiscountItemId";
				colvarMMRDiscountItemId.DataType = DbType.AnsiString;
				colvarMMRDiscountItemId.MaxLength = 50;
				colvarMMRDiscountItemId.AutoIncrement = false;
				colvarMMRDiscountItemId.IsNullable = true;
				colvarMMRDiscountItemId.IsPrimaryKey = false;
				colvarMMRDiscountItemId.IsForeignKey = true;
				colvarMMRDiscountItemId.IsReadOnly = false;
				colvarMMRDiscountItemId.DefaultSetting = @"";
				colvarMMRDiscountItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarMMRDiscountItemId);

				TableSchema.TableColumn colvarActivationOverThreeMonthsId = new TableSchema.TableColumn(schema);
				colvarActivationOverThreeMonthsId.ColumnName = "ActivationOverThreeMonthsId";
				colvarActivationOverThreeMonthsId.DataType = DbType.AnsiString;
				colvarActivationOverThreeMonthsId.MaxLength = 50;
				colvarActivationOverThreeMonthsId.AutoIncrement = false;
				colvarActivationOverThreeMonthsId.IsNullable = true;
				colvarActivationOverThreeMonthsId.IsPrimaryKey = false;
				colvarActivationOverThreeMonthsId.IsForeignKey = true;
				colvarActivationOverThreeMonthsId.IsReadOnly = false;
				colvarActivationOverThreeMonthsId.DefaultSetting = @"";
				colvarActivationOverThreeMonthsId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarActivationOverThreeMonthsId);

				TableSchema.TableColumn colvarTemplateName = new TableSchema.TableColumn(schema);
				colvarTemplateName.ColumnName = "TemplateName";
				colvarTemplateName.DataType = DbType.String;
				colvarTemplateName.MaxLength = 50;
				colvarTemplateName.AutoIncrement = false;
				colvarTemplateName.IsNullable = true;
				colvarTemplateName.IsPrimaryKey = false;
				colvarTemplateName.IsForeignKey = false;
				colvarTemplateName.IsReadOnly = false;
				colvarTemplateName.DefaultSetting = @"";
				colvarTemplateName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTemplateName);

				TableSchema.TableColumn colvarActivationDiscountAmount = new TableSchema.TableColumn(schema);
				colvarActivationDiscountAmount.ColumnName = "ActivationDiscountAmount";
				colvarActivationDiscountAmount.DataType = DbType.Decimal;
				colvarActivationDiscountAmount.MaxLength = 0;
				colvarActivationDiscountAmount.AutoIncrement = false;
				colvarActivationDiscountAmount.IsNullable = false;
				colvarActivationDiscountAmount.IsPrimaryKey = false;
				colvarActivationDiscountAmount.IsForeignKey = false;
				colvarActivationDiscountAmount.IsReadOnly = false;
				colvarActivationDiscountAmount.DefaultSetting = @"";
				colvarActivationDiscountAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationDiscountAmount);

				TableSchema.TableColumn colvarMMRDiscountAmount = new TableSchema.TableColumn(schema);
				colvarMMRDiscountAmount.ColumnName = "MMRDiscountAmount";
				colvarMMRDiscountAmount.DataType = DbType.Decimal;
				colvarMMRDiscountAmount.MaxLength = 0;
				colvarMMRDiscountAmount.AutoIncrement = false;
				colvarMMRDiscountAmount.IsNullable = false;
				colvarMMRDiscountAmount.IsPrimaryKey = false;
				colvarMMRDiscountAmount.IsForeignKey = false;
				colvarMMRDiscountAmount.IsReadOnly = false;
				colvarMMRDiscountAmount.DefaultSetting = @"";
				colvarMMRDiscountAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMMRDiscountAmount);

				TableSchema.TableColumn colvarSystemPoints = new TableSchema.TableColumn(schema);
				colvarSystemPoints.ColumnName = "SystemPoints";
				colvarSystemPoints.DataType = DbType.Decimal;
				colvarSystemPoints.MaxLength = 0;
				colvarSystemPoints.AutoIncrement = false;
				colvarSystemPoints.IsNullable = false;
				colvarSystemPoints.IsPrimaryKey = false;
				colvarSystemPoints.IsForeignKey = false;
				colvarSystemPoints.IsReadOnly = false;
				colvarSystemPoints.DefaultSetting = @"";
				colvarSystemPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemPoints);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_InvoiceTemplates",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_InvoiceTemplate LoadFrom(AE_InvoiceTemplate item)
		{
			AE_InvoiceTemplate result = new AE_InvoiceTemplate();
			if (item.InvoiceTemplateID != default(long)) {
				result.LoadByKey(item.InvoiceTemplateID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long InvoiceTemplateID {
			get { return GetColumnValue<long>(Columns.InvoiceTemplateID); }
			set {
				SetColumnValue(Columns.InvoiceTemplateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceTemplateID));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string ActivationItemId {
			get { return GetColumnValue<string>(Columns.ActivationItemId); }
			set {
				SetColumnValue(Columns.ActivationItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationItemId));
			}
		}
		[DataMember]
		public string ActivationDiscountItemId {
			get { return GetColumnValue<string>(Columns.ActivationDiscountItemId); }
			set {
				SetColumnValue(Columns.ActivationDiscountItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationDiscountItemId));
			}
		}
		[DataMember]
		public string MMRItemId {
			get { return GetColumnValue<string>(Columns.MMRItemId); }
			set {
				SetColumnValue(Columns.MMRItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MMRItemId));
			}
		}
		[DataMember]
		public string MMRDiscountItemId {
			get { return GetColumnValue<string>(Columns.MMRDiscountItemId); }
			set {
				SetColumnValue(Columns.MMRDiscountItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MMRDiscountItemId));
			}
		}
		[DataMember]
		public string ActivationOverThreeMonthsId {
			get { return GetColumnValue<string>(Columns.ActivationOverThreeMonthsId); }
			set {
				SetColumnValue(Columns.ActivationOverThreeMonthsId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationOverThreeMonthsId));
			}
		}
		[DataMember]
		public string TemplateName {
			get { return GetColumnValue<string>(Columns.TemplateName); }
			set {
				SetColumnValue(Columns.TemplateName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TemplateName));
			}
		}
		[DataMember]
		public decimal ActivationDiscountAmount {
			get { return GetColumnValue<decimal>(Columns.ActivationDiscountAmount); }
			set {
				SetColumnValue(Columns.ActivationDiscountAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationDiscountAmount));
			}
		}
		[DataMember]
		public decimal MMRDiscountAmount {
			get { return GetColumnValue<decimal>(Columns.MMRDiscountAmount); }
			set {
				SetColumnValue(Columns.MMRDiscountAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MMRDiscountAmount));
			}
		}
		[DataMember]
		public decimal SystemPoints {
			get { return GetColumnValue<decimal>(Columns.SystemPoints); }
			set {
				SetColumnValue(Columns.SystemPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemPoints));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Dealer _Dealer;
		//Relationship: FK_AE_InvoiceTemplates_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		private AE_Item _ActivationItem;
		//Relationship: FK_AE_InvoiceTemplates_AE_Items
		public AE_Item ActivationItem
		{
			get
			{
				if(_ActivationItem == null) {
					_ActivationItem = AE_Item.FetchByID(this.ActivationItemId);
				}
				return _ActivationItem;
			}
			set
			{
				SetColumnValue("ActivationItemId", value.ItemID);
				_ActivationItem = value;
			}
		}

		private AE_Item _ActivationDiscountItem;
		//Relationship: FK_AE_InvoiceTemplates_AE_Items1
		public AE_Item ActivationDiscountItem
		{
			get
			{
				if(_ActivationDiscountItem == null) {
					_ActivationDiscountItem = AE_Item.FetchByID(this.ActivationDiscountItemId);
				}
				return _ActivationDiscountItem;
			}
			set
			{
				SetColumnValue("ActivationDiscountItemId", value.ItemID);
				_ActivationDiscountItem = value;
			}
		}

		private AE_Item _MMRItem;
		//Relationship: FK_AE_InvoiceTemplates_AE_Items2
		public AE_Item MMRItem
		{
			get
			{
				if(_MMRItem == null) {
					_MMRItem = AE_Item.FetchByID(this.MMRItemId);
				}
				return _MMRItem;
			}
			set
			{
				SetColumnValue("MMRItemId", value.ItemID);
				_MMRItem = value;
			}
		}

		private AE_Item _MMRDiscountItem;
		//Relationship: FK_AE_InvoiceTemplates_AE_Items3
		public AE_Item MMRDiscountItem
		{
			get
			{
				if(_MMRDiscountItem == null) {
					_MMRDiscountItem = AE_Item.FetchByID(this.MMRDiscountItemId);
				}
				return _MMRDiscountItem;
			}
			set
			{
				SetColumnValue("MMRDiscountItemId", value.ItemID);
				_MMRDiscountItem = value;
			}
		}

		private AE_Item _ActivationOverThreeMonths;
		//Relationship: FK_AE_InvoiceTemplates_AE_Items4
		public AE_Item ActivationOverThreeMonths
		{
			get
			{
				if(_ActivationOverThreeMonths == null) {
					_ActivationOverThreeMonths = AE_Item.FetchByID(this.ActivationOverThreeMonthsId);
				}
				return _ActivationOverThreeMonths;
			}
			set
			{
				SetColumnValue("ActivationOverThreeMonthsId", value.ItemID);
				_ActivationOverThreeMonths = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return InvoiceTemplateID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn InvoiceTemplateIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ActivationItemIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ActivationDiscountItemIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MMRItemIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MMRDiscountItemIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ActivationOverThreeMonthsIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn TemplateNameColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ActivationDiscountAmountColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn MMRDiscountAmountColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn SystemPointsColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[17]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string InvoiceTemplateID = @"InvoiceTemplateID";
			public static readonly string DealerId = @"DealerId";
			public static readonly string ActivationItemId = @"ActivationItemId";
			public static readonly string ActivationDiscountItemId = @"ActivationDiscountItemId";
			public static readonly string MMRItemId = @"MMRItemId";
			public static readonly string MMRDiscountItemId = @"MMRDiscountItemId";
			public static readonly string ActivationOverThreeMonthsId = @"ActivationOverThreeMonthsId";
			public static readonly string TemplateName = @"TemplateName";
			public static readonly string ActivationDiscountAmount = @"ActivationDiscountAmount";
			public static readonly string MMRDiscountAmount = @"MMRDiscountAmount";
			public static readonly string SystemPoints = @"SystemPoints";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return InvoiceTemplateID; }
		}
		*/

		#region Foreign Collections

		private AE_InvoiceTemplateItemCollection _AE_InvoiceTemplateItemsCol;
		//Relationship: FK_AE_InvoiceTemplateItems_AE_InvoiceTemplates
		public AE_InvoiceTemplateItemCollection AE_InvoiceTemplateItemsCol
		{
			get
			{
				if(_AE_InvoiceTemplateItemsCol == null) {
					_AE_InvoiceTemplateItemsCol = new AE_InvoiceTemplateItemCollection();
					_AE_InvoiceTemplateItemsCol.LoadAndCloseReader(AE_InvoiceTemplateItem.Query()
						.WHERE(AE_InvoiceTemplateItem.Columns.InvoiceTemplateId, InvoiceTemplateID).ExecuteReader());
				}
				return _AE_InvoiceTemplateItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_InvoiceType class.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceTypeCollection : ActiveList<AE_InvoiceType, AE_InvoiceTypeCollection>
	{
		public static AE_InvoiceTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_InvoiceTypeCollection result = new AE_InvoiceTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_InvoiceType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_InvoiceTypes table.
	/// </summary>
	[DataContract]
	public partial class AE_InvoiceType : ActiveRecord<AE_InvoiceType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Change_Of_ServiceID = "CHANGE_SERVICE";
			[EnumMember()] public const string Equipment_PullID = "EQM_PULL";
			[EnumMember()] public const string Equipment_SalesID = "EQM_SALE";
			[EnumMember()] public const string Setup_And_InstallationID = "INSTALL";
			[EnumMember()] public const string RefundID = "REFUND";
			[EnumMember()] public const string SaleID = "SALE";
			[EnumMember()] public const string Service_CallID = "SERV_CALL";
			[EnumMember()] public const string Service_Call_WarrantyID = "SERV_CALL_FREE";
			[EnumMember()] public const string Site_SurveyID = "SITE_SURVEY";
			[EnumMember()] public const string UpgradeID = "UPGRAGE";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_InvoiceType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_InvoiceTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInvoiceTypeID = new TableSchema.TableColumn(schema);
				colvarInvoiceTypeID.ColumnName = "InvoiceTypeID";
				colvarInvoiceTypeID.DataType = DbType.AnsiString;
				colvarInvoiceTypeID.MaxLength = 20;
				colvarInvoiceTypeID.AutoIncrement = false;
				colvarInvoiceTypeID.IsNullable = false;
				colvarInvoiceTypeID.IsPrimaryKey = true;
				colvarInvoiceTypeID.IsForeignKey = false;
				colvarInvoiceTypeID.IsReadOnly = false;
				colvarInvoiceTypeID.DefaultSetting = @"";
				colvarInvoiceTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceTypeID);

				TableSchema.TableColumn colvarInvoiceType = new TableSchema.TableColumn(schema);
				colvarInvoiceType.ColumnName = "InvoiceType";
				colvarInvoiceType.DataType = DbType.String;
				colvarInvoiceType.MaxLength = 50;
				colvarInvoiceType.AutoIncrement = false;
				colvarInvoiceType.IsNullable = false;
				colvarInvoiceType.IsPrimaryKey = false;
				colvarInvoiceType.IsForeignKey = false;
				colvarInvoiceType.IsReadOnly = false;
				colvarInvoiceType.DefaultSetting = @"";
				colvarInvoiceType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceType);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarModifiedById = new TableSchema.TableColumn(schema);
				colvarModifiedById.ColumnName = "ModifiedById";
				colvarModifiedById.DataType = DbType.String;
				colvarModifiedById.MaxLength = 50;
				colvarModifiedById.AutoIncrement = false;
				colvarModifiedById.IsNullable = false;
				colvarModifiedById.IsPrimaryKey = false;
				colvarModifiedById.IsForeignKey = false;
				colvarModifiedById.IsReadOnly = false;
				colvarModifiedById.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedById);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedById = new TableSchema.TableColumn(schema);
				colvarCreatedById.ColumnName = "CreatedById";
				colvarCreatedById.DataType = DbType.String;
				colvarCreatedById.MaxLength = 50;
				colvarCreatedById.AutoIncrement = false;
				colvarCreatedById.IsNullable = true;
				colvarCreatedById.IsPrimaryKey = false;
				colvarCreatedById.IsForeignKey = false;
				colvarCreatedById.IsReadOnly = false;
				colvarCreatedById.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedById);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_InvoiceTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_InvoiceType LoadFrom(AE_InvoiceType item)
		{
			AE_InvoiceType result = new AE_InvoiceType();
			if (item.InvoiceTypeID != default(string)) {
				result.LoadByKey(item.InvoiceTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string InvoiceTypeID {
			get { return GetColumnValue<string>(Columns.InvoiceTypeID); }
			set {
				SetColumnValue(Columns.InvoiceTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceTypeID));
			}
		}
		[DataMember]
		public string InvoiceType {
			get { return GetColumnValue<string>(Columns.InvoiceType); }
			set {
				SetColumnValue(Columns.InvoiceType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceType));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string ModifiedById {
			get { return GetColumnValue<string>(Columns.ModifiedById); }
			set {
				SetColumnValue(Columns.ModifiedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedById));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedById {
			get { return GetColumnValue<string>(Columns.CreatedById); }
			set {
				SetColumnValue(Columns.CreatedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedById));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return InvoiceType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn InvoiceTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn InvoiceTypeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string InvoiceTypeID = @"InvoiceTypeID";
			public static readonly string InvoiceType = @"InvoiceType";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string ModifiedById = @"ModifiedById";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedById = @"CreatedById";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return InvoiceTypeID; }
		}
		*/

		#region Foreign Collections

		private AE_InvoiceCollection _AE_InvoicesCol;
		//Relationship: FK_AE_Invoices_AE_InvoiceTypes
		public AE_InvoiceCollection AE_InvoicesCol
		{
			get
			{
				if(_AE_InvoicesCol == null) {
					_AE_InvoicesCol = new AE_InvoiceCollection();
					_AE_InvoicesCol.LoadAndCloseReader(AE_Invoice.Query()
						.WHERE(AE_Invoice.Columns.InvoiceTypeId, InvoiceTypeID).ExecuteReader());
				}
				return _AE_InvoicesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_ItemAccount class.
	/// </summary>
	[DataContract]
	public partial class AE_ItemAccountCollection : ActiveList<AE_ItemAccount, AE_ItemAccountCollection>
	{
		public static AE_ItemAccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ItemAccountCollection result = new AE_ItemAccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_ItemAccount item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_ItemAccounts table.
	/// </summary>
	[DataContract]
	public partial class AE_ItemAccount : ActiveRecord<AE_ItemAccount>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_ItemAccount()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_ItemAccounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarItemAccountID = new TableSchema.TableColumn(schema);
				colvarItemAccountID.ColumnName = "ItemAccountID";
				colvarItemAccountID.DataType = DbType.Int32;
				colvarItemAccountID.MaxLength = 0;
				colvarItemAccountID.AutoIncrement = true;
				colvarItemAccountID.IsNullable = false;
				colvarItemAccountID.IsPrimaryKey = true;
				colvarItemAccountID.IsForeignKey = false;
				colvarItemAccountID.IsReadOnly = false;
				colvarItemAccountID.DefaultSetting = @"";
				colvarItemAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemAccountID);

				TableSchema.TableColumn colvarItemId = new TableSchema.TableColumn(schema);
				colvarItemId.ColumnName = "ItemId";
				colvarItemId.DataType = DbType.AnsiString;
				colvarItemId.MaxLength = 50;
				colvarItemId.AutoIncrement = false;
				colvarItemId.IsNullable = false;
				colvarItemId.IsPrimaryKey = false;
				colvarItemId.IsForeignKey = true;
				colvarItemId.IsReadOnly = false;
				colvarItemId.DefaultSetting = @"";
				colvarItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarItemId);

				TableSchema.TableColumn colvarAccountTypeId = new TableSchema.TableColumn(schema);
				colvarAccountTypeId.ColumnName = "AccountTypeId";
				colvarAccountTypeId.DataType = DbType.AnsiString;
				colvarAccountTypeId.MaxLength = 20;
				colvarAccountTypeId.AutoIncrement = false;
				colvarAccountTypeId.IsNullable = false;
				colvarAccountTypeId.IsPrimaryKey = false;
				colvarAccountTypeId.IsForeignKey = true;
				colvarAccountTypeId.IsReadOnly = false;
				colvarAccountTypeId.DefaultSetting = @"";
				colvarAccountTypeId.ForeignKeyTableName = "MC_AccountTypes";
				schema.Columns.Add(colvarAccountTypeId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_ItemAccounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_ItemAccount LoadFrom(AE_ItemAccount item)
		{
			AE_ItemAccount result = new AE_ItemAccount();
			if (item.ItemAccountID != default(int)) {
				result.LoadByKey(item.ItemAccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ItemAccountID {
			get { return GetColumnValue<int>(Columns.ItemAccountID); }
			set {
				SetColumnValue(Columns.ItemAccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemAccountID));
			}
		}
		[DataMember]
		public string ItemId {
			get { return GetColumnValue<string>(Columns.ItemId); }
			set {
				SetColumnValue(Columns.ItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemId));
			}
		}
		[DataMember]
		public string AccountTypeId {
			get { return GetColumnValue<string>(Columns.AccountTypeId); }
			set {
				SetColumnValue(Columns.AccountTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountTypeId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Item _Item;
		//Relationship: FK_AE_ItemAccounts_AE_Items
		public AE_Item Item
		{
			get
			{
				if(_Item == null) {
					_Item = AE_Item.FetchByID(this.ItemId);
				}
				return _Item;
			}
			set
			{
				SetColumnValue("ItemId", value.ItemID);
				_Item = value;
			}
		}

		private MC_AccountType _AccountType;
		//Relationship: FK_AE_ItemAccounts_MC_AccountTypes
		public MC_AccountType AccountType
		{
			get
			{
				if(_AccountType == null) {
					_AccountType = MC_AccountType.FetchByID(this.AccountTypeId);
				}
				return _AccountType;
			}
			set
			{
				SetColumnValue("AccountTypeId", value.AccountTypeID);
				_AccountType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ItemId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ItemAccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ItemIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ItemAccountID = @"ItemAccountID";
			public static readonly string ItemId = @"ItemId";
			public static readonly string AccountTypeId = @"AccountTypeId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ItemAccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_ItemCrmOnly class.
	/// </summary>
	[DataContract]
	public partial class AE_ItemCrmOnlyCollection : ActiveList<AE_ItemCrmOnly, AE_ItemCrmOnlyCollection>
	{
		public static AE_ItemCrmOnlyCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ItemCrmOnlyCollection result = new AE_ItemCrmOnlyCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_ItemCrmOnly item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_ItemCrmOnlys table.
	/// </summary>
	[DataContract]
	public partial class AE_ItemCrmOnly : ActiveRecord<AE_ItemCrmOnly>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_ItemCrmOnly()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_ItemCrmOnlys", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarItemID = new TableSchema.TableColumn(schema);
				colvarItemID.ColumnName = "ItemID";
				colvarItemID.DataType = DbType.AnsiString;
				colvarItemID.MaxLength = 50;
				colvarItemID.AutoIncrement = false;
				colvarItemID.IsNullable = false;
				colvarItemID.IsPrimaryKey = true;
				colvarItemID.IsForeignKey = false;
				colvarItemID.IsReadOnly = false;
				colvarItemID.DefaultSetting = @"";
				colvarItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_ItemCrmOnlys",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_ItemCrmOnly LoadFrom(AE_ItemCrmOnly item)
		{
			AE_ItemCrmOnly result = new AE_ItemCrmOnly();
			if (item.ItemID != default(string)) {
				result.LoadByKey(item.ItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ItemID {
			get { return GetColumnValue<string>(Columns.ItemID); }
			set {
				SetColumnValue(Columns.ItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Item _Item;
		//Relationship: FK_AE_ItemCrmOnlys_AE_Items
		public AE_Item Item
		{
			get
			{
				if(_Item == null) {
					_Item = AE_Item.FetchByID(this.ItemID);
				}
				return _Item;
			}
			set
			{
				SetColumnValue("ItemID", value.ItemID);
				_Item = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ItemID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ItemID = @"ItemID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ItemID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_ItemInterim class.
	/// </summary>
	[DataContract]
	public partial class AE_ItemInterimCollection : ActiveList<AE_ItemInterim, AE_ItemInterimCollection>
	{
		public static AE_ItemInterimCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ItemInterimCollection result = new AE_ItemInterimCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_ItemInterim item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_ItemInterims table.
	/// </summary>
	[DataContract]
	public partial class AE_ItemInterim : ActiveRecord<AE_ItemInterim>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_ItemInterim()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_ItemInterims", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarItemID = new TableSchema.TableColumn(schema);
				colvarItemID.ColumnName = "ItemID";
				colvarItemID.DataType = DbType.AnsiString;
				colvarItemID.MaxLength = 50;
				colvarItemID.AutoIncrement = false;
				colvarItemID.IsNullable = false;
				colvarItemID.IsPrimaryKey = true;
				colvarItemID.IsForeignKey = false;
				colvarItemID.IsReadOnly = false;
				colvarItemID.DefaultSetting = @"";
				colvarItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_ItemInterims",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_ItemInterim LoadFrom(AE_ItemInterim item)
		{
			AE_ItemInterim result = new AE_ItemInterim();
			if (item.ItemID != default(string)) {
				result.LoadByKey(item.ItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ItemID {
			get { return GetColumnValue<string>(Columns.ItemID); }
			set {
				SetColumnValue(Columns.ItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Item _Item;
		//Relationship: FK_AE_ItemInterims_AE_Items
		public AE_Item Item
		{
			get
			{
				if(_Item == null) {
					_Item = AE_Item.FetchByID(this.ItemID);
				}
				return _Item;
			}
			set
			{
				SetColumnValue("ItemID", value.ItemID);
				_Item = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ItemID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ItemID = @"ItemID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ItemID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_Item class.
	/// </summary>
	[DataContract]
	public partial class AE_ItemCollection : ActiveList<AE_Item, AE_ItemCollection>
	{
		public static AE_ItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ItemCollection result = new AE_ItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_Item item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_Items table.
	/// </summary>
	[DataContract]
	public partial class AE_Item : ActiveRecord<AE_Item>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_Item()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_Items", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarItemID = new TableSchema.TableColumn(schema);
				colvarItemID.ColumnName = "ItemID";
				colvarItemID.DataType = DbType.AnsiString;
				colvarItemID.MaxLength = 50;
				colvarItemID.AutoIncrement = false;
				colvarItemID.IsNullable = false;
				colvarItemID.IsPrimaryKey = true;
				colvarItemID.IsForeignKey = false;
				colvarItemID.IsReadOnly = false;
				colvarItemID.DefaultSetting = @"";
				colvarItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemID);

				TableSchema.TableColumn colvarItemTypeId = new TableSchema.TableColumn(schema);
				colvarItemTypeId.ColumnName = "ItemTypeId";
				colvarItemTypeId.DataType = DbType.AnsiString;
				colvarItemTypeId.MaxLength = 50;
				colvarItemTypeId.AutoIncrement = false;
				colvarItemTypeId.IsNullable = false;
				colvarItemTypeId.IsPrimaryKey = false;
				colvarItemTypeId.IsForeignKey = true;
				colvarItemTypeId.IsReadOnly = false;
				colvarItemTypeId.DefaultSetting = @"";
				colvarItemTypeId.ForeignKeyTableName = "AE_ItemTypes";
				schema.Columns.Add(colvarItemTypeId);

				TableSchema.TableColumn colvarTaxOptionId = new TableSchema.TableColumn(schema);
				colvarTaxOptionId.ColumnName = "TaxOptionId";
				colvarTaxOptionId.DataType = DbType.AnsiStringFixedLength;
				colvarTaxOptionId.MaxLength = 3;
				colvarTaxOptionId.AutoIncrement = false;
				colvarTaxOptionId.IsNullable = false;
				colvarTaxOptionId.IsPrimaryKey = false;
				colvarTaxOptionId.IsForeignKey = true;
				colvarTaxOptionId.IsReadOnly = false;
				colvarTaxOptionId.DefaultSetting = @"";
				colvarTaxOptionId.ForeignKeyTableName = "AE_TaxOptions";
				schema.Columns.Add(colvarTaxOptionId);

				TableSchema.TableColumn colvarAccountZoneTypeId = new TableSchema.TableColumn(schema);
				colvarAccountZoneTypeId.ColumnName = "AccountZoneTypeId";
				colvarAccountZoneTypeId.DataType = DbType.AnsiString;
				colvarAccountZoneTypeId.MaxLength = 10;
				colvarAccountZoneTypeId.AutoIncrement = false;
				colvarAccountZoneTypeId.IsNullable = false;
				colvarAccountZoneTypeId.IsPrimaryKey = false;
				colvarAccountZoneTypeId.IsForeignKey = true;
				colvarAccountZoneTypeId.IsReadOnly = false;
				colvarAccountZoneTypeId.DefaultSetting = @"('NOZONE')";
				colvarAccountZoneTypeId.ForeignKeyTableName = "MS_AccountZoneTypes";
				schema.Columns.Add(colvarAccountZoneTypeId);

				TableSchema.TableColumn colvarVerticalId = new TableSchema.TableColumn(schema);
				colvarVerticalId.ColumnName = "VerticalId";
				colvarVerticalId.DataType = DbType.AnsiString;
				colvarVerticalId.MaxLength = 50;
				colvarVerticalId.AutoIncrement = false;
				colvarVerticalId.IsNullable = true;
				colvarVerticalId.IsPrimaryKey = false;
				colvarVerticalId.IsForeignKey = false;
				colvarVerticalId.IsReadOnly = false;
				colvarVerticalId.DefaultSetting = @"";
				colvarVerticalId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVerticalId);

				TableSchema.TableColumn colvarModelNumber = new TableSchema.TableColumn(schema);
				colvarModelNumber.ColumnName = "ModelNumber";
				colvarModelNumber.DataType = DbType.AnsiString;
				colvarModelNumber.MaxLength = 30;
				colvarModelNumber.AutoIncrement = false;
				colvarModelNumber.IsNullable = true;
				colvarModelNumber.IsPrimaryKey = false;
				colvarModelNumber.IsForeignKey = false;
				colvarModelNumber.IsReadOnly = false;
				colvarModelNumber.DefaultSetting = @"";
				colvarModelNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModelNumber);

				TableSchema.TableColumn colvarItemSKU = new TableSchema.TableColumn(schema);
				colvarItemSKU.ColumnName = "ItemSKU";
				colvarItemSKU.DataType = DbType.String;
				colvarItemSKU.MaxLength = 50;
				colvarItemSKU.AutoIncrement = false;
				colvarItemSKU.IsNullable = true;
				colvarItemSKU.IsPrimaryKey = false;
				colvarItemSKU.IsForeignKey = false;
				colvarItemSKU.IsReadOnly = false;
				colvarItemSKU.DefaultSetting = @"";
				colvarItemSKU.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemSKU);

				TableSchema.TableColumn colvarItemDesc = new TableSchema.TableColumn(schema);
				colvarItemDesc.ColumnName = "ItemDesc";
				colvarItemDesc.DataType = DbType.String;
				colvarItemDesc.MaxLength = 136;
				colvarItemDesc.AutoIncrement = false;
				colvarItemDesc.IsNullable = false;
				colvarItemDesc.IsPrimaryKey = false;
				colvarItemDesc.IsForeignKey = false;
				colvarItemDesc.IsReadOnly = false;
				colvarItemDesc.DefaultSetting = @"";
				colvarItemDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemDesc);

				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "Price";
				colvarPrice.DataType = DbType.Currency;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = false;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"((0))";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);

				TableSchema.TableColumn colvarCost = new TableSchema.TableColumn(schema);
				colvarCost.ColumnName = "Cost";
				colvarCost.DataType = DbType.Currency;
				colvarCost.MaxLength = 0;
				colvarCost.AutoIncrement = false;
				colvarCost.IsNullable = false;
				colvarCost.IsPrimaryKey = false;
				colvarCost.IsForeignKey = false;
				colvarCost.IsReadOnly = false;
				colvarCost.DefaultSetting = @"((0))";
				colvarCost.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCost);

				TableSchema.TableColumn colvarSystemPoints = new TableSchema.TableColumn(schema);
				colvarSystemPoints.ColumnName = "SystemPoints";
				colvarSystemPoints.DataType = DbType.Decimal;
				colvarSystemPoints.MaxLength = 0;
				colvarSystemPoints.AutoIncrement = false;
				colvarSystemPoints.IsNullable = false;
				colvarSystemPoints.IsPrimaryKey = false;
				colvarSystemPoints.IsForeignKey = false;
				colvarSystemPoints.IsReadOnly = false;
				colvarSystemPoints.DefaultSetting = @"((0))";
				colvarSystemPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemPoints);

				TableSchema.TableColumn colvarIsCatalogItem = new TableSchema.TableColumn(schema);
				colvarIsCatalogItem.ColumnName = "IsCatalogItem";
				colvarIsCatalogItem.DataType = DbType.Boolean;
				colvarIsCatalogItem.MaxLength = 0;
				colvarIsCatalogItem.AutoIncrement = false;
				colvarIsCatalogItem.IsNullable = false;
				colvarIsCatalogItem.IsPrimaryKey = false;
				colvarIsCatalogItem.IsForeignKey = false;
				colvarIsCatalogItem.IsReadOnly = false;
				colvarIsCatalogItem.DefaultSetting = @"((0))";
				colvarIsCatalogItem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCatalogItem);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_Items",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_Item LoadFrom(AE_Item item)
		{
			AE_Item result = new AE_Item();
			if (item.ItemID != default(string)) {
				result.LoadByKey(item.ItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ItemID {
			get { return GetColumnValue<string>(Columns.ItemID); }
			set {
				SetColumnValue(Columns.ItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemID));
			}
		}
		[DataMember]
		public string ItemTypeId {
			get { return GetColumnValue<string>(Columns.ItemTypeId); }
			set {
				SetColumnValue(Columns.ItemTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemTypeId));
			}
		}
		[DataMember]
		public string TaxOptionId {
			get { return GetColumnValue<string>(Columns.TaxOptionId); }
			set {
				SetColumnValue(Columns.TaxOptionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TaxOptionId));
			}
		}
		[DataMember]
		public string AccountZoneTypeId {
			get { return GetColumnValue<string>(Columns.AccountZoneTypeId); }
			set {
				SetColumnValue(Columns.AccountZoneTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountZoneTypeId));
			}
		}
		[DataMember]
		public string VerticalId {
			get { return GetColumnValue<string>(Columns.VerticalId); }
			set {
				SetColumnValue(Columns.VerticalId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VerticalId));
			}
		}
		[DataMember]
		public string ModelNumber {
			get { return GetColumnValue<string>(Columns.ModelNumber); }
			set {
				SetColumnValue(Columns.ModelNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModelNumber));
			}
		}
		[DataMember]
		public string ItemSKU {
			get { return GetColumnValue<string>(Columns.ItemSKU); }
			set {
				SetColumnValue(Columns.ItemSKU, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemSKU));
			}
		}
		[DataMember]
		public string ItemDesc {
			get { return GetColumnValue<string>(Columns.ItemDesc); }
			set {
				SetColumnValue(Columns.ItemDesc, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemDesc));
			}
		}
		[DataMember]
		public decimal Price {
			get { return GetColumnValue<decimal>(Columns.Price); }
			set {
				SetColumnValue(Columns.Price, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Price));
			}
		}
		[DataMember]
		public decimal Cost {
			get { return GetColumnValue<decimal>(Columns.Cost); }
			set {
				SetColumnValue(Columns.Cost, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Cost));
			}
		}
		[DataMember]
		public decimal SystemPoints {
			get { return GetColumnValue<decimal>(Columns.SystemPoints); }
			set {
				SetColumnValue(Columns.SystemPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemPoints));
			}
		}
		[DataMember]
		public bool IsCatalogItem {
			get { return GetColumnValue<bool>(Columns.IsCatalogItem); }
			set {
				SetColumnValue(Columns.IsCatalogItem, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCatalogItem));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_TaxOption _TaxOption;
		//Relationship: FK_AE_Items_AE_TaxOptions
		public AE_TaxOption TaxOption
		{
			get
			{
				if(_TaxOption == null) {
					_TaxOption = AE_TaxOption.FetchByID(this.TaxOptionId);
				}
				return _TaxOption;
			}
			set
			{
				SetColumnValue("TaxOptionId", value.TaxOptionID);
				_TaxOption = value;
			}
		}

		private MS_AccountZoneType _AccountZoneType;
		//Relationship: FK_AE_Items_MS_AccountZoneTypes
		public MS_AccountZoneType AccountZoneType
		{
			get
			{
				if(_AccountZoneType == null) {
					_AccountZoneType = MS_AccountZoneType.FetchByID(this.AccountZoneTypeId);
				}
				return _AccountZoneType;
			}
			set
			{
				SetColumnValue("AccountZoneTypeId", value.AccountZoneTypeID);
				_AccountZoneType = value;
			}
		}

		private AE_ItemType _ItemType;
		//Relationship: FK_AE_Parts_AE_ItemTypes
		public AE_ItemType ItemType
		{
			get
			{
				if(_ItemType == null) {
					_ItemType = AE_ItemType.FetchByID(this.ItemTypeId);
				}
				return _ItemType;
			}
			set
			{
				SetColumnValue("ItemTypeId", value.ItemTypeID);
				_ItemType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ItemTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ItemTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TaxOptionIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountZoneTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn VerticalIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModelNumberColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ItemSKUColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ItemDescColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PriceColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CostColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn SystemPointsColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsCatalogItemColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[19]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ItemID = @"ItemID";
			public static readonly string ItemTypeId = @"ItemTypeId";
			public static readonly string TaxOptionId = @"TaxOptionId";
			public static readonly string AccountZoneTypeId = @"AccountZoneTypeId";
			public static readonly string VerticalId = @"VerticalId";
			public static readonly string ModelNumber = @"ModelNumber";
			public static readonly string ItemSKU = @"ItemSKU";
			public static readonly string ItemDesc = @"ItemDesc";
			public static readonly string Price = @"Price";
			public static readonly string Cost = @"Cost";
			public static readonly string SystemPoints = @"SystemPoints";
			public static readonly string IsCatalogItem = @"IsCatalogItem";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ItemID; }
		}
		*/

		#region Foreign Collections

		private AE_InvoiceItemCollection _AE_InvoiceItemsCol;
		//Relationship: FK_AE_InvoiceItems_AE_Items
		public AE_InvoiceItemCollection AE_InvoiceItemsCol
		{
			get
			{
				if(_AE_InvoiceItemsCol == null) {
					_AE_InvoiceItemsCol = new AE_InvoiceItemCollection();
					_AE_InvoiceItemsCol.LoadAndCloseReader(AE_InvoiceItem.Query()
						.WHERE(AE_InvoiceItem.Columns.ItemId, ItemID).ExecuteReader());
				}
				return _AE_InvoiceItemsCol;
			}
		}

		private AE_InvoiceTemplateCollection _AE_InvoiceTemplatesCol;
		//Relationship: FK_AE_InvoiceTemplates_AE_Items
		public AE_InvoiceTemplateCollection AE_InvoiceTemplatesCol
		{
			get
			{
				if(_AE_InvoiceTemplatesCol == null) {
					_AE_InvoiceTemplatesCol = new AE_InvoiceTemplateCollection();
					_AE_InvoiceTemplatesCol.LoadAndCloseReader(AE_InvoiceTemplate.Query()
						.WHERE(AE_InvoiceTemplate.Columns.ActivationItemId, ItemID).ExecuteReader());
				}
				return _AE_InvoiceTemplatesCol;
			}
		}

		private AE_InvoiceTemplateCollection _AE_InvoiceTemplates02Col;
		//Relationship: FK_AE_InvoiceTemplates_AE_Items1
		public AE_InvoiceTemplateCollection AE_InvoiceTemplates02Col
		{
			get
			{
				if(_AE_InvoiceTemplates02Col == null) {
					_AE_InvoiceTemplates02Col = new AE_InvoiceTemplateCollection();
					_AE_InvoiceTemplates02Col.LoadAndCloseReader(AE_InvoiceTemplate.Query()
						.WHERE(AE_InvoiceTemplate.Columns.ActivationDiscountItemId, ItemID).ExecuteReader());
				}
				return _AE_InvoiceTemplates02Col;
			}
		}

		private AE_InvoiceTemplateCollection _AE_InvoiceTemplates03Col;
		//Relationship: FK_AE_InvoiceTemplates_AE_Items2
		public AE_InvoiceTemplateCollection AE_InvoiceTemplates03Col
		{
			get
			{
				if(_AE_InvoiceTemplates03Col == null) {
					_AE_InvoiceTemplates03Col = new AE_InvoiceTemplateCollection();
					_AE_InvoiceTemplates03Col.LoadAndCloseReader(AE_InvoiceTemplate.Query()
						.WHERE(AE_InvoiceTemplate.Columns.MMRItemId, ItemID).ExecuteReader());
				}
				return _AE_InvoiceTemplates03Col;
			}
		}

		private AE_InvoiceTemplateCollection _AE_InvoiceTemplates04Col;
		//Relationship: FK_AE_InvoiceTemplates_AE_Items3
		public AE_InvoiceTemplateCollection AE_InvoiceTemplates04Col
		{
			get
			{
				if(_AE_InvoiceTemplates04Col == null) {
					_AE_InvoiceTemplates04Col = new AE_InvoiceTemplateCollection();
					_AE_InvoiceTemplates04Col.LoadAndCloseReader(AE_InvoiceTemplate.Query()
						.WHERE(AE_InvoiceTemplate.Columns.MMRDiscountItemId, ItemID).ExecuteReader());
				}
				return _AE_InvoiceTemplates04Col;
			}
		}

		private AE_InvoiceTemplateCollection _AE_InvoiceTemplates05Col;
		//Relationship: FK_AE_InvoiceTemplates_AE_Items4
		public AE_InvoiceTemplateCollection AE_InvoiceTemplates05Col
		{
			get
			{
				if(_AE_InvoiceTemplates05Col == null) {
					_AE_InvoiceTemplates05Col = new AE_InvoiceTemplateCollection();
					_AE_InvoiceTemplates05Col.LoadAndCloseReader(AE_InvoiceTemplate.Query()
						.WHERE(AE_InvoiceTemplate.Columns.ActivationOverThreeMonthsId, ItemID).ExecuteReader());
				}
				return _AE_InvoiceTemplates05Col;
			}
		}

		private AE_ItemAccountCollection _AE_ItemAccountsCol;
		//Relationship: FK_AE_ItemAccounts_AE_Items
		public AE_ItemAccountCollection AE_ItemAccountsCol
		{
			get
			{
				if(_AE_ItemAccountsCol == null) {
					_AE_ItemAccountsCol = new AE_ItemAccountCollection();
					_AE_ItemAccountsCol.LoadAndCloseReader(AE_ItemAccount.Query()
						.WHERE(AE_ItemAccount.Columns.ItemId, ItemID).ExecuteReader());
				}
				return _AE_ItemAccountsCol;
			}
		}

		private AE_ItemCrmOnlyCollection _AE_ItemCrmOnliesCol;
		//Relationship: FK_AE_ItemCrmOnlys_AE_Items
		public AE_ItemCrmOnlyCollection AE_ItemCrmOnliesCol
		{
			get
			{
				if(_AE_ItemCrmOnliesCol == null) {
					_AE_ItemCrmOnliesCol = new AE_ItemCrmOnlyCollection();
					_AE_ItemCrmOnliesCol.LoadAndCloseReader(AE_ItemCrmOnly.Query()
						.WHERE(AE_ItemCrmOnly.Columns.ItemID, ItemID).ExecuteReader());
				}
				return _AE_ItemCrmOnliesCol;
			}
		}

		private AE_ItemInterimCollection _AE_ItemInterimsCol;
		//Relationship: FK_AE_ItemInterims_AE_Items
		public AE_ItemInterimCollection AE_ItemInterimsCol
		{
			get
			{
				if(_AE_ItemInterimsCol == null) {
					_AE_ItemInterimsCol = new AE_ItemInterimCollection();
					_AE_ItemInterimsCol.LoadAndCloseReader(AE_ItemInterim.Query()
						.WHERE(AE_ItemInterim.Columns.ItemID, ItemID).ExecuteReader());
				}
				return _AE_ItemInterimsCol;
			}
		}

		private GS_AccountCollection _GS_AccountsCol;
		//Relationship: FK_GS_Accounts_AE_Items
		public GS_AccountCollection GS_AccountsCol
		{
			get
			{
				if(_GS_AccountsCol == null) {
					_GS_AccountsCol = new GS_AccountCollection();
					_GS_AccountsCol.LoadAndCloseReader(GS_Account.Query()
						.WHERE(GS_Account.Columns.InvItemId, ItemID).ExecuteReader());
				}
				return _GS_AccountsCol;
			}
		}

		private IE_PackingSlipItemCollection _IE_PackingSlipItemsCol;
		//Relationship: FK_IE_PackingSlipItems_AE_Items
		public IE_PackingSlipItemCollection IE_PackingSlipItemsCol
		{
			get
			{
				if(_IE_PackingSlipItemsCol == null) {
					_IE_PackingSlipItemsCol = new IE_PackingSlipItemCollection();
					_IE_PackingSlipItemsCol.LoadAndCloseReader(IE_PackingSlipItem.Query()
						.WHERE(IE_PackingSlipItem.Columns.ItemId, ItemID).ExecuteReader());
				}
				return _IE_PackingSlipItemsCol;
			}
		}

		private IE_PurchaseOrderItemCollection _IE_PurchaseOrderItemsCol;
		//Relationship: FK_IE_PurchaseOrderItems_AE_Items
		public IE_PurchaseOrderItemCollection IE_PurchaseOrderItemsCol
		{
			get
			{
				if(_IE_PurchaseOrderItemsCol == null) {
					_IE_PurchaseOrderItemsCol = new IE_PurchaseOrderItemCollection();
					_IE_PurchaseOrderItemsCol.LoadAndCloseReader(IE_PurchaseOrderItem.Query()
						.WHERE(IE_PurchaseOrderItem.Columns.ItemId, ItemID).ExecuteReader());
				}
				return _IE_PurchaseOrderItemsCol;
			}
		}

		private IE_StockingLevelCollection _IE_StockingLevelsCol;
		//Relationship: FK_IE_StockingLevels_AE_Items
		public IE_StockingLevelCollection IE_StockingLevelsCol
		{
			get
			{
				if(_IE_StockingLevelsCol == null) {
					_IE_StockingLevelsCol = new IE_StockingLevelCollection();
					_IE_StockingLevelsCol.LoadAndCloseReader(IE_StockingLevel.Query()
						.WHERE(IE_StockingLevel.Columns.ItemId, ItemID).ExecuteReader());
				}
				return _IE_StockingLevelsCol;
			}
		}

		private MS_AccountCollection _MS_AccountsCol;
		//Relationship: FK_MS_Accounts_AE_Items
		public MS_AccountCollection MS_AccountsCol
		{
			get
			{
				if(_MS_AccountsCol == null) {
					_MS_AccountsCol = new MS_AccountCollection();
					_MS_AccountsCol.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.PanelItemId, ItemID).ExecuteReader());
				}
				return _MS_AccountsCol;
			}
		}

		private MS_AccountCollection _MS_Accounts02Col;
		//Relationship: FK_MS_Accounts_AE_Items1
		public MS_AccountCollection MS_Accounts02Col
		{
			get
			{
				if(_MS_Accounts02Col == null) {
					_MS_Accounts02Col = new MS_AccountCollection();
					_MS_Accounts02Col.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.CellPackageItemId, ItemID).ExecuteReader());
				}
				return _MS_Accounts02Col;
			}
		}

		private MS_AvantGuardSystemTypeCodeCollection _MS_AvantGuardSystemTypeCodesCol;
		//Relationship: FK_MS_AvantGuardSystemTypeCodes_AE_Items
		public MS_AvantGuardSystemTypeCodeCollection MS_AvantGuardSystemTypeCodesCol
		{
			get
			{
				if(_MS_AvantGuardSystemTypeCodesCol == null) {
					_MS_AvantGuardSystemTypeCodesCol = new MS_AvantGuardSystemTypeCodeCollection();
					_MS_AvantGuardSystemTypeCodesCol.LoadAndCloseReader(MS_AvantGuardSystemTypeCode.Query()
						.WHERE(MS_AvantGuardSystemTypeCode.Columns.ItemId, ItemID).ExecuteReader());
				}
				return _MS_AvantGuardSystemTypeCodesCol;
			}
		}

		private MS_EquipmentCollection _MS_EquipmentsCol;
		//Relationship: FK_MS_Equipments_AE_Items
		public MS_EquipmentCollection MS_EquipmentsCol
		{
			get
			{
				if(_MS_EquipmentsCol == null) {
					_MS_EquipmentsCol = new MS_EquipmentCollection();
					_MS_EquipmentsCol.LoadAndCloseReader(MS_Equipment.Query()
						.WHERE(MS_Equipment.Columns.EquipmentID, ItemID).ExecuteReader());
				}
				return _MS_EquipmentsCol;
			}
		}

		private MS_VendorAlarmComPackageCollection _MS_VendorAlarmComPackagesCol;
		//Relationship: FK_MS_VendorAlarmComPackages_AE_Items
		public MS_VendorAlarmComPackageCollection MS_VendorAlarmComPackagesCol
		{
			get
			{
				if(_MS_VendorAlarmComPackagesCol == null) {
					_MS_VendorAlarmComPackagesCol = new MS_VendorAlarmComPackageCollection();
					_MS_VendorAlarmComPackagesCol.LoadAndCloseReader(MS_VendorAlarmComPackage.Query()
						.WHERE(MS_VendorAlarmComPackage.Columns.ItemId, ItemID).ExecuteReader());
				}
				return _MS_VendorAlarmComPackagesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_ITEMS_NEW class.
	/// </summary>
	[DataContract]
	public partial class AE_ITEMS_NEWCollection : ActiveList<AE_ITEMS_NEW, AE_ITEMS_NEWCollection>
	{
		public static AE_ITEMS_NEWCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ITEMS_NEWCollection result = new AE_ITEMS_NEWCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_ITEMS_NEW item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_ITEMS_NEW table.
	/// </summary>
	[DataContract]
	public partial class AE_ITEMS_NEW : ActiveRecord<AE_ITEMS_NEW>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_ITEMS_NEW()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_ITEMS_NEW", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarItemID = new TableSchema.TableColumn(schema);
				colvarItemID.ColumnName = "ItemID";
				colvarItemID.DataType = DbType.AnsiString;
				colvarItemID.MaxLength = 50;
				colvarItemID.AutoIncrement = false;
				colvarItemID.IsNullable = false;
				colvarItemID.IsPrimaryKey = false;
				colvarItemID.IsForeignKey = false;
				colvarItemID.IsReadOnly = false;
				colvarItemID.DefaultSetting = @"";
				colvarItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemID);

				TableSchema.TableColumn colvarItemTypeId = new TableSchema.TableColumn(schema);
				colvarItemTypeId.ColumnName = "ItemTypeId";
				colvarItemTypeId.DataType = DbType.AnsiString;
				colvarItemTypeId.MaxLength = 50;
				colvarItemTypeId.AutoIncrement = false;
				colvarItemTypeId.IsNullable = false;
				colvarItemTypeId.IsPrimaryKey = false;
				colvarItemTypeId.IsForeignKey = false;
				colvarItemTypeId.IsReadOnly = false;
				colvarItemTypeId.DefaultSetting = @"";
				colvarItemTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemTypeId);

				TableSchema.TableColumn colvarTaxOptionId = new TableSchema.TableColumn(schema);
				colvarTaxOptionId.ColumnName = "TaxOptionId";
				colvarTaxOptionId.DataType = DbType.AnsiStringFixedLength;
				colvarTaxOptionId.MaxLength = 3;
				colvarTaxOptionId.AutoIncrement = false;
				colvarTaxOptionId.IsNullable = false;
				colvarTaxOptionId.IsPrimaryKey = false;
				colvarTaxOptionId.IsForeignKey = true;
				colvarTaxOptionId.IsReadOnly = false;
				colvarTaxOptionId.DefaultSetting = @"";
				colvarTaxOptionId.ForeignKeyTableName = "AE_TaxOptions";
				schema.Columns.Add(colvarTaxOptionId);

				TableSchema.TableColumn colvarAccountZoneTypeId = new TableSchema.TableColumn(schema);
				colvarAccountZoneTypeId.ColumnName = "AccountZoneTypeId";
				colvarAccountZoneTypeId.DataType = DbType.AnsiString;
				colvarAccountZoneTypeId.MaxLength = 10;
				colvarAccountZoneTypeId.AutoIncrement = false;
				colvarAccountZoneTypeId.IsNullable = false;
				colvarAccountZoneTypeId.IsPrimaryKey = false;
				colvarAccountZoneTypeId.IsForeignKey = true;
				colvarAccountZoneTypeId.IsReadOnly = false;
				colvarAccountZoneTypeId.DefaultSetting = @"('NOZONE')";
				colvarAccountZoneTypeId.ForeignKeyTableName = "MS_AccountZoneTypes";
				schema.Columns.Add(colvarAccountZoneTypeId);

				TableSchema.TableColumn colvarItemFKID = new TableSchema.TableColumn(schema);
				colvarItemFKID.ColumnName = "ItemFKID";
				colvarItemFKID.DataType = DbType.AnsiString;
				colvarItemFKID.MaxLength = 30;
				colvarItemFKID.AutoIncrement = false;
				colvarItemFKID.IsNullable = true;
				colvarItemFKID.IsPrimaryKey = false;
				colvarItemFKID.IsForeignKey = false;
				colvarItemFKID.IsReadOnly = false;
				colvarItemFKID.DefaultSetting = @"";
				colvarItemFKID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemFKID);

				TableSchema.TableColumn colvarItemSKU = new TableSchema.TableColumn(schema);
				colvarItemSKU.ColumnName = "ItemSKU";
				colvarItemSKU.DataType = DbType.String;
				colvarItemSKU.MaxLength = 50;
				colvarItemSKU.AutoIncrement = false;
				colvarItemSKU.IsNullable = true;
				colvarItemSKU.IsPrimaryKey = false;
				colvarItemSKU.IsForeignKey = false;
				colvarItemSKU.IsReadOnly = false;
				colvarItemSKU.DefaultSetting = @"";
				colvarItemSKU.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemSKU);

				TableSchema.TableColumn colvarItemDesc = new TableSchema.TableColumn(schema);
				colvarItemDesc.ColumnName = "ItemDesc";
				colvarItemDesc.DataType = DbType.String;
				colvarItemDesc.MaxLength = 136;
				colvarItemDesc.AutoIncrement = false;
				colvarItemDesc.IsNullable = false;
				colvarItemDesc.IsPrimaryKey = false;
				colvarItemDesc.IsForeignKey = false;
				colvarItemDesc.IsReadOnly = false;
				colvarItemDesc.DefaultSetting = @"";
				colvarItemDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemDesc);

				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "Price";
				colvarPrice.DataType = DbType.Currency;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = false;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);

				TableSchema.TableColumn colvarCost = new TableSchema.TableColumn(schema);
				colvarCost.ColumnName = "Cost";
				colvarCost.DataType = DbType.Currency;
				colvarCost.MaxLength = 0;
				colvarCost.AutoIncrement = false;
				colvarCost.IsNullable = false;
				colvarCost.IsPrimaryKey = false;
				colvarCost.IsForeignKey = false;
				colvarCost.IsReadOnly = false;
				colvarCost.DefaultSetting = @"";
				colvarCost.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCost);

				TableSchema.TableColumn colvarSystemPoints = new TableSchema.TableColumn(schema);
				colvarSystemPoints.ColumnName = "SystemPoints";
				colvarSystemPoints.DataType = DbType.Decimal;
				colvarSystemPoints.MaxLength = 0;
				colvarSystemPoints.AutoIncrement = false;
				colvarSystemPoints.IsNullable = false;
				colvarSystemPoints.IsPrimaryKey = false;
				colvarSystemPoints.IsForeignKey = false;
				colvarSystemPoints.IsReadOnly = false;
				colvarSystemPoints.DefaultSetting = @"((0))";
				colvarSystemPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemPoints);

				TableSchema.TableColumn colvarIsCatalogItem = new TableSchema.TableColumn(schema);
				colvarIsCatalogItem.ColumnName = "IsCatalogItem";
				colvarIsCatalogItem.DataType = DbType.Boolean;
				colvarIsCatalogItem.MaxLength = 0;
				colvarIsCatalogItem.AutoIncrement = false;
				colvarIsCatalogItem.IsNullable = false;
				colvarIsCatalogItem.IsPrimaryKey = false;
				colvarIsCatalogItem.IsForeignKey = false;
				colvarIsCatalogItem.IsReadOnly = false;
				colvarIsCatalogItem.DefaultSetting = @"((0))";
				colvarIsCatalogItem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCatalogItem);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_ITEMS_NEW",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public string ItemID {
			get { return GetColumnValue<string>(Columns.ItemID); }
			set {
				SetColumnValue(Columns.ItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemID));
			}
		}
		[DataMember]
		public string ItemTypeId {
			get { return GetColumnValue<string>(Columns.ItemTypeId); }
			set {
				SetColumnValue(Columns.ItemTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemTypeId));
			}
		}
		[DataMember]
		public string TaxOptionId {
			get { return GetColumnValue<string>(Columns.TaxOptionId); }
			set {
				SetColumnValue(Columns.TaxOptionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TaxOptionId));
			}
		}
		[DataMember]
		public string AccountZoneTypeId {
			get { return GetColumnValue<string>(Columns.AccountZoneTypeId); }
			set {
				SetColumnValue(Columns.AccountZoneTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountZoneTypeId));
			}
		}
		[DataMember]
		public string ItemFKID {
			get { return GetColumnValue<string>(Columns.ItemFKID); }
			set {
				SetColumnValue(Columns.ItemFKID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemFKID));
			}
		}
		[DataMember]
		public string ItemSKU {
			get { return GetColumnValue<string>(Columns.ItemSKU); }
			set {
				SetColumnValue(Columns.ItemSKU, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemSKU));
			}
		}
		[DataMember]
		public string ItemDesc {
			get { return GetColumnValue<string>(Columns.ItemDesc); }
			set {
				SetColumnValue(Columns.ItemDesc, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemDesc));
			}
		}
		[DataMember]
		public decimal Price {
			get { return GetColumnValue<decimal>(Columns.Price); }
			set {
				SetColumnValue(Columns.Price, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Price));
			}
		}
		[DataMember]
		public decimal Cost {
			get { return GetColumnValue<decimal>(Columns.Cost); }
			set {
				SetColumnValue(Columns.Cost, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Cost));
			}
		}
		[DataMember]
		public decimal SystemPoints {
			get { return GetColumnValue<decimal>(Columns.SystemPoints); }
			set {
				SetColumnValue(Columns.SystemPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemPoints));
			}
		}
		[DataMember]
		public bool IsCatalogItem {
			get { return GetColumnValue<bool>(Columns.IsCatalogItem); }
			set {
				SetColumnValue(Columns.IsCatalogItem, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCatalogItem));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_TaxOption _TaxOption;
		//Relationship: FK_AE_ITEMS_NEW_AE_TaxOptions
		public AE_TaxOption TaxOption
		{
			get
			{
				if(_TaxOption == null) {
					_TaxOption = AE_TaxOption.FetchByID(this.TaxOptionId);
				}
				return _TaxOption;
			}
			set
			{
				SetColumnValue("TaxOptionId", value.TaxOptionID);
				_TaxOption = value;
			}
		}

		private MS_AccountZoneType _AccountZoneType;
		//Relationship: FK_AE_ITEMS_NEW_MS_AccountZoneTypes
		public MS_AccountZoneType AccountZoneType
		{
			get
			{
				if(_AccountZoneType == null) {
					_AccountZoneType = MS_AccountZoneType.FetchByID(this.AccountZoneTypeId);
				}
				return _AccountZoneType;
			}
			set
			{
				SetColumnValue("AccountZoneTypeId", value.AccountZoneTypeID);
				_AccountZoneType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ItemTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ItemTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TaxOptionIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountZoneTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ItemFKIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ItemSKUColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ItemDescColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PriceColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CostColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn SystemPointsColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsCatalogItemColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[18]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ItemID = @"ItemID";
			public static readonly string ItemTypeId = @"ItemTypeId";
			public static readonly string TaxOptionId = @"TaxOptionId";
			public static readonly string AccountZoneTypeId = @"AccountZoneTypeId";
			public static readonly string ItemFKID = @"ItemFKID";
			public static readonly string ItemSKU = @"ItemSKU";
			public static readonly string ItemDesc = @"ItemDesc";
			public static readonly string Price = @"Price";
			public static readonly string Cost = @"Cost";
			public static readonly string SystemPoints = @"SystemPoints";
			public static readonly string IsCatalogItem = @"IsCatalogItem";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_ItemType class.
	/// </summary>
	[DataContract]
	public partial class AE_ItemTypeCollection : ActiveList<AE_ItemType, AE_ItemTypeCollection>
	{
		public static AE_ItemTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ItemTypeCollection result = new AE_ItemTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_ItemType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_ItemTypes table.
	/// </summary>
	[DataContract]
	public partial class AE_ItemType : ActiveRecord<AE_ItemType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Cellular_ServiceID = "CELL_SRV";
			[EnumMember()] public const string Existing_EquipmentID = "EQPM_EXST";
			[EnumMember()] public const string Existing_Equipment_MsID = "EQPM_EXST_MS";
			[EnumMember()] public const string Inventory_EquipmentID = "EQPM_INVT";
			[EnumMember()] public const string Inventory_Equipment_MsID = "EQPM_INVT_MS";
			[EnumMember()] public const string Sales_Rep_DiscountID = "MMR_SREP_DISC";
			[EnumMember()] public const string Sales_Rep_UpsaleID = "MMR_SREP_UPSL";
			[EnumMember()] public const string Monitoring_ContractID = "MON_CONT";
			[EnumMember()] public const string Service_OptionsID = "MS_SERVICE_OPTIONS";
			[EnumMember()] public const string Promotion_DiscountsID = "PRM_DISC";
			[EnumMember()] public const string Activation_Setup_FeeID = "SETUP_FEE";
			[EnumMember()] public const string Activation_Setup_Fee_DiscountID = "SETUP_FEE_DISC";
			[EnumMember()] public const string Activation_Setup_Fee_Over_3_MonthsID = "SETUP_FEE_OVR3";
			[EnumMember()] public const string Activation_Setup_Fee_UpsaleID = "SETUP_FEE_UPSL";
			[EnumMember()] public const string Technician_DiscountID = "TECH_DISC";
			[EnumMember()] public const string Technician_UpsaleID = "TECH_SALE";
			[EnumMember()] public const string Wave_Activation_Setup_FeeID = "WV_SUFEE";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_ItemType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_ItemTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarItemTypeID = new TableSchema.TableColumn(schema);
				colvarItemTypeID.ColumnName = "ItemTypeID";
				colvarItemTypeID.DataType = DbType.AnsiString;
				colvarItemTypeID.MaxLength = 50;
				colvarItemTypeID.AutoIncrement = false;
				colvarItemTypeID.IsNullable = false;
				colvarItemTypeID.IsPrimaryKey = true;
				colvarItemTypeID.IsForeignKey = false;
				colvarItemTypeID.IsReadOnly = false;
				colvarItemTypeID.DefaultSetting = @"";
				colvarItemTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemTypeID);

				TableSchema.TableColumn colvarItemType = new TableSchema.TableColumn(schema);
				colvarItemType.ColumnName = "ItemType";
				colvarItemType.DataType = DbType.String;
				colvarItemType.MaxLength = 50;
				colvarItemType.AutoIncrement = false;
				colvarItemType.IsNullable = false;
				colvarItemType.IsPrimaryKey = false;
				colvarItemType.IsForeignKey = false;
				colvarItemType.IsReadOnly = false;
				colvarItemType.DefaultSetting = @"";
				colvarItemType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemType);

				TableSchema.TableColumn colvarItemDbPath = new TableSchema.TableColumn(schema);
				colvarItemDbPath.ColumnName = "ItemDbPath";
				colvarItemDbPath.DataType = DbType.AnsiString;
				colvarItemDbPath.MaxLength = 500;
				colvarItemDbPath.AutoIncrement = false;
				colvarItemDbPath.IsNullable = true;
				colvarItemDbPath.IsPrimaryKey = false;
				colvarItemDbPath.IsForeignKey = false;
				colvarItemDbPath.IsReadOnly = false;
				colvarItemDbPath.DefaultSetting = @"";
				colvarItemDbPath.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemDbPath);

				TableSchema.TableColumn colvarIsContract = new TableSchema.TableColumn(schema);
				colvarIsContract.ColumnName = "IsContract";
				colvarIsContract.DataType = DbType.Boolean;
				colvarIsContract.MaxLength = 0;
				colvarIsContract.AutoIncrement = false;
				colvarIsContract.IsNullable = false;
				colvarIsContract.IsPrimaryKey = false;
				colvarIsContract.IsForeignKey = false;
				colvarIsContract.IsReadOnly = false;
				colvarIsContract.DefaultSetting = @"((0))";
				colvarIsContract.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsContract);

				TableSchema.TableColumn colvarIsEquipment = new TableSchema.TableColumn(schema);
				colvarIsEquipment.ColumnName = "IsEquipment";
				colvarIsEquipment.DataType = DbType.Boolean;
				colvarIsEquipment.MaxLength = 0;
				colvarIsEquipment.AutoIncrement = false;
				colvarIsEquipment.IsNullable = false;
				colvarIsEquipment.IsPrimaryKey = false;
				colvarIsEquipment.IsForeignKey = false;
				colvarIsEquipment.IsReadOnly = false;
				colvarIsEquipment.DefaultSetting = @"((0))";
				colvarIsEquipment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsEquipment);

				TableSchema.TableColumn colvarIsExistingEquipment = new TableSchema.TableColumn(schema);
				colvarIsExistingEquipment.ColumnName = "IsExistingEquipment";
				colvarIsExistingEquipment.DataType = DbType.Boolean;
				colvarIsExistingEquipment.MaxLength = 0;
				colvarIsExistingEquipment.AutoIncrement = false;
				colvarIsExistingEquipment.IsNullable = false;
				colvarIsExistingEquipment.IsPrimaryKey = false;
				colvarIsExistingEquipment.IsForeignKey = false;
				colvarIsExistingEquipment.IsReadOnly = false;
				colvarIsExistingEquipment.DefaultSetting = @"((0))";
				colvarIsExistingEquipment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExistingEquipment);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_ItemTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_ItemType LoadFrom(AE_ItemType item)
		{
			AE_ItemType result = new AE_ItemType();
			if (item.ItemTypeID != default(string)) {
				result.LoadByKey(item.ItemTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ItemTypeID {
			get { return GetColumnValue<string>(Columns.ItemTypeID); }
			set {
				SetColumnValue(Columns.ItemTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemTypeID));
			}
		}
		[DataMember]
		public string ItemType {
			get { return GetColumnValue<string>(Columns.ItemType); }
			set {
				SetColumnValue(Columns.ItemType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemType));
			}
		}
		[DataMember]
		public string ItemDbPath {
			get { return GetColumnValue<string>(Columns.ItemDbPath); }
			set {
				SetColumnValue(Columns.ItemDbPath, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemDbPath));
			}
		}
		[DataMember]
		public bool IsContract {
			get { return GetColumnValue<bool>(Columns.IsContract); }
			set {
				SetColumnValue(Columns.IsContract, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsContract));
			}
		}
		[DataMember]
		public bool IsEquipment {
			get { return GetColumnValue<bool>(Columns.IsEquipment); }
			set {
				SetColumnValue(Columns.IsEquipment, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsEquipment));
			}
		}
		[DataMember]
		public bool IsExistingEquipment {
			get { return GetColumnValue<bool>(Columns.IsExistingEquipment); }
			set {
				SetColumnValue(Columns.IsExistingEquipment, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsExistingEquipment));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ItemType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ItemTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ItemTypeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ItemDbPathColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsContractColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsEquipmentColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsExistingEquipmentColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ItemTypeID = @"ItemTypeID";
			public static readonly string ItemType = @"ItemType";
			public static readonly string ItemDbPath = @"ItemDbPath";
			public static readonly string IsContract = @"IsContract";
			public static readonly string IsEquipment = @"IsEquipment";
			public static readonly string IsExistingEquipment = @"IsExistingEquipment";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ItemTypeID; }
		}
		*/

		#region Foreign Collections

		private AE_ItemCollection _AE_ItemsCol;
		//Relationship: FK_AE_Parts_AE_ItemTypes
		public AE_ItemCollection AE_ItemsCol
		{
			get
			{
				if(_AE_ItemsCol == null) {
					_AE_ItemsCol = new AE_ItemCollection();
					_AE_ItemsCol.LoadAndCloseReader(AE_Item.Query()
						.WHERE(AE_Item.Columns.ItemTypeId, ItemTypeID).ExecuteReader());
				}
				return _AE_ItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_Manufacturer class.
	/// </summary>
	[DataContract]
	public partial class AE_ManufacturerCollection : ActiveList<AE_Manufacturer, AE_ManufacturerCollection>
	{
		public static AE_ManufacturerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ManufacturerCollection result = new AE_ManufacturerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_Manufacturer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_Manufacturers table.
	/// </summary>
	[DataContract]
	public partial class AE_Manufacturer : ActiveRecord<AE_Manufacturer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_Manufacturer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_Manufacturers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarManufacturerID = new TableSchema.TableColumn(schema);
				colvarManufacturerID.ColumnName = "ManufacturerID";
				colvarManufacturerID.DataType = DbType.AnsiString;
				colvarManufacturerID.MaxLength = 20;
				colvarManufacturerID.AutoIncrement = false;
				colvarManufacturerID.IsNullable = false;
				colvarManufacturerID.IsPrimaryKey = true;
				colvarManufacturerID.IsForeignKey = false;
				colvarManufacturerID.IsReadOnly = false;
				colvarManufacturerID.DefaultSetting = @"";
				colvarManufacturerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManufacturerID);

				TableSchema.TableColumn colvarManufacturerName = new TableSchema.TableColumn(schema);
				colvarManufacturerName.ColumnName = "ManufacturerName";
				colvarManufacturerName.DataType = DbType.String;
				colvarManufacturerName.MaxLength = 100;
				colvarManufacturerName.AutoIncrement = false;
				colvarManufacturerName.IsNullable = false;
				colvarManufacturerName.IsPrimaryKey = false;
				colvarManufacturerName.IsForeignKey = false;
				colvarManufacturerName.IsReadOnly = false;
				colvarManufacturerName.DefaultSetting = @"";
				colvarManufacturerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManufacturerName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_Manufacturers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_Manufacturer LoadFrom(AE_Manufacturer item)
		{
			AE_Manufacturer result = new AE_Manufacturer();
			if (item.ManufacturerID != default(string)) {
				result.LoadByKey(item.ManufacturerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ManufacturerID {
			get { return GetColumnValue<string>(Columns.ManufacturerID); }
			set {
				SetColumnValue(Columns.ManufacturerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManufacturerID));
			}
		}
		[DataMember]
		public string ManufacturerName {
			get { return GetColumnValue<string>(Columns.ManufacturerName); }
			set {
				SetColumnValue(Columns.ManufacturerName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManufacturerName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ManufacturerName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ManufacturerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ManufacturerNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ManufacturerID = @"ManufacturerID";
			public static readonly string ManufacturerName = @"ManufacturerName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ManufacturerID; }
		}
		*/

		#region Foreign Collections

		private AE_ProductCollection _AE_ProductsCol;
		//Relationship: FK_AE_Products_AE_Manufacturers
		public AE_ProductCollection AE_ProductsCol
		{
			get
			{
				if(_AE_ProductsCol == null) {
					_AE_ProductsCol = new AE_ProductCollection();
					_AE_ProductsCol.LoadAndCloseReader(AE_Product.Query()
						.WHERE(AE_Product.Columns.ManufacturerId, ManufacturerID).ExecuteReader());
				}
				return _AE_ProductsCol;
			}
		}

		private IE_ReturnToManufacturerCollection _IE_ReturnToManufacturersCol;
		//Relationship: FK_IE_ReturnToManufacturers_AE_Manufacturers
		public IE_ReturnToManufacturerCollection IE_ReturnToManufacturersCol
		{
			get
			{
				if(_IE_ReturnToManufacturersCol == null) {
					_IE_ReturnToManufacturersCol = new IE_ReturnToManufacturerCollection();
					_IE_ReturnToManufacturersCol.LoadAndCloseReader(IE_ReturnToManufacturer.Query()
						.WHERE(IE_ReturnToManufacturer.Columns.ManufacturerId, ManufacturerID).ExecuteReader());
				}
				return _IE_ReturnToManufacturersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_Payment class.
	/// </summary>
	[DataContract]
	public partial class AE_PaymentCollection : ActiveList<AE_Payment, AE_PaymentCollection>
	{
		public static AE_PaymentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_PaymentCollection result = new AE_PaymentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_Payment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_Payments table.
	/// </summary>
	[DataContract]
	public partial class AE_Payment : ActiveRecord<AE_Payment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_Payment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_Payments", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPaymentID = new TableSchema.TableColumn(schema);
				colvarPaymentID.ColumnName = "PaymentID";
				colvarPaymentID.DataType = DbType.Int64;
				colvarPaymentID.MaxLength = 0;
				colvarPaymentID.AutoIncrement = true;
				colvarPaymentID.IsNullable = false;
				colvarPaymentID.IsPrimaryKey = true;
				colvarPaymentID.IsForeignKey = false;
				colvarPaymentID.IsReadOnly = false;
				colvarPaymentID.DefaultSetting = @"";
				colvarPaymentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentID);

				TableSchema.TableColumn colvarPaymentTypeId = new TableSchema.TableColumn(schema);
				colvarPaymentTypeId.ColumnName = "PaymentTypeId";
				colvarPaymentTypeId.DataType = DbType.AnsiString;
				colvarPaymentTypeId.MaxLength = 20;
				colvarPaymentTypeId.AutoIncrement = false;
				colvarPaymentTypeId.IsNullable = false;
				colvarPaymentTypeId.IsPrimaryKey = false;
				colvarPaymentTypeId.IsForeignKey = true;
				colvarPaymentTypeId.IsReadOnly = false;
				colvarPaymentTypeId.DefaultSetting = @"";
				colvarPaymentTypeId.ForeignKeyTableName = "AE_PaymentTypes";
				schema.Columns.Add(colvarPaymentTypeId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MC_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarTransactionId = new TableSchema.TableColumn(schema);
				colvarTransactionId.ColumnName = "TransactionId";
				colvarTransactionId.DataType = DbType.Int64;
				colvarTransactionId.MaxLength = 0;
				colvarTransactionId.AutoIncrement = false;
				colvarTransactionId.IsNullable = true;
				colvarTransactionId.IsPrimaryKey = false;
				colvarTransactionId.IsForeignKey = false;
				colvarTransactionId.IsReadOnly = false;
				colvarTransactionId.DefaultSetting = @"";
				colvarTransactionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionId);

				TableSchema.TableColumn colvarTransactionSuccess = new TableSchema.TableColumn(schema);
				colvarTransactionSuccess.ColumnName = "TransactionSuccess";
				colvarTransactionSuccess.DataType = DbType.Boolean;
				colvarTransactionSuccess.MaxLength = 0;
				colvarTransactionSuccess.AutoIncrement = false;
				colvarTransactionSuccess.IsNullable = true;
				colvarTransactionSuccess.IsPrimaryKey = false;
				colvarTransactionSuccess.IsForeignKey = false;
				colvarTransactionSuccess.IsReadOnly = false;
				colvarTransactionSuccess.DefaultSetting = @"";
				colvarTransactionSuccess.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionSuccess);

				TableSchema.TableColumn colvarDocDate = new TableSchema.TableColumn(schema);
				colvarDocDate.ColumnName = "DocDate";
				colvarDocDate.DataType = DbType.DateTime;
				colvarDocDate.MaxLength = 0;
				colvarDocDate.AutoIncrement = false;
				colvarDocDate.IsNullable = false;
				colvarDocDate.IsPrimaryKey = false;
				colvarDocDate.IsForeignKey = false;
				colvarDocDate.IsReadOnly = false;
				colvarDocDate.DefaultSetting = @"";
				colvarDocDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocDate);

				TableSchema.TableColumn colvarPostedDate = new TableSchema.TableColumn(schema);
				colvarPostedDate.ColumnName = "PostedDate";
				colvarPostedDate.DataType = DbType.DateTime;
				colvarPostedDate.MaxLength = 0;
				colvarPostedDate.AutoIncrement = false;
				colvarPostedDate.IsNullable = true;
				colvarPostedDate.IsPrimaryKey = false;
				colvarPostedDate.IsForeignKey = false;
				colvarPostedDate.IsReadOnly = false;
				colvarPostedDate.DefaultSetting = @"";
				colvarPostedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostedDate);

				TableSchema.TableColumn colvarDueDate = new TableSchema.TableColumn(schema);
				colvarDueDate.ColumnName = "DueDate";
				colvarDueDate.DataType = DbType.DateTime;
				colvarDueDate.MaxLength = 0;
				colvarDueDate.AutoIncrement = false;
				colvarDueDate.IsNullable = true;
				colvarDueDate.IsPrimaryKey = false;
				colvarDueDate.IsForeignKey = false;
				colvarDueDate.IsReadOnly = false;
				colvarDueDate.DefaultSetting = @"";
				colvarDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDueDate);

				TableSchema.TableColumn colvarGLPostDate = new TableSchema.TableColumn(schema);
				colvarGLPostDate.ColumnName = "GLPostDate";
				colvarGLPostDate.DataType = DbType.DateTime;
				colvarGLPostDate.MaxLength = 0;
				colvarGLPostDate.AutoIncrement = false;
				colvarGLPostDate.IsNullable = true;
				colvarGLPostDate.IsPrimaryKey = false;
				colvarGLPostDate.IsForeignKey = false;
				colvarGLPostDate.IsReadOnly = false;
				colvarGLPostDate.DefaultSetting = @"";
				colvarGLPostDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGLPostDate);

				TableSchema.TableColumn colvarOriginalTransactionAmount = new TableSchema.TableColumn(schema);
				colvarOriginalTransactionAmount.ColumnName = "OriginalTransactionAmount";
				colvarOriginalTransactionAmount.DataType = DbType.Currency;
				colvarOriginalTransactionAmount.MaxLength = 0;
				colvarOriginalTransactionAmount.AutoIncrement = false;
				colvarOriginalTransactionAmount.IsNullable = false;
				colvarOriginalTransactionAmount.IsPrimaryKey = false;
				colvarOriginalTransactionAmount.IsForeignKey = false;
				colvarOriginalTransactionAmount.IsReadOnly = false;
				colvarOriginalTransactionAmount.DefaultSetting = @"";
				colvarOriginalTransactionAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginalTransactionAmount);

				TableSchema.TableColumn colvarActualTransactionAmount = new TableSchema.TableColumn(schema);
				colvarActualTransactionAmount.ColumnName = "ActualTransactionAmount";
				colvarActualTransactionAmount.DataType = DbType.Currency;
				colvarActualTransactionAmount.MaxLength = 0;
				colvarActualTransactionAmount.AutoIncrement = false;
				colvarActualTransactionAmount.IsNullable = true;
				colvarActualTransactionAmount.IsPrimaryKey = false;
				colvarActualTransactionAmount.IsForeignKey = false;
				colvarActualTransactionAmount.IsReadOnly = false;
				colvarActualTransactionAmount.DefaultSetting = @"";
				colvarActualTransactionAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualTransactionAmount);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarModifiedById = new TableSchema.TableColumn(schema);
				colvarModifiedById.ColumnName = "ModifiedById";
				colvarModifiedById.DataType = DbType.String;
				colvarModifiedById.MaxLength = 50;
				colvarModifiedById.AutoIncrement = false;
				colvarModifiedById.IsNullable = false;
				colvarModifiedById.IsPrimaryKey = false;
				colvarModifiedById.IsForeignKey = false;
				colvarModifiedById.IsReadOnly = false;
				colvarModifiedById.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedById);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedById = new TableSchema.TableColumn(schema);
				colvarCreatedById.ColumnName = "CreatedById";
				colvarCreatedById.DataType = DbType.String;
				colvarCreatedById.MaxLength = 50;
				colvarCreatedById.AutoIncrement = false;
				colvarCreatedById.IsNullable = false;
				colvarCreatedById.IsPrimaryKey = false;
				colvarCreatedById.IsForeignKey = false;
				colvarCreatedById.IsReadOnly = false;
				colvarCreatedById.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedById);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_Payments",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_Payment LoadFrom(AE_Payment item)
		{
			AE_Payment result = new AE_Payment();
			if (item.PaymentID != default(long)) {
				result.LoadByKey(item.PaymentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long PaymentID {
			get { return GetColumnValue<long>(Columns.PaymentID); }
			set {
				SetColumnValue(Columns.PaymentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaymentID));
			}
		}
		[DataMember]
		public string PaymentTypeId {
			get { return GetColumnValue<string>(Columns.PaymentTypeId); }
			set {
				SetColumnValue(Columns.PaymentTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaymentTypeId));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public long? TransactionId {
			get { return GetColumnValue<long?>(Columns.TransactionId); }
			set {
				SetColumnValue(Columns.TransactionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionId));
			}
		}
		[DataMember]
		public bool? TransactionSuccess {
			get { return GetColumnValue<bool?>(Columns.TransactionSuccess); }
			set {
				SetColumnValue(Columns.TransactionSuccess, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionSuccess));
			}
		}
		[DataMember]
		public DateTime DocDate {
			get { return GetColumnValue<DateTime>(Columns.DocDate); }
			set {
				SetColumnValue(Columns.DocDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocDate));
			}
		}
		[DataMember]
		public DateTime? PostedDate {
			get { return GetColumnValue<DateTime?>(Columns.PostedDate); }
			set {
				SetColumnValue(Columns.PostedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostedDate));
			}
		}
		[DataMember]
		public DateTime? DueDate {
			get { return GetColumnValue<DateTime?>(Columns.DueDate); }
			set {
				SetColumnValue(Columns.DueDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DueDate));
			}
		}
		[DataMember]
		public DateTime? GLPostDate {
			get { return GetColumnValue<DateTime?>(Columns.GLPostDate); }
			set {
				SetColumnValue(Columns.GLPostDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GLPostDate));
			}
		}
		[DataMember]
		public decimal OriginalTransactionAmount {
			get { return GetColumnValue<decimal>(Columns.OriginalTransactionAmount); }
			set {
				SetColumnValue(Columns.OriginalTransactionAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OriginalTransactionAmount));
			}
		}
		[DataMember]
		public decimal? ActualTransactionAmount {
			get { return GetColumnValue<decimal?>(Columns.ActualTransactionAmount); }
			set {
				SetColumnValue(Columns.ActualTransactionAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActualTransactionAmount));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string ModifiedById {
			get { return GetColumnValue<string>(Columns.ModifiedById); }
			set {
				SetColumnValue(Columns.ModifiedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedById));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedById {
			get { return GetColumnValue<string>(Columns.CreatedById); }
			set {
				SetColumnValue(Columns.CreatedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedById));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_PaymentType _PaymentType;
		//Relationship: FK_AE_Payments_AE_PaymentTypes
		public AE_PaymentType PaymentType
		{
			get
			{
				if(_PaymentType == null) {
					_PaymentType = AE_PaymentType.FetchByID(this.PaymentTypeId);
				}
				return _PaymentType;
			}
			set
			{
				SetColumnValue("PaymentTypeId", value.PaymentTypeID);
				_PaymentType = value;
			}
		}

		private MC_Account _Account;
		//Relationship: FK_AE_Payments_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PaymentTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PaymentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PaymentTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TransactionIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TransactionSuccessColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DocDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn PostedDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DueDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn GLPostDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn OriginalTransactionAmountColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ActualTransactionAmountColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedByIdColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PaymentID = @"PaymentID";
			public static readonly string PaymentTypeId = @"PaymentTypeId";
			public static readonly string AccountId = @"AccountId";
			public static readonly string TransactionId = @"TransactionId";
			public static readonly string TransactionSuccess = @"TransactionSuccess";
			public static readonly string DocDate = @"DocDate";
			public static readonly string PostedDate = @"PostedDate";
			public static readonly string DueDate = @"DueDate";
			public static readonly string GLPostDate = @"GLPostDate";
			public static readonly string OriginalTransactionAmount = @"OriginalTransactionAmount";
			public static readonly string ActualTransactionAmount = @"ActualTransactionAmount";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string ModifiedById = @"ModifiedById";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedById = @"CreatedById";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PaymentID; }
		}
		*/

		#region Foreign Collections

		private AE_InvoicePaymentJoinCollection _AE_InvoicePaymentJoinsCol;
		//Relationship: FK_AE_InvoicePaymentJoins_AE_Payments
		public AE_InvoicePaymentJoinCollection AE_InvoicePaymentJoinsCol
		{
			get
			{
				if(_AE_InvoicePaymentJoinsCol == null) {
					_AE_InvoicePaymentJoinsCol = new AE_InvoicePaymentJoinCollection();
					_AE_InvoicePaymentJoinsCol.LoadAndCloseReader(AE_InvoicePaymentJoin.Query()
						.WHERE(AE_InvoicePaymentJoin.Columns.PaymentId, PaymentID).ExecuteReader());
				}
				return _AE_InvoicePaymentJoinsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_PaymentType class.
	/// </summary>
	[DataContract]
	public partial class AE_PaymentTypeCollection : ActiveList<AE_PaymentType, AE_PaymentTypeCollection>
	{
		public static AE_PaymentTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_PaymentTypeCollection result = new AE_PaymentTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_PaymentType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_PaymentTypes table.
	/// </summary>
	[DataContract]
	public partial class AE_PaymentType : ActiveRecord<AE_PaymentType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string AchID = "ACH";
			[EnumMember()] public const string Credit_CardID = "CC";
			[EnumMember()] public const string CheckID = "CHCK";
			[EnumMember()] public const string Electronic_Funds_TransferID = "EFT";
			[EnumMember()] public const string Manual_InvoiceID = "MAN";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_PaymentType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_PaymentTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPaymentTypeID = new TableSchema.TableColumn(schema);
				colvarPaymentTypeID.ColumnName = "PaymentTypeID";
				colvarPaymentTypeID.DataType = DbType.AnsiString;
				colvarPaymentTypeID.MaxLength = 20;
				colvarPaymentTypeID.AutoIncrement = false;
				colvarPaymentTypeID.IsNullable = false;
				colvarPaymentTypeID.IsPrimaryKey = true;
				colvarPaymentTypeID.IsForeignKey = false;
				colvarPaymentTypeID.IsReadOnly = false;
				colvarPaymentTypeID.DefaultSetting = @"";
				colvarPaymentTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentTypeID);

				TableSchema.TableColumn colvarPaymentTypeName = new TableSchema.TableColumn(schema);
				colvarPaymentTypeName.ColumnName = "PaymentTypeName";
				colvarPaymentTypeName.DataType = DbType.String;
				colvarPaymentTypeName.MaxLength = 50;
				colvarPaymentTypeName.AutoIncrement = false;
				colvarPaymentTypeName.IsNullable = false;
				colvarPaymentTypeName.IsPrimaryKey = false;
				colvarPaymentTypeName.IsForeignKey = false;
				colvarPaymentTypeName.IsReadOnly = false;
				colvarPaymentTypeName.DefaultSetting = @"";
				colvarPaymentTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentTypeName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarModifiedById = new TableSchema.TableColumn(schema);
				colvarModifiedById.ColumnName = "ModifiedById";
				colvarModifiedById.DataType = DbType.String;
				colvarModifiedById.MaxLength = 50;
				colvarModifiedById.AutoIncrement = false;
				colvarModifiedById.IsNullable = false;
				colvarModifiedById.IsPrimaryKey = false;
				colvarModifiedById.IsForeignKey = false;
				colvarModifiedById.IsReadOnly = false;
				colvarModifiedById.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedById);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedById = new TableSchema.TableColumn(schema);
				colvarCreatedById.ColumnName = "CreatedById";
				colvarCreatedById.DataType = DbType.String;
				colvarCreatedById.MaxLength = 50;
				colvarCreatedById.AutoIncrement = false;
				colvarCreatedById.IsNullable = false;
				colvarCreatedById.IsPrimaryKey = false;
				colvarCreatedById.IsForeignKey = false;
				colvarCreatedById.IsReadOnly = false;
				colvarCreatedById.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedById);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_PaymentTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_PaymentType LoadFrom(AE_PaymentType item)
		{
			AE_PaymentType result = new AE_PaymentType();
			if (item.PaymentTypeID != default(string)) {
				result.LoadByKey(item.PaymentTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string PaymentTypeID {
			get { return GetColumnValue<string>(Columns.PaymentTypeID); }
			set {
				SetColumnValue(Columns.PaymentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaymentTypeID));
			}
		}
		[DataMember]
		public string PaymentTypeName {
			get { return GetColumnValue<string>(Columns.PaymentTypeName); }
			set {
				SetColumnValue(Columns.PaymentTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaymentTypeName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string ModifiedById {
			get { return GetColumnValue<string>(Columns.ModifiedById); }
			set {
				SetColumnValue(Columns.ModifiedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedById));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedById {
			get { return GetColumnValue<string>(Columns.CreatedById); }
			set {
				SetColumnValue(Columns.CreatedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedById));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return PaymentTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PaymentTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PaymentTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PaymentTypeID = @"PaymentTypeID";
			public static readonly string PaymentTypeName = @"PaymentTypeName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string ModifiedById = @"ModifiedById";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedById = @"CreatedById";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PaymentTypeID; }
		}
		*/

		#region Foreign Collections

		private AE_PaymentCollection _AE_PaymentsCol;
		//Relationship: FK_AE_Payments_AE_PaymentTypes
		public AE_PaymentCollection AE_PaymentsCol
		{
			get
			{
				if(_AE_PaymentsCol == null) {
					_AE_PaymentsCol = new AE_PaymentCollection();
					_AE_PaymentsCol.LoadAndCloseReader(AE_Payment.Query()
						.WHERE(AE_Payment.Columns.PaymentTypeId, PaymentTypeID).ExecuteReader());
				}
				return _AE_PaymentsCol;
			}
		}

		private MS_AccountSalesInformationCollection _MS_AccountSalesInformationsCol;
		//Relationship: FK_MS_AccountSalesInformations_AE_PaymentTypes
		public MS_AccountSalesInformationCollection MS_AccountSalesInformationsCol
		{
			get
			{
				if(_MS_AccountSalesInformationsCol == null) {
					_MS_AccountSalesInformationsCol = new MS_AccountSalesInformationCollection();
					_MS_AccountSalesInformationsCol.LoadAndCloseReader(MS_AccountSalesInformation.Query()
						.WHERE(MS_AccountSalesInformation.Columns.PaymentTypeId, PaymentTypeID).ExecuteReader());
				}
				return _MS_AccountSalesInformationsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_ProductGroup class.
	/// </summary>
	[DataContract]
	public partial class AE_ProductGroupCollection : ActiveList<AE_ProductGroup, AE_ProductGroupCollection>
	{
		public static AE_ProductGroupCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ProductGroupCollection result = new AE_ProductGroupCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_ProductGroup item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_ProductGroups table.
	/// </summary>
	[DataContract]
	public partial class AE_ProductGroup : ActiveRecord<AE_ProductGroup>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_ProductGroup()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_ProductGroups", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarProductGroupID = new TableSchema.TableColumn(schema);
				colvarProductGroupID.ColumnName = "ProductGroupID";
				colvarProductGroupID.DataType = DbType.Int32;
				colvarProductGroupID.MaxLength = 0;
				colvarProductGroupID.AutoIncrement = true;
				colvarProductGroupID.IsNullable = false;
				colvarProductGroupID.IsPrimaryKey = true;
				colvarProductGroupID.IsForeignKey = false;
				colvarProductGroupID.IsReadOnly = false;
				colvarProductGroupID.DefaultSetting = @"";
				colvarProductGroupID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductGroupID);

				TableSchema.TableColumn colvarProductGrpSkwId = new TableSchema.TableColumn(schema);
				colvarProductGrpSkwId.ColumnName = "ProductGrpSkwId";
				colvarProductGrpSkwId.DataType = DbType.AnsiString;
				colvarProductGrpSkwId.MaxLength = 50;
				colvarProductGrpSkwId.AutoIncrement = false;
				colvarProductGrpSkwId.IsNullable = false;
				colvarProductGrpSkwId.IsPrimaryKey = false;
				colvarProductGrpSkwId.IsForeignKey = true;
				colvarProductGrpSkwId.IsReadOnly = false;
				colvarProductGrpSkwId.DefaultSetting = @"";
				colvarProductGrpSkwId.ForeignKeyTableName = "AE_Products";
				schema.Columns.Add(colvarProductGrpSkwId);

				TableSchema.TableColumn colvarProductSkwId = new TableSchema.TableColumn(schema);
				colvarProductSkwId.ColumnName = "ProductSkwId";
				colvarProductSkwId.DataType = DbType.AnsiString;
				colvarProductSkwId.MaxLength = 50;
				colvarProductSkwId.AutoIncrement = false;
				colvarProductSkwId.IsNullable = false;
				colvarProductSkwId.IsPrimaryKey = false;
				colvarProductSkwId.IsForeignKey = true;
				colvarProductSkwId.IsReadOnly = false;
				colvarProductSkwId.DefaultSetting = @"";
				colvarProductSkwId.ForeignKeyTableName = "AE_Products";
				schema.Columns.Add(colvarProductSkwId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_ProductGroups",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_ProductGroup LoadFrom(AE_ProductGroup item)
		{
			AE_ProductGroup result = new AE_ProductGroup();
			if (item.ProductGroupID != default(int)) {
				result.LoadByKey(item.ProductGroupID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ProductGroupID {
			get { return GetColumnValue<int>(Columns.ProductGroupID); }
			set {
				SetColumnValue(Columns.ProductGroupID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductGroupID));
			}
		}
		[DataMember]
		public string ProductGrpSkwId {
			get { return GetColumnValue<string>(Columns.ProductGrpSkwId); }
			set {
				SetColumnValue(Columns.ProductGrpSkwId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductGrpSkwId));
			}
		}
		[DataMember]
		public string ProductSkwId {
			get { return GetColumnValue<string>(Columns.ProductSkwId); }
			set {
				SetColumnValue(Columns.ProductSkwId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductSkwId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Product _ProductGrpSkw;
		//Relationship: FK_AE_ProductGroups_AE_ProductGroupSkw
		public AE_Product ProductGrpSkw
		{
			get
			{
				if(_ProductGrpSkw == null) {
					_ProductGrpSkw = AE_Product.FetchByID(this.ProductGrpSkwId);
				}
				return _ProductGrpSkw;
			}
			set
			{
				SetColumnValue("ProductGrpSkwId", value.ProductSkwID);
				_ProductGrpSkw = value;
			}
		}

		private AE_Product _ProductSkw;
		//Relationship: FK_AE_ProductGroups_AE_Products
		public AE_Product ProductSkw
		{
			get
			{
				if(_ProductSkw == null) {
					_ProductSkw = AE_Product.FetchByID(this.ProductSkwId);
				}
				return _ProductSkw;
			}
			set
			{
				SetColumnValue("ProductSkwId", value.ProductSkwID);
				_ProductSkw = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ProductGrpSkwId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ProductGroupIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ProductGrpSkwIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ProductSkwIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ProductGroupID = @"ProductGroupID";
			public static readonly string ProductGrpSkwId = @"ProductGrpSkwId";
			public static readonly string ProductSkwId = @"ProductSkwId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ProductGroupID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_ProductPriceSchema class.
	/// </summary>
	[DataContract]
	public partial class AE_ProductPriceSchemaCollection : ActiveList<AE_ProductPriceSchema, AE_ProductPriceSchemaCollection>
	{
		public static AE_ProductPriceSchemaCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ProductPriceSchemaCollection result = new AE_ProductPriceSchemaCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_ProductPriceSchema item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_ProductPriceSchemas table.
	/// </summary>
	[DataContract]
	public partial class AE_ProductPriceSchema : ActiveRecord<AE_ProductPriceSchema>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_ProductPriceSchema()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_ProductPriceSchemas", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarProductPriceSchemaID = new TableSchema.TableColumn(schema);
				colvarProductPriceSchemaID.ColumnName = "ProductPriceSchemaID";
				colvarProductPriceSchemaID.DataType = DbType.Int32;
				colvarProductPriceSchemaID.MaxLength = 0;
				colvarProductPriceSchemaID.AutoIncrement = false;
				colvarProductPriceSchemaID.IsNullable = false;
				colvarProductPriceSchemaID.IsPrimaryKey = true;
				colvarProductPriceSchemaID.IsForeignKey = false;
				colvarProductPriceSchemaID.IsReadOnly = false;
				colvarProductPriceSchemaID.DefaultSetting = @"";
				colvarProductPriceSchemaID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductPriceSchemaID);

				TableSchema.TableColumn colvarProductSkwId = new TableSchema.TableColumn(schema);
				colvarProductSkwId.ColumnName = "ProductSkwId";
				colvarProductSkwId.DataType = DbType.AnsiString;
				colvarProductSkwId.MaxLength = 50;
				colvarProductSkwId.AutoIncrement = false;
				colvarProductSkwId.IsNullable = false;
				colvarProductSkwId.IsPrimaryKey = false;
				colvarProductSkwId.IsForeignKey = true;
				colvarProductSkwId.IsReadOnly = false;
				colvarProductSkwId.DefaultSetting = @"";
				colvarProductSkwId.ForeignKeyTableName = "AE_Products";
				schema.Columns.Add(colvarProductSkwId);

				TableSchema.TableColumn colvarProductCost = new TableSchema.TableColumn(schema);
				colvarProductCost.ColumnName = "ProductCost";
				colvarProductCost.DataType = DbType.Currency;
				colvarProductCost.MaxLength = 0;
				colvarProductCost.AutoIncrement = false;
				colvarProductCost.IsNullable = false;
				colvarProductCost.IsPrimaryKey = false;
				colvarProductCost.IsForeignKey = false;
				colvarProductCost.IsReadOnly = false;
				colvarProductCost.DefaultSetting = @"";
				colvarProductCost.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductCost);

				TableSchema.TableColumn colvarProductRetail = new TableSchema.TableColumn(schema);
				colvarProductRetail.ColumnName = "ProductRetail";
				colvarProductRetail.DataType = DbType.Currency;
				colvarProductRetail.MaxLength = 0;
				colvarProductRetail.AutoIncrement = false;
				colvarProductRetail.IsNullable = true;
				colvarProductRetail.IsPrimaryKey = false;
				colvarProductRetail.IsForeignKey = false;
				colvarProductRetail.IsReadOnly = false;
				colvarProductRetail.DefaultSetting = @"";
				colvarProductRetail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductRetail);

				TableSchema.TableColumn colvarEmployeeCost = new TableSchema.TableColumn(schema);
				colvarEmployeeCost.ColumnName = "EmployeeCost";
				colvarEmployeeCost.DataType = DbType.Currency;
				colvarEmployeeCost.MaxLength = 0;
				colvarEmployeeCost.AutoIncrement = false;
				colvarEmployeeCost.IsNullable = true;
				colvarEmployeeCost.IsPrimaryKey = false;
				colvarEmployeeCost.IsForeignKey = false;
				colvarEmployeeCost.IsReadOnly = false;
				colvarEmployeeCost.DefaultSetting = @"";
				colvarEmployeeCost.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmployeeCost);

				TableSchema.TableColumn colvarIsCurrent = new TableSchema.TableColumn(schema);
				colvarIsCurrent.ColumnName = "IsCurrent";
				colvarIsCurrent.DataType = DbType.Boolean;
				colvarIsCurrent.MaxLength = 0;
				colvarIsCurrent.AutoIncrement = false;
				colvarIsCurrent.IsNullable = false;
				colvarIsCurrent.IsPrimaryKey = false;
				colvarIsCurrent.IsForeignKey = false;
				colvarIsCurrent.IsReadOnly = false;
				colvarIsCurrent.DefaultSetting = @"((0))";
				colvarIsCurrent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCurrent);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_ProductPriceSchemas",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_ProductPriceSchema LoadFrom(AE_ProductPriceSchema item)
		{
			AE_ProductPriceSchema result = new AE_ProductPriceSchema();
			if (item.ProductPriceSchemaID != default(int)) {
				result.LoadByKey(item.ProductPriceSchemaID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ProductPriceSchemaID {
			get { return GetColumnValue<int>(Columns.ProductPriceSchemaID); }
			set {
				SetColumnValue(Columns.ProductPriceSchemaID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductPriceSchemaID));
			}
		}
		[DataMember]
		public string ProductSkwId {
			get { return GetColumnValue<string>(Columns.ProductSkwId); }
			set {
				SetColumnValue(Columns.ProductSkwId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductSkwId));
			}
		}
		[DataMember]
		public decimal ProductCost {
			get { return GetColumnValue<decimal>(Columns.ProductCost); }
			set {
				SetColumnValue(Columns.ProductCost, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductCost));
			}
		}
		[DataMember]
		public decimal? ProductRetail {
			get { return GetColumnValue<decimal?>(Columns.ProductRetail); }
			set {
				SetColumnValue(Columns.ProductRetail, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductRetail));
			}
		}
		[DataMember]
		public decimal? EmployeeCost {
			get { return GetColumnValue<decimal?>(Columns.EmployeeCost); }
			set {
				SetColumnValue(Columns.EmployeeCost, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmployeeCost));
			}
		}
		[DataMember]
		public bool IsCurrent {
			get { return GetColumnValue<bool>(Columns.IsCurrent); }
			set {
				SetColumnValue(Columns.IsCurrent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCurrent));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Product _ProductSkw;
		//Relationship: FK_AE_ProductPriceSchemas_AE_Products
		public AE_Product ProductSkw
		{
			get
			{
				if(_ProductSkw == null) {
					_ProductSkw = AE_Product.FetchByID(this.ProductSkwId);
				}
				return _ProductSkw;
			}
			set
			{
				SetColumnValue("ProductSkwId", value.ProductSkwID);
				_ProductSkw = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ProductSkwId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ProductPriceSchemaIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ProductSkwIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ProductCostColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ProductRetailColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn EmployeeCostColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsCurrentColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ProductPriceSchemaID = @"ProductPriceSchemaID";
			public static readonly string ProductSkwId = @"ProductSkwId";
			public static readonly string ProductCost = @"ProductCost";
			public static readonly string ProductRetail = @"ProductRetail";
			public static readonly string EmployeeCost = @"EmployeeCost";
			public static readonly string IsCurrent = @"IsCurrent";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ProductPriceSchemaID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the AE_Product class.
	/// </summary>
	[DataContract]
	public partial class AE_ProductCollection : ActiveList<AE_Product, AE_ProductCollection>
	{
		public static AE_ProductCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ProductCollection result = new AE_ProductCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_Product item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_Products table.
	/// </summary>
	[DataContract]
	public partial class AE_Product : ActiveRecord<AE_Product>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_Product()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_Products", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarProductSkwID = new TableSchema.TableColumn(schema);
				colvarProductSkwID.ColumnName = "ProductSkwID";
				colvarProductSkwID.DataType = DbType.AnsiString;
				colvarProductSkwID.MaxLength = 50;
				colvarProductSkwID.AutoIncrement = false;
				colvarProductSkwID.IsNullable = false;
				colvarProductSkwID.IsPrimaryKey = true;
				colvarProductSkwID.IsForeignKey = false;
				colvarProductSkwID.IsReadOnly = false;
				colvarProductSkwID.DefaultSetting = @"";
				colvarProductSkwID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductSkwID);

				TableSchema.TableColumn colvarProductTypeId = new TableSchema.TableColumn(schema);
				colvarProductTypeId.ColumnName = "ProductTypeId";
				colvarProductTypeId.DataType = DbType.AnsiString;
				colvarProductTypeId.MaxLength = 30;
				colvarProductTypeId.AutoIncrement = false;
				colvarProductTypeId.IsNullable = false;
				colvarProductTypeId.IsPrimaryKey = false;
				colvarProductTypeId.IsForeignKey = true;
				colvarProductTypeId.IsReadOnly = false;
				colvarProductTypeId.DefaultSetting = @"";
				colvarProductTypeId.ForeignKeyTableName = "AE_ProductTypes";
				schema.Columns.Add(colvarProductTypeId);

				TableSchema.TableColumn colvarManufacturerId = new TableSchema.TableColumn(schema);
				colvarManufacturerId.ColumnName = "ManufacturerId";
				colvarManufacturerId.DataType = DbType.AnsiString;
				colvarManufacturerId.MaxLength = 20;
				colvarManufacturerId.AutoIncrement = false;
				colvarManufacturerId.IsNullable = true;
				colvarManufacturerId.IsPrimaryKey = false;
				colvarManufacturerId.IsForeignKey = true;
				colvarManufacturerId.IsReadOnly = false;
				colvarManufacturerId.DefaultSetting = @"";
				colvarManufacturerId.ForeignKeyTableName = "AE_Manufacturers";
				schema.Columns.Add(colvarManufacturerId);

				TableSchema.TableColumn colvarProductName = new TableSchema.TableColumn(schema);
				colvarProductName.ColumnName = "ProductName";
				colvarProductName.DataType = DbType.String;
				colvarProductName.MaxLength = 150;
				colvarProductName.AutoIncrement = false;
				colvarProductName.IsNullable = false;
				colvarProductName.IsPrimaryKey = false;
				colvarProductName.IsForeignKey = false;
				colvarProductName.IsReadOnly = false;
				colvarProductName.DefaultSetting = @"";
				colvarProductName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductName);

				TableSchema.TableColumn colvarProductDescription = new TableSchema.TableColumn(schema);
				colvarProductDescription.ColumnName = "ProductDescription";
				colvarProductDescription.DataType = DbType.String;
				colvarProductDescription.MaxLength = -1;
				colvarProductDescription.AutoIncrement = false;
				colvarProductDescription.IsNullable = true;
				colvarProductDescription.IsPrimaryKey = false;
				colvarProductDescription.IsForeignKey = false;
				colvarProductDescription.IsReadOnly = false;
				colvarProductDescription.DefaultSetting = @"";
				colvarProductDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductDescription);

				TableSchema.TableColumn colvarShortName = new TableSchema.TableColumn(schema);
				colvarShortName.ColumnName = "ShortName";
				colvarShortName.DataType = DbType.String;
				colvarShortName.MaxLength = 50;
				colvarShortName.AutoIncrement = false;
				colvarShortName.IsNullable = false;
				colvarShortName.IsPrimaryKey = false;
				colvarShortName.IsForeignKey = false;
				colvarShortName.IsReadOnly = false;
				colvarShortName.DefaultSetting = @"";
				colvarShortName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortName);

				TableSchema.TableColumn colvarShowInInventory = new TableSchema.TableColumn(schema);
				colvarShowInInventory.ColumnName = "ShowInInventory";
				colvarShowInInventory.DataType = DbType.Boolean;
				colvarShowInInventory.MaxLength = 0;
				colvarShowInInventory.AutoIncrement = false;
				colvarShowInInventory.IsNullable = false;
				colvarShowInInventory.IsPrimaryKey = false;
				colvarShowInInventory.IsForeignKey = false;
				colvarShowInInventory.IsReadOnly = false;
				colvarShowInInventory.DefaultSetting = @"((1))";
				colvarShowInInventory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShowInInventory);

				TableSchema.TableColumn colvarProductImageName = new TableSchema.TableColumn(schema);
				colvarProductImageName.ColumnName = "ProductImageName";
				colvarProductImageName.DataType = DbType.String;
				colvarProductImageName.MaxLength = 50;
				colvarProductImageName.AutoIncrement = false;
				colvarProductImageName.IsNullable = true;
				colvarProductImageName.IsPrimaryKey = false;
				colvarProductImageName.IsForeignKey = false;
				colvarProductImageName.IsReadOnly = false;
				colvarProductImageName.DefaultSetting = @"(N'DefaultProdImage.png')";
				colvarProductImageName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductImageName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_Products",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_Product LoadFrom(AE_Product item)
		{
			AE_Product result = new AE_Product();
			if (item.ProductSkwID != default(string)) {
				result.LoadByKey(item.ProductSkwID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ProductSkwID {
			get { return GetColumnValue<string>(Columns.ProductSkwID); }
			set {
				SetColumnValue(Columns.ProductSkwID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductSkwID));
			}
		}
		[DataMember]
		public string ProductTypeId {
			get { return GetColumnValue<string>(Columns.ProductTypeId); }
			set {
				SetColumnValue(Columns.ProductTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductTypeId));
			}
		}
		[DataMember]
		public string ManufacturerId {
			get { return GetColumnValue<string>(Columns.ManufacturerId); }
			set {
				SetColumnValue(Columns.ManufacturerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManufacturerId));
			}
		}
		[DataMember]
		public string ProductName {
			get { return GetColumnValue<string>(Columns.ProductName); }
			set {
				SetColumnValue(Columns.ProductName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductName));
			}
		}
		[DataMember]
		public string ProductDescription {
			get { return GetColumnValue<string>(Columns.ProductDescription); }
			set {
				SetColumnValue(Columns.ProductDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductDescription));
			}
		}
		[DataMember]
		public string ShortName {
			get { return GetColumnValue<string>(Columns.ShortName); }
			set {
				SetColumnValue(Columns.ShortName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortName));
			}
		}
		[DataMember]
		public bool ShowInInventory {
			get { return GetColumnValue<bool>(Columns.ShowInInventory); }
			set {
				SetColumnValue(Columns.ShowInInventory, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShowInInventory));
			}
		}
		[DataMember]
		public string ProductImageName {
			get { return GetColumnValue<string>(Columns.ProductImageName); }
			set {
				SetColumnValue(Columns.ProductImageName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductImageName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Manufacturer _Manufacturer;
		//Relationship: FK_AE_Products_AE_Manufacturers
		public AE_Manufacturer Manufacturer
		{
			get
			{
				if(_Manufacturer == null) {
					_Manufacturer = AE_Manufacturer.FetchByID(this.ManufacturerId);
				}
				return _Manufacturer;
			}
			set
			{
				SetColumnValue("ManufacturerId", value.ManufacturerID);
				_Manufacturer = value;
			}
		}

		private AE_ProductType _ProductType;
		//Relationship: FK_AE_Products_AE_ProductTypes
		public AE_ProductType ProductType
		{
			get
			{
				if(_ProductType == null) {
					_ProductType = AE_ProductType.FetchByID(this.ProductTypeId);
				}
				return _ProductType;
			}
			set
			{
				SetColumnValue("ProductTypeId", value.ProductTypeID);
				_ProductType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ProductTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ProductSkwIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ProductTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ManufacturerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ProductNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ProductDescriptionColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ShortNameColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ShowInInventoryColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ProductImageNameColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ProductSkwID = @"ProductSkwID";
			public static readonly string ProductTypeId = @"ProductTypeId";
			public static readonly string ManufacturerId = @"ManufacturerId";
			public static readonly string ProductName = @"ProductName";
			public static readonly string ProductDescription = @"ProductDescription";
			public static readonly string ShortName = @"ShortName";
			public static readonly string ShowInInventory = @"ShowInInventory";
			public static readonly string ProductImageName = @"ProductImageName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ProductSkwID; }
		}
		*/

		#region Foreign Collections

		private AE_DealerPurchaseOrderItemCollection _AE_DealerPurchaseOrderItemsCol;
		//Relationship: FK_AE_DealerPurchaseOrderItems_AE_Products
		public AE_DealerPurchaseOrderItemCollection AE_DealerPurchaseOrderItemsCol
		{
			get
			{
				if(_AE_DealerPurchaseOrderItemsCol == null) {
					_AE_DealerPurchaseOrderItemsCol = new AE_DealerPurchaseOrderItemCollection();
					_AE_DealerPurchaseOrderItemsCol.LoadAndCloseReader(AE_DealerPurchaseOrderItem.Query()
						.WHERE(AE_DealerPurchaseOrderItem.Columns.ProductSkwId, ProductSkwID).ExecuteReader());
				}
				return _AE_DealerPurchaseOrderItemsCol;
			}
		}

		private AE_ProductGroupCollection _AE_ProductGroupsCol;
		//Relationship: FK_AE_ProductGroups_AE_ProductGroupSkw
		public AE_ProductGroupCollection AE_ProductGroupsCol
		{
			get
			{
				if(_AE_ProductGroupsCol == null) {
					_AE_ProductGroupsCol = new AE_ProductGroupCollection();
					_AE_ProductGroupsCol.LoadAndCloseReader(AE_ProductGroup.Query()
						.WHERE(AE_ProductGroup.Columns.ProductGrpSkwId, ProductSkwID).ExecuteReader());
				}
				return _AE_ProductGroupsCol;
			}
		}

		private AE_ProductGroupCollection _AE_ProductGroups02Col;
		//Relationship: FK_AE_ProductGroups_AE_Products
		public AE_ProductGroupCollection AE_ProductGroups02Col
		{
			get
			{
				if(_AE_ProductGroups02Col == null) {
					_AE_ProductGroups02Col = new AE_ProductGroupCollection();
					_AE_ProductGroups02Col.LoadAndCloseReader(AE_ProductGroup.Query()
						.WHERE(AE_ProductGroup.Columns.ProductSkwId, ProductSkwID).ExecuteReader());
				}
				return _AE_ProductGroups02Col;
			}
		}

		private AE_ProductPriceSchemaCollection _AE_ProductPriceSchemasCol;
		//Relationship: FK_AE_ProductPriceSchemas_AE_Products
		public AE_ProductPriceSchemaCollection AE_ProductPriceSchemasCol
		{
			get
			{
				if(_AE_ProductPriceSchemasCol == null) {
					_AE_ProductPriceSchemasCol = new AE_ProductPriceSchemaCollection();
					_AE_ProductPriceSchemasCol.LoadAndCloseReader(AE_ProductPriceSchema.Query()
						.WHERE(AE_ProductPriceSchema.Columns.ProductSkwId, ProductSkwID).ExecuteReader());
				}
				return _AE_ProductPriceSchemasCol;
			}
		}

		private IE_PackingSlipItemCollection _IE_PackingSlipItemsCol;
		//Relationship: FK_IE_PackingSlipItems_AE_Products
		public IE_PackingSlipItemCollection IE_PackingSlipItemsCol
		{
			get
			{
				if(_IE_PackingSlipItemsCol == null) {
					_IE_PackingSlipItemsCol = new IE_PackingSlipItemCollection();
					_IE_PackingSlipItemsCol.LoadAndCloseReader(IE_PackingSlipItem.Query()
						.WHERE(IE_PackingSlipItem.Columns.ProductSkwId, ProductSkwID).ExecuteReader());
				}
				return _IE_PackingSlipItemsCol;
			}
		}

		private QL_LeadProductOfferCollection _QL_LeadProductOffersCol;
		//Relationship: FK_QL_LeadProductOffers_AE_Products
		public QL_LeadProductOfferCollection QL_LeadProductOffersCol
		{
			get
			{
				if(_QL_LeadProductOffersCol == null) {
					_QL_LeadProductOffersCol = new QL_LeadProductOfferCollection();
					_QL_LeadProductOffersCol.LoadAndCloseReader(QL_LeadProductOffer.Query()
						.WHERE(QL_LeadProductOffer.Columns.ProductSkwId, ProductSkwID).ExecuteReader());
				}
				return _QL_LeadProductOffersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_ProductType class.
	/// </summary>
	[DataContract]
	public partial class AE_ProductTypeCollection : ActiveList<AE_ProductType, AE_ProductTypeCollection>
	{
		public static AE_ProductTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_ProductTypeCollection result = new AE_ProductTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_ProductType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_ProductTypes table.
	/// </summary>
	[DataContract]
	public partial class AE_ProductType : ActiveRecord<AE_ProductType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_ProductType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_ProductTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarProductTypeID = new TableSchema.TableColumn(schema);
				colvarProductTypeID.ColumnName = "ProductTypeID";
				colvarProductTypeID.DataType = DbType.AnsiString;
				colvarProductTypeID.MaxLength = 30;
				colvarProductTypeID.AutoIncrement = false;
				colvarProductTypeID.IsNullable = false;
				colvarProductTypeID.IsPrimaryKey = true;
				colvarProductTypeID.IsForeignKey = false;
				colvarProductTypeID.IsReadOnly = false;
				colvarProductTypeID.DefaultSetting = @"";
				colvarProductTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductTypeID);

				TableSchema.TableColumn colvarProductTypeName = new TableSchema.TableColumn(schema);
				colvarProductTypeName.ColumnName = "ProductTypeName";
				colvarProductTypeName.DataType = DbType.String;
				colvarProductTypeName.MaxLength = 150;
				colvarProductTypeName.AutoIncrement = false;
				colvarProductTypeName.IsNullable = false;
				colvarProductTypeName.IsPrimaryKey = false;
				colvarProductTypeName.IsForeignKey = false;
				colvarProductTypeName.IsReadOnly = false;
				colvarProductTypeName.DefaultSetting = @"";
				colvarProductTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductTypeName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_ProductTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_ProductType LoadFrom(AE_ProductType item)
		{
			AE_ProductType result = new AE_ProductType();
			if (item.ProductTypeID != default(string)) {
				result.LoadByKey(item.ProductTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ProductTypeID {
			get { return GetColumnValue<string>(Columns.ProductTypeID); }
			set {
				SetColumnValue(Columns.ProductTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductTypeID));
			}
		}
		[DataMember]
		public string ProductTypeName {
			get { return GetColumnValue<string>(Columns.ProductTypeName); }
			set {
				SetColumnValue(Columns.ProductTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductTypeName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ProductTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ProductTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ProductTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ProductTypeID = @"ProductTypeID";
			public static readonly string ProductTypeName = @"ProductTypeName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ProductTypeID; }
		}
		*/

		#region Foreign Collections

		private AE_ProductCollection _AE_ProductsCol;
		//Relationship: FK_AE_Products_AE_ProductTypes
		public AE_ProductCollection AE_ProductsCol
		{
			get
			{
				if(_AE_ProductsCol == null) {
					_AE_ProductsCol = new AE_ProductCollection();
					_AE_ProductsCol.LoadAndCloseReader(AE_Product.Query()
						.WHERE(AE_Product.Columns.ProductTypeId, ProductTypeID).ExecuteReader());
				}
				return _AE_ProductsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the AE_TaxOption class.
	/// </summary>
	[DataContract]
	public partial class AE_TaxOptionCollection : ActiveList<AE_TaxOption, AE_TaxOptionCollection>
	{
		public static AE_TaxOptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			AE_TaxOptionCollection result = new AE_TaxOptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (AE_TaxOption item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the AE_TaxOptions table.
	/// </summary>
	[DataContract]
	public partial class AE_TaxOption : ActiveRecord<AE_TaxOption>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string ExemptID = "EXT";
			[EnumMember()] public const string Taxable_ID = "TAX";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public AE_TaxOption()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("AE_TaxOptions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTaxOptionID = new TableSchema.TableColumn(schema);
				colvarTaxOptionID.ColumnName = "TaxOptionID";
				colvarTaxOptionID.DataType = DbType.AnsiStringFixedLength;
				colvarTaxOptionID.MaxLength = 3;
				colvarTaxOptionID.AutoIncrement = false;
				colvarTaxOptionID.IsNullable = false;
				colvarTaxOptionID.IsPrimaryKey = true;
				colvarTaxOptionID.IsForeignKey = false;
				colvarTaxOptionID.IsReadOnly = false;
				colvarTaxOptionID.DefaultSetting = @"";
				colvarTaxOptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxOptionID);

				TableSchema.TableColumn colvarTaxOption = new TableSchema.TableColumn(schema);
				colvarTaxOption.ColumnName = "TaxOption";
				colvarTaxOption.DataType = DbType.AnsiString;
				colvarTaxOption.MaxLength = 50;
				colvarTaxOption.AutoIncrement = false;
				colvarTaxOption.IsNullable = false;
				colvarTaxOption.IsPrimaryKey = false;
				colvarTaxOption.IsForeignKey = false;
				colvarTaxOption.IsReadOnly = false;
				colvarTaxOption.DefaultSetting = @"";
				colvarTaxOption.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxOption);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarModifiedById = new TableSchema.TableColumn(schema);
				colvarModifiedById.ColumnName = "ModifiedById";
				colvarModifiedById.DataType = DbType.String;
				colvarModifiedById.MaxLength = 50;
				colvarModifiedById.AutoIncrement = false;
				colvarModifiedById.IsNullable = false;
				colvarModifiedById.IsPrimaryKey = false;
				colvarModifiedById.IsForeignKey = false;
				colvarModifiedById.IsReadOnly = false;
				colvarModifiedById.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedById);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedById = new TableSchema.TableColumn(schema);
				colvarCreatedById.ColumnName = "CreatedById";
				colvarCreatedById.DataType = DbType.String;
				colvarCreatedById.MaxLength = 50;
				colvarCreatedById.AutoIncrement = false;
				colvarCreatedById.IsNullable = false;
				colvarCreatedById.IsPrimaryKey = false;
				colvarCreatedById.IsForeignKey = false;
				colvarCreatedById.IsReadOnly = false;
				colvarCreatedById.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedById);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("AE_TaxOptions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static AE_TaxOption LoadFrom(AE_TaxOption item)
		{
			AE_TaxOption result = new AE_TaxOption();
			if (item.TaxOptionID != default(string)) {
				result.LoadByKey(item.TaxOptionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string TaxOptionID {
			get { return GetColumnValue<string>(Columns.TaxOptionID); }
			set {
				SetColumnValue(Columns.TaxOptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TaxOptionID));
			}
		}
		[DataMember]
		public string TaxOption {
			get { return GetColumnValue<string>(Columns.TaxOption); }
			set {
				SetColumnValue(Columns.TaxOption, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TaxOption));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string ModifiedById {
			get { return GetColumnValue<string>(Columns.ModifiedById); }
			set {
				SetColumnValue(Columns.ModifiedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedById));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedById {
			get { return GetColumnValue<string>(Columns.CreatedById); }
			set {
				SetColumnValue(Columns.CreatedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedById));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return TaxOption;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TaxOptionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TaxOptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TaxOptionID = @"TaxOptionID";
			public static readonly string TaxOption = @"TaxOption";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string ModifiedById = @"ModifiedById";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedById = @"CreatedById";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TaxOptionID; }
		}
		*/

		#region Foreign Collections

		private AE_InvoiceItemCollection _AE_InvoiceItemsCol;
		//Relationship: FK_AE_InvoiceItems_AE_TaxOptions
		public AE_InvoiceItemCollection AE_InvoiceItemsCol
		{
			get
			{
				if(_AE_InvoiceItemsCol == null) {
					_AE_InvoiceItemsCol = new AE_InvoiceItemCollection();
					_AE_InvoiceItemsCol.LoadAndCloseReader(AE_InvoiceItem.Query()
						.WHERE(AE_InvoiceItem.Columns.TaxOptionId, TaxOptionID).ExecuteReader());
				}
				return _AE_InvoiceItemsCol;
			}
		}

		private AE_ItemCollection _AE_ItemsCol;
		//Relationship: FK_AE_Items_AE_TaxOptions
		public AE_ItemCollection AE_ItemsCol
		{
			get
			{
				if(_AE_ItemsCol == null) {
					_AE_ItemsCol = new AE_ItemCollection();
					_AE_ItemsCol.LoadAndCloseReader(AE_Item.Query()
						.WHERE(AE_Item.Columns.TaxOptionId, TaxOptionID).ExecuteReader());
				}
				return _AE_ItemsCol;
			}
		}

		private AE_ITEMS_NEWCollection _AE_ITEMS_NEWSCol;
		//Relationship: FK_AE_ITEMS_NEW_AE_TaxOptions
		public AE_ITEMS_NEWCollection AE_ITEMS_NEWSCol
		{
			get
			{
				if(_AE_ITEMS_NEWSCol == null) {
					_AE_ITEMS_NEWSCol = new AE_ITEMS_NEWCollection();
					_AE_ITEMS_NEWSCol.LoadAndCloseReader(AE_ITEMS_NEW.Query()
						.WHERE(AE_ITEMS_NEW.Columns.TaxOptionId, TaxOptionID).ExecuteReader());
				}
				return _AE_ITEMS_NEWSCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the BE_Barcode class.
	/// </summary>
	[DataContract]
	public partial class BE_BarcodeCollection : ActiveList<BE_Barcode, BE_BarcodeCollection>
	{
		public static BE_BarcodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BE_BarcodeCollection result = new BE_BarcodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BE_Barcode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BE_Barcodes table.
	/// </summary>
	[DataContract]
	public partial class BE_Barcode : ActiveRecord<BE_Barcode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BE_Barcode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BE_Barcodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBarcodeID = new TableSchema.TableColumn(schema);
				colvarBarcodeID.ColumnName = "BarcodeID";
				colvarBarcodeID.DataType = DbType.Int32;
				colvarBarcodeID.MaxLength = 0;
				colvarBarcodeID.AutoIncrement = true;
				colvarBarcodeID.IsNullable = false;
				colvarBarcodeID.IsPrimaryKey = true;
				colvarBarcodeID.IsForeignKey = false;
				colvarBarcodeID.IsReadOnly = false;
				colvarBarcodeID.DefaultSetting = @"";
				colvarBarcodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeID);

				TableSchema.TableColumn colvarDocTypeId = new TableSchema.TableColumn(schema);
				colvarDocTypeId.ColumnName = "DocTypeId";
				colvarDocTypeId.DataType = DbType.Int32;
				colvarDocTypeId.MaxLength = 0;
				colvarDocTypeId.AutoIncrement = false;
				colvarDocTypeId.IsNullable = false;
				colvarDocTypeId.IsPrimaryKey = false;
				colvarDocTypeId.IsForeignKey = true;
				colvarDocTypeId.IsReadOnly = false;
				colvarDocTypeId.DefaultSetting = @"";
				colvarDocTypeId.ForeignKeyTableName = "BE_DocTypes";
				schema.Columns.Add(colvarDocTypeId);

				TableSchema.TableColumn colvarBarcodeNumber = new TableSchema.TableColumn(schema);
				colvarBarcodeNumber.ColumnName = "BarcodeNumber";
				colvarBarcodeNumber.DataType = DbType.String;
				colvarBarcodeNumber.MaxLength = 30;
				colvarBarcodeNumber.AutoIncrement = false;
				colvarBarcodeNumber.IsNullable = false;
				colvarBarcodeNumber.IsPrimaryKey = false;
				colvarBarcodeNumber.IsForeignKey = false;
				colvarBarcodeNumber.IsReadOnly = false;
				colvarBarcodeNumber.DefaultSetting = @"";
				colvarBarcodeNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeNumber);

				TableSchema.TableColumn colvarForeignKey = new TableSchema.TableColumn(schema);
				colvarForeignKey.ColumnName = "ForeignKey";
				colvarForeignKey.DataType = DbType.Int32;
				colvarForeignKey.MaxLength = 0;
				colvarForeignKey.AutoIncrement = false;
				colvarForeignKey.IsNullable = false;
				colvarForeignKey.IsPrimaryKey = false;
				colvarForeignKey.IsForeignKey = false;
				colvarForeignKey.IsReadOnly = false;
				colvarForeignKey.DefaultSetting = @"";
				colvarForeignKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForeignKey);

				TableSchema.TableColumn colvarDateX = new TableSchema.TableColumn(schema);
				colvarDateX.ColumnName = "Date";
				colvarDateX.DataType = DbType.DateTime;
				colvarDateX.MaxLength = 0;
				colvarDateX.AutoIncrement = false;
				colvarDateX.IsNullable = false;
				colvarDateX.IsPrimaryKey = false;
				colvarDateX.IsForeignKey = false;
				colvarDateX.IsReadOnly = false;
				colvarDateX.DefaultSetting = @"";
				colvarDateX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateX);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BE_Barcodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BE_Barcode LoadFrom(BE_Barcode item)
		{
			BE_Barcode result = new BE_Barcode();
			if (item.BarcodeID != default(int)) {
				result.LoadByKey(item.BarcodeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BarcodeID {
			get { return GetColumnValue<int>(Columns.BarcodeID); }
			set {
				SetColumnValue(Columns.BarcodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeID));
			}
		}
		[DataMember]
		public int DocTypeId {
			get { return GetColumnValue<int>(Columns.DocTypeId); }
			set {
				SetColumnValue(Columns.DocTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocTypeId));
			}
		}
		[DataMember]
		public string BarcodeNumber {
			get { return GetColumnValue<string>(Columns.BarcodeNumber); }
			set {
				SetColumnValue(Columns.BarcodeNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeNumber));
			}
		}
		[DataMember]
		public int ForeignKey {
			get { return GetColumnValue<int>(Columns.ForeignKey); }
			set {
				SetColumnValue(Columns.ForeignKey, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ForeignKey));
			}
		}
		[DataMember]
		public DateTime DateX {
			get { return GetColumnValue<DateTime>(Columns.DateX); }
			set {
				SetColumnValue(Columns.DateX, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DateX));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private BE_DocType _DocType;
		//Relationship: FK_BE_Barcodes_BE_DocTypes
		public BE_DocType DocType
		{
			get
			{
				if(_DocType == null) {
					_DocType = BE_DocType.FetchByID(this.DocTypeId);
				}
				return _DocType;
			}
			set
			{
				SetColumnValue("DocTypeId", value.DocTypeID);
				_DocType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BarcodeID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BarcodeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DocTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BarcodeNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ForeignKeyColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DateXColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BarcodeID = @"BarcodeID";
			public static readonly string DocTypeId = @"DocTypeId";
			public static readonly string BarcodeNumber = @"BarcodeNumber";
			public static readonly string ForeignKey = @"ForeignKey";
			public static readonly string DateX = @"Date";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BarcodeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the BE_BarcodeSchema class.
	/// </summary>
	[DataContract]
	public partial class BE_BarcodeSchemaCollection : ActiveList<BE_BarcodeSchema, BE_BarcodeSchemaCollection>
	{
		public static BE_BarcodeSchemaCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BE_BarcodeSchemaCollection result = new BE_BarcodeSchemaCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BE_BarcodeSchema item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BE_BarcodeSchema table.
	/// </summary>
	[DataContract]
	public partial class BE_BarcodeSchema : ActiveRecord<BE_BarcodeSchema>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BE_BarcodeSchema()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BE_BarcodeSchema", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBarcodeSchemaID = new TableSchema.TableColumn(schema);
				colvarBarcodeSchemaID.ColumnName = "BarcodeSchemaID";
				colvarBarcodeSchemaID.DataType = DbType.Int32;
				colvarBarcodeSchemaID.MaxLength = 0;
				colvarBarcodeSchemaID.AutoIncrement = true;
				colvarBarcodeSchemaID.IsNullable = false;
				colvarBarcodeSchemaID.IsPrimaryKey = true;
				colvarBarcodeSchemaID.IsForeignKey = false;
				colvarBarcodeSchemaID.IsReadOnly = false;
				colvarBarcodeSchemaID.DefaultSetting = @"";
				colvarBarcodeSchemaID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeSchemaID);

				TableSchema.TableColumn colvarDocTypeId = new TableSchema.TableColumn(schema);
				colvarDocTypeId.ColumnName = "DocTypeId";
				colvarDocTypeId.DataType = DbType.Int32;
				colvarDocTypeId.MaxLength = 0;
				colvarDocTypeId.AutoIncrement = false;
				colvarDocTypeId.IsNullable = false;
				colvarDocTypeId.IsPrimaryKey = false;
				colvarDocTypeId.IsForeignKey = true;
				colvarDocTypeId.IsReadOnly = false;
				colvarDocTypeId.DefaultSetting = @"";
				colvarDocTypeId.ForeignKeyTableName = "BE_DocTypes";
				schema.Columns.Add(colvarDocTypeId);

				TableSchema.TableColumn colvarPrefixId = new TableSchema.TableColumn(schema);
				colvarPrefixId.ColumnName = "PrefixId";
				colvarPrefixId.DataType = DbType.Int32;
				colvarPrefixId.MaxLength = 0;
				colvarPrefixId.AutoIncrement = false;
				colvarPrefixId.IsNullable = true;
				colvarPrefixId.IsPrimaryKey = false;
				colvarPrefixId.IsForeignKey = true;
				colvarPrefixId.IsReadOnly = false;
				colvarPrefixId.DefaultSetting = @"";
				colvarPrefixId.ForeignKeyTableName = "BE_Prefixes";
				schema.Columns.Add(colvarPrefixId);

				TableSchema.TableColumn colvarPrefixName = new TableSchema.TableColumn(schema);
				colvarPrefixName.ColumnName = "PrefixName";
				colvarPrefixName.DataType = DbType.String;
				colvarPrefixName.MaxLength = 8;
				colvarPrefixName.AutoIncrement = false;
				colvarPrefixName.IsNullable = false;
				colvarPrefixName.IsPrimaryKey = false;
				colvarPrefixName.IsForeignKey = false;
				colvarPrefixName.IsReadOnly = false;
				colvarPrefixName.DefaultSetting = @"";
				colvarPrefixName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefixName);

				TableSchema.TableColumn colvarVersion = new TableSchema.TableColumn(schema);
				colvarVersion.ColumnName = "Version";
				colvarVersion.DataType = DbType.String;
				colvarVersion.MaxLength = 3;
				colvarVersion.AutoIncrement = false;
				colvarVersion.IsNullable = false;
				colvarVersion.IsPrimaryKey = false;
				colvarVersion.IsForeignKey = false;
				colvarVersion.IsReadOnly = false;
				colvarVersion.DefaultSetting = @"";
				colvarVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersion);

				TableSchema.TableColumn colvarStartRange = new TableSchema.TableColumn(schema);
				colvarStartRange.ColumnName = "StartRange";
				colvarStartRange.DataType = DbType.String;
				colvarStartRange.MaxLength = 9;
				colvarStartRange.AutoIncrement = false;
				colvarStartRange.IsNullable = false;
				colvarStartRange.IsPrimaryKey = false;
				colvarStartRange.IsForeignKey = false;
				colvarStartRange.IsReadOnly = false;
				colvarStartRange.DefaultSetting = @"";
				colvarStartRange.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartRange);

				TableSchema.TableColumn colvarEndRange = new TableSchema.TableColumn(schema);
				colvarEndRange.ColumnName = "EndRange";
				colvarEndRange.DataType = DbType.String;
				colvarEndRange.MaxLength = 9;
				colvarEndRange.AutoIncrement = false;
				colvarEndRange.IsNullable = false;
				colvarEndRange.IsPrimaryKey = false;
				colvarEndRange.IsForeignKey = false;
				colvarEndRange.IsReadOnly = false;
				colvarEndRange.DefaultSetting = @"";
				colvarEndRange.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndRange);

				TableSchema.TableColumn colvarIsDefault = new TableSchema.TableColumn(schema);
				colvarIsDefault.ColumnName = "IsDefault";
				colvarIsDefault.DataType = DbType.Boolean;
				colvarIsDefault.MaxLength = 0;
				colvarIsDefault.AutoIncrement = false;
				colvarIsDefault.IsNullable = false;
				colvarIsDefault.IsPrimaryKey = false;
				colvarIsDefault.IsForeignKey = false;
				colvarIsDefault.IsReadOnly = false;
				colvarIsDefault.DefaultSetting = @"";
				colvarIsDefault.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDefault);

				TableSchema.TableColumn colvarIsAutogenerated = new TableSchema.TableColumn(schema);
				colvarIsAutogenerated.ColumnName = "IsAutogenerated";
				colvarIsAutogenerated.DataType = DbType.Boolean;
				colvarIsAutogenerated.MaxLength = 0;
				colvarIsAutogenerated.AutoIncrement = false;
				colvarIsAutogenerated.IsNullable = false;
				colvarIsAutogenerated.IsPrimaryKey = false;
				colvarIsAutogenerated.IsForeignKey = false;
				colvarIsAutogenerated.IsReadOnly = false;
				colvarIsAutogenerated.DefaultSetting = @"";
				colvarIsAutogenerated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAutogenerated);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BE_BarcodeSchema",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BE_BarcodeSchema LoadFrom(BE_BarcodeSchema item)
		{
			BE_BarcodeSchema result = new BE_BarcodeSchema();
			if (item.BarcodeSchemaID != default(int)) {
				result.LoadByKey(item.BarcodeSchemaID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BarcodeSchemaID {
			get { return GetColumnValue<int>(Columns.BarcodeSchemaID); }
			set {
				SetColumnValue(Columns.BarcodeSchemaID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeSchemaID));
			}
		}
		[DataMember]
		public int DocTypeId {
			get { return GetColumnValue<int>(Columns.DocTypeId); }
			set {
				SetColumnValue(Columns.DocTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocTypeId));
			}
		}
		[DataMember]
		public int? PrefixId {
			get { return GetColumnValue<int?>(Columns.PrefixId); }
			set {
				SetColumnValue(Columns.PrefixId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrefixId));
			}
		}
		[DataMember]
		public string PrefixName {
			get { return GetColumnValue<string>(Columns.PrefixName); }
			set {
				SetColumnValue(Columns.PrefixName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrefixName));
			}
		}
		[DataMember]
		public string Version {
			get { return GetColumnValue<string>(Columns.Version); }
			set {
				SetColumnValue(Columns.Version, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Version));
			}
		}
		[DataMember]
		public string StartRange {
			get { return GetColumnValue<string>(Columns.StartRange); }
			set {
				SetColumnValue(Columns.StartRange, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartRange));
			}
		}
		[DataMember]
		public string EndRange {
			get { return GetColumnValue<string>(Columns.EndRange); }
			set {
				SetColumnValue(Columns.EndRange, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EndRange));
			}
		}
		[DataMember]
		public bool IsDefault {
			get { return GetColumnValue<bool>(Columns.IsDefault); }
			set {
				SetColumnValue(Columns.IsDefault, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDefault));
			}
		}
		[DataMember]
		public bool IsAutogenerated {
			get { return GetColumnValue<bool>(Columns.IsAutogenerated); }
			set {
				SetColumnValue(Columns.IsAutogenerated, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAutogenerated));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private BE_DocType _DocType;
		//Relationship: FK_BE_BarcodeSchema_BE_DocTypes
		public BE_DocType DocType
		{
			get
			{
				if(_DocType == null) {
					_DocType = BE_DocType.FetchByID(this.DocTypeId);
				}
				return _DocType;
			}
			set
			{
				SetColumnValue("DocTypeId", value.DocTypeID);
				_DocType = value;
			}
		}

		private BE_Prefix _Prefix;
		//Relationship: FK_BE_BarcodeSchema_BE_Prefixes
		public BE_Prefix Prefix
		{
			get
			{
				if(_Prefix == null) {
					_Prefix = BE_Prefix.FetchByID(this.PrefixId);
				}
				return _Prefix;
			}
			set
			{
				SetColumnValue("PrefixId", value.PrefixID);
				_Prefix = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BarcodeSchemaID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BarcodeSchemaIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DocTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PrefixIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PrefixNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn VersionColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StartRangeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn EndRangeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDefaultColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsAutogeneratedColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BarcodeSchemaID = @"BarcodeSchemaID";
			public static readonly string DocTypeId = @"DocTypeId";
			public static readonly string PrefixId = @"PrefixId";
			public static readonly string PrefixName = @"PrefixName";
			public static readonly string Version = @"Version";
			public static readonly string StartRange = @"StartRange";
			public static readonly string EndRange = @"EndRange";
			public static readonly string IsDefault = @"IsDefault";
			public static readonly string IsAutogenerated = @"IsAutogenerated";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BarcodeSchemaID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the BE_BCServiceUpdate class.
	/// </summary>
	[DataContract]
	public partial class BE_BCServiceUpdateCollection : ActiveList<BE_BCServiceUpdate, BE_BCServiceUpdateCollection>
	{
		public static BE_BCServiceUpdateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BE_BCServiceUpdateCollection result = new BE_BCServiceUpdateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BE_BCServiceUpdate item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BE_BCServiceUpdate table.
	/// </summary>
	[DataContract]
	public partial class BE_BCServiceUpdate : ActiveRecord<BE_BCServiceUpdate>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BE_BCServiceUpdate()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BE_BCServiceUpdate", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarOld_BarCode = new TableSchema.TableColumn(schema);
				colvarOld_BarCode.ColumnName = "Old_BarCode";
				colvarOld_BarCode.DataType = DbType.String;
				colvarOld_BarCode.MaxLength = 255;
				colvarOld_BarCode.AutoIncrement = false;
				colvarOld_BarCode.IsNullable = true;
				colvarOld_BarCode.IsPrimaryKey = false;
				colvarOld_BarCode.IsForeignKey = false;
				colvarOld_BarCode.IsReadOnly = false;
				colvarOld_BarCode.DefaultSetting = @"";
				colvarOld_BarCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOld_BarCode);

				TableSchema.TableColumn colvarNew_BarCode = new TableSchema.TableColumn(schema);
				colvarNew_BarCode.ColumnName = "New_BarCode";
				colvarNew_BarCode.DataType = DbType.String;
				colvarNew_BarCode.MaxLength = 255;
				colvarNew_BarCode.AutoIncrement = false;
				colvarNew_BarCode.IsNullable = true;
				colvarNew_BarCode.IsPrimaryKey = false;
				colvarNew_BarCode.IsForeignKey = false;
				colvarNew_BarCode.IsReadOnly = false;
				colvarNew_BarCode.DefaultSetting = @"";
				colvarNew_BarCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNew_BarCode);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BE_BCServiceUpdate",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public string Old_BarCode {
			get { return GetColumnValue<string>(Columns.Old_BarCode); }
			set {
				SetColumnValue(Columns.Old_BarCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Old_BarCode));
			}
		}
		[DataMember]
		public string New_BarCode {
			get { return GetColumnValue<string>(Columns.New_BarCode); }
			set {
				SetColumnValue(Columns.New_BarCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.New_BarCode));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return New_BarCode;
		}

		#region Typed Columns

		public static TableSchema.TableColumn Old_BarCodeColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn New_BarCodeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string Old_BarCode = @"Old_BarCode";
			public static readonly string New_BarCode = @"New_BarCode";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the BE_BundleAccount class.
	/// </summary>
	[DataContract]
	public partial class BE_BundleAccountCollection : ActiveList<BE_BundleAccount, BE_BundleAccountCollection>
	{
		public static BE_BundleAccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BE_BundleAccountCollection result = new BE_BundleAccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BE_BundleAccount item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BE_BundleAccounts table.
	/// </summary>
	[DataContract]
	public partial class BE_BundleAccount : ActiveRecord<BE_BundleAccount>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BE_BundleAccount()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BE_BundleAccounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBundleAccountID = new TableSchema.TableColumn(schema);
				colvarBundleAccountID.ColumnName = "BundleAccountID";
				colvarBundleAccountID.DataType = DbType.Int32;
				colvarBundleAccountID.MaxLength = 0;
				colvarBundleAccountID.AutoIncrement = true;
				colvarBundleAccountID.IsNullable = false;
				colvarBundleAccountID.IsPrimaryKey = true;
				colvarBundleAccountID.IsForeignKey = false;
				colvarBundleAccountID.IsReadOnly = false;
				colvarBundleAccountID.DefaultSetting = @"";
				colvarBundleAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBundleAccountID);

				TableSchema.TableColumn colvarBundleId = new TableSchema.TableColumn(schema);
				colvarBundleId.ColumnName = "BundleId";
				colvarBundleId.DataType = DbType.Int32;
				colvarBundleId.MaxLength = 0;
				colvarBundleId.AutoIncrement = false;
				colvarBundleId.IsNullable = false;
				colvarBundleId.IsPrimaryKey = false;
				colvarBundleId.IsForeignKey = true;
				colvarBundleId.IsReadOnly = false;
				colvarBundleId.DefaultSetting = @"";
				colvarBundleId.ForeignKeyTableName = "BE_Bundles";
				schema.Columns.Add(colvarBundleId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int32;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarAMA = new TableSchema.TableColumn(schema);
				colvarAMA.ColumnName = "AMA";
				colvarAMA.DataType = DbType.Int32;
				colvarAMA.MaxLength = 0;
				colvarAMA.AutoIncrement = false;
				colvarAMA.IsNullable = true;
				colvarAMA.IsPrimaryKey = false;
				colvarAMA.IsForeignKey = true;
				colvarAMA.IsReadOnly = false;
				colvarAMA.DefaultSetting = @"";
				colvarAMA.ForeignKeyTableName = "BE_BundleItems";
				schema.Columns.Add(colvarAMA);

				TableSchema.TableColumn colvarNOC = new TableSchema.TableColumn(schema);
				colvarNOC.ColumnName = "NOC";
				colvarNOC.DataType = DbType.Int32;
				colvarNOC.MaxLength = 0;
				colvarNOC.AutoIncrement = false;
				colvarNOC.IsNullable = true;
				colvarNOC.IsPrimaryKey = false;
				colvarNOC.IsForeignKey = true;
				colvarNOC.IsReadOnly = false;
				colvarNOC.DefaultSetting = @"";
				colvarNOC.ForeignKeyTableName = "BE_BundleItems";
				schema.Columns.Add(colvarNOC);

				TableSchema.TableColumn colvarSOP = new TableSchema.TableColumn(schema);
				colvarSOP.ColumnName = "SOP";
				colvarSOP.DataType = DbType.Int32;
				colvarSOP.MaxLength = 0;
				colvarSOP.AutoIncrement = false;
				colvarSOP.IsNullable = true;
				colvarSOP.IsPrimaryKey = false;
				colvarSOP.IsForeignKey = true;
				colvarSOP.IsReadOnly = false;
				colvarSOP.DefaultSetting = @"";
				colvarSOP.ForeignKeyTableName = "BE_BundleItems";
				schema.Columns.Add(colvarSOP);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BE_BundleAccounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BE_BundleAccount LoadFrom(BE_BundleAccount item)
		{
			BE_BundleAccount result = new BE_BundleAccount();
			if (item.BundleAccountID != default(int)) {
				result.LoadByKey(item.BundleAccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BundleAccountID {
			get { return GetColumnValue<int>(Columns.BundleAccountID); }
			set {
				SetColumnValue(Columns.BundleAccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BundleAccountID));
			}
		}
		[DataMember]
		public int BundleId {
			get { return GetColumnValue<int>(Columns.BundleId); }
			set {
				SetColumnValue(Columns.BundleId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BundleId));
			}
		}
		[DataMember]
		public int AccountId {
			get { return GetColumnValue<int>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public int? AMA {
			get { return GetColumnValue<int?>(Columns.AMA); }
			set {
				SetColumnValue(Columns.AMA, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AMA));
			}
		}
		[DataMember]
		public int? NOC {
			get { return GetColumnValue<int?>(Columns.NOC); }
			set {
				SetColumnValue(Columns.NOC, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOC));
			}
		}
		[DataMember]
		public int? SOP {
			get { return GetColumnValue<int?>(Columns.SOP); }
			set {
				SetColumnValue(Columns.SOP, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SOP));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private BE_BundleItem _AMAValue;
		//Relationship: FK_BE_BundleAccounts_BE_BundleItems_AMA
		public BE_BundleItem AMAValue
		{
			get
			{
				if(_AMAValue == null) {
					_AMAValue = BE_BundleItem.FetchByID(this.AMA);
				}
				return _AMAValue;
			}
			set
			{
				SetColumnValue("AMA", value.BarcodeID);
				_AMAValue = value;
			}
		}

		private BE_BundleItem _NOCValue;
		//Relationship: FK_BE_BundleAccounts_BE_BundleItems_NOC
		public BE_BundleItem NOCValue
		{
			get
			{
				if(_NOCValue == null) {
					_NOCValue = BE_BundleItem.FetchByID(this.NOC);
				}
				return _NOCValue;
			}
			set
			{
				SetColumnValue("NOC", value.BarcodeID);
				_NOCValue = value;
			}
		}

		private BE_BundleItem _SOPValue;
		//Relationship: FK_BE_BundleAccounts_BE_BundleItems_SOP
		public BE_BundleItem SOPValue
		{
			get
			{
				if(_SOPValue == null) {
					_SOPValue = BE_BundleItem.FetchByID(this.SOP);
				}
				return _SOPValue;
			}
			set
			{
				SetColumnValue("SOP", value.BarcodeID);
				_SOPValue = value;
			}
		}

		private BE_Bundle _Bundle;
		//Relationship: FK_BE_BundleAccounts_BE_Bundles
		public BE_Bundle Bundle
		{
			get
			{
				if(_Bundle == null) {
					_Bundle = BE_Bundle.FetchByID(this.BundleId);
				}
				return _Bundle;
			}
			set
			{
				SetColumnValue("BundleId", value.BundleID);
				_Bundle = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BundleAccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BundleAccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BundleIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AMAColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn NOCColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SOPColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BundleAccountID = @"BundleAccountID";
			public static readonly string BundleId = @"BundleId";
			public static readonly string AccountId = @"AccountId";
			public static readonly string AMA = @"AMA";
			public static readonly string NOC = @"NOC";
			public static readonly string SOP = @"SOP";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string ModifiedBy = @"ModifiedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BundleAccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the BE_BundleItem class.
	/// </summary>
	[DataContract]
	public partial class BE_BundleItemCollection : ActiveList<BE_BundleItem, BE_BundleItemCollection>
	{
		public static BE_BundleItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BE_BundleItemCollection result = new BE_BundleItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BE_BundleItem item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BE_BundleItems table.
	/// </summary>
	[DataContract]
	public partial class BE_BundleItem : ActiveRecord<BE_BundleItem>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BE_BundleItem()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BE_BundleItems", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBarcodeID = new TableSchema.TableColumn(schema);
				colvarBarcodeID.ColumnName = "BarcodeID";
				colvarBarcodeID.DataType = DbType.Int32;
				colvarBarcodeID.MaxLength = 0;
				colvarBarcodeID.AutoIncrement = false;
				colvarBarcodeID.IsNullable = false;
				colvarBarcodeID.IsPrimaryKey = true;
				colvarBarcodeID.IsForeignKey = false;
				colvarBarcodeID.IsReadOnly = false;
				colvarBarcodeID.DefaultSetting = @"";
				colvarBarcodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeID);

				TableSchema.TableColumn colvarReceivedByCorporate = new TableSchema.TableColumn(schema);
				colvarReceivedByCorporate.ColumnName = "ReceivedByCorporate";
				colvarReceivedByCorporate.DataType = DbType.Boolean;
				colvarReceivedByCorporate.MaxLength = 0;
				colvarReceivedByCorporate.AutoIncrement = false;
				colvarReceivedByCorporate.IsNullable = false;
				colvarReceivedByCorporate.IsPrimaryKey = false;
				colvarReceivedByCorporate.IsForeignKey = false;
				colvarReceivedByCorporate.IsReadOnly = false;
				colvarReceivedByCorporate.DefaultSetting = @"";
				colvarReceivedByCorporate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceivedByCorporate);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BE_BundleItems",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BE_BundleItem LoadFrom(BE_BundleItem item)
		{
			BE_BundleItem result = new BE_BundleItem();
			if (item.BarcodeID != default(int)) {
				result.LoadByKey(item.BarcodeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BarcodeID {
			get { return GetColumnValue<int>(Columns.BarcodeID); }
			set {
				SetColumnValue(Columns.BarcodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeID));
			}
		}
		[DataMember]
		public bool ReceivedByCorporate {
			get { return GetColumnValue<bool>(Columns.ReceivedByCorporate); }
			set {
				SetColumnValue(Columns.ReceivedByCorporate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceivedByCorporate));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return BarcodeID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BarcodeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ReceivedByCorporateColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BarcodeID = @"BarcodeID";
			public static readonly string ReceivedByCorporate = @"ReceivedByCorporate";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BarcodeID; }
		}
		*/

		#region Foreign Collections

		private BE_BundleAccountCollection _BE_BundleAccountsCol;
		//Relationship: FK_BE_BundleAccounts_BE_BundleItems_AMA
		public BE_BundleAccountCollection BE_BundleAccountsCol
		{
			get
			{
				if(_BE_BundleAccountsCol == null) {
					_BE_BundleAccountsCol = new BE_BundleAccountCollection();
					_BE_BundleAccountsCol.LoadAndCloseReader(BE_BundleAccount.Query()
						.WHERE(BE_BundleAccount.Columns.AMA, BarcodeID).ExecuteReader());
				}
				return _BE_BundleAccountsCol;
			}
		}

		private BE_BundleAccountCollection _BE_BundleAccounts02Col;
		//Relationship: FK_BE_BundleAccounts_BE_BundleItems_NOC
		public BE_BundleAccountCollection BE_BundleAccounts02Col
		{
			get
			{
				if(_BE_BundleAccounts02Col == null) {
					_BE_BundleAccounts02Col = new BE_BundleAccountCollection();
					_BE_BundleAccounts02Col.LoadAndCloseReader(BE_BundleAccount.Query()
						.WHERE(BE_BundleAccount.Columns.NOC, BarcodeID).ExecuteReader());
				}
				return _BE_BundleAccounts02Col;
			}
		}

		private BE_BundleAccountCollection _BE_BundleAccounts03Col;
		//Relationship: FK_BE_BundleAccounts_BE_BundleItems_SOP
		public BE_BundleAccountCollection BE_BundleAccounts03Col
		{
			get
			{
				if(_BE_BundleAccounts03Col == null) {
					_BE_BundleAccounts03Col = new BE_BundleAccountCollection();
					_BE_BundleAccounts03Col.LoadAndCloseReader(BE_BundleAccount.Query()
						.WHERE(BE_BundleAccount.Columns.SOP, BarcodeID).ExecuteReader());
				}
				return _BE_BundleAccounts03Col;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the BE_Bundle class.
	/// </summary>
	[DataContract]
	public partial class BE_BundleCollection : ActiveList<BE_Bundle, BE_BundleCollection>
	{
		public static BE_BundleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BE_BundleCollection result = new BE_BundleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BE_Bundle item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BE_Bundles table.
	/// </summary>
	[DataContract]
	public partial class BE_Bundle : ActiveRecord<BE_Bundle>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BE_Bundle()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BE_Bundles", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBundleID = new TableSchema.TableColumn(schema);
				colvarBundleID.ColumnName = "BundleID";
				colvarBundleID.DataType = DbType.Int32;
				colvarBundleID.MaxLength = 0;
				colvarBundleID.AutoIncrement = true;
				colvarBundleID.IsNullable = false;
				colvarBundleID.IsPrimaryKey = true;
				colvarBundleID.IsForeignKey = false;
				colvarBundleID.IsReadOnly = false;
				colvarBundleID.DefaultSetting = @"";
				colvarBundleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBundleID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = false;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarTrackingNumber = new TableSchema.TableColumn(schema);
				colvarTrackingNumber.ColumnName = "TrackingNumber";
				colvarTrackingNumber.DataType = DbType.String;
				colvarTrackingNumber.MaxLength = 50;
				colvarTrackingNumber.AutoIncrement = false;
				colvarTrackingNumber.IsNullable = true;
				colvarTrackingNumber.IsPrimaryKey = false;
				colvarTrackingNumber.IsForeignKey = false;
				colvarTrackingNumber.IsReadOnly = false;
				colvarTrackingNumber.DefaultSetting = @"";
				colvarTrackingNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrackingNumber);

				TableSchema.TableColumn colvarSentDate = new TableSchema.TableColumn(schema);
				colvarSentDate.ColumnName = "SentDate";
				colvarSentDate.DataType = DbType.DateTime;
				colvarSentDate.MaxLength = 0;
				colvarSentDate.AutoIncrement = false;
				colvarSentDate.IsNullable = true;
				colvarSentDate.IsPrimaryKey = false;
				colvarSentDate.IsForeignKey = false;
				colvarSentDate.IsReadOnly = false;
				colvarSentDate.DefaultSetting = @"";
				colvarSentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSentDate);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BE_Bundles",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BE_Bundle LoadFrom(BE_Bundle item)
		{
			BE_Bundle result = new BE_Bundle();
			if (item.BundleID != default(int)) {
				result.LoadByKey(item.BundleID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BundleID {
			get { return GetColumnValue<int>(Columns.BundleID); }
			set {
				SetColumnValue(Columns.BundleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BundleID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public string TrackingNumber {
			get { return GetColumnValue<string>(Columns.TrackingNumber); }
			set {
				SetColumnValue(Columns.TrackingNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TrackingNumber));
			}
		}
		[DataMember]
		public DateTime? SentDate {
			get { return GetColumnValue<DateTime?>(Columns.SentDate); }
			set {
				SetColumnValue(Columns.SentDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SentDate));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return BundleID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BundleIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TrackingNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SentDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BundleID = @"BundleID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string TrackingNumber = @"TrackingNumber";
			public static readonly string SentDate = @"SentDate";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string ModifiedBy = @"ModifiedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BundleID; }
		}
		*/

		#region Foreign Collections

		private BE_BundleAccountCollection _BE_BundleAccountsCol;
		//Relationship: FK_BE_BundleAccounts_BE_Bundles
		public BE_BundleAccountCollection BE_BundleAccountsCol
		{
			get
			{
				if(_BE_BundleAccountsCol == null) {
					_BE_BundleAccountsCol = new BE_BundleAccountCollection();
					_BE_BundleAccountsCol.LoadAndCloseReader(BE_BundleAccount.Query()
						.WHERE(BE_BundleAccount.Columns.BundleId, BundleID).ExecuteReader());
				}
				return _BE_BundleAccountsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the BE_DocTypeColumn class.
	/// </summary>
	[DataContract]
	public partial class BE_DocTypeColumnCollection : ActiveList<BE_DocTypeColumn, BE_DocTypeColumnCollection>
	{
		public static BE_DocTypeColumnCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BE_DocTypeColumnCollection result = new BE_DocTypeColumnCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BE_DocTypeColumn item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BE_DocTypeColumns table.
	/// </summary>
	[DataContract]
	public partial class BE_DocTypeColumn : ActiveRecord<BE_DocTypeColumn>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum DocTypeColumnEnum : int
		{
			[EnumMember()] Recruit = 1,
			[EnumMember()] Account = 2,
			[EnumMember()] Ticket = 3,
			[EnumMember()] User = 4,
		}

		//[DataMember]
		//public DocTypeColumnEnum DocTypeColumnCode
		//{
		//	get { return (DocTypeColumnEnum)DocTypeColumnID; }
		//	set { DocTypeColumnID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BE_DocTypeColumn()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BE_DocTypeColumns", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDocTypeColumnID = new TableSchema.TableColumn(schema);
				colvarDocTypeColumnID.ColumnName = "DocTypeColumnID";
				colvarDocTypeColumnID.DataType = DbType.Int32;
				colvarDocTypeColumnID.MaxLength = 0;
				colvarDocTypeColumnID.AutoIncrement = false;
				colvarDocTypeColumnID.IsNullable = false;
				colvarDocTypeColumnID.IsPrimaryKey = true;
				colvarDocTypeColumnID.IsForeignKey = false;
				colvarDocTypeColumnID.IsReadOnly = false;
				colvarDocTypeColumnID.DefaultSetting = @"";
				colvarDocTypeColumnID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocTypeColumnID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarTargetDatabase = new TableSchema.TableColumn(schema);
				colvarTargetDatabase.ColumnName = "TargetDatabase";
				colvarTargetDatabase.DataType = DbType.String;
				colvarTargetDatabase.MaxLength = 128;
				colvarTargetDatabase.AutoIncrement = false;
				colvarTargetDatabase.IsNullable = false;
				colvarTargetDatabase.IsPrimaryKey = false;
				colvarTargetDatabase.IsForeignKey = false;
				colvarTargetDatabase.IsReadOnly = false;
				colvarTargetDatabase.DefaultSetting = @"";
				colvarTargetDatabase.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTargetDatabase);

				TableSchema.TableColumn colvarTargetSchema = new TableSchema.TableColumn(schema);
				colvarTargetSchema.ColumnName = "TargetSchema";
				colvarTargetSchema.DataType = DbType.String;
				colvarTargetSchema.MaxLength = 128;
				colvarTargetSchema.AutoIncrement = false;
				colvarTargetSchema.IsNullable = false;
				colvarTargetSchema.IsPrimaryKey = false;
				colvarTargetSchema.IsForeignKey = false;
				colvarTargetSchema.IsReadOnly = false;
				colvarTargetSchema.DefaultSetting = @"";
				colvarTargetSchema.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTargetSchema);

				TableSchema.TableColumn colvarTargetTable = new TableSchema.TableColumn(schema);
				colvarTargetTable.ColumnName = "TargetTable";
				colvarTargetTable.DataType = DbType.String;
				colvarTargetTable.MaxLength = 128;
				colvarTargetTable.AutoIncrement = false;
				colvarTargetTable.IsNullable = false;
				colvarTargetTable.IsPrimaryKey = false;
				colvarTargetTable.IsForeignKey = false;
				colvarTargetTable.IsReadOnly = false;
				colvarTargetTable.DefaultSetting = @"";
				colvarTargetTable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTargetTable);

				TableSchema.TableColumn colvarTargetColum = new TableSchema.TableColumn(schema);
				colvarTargetColum.ColumnName = "TargetColum";
				colvarTargetColum.DataType = DbType.String;
				colvarTargetColum.MaxLength = 128;
				colvarTargetColum.AutoIncrement = false;
				colvarTargetColum.IsNullable = false;
				colvarTargetColum.IsPrimaryKey = false;
				colvarTargetColum.IsForeignKey = false;
				colvarTargetColum.IsReadOnly = false;
				colvarTargetColum.DefaultSetting = @"";
				colvarTargetColum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTargetColum);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BE_DocTypeColumns",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BE_DocTypeColumn LoadFrom(BE_DocTypeColumn item)
		{
			BE_DocTypeColumn result = new BE_DocTypeColumn();
			if (item.DocTypeColumnID != default(int)) {
				result.LoadByKey(item.DocTypeColumnID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DocTypeColumnID {
			get { return GetColumnValue<int>(Columns.DocTypeColumnID); }
			set {
				SetColumnValue(Columns.DocTypeColumnID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocTypeColumnID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public string TargetDatabase {
			get { return GetColumnValue<string>(Columns.TargetDatabase); }
			set {
				SetColumnValue(Columns.TargetDatabase, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TargetDatabase));
			}
		}
		[DataMember]
		public string TargetSchema {
			get { return GetColumnValue<string>(Columns.TargetSchema); }
			set {
				SetColumnValue(Columns.TargetSchema, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TargetSchema));
			}
		}
		[DataMember]
		public string TargetTable {
			get { return GetColumnValue<string>(Columns.TargetTable); }
			set {
				SetColumnValue(Columns.TargetTable, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TargetTable));
			}
		}
		[DataMember]
		public string TargetColum {
			get { return GetColumnValue<string>(Columns.TargetColum); }
			set {
				SetColumnValue(Columns.TargetColum, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TargetColum));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DocTypeColumnIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TargetDatabaseColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TargetSchemaColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TargetTableColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TargetColumColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DocTypeColumnID = @"DocTypeColumnID";
			public static readonly string Name = @"Name";
			public static readonly string TargetDatabase = @"TargetDatabase";
			public static readonly string TargetSchema = @"TargetSchema";
			public static readonly string TargetTable = @"TargetTable";
			public static readonly string TargetColum = @"TargetColum";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DocTypeColumnID; }
		}
		*/

		#region Foreign Collections

		private BE_DocTypeCollection _BE_DocTypesCol;
		//Relationship: FK_BE_DocTypes_BE_DocTypeColumns
		public BE_DocTypeCollection BE_DocTypesCol
		{
			get
			{
				if(_BE_DocTypesCol == null) {
					_BE_DocTypesCol = new BE_DocTypeCollection();
					_BE_DocTypesCol.LoadAndCloseReader(BE_DocType.Query()
						.WHERE(BE_DocType.Columns.DocTypeColumnId, DocTypeColumnID).ExecuteReader());
				}
				return _BE_DocTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the BE_DocType class.
	/// </summary>
	[DataContract]
	public partial class BE_DocTypeCollection : ActiveList<BE_DocType, BE_DocTypeCollection>
	{
		public static BE_DocTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BE_DocTypeCollection result = new BE_DocTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BE_DocType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BE_DocTypes table.
	/// </summary>
	[DataContract]
	public partial class BE_DocType : ActiveRecord<BE_DocType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum DocTypeEnum : int
		{
			[EnumMember()] Employee_Registration_Form = 1,
			[EnumMember()] Alarm_Monitoring_Agreement = 2,
			[EnumMember()] Notice_Of_Cancellation = 3,
			[EnumMember()] Schedule_Of_Protection = 4,
			[EnumMember()] Service_Ticket = 5,
			[EnumMember()] Sales_Rep_Contract = 6,
			[EnumMember()] Tech_Contract = 7,
			[EnumMember()] Sales_Manager_Contract = 8,
			[EnumMember()] Tech_Manager_Contract = 9,
			[EnumMember()] Sales_Regional_Manager_Contract = 10,
			[EnumMember()] Tech_Regional_Manager_Contract = 11,
			[EnumMember()] I9 = 12,
			[EnumMember()] W9 = 13,
			[EnumMember()] W4 = 14,
			[EnumMember()] Id_Documentation = 15,
			[EnumMember()] Mvr_Auth_Form = 16,
			[EnumMember()] Insurance = 17,
		}

		//[DataMember]
		//public DocTypeEnum DocTypeCode
		//{
		//	get { return (DocTypeEnum)DocTypeID; }
		//	set { DocTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BE_DocType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BE_DocTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDocTypeID = new TableSchema.TableColumn(schema);
				colvarDocTypeID.ColumnName = "DocTypeID";
				colvarDocTypeID.DataType = DbType.Int32;
				colvarDocTypeID.MaxLength = 0;
				colvarDocTypeID.AutoIncrement = false;
				colvarDocTypeID.IsNullable = false;
				colvarDocTypeID.IsPrimaryKey = true;
				colvarDocTypeID.IsForeignKey = false;
				colvarDocTypeID.IsReadOnly = false;
				colvarDocTypeID.DefaultSetting = @"";
				colvarDocTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocTypeID);

				TableSchema.TableColumn colvarDocName = new TableSchema.TableColumn(schema);
				colvarDocName.ColumnName = "DocName";
				colvarDocName.DataType = DbType.String;
				colvarDocName.MaxLength = 50;
				colvarDocName.AutoIncrement = false;
				colvarDocName.IsNullable = false;
				colvarDocName.IsPrimaryKey = false;
				colvarDocName.IsForeignKey = false;
				colvarDocName.IsReadOnly = false;
				colvarDocName.DefaultSetting = @"";
				colvarDocName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocName);

				TableSchema.TableColumn colvarDocTypeColumnId = new TableSchema.TableColumn(schema);
				colvarDocTypeColumnId.ColumnName = "DocTypeColumnId";
				colvarDocTypeColumnId.DataType = DbType.Int32;
				colvarDocTypeColumnId.MaxLength = 0;
				colvarDocTypeColumnId.AutoIncrement = false;
				colvarDocTypeColumnId.IsNullable = false;
				colvarDocTypeColumnId.IsPrimaryKey = false;
				colvarDocTypeColumnId.IsForeignKey = true;
				colvarDocTypeColumnId.IsReadOnly = false;
				colvarDocTypeColumnId.DefaultSetting = @"";
				colvarDocTypeColumnId.ForeignKeyTableName = "BE_DocTypeColumns";
				schema.Columns.Add(colvarDocTypeColumnId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BE_DocTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BE_DocType LoadFrom(BE_DocType item)
		{
			BE_DocType result = new BE_DocType();
			if (item.DocTypeID != default(int)) {
				result.LoadByKey(item.DocTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DocTypeID {
			get { return GetColumnValue<int>(Columns.DocTypeID); }
			set {
				SetColumnValue(Columns.DocTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocTypeID));
			}
		}
		[DataMember]
		public string DocName {
			get { return GetColumnValue<string>(Columns.DocName); }
			set {
				SetColumnValue(Columns.DocName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocName));
			}
		}
		[DataMember]
		public int DocTypeColumnId {
			get { return GetColumnValue<int>(Columns.DocTypeColumnId); }
			set {
				SetColumnValue(Columns.DocTypeColumnId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocTypeColumnId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private BE_DocTypeColumn _DocTypeColumn;
		//Relationship: FK_BE_DocTypes_BE_DocTypeColumns
		public BE_DocTypeColumn DocTypeColumn
		{
			get
			{
				if(_DocTypeColumn == null) {
					_DocTypeColumn = BE_DocTypeColumn.FetchByID(this.DocTypeColumnId);
				}
				return _DocTypeColumn;
			}
			set
			{
				SetColumnValue("DocTypeColumnId", value.DocTypeColumnID);
				_DocTypeColumn = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return DocName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DocTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DocNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DocTypeColumnIdColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DocTypeID = @"DocTypeID";
			public static readonly string DocName = @"DocName";
			public static readonly string DocTypeColumnId = @"DocTypeColumnId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DocTypeID; }
		}
		*/

		#region Foreign Collections

		private BE_BarcodeCollection _BE_BarcodesCol;
		//Relationship: FK_BE_Barcodes_BE_DocTypes
		public BE_BarcodeCollection BE_BarcodesCol
		{
			get
			{
				if(_BE_BarcodesCol == null) {
					_BE_BarcodesCol = new BE_BarcodeCollection();
					_BE_BarcodesCol.LoadAndCloseReader(BE_Barcode.Query()
						.WHERE(BE_Barcode.Columns.DocTypeId, DocTypeID).ExecuteReader());
				}
				return _BE_BarcodesCol;
			}
		}

		private BE_BarcodeSchemaCollection _BE_BarcodeSchemasCol;
		//Relationship: FK_BE_BarcodeSchema_BE_DocTypes
		public BE_BarcodeSchemaCollection BE_BarcodeSchemasCol
		{
			get
			{
				if(_BE_BarcodeSchemasCol == null) {
					_BE_BarcodeSchemasCol = new BE_BarcodeSchemaCollection();
					_BE_BarcodeSchemasCol.LoadAndCloseReader(BE_BarcodeSchema.Query()
						.WHERE(BE_BarcodeSchema.Columns.DocTypeId, DocTypeID).ExecuteReader());
				}
				return _BE_BarcodeSchemasCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the BE_PrefixDocument class.
	/// </summary>
	[DataContract]
	public partial class BE_PrefixDocumentCollection : ActiveList<BE_PrefixDocument, BE_PrefixDocumentCollection>
	{
		public static BE_PrefixDocumentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BE_PrefixDocumentCollection result = new BE_PrefixDocumentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BE_PrefixDocument item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BE_PrefixDocuments table.
	/// </summary>
	[DataContract]
	public partial class BE_PrefixDocument : ActiveRecord<BE_PrefixDocument>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum PrefixDocEnum : int
		{
			[EnumMember()] Alarm_Monitoring_Agreement = 1,
			[EnumMember()] Schedule_Of_Protection = 2,
			[EnumMember()] Notice_Of_Cancellation = 3,
			[EnumMember()] Service_Ticket = 4,
			[EnumMember()] Employee_Registration_Form = 5,
			[EnumMember()] Contract_Rep = 6,
			[EnumMember()] Contract_Tech = 7,
			[EnumMember()] Sales_Manager_Contract = 8,
			[EnumMember()] Tech_Manager_Contract = 9,
			[EnumMember()] Sales_Regional_Manager_Contract = 10,
			[EnumMember()] Tech_Regional_Manager_Contract = 11,
			[EnumMember()] I9 = 12,
			[EnumMember()] W9 = 13,
			[EnumMember()] W4 = 14,
			[EnumMember()] Id_Documentation = 15,
			[EnumMember()] Mvr_Auth_Form = 16,
			[EnumMember()] Insurance = 17,
		}

		//[DataMember]
		//public PrefixDocEnum PrefixDocCode
		//{
		//	get { return (PrefixDocEnum)PrefixDocID; }
		//	set { PrefixDocID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BE_PrefixDocument()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BE_PrefixDocuments", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPrefixDocID = new TableSchema.TableColumn(schema);
				colvarPrefixDocID.ColumnName = "PrefixDocID";
				colvarPrefixDocID.DataType = DbType.Int32;
				colvarPrefixDocID.MaxLength = 0;
				colvarPrefixDocID.AutoIncrement = false;
				colvarPrefixDocID.IsNullable = false;
				colvarPrefixDocID.IsPrimaryKey = true;
				colvarPrefixDocID.IsForeignKey = false;
				colvarPrefixDocID.IsReadOnly = false;
				colvarPrefixDocID.DefaultSetting = @"";
				colvarPrefixDocID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefixDocID);

				TableSchema.TableColumn colvarDocDescription = new TableSchema.TableColumn(schema);
				colvarDocDescription.ColumnName = "DocDescription";
				colvarDocDescription.DataType = DbType.String;
				colvarDocDescription.MaxLength = 250;
				colvarDocDescription.AutoIncrement = false;
				colvarDocDescription.IsNullable = false;
				colvarDocDescription.IsPrimaryKey = false;
				colvarDocDescription.IsForeignKey = false;
				colvarDocDescription.IsReadOnly = false;
				colvarDocDescription.DefaultSetting = @"";
				colvarDocDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocDescription);

				TableSchema.TableColumn colvarPrefixDocName = new TableSchema.TableColumn(schema);
				colvarPrefixDocName.ColumnName = "PrefixDocName";
				colvarPrefixDocName.DataType = DbType.AnsiStringFixedLength;
				colvarPrefixDocName.MaxLength = 2;
				colvarPrefixDocName.AutoIncrement = false;
				colvarPrefixDocName.IsNullable = false;
				colvarPrefixDocName.IsPrimaryKey = false;
				colvarPrefixDocName.IsForeignKey = false;
				colvarPrefixDocName.IsReadOnly = false;
				colvarPrefixDocName.DefaultSetting = @"";
				colvarPrefixDocName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefixDocName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BE_PrefixDocuments",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BE_PrefixDocument LoadFrom(BE_PrefixDocument item)
		{
			BE_PrefixDocument result = new BE_PrefixDocument();
			if (item.PrefixDocID != default(int)) {
				result.LoadByKey(item.PrefixDocID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PrefixDocID {
			get { return GetColumnValue<int>(Columns.PrefixDocID); }
			set {
				SetColumnValue(Columns.PrefixDocID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrefixDocID));
			}
		}
		[DataMember]
		public string DocDescription {
			get { return GetColumnValue<string>(Columns.DocDescription); }
			set {
				SetColumnValue(Columns.DocDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocDescription));
			}
		}
		[DataMember]
		public string PrefixDocName {
			get { return GetColumnValue<string>(Columns.PrefixDocName); }
			set {
				SetColumnValue(Columns.PrefixDocName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrefixDocName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return DocDescription;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PrefixDocIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DocDescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PrefixDocNameColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PrefixDocID = @"PrefixDocID";
			public static readonly string DocDescription = @"DocDescription";
			public static readonly string PrefixDocName = @"PrefixDocName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PrefixDocID; }
		}
		*/

		#region Foreign Collections

		private BE_PrefixCollection _BE_PrefixesCol;
		//Relationship: FK_BE_Prefixes_BE_PrefixDocuments
		public BE_PrefixCollection BE_PrefixesCol
		{
			get
			{
				if(_BE_PrefixesCol == null) {
					_BE_PrefixesCol = new BE_PrefixCollection();
					_BE_PrefixesCol.LoadAndCloseReader(BE_Prefix.Query()
						.WHERE(BE_Prefix.Columns.PrefixDocId, PrefixDocID).ExecuteReader());
				}
				return _BE_PrefixesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the BE_Prefix class.
	/// </summary>
	[DataContract]
	public partial class BE_PrefixCollection : ActiveList<BE_Prefix, BE_PrefixCollection>
	{
		public static BE_PrefixCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BE_PrefixCollection result = new BE_PrefixCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BE_Prefix item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BE_Prefixes table.
	/// </summary>
	[DataContract]
	public partial class BE_Prefix : ActiveRecord<BE_Prefix>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BE_Prefix()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BE_Prefixes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPrefixID = new TableSchema.TableColumn(schema);
				colvarPrefixID.ColumnName = "PrefixID";
				colvarPrefixID.DataType = DbType.Int32;
				colvarPrefixID.MaxLength = 0;
				colvarPrefixID.AutoIncrement = true;
				colvarPrefixID.IsNullable = false;
				colvarPrefixID.IsPrimaryKey = true;
				colvarPrefixID.IsForeignKey = false;
				colvarPrefixID.IsReadOnly = false;
				colvarPrefixID.DefaultSetting = @"";
				colvarPrefixID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefixID);

				TableSchema.TableColumn colvarPrefixDocId = new TableSchema.TableColumn(schema);
				colvarPrefixDocId.ColumnName = "PrefixDocId";
				colvarPrefixDocId.DataType = DbType.Int32;
				colvarPrefixDocId.MaxLength = 0;
				colvarPrefixDocId.AutoIncrement = false;
				colvarPrefixDocId.IsNullable = false;
				colvarPrefixDocId.IsPrimaryKey = false;
				colvarPrefixDocId.IsForeignKey = true;
				colvarPrefixDocId.IsReadOnly = false;
				colvarPrefixDocId.DefaultSetting = @"";
				colvarPrefixDocId.ForeignKeyTableName = "BE_PrefixDocuments";
				schema.Columns.Add(colvarPrefixDocId);

				TableSchema.TableColumn colvarPrinterId = new TableSchema.TableColumn(schema);
				colvarPrinterId.ColumnName = "PrinterId";
				colvarPrinterId.DataType = DbType.Int32;
				colvarPrinterId.MaxLength = 0;
				colvarPrinterId.AutoIncrement = false;
				colvarPrinterId.IsNullable = false;
				colvarPrinterId.IsPrimaryKey = false;
				colvarPrinterId.IsForeignKey = true;
				colvarPrinterId.IsReadOnly = false;
				colvarPrinterId.DefaultSetting = @"";
				colvarPrinterId.ForeignKeyTableName = "BE_PrefixPrinters";
				schema.Columns.Add(colvarPrinterId);

				TableSchema.TableColumn colvarPrefixName = new TableSchema.TableColumn(schema);
				colvarPrefixName.ColumnName = "PrefixName";
				colvarPrefixName.DataType = DbType.String;
				colvarPrefixName.MaxLength = 6;
				colvarPrefixName.AutoIncrement = false;
				colvarPrefixName.IsNullable = true;
				colvarPrefixName.IsPrimaryKey = false;
				colvarPrefixName.IsForeignKey = false;
				colvarPrefixName.IsReadOnly = false;
				colvarPrefixName.DefaultSetting = @"";
				colvarPrefixName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefixName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BE_Prefixes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BE_Prefix LoadFrom(BE_Prefix item)
		{
			BE_Prefix result = new BE_Prefix();
			if (item.PrefixID != default(int)) {
				result.LoadByKey(item.PrefixID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PrefixID {
			get { return GetColumnValue<int>(Columns.PrefixID); }
			set {
				SetColumnValue(Columns.PrefixID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrefixID));
			}
		}
		[DataMember]
		public int PrefixDocId {
			get { return GetColumnValue<int>(Columns.PrefixDocId); }
			set {
				SetColumnValue(Columns.PrefixDocId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrefixDocId));
			}
		}
		[DataMember]
		public int PrinterId {
			get { return GetColumnValue<int>(Columns.PrinterId); }
			set {
				SetColumnValue(Columns.PrinterId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrinterId));
			}
		}
		[DataMember]
		public string PrefixName {
			get { return GetColumnValue<string>(Columns.PrefixName); }
			set {
				SetColumnValue(Columns.PrefixName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrefixName));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private BE_PrefixDocument _PrefixDoc;
		//Relationship: FK_BE_Prefixes_BE_PrefixDocuments
		public BE_PrefixDocument PrefixDoc
		{
			get
			{
				if(_PrefixDoc == null) {
					_PrefixDoc = BE_PrefixDocument.FetchByID(this.PrefixDocId);
				}
				return _PrefixDoc;
			}
			set
			{
				SetColumnValue("PrefixDocId", value.PrefixDocID);
				_PrefixDoc = value;
			}
		}

		private BE_PrefixPrinter _Printer;
		//Relationship: FK_BE_Prefixes_BE_PrefixPrinters
		public BE_PrefixPrinter Printer
		{
			get
			{
				if(_Printer == null) {
					_Printer = BE_PrefixPrinter.FetchByID(this.PrinterId);
				}
				return _Printer;
			}
			set
			{
				SetColumnValue("PrinterId", value.PrinterID);
				_Printer = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PrefixID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PrefixIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PrefixDocIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PrinterIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PrefixNameColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PrefixID = @"PrefixID";
			public static readonly string PrefixDocId = @"PrefixDocId";
			public static readonly string PrinterId = @"PrinterId";
			public static readonly string PrefixName = @"PrefixName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PrefixID; }
		}
		*/

		#region Foreign Collections

		private BE_BarcodeSchemaCollection _BE_BarcodeSchemasCol;
		//Relationship: FK_BE_BarcodeSchema_BE_Prefixes
		public BE_BarcodeSchemaCollection BE_BarcodeSchemasCol
		{
			get
			{
				if(_BE_BarcodeSchemasCol == null) {
					_BE_BarcodeSchemasCol = new BE_BarcodeSchemaCollection();
					_BE_BarcodeSchemasCol.LoadAndCloseReader(BE_BarcodeSchema.Query()
						.WHERE(BE_BarcodeSchema.Columns.PrefixId, PrefixID).ExecuteReader());
				}
				return _BE_BarcodeSchemasCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the BE_PrefixPrinter class.
	/// </summary>
	[DataContract]
	public partial class BE_PrefixPrinterCollection : ActiveList<BE_PrefixPrinter, BE_PrefixPrinterCollection>
	{
		public static BE_PrefixPrinterCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BE_PrefixPrinterCollection result = new BE_PrefixPrinterCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BE_PrefixPrinter item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BE_PrefixPrinters table.
	/// </summary>
	[DataContract]
	public partial class BE_PrefixPrinter : ActiveRecord<BE_PrefixPrinter>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BE_PrefixPrinter()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BE_PrefixPrinters", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPrinterID = new TableSchema.TableColumn(schema);
				colvarPrinterID.ColumnName = "PrinterID";
				colvarPrinterID.DataType = DbType.Int32;
				colvarPrinterID.MaxLength = 0;
				colvarPrinterID.AutoIncrement = true;
				colvarPrinterID.IsNullable = false;
				colvarPrinterID.IsPrimaryKey = true;
				colvarPrinterID.IsForeignKey = false;
				colvarPrinterID.IsReadOnly = false;
				colvarPrinterID.DefaultSetting = @"";
				colvarPrinterID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterID);

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.String;
				colvarPrefix.MaxLength = 3;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = false;
				colvarPrefix.IsPrimaryKey = false;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarPrinterDescription = new TableSchema.TableColumn(schema);
				colvarPrinterDescription.ColumnName = "PrinterDescription";
				colvarPrinterDescription.DataType = DbType.String;
				colvarPrinterDescription.MaxLength = 250;
				colvarPrinterDescription.AutoIncrement = false;
				colvarPrinterDescription.IsNullable = false;
				colvarPrinterDescription.IsPrimaryKey = false;
				colvarPrinterDescription.IsForeignKey = false;
				colvarPrinterDescription.IsReadOnly = false;
				colvarPrinterDescription.DefaultSetting = @"";
				colvarPrinterDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterDescription);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BE_PrefixPrinters",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BE_PrefixPrinter LoadFrom(BE_PrefixPrinter item)
		{
			BE_PrefixPrinter result = new BE_PrefixPrinter();
			if (item.PrinterID != default(int)) {
				result.LoadByKey(item.PrinterID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PrinterID {
			get { return GetColumnValue<int>(Columns.PrinterID); }
			set {
				SetColumnValue(Columns.PrinterID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrinterID));
			}
		}
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set {
				SetColumnValue(Columns.Prefix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Prefix));
			}
		}
		[DataMember]
		public string PrinterDescription {
			get { return GetColumnValue<string>(Columns.PrinterDescription); }
			set {
				SetColumnValue(Columns.PrinterDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrinterDescription));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Prefix;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PrinterIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PrinterDescriptionColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PrinterID = @"PrinterID";
			public static readonly string Prefix = @"Prefix";
			public static readonly string PrinterDescription = @"PrinterDescription";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PrinterID; }
		}
		*/

		#region Foreign Collections

		private BE_PrefixCollection _BE_PrefixesCol;
		//Relationship: FK_BE_Prefixes_BE_PrefixPrinters
		public BE_PrefixCollection BE_PrefixesCol
		{
			get
			{
				if(_BE_PrefixesCol == null) {
					_BE_PrefixesCol = new BE_PrefixCollection();
					_BE_PrefixesCol.LoadAndCloseReader(BE_Prefix.Query()
						.WHERE(BE_Prefix.Columns.PrinterId, PrinterID).ExecuteReader());
				}
				return _BE_PrefixesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the BX_Barcode class.
	/// </summary>
	[DataContract]
	public partial class BX_BarcodeCollection : ActiveList<BX_Barcode, BX_BarcodeCollection>
	{
		public static BX_BarcodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BX_BarcodeCollection result = new BX_BarcodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BX_Barcode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BX_Barcodes table.
	/// </summary>
	[DataContract]
	public partial class BX_Barcode : ActiveRecord<BX_Barcode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BX_Barcode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BX_Barcodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBarcodeID = new TableSchema.TableColumn(schema);
				colvarBarcodeID.ColumnName = "BarcodeID";
				colvarBarcodeID.DataType = DbType.Int64;
				colvarBarcodeID.MaxLength = 0;
				colvarBarcodeID.AutoIncrement = true;
				colvarBarcodeID.IsNullable = false;
				colvarBarcodeID.IsPrimaryKey = true;
				colvarBarcodeID.IsForeignKey = false;
				colvarBarcodeID.IsReadOnly = false;
				colvarBarcodeID.DefaultSetting = @"";
				colvarBarcodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeID);

				TableSchema.TableColumn colvarBarcodeTypeId = new TableSchema.TableColumn(schema);
				colvarBarcodeTypeId.ColumnName = "BarcodeTypeId";
				colvarBarcodeTypeId.DataType = DbType.AnsiStringFixedLength;
				colvarBarcodeTypeId.MaxLength = 8;
				colvarBarcodeTypeId.AutoIncrement = false;
				colvarBarcodeTypeId.IsNullable = false;
				colvarBarcodeTypeId.IsPrimaryKey = false;
				colvarBarcodeTypeId.IsForeignKey = true;
				colvarBarcodeTypeId.IsReadOnly = false;
				colvarBarcodeTypeId.DefaultSetting = @"";
				colvarBarcodeTypeId.ForeignKeyTableName = "BX_BarcodeTypes";
				schema.Columns.Add(colvarBarcodeTypeId);

				TableSchema.TableColumn colvarForeignKey = new TableSchema.TableColumn(schema);
				colvarForeignKey.ColumnName = "ForeignKey";
				colvarForeignKey.DataType = DbType.AnsiString;
				colvarForeignKey.MaxLength = 50;
				colvarForeignKey.AutoIncrement = false;
				colvarForeignKey.IsNullable = false;
				colvarForeignKey.IsPrimaryKey = false;
				colvarForeignKey.IsForeignKey = false;
				colvarForeignKey.IsReadOnly = false;
				colvarForeignKey.DefaultSetting = @"";
				colvarForeignKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForeignKey);

				TableSchema.TableColumn colvarBarcodeNumber = new TableSchema.TableColumn(schema);
				colvarBarcodeNumber.ColumnName = "BarcodeNumber";
				colvarBarcodeNumber.DataType = DbType.String;
				colvarBarcodeNumber.MaxLength = 30;
				colvarBarcodeNumber.AutoIncrement = false;
				colvarBarcodeNumber.IsNullable = false;
				colvarBarcodeNumber.IsPrimaryKey = false;
				colvarBarcodeNumber.IsForeignKey = false;
				colvarBarcodeNumber.IsReadOnly = false;
				colvarBarcodeNumber.DefaultSetting = @"";
				colvarBarcodeNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeNumber);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BX_Barcodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BX_Barcode LoadFrom(BX_Barcode item)
		{
			BX_Barcode result = new BX_Barcode();
			if (item.BarcodeID != default(long)) {
				result.LoadByKey(item.BarcodeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long BarcodeID {
			get { return GetColumnValue<long>(Columns.BarcodeID); }
			set {
				SetColumnValue(Columns.BarcodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeID));
			}
		}
		[DataMember]
		public string BarcodeTypeId {
			get { return GetColumnValue<string>(Columns.BarcodeTypeId); }
			set {
				SetColumnValue(Columns.BarcodeTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeTypeId));
			}
		}
		[DataMember]
		public string ForeignKey {
			get { return GetColumnValue<string>(Columns.ForeignKey); }
			set {
				SetColumnValue(Columns.ForeignKey, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ForeignKey));
			}
		}
		[DataMember]
		public string BarcodeNumber {
			get { return GetColumnValue<string>(Columns.BarcodeNumber); }
			set {
				SetColumnValue(Columns.BarcodeNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeNumber));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private BX_BarcodeType _BarcodeType;
		//Relationship: FK_BX_Barcodes_BX_BarcodeTypes
		public BX_BarcodeType BarcodeType
		{
			get
			{
				if(_BarcodeType == null) {
					_BarcodeType = BX_BarcodeType.FetchByID(this.BarcodeTypeId);
				}
				return _BarcodeType;
			}
			set
			{
				SetColumnValue("BarcodeTypeId", value.BarcodeTypeID);
				_BarcodeType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BarcodeTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BarcodeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BarcodeTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ForeignKeyColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BarcodeNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BarcodeID = @"BarcodeID";
			public static readonly string BarcodeTypeId = @"BarcodeTypeId";
			public static readonly string ForeignKey = @"ForeignKey";
			public static readonly string BarcodeNumber = @"BarcodeNumber";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BarcodeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the BX_BarcodeType class.
	/// </summary>
	[DataContract]
	public partial class BX_BarcodeTypeCollection : ActiveList<BX_BarcodeType, BX_BarcodeTypeCollection>
	{
		public static BX_BarcodeTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BX_BarcodeTypeCollection result = new BX_BarcodeTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BX_BarcodeType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BX_BarcodeTypes table.
	/// </summary>
	[DataContract]
	public partial class BX_BarcodeType : ActiveRecord<BX_BarcodeType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BX_BarcodeType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BX_BarcodeTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBarcodeTypeID = new TableSchema.TableColumn(schema);
				colvarBarcodeTypeID.ColumnName = "BarcodeTypeID";
				colvarBarcodeTypeID.DataType = DbType.AnsiStringFixedLength;
				colvarBarcodeTypeID.MaxLength = 8;
				colvarBarcodeTypeID.AutoIncrement = false;
				colvarBarcodeTypeID.IsNullable = false;
				colvarBarcodeTypeID.IsPrimaryKey = true;
				colvarBarcodeTypeID.IsForeignKey = false;
				colvarBarcodeTypeID.IsReadOnly = false;
				colvarBarcodeTypeID.DefaultSetting = @"";
				colvarBarcodeTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeTypeID);

				TableSchema.TableColumn colvarDocTypeId = new TableSchema.TableColumn(schema);
				colvarDocTypeId.ColumnName = "DocTypeId";
				colvarDocTypeId.DataType = DbType.AnsiStringFixedLength;
				colvarDocTypeId.MaxLength = 2;
				colvarDocTypeId.AutoIncrement = false;
				colvarDocTypeId.IsNullable = false;
				colvarDocTypeId.IsPrimaryKey = false;
				colvarDocTypeId.IsForeignKey = true;
				colvarDocTypeId.IsReadOnly = false;
				colvarDocTypeId.DefaultSetting = @"";
				colvarDocTypeId.ForeignKeyTableName = "BX_DocTypes";
				schema.Columns.Add(colvarDocTypeId);

				TableSchema.TableColumn colvarPrinterId = new TableSchema.TableColumn(schema);
				colvarPrinterId.ColumnName = "PrinterId";
				colvarPrinterId.DataType = DbType.AnsiStringFixedLength;
				colvarPrinterId.MaxLength = 3;
				colvarPrinterId.AutoIncrement = false;
				colvarPrinterId.IsNullable = false;
				colvarPrinterId.IsPrimaryKey = false;
				colvarPrinterId.IsForeignKey = true;
				colvarPrinterId.IsReadOnly = false;
				colvarPrinterId.DefaultSetting = @"";
				colvarPrinterId.ForeignKeyTableName = "BX_Printers";
				schema.Columns.Add(colvarPrinterId);

				TableSchema.TableColumn colvarVersion = new TableSchema.TableColumn(schema);
				colvarVersion.ColumnName = "Version";
				colvarVersion.DataType = DbType.AnsiStringFixedLength;
				colvarVersion.MaxLength = 3;
				colvarVersion.AutoIncrement = false;
				colvarVersion.IsNullable = false;
				colvarVersion.IsPrimaryKey = false;
				colvarVersion.IsForeignKey = false;
				colvarVersion.IsReadOnly = false;
				colvarVersion.DefaultSetting = @"('001')";
				colvarVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersion);

				TableSchema.TableColumn colvarGroupDoc = new TableSchema.TableColumn(schema);
				colvarGroupDoc.ColumnName = "GroupDoc";
				colvarGroupDoc.DataType = DbType.AnsiStringFixedLength;
				colvarGroupDoc.MaxLength = 3;
				colvarGroupDoc.AutoIncrement = false;
				colvarGroupDoc.IsNullable = false;
				colvarGroupDoc.IsPrimaryKey = false;
				colvarGroupDoc.IsForeignKey = false;
				colvarGroupDoc.IsReadOnly = false;
				colvarGroupDoc.DefaultSetting = @"('GR3')";
				colvarGroupDoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGroupDoc);

				TableSchema.TableColumn colvarRangeStart = new TableSchema.TableColumn(schema);
				colvarRangeStart.ColumnName = "RangeStart";
				colvarRangeStart.DataType = DbType.Int32;
				colvarRangeStart.MaxLength = 0;
				colvarRangeStart.AutoIncrement = false;
				colvarRangeStart.IsNullable = false;
				colvarRangeStart.IsPrimaryKey = false;
				colvarRangeStart.IsForeignKey = false;
				colvarRangeStart.IsReadOnly = false;
				colvarRangeStart.DefaultSetting = @"((601021100))";
				colvarRangeStart.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRangeStart);

				TableSchema.TableColumn colvarRangeEnd = new TableSchema.TableColumn(schema);
				colvarRangeEnd.ColumnName = "RangeEnd";
				colvarRangeEnd.DataType = DbType.Int32;
				colvarRangeEnd.MaxLength = 0;
				colvarRangeEnd.AutoIncrement = false;
				colvarRangeEnd.IsNullable = true;
				colvarRangeEnd.IsPrimaryKey = false;
				colvarRangeEnd.IsForeignKey = false;
				colvarRangeEnd.IsReadOnly = false;
				colvarRangeEnd.DefaultSetting = @"((999999999))";
				colvarRangeEnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRangeEnd);

				TableSchema.TableColumn colvarRangeCurrent = new TableSchema.TableColumn(schema);
				colvarRangeCurrent.ColumnName = "RangeCurrent";
				colvarRangeCurrent.DataType = DbType.Int32;
				colvarRangeCurrent.MaxLength = 0;
				colvarRangeCurrent.AutoIncrement = false;
				colvarRangeCurrent.IsNullable = false;
				colvarRangeCurrent.IsPrimaryKey = false;
				colvarRangeCurrent.IsForeignKey = false;
				colvarRangeCurrent.IsReadOnly = false;
				colvarRangeCurrent.DefaultSetting = @"((601021100))";
				colvarRangeCurrent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRangeCurrent);

				TableSchema.TableColumn colvarBarcodeName = new TableSchema.TableColumn(schema);
				colvarBarcodeName.ColumnName = "BarcodeName";
				colvarBarcodeName.DataType = DbType.String;
				colvarBarcodeName.MaxLength = 50;
				colvarBarcodeName.AutoIncrement = false;
				colvarBarcodeName.IsNullable = false;
				colvarBarcodeName.IsPrimaryKey = false;
				colvarBarcodeName.IsForeignKey = false;
				colvarBarcodeName.IsReadOnly = false;
				colvarBarcodeName.DefaultSetting = @"";
				colvarBarcodeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeName);

				TableSchema.TableColumn colvarIsAutoGenerated = new TableSchema.TableColumn(schema);
				colvarIsAutoGenerated.ColumnName = "IsAutoGenerated";
				colvarIsAutoGenerated.DataType = DbType.Boolean;
				colvarIsAutoGenerated.MaxLength = 0;
				colvarIsAutoGenerated.AutoIncrement = false;
				colvarIsAutoGenerated.IsNullable = false;
				colvarIsAutoGenerated.IsPrimaryKey = false;
				colvarIsAutoGenerated.IsForeignKey = false;
				colvarIsAutoGenerated.IsReadOnly = false;
				colvarIsAutoGenerated.DefaultSetting = @"((1))";
				colvarIsAutoGenerated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAutoGenerated);

				TableSchema.TableColumn colvarForeignKeyDatabase = new TableSchema.TableColumn(schema);
				colvarForeignKeyDatabase.ColumnName = "ForeignKeyDatabase";
				colvarForeignKeyDatabase.DataType = DbType.AnsiString;
				colvarForeignKeyDatabase.MaxLength = 128;
				colvarForeignKeyDatabase.AutoIncrement = false;
				colvarForeignKeyDatabase.IsNullable = false;
				colvarForeignKeyDatabase.IsPrimaryKey = false;
				colvarForeignKeyDatabase.IsForeignKey = false;
				colvarForeignKeyDatabase.IsReadOnly = false;
				colvarForeignKeyDatabase.DefaultSetting = @"";
				colvarForeignKeyDatabase.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForeignKeyDatabase);

				TableSchema.TableColumn colvarForeignKeySchema = new TableSchema.TableColumn(schema);
				colvarForeignKeySchema.ColumnName = "ForeignKeySchema";
				colvarForeignKeySchema.DataType = DbType.AnsiString;
				colvarForeignKeySchema.MaxLength = 128;
				colvarForeignKeySchema.AutoIncrement = false;
				colvarForeignKeySchema.IsNullable = false;
				colvarForeignKeySchema.IsPrimaryKey = false;
				colvarForeignKeySchema.IsForeignKey = false;
				colvarForeignKeySchema.IsReadOnly = false;
				colvarForeignKeySchema.DefaultSetting = @"";
				colvarForeignKeySchema.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForeignKeySchema);

				TableSchema.TableColumn colvarForeignKeyTable = new TableSchema.TableColumn(schema);
				colvarForeignKeyTable.ColumnName = "ForeignKeyTable";
				colvarForeignKeyTable.DataType = DbType.AnsiString;
				colvarForeignKeyTable.MaxLength = 128;
				colvarForeignKeyTable.AutoIncrement = false;
				colvarForeignKeyTable.IsNullable = false;
				colvarForeignKeyTable.IsPrimaryKey = false;
				colvarForeignKeyTable.IsForeignKey = false;
				colvarForeignKeyTable.IsReadOnly = false;
				colvarForeignKeyTable.DefaultSetting = @"";
				colvarForeignKeyTable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForeignKeyTable);

				TableSchema.TableColumn colvarForeignKeyColumn = new TableSchema.TableColumn(schema);
				colvarForeignKeyColumn.ColumnName = "ForeignKeyColumn";
				colvarForeignKeyColumn.DataType = DbType.AnsiString;
				colvarForeignKeyColumn.MaxLength = 128;
				colvarForeignKeyColumn.AutoIncrement = false;
				colvarForeignKeyColumn.IsNullable = false;
				colvarForeignKeyColumn.IsPrimaryKey = false;
				colvarForeignKeyColumn.IsForeignKey = false;
				colvarForeignKeyColumn.IsReadOnly = false;
				colvarForeignKeyColumn.DefaultSetting = @"";
				colvarForeignKeyColumn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarForeignKeyColumn);

				TableSchema.TableColumn colvarSqlStatement = new TableSchema.TableColumn(schema);
				colvarSqlStatement.ColumnName = "SqlStatement";
				colvarSqlStatement.DataType = DbType.AnsiString;
				colvarSqlStatement.MaxLength = -1;
				colvarSqlStatement.AutoIncrement = false;
				colvarSqlStatement.IsNullable = true;
				colvarSqlStatement.IsPrimaryKey = false;
				colvarSqlStatement.IsForeignKey = false;
				colvarSqlStatement.IsReadOnly = false;
				colvarSqlStatement.DefaultSetting = @"";
				colvarSqlStatement.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSqlStatement);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BX_BarcodeTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BX_BarcodeType LoadFrom(BX_BarcodeType item)
		{
			BX_BarcodeType result = new BX_BarcodeType();
			if (item.BarcodeTypeID != default(string)) {
				result.LoadByKey(item.BarcodeTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string BarcodeTypeID {
			get { return GetColumnValue<string>(Columns.BarcodeTypeID); }
			set {
				SetColumnValue(Columns.BarcodeTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeTypeID));
			}
		}
		[DataMember]
		public string DocTypeId {
			get { return GetColumnValue<string>(Columns.DocTypeId); }
			set {
				SetColumnValue(Columns.DocTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocTypeId));
			}
		}
		[DataMember]
		public string PrinterId {
			get { return GetColumnValue<string>(Columns.PrinterId); }
			set {
				SetColumnValue(Columns.PrinterId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrinterId));
			}
		}
		[DataMember]
		public string Version {
			get { return GetColumnValue<string>(Columns.Version); }
			set {
				SetColumnValue(Columns.Version, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Version));
			}
		}
		[DataMember]
		public string GroupDoc {
			get { return GetColumnValue<string>(Columns.GroupDoc); }
			set {
				SetColumnValue(Columns.GroupDoc, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GroupDoc));
			}
		}
		[DataMember]
		public int RangeStart {
			get { return GetColumnValue<int>(Columns.RangeStart); }
			set {
				SetColumnValue(Columns.RangeStart, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RangeStart));
			}
		}
		[DataMember]
		public int? RangeEnd {
			get { return GetColumnValue<int?>(Columns.RangeEnd); }
			set {
				SetColumnValue(Columns.RangeEnd, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RangeEnd));
			}
		}
		[DataMember]
		public int RangeCurrent {
			get { return GetColumnValue<int>(Columns.RangeCurrent); }
			set {
				SetColumnValue(Columns.RangeCurrent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RangeCurrent));
			}
		}
		[DataMember]
		public string BarcodeName {
			get { return GetColumnValue<string>(Columns.BarcodeName); }
			set {
				SetColumnValue(Columns.BarcodeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeName));
			}
		}
		[DataMember]
		public bool IsAutoGenerated {
			get { return GetColumnValue<bool>(Columns.IsAutoGenerated); }
			set {
				SetColumnValue(Columns.IsAutoGenerated, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAutoGenerated));
			}
		}
		[DataMember]
		public string ForeignKeyDatabase {
			get { return GetColumnValue<string>(Columns.ForeignKeyDatabase); }
			set {
				SetColumnValue(Columns.ForeignKeyDatabase, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ForeignKeyDatabase));
			}
		}
		[DataMember]
		public string ForeignKeySchema {
			get { return GetColumnValue<string>(Columns.ForeignKeySchema); }
			set {
				SetColumnValue(Columns.ForeignKeySchema, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ForeignKeySchema));
			}
		}
		[DataMember]
		public string ForeignKeyTable {
			get { return GetColumnValue<string>(Columns.ForeignKeyTable); }
			set {
				SetColumnValue(Columns.ForeignKeyTable, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ForeignKeyTable));
			}
		}
		[DataMember]
		public string ForeignKeyColumn {
			get { return GetColumnValue<string>(Columns.ForeignKeyColumn); }
			set {
				SetColumnValue(Columns.ForeignKeyColumn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ForeignKeyColumn));
			}
		}
		[DataMember]
		public string SqlStatement {
			get { return GetColumnValue<string>(Columns.SqlStatement); }
			set {
				SetColumnValue(Columns.SqlStatement, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SqlStatement));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private BX_DocType _DocType;
		//Relationship: FK_BX_BarcodeTypes_BX_DocTypes
		public BX_DocType DocType
		{
			get
			{
				if(_DocType == null) {
					_DocType = BX_DocType.FetchByID(this.DocTypeId);
				}
				return _DocType;
			}
			set
			{
				SetColumnValue("DocTypeId", value.DocTypeID);
				_DocType = value;
			}
		}

		private BX_Printer _Printer;
		//Relationship: FK_BX_BarcodeTypes_BX_Printers
		public BX_Printer Printer
		{
			get
			{
				if(_Printer == null) {
					_Printer = BX_Printer.FetchByID(this.PrinterId);
				}
				return _Printer;
			}
			set
			{
				SetColumnValue("PrinterId", value.PrinterID);
				_Printer = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return DocTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BarcodeTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DocTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PrinterIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn VersionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GroupDocColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RangeStartColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RangeEndColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn RangeCurrentColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn BarcodeNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsAutoGeneratedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ForeignKeyDatabaseColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ForeignKeySchemaColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ForeignKeyTableColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ForeignKeyColumnColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn SqlStatementColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[16]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BarcodeTypeID = @"BarcodeTypeID";
			public static readonly string DocTypeId = @"DocTypeId";
			public static readonly string PrinterId = @"PrinterId";
			public static readonly string Version = @"Version";
			public static readonly string GroupDoc = @"GroupDoc";
			public static readonly string RangeStart = @"RangeStart";
			public static readonly string RangeEnd = @"RangeEnd";
			public static readonly string RangeCurrent = @"RangeCurrent";
			public static readonly string BarcodeName = @"BarcodeName";
			public static readonly string IsAutoGenerated = @"IsAutoGenerated";
			public static readonly string ForeignKeyDatabase = @"ForeignKeyDatabase";
			public static readonly string ForeignKeySchema = @"ForeignKeySchema";
			public static readonly string ForeignKeyTable = @"ForeignKeyTable";
			public static readonly string ForeignKeyColumn = @"ForeignKeyColumn";
			public static readonly string SqlStatement = @"SqlStatement";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BarcodeTypeID; }
		}
		*/

		#region Foreign Collections

		private BX_BarcodeCollection _BX_BarcodesCol;
		//Relationship: FK_BX_Barcodes_BX_BarcodeTypes
		public BX_BarcodeCollection BX_BarcodesCol
		{
			get
			{
				if(_BX_BarcodesCol == null) {
					_BX_BarcodesCol = new BX_BarcodeCollection();
					_BX_BarcodesCol.LoadAndCloseReader(BX_Barcode.Query()
						.WHERE(BX_Barcode.Columns.BarcodeTypeId, BarcodeTypeID).ExecuteReader());
				}
				return _BX_BarcodesCol;
			}
		}

		private BX_DocumentFieldCollection _BX_DocumentFieldsCol;
		//Relationship: FK_BX_DocumentFields_BX_BarcodeTypes
		public BX_DocumentFieldCollection BX_DocumentFieldsCol
		{
			get
			{
				if(_BX_DocumentFieldsCol == null) {
					_BX_DocumentFieldsCol = new BX_DocumentFieldCollection();
					_BX_DocumentFieldsCol.LoadAndCloseReader(BX_DocumentField.Query()
						.WHERE(BX_DocumentField.Columns.BarcodeTypeId, BarcodeTypeID).ExecuteReader());
				}
				return _BX_DocumentFieldsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the BX_DocType class.
	/// </summary>
	[DataContract]
	public partial class BX_DocTypeCollection : ActiveList<BX_DocType, BX_DocTypeCollection>
	{
		public static BX_DocTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BX_DocTypeCollection result = new BX_DocTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BX_DocType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BX_DocTypes table.
	/// </summary>
	[DataContract]
	public partial class BX_DocType : ActiveRecord<BX_DocType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BX_DocType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BX_DocTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDocTypeID = new TableSchema.TableColumn(schema);
				colvarDocTypeID.ColumnName = "DocTypeID";
				colvarDocTypeID.DataType = DbType.AnsiStringFixedLength;
				colvarDocTypeID.MaxLength = 2;
				colvarDocTypeID.AutoIncrement = false;
				colvarDocTypeID.IsNullable = false;
				colvarDocTypeID.IsPrimaryKey = true;
				colvarDocTypeID.IsForeignKey = false;
				colvarDocTypeID.IsReadOnly = false;
				colvarDocTypeID.DefaultSetting = @"";
				colvarDocTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocTypeID);

				TableSchema.TableColumn colvarDocName = new TableSchema.TableColumn(schema);
				colvarDocName.ColumnName = "DocName";
				colvarDocName.DataType = DbType.String;
				colvarDocName.MaxLength = 50;
				colvarDocName.AutoIncrement = false;
				colvarDocName.IsNullable = false;
				colvarDocName.IsPrimaryKey = false;
				colvarDocName.IsForeignKey = false;
				colvarDocName.IsReadOnly = false;
				colvarDocName.DefaultSetting = @"";
				colvarDocName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocName);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BX_DocTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BX_DocType LoadFrom(BX_DocType item)
		{
			BX_DocType result = new BX_DocType();
			if (item.DocTypeID != default(string)) {
				result.LoadByKey(item.DocTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string DocTypeID {
			get { return GetColumnValue<string>(Columns.DocTypeID); }
			set {
				SetColumnValue(Columns.DocTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocTypeID));
			}
		}
		[DataMember]
		public string DocName {
			get { return GetColumnValue<string>(Columns.DocName); }
			set {
				SetColumnValue(Columns.DocName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocName));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return DocName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DocTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DocNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DocTypeID = @"DocTypeID";
			public static readonly string DocName = @"DocName";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DocTypeID; }
		}
		*/

		#region Foreign Collections

		private BX_BarcodeTypeCollection _BX_BarcodeTypesCol;
		//Relationship: FK_BX_BarcodeTypes_BX_DocTypes
		public BX_BarcodeTypeCollection BX_BarcodeTypesCol
		{
			get
			{
				if(_BX_BarcodeTypesCol == null) {
					_BX_BarcodeTypesCol = new BX_BarcodeTypeCollection();
					_BX_BarcodeTypesCol.LoadAndCloseReader(BX_BarcodeType.Query()
						.WHERE(BX_BarcodeType.Columns.DocTypeId, DocTypeID).ExecuteReader());
				}
				return _BX_BarcodeTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the BX_DocumentField class.
	/// </summary>
	[DataContract]
	public partial class BX_DocumentFieldCollection : ActiveList<BX_DocumentField, BX_DocumentFieldCollection>
	{
		public static BX_DocumentFieldCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BX_DocumentFieldCollection result = new BX_DocumentFieldCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BX_DocumentField item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BX_DocumentFields table.
	/// </summary>
	[DataContract]
	public partial class BX_DocumentField : ActiveRecord<BX_DocumentField>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BX_DocumentField()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BX_DocumentFields", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDocumentFieldID = new TableSchema.TableColumn(schema);
				colvarDocumentFieldID.ColumnName = "DocumentFieldID";
				colvarDocumentFieldID.DataType = DbType.Int32;
				colvarDocumentFieldID.MaxLength = 0;
				colvarDocumentFieldID.AutoIncrement = true;
				colvarDocumentFieldID.IsNullable = false;
				colvarDocumentFieldID.IsPrimaryKey = true;
				colvarDocumentFieldID.IsForeignKey = false;
				colvarDocumentFieldID.IsReadOnly = false;
				colvarDocumentFieldID.DefaultSetting = @"";
				colvarDocumentFieldID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentFieldID);

				TableSchema.TableColumn colvarBarcodeTypeId = new TableSchema.TableColumn(schema);
				colvarBarcodeTypeId.ColumnName = "BarcodeTypeId";
				colvarBarcodeTypeId.DataType = DbType.AnsiStringFixedLength;
				colvarBarcodeTypeId.MaxLength = 8;
				colvarBarcodeTypeId.AutoIncrement = false;
				colvarBarcodeTypeId.IsNullable = false;
				colvarBarcodeTypeId.IsPrimaryKey = false;
				colvarBarcodeTypeId.IsForeignKey = true;
				colvarBarcodeTypeId.IsReadOnly = false;
				colvarBarcodeTypeId.DefaultSetting = @"('AMNXS001')";
				colvarBarcodeTypeId.ForeignKeyTableName = "BX_BarcodeTypes";
				schema.Columns.Add(colvarBarcodeTypeId);

				TableSchema.TableColumn colvarFieldKey = new TableSchema.TableColumn(schema);
				colvarFieldKey.ColumnName = "FieldKey";
				colvarFieldKey.DataType = DbType.String;
				colvarFieldKey.MaxLength = 50;
				colvarFieldKey.AutoIncrement = false;
				colvarFieldKey.IsNullable = false;
				colvarFieldKey.IsPrimaryKey = false;
				colvarFieldKey.IsForeignKey = false;
				colvarFieldKey.IsReadOnly = false;
				colvarFieldKey.DefaultSetting = @"";
				colvarFieldKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFieldKey);

				TableSchema.TableColumn colvarDataType = new TableSchema.TableColumn(schema);
				colvarDataType.ColumnName = "DataType";
				colvarDataType.DataType = DbType.String;
				colvarDataType.MaxLength = 50;
				colvarDataType.AutoIncrement = false;
				colvarDataType.IsNullable = false;
				colvarDataType.IsPrimaryKey = false;
				colvarDataType.IsForeignKey = false;
				colvarDataType.IsReadOnly = false;
				colvarDataType.DefaultSetting = @"('char')";
				colvarDataType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDataType);

				TableSchema.TableColumn colvarLength = new TableSchema.TableColumn(schema);
				colvarLength.ColumnName = "Length";
				colvarLength.DataType = DbType.Int16;
				colvarLength.MaxLength = 0;
				colvarLength.AutoIncrement = false;
				colvarLength.IsNullable = true;
				colvarLength.IsPrimaryKey = false;
				colvarLength.IsForeignKey = false;
				colvarLength.IsReadOnly = false;
				colvarLength.DefaultSetting = @"((1))";
				colvarLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLength);

				TableSchema.TableColumn colvarRequired = new TableSchema.TableColumn(schema);
				colvarRequired.ColumnName = "Required";
				colvarRequired.DataType = DbType.Boolean;
				colvarRequired.MaxLength = 0;
				colvarRequired.AutoIncrement = false;
				colvarRequired.IsNullable = false;
				colvarRequired.IsPrimaryKey = false;
				colvarRequired.IsForeignKey = false;
				colvarRequired.IsReadOnly = false;
				colvarRequired.DefaultSetting = @"((0))";
				colvarRequired.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequired);

				TableSchema.TableColumn colvarDefaultValue = new TableSchema.TableColumn(schema);
				colvarDefaultValue.ColumnName = "DefaultValue";
				colvarDefaultValue.DataType = DbType.String;
				colvarDefaultValue.MaxLength = 50;
				colvarDefaultValue.AutoIncrement = false;
				colvarDefaultValue.IsNullable = true;
				colvarDefaultValue.IsPrimaryKey = false;
				colvarDefaultValue.IsForeignKey = false;
				colvarDefaultValue.IsReadOnly = false;
				colvarDefaultValue.DefaultSetting = @"";
				colvarDefaultValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultValue);

				TableSchema.TableColumn colvarSlots = new TableSchema.TableColumn(schema);
				colvarSlots.ColumnName = "Slots";
				colvarSlots.DataType = DbType.Int16;
				colvarSlots.MaxLength = 0;
				colvarSlots.AutoIncrement = false;
				colvarSlots.IsNullable = false;
				colvarSlots.IsPrimaryKey = false;
				colvarSlots.IsForeignKey = false;
				colvarSlots.IsReadOnly = false;
				colvarSlots.DefaultSetting = @"((1))";
				colvarSlots.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSlots);

				TableSchema.TableColumn colvarJustification = new TableSchema.TableColumn(schema);
				colvarJustification.ColumnName = "Justification";
				colvarJustification.DataType = DbType.AnsiString;
				colvarJustification.MaxLength = 7;
				colvarJustification.AutoIncrement = false;
				colvarJustification.IsNullable = false;
				colvarJustification.IsPrimaryKey = false;
				colvarJustification.IsForeignKey = false;
				colvarJustification.IsReadOnly = false;
				colvarJustification.DefaultSetting = @"('Left')";
				colvarJustification.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJustification);

				TableSchema.TableColumn colvarMask = new TableSchema.TableColumn(schema);
				colvarMask.ColumnName = "Mask";
				colvarMask.DataType = DbType.AnsiString;
				colvarMask.MaxLength = 50;
				colvarMask.AutoIncrement = false;
				colvarMask.IsNullable = true;
				colvarMask.IsPrimaryKey = false;
				colvarMask.IsForeignKey = false;
				colvarMask.IsReadOnly = false;
				colvarMask.DefaultSetting = @"";
				colvarMask.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMask);

				TableSchema.TableColumn colvarIsEncrypted = new TableSchema.TableColumn(schema);
				colvarIsEncrypted.ColumnName = "IsEncrypted";
				colvarIsEncrypted.DataType = DbType.Boolean;
				colvarIsEncrypted.MaxLength = 0;
				colvarIsEncrypted.AutoIncrement = false;
				colvarIsEncrypted.IsNullable = false;
				colvarIsEncrypted.IsPrimaryKey = false;
				colvarIsEncrypted.IsForeignKey = false;
				colvarIsEncrypted.IsReadOnly = false;
				colvarIsEncrypted.DefaultSetting = @"((0))";
				colvarIsEncrypted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsEncrypted);

				TableSchema.TableColumn colvarSubString = new TableSchema.TableColumn(schema);
				colvarSubString.ColumnName = "SubString";
				colvarSubString.DataType = DbType.AnsiString;
				colvarSubString.MaxLength = 50;
				colvarSubString.AutoIncrement = false;
				colvarSubString.IsNullable = true;
				colvarSubString.IsPrimaryKey = false;
				colvarSubString.IsForeignKey = false;
				colvarSubString.IsReadOnly = false;
				colvarSubString.DefaultSetting = @"";
				colvarSubString.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubString);

				TableSchema.TableColumn colvarSubDataSource = new TableSchema.TableColumn(schema);
				colvarSubDataSource.ColumnName = "SubDataSource";
				colvarSubDataSource.DataType = DbType.String;
				colvarSubDataSource.MaxLength = -1;
				colvarSubDataSource.AutoIncrement = false;
				colvarSubDataSource.IsNullable = true;
				colvarSubDataSource.IsPrimaryKey = false;
				colvarSubDataSource.IsForeignKey = false;
				colvarSubDataSource.IsReadOnly = false;
				colvarSubDataSource.DefaultSetting = @"";
				colvarSubDataSource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubDataSource);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BX_DocumentFields",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BX_DocumentField LoadFrom(BX_DocumentField item)
		{
			BX_DocumentField result = new BX_DocumentField();
			if (item.DocumentFieldID != default(int)) {
				result.LoadByKey(item.DocumentFieldID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DocumentFieldID {
			get { return GetColumnValue<int>(Columns.DocumentFieldID); }
			set {
				SetColumnValue(Columns.DocumentFieldID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocumentFieldID));
			}
		}
		[DataMember]
		public string BarcodeTypeId {
			get { return GetColumnValue<string>(Columns.BarcodeTypeId); }
			set {
				SetColumnValue(Columns.BarcodeTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeTypeId));
			}
		}
		[DataMember]
		public string FieldKey {
			get { return GetColumnValue<string>(Columns.FieldKey); }
			set {
				SetColumnValue(Columns.FieldKey, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FieldKey));
			}
		}
		[DataMember]
		public string DataType {
			get { return GetColumnValue<string>(Columns.DataType); }
			set {
				SetColumnValue(Columns.DataType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DataType));
			}
		}
		[DataMember]
		public short? Length {
			get { return GetColumnValue<short?>(Columns.Length); }
			set {
				SetColumnValue(Columns.Length, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Length));
			}
		}
		[DataMember]
		public bool Required {
			get { return GetColumnValue<bool>(Columns.Required); }
			set {
				SetColumnValue(Columns.Required, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Required));
			}
		}
		[DataMember]
		public string DefaultValue {
			get { return GetColumnValue<string>(Columns.DefaultValue); }
			set {
				SetColumnValue(Columns.DefaultValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultValue));
			}
		}
		[DataMember]
		public short Slots {
			get { return GetColumnValue<short>(Columns.Slots); }
			set {
				SetColumnValue(Columns.Slots, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Slots));
			}
		}
		[DataMember]
		public string Justification {
			get { return GetColumnValue<string>(Columns.Justification); }
			set {
				SetColumnValue(Columns.Justification, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Justification));
			}
		}
		[DataMember]
		public string Mask {
			get { return GetColumnValue<string>(Columns.Mask); }
			set {
				SetColumnValue(Columns.Mask, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Mask));
			}
		}
		[DataMember]
		public bool IsEncrypted {
			get { return GetColumnValue<bool>(Columns.IsEncrypted); }
			set {
				SetColumnValue(Columns.IsEncrypted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsEncrypted));
			}
		}
		[DataMember]
		public string SubString {
			get { return GetColumnValue<string>(Columns.SubString); }
			set {
				SetColumnValue(Columns.SubString, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubString));
			}
		}
		[DataMember]
		public string SubDataSource {
			get { return GetColumnValue<string>(Columns.SubDataSource); }
			set {
				SetColumnValue(Columns.SubDataSource, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubDataSource));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private BX_BarcodeType _BarcodeType;
		//Relationship: FK_BX_DocumentFields_BX_BarcodeTypes
		public BX_BarcodeType BarcodeType
		{
			get
			{
				if(_BarcodeType == null) {
					_BarcodeType = BX_BarcodeType.FetchByID(this.BarcodeTypeId);
				}
				return _BarcodeType;
			}
			set
			{
				SetColumnValue("BarcodeTypeId", value.BarcodeTypeID);
				_BarcodeType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BarcodeTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DocumentFieldIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BarcodeTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn FieldKeyColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DataTypeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LengthColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RequiredColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DefaultValueColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn SlotsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn JustificationColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn MaskColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsEncryptedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn SubStringColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn SubDataSourceColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DocumentFieldID = @"DocumentFieldID";
			public static readonly string BarcodeTypeId = @"BarcodeTypeId";
			public static readonly string FieldKey = @"FieldKey";
			public static readonly string DataType = @"DataType";
			public static readonly string Length = @"Length";
			public static readonly string Required = @"Required";
			public static readonly string DefaultValue = @"DefaultValue";
			public static readonly string Slots = @"Slots";
			public static readonly string Justification = @"Justification";
			public static readonly string Mask = @"Mask";
			public static readonly string IsEncrypted = @"IsEncrypted";
			public static readonly string SubString = @"SubString";
			public static readonly string SubDataSource = @"SubDataSource";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DocumentFieldID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the BX_Printer class.
	/// </summary>
	[DataContract]
	public partial class BX_PrinterCollection : ActiveList<BX_Printer, BX_PrinterCollection>
	{
		public static BX_PrinterCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			BX_PrinterCollection result = new BX_PrinterCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (BX_Printer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the BX_Printers table.
	/// </summary>
	[DataContract]
	public partial class BX_Printer : ActiveRecord<BX_Printer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public BX_Printer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("BX_Printers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPrinterID = new TableSchema.TableColumn(schema);
				colvarPrinterID.ColumnName = "PrinterID";
				colvarPrinterID.DataType = DbType.AnsiStringFixedLength;
				colvarPrinterID.MaxLength = 3;
				colvarPrinterID.AutoIncrement = false;
				colvarPrinterID.IsNullable = false;
				colvarPrinterID.IsPrimaryKey = true;
				colvarPrinterID.IsForeignKey = false;
				colvarPrinterID.IsReadOnly = false;
				colvarPrinterID.DefaultSetting = @"";
				colvarPrinterID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterID);

				TableSchema.TableColumn colvarPrinterName = new TableSchema.TableColumn(schema);
				colvarPrinterName.ColumnName = "PrinterName";
				colvarPrinterName.DataType = DbType.String;
				colvarPrinterName.MaxLength = 50;
				colvarPrinterName.AutoIncrement = false;
				colvarPrinterName.IsNullable = false;
				colvarPrinterName.IsPrimaryKey = false;
				colvarPrinterName.IsForeignKey = false;
				colvarPrinterName.IsReadOnly = false;
				colvarPrinterName.DefaultSetting = @"";
				colvarPrinterName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterName);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("BX_Printers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static BX_Printer LoadFrom(BX_Printer item)
		{
			BX_Printer result = new BX_Printer();
			if (item.PrinterID != default(string)) {
				result.LoadByKey(item.PrinterID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string PrinterID {
			get { return GetColumnValue<string>(Columns.PrinterID); }
			set {
				SetColumnValue(Columns.PrinterID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrinterID));
			}
		}
		[DataMember]
		public string PrinterName {
			get { return GetColumnValue<string>(Columns.PrinterName); }
			set {
				SetColumnValue(Columns.PrinterName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrinterName));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return PrinterName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PrinterIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PrinterNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PrinterID = @"PrinterID";
			public static readonly string PrinterName = @"PrinterName";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PrinterID; }
		}
		*/

		#region Foreign Collections

		private BX_BarcodeTypeCollection _BX_BarcodeTypesCol;
		//Relationship: FK_BX_BarcodeTypes_BX_Printers
		public BX_BarcodeTypeCollection BX_BarcodeTypesCol
		{
			get
			{
				if(_BX_BarcodeTypesCol == null) {
					_BX_BarcodeTypesCol = new BX_BarcodeTypeCollection();
					_BX_BarcodeTypesCol.LoadAndCloseReader(BX_BarcodeType.Query()
						.WHERE(BX_BarcodeType.Columns.PrinterId, PrinterID).ExecuteReader());
				}
				return _BX_BarcodeTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the CA_Appointment class.
	/// </summary>
	[DataContract]
	public partial class CA_AppointmentCollection : ActiveList<CA_Appointment, CA_AppointmentCollection>
	{
		public static CA_AppointmentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			CA_AppointmentCollection result = new CA_AppointmentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (CA_Appointment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the CA_Appointments table.
	/// </summary>
	[DataContract]
	public partial class CA_Appointment : ActiveRecord<CA_Appointment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public CA_Appointment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CA_Appointments", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAppointmentID = new TableSchema.TableColumn(schema);
				colvarAppointmentID.ColumnName = "AppointmentID";
				colvarAppointmentID.DataType = DbType.Int64;
				colvarAppointmentID.MaxLength = 0;
				colvarAppointmentID.AutoIncrement = true;
				colvarAppointmentID.IsNullable = false;
				colvarAppointmentID.IsPrimaryKey = true;
				colvarAppointmentID.IsForeignKey = false;
				colvarAppointmentID.IsReadOnly = false;
				colvarAppointmentID.DefaultSetting = @"";
				colvarAppointmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppointmentID);

				TableSchema.TableColumn colvarAppointmentTypeId = new TableSchema.TableColumn(schema);
				colvarAppointmentTypeId.ColumnName = "AppointmentTypeId";
				colvarAppointmentTypeId.DataType = DbType.AnsiString;
				colvarAppointmentTypeId.MaxLength = 20;
				colvarAppointmentTypeId.AutoIncrement = false;
				colvarAppointmentTypeId.IsNullable = false;
				colvarAppointmentTypeId.IsPrimaryKey = false;
				colvarAppointmentTypeId.IsForeignKey = true;
				colvarAppointmentTypeId.IsReadOnly = false;
				colvarAppointmentTypeId.DefaultSetting = @"";
				colvarAppointmentTypeId.ForeignKeyTableName = "CA_AppointmentTypes";
				schema.Columns.Add(colvarAppointmentTypeId);

				TableSchema.TableColumn colvarDealerUserId = new TableSchema.TableColumn(schema);
				colvarDealerUserId.ColumnName = "DealerUserId";
				colvarDealerUserId.DataType = DbType.Int32;
				colvarDealerUserId.MaxLength = 0;
				colvarDealerUserId.AutoIncrement = false;
				colvarDealerUserId.IsNullable = false;
				colvarDealerUserId.IsPrimaryKey = false;
				colvarDealerUserId.IsForeignKey = true;
				colvarDealerUserId.IsReadOnly = false;
				colvarDealerUserId.DefaultSetting = @"";
				colvarDealerUserId.ForeignKeyTableName = "MC_DealerUsers";
				schema.Columns.Add(colvarDealerUserId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = true;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = true;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "QL_Leads";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = true;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = true;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "AE_Customers";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = true;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = true;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "AE_CustomerMasterFiles";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.String;
				colvarTitle.MaxLength = 200;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = false;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = -1;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarUrl = new TableSchema.TableColumn(schema);
				colvarUrl.ColumnName = "Url";
				colvarUrl.DataType = DbType.AnsiString;
				colvarUrl.MaxLength = 500;
				colvarUrl.AutoIncrement = false;
				colvarUrl.IsNullable = true;
				colvarUrl.IsPrimaryKey = false;
				colvarUrl.IsForeignKey = false;
				colvarUrl.IsReadOnly = false;
				colvarUrl.DefaultSetting = @"";
				colvarUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUrl);

				TableSchema.TableColumn colvarAllDay = new TableSchema.TableColumn(schema);
				colvarAllDay.ColumnName = "AllDay";
				colvarAllDay.DataType = DbType.Boolean;
				colvarAllDay.MaxLength = 0;
				colvarAllDay.AutoIncrement = false;
				colvarAllDay.IsNullable = false;
				colvarAllDay.IsPrimaryKey = false;
				colvarAllDay.IsForeignKey = false;
				colvarAllDay.IsReadOnly = false;
				colvarAllDay.DefaultSetting = @"((0))";
				colvarAllDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllDay);

				TableSchema.TableColumn colvarStartDateTime = new TableSchema.TableColumn(schema);
				colvarStartDateTime.ColumnName = "StartDateTime";
				colvarStartDateTime.DataType = DbType.DateTime;
				colvarStartDateTime.MaxLength = 0;
				colvarStartDateTime.AutoIncrement = false;
				colvarStartDateTime.IsNullable = false;
				colvarStartDateTime.IsPrimaryKey = false;
				colvarStartDateTime.IsForeignKey = false;
				colvarStartDateTime.IsReadOnly = false;
				colvarStartDateTime.DefaultSetting = @"";
				colvarStartDateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDateTime);

				TableSchema.TableColumn colvarEndDateTime = new TableSchema.TableColumn(schema);
				colvarEndDateTime.ColumnName = "EndDateTime";
				colvarEndDateTime.DataType = DbType.DateTime;
				colvarEndDateTime.MaxLength = 0;
				colvarEndDateTime.AutoIncrement = false;
				colvarEndDateTime.IsNullable = false;
				colvarEndDateTime.IsPrimaryKey = false;
				colvarEndDateTime.IsForeignKey = false;
				colvarEndDateTime.IsReadOnly = false;
				colvarEndDateTime.DefaultSetting = @"";
				colvarEndDateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDateTime);

				TableSchema.TableColumn colvarRemindMeMediaTypeId = new TableSchema.TableColumn(schema);
				colvarRemindMeMediaTypeId.ColumnName = "RemindMeMediaTypeId";
				colvarRemindMeMediaTypeId.DataType = DbType.AnsiString;
				colvarRemindMeMediaTypeId.MaxLength = 20;
				colvarRemindMeMediaTypeId.AutoIncrement = false;
				colvarRemindMeMediaTypeId.IsNullable = true;
				colvarRemindMeMediaTypeId.IsPrimaryKey = false;
				colvarRemindMeMediaTypeId.IsForeignKey = true;
				colvarRemindMeMediaTypeId.IsReadOnly = false;
				colvarRemindMeMediaTypeId.DefaultSetting = @"";
				colvarRemindMeMediaTypeId.ForeignKeyTableName = "CA_ReminderMediaTypes";
				schema.Columns.Add(colvarRemindMeMediaTypeId);

				TableSchema.TableColumn colvarRemindMeDelayTypeId = new TableSchema.TableColumn(schema);
				colvarRemindMeDelayTypeId.ColumnName = "RemindMeDelayTypeId";
				colvarRemindMeDelayTypeId.DataType = DbType.AnsiString;
				colvarRemindMeDelayTypeId.MaxLength = 20;
				colvarRemindMeDelayTypeId.AutoIncrement = false;
				colvarRemindMeDelayTypeId.IsNullable = true;
				colvarRemindMeDelayTypeId.IsPrimaryKey = false;
				colvarRemindMeDelayTypeId.IsForeignKey = true;
				colvarRemindMeDelayTypeId.IsReadOnly = false;
				colvarRemindMeDelayTypeId.DefaultSetting = @"";
				colvarRemindMeDelayTypeId.ForeignKeyTableName = "CA_ReminderDelyTypes";
				schema.Columns.Add(colvarRemindMeDelayTypeId);

				TableSchema.TableColumn colvarRemindCustomerMediaTypeId = new TableSchema.TableColumn(schema);
				colvarRemindCustomerMediaTypeId.ColumnName = "RemindCustomerMediaTypeId";
				colvarRemindCustomerMediaTypeId.DataType = DbType.AnsiString;
				colvarRemindCustomerMediaTypeId.MaxLength = 20;
				colvarRemindCustomerMediaTypeId.AutoIncrement = false;
				colvarRemindCustomerMediaTypeId.IsNullable = true;
				colvarRemindCustomerMediaTypeId.IsPrimaryKey = false;
				colvarRemindCustomerMediaTypeId.IsForeignKey = true;
				colvarRemindCustomerMediaTypeId.IsReadOnly = false;
				colvarRemindCustomerMediaTypeId.DefaultSetting = @"";
				colvarRemindCustomerMediaTypeId.ForeignKeyTableName = "CA_ReminderMediaTypes";
				schema.Columns.Add(colvarRemindCustomerMediaTypeId);

				TableSchema.TableColumn colvarRemindCustomerDelayTypeId = new TableSchema.TableColumn(schema);
				colvarRemindCustomerDelayTypeId.ColumnName = "RemindCustomerDelayTypeId";
				colvarRemindCustomerDelayTypeId.DataType = DbType.AnsiString;
				colvarRemindCustomerDelayTypeId.MaxLength = 20;
				colvarRemindCustomerDelayTypeId.AutoIncrement = false;
				colvarRemindCustomerDelayTypeId.IsNullable = true;
				colvarRemindCustomerDelayTypeId.IsPrimaryKey = false;
				colvarRemindCustomerDelayTypeId.IsForeignKey = true;
				colvarRemindCustomerDelayTypeId.IsReadOnly = false;
				colvarRemindCustomerDelayTypeId.DefaultSetting = @"";
				colvarRemindCustomerDelayTypeId.ForeignKeyTableName = "CA_ReminderDelyTypes";
				schema.Columns.Add(colvarRemindCustomerDelayTypeId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("CA_Appointments",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static CA_Appointment LoadFrom(CA_Appointment item)
		{
			CA_Appointment result = new CA_Appointment();
			if (item.AppointmentID != default(long)) {
				result.LoadByKey(item.AppointmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AppointmentID {
			get { return GetColumnValue<long>(Columns.AppointmentID); }
			set {
				SetColumnValue(Columns.AppointmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AppointmentID));
			}
		}
		[DataMember]
		public string AppointmentTypeId {
			get { return GetColumnValue<string>(Columns.AppointmentTypeId); }
			set {
				SetColumnValue(Columns.AppointmentTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AppointmentTypeId));
			}
		}
		[DataMember]
		public int DealerUserId {
			get { return GetColumnValue<int>(Columns.DealerUserId); }
			set {
				SetColumnValue(Columns.DealerUserId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerUserId));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public long? LeadId {
			get { return GetColumnValue<long?>(Columns.LeadId); }
			set {
				SetColumnValue(Columns.LeadId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadId));
			}
		}
		[DataMember]
		public long? CustomerId {
			get { return GetColumnValue<long?>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public long? CustomerMasterFileId {
			get { return GetColumnValue<long?>(Columns.CustomerMasterFileId); }
			set {
				SetColumnValue(Columns.CustomerMasterFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileId));
			}
		}
		[DataMember]
		public string Title {
			get { return GetColumnValue<string>(Columns.Title); }
			set {
				SetColumnValue(Columns.Title, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Title));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string Url {
			get { return GetColumnValue<string>(Columns.Url); }
			set {
				SetColumnValue(Columns.Url, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Url));
			}
		}
		[DataMember]
		public bool AllDay {
			get { return GetColumnValue<bool>(Columns.AllDay); }
			set {
				SetColumnValue(Columns.AllDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AllDay));
			}
		}
		[DataMember]
		public DateTime StartDateTime {
			get { return GetColumnValue<DateTime>(Columns.StartDateTime); }
			set {
				SetColumnValue(Columns.StartDateTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartDateTime));
			}
		}
		[DataMember]
		public DateTime EndDateTime {
			get { return GetColumnValue<DateTime>(Columns.EndDateTime); }
			set {
				SetColumnValue(Columns.EndDateTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EndDateTime));
			}
		}
		[DataMember]
		public string RemindMeMediaTypeId {
			get { return GetColumnValue<string>(Columns.RemindMeMediaTypeId); }
			set {
				SetColumnValue(Columns.RemindMeMediaTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RemindMeMediaTypeId));
			}
		}
		[DataMember]
		public string RemindMeDelayTypeId {
			get { return GetColumnValue<string>(Columns.RemindMeDelayTypeId); }
			set {
				SetColumnValue(Columns.RemindMeDelayTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RemindMeDelayTypeId));
			}
		}
		[DataMember]
		public string RemindCustomerMediaTypeId {
			get { return GetColumnValue<string>(Columns.RemindCustomerMediaTypeId); }
			set {
				SetColumnValue(Columns.RemindCustomerMediaTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RemindCustomerMediaTypeId));
			}
		}
		[DataMember]
		public string RemindCustomerDelayTypeId {
			get { return GetColumnValue<string>(Columns.RemindCustomerDelayTypeId); }
			set {
				SetColumnValue(Columns.RemindCustomerDelayTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RemindCustomerDelayTypeId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_CustomerMasterFile _CustomerMasterFile;
		//Relationship: FK_CA_Appointments_AE_CustomerMasterFiles
		public AE_CustomerMasterFile CustomerMasterFile
		{
			get
			{
				if(_CustomerMasterFile == null) {
					_CustomerMasterFile = AE_CustomerMasterFile.FetchByID(this.CustomerMasterFileId);
				}
				return _CustomerMasterFile;
			}
			set
			{
				SetColumnValue("CustomerMasterFileId", value.CustomerMasterFileID);
				_CustomerMasterFile = value;
			}
		}

		private AE_Customer _Customer;
		//Relationship: FK_CA_Appointments_AE_Customers
		public AE_Customer Customer
		{
			get
			{
				if(_Customer == null) {
					_Customer = AE_Customer.FetchByID(this.CustomerId);
				}
				return _Customer;
			}
			set
			{
				SetColumnValue("CustomerId", value.CustomerID);
				_Customer = value;
			}
		}

		private AE_Dealer _Dealer;
		//Relationship: FK_CA_Appointments_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		private CA_AppointmentType _AppointmentType;
		//Relationship: FK_CA_Appointments_CA_AppointmentTypes
		public CA_AppointmentType AppointmentType
		{
			get
			{
				if(_AppointmentType == null) {
					_AppointmentType = CA_AppointmentType.FetchByID(this.AppointmentTypeId);
				}
				return _AppointmentType;
			}
			set
			{
				SetColumnValue("AppointmentTypeId", value.AppointmentTypeID);
				_AppointmentType = value;
			}
		}

		private CA_ReminderDelyType _RemindCustomerDelayType;
		//Relationship: FK_CA_Appointments_CA_ReminderCustomerDelyTypes
		public CA_ReminderDelyType RemindCustomerDelayType
		{
			get
			{
				if(_RemindCustomerDelayType == null) {
					_RemindCustomerDelayType = CA_ReminderDelyType.FetchByID(this.RemindCustomerDelayTypeId);
				}
				return _RemindCustomerDelayType;
			}
			set
			{
				SetColumnValue("RemindCustomerDelayTypeId", value.ReminderDelyTypeID);
				_RemindCustomerDelayType = value;
			}
		}

		private CA_ReminderMediaType _RemindCustomerMediaType;
		//Relationship: FK_CA_Appointments_CA_ReminderCustomerMediaTypes
		public CA_ReminderMediaType RemindCustomerMediaType
		{
			get
			{
				if(_RemindCustomerMediaType == null) {
					_RemindCustomerMediaType = CA_ReminderMediaType.FetchByID(this.RemindCustomerMediaTypeId);
				}
				return _RemindCustomerMediaType;
			}
			set
			{
				SetColumnValue("RemindCustomerMediaTypeId", value.ReminderMediaTypeID);
				_RemindCustomerMediaType = value;
			}
		}

		private CA_ReminderDelyType _RemindMeDelayType;
		//Relationship: FK_CA_Appointments_CA_ReminderDelyTypes
		public CA_ReminderDelyType RemindMeDelayType
		{
			get
			{
				if(_RemindMeDelayType == null) {
					_RemindMeDelayType = CA_ReminderDelyType.FetchByID(this.RemindMeDelayTypeId);
				}
				return _RemindMeDelayType;
			}
			set
			{
				SetColumnValue("RemindMeDelayTypeId", value.ReminderDelyTypeID);
				_RemindMeDelayType = value;
			}
		}

		private CA_ReminderMediaType _RemindMeMediaType;
		//Relationship: FK_CA_Appointments_CA_ReminderMediaTypes
		public CA_ReminderMediaType RemindMeMediaType
		{
			get
			{
				if(_RemindMeMediaType == null) {
					_RemindMeMediaType = CA_ReminderMediaType.FetchByID(this.RemindMeMediaTypeId);
				}
				return _RemindMeMediaType;
			}
			set
			{
				SetColumnValue("RemindMeMediaTypeId", value.ReminderMediaTypeID);
				_RemindMeMediaType = value;
			}
		}

		private MC_DealerUser _DealerUser;
		//Relationship: FK_CA_Appointments_MC_DealerUsers
		public MC_DealerUser DealerUser
		{
			get
			{
				if(_DealerUser == null) {
					_DealerUser = MC_DealerUser.FetchByID(this.DealerUserId);
				}
				return _DealerUser;
			}
			set
			{
				SetColumnValue("DealerUserId", value.DealerUserID);
				_DealerUser = value;
			}
		}

		private QL_Lead _Lead;
		//Relationship: FK_CA_Appointments_QL_Leads
		public QL_Lead Lead
		{
			get
			{
				if(_Lead == null) {
					_Lead = QL_Lead.FetchByID(this.LeadId);
				}
				return _Lead;
			}
			set
			{
				SetColumnValue("LeadId", value.LeadID);
				_Lead = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AppointmentTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AppointmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AppointmentTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DealerUserIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn TitleColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn UrlColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn AllDayColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn StartDateTimeColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn EndDateTimeColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn RemindMeMediaTypeIdColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn RemindMeDelayTypeIdColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn RemindCustomerMediaTypeIdColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn RemindCustomerDelayTypeIdColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[23]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AppointmentID = @"AppointmentID";
			public static readonly string AppointmentTypeId = @"AppointmentTypeId";
			public static readonly string DealerUserId = @"DealerUserId";
			public static readonly string DealerId = @"DealerId";
			public static readonly string LeadId = @"LeadId";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string CustomerMasterFileId = @"CustomerMasterFileId";
			public static readonly string Title = @"Title";
			public static readonly string Description = @"Description";
			public static readonly string Url = @"Url";
			public static readonly string AllDay = @"AllDay";
			public static readonly string StartDateTime = @"StartDateTime";
			public static readonly string EndDateTime = @"EndDateTime";
			public static readonly string RemindMeMediaTypeId = @"RemindMeMediaTypeId";
			public static readonly string RemindMeDelayTypeId = @"RemindMeDelayTypeId";
			public static readonly string RemindCustomerMediaTypeId = @"RemindCustomerMediaTypeId";
			public static readonly string RemindCustomerDelayTypeId = @"RemindCustomerDelayTypeId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AppointmentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the CA_AppointmentType class.
	/// </summary>
	[DataContract]
	public partial class CA_AppointmentTypeCollection : ActiveList<CA_AppointmentType, CA_AppointmentTypeCollection>
	{
		public static CA_AppointmentTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			CA_AppointmentTypeCollection result = new CA_AppointmentTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (CA_AppointmentType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the CA_AppointmentTypes table.
	/// </summary>
	[DataContract]
	public partial class CA_AppointmentType : ActiveRecord<CA_AppointmentType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Customer_FollowupID = "CUSTFOLLOWUP";
			[EnumMember()] public const string Lead_FollowupID = "LEADFOLLOWUP";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public CA_AppointmentType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CA_AppointmentTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAppointmentTypeID = new TableSchema.TableColumn(schema);
				colvarAppointmentTypeID.ColumnName = "AppointmentTypeID";
				colvarAppointmentTypeID.DataType = DbType.AnsiString;
				colvarAppointmentTypeID.MaxLength = 20;
				colvarAppointmentTypeID.AutoIncrement = false;
				colvarAppointmentTypeID.IsNullable = false;
				colvarAppointmentTypeID.IsPrimaryKey = true;
				colvarAppointmentTypeID.IsForeignKey = false;
				colvarAppointmentTypeID.IsReadOnly = false;
				colvarAppointmentTypeID.DefaultSetting = @"";
				colvarAppointmentTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppointmentTypeID);

				TableSchema.TableColumn colvarAppointmentType = new TableSchema.TableColumn(schema);
				colvarAppointmentType.ColumnName = "AppointmentType";
				colvarAppointmentType.DataType = DbType.String;
				colvarAppointmentType.MaxLength = 50;
				colvarAppointmentType.AutoIncrement = false;
				colvarAppointmentType.IsNullable = false;
				colvarAppointmentType.IsPrimaryKey = false;
				colvarAppointmentType.IsForeignKey = false;
				colvarAppointmentType.IsReadOnly = false;
				colvarAppointmentType.DefaultSetting = @"";
				colvarAppointmentType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppointmentType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("CA_AppointmentTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static CA_AppointmentType LoadFrom(CA_AppointmentType item)
		{
			CA_AppointmentType result = new CA_AppointmentType();
			if (item.AppointmentTypeID != default(string)) {
				result.LoadByKey(item.AppointmentTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AppointmentTypeID {
			get { return GetColumnValue<string>(Columns.AppointmentTypeID); }
			set {
				SetColumnValue(Columns.AppointmentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AppointmentTypeID));
			}
		}
		[DataMember]
		public string AppointmentType {
			get { return GetColumnValue<string>(Columns.AppointmentType); }
			set {
				SetColumnValue(Columns.AppointmentType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AppointmentType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AppointmentType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AppointmentTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AppointmentTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AppointmentTypeID = @"AppointmentTypeID";
			public static readonly string AppointmentType = @"AppointmentType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AppointmentTypeID; }
		}
		*/

		#region Foreign Collections

		private CA_AppointmentCollection _CA_AppointmentsCol;
		//Relationship: FK_CA_Appointments_CA_AppointmentTypes
		public CA_AppointmentCollection CA_AppointmentsCol
		{
			get
			{
				if(_CA_AppointmentsCol == null) {
					_CA_AppointmentsCol = new CA_AppointmentCollection();
					_CA_AppointmentsCol.LoadAndCloseReader(CA_Appointment.Query()
						.WHERE(CA_Appointment.Columns.AppointmentTypeId, AppointmentTypeID).ExecuteReader());
				}
				return _CA_AppointmentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the CA_ReminderDelyType class.
	/// </summary>
	[DataContract]
	public partial class CA_ReminderDelyTypeCollection : ActiveList<CA_ReminderDelyType, CA_ReminderDelyTypeCollection>
	{
		public static CA_ReminderDelyTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			CA_ReminderDelyTypeCollection result = new CA_ReminderDelyTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (CA_ReminderDelyType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the CA_ReminderDelyTypes table.
	/// </summary>
	[DataContract]
	public partial class CA_ReminderDelyType : ActiveRecord<CA_ReminderDelyType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Minutes_0ID = "0-MINUTES";
			[EnumMember()] public const string DayHalfID = "0.5-DAY";
			[EnumMember()] public const string Day1ID = "1-DAY";
			[EnumMember()] public const string Hour1ID = "1-HOUR";
			[EnumMember()] public const string Week1ID = "1-WEEK";
			[EnumMember()] public const string Hours10ID = "10-HOUR";
			[EnumMember()] public const string Minutes10ID = "10-MINUTES";
			[EnumMember()] public const string Hours11ID = "11-HOUR";
			[EnumMember()] public const string Minutes15ID = "15-MINUTES";
			[EnumMember()] public const string Hours18ID = "18-HOUR";
			[EnumMember()] public const string Day2ID = "2-DAY";
			[EnumMember()] public const string Hours2ID = "2-HOUR";
			[EnumMember()] public const string Week2ID = "2-WEEK";
			[EnumMember()] public const string Day3ID = "3-DAY";
			[EnumMember()] public const string Hours3ID = "3-HOUR";
			[EnumMember()] public const string Minutes30ID = "30-MINUTES";
			[EnumMember()] public const string Day4ID = "4-DAY";
			[EnumMember()] public const string Hours4ID = "4-HOUR";
			[EnumMember()] public const string Hours5ID = "5-HOUR";
			[EnumMember()] public const string Minutes5ID = "5-MINUTES";
			[EnumMember()] public const string Hours6ID = "6-HOUR";
			[EnumMember()] public const string Hours7ID = "7-HOUR";
			[EnumMember()] public const string Hours8ID = "8-HOUR";
			[EnumMember()] public const string Hours9ID = "9-HOUR";
			[EnumMember()] public const string NoneID = "NONE";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public CA_ReminderDelyType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CA_ReminderDelyTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarReminderDelyTypeID = new TableSchema.TableColumn(schema);
				colvarReminderDelyTypeID.ColumnName = "ReminderDelyTypeID";
				colvarReminderDelyTypeID.DataType = DbType.AnsiString;
				colvarReminderDelyTypeID.MaxLength = 20;
				colvarReminderDelyTypeID.AutoIncrement = false;
				colvarReminderDelyTypeID.IsNullable = false;
				colvarReminderDelyTypeID.IsPrimaryKey = true;
				colvarReminderDelyTypeID.IsForeignKey = false;
				colvarReminderDelyTypeID.IsReadOnly = false;
				colvarReminderDelyTypeID.DefaultSetting = @"";
				colvarReminderDelyTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReminderDelyTypeID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.AnsiString;
				colvarName.MaxLength = 20;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarReminderDelyType = new TableSchema.TableColumn(schema);
				colvarReminderDelyType.ColumnName = "ReminderDelyType";
				colvarReminderDelyType.DataType = DbType.AnsiString;
				colvarReminderDelyType.MaxLength = 50;
				colvarReminderDelyType.AutoIncrement = false;
				colvarReminderDelyType.IsNullable = false;
				colvarReminderDelyType.IsPrimaryKey = false;
				colvarReminderDelyType.IsForeignKey = false;
				colvarReminderDelyType.IsReadOnly = false;
				colvarReminderDelyType.DefaultSetting = @"";
				colvarReminderDelyType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReminderDelyType);

				TableSchema.TableColumn colvarSortOrder = new TableSchema.TableColumn(schema);
				colvarSortOrder.ColumnName = "SortOrder";
				colvarSortOrder.DataType = DbType.Int16;
				colvarSortOrder.MaxLength = 0;
				colvarSortOrder.AutoIncrement = false;
				colvarSortOrder.IsNullable = false;
				colvarSortOrder.IsPrimaryKey = false;
				colvarSortOrder.IsForeignKey = false;
				colvarSortOrder.IsReadOnly = false;
				colvarSortOrder.DefaultSetting = @"((1))";
				colvarSortOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSortOrder);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("CA_ReminderDelyTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static CA_ReminderDelyType LoadFrom(CA_ReminderDelyType item)
		{
			CA_ReminderDelyType result = new CA_ReminderDelyType();
			if (item.ReminderDelyTypeID != default(string)) {
				result.LoadByKey(item.ReminderDelyTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ReminderDelyTypeID {
			get { return GetColumnValue<string>(Columns.ReminderDelyTypeID); }
			set {
				SetColumnValue(Columns.ReminderDelyTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReminderDelyTypeID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public string ReminderDelyType {
			get { return GetColumnValue<string>(Columns.ReminderDelyType); }
			set {
				SetColumnValue(Columns.ReminderDelyType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReminderDelyType));
			}
		}
		[DataMember]
		public short SortOrder {
			get { return GetColumnValue<short>(Columns.SortOrder); }
			set {
				SetColumnValue(Columns.SortOrder, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SortOrder));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ReminderDelyTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ReminderDelyTypeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SortOrderColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ReminderDelyTypeID = @"ReminderDelyTypeID";
			public static readonly string Name = @"Name";
			public static readonly string ReminderDelyType = @"ReminderDelyType";
			public static readonly string SortOrder = @"SortOrder";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ReminderDelyTypeID; }
		}
		*/

		#region Foreign Collections

		private CA_AppointmentCollection _CA_AppointmentsCol;
		//Relationship: FK_CA_Appointments_CA_ReminderCustomerDelyTypes
		public CA_AppointmentCollection CA_AppointmentsCol
		{
			get
			{
				if(_CA_AppointmentsCol == null) {
					_CA_AppointmentsCol = new CA_AppointmentCollection();
					_CA_AppointmentsCol.LoadAndCloseReader(CA_Appointment.Query()
						.WHERE(CA_Appointment.Columns.RemindCustomerDelayTypeId, ReminderDelyTypeID).ExecuteReader());
				}
				return _CA_AppointmentsCol;
			}
		}

		private CA_AppointmentCollection _CA_Appointments02Col;
		//Relationship: FK_CA_Appointments_CA_ReminderDelyTypes
		public CA_AppointmentCollection CA_Appointments02Col
		{
			get
			{
				if(_CA_Appointments02Col == null) {
					_CA_Appointments02Col = new CA_AppointmentCollection();
					_CA_Appointments02Col.LoadAndCloseReader(CA_Appointment.Query()
						.WHERE(CA_Appointment.Columns.RemindMeDelayTypeId, ReminderDelyTypeID).ExecuteReader());
				}
				return _CA_Appointments02Col;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the CA_ReminderMediaType class.
	/// </summary>
	[DataContract]
	public partial class CA_ReminderMediaTypeCollection : ActiveList<CA_ReminderMediaType, CA_ReminderMediaTypeCollection>
	{
		public static CA_ReminderMediaTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			CA_ReminderMediaTypeCollection result = new CA_ReminderMediaTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (CA_ReminderMediaType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the CA_ReminderMediaTypes table.
	/// </summary>
	[DataContract]
	public partial class CA_ReminderMediaType : ActiveRecord<CA_ReminderMediaType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string EmailID = "EMAIL";
			[EnumMember()] public const string BothID = "EMAIL-TXT_MESSAGE";
			[EnumMember()] public const string Text_MessageID = "TXT_MESSAGE";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public CA_ReminderMediaType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("CA_ReminderMediaTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarReminderMediaTypeID = new TableSchema.TableColumn(schema);
				colvarReminderMediaTypeID.ColumnName = "ReminderMediaTypeID";
				colvarReminderMediaTypeID.DataType = DbType.AnsiString;
				colvarReminderMediaTypeID.MaxLength = 20;
				colvarReminderMediaTypeID.AutoIncrement = false;
				colvarReminderMediaTypeID.IsNullable = false;
				colvarReminderMediaTypeID.IsPrimaryKey = true;
				colvarReminderMediaTypeID.IsForeignKey = false;
				colvarReminderMediaTypeID.IsReadOnly = false;
				colvarReminderMediaTypeID.DefaultSetting = @"";
				colvarReminderMediaTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReminderMediaTypeID);

				TableSchema.TableColumn colvarReminderMediaType = new TableSchema.TableColumn(schema);
				colvarReminderMediaType.ColumnName = "ReminderMediaType";
				colvarReminderMediaType.DataType = DbType.AnsiString;
				colvarReminderMediaType.MaxLength = 50;
				colvarReminderMediaType.AutoIncrement = false;
				colvarReminderMediaType.IsNullable = false;
				colvarReminderMediaType.IsPrimaryKey = false;
				colvarReminderMediaType.IsForeignKey = false;
				colvarReminderMediaType.IsReadOnly = false;
				colvarReminderMediaType.DefaultSetting = @"";
				colvarReminderMediaType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReminderMediaType);

				TableSchema.TableColumn colvarSortOrder = new TableSchema.TableColumn(schema);
				colvarSortOrder.ColumnName = "SortOrder";
				colvarSortOrder.DataType = DbType.Int16;
				colvarSortOrder.MaxLength = 0;
				colvarSortOrder.AutoIncrement = false;
				colvarSortOrder.IsNullable = false;
				colvarSortOrder.IsPrimaryKey = false;
				colvarSortOrder.IsForeignKey = false;
				colvarSortOrder.IsReadOnly = false;
				colvarSortOrder.DefaultSetting = @"((1))";
				colvarSortOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSortOrder);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("CA_ReminderMediaTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static CA_ReminderMediaType LoadFrom(CA_ReminderMediaType item)
		{
			CA_ReminderMediaType result = new CA_ReminderMediaType();
			if (item.ReminderMediaTypeID != default(string)) {
				result.LoadByKey(item.ReminderMediaTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ReminderMediaTypeID {
			get { return GetColumnValue<string>(Columns.ReminderMediaTypeID); }
			set {
				SetColumnValue(Columns.ReminderMediaTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReminderMediaTypeID));
			}
		}
		[DataMember]
		public string ReminderMediaType {
			get { return GetColumnValue<string>(Columns.ReminderMediaType); }
			set {
				SetColumnValue(Columns.ReminderMediaType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReminderMediaType));
			}
		}
		[DataMember]
		public short SortOrder {
			get { return GetColumnValue<short>(Columns.SortOrder); }
			set {
				SetColumnValue(Columns.SortOrder, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SortOrder));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ReminderMediaType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ReminderMediaTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ReminderMediaTypeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SortOrderColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ReminderMediaTypeID = @"ReminderMediaTypeID";
			public static readonly string ReminderMediaType = @"ReminderMediaType";
			public static readonly string SortOrder = @"SortOrder";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ReminderMediaTypeID; }
		}
		*/

		#region Foreign Collections

		private CA_AppointmentCollection _CA_AppointmentsCol;
		//Relationship: FK_CA_Appointments_CA_ReminderCustomerMediaTypes
		public CA_AppointmentCollection CA_AppointmentsCol
		{
			get
			{
				if(_CA_AppointmentsCol == null) {
					_CA_AppointmentsCol = new CA_AppointmentCollection();
					_CA_AppointmentsCol.LoadAndCloseReader(CA_Appointment.Query()
						.WHERE(CA_Appointment.Columns.RemindCustomerMediaTypeId, ReminderMediaTypeID).ExecuteReader());
				}
				return _CA_AppointmentsCol;
			}
		}

		private CA_AppointmentCollection _CA_Appointments02Col;
		//Relationship: FK_CA_Appointments_CA_ReminderMediaTypes
		public CA_AppointmentCollection CA_Appointments02Col
		{
			get
			{
				if(_CA_Appointments02Col == null) {
					_CA_Appointments02Col = new CA_AppointmentCollection();
					_CA_Appointments02Col.LoadAndCloseReader(CA_Appointment.Query()
						.WHERE(CA_Appointment.Columns.RemindMeMediaTypeId, ReminderMediaTypeID).ExecuteReader());
				}
				return _CA_Appointments02Col;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the DC_AreaCode class.
	/// </summary>
	[DataContract]
	public partial class DC_AreaCodeCollection : ActiveList<DC_AreaCode, DC_AreaCodeCollection>
	{
		public static DC_AreaCodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			DC_AreaCodeCollection result = new DC_AreaCodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (DC_AreaCode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the DC_AreaCodes table.
	/// </summary>
	[DataContract]
	public partial class DC_AreaCode : ActiveRecord<DC_AreaCode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public DC_AreaCode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DC_AreaCodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAreaCodeID = new TableSchema.TableColumn(schema);
				colvarAreaCodeID.ColumnName = "AreaCodeID";
				colvarAreaCodeID.DataType = DbType.AnsiStringFixedLength;
				colvarAreaCodeID.MaxLength = 3;
				colvarAreaCodeID.AutoIncrement = false;
				colvarAreaCodeID.IsNullable = false;
				colvarAreaCodeID.IsPrimaryKey = true;
				colvarAreaCodeID.IsForeignKey = false;
				colvarAreaCodeID.IsReadOnly = false;
				colvarAreaCodeID.DefaultSetting = @"";
				colvarAreaCodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAreaCodeID);

				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "State";
				colvarState.DataType = DbType.AnsiString;
				colvarState.MaxLength = 50;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = false;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				colvarState.DefaultSetting = @"";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("DC_AreaCodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static DC_AreaCode LoadFrom(DC_AreaCode item)
		{
			DC_AreaCode result = new DC_AreaCode();
			if (item.AreaCodeID != default(string)) {
				result.LoadByKey(item.AreaCodeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AreaCodeID {
			get { return GetColumnValue<string>(Columns.AreaCodeID); }
			set {
				SetColumnValue(Columns.AreaCodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AreaCodeID));
			}
		}
		[DataMember]
		public string State {
			get { return GetColumnValue<string>(Columns.State); }
			set {
				SetColumnValue(Columns.State, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.State));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return State;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AreaCodeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StateColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AreaCodeID = @"AreaCodeID";
			public static readonly string State = @"State";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AreaCodeID; }
		}
		*/

		#region Foreign Collections

		private DC_CompanyPhoneNumberCollection _DC_CompanyPhoneNumbersCol;
		//Relationship: FK_DC_CompanyPhoneNumbers_DC_AreaCodes
		public DC_CompanyPhoneNumberCollection DC_CompanyPhoneNumbersCol
		{
			get
			{
				if(_DC_CompanyPhoneNumbersCol == null) {
					_DC_CompanyPhoneNumbersCol = new DC_CompanyPhoneNumberCollection();
					_DC_CompanyPhoneNumbersCol.LoadAndCloseReader(DC_CompanyPhoneNumber.Query()
						.WHERE(DC_CompanyPhoneNumber.Columns.AreaCodeId, AreaCodeID).ExecuteReader());
				}
				return _DC_CompanyPhoneNumbersCol;
			}
		}

		private DC_PhoneNumberCollection _DC_PhoneNumbersCol;
		//Relationship: FK_DC_PhoneNumbers_DC_AreaCodes
		public DC_PhoneNumberCollection DC_PhoneNumbersCol
		{
			get
			{
				if(_DC_PhoneNumbersCol == null) {
					_DC_PhoneNumbersCol = new DC_PhoneNumberCollection();
					_DC_PhoneNumbersCol.LoadAndCloseReader(DC_PhoneNumber.Query()
						.WHERE(DC_PhoneNumber.Columns.AreaCodeId, AreaCodeID).ExecuteReader());
				}
				return _DC_PhoneNumbersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the DC_CompanyPhoneNumber class.
	/// </summary>
	[DataContract]
	public partial class DC_CompanyPhoneNumberCollection : ActiveList<DC_CompanyPhoneNumber, DC_CompanyPhoneNumberCollection>
	{
		public static DC_CompanyPhoneNumberCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			DC_CompanyPhoneNumberCollection result = new DC_CompanyPhoneNumberCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (DC_CompanyPhoneNumber item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the DC_CompanyPhoneNumbers table.
	/// </summary>
	[DataContract]
	public partial class DC_CompanyPhoneNumber : ActiveRecord<DC_CompanyPhoneNumber>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public DC_CompanyPhoneNumber()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DC_CompanyPhoneNumbers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPhoneNumberID = new TableSchema.TableColumn(schema);
				colvarPhoneNumberID.ColumnName = "PhoneNumberID";
				colvarPhoneNumberID.DataType = DbType.AnsiStringFixedLength;
				colvarPhoneNumberID.MaxLength = 10;
				colvarPhoneNumberID.AutoIncrement = false;
				colvarPhoneNumberID.IsNullable = false;
				colvarPhoneNumberID.IsPrimaryKey = true;
				colvarPhoneNumberID.IsForeignKey = false;
				colvarPhoneNumberID.IsReadOnly = false;
				colvarPhoneNumberID.DefaultSetting = @"";
				colvarPhoneNumberID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneNumberID);

				TableSchema.TableColumn colvarAreaCodeId = new TableSchema.TableColumn(schema);
				colvarAreaCodeId.ColumnName = "AreaCodeId";
				colvarAreaCodeId.DataType = DbType.AnsiStringFixedLength;
				colvarAreaCodeId.MaxLength = 3;
				colvarAreaCodeId.AutoIncrement = false;
				colvarAreaCodeId.IsNullable = false;
				colvarAreaCodeId.IsPrimaryKey = false;
				colvarAreaCodeId.IsForeignKey = true;
				colvarAreaCodeId.IsReadOnly = false;
				colvarAreaCodeId.DefaultSetting = @"";
				colvarAreaCodeId.ForeignKeyTableName = "DC_AreaCodes";
				schema.Columns.Add(colvarAreaCodeId);

				TableSchema.TableColumn colvarPhoneNumber = new TableSchema.TableColumn(schema);
				colvarPhoneNumber.ColumnName = "PhoneNumber";
				colvarPhoneNumber.DataType = DbType.AnsiStringFixedLength;
				colvarPhoneNumber.MaxLength = 7;
				colvarPhoneNumber.AutoIncrement = false;
				colvarPhoneNumber.IsNullable = false;
				colvarPhoneNumber.IsPrimaryKey = false;
				colvarPhoneNumber.IsForeignKey = false;
				colvarPhoneNumber.IsReadOnly = false;
				colvarPhoneNumber.DefaultSetting = @"";
				colvarPhoneNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneNumber);

				TableSchema.TableColumn colvarCompanyId = new TableSchema.TableColumn(schema);
				colvarCompanyId.ColumnName = "CompanyId";
				colvarCompanyId.DataType = DbType.AnsiString;
				colvarCompanyId.MaxLength = 50;
				colvarCompanyId.AutoIncrement = false;
				colvarCompanyId.IsNullable = false;
				colvarCompanyId.IsPrimaryKey = false;
				colvarCompanyId.IsForeignKey = false;
				colvarCompanyId.IsReadOnly = false;
				colvarCompanyId.DefaultSetting = @"";
				colvarCompanyId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyId);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("DC_CompanyPhoneNumbers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static DC_CompanyPhoneNumber LoadFrom(DC_CompanyPhoneNumber item)
		{
			DC_CompanyPhoneNumber result = new DC_CompanyPhoneNumber();
			if (item.PhoneNumberID != default(string)) {
				result.LoadByKey(item.PhoneNumberID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string PhoneNumberID {
			get { return GetColumnValue<string>(Columns.PhoneNumberID); }
			set {
				SetColumnValue(Columns.PhoneNumberID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneNumberID));
			}
		}
		[DataMember]
		public string AreaCodeId {
			get { return GetColumnValue<string>(Columns.AreaCodeId); }
			set {
				SetColumnValue(Columns.AreaCodeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AreaCodeId));
			}
		}
		[DataMember]
		public string PhoneNumber {
			get { return GetColumnValue<string>(Columns.PhoneNumber); }
			set {
				SetColumnValue(Columns.PhoneNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneNumber));
			}
		}
		[DataMember]
		public string CompanyId {
			get { return GetColumnValue<string>(Columns.CompanyId); }
			set {
				SetColumnValue(Columns.CompanyId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CompanyId));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private DC_AreaCode _AreaCode;
		//Relationship: FK_DC_CompanyPhoneNumbers_DC_AreaCodes
		public DC_AreaCode AreaCode
		{
			get
			{
				if(_AreaCode == null) {
					_AreaCode = DC_AreaCode.FetchByID(this.AreaCodeId);
				}
				return _AreaCode;
			}
			set
			{
				SetColumnValue("AreaCodeId", value.AreaCodeID);
				_AreaCode = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AreaCodeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PhoneNumberIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AreaCodeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PhoneNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CompanyIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PhoneNumberID = @"PhoneNumberID";
			public static readonly string AreaCodeId = @"AreaCodeId";
			public static readonly string PhoneNumber = @"PhoneNumber";
			public static readonly string CompanyId = @"CompanyId";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PhoneNumberID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the DC_PhoneNumber class.
	/// </summary>
	[DataContract]
	public partial class DC_PhoneNumberCollection : ActiveList<DC_PhoneNumber, DC_PhoneNumberCollection>
	{
		public static DC_PhoneNumberCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			DC_PhoneNumberCollection result = new DC_PhoneNumberCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (DC_PhoneNumber item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the DC_PhoneNumbers table.
	/// </summary>
	[DataContract]
	public partial class DC_PhoneNumber : ActiveRecord<DC_PhoneNumber>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public DC_PhoneNumber()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DC_PhoneNumbers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPhoneNumberID = new TableSchema.TableColumn(schema);
				colvarPhoneNumberID.ColumnName = "PhoneNumberID";
				colvarPhoneNumberID.DataType = DbType.AnsiStringFixedLength;
				colvarPhoneNumberID.MaxLength = 10;
				colvarPhoneNumberID.AutoIncrement = false;
				colvarPhoneNumberID.IsNullable = false;
				colvarPhoneNumberID.IsPrimaryKey = true;
				colvarPhoneNumberID.IsForeignKey = false;
				colvarPhoneNumberID.IsReadOnly = false;
				colvarPhoneNumberID.DefaultSetting = @"";
				colvarPhoneNumberID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneNumberID);

				TableSchema.TableColumn colvarAreaCodeId = new TableSchema.TableColumn(schema);
				colvarAreaCodeId.ColumnName = "AreaCodeId";
				colvarAreaCodeId.DataType = DbType.AnsiStringFixedLength;
				colvarAreaCodeId.MaxLength = 3;
				colvarAreaCodeId.AutoIncrement = false;
				colvarAreaCodeId.IsNullable = false;
				colvarAreaCodeId.IsPrimaryKey = false;
				colvarAreaCodeId.IsForeignKey = true;
				colvarAreaCodeId.IsReadOnly = false;
				colvarAreaCodeId.DefaultSetting = @"";
				colvarAreaCodeId.ForeignKeyTableName = "DC_AreaCodes";
				schema.Columns.Add(colvarAreaCodeId);

				TableSchema.TableColumn colvarPhoneNumber = new TableSchema.TableColumn(schema);
				colvarPhoneNumber.ColumnName = "PhoneNumber";
				colvarPhoneNumber.DataType = DbType.AnsiStringFixedLength;
				colvarPhoneNumber.MaxLength = 7;
				colvarPhoneNumber.AutoIncrement = false;
				colvarPhoneNumber.IsNullable = false;
				colvarPhoneNumber.IsPrimaryKey = false;
				colvarPhoneNumber.IsForeignKey = false;
				colvarPhoneNumber.IsReadOnly = false;
				colvarPhoneNumber.DefaultSetting = @"";
				colvarPhoneNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneNumber);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("DC_PhoneNumbers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static DC_PhoneNumber LoadFrom(DC_PhoneNumber item)
		{
			DC_PhoneNumber result = new DC_PhoneNumber();
			if (item.PhoneNumberID != default(string)) {
				result.LoadByKey(item.PhoneNumberID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string PhoneNumberID {
			get { return GetColumnValue<string>(Columns.PhoneNumberID); }
			set {
				SetColumnValue(Columns.PhoneNumberID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneNumberID));
			}
		}
		[DataMember]
		public string AreaCodeId {
			get { return GetColumnValue<string>(Columns.AreaCodeId); }
			set {
				SetColumnValue(Columns.AreaCodeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AreaCodeId));
			}
		}
		[DataMember]
		public string PhoneNumber {
			get { return GetColumnValue<string>(Columns.PhoneNumber); }
			set {
				SetColumnValue(Columns.PhoneNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneNumber));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private DC_AreaCode _AreaCode;
		//Relationship: FK_DC_PhoneNumbers_DC_AreaCodes
		public DC_AreaCode AreaCode
		{
			get
			{
				if(_AreaCode == null) {
					_AreaCode = DC_AreaCode.FetchByID(this.AreaCodeId);
				}
				return _AreaCode;
			}
			set
			{
				SetColumnValue("AreaCodeId", value.AreaCodeID);
				_AreaCode = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AreaCodeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PhoneNumberIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AreaCodeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PhoneNumberColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PhoneNumberID = @"PhoneNumberID";
			public static readonly string AreaCodeId = @"AreaCodeId";
			public static readonly string PhoneNumber = @"PhoneNumber";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PhoneNumberID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the GS_Account class.
	/// </summary>
	[DataContract]
	public partial class GS_AccountCollection : ActiveList<GS_Account, GS_AccountCollection>
	{
		public static GS_AccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			GS_AccountCollection result = new GS_AccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (GS_Account item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the GS_Accounts table.
	/// </summary>
	[DataContract]
	public partial class GS_Account : ActiveRecord<GS_Account>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public GS_Account()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("GS_Accounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIndustryAccountId = new TableSchema.TableColumn(schema);
				colvarIndustryAccountId.ColumnName = "IndustryAccountId";
				colvarIndustryAccountId.DataType = DbType.Int64;
				colvarIndustryAccountId.MaxLength = 0;
				colvarIndustryAccountId.AutoIncrement = false;
				colvarIndustryAccountId.IsNullable = true;
				colvarIndustryAccountId.IsPrimaryKey = false;
				colvarIndustryAccountId.IsForeignKey = true;
				colvarIndustryAccountId.IsReadOnly = false;
				colvarIndustryAccountId.DefaultSetting = @"";
				colvarIndustryAccountId.ForeignKeyTableName = "MS_IndustryAccounts";
				schema.Columns.Add(colvarIndustryAccountId);

				TableSchema.TableColumn colvarInvItemId = new TableSchema.TableColumn(schema);
				colvarInvItemId.ColumnName = "InvItemId";
				colvarInvItemId.DataType = DbType.AnsiString;
				colvarInvItemId.MaxLength = 50;
				colvarInvItemId.AutoIncrement = false;
				colvarInvItemId.IsNullable = false;
				colvarInvItemId.IsPrimaryKey = false;
				colvarInvItemId.IsForeignKey = true;
				colvarInvItemId.IsReadOnly = false;
				colvarInvItemId.DefaultSetting = @"('S911BRC-CE')";
				colvarInvItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarInvItemId);

				TableSchema.TableColumn colvarSimProductBarcodeId = new TableSchema.TableColumn(schema);
				colvarSimProductBarcodeId.ColumnName = "SimProductBarcodeId";
				colvarSimProductBarcodeId.DataType = DbType.String;
				colvarSimProductBarcodeId.MaxLength = 50;
				colvarSimProductBarcodeId.AutoIncrement = false;
				colvarSimProductBarcodeId.IsNullable = true;
				colvarSimProductBarcodeId.IsPrimaryKey = false;
				colvarSimProductBarcodeId.IsForeignKey = false;
				colvarSimProductBarcodeId.IsReadOnly = false;
				colvarSimProductBarcodeId.DefaultSetting = @"";
				colvarSimProductBarcodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSimProductBarcodeId);

				TableSchema.TableColumn colvarGpsWatchProductBarcodeId = new TableSchema.TableColumn(schema);
				colvarGpsWatchProductBarcodeId.ColumnName = "GpsWatchProductBarcodeId";
				colvarGpsWatchProductBarcodeId.DataType = DbType.String;
				colvarGpsWatchProductBarcodeId.MaxLength = 50;
				colvarGpsWatchProductBarcodeId.AutoIncrement = false;
				colvarGpsWatchProductBarcodeId.IsNullable = true;
				colvarGpsWatchProductBarcodeId.IsPrimaryKey = false;
				colvarGpsWatchProductBarcodeId.IsForeignKey = false;
				colvarGpsWatchProductBarcodeId.IsReadOnly = false;
				colvarGpsWatchProductBarcodeId.DefaultSetting = @"";
				colvarGpsWatchProductBarcodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGpsWatchProductBarcodeId);

				TableSchema.TableColumn colvarGpsWatchPhoneNumber = new TableSchema.TableColumn(schema);
				colvarGpsWatchPhoneNumber.ColumnName = "GpsWatchPhoneNumber";
				colvarGpsWatchPhoneNumber.DataType = DbType.AnsiString;
				colvarGpsWatchPhoneNumber.MaxLength = 20;
				colvarGpsWatchPhoneNumber.AutoIncrement = false;
				colvarGpsWatchPhoneNumber.IsNullable = true;
				colvarGpsWatchPhoneNumber.IsPrimaryKey = false;
				colvarGpsWatchPhoneNumber.IsForeignKey = false;
				colvarGpsWatchPhoneNumber.IsReadOnly = false;
				colvarGpsWatchPhoneNumber.DefaultSetting = @"";
				colvarGpsWatchPhoneNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGpsWatchPhoneNumber);

				TableSchema.TableColumn colvarGpsWatchPassword = new TableSchema.TableColumn(schema);
				colvarGpsWatchPassword.ColumnName = "GpsWatchPassword";
				colvarGpsWatchPassword.DataType = DbType.AnsiString;
				colvarGpsWatchPassword.MaxLength = 50;
				colvarGpsWatchPassword.AutoIncrement = false;
				colvarGpsWatchPassword.IsNullable = true;
				colvarGpsWatchPassword.IsPrimaryKey = false;
				colvarGpsWatchPassword.IsForeignKey = false;
				colvarGpsWatchPassword.IsReadOnly = false;
				colvarGpsWatchPassword.DefaultSetting = @"('00000000')";
				colvarGpsWatchPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGpsWatchPassword);

				TableSchema.TableColumn colvarGpsWatchUnitID = new TableSchema.TableColumn(schema);
				colvarGpsWatchUnitID.ColumnName = "GpsWatchUnitID";
				colvarGpsWatchUnitID.DataType = DbType.AnsiString;
				colvarGpsWatchUnitID.MaxLength = 50;
				colvarGpsWatchUnitID.AutoIncrement = false;
				colvarGpsWatchUnitID.IsNullable = true;
				colvarGpsWatchUnitID.IsPrimaryKey = false;
				colvarGpsWatchUnitID.IsForeignKey = false;
				colvarGpsWatchUnitID.IsReadOnly = false;
				colvarGpsWatchUnitID.DefaultSetting = @"";
				colvarGpsWatchUnitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGpsWatchUnitID);

				TableSchema.TableColumn colvarDispatchMessage = new TableSchema.TableColumn(schema);
				colvarDispatchMessage.ColumnName = "DispatchMessage";
				colvarDispatchMessage.DataType = DbType.String;
				colvarDispatchMessage.MaxLength = 250;
				colvarDispatchMessage.AutoIncrement = false;
				colvarDispatchMessage.IsNullable = true;
				colvarDispatchMessage.IsPrimaryKey = false;
				colvarDispatchMessage.IsForeignKey = false;
				colvarDispatchMessage.IsReadOnly = false;
				colvarDispatchMessage.DefaultSetting = @"";
				colvarDispatchMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchMessage);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = false;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("GS_Accounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static GS_Account LoadFrom(GS_Account item)
		{
			GS_Account result = new GS_Account();
			if (item.AccountID != default(long)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public long? IndustryAccountId {
			get { return GetColumnValue<long?>(Columns.IndustryAccountId); }
			set {
				SetColumnValue(Columns.IndustryAccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryAccountId));
			}
		}
		[DataMember]
		public string InvItemId {
			get { return GetColumnValue<string>(Columns.InvItemId); }
			set {
				SetColumnValue(Columns.InvItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvItemId));
			}
		}
		[DataMember]
		public string SimProductBarcodeId {
			get { return GetColumnValue<string>(Columns.SimProductBarcodeId); }
			set {
				SetColumnValue(Columns.SimProductBarcodeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SimProductBarcodeId));
			}
		}
		[DataMember]
		public string GpsWatchProductBarcodeId {
			get { return GetColumnValue<string>(Columns.GpsWatchProductBarcodeId); }
			set {
				SetColumnValue(Columns.GpsWatchProductBarcodeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GpsWatchProductBarcodeId));
			}
		}
		[DataMember]
		public string GpsWatchPhoneNumber {
			get { return GetColumnValue<string>(Columns.GpsWatchPhoneNumber); }
			set {
				SetColumnValue(Columns.GpsWatchPhoneNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GpsWatchPhoneNumber));
			}
		}
		[DataMember]
		public string GpsWatchPassword {
			get { return GetColumnValue<string>(Columns.GpsWatchPassword); }
			set {
				SetColumnValue(Columns.GpsWatchPassword, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GpsWatchPassword));
			}
		}
		[DataMember]
		public string GpsWatchUnitID {
			get { return GetColumnValue<string>(Columns.GpsWatchUnitID); }
			set {
				SetColumnValue(Columns.GpsWatchUnitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GpsWatchUnitID));
			}
		}
		[DataMember]
		public string DispatchMessage {
			get { return GetColumnValue<string>(Columns.DispatchMessage); }
			set {
				SetColumnValue(Columns.DispatchMessage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchMessage));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Item _InvItem;
		//Relationship: FK_GS_Accounts_AE_Items
		public AE_Item InvItem
		{
			get
			{
				if(_InvItem == null) {
					_InvItem = AE_Item.FetchByID(this.InvItemId);
				}
				return _InvItem;
			}
			set
			{
				SetColumnValue("InvItemId", value.ItemID);
				_InvItem = value;
			}
		}

		private MC_Account _Account;
		//Relationship: FK_GS_Accounts_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountID);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountID", value.AccountID);
				_Account = value;
			}
		}

		private MS_IndustryAccount _IndustryAccount;
		//Relationship: FK_GS_Accounts_MS_IndustryAccounts
		public MS_IndustryAccount IndustryAccount
		{
			get
			{
				if(_IndustryAccount == null) {
					_IndustryAccount = MS_IndustryAccount.FetchByID(this.IndustryAccountId);
				}
				return _IndustryAccount;
			}
			set
			{
				SetColumnValue("IndustryAccountId", value.IndustryAccountID);
				_IndustryAccount = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IndustryAccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn InvItemIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SimProductBarcodeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GpsWatchProductBarcodeIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn GpsWatchPhoneNumberColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn GpsWatchPasswordColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn GpsWatchUnitIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DispatchMessageColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[16]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string IndustryAccountId = @"IndustryAccountId";
			public static readonly string InvItemId = @"InvItemId";
			public static readonly string SimProductBarcodeId = @"SimProductBarcodeId";
			public static readonly string GpsWatchProductBarcodeId = @"GpsWatchProductBarcodeId";
			public static readonly string GpsWatchPhoneNumber = @"GpsWatchPhoneNumber";
			public static readonly string GpsWatchPassword = @"GpsWatchPassword";
			public static readonly string GpsWatchUnitID = @"GpsWatchUnitID";
			public static readonly string DispatchMessage = @"DispatchMessage";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the IE_LocationType class.
	/// </summary>
	[DataContract]
	public partial class IE_LocationTypeCollection : ActiveList<IE_LocationType, IE_LocationTypeCollection>
	{
		public static IE_LocationTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_LocationTypeCollection result = new IE_LocationTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_LocationType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_LocationTypes table.
	/// </summary>
	[DataContract]
	public partial class IE_LocationType : ActiveRecord<IE_LocationType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_LocationType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_LocationTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLocationTypeID = new TableSchema.TableColumn(schema);
				colvarLocationTypeID.ColumnName = "LocationTypeID";
				colvarLocationTypeID.DataType = DbType.AnsiString;
				colvarLocationTypeID.MaxLength = 20;
				colvarLocationTypeID.AutoIncrement = false;
				colvarLocationTypeID.IsNullable = false;
				colvarLocationTypeID.IsPrimaryKey = true;
				colvarLocationTypeID.IsForeignKey = false;
				colvarLocationTypeID.IsReadOnly = false;
				colvarLocationTypeID.DefaultSetting = @"";
				colvarLocationTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationTypeID);

				TableSchema.TableColumn colvarLocationTypeName = new TableSchema.TableColumn(schema);
				colvarLocationTypeName.ColumnName = "LocationTypeName";
				colvarLocationTypeName.DataType = DbType.String;
				colvarLocationTypeName.MaxLength = 50;
				colvarLocationTypeName.AutoIncrement = false;
				colvarLocationTypeName.IsNullable = false;
				colvarLocationTypeName.IsPrimaryKey = false;
				colvarLocationTypeName.IsForeignKey = false;
				colvarLocationTypeName.IsReadOnly = false;
				colvarLocationTypeName.DefaultSetting = @"";
				colvarLocationTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationTypeName);

				TableSchema.TableColumn colvarTableName = new TableSchema.TableColumn(schema);
				colvarTableName.ColumnName = "TableName";
				colvarTableName.DataType = DbType.String;
				colvarTableName.MaxLength = 60;
				colvarTableName.AutoIncrement = false;
				colvarTableName.IsNullable = false;
				colvarTableName.IsPrimaryKey = false;
				colvarTableName.IsForeignKey = false;
				colvarTableName.IsReadOnly = false;
				colvarTableName.DefaultSetting = @"";
				colvarTableName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTableName);

				TableSchema.TableColumn colvarFieldID = new TableSchema.TableColumn(schema);
				colvarFieldID.ColumnName = "FieldID";
				colvarFieldID.DataType = DbType.String;
				colvarFieldID.MaxLength = 60;
				colvarFieldID.AutoIncrement = false;
				colvarFieldID.IsNullable = true;
				colvarFieldID.IsPrimaryKey = false;
				colvarFieldID.IsForeignKey = false;
				colvarFieldID.IsReadOnly = false;
				colvarFieldID.DefaultSetting = @"";
				colvarFieldID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFieldID);

				TableSchema.TableColumn colvarFieldName = new TableSchema.TableColumn(schema);
				colvarFieldName.ColumnName = "FieldName";
				colvarFieldName.DataType = DbType.String;
				colvarFieldName.MaxLength = 60;
				colvarFieldName.AutoIncrement = false;
				colvarFieldName.IsNullable = false;
				colvarFieldName.IsPrimaryKey = false;
				colvarFieldName.IsForeignKey = false;
				colvarFieldName.IsReadOnly = false;
				colvarFieldName.DefaultSetting = @"";
				colvarFieldName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFieldName);

				TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
				colvarComment.ColumnName = "Comment";
				colvarComment.DataType = DbType.String;
				colvarComment.MaxLength = -1;
				colvarComment.AutoIncrement = false;
				colvarComment.IsNullable = true;
				colvarComment.IsPrimaryKey = false;
				colvarComment.IsForeignKey = false;
				colvarComment.IsReadOnly = false;
				colvarComment.DefaultSetting = @"";
				colvarComment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_LocationTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_LocationType LoadFrom(IE_LocationType item)
		{
			IE_LocationType result = new IE_LocationType();
			if (item.LocationTypeID != default(string)) {
				result.LoadByKey(item.LocationTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string LocationTypeID {
			get { return GetColumnValue<string>(Columns.LocationTypeID); }
			set {
				SetColumnValue(Columns.LocationTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LocationTypeID));
			}
		}
		[DataMember]
		public string LocationTypeName {
			get { return GetColumnValue<string>(Columns.LocationTypeName); }
			set {
				SetColumnValue(Columns.LocationTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LocationTypeName));
			}
		}
		[DataMember]
		public string TableName {
			get { return GetColumnValue<string>(Columns.TableName); }
			set {
				SetColumnValue(Columns.TableName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TableName));
			}
		}
		[DataMember]
		public string FieldID {
			get { return GetColumnValue<string>(Columns.FieldID); }
			set {
				SetColumnValue(Columns.FieldID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FieldID));
			}
		}
		[DataMember]
		public string FieldName {
			get { return GetColumnValue<string>(Columns.FieldName); }
			set {
				SetColumnValue(Columns.FieldName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FieldName));
			}
		}
		[DataMember]
		public string Comment {
			get { return GetColumnValue<string>(Columns.Comment); }
			set {
				SetColumnValue(Columns.Comment, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comment));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return LocationTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn LocationTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LocationTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TableNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn FieldIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn FieldNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CommentColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LocationTypeID = @"LocationTypeID";
			public static readonly string LocationTypeName = @"LocationTypeName";
			public static readonly string TableName = @"TableName";
			public static readonly string FieldID = @"FieldID";
			public static readonly string FieldName = @"FieldName";
			public static readonly string Comment = @"Comment";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LocationTypeID; }
		}
		*/

		#region Foreign Collections

		private IE_StockingLevelCollection _IE_StockingLevelsCol;
		//Relationship: FK_IE_StockingLevels_IE_LocationTypes
		public IE_StockingLevelCollection IE_StockingLevelsCol
		{
			get
			{
				if(_IE_StockingLevelsCol == null) {
					_IE_StockingLevelsCol = new IE_StockingLevelCollection();
					_IE_StockingLevelsCol.LoadAndCloseReader(IE_StockingLevel.Query()
						.WHERE(IE_StockingLevel.Columns.LocationTypeId, LocationTypeID).ExecuteReader());
				}
				return _IE_StockingLevelsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the IE_PackingSlipItem class.
	/// </summary>
	[DataContract]
	public partial class IE_PackingSlipItemCollection : ActiveList<IE_PackingSlipItem, IE_PackingSlipItemCollection>
	{
		public static IE_PackingSlipItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_PackingSlipItemCollection result = new IE_PackingSlipItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_PackingSlipItem item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_PackingSlipItems table.
	/// </summary>
	[DataContract]
	public partial class IE_PackingSlipItem : ActiveRecord<IE_PackingSlipItem>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_PackingSlipItem()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_PackingSlipItems", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPackingSlipItemID = new TableSchema.TableColumn(schema);
				colvarPackingSlipItemID.ColumnName = "PackingSlipItemID";
				colvarPackingSlipItemID.DataType = DbType.Int64;
				colvarPackingSlipItemID.MaxLength = 0;
				colvarPackingSlipItemID.AutoIncrement = true;
				colvarPackingSlipItemID.IsNullable = false;
				colvarPackingSlipItemID.IsPrimaryKey = true;
				colvarPackingSlipItemID.IsForeignKey = false;
				colvarPackingSlipItemID.IsReadOnly = false;
				colvarPackingSlipItemID.DefaultSetting = @"";
				colvarPackingSlipItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackingSlipItemID);

				TableSchema.TableColumn colvarPackingSlipId = new TableSchema.TableColumn(schema);
				colvarPackingSlipId.ColumnName = "PackingSlipId";
				colvarPackingSlipId.DataType = DbType.Int32;
				colvarPackingSlipId.MaxLength = 0;
				colvarPackingSlipId.AutoIncrement = false;
				colvarPackingSlipId.IsNullable = false;
				colvarPackingSlipId.IsPrimaryKey = false;
				colvarPackingSlipId.IsForeignKey = true;
				colvarPackingSlipId.IsReadOnly = false;
				colvarPackingSlipId.DefaultSetting = @"";
				colvarPackingSlipId.ForeignKeyTableName = "IE_PackingSlips";
				schema.Columns.Add(colvarPackingSlipId);

				TableSchema.TableColumn colvarProductSkwId = new TableSchema.TableColumn(schema);
				colvarProductSkwId.ColumnName = "ProductSkwId";
				colvarProductSkwId.DataType = DbType.AnsiString;
				colvarProductSkwId.MaxLength = 50;
				colvarProductSkwId.AutoIncrement = false;
				colvarProductSkwId.IsNullable = true;
				colvarProductSkwId.IsPrimaryKey = false;
				colvarProductSkwId.IsForeignKey = true;
				colvarProductSkwId.IsReadOnly = false;
				colvarProductSkwId.DefaultSetting = @"";
				colvarProductSkwId.ForeignKeyTableName = "AE_Products";
				schema.Columns.Add(colvarProductSkwId);

				TableSchema.TableColumn colvarItemId = new TableSchema.TableColumn(schema);
				colvarItemId.ColumnName = "ItemId";
				colvarItemId.DataType = DbType.AnsiString;
				colvarItemId.MaxLength = 50;
				colvarItemId.AutoIncrement = false;
				colvarItemId.IsNullable = true;
				colvarItemId.IsPrimaryKey = false;
				colvarItemId.IsForeignKey = true;
				colvarItemId.IsReadOnly = false;
				colvarItemId.DefaultSetting = @"";
				colvarItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarItemId);

				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_PackingSlipItems",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_PackingSlipItem LoadFrom(IE_PackingSlipItem item)
		{
			IE_PackingSlipItem result = new IE_PackingSlipItem();
			if (item.PackingSlipItemID != default(long)) {
				result.LoadByKey(item.PackingSlipItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long PackingSlipItemID {
			get { return GetColumnValue<long>(Columns.PackingSlipItemID); }
			set {
				SetColumnValue(Columns.PackingSlipItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PackingSlipItemID));
			}
		}
		[DataMember]
		public int PackingSlipId {
			get { return GetColumnValue<int>(Columns.PackingSlipId); }
			set {
				SetColumnValue(Columns.PackingSlipId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PackingSlipId));
			}
		}
		[DataMember]
		public string ProductSkwId {
			get { return GetColumnValue<string>(Columns.ProductSkwId); }
			set {
				SetColumnValue(Columns.ProductSkwId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductSkwId));
			}
		}
		[DataMember]
		public string ItemId {
			get { return GetColumnValue<string>(Columns.ItemId); }
			set {
				SetColumnValue(Columns.ItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemId));
			}
		}
		[DataMember]
		public int Quantity {
			get { return GetColumnValue<int>(Columns.Quantity); }
			set {
				SetColumnValue(Columns.Quantity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Quantity));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Item _Item;
		//Relationship: FK_IE_PackingSlipItems_AE_Items
		public AE_Item Item
		{
			get
			{
				if(_Item == null) {
					_Item = AE_Item.FetchByID(this.ItemId);
				}
				return _Item;
			}
			set
			{
				SetColumnValue("ItemId", value.ItemID);
				_Item = value;
			}
		}

		private AE_Product _ProductSkw;
		//Relationship: FK_IE_PackingSlipItems_AE_Products
		public AE_Product ProductSkw
		{
			get
			{
				if(_ProductSkw == null) {
					_ProductSkw = AE_Product.FetchByID(this.ProductSkwId);
				}
				return _ProductSkw;
			}
			set
			{
				SetColumnValue("ProductSkwId", value.ProductSkwID);
				_ProductSkw = value;
			}
		}

		private IE_PackingSlip _PackingSlip;
		//Relationship: FK_IE_PackingSlipItems_IE_PackingSlips
		public IE_PackingSlip PackingSlip
		{
			get
			{
				if(_PackingSlip == null) {
					_PackingSlip = IE_PackingSlip.FetchByID(this.PackingSlipId);
				}
				return _PackingSlip;
			}
			set
			{
				SetColumnValue("PackingSlipId", value.PackingSlipID);
				_PackingSlip = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PackingSlipItemID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PackingSlipItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PackingSlipIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ProductSkwIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ItemIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn QuantityColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PackingSlipItemID = @"PackingSlipItemID";
			public static readonly string PackingSlipId = @"PackingSlipId";
			public static readonly string ProductSkwId = @"ProductSkwId";
			public static readonly string ItemId = @"ItemId";
			public static readonly string Quantity = @"Quantity";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PackingSlipItemID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the IE_PackingSlip class.
	/// </summary>
	[DataContract]
	public partial class IE_PackingSlipCollection : ActiveList<IE_PackingSlip, IE_PackingSlipCollection>
	{
		public static IE_PackingSlipCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_PackingSlipCollection result = new IE_PackingSlipCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_PackingSlip item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_PackingSlips table.
	/// </summary>
	[DataContract]
	public partial class IE_PackingSlip : ActiveRecord<IE_PackingSlip>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_PackingSlip()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_PackingSlips", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPackingSlipID = new TableSchema.TableColumn(schema);
				colvarPackingSlipID.ColumnName = "PackingSlipID";
				colvarPackingSlipID.DataType = DbType.Int32;
				colvarPackingSlipID.MaxLength = 0;
				colvarPackingSlipID.AutoIncrement = true;
				colvarPackingSlipID.IsNullable = false;
				colvarPackingSlipID.IsPrimaryKey = true;
				colvarPackingSlipID.IsForeignKey = false;
				colvarPackingSlipID.IsReadOnly = false;
				colvarPackingSlipID.DefaultSetting = @"";
				colvarPackingSlipID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackingSlipID);

				TableSchema.TableColumn colvarPurchaseOrderId = new TableSchema.TableColumn(schema);
				colvarPurchaseOrderId.ColumnName = "PurchaseOrderId";
				colvarPurchaseOrderId.DataType = DbType.Int32;
				colvarPurchaseOrderId.MaxLength = 0;
				colvarPurchaseOrderId.AutoIncrement = false;
				colvarPurchaseOrderId.IsNullable = false;
				colvarPurchaseOrderId.IsPrimaryKey = false;
				colvarPurchaseOrderId.IsForeignKey = true;
				colvarPurchaseOrderId.IsReadOnly = false;
				colvarPurchaseOrderId.DefaultSetting = @"";
				colvarPurchaseOrderId.ForeignKeyTableName = "IE_PurchaseOrders";
				schema.Columns.Add(colvarPurchaseOrderId);

				TableSchema.TableColumn colvarArrivalDate = new TableSchema.TableColumn(schema);
				colvarArrivalDate.ColumnName = "ArrivalDate";
				colvarArrivalDate.DataType = DbType.DateTime;
				colvarArrivalDate.MaxLength = 0;
				colvarArrivalDate.AutoIncrement = false;
				colvarArrivalDate.IsNullable = false;
				colvarArrivalDate.IsPrimaryKey = false;
				colvarArrivalDate.IsForeignKey = false;
				colvarArrivalDate.IsReadOnly = false;
				colvarArrivalDate.DefaultSetting = @"(getdate())";
				colvarArrivalDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArrivalDate);

				TableSchema.TableColumn colvarCloseDate = new TableSchema.TableColumn(schema);
				colvarCloseDate.ColumnName = "CloseDate";
				colvarCloseDate.DataType = DbType.DateTime;
				colvarCloseDate.MaxLength = 0;
				colvarCloseDate.AutoIncrement = false;
				colvarCloseDate.IsNullable = true;
				colvarCloseDate.IsPrimaryKey = false;
				colvarCloseDate.IsForeignKey = false;
				colvarCloseDate.IsReadOnly = false;
				colvarCloseDate.DefaultSetting = @"";
				colvarCloseDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCloseDate);

				TableSchema.TableColumn colvarPackingSlipNumber = new TableSchema.TableColumn(schema);
				colvarPackingSlipNumber.ColumnName = "PackingSlipNumber";
				colvarPackingSlipNumber.DataType = DbType.String;
				colvarPackingSlipNumber.MaxLength = 25;
				colvarPackingSlipNumber.AutoIncrement = false;
				colvarPackingSlipNumber.IsNullable = true;
				colvarPackingSlipNumber.IsPrimaryKey = false;
				colvarPackingSlipNumber.IsForeignKey = false;
				colvarPackingSlipNumber.IsReadOnly = false;
				colvarPackingSlipNumber.DefaultSetting = @"";
				colvarPackingSlipNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackingSlipNumber);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_PackingSlips",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_PackingSlip LoadFrom(IE_PackingSlip item)
		{
			IE_PackingSlip result = new IE_PackingSlip();
			if (item.PackingSlipID != default(int)) {
				result.LoadByKey(item.PackingSlipID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PackingSlipID {
			get { return GetColumnValue<int>(Columns.PackingSlipID); }
			set {
				SetColumnValue(Columns.PackingSlipID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PackingSlipID));
			}
		}
		[DataMember]
		public int PurchaseOrderId {
			get { return GetColumnValue<int>(Columns.PurchaseOrderId); }
			set {
				SetColumnValue(Columns.PurchaseOrderId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PurchaseOrderId));
			}
		}
		[DataMember]
		public DateTime ArrivalDate {
			get { return GetColumnValue<DateTime>(Columns.ArrivalDate); }
			set {
				SetColumnValue(Columns.ArrivalDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ArrivalDate));
			}
		}
		[DataMember]
		public DateTime? CloseDate {
			get { return GetColumnValue<DateTime?>(Columns.CloseDate); }
			set {
				SetColumnValue(Columns.CloseDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CloseDate));
			}
		}
		[DataMember]
		public string PackingSlipNumber {
			get { return GetColumnValue<string>(Columns.PackingSlipNumber); }
			set {
				SetColumnValue(Columns.PackingSlipNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PackingSlipNumber));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private IE_PurchaseOrder _PurchaseOrder;
		//Relationship: FK_IE_PackingSlips_IE_PurchaseOrders
		public IE_PurchaseOrder PurchaseOrder
		{
			get
			{
				if(_PurchaseOrder == null) {
					_PurchaseOrder = IE_PurchaseOrder.FetchByID(this.PurchaseOrderId);
				}
				return _PurchaseOrder;
			}
			set
			{
				SetColumnValue("PurchaseOrderId", value.PurchaseOrderID);
				_PurchaseOrder = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PackingSlipID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PackingSlipIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PurchaseOrderIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ArrivalDateColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CloseDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PackingSlipNumberColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PackingSlipID = @"PackingSlipID";
			public static readonly string PurchaseOrderId = @"PurchaseOrderId";
			public static readonly string ArrivalDate = @"ArrivalDate";
			public static readonly string CloseDate = @"CloseDate";
			public static readonly string PackingSlipNumber = @"PackingSlipNumber";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PackingSlipID; }
		}
		*/

		#region Foreign Collections

		private IE_PackingSlipItemCollection _IE_PackingSlipItemsCol;
		//Relationship: FK_IE_PackingSlipItems_IE_PackingSlips
		public IE_PackingSlipItemCollection IE_PackingSlipItemsCol
		{
			get
			{
				if(_IE_PackingSlipItemsCol == null) {
					_IE_PackingSlipItemsCol = new IE_PackingSlipItemCollection();
					_IE_PackingSlipItemsCol.LoadAndCloseReader(IE_PackingSlipItem.Query()
						.WHERE(IE_PackingSlipItem.Columns.PackingSlipId, PackingSlipID).ExecuteReader());
				}
				return _IE_PackingSlipItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the IE_ProductBarcodeBundle class.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcodeBundleCollection : ActiveList<IE_ProductBarcodeBundle, IE_ProductBarcodeBundleCollection>
	{
		public static IE_ProductBarcodeBundleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_ProductBarcodeBundleCollection result = new IE_ProductBarcodeBundleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_ProductBarcodeBundle item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_ProductBarcodeBundles table.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcodeBundle : ActiveRecord<IE_ProductBarcodeBundle>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_ProductBarcodeBundle()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_ProductBarcodeBundles", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarProductBarcodeBundleID = new TableSchema.TableColumn(schema);
				colvarProductBarcodeBundleID.ColumnName = "ProductBarcodeBundleID";
				colvarProductBarcodeBundleID.DataType = DbType.String;
				colvarProductBarcodeBundleID.MaxLength = 50;
				colvarProductBarcodeBundleID.AutoIncrement = false;
				colvarProductBarcodeBundleID.IsNullable = false;
				colvarProductBarcodeBundleID.IsPrimaryKey = true;
				colvarProductBarcodeBundleID.IsForeignKey = false;
				colvarProductBarcodeBundleID.IsReadOnly = false;
				colvarProductBarcodeBundleID.DefaultSetting = @"";
				colvarProductBarcodeBundleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductBarcodeBundleID);

				TableSchema.TableColumn colvarProductBarcodeId = new TableSchema.TableColumn(schema);
				colvarProductBarcodeId.ColumnName = "ProductBarcodeId";
				colvarProductBarcodeId.DataType = DbType.String;
				colvarProductBarcodeId.MaxLength = 50;
				colvarProductBarcodeId.AutoIncrement = false;
				colvarProductBarcodeId.IsNullable = false;
				colvarProductBarcodeId.IsPrimaryKey = false;
				colvarProductBarcodeId.IsForeignKey = true;
				colvarProductBarcodeId.IsReadOnly = false;
				colvarProductBarcodeId.DefaultSetting = @"";
				colvarProductBarcodeId.ForeignKeyTableName = "IE_ProductBarcodes";
				schema.Columns.Add(colvarProductBarcodeId);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_ProductBarcodeBundles",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_ProductBarcodeBundle LoadFrom(IE_ProductBarcodeBundle item)
		{
			IE_ProductBarcodeBundle result = new IE_ProductBarcodeBundle();
			if (item.ProductBarcodeBundleID != default(string)) {
				result.LoadByKey(item.ProductBarcodeBundleID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ProductBarcodeBundleID {
			get { return GetColumnValue<string>(Columns.ProductBarcodeBundleID); }
			set {
				SetColumnValue(Columns.ProductBarcodeBundleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductBarcodeBundleID));
			}
		}
		[DataMember]
		public string ProductBarcodeId {
			get { return GetColumnValue<string>(Columns.ProductBarcodeId); }
			set {
				SetColumnValue(Columns.ProductBarcodeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductBarcodeId));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private IE_ProductBarcode _ProductBarcode;
		//Relationship: FK_IE_ProductBarcodeBundles_IE_ProductBarcodes
		public IE_ProductBarcode ProductBarcode
		{
			get
			{
				if(_ProductBarcode == null) {
					_ProductBarcode = IE_ProductBarcode.FetchByID(this.ProductBarcodeId);
				}
				return _ProductBarcode;
			}
			set
			{
				SetColumnValue("ProductBarcodeId", value.ProductBarcodeID);
				_ProductBarcode = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ProductBarcodeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ProductBarcodeBundleIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ProductBarcodeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ProductBarcodeBundleID = @"ProductBarcodeBundleID";
			public static readonly string ProductBarcodeId = @"ProductBarcodeId";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ProductBarcodeBundleID; }
		}
		*/

		#region Foreign Collections

		private IE_ProductBarcodeCollection _IE_ProductBarcodesCol;
		//Relationship: FK_IE_ProductBarcodes_IE_ProductBarcodeBundles
		public IE_ProductBarcodeCollection IE_ProductBarcodesCol
		{
			get
			{
				if(_IE_ProductBarcodesCol == null) {
					_IE_ProductBarcodesCol = new IE_ProductBarcodeCollection();
					_IE_ProductBarcodesCol.LoadAndCloseReader(IE_ProductBarcode.Query()
						.WHERE(IE_ProductBarcode.Columns.ProductBarcodeBundleId, ProductBarcodeBundleID).ExecuteReader());
				}
				return _IE_ProductBarcodesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the IE_ProductBarcode class.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcodeCollection : ActiveList<IE_ProductBarcode, IE_ProductBarcodeCollection>
	{
		public static IE_ProductBarcodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_ProductBarcodeCollection result = new IE_ProductBarcodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_ProductBarcode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_ProductBarcodes table.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcode : ActiveRecord<IE_ProductBarcode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_ProductBarcode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_ProductBarcodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarProductBarcodeID = new TableSchema.TableColumn(schema);
				colvarProductBarcodeID.ColumnName = "ProductBarcodeID";
				colvarProductBarcodeID.DataType = DbType.String;
				colvarProductBarcodeID.MaxLength = 50;
				colvarProductBarcodeID.AutoIncrement = false;
				colvarProductBarcodeID.IsNullable = false;
				colvarProductBarcodeID.IsPrimaryKey = true;
				colvarProductBarcodeID.IsForeignKey = false;
				colvarProductBarcodeID.IsReadOnly = false;
				colvarProductBarcodeID.DefaultSetting = @"";
				colvarProductBarcodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductBarcodeID);

				TableSchema.TableColumn colvarPurchaseOrderItemId = new TableSchema.TableColumn(schema);
				colvarPurchaseOrderItemId.ColumnName = "PurchaseOrderItemId";
				colvarPurchaseOrderItemId.DataType = DbType.Int64;
				colvarPurchaseOrderItemId.MaxLength = 0;
				colvarPurchaseOrderItemId.AutoIncrement = false;
				colvarPurchaseOrderItemId.IsNullable = false;
				colvarPurchaseOrderItemId.IsPrimaryKey = false;
				colvarPurchaseOrderItemId.IsForeignKey = true;
				colvarPurchaseOrderItemId.IsReadOnly = false;
				colvarPurchaseOrderItemId.DefaultSetting = @"";
				colvarPurchaseOrderItemId.ForeignKeyTableName = "IE_PurchaseOrderItems";
				schema.Columns.Add(colvarPurchaseOrderItemId);

				TableSchema.TableColumn colvarPackingSlipItemId = new TableSchema.TableColumn(schema);
				colvarPackingSlipItemId.ColumnName = "PackingSlipItemId";
				colvarPackingSlipItemId.DataType = DbType.Int64;
				colvarPackingSlipItemId.MaxLength = 0;
				colvarPackingSlipItemId.AutoIncrement = false;
				colvarPackingSlipItemId.IsNullable = true;
				colvarPackingSlipItemId.IsPrimaryKey = false;
				colvarPackingSlipItemId.IsForeignKey = false;
				colvarPackingSlipItemId.IsReadOnly = false;
				colvarPackingSlipItemId.DefaultSetting = @"";
				colvarPackingSlipItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackingSlipItemId);

				TableSchema.TableColumn colvarLastProductBarcodeTrackingId = new TableSchema.TableColumn(schema);
				colvarLastProductBarcodeTrackingId.ColumnName = "LastProductBarcodeTrackingId";
				colvarLastProductBarcodeTrackingId.DataType = DbType.Int64;
				colvarLastProductBarcodeTrackingId.MaxLength = 0;
				colvarLastProductBarcodeTrackingId.AutoIncrement = false;
				colvarLastProductBarcodeTrackingId.IsNullable = true;
				colvarLastProductBarcodeTrackingId.IsPrimaryKey = false;
				colvarLastProductBarcodeTrackingId.IsForeignKey = true;
				colvarLastProductBarcodeTrackingId.IsReadOnly = false;
				colvarLastProductBarcodeTrackingId.DefaultSetting = @"";
				colvarLastProductBarcodeTrackingId.ForeignKeyTableName = "IE_ProductBarcodeTracking";
				schema.Columns.Add(colvarLastProductBarcodeTrackingId);

				TableSchema.TableColumn colvarProductBarcodeBundleId = new TableSchema.TableColumn(schema);
				colvarProductBarcodeBundleId.ColumnName = "ProductBarcodeBundleId";
				colvarProductBarcodeBundleId.DataType = DbType.String;
				colvarProductBarcodeBundleId.MaxLength = 50;
				colvarProductBarcodeBundleId.AutoIncrement = false;
				colvarProductBarcodeBundleId.IsNullable = true;
				colvarProductBarcodeBundleId.IsPrimaryKey = false;
				colvarProductBarcodeBundleId.IsForeignKey = true;
				colvarProductBarcodeBundleId.IsReadOnly = false;
				colvarProductBarcodeBundleId.DefaultSetting = @"";
				colvarProductBarcodeBundleId.ForeignKeyTableName = "IE_ProductBarcodeBundles";
				schema.Columns.Add(colvarProductBarcodeBundleId);

				TableSchema.TableColumn colvarSimGUID = new TableSchema.TableColumn(schema);
				colvarSimGUID.ColumnName = "SimGUID";
				colvarSimGUID.DataType = DbType.AnsiString;
				colvarSimGUID.MaxLength = 50;
				colvarSimGUID.AutoIncrement = false;
				colvarSimGUID.IsNullable = true;
				colvarSimGUID.IsPrimaryKey = false;
				colvarSimGUID.IsForeignKey = false;
				colvarSimGUID.IsReadOnly = false;
				colvarSimGUID.DefaultSetting = @"";
				colvarSimGUID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSimGUID);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_ProductBarcodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_ProductBarcode LoadFrom(IE_ProductBarcode item)
		{
			IE_ProductBarcode result = new IE_ProductBarcode();
			if (item.ProductBarcodeID != default(string)) {
				result.LoadByKey(item.ProductBarcodeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ProductBarcodeID {
			get { return GetColumnValue<string>(Columns.ProductBarcodeID); }
			set {
				SetColumnValue(Columns.ProductBarcodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductBarcodeID));
			}
		}
		[DataMember]
		public long PurchaseOrderItemId {
			get { return GetColumnValue<long>(Columns.PurchaseOrderItemId); }
			set {
				SetColumnValue(Columns.PurchaseOrderItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PurchaseOrderItemId));
			}
		}
		[DataMember]
		public long? PackingSlipItemId {
			get { return GetColumnValue<long?>(Columns.PackingSlipItemId); }
			set {
				SetColumnValue(Columns.PackingSlipItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PackingSlipItemId));
			}
		}
		[DataMember]
		public long? LastProductBarcodeTrackingId {
			get { return GetColumnValue<long?>(Columns.LastProductBarcodeTrackingId); }
			set {
				SetColumnValue(Columns.LastProductBarcodeTrackingId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastProductBarcodeTrackingId));
			}
		}
		[DataMember]
		public string ProductBarcodeBundleId {
			get { return GetColumnValue<string>(Columns.ProductBarcodeBundleId); }
			set {
				SetColumnValue(Columns.ProductBarcodeBundleId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductBarcodeBundleId));
			}
		}
		[DataMember]
		public string SimGUID {
			get { return GetColumnValue<string>(Columns.SimGUID); }
			set {
				SetColumnValue(Columns.SimGUID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SimGUID));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private IE_ProductBarcodeBundle _ProductBarcodeBundle;
		//Relationship: FK_IE_ProductBarcodes_IE_ProductBarcodeBundles
		public IE_ProductBarcodeBundle ProductBarcodeBundle
		{
			get
			{
				if(_ProductBarcodeBundle == null) {
					_ProductBarcodeBundle = IE_ProductBarcodeBundle.FetchByID(this.ProductBarcodeBundleId);
				}
				return _ProductBarcodeBundle;
			}
			set
			{
				SetColumnValue("ProductBarcodeBundleId", value.ProductBarcodeBundleID);
				_ProductBarcodeBundle = value;
			}
		}

		private IE_ProductBarcodeTracking _LastProductBarcodeTracking;
		//Relationship: FK_IE_ProductBarcodes_IE_ProductBarcodeTracking
		public IE_ProductBarcodeTracking LastProductBarcodeTracking
		{
			get
			{
				if(_LastProductBarcodeTracking == null) {
					_LastProductBarcodeTracking = IE_ProductBarcodeTracking.FetchByID(this.LastProductBarcodeTrackingId);
				}
				return _LastProductBarcodeTracking;
			}
			set
			{
				SetColumnValue("LastProductBarcodeTrackingId", value.ProductBarcodeTrackingID);
				_LastProductBarcodeTracking = value;
			}
		}

		private IE_PurchaseOrderItem _PurchaseOrderItem;
		//Relationship: FK_IE_ProductBarcodes_IE_PurchaseOrderItems
		public IE_PurchaseOrderItem PurchaseOrderItem
		{
			get
			{
				if(_PurchaseOrderItem == null) {
					_PurchaseOrderItem = IE_PurchaseOrderItem.FetchByID(this.PurchaseOrderItemId);
				}
				return _PurchaseOrderItem;
			}
			set
			{
				SetColumnValue("PurchaseOrderItemId", value.PurchaseOrderItemID);
				_PurchaseOrderItem = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ProductBarcodeID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ProductBarcodeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PurchaseOrderItemIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PackingSlipItemIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn LastProductBarcodeTrackingIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ProductBarcodeBundleIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SimGUIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ProductBarcodeID = @"ProductBarcodeID";
			public static readonly string PurchaseOrderItemId = @"PurchaseOrderItemId";
			public static readonly string PackingSlipItemId = @"PackingSlipItemId";
			public static readonly string LastProductBarcodeTrackingId = @"LastProductBarcodeTrackingId";
			public static readonly string ProductBarcodeBundleId = @"ProductBarcodeBundleId";
			public static readonly string SimGUID = @"SimGUID";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ProductBarcodeID; }
		}
		*/

		#region Foreign Collections

		private AE_InvoiceItemCollection _AE_InvoiceItemsCol;
		//Relationship: FK_AE_InvoiceItems_IE_ProductBarcodes
		public AE_InvoiceItemCollection AE_InvoiceItemsCol
		{
			get
			{
				if(_AE_InvoiceItemsCol == null) {
					_AE_InvoiceItemsCol = new AE_InvoiceItemCollection();
					_AE_InvoiceItemsCol.LoadAndCloseReader(AE_InvoiceItem.Query()
						.WHERE(AE_InvoiceItem.Columns.ProductBarcodeId, ProductBarcodeID).ExecuteReader());
				}
				return _AE_InvoiceItemsCol;
			}
		}

		private IE_ProductBarcodeBundleCollection _IE_ProductBarcodeBundlesCol;
		//Relationship: FK_IE_ProductBarcodeBundles_IE_ProductBarcodes
		public IE_ProductBarcodeBundleCollection IE_ProductBarcodeBundlesCol
		{
			get
			{
				if(_IE_ProductBarcodeBundlesCol == null) {
					_IE_ProductBarcodeBundlesCol = new IE_ProductBarcodeBundleCollection();
					_IE_ProductBarcodeBundlesCol.LoadAndCloseReader(IE_ProductBarcodeBundle.Query()
						.WHERE(IE_ProductBarcodeBundle.Columns.ProductBarcodeId, ProductBarcodeID).ExecuteReader());
				}
				return _IE_ProductBarcodeBundlesCol;
			}
		}

		private IE_ProductBarcodeTrackingCollection _IE_ProductBarcodeTrackingsCol;
		//Relationship: FK_IE_ProductBarcodeTracking_IE_ProductBarcodes
		public IE_ProductBarcodeTrackingCollection IE_ProductBarcodeTrackingsCol
		{
			get
			{
				if(_IE_ProductBarcodeTrackingsCol == null) {
					_IE_ProductBarcodeTrackingsCol = new IE_ProductBarcodeTrackingCollection();
					_IE_ProductBarcodeTrackingsCol.LoadAndCloseReader(IE_ProductBarcodeTracking.Query()
						.WHERE(IE_ProductBarcodeTracking.Columns.ProductBarcodeId, ProductBarcodeID).ExecuteReader());
				}
				return _IE_ProductBarcodeTrackingsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the IE_ProductBarcodeTracking class.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcodeTrackingCollection : ActiveList<IE_ProductBarcodeTracking, IE_ProductBarcodeTrackingCollection>
	{
		public static IE_ProductBarcodeTrackingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_ProductBarcodeTrackingCollection result = new IE_ProductBarcodeTrackingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_ProductBarcodeTracking item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_ProductBarcodeTracking table.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcodeTracking : ActiveRecord<IE_ProductBarcodeTracking>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_ProductBarcodeTracking()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_ProductBarcodeTracking", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarProductBarcodeTrackingID = new TableSchema.TableColumn(schema);
				colvarProductBarcodeTrackingID.ColumnName = "ProductBarcodeTrackingID";
				colvarProductBarcodeTrackingID.DataType = DbType.Int64;
				colvarProductBarcodeTrackingID.MaxLength = 0;
				colvarProductBarcodeTrackingID.AutoIncrement = true;
				colvarProductBarcodeTrackingID.IsNullable = false;
				colvarProductBarcodeTrackingID.IsPrimaryKey = true;
				colvarProductBarcodeTrackingID.IsForeignKey = false;
				colvarProductBarcodeTrackingID.IsReadOnly = false;
				colvarProductBarcodeTrackingID.DefaultSetting = @"";
				colvarProductBarcodeTrackingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductBarcodeTrackingID);

				TableSchema.TableColumn colvarProductBarcodeTrackingTypeId = new TableSchema.TableColumn(schema);
				colvarProductBarcodeTrackingTypeId.ColumnName = "ProductBarcodeTrackingTypeId";
				colvarProductBarcodeTrackingTypeId.DataType = DbType.AnsiString;
				colvarProductBarcodeTrackingTypeId.MaxLength = 20;
				colvarProductBarcodeTrackingTypeId.AutoIncrement = false;
				colvarProductBarcodeTrackingTypeId.IsNullable = false;
				colvarProductBarcodeTrackingTypeId.IsPrimaryKey = false;
				colvarProductBarcodeTrackingTypeId.IsForeignKey = true;
				colvarProductBarcodeTrackingTypeId.IsReadOnly = false;
				colvarProductBarcodeTrackingTypeId.DefaultSetting = @"";
				colvarProductBarcodeTrackingTypeId.ForeignKeyTableName = "IE_ProductBarcodeTrackingTypes";
				schema.Columns.Add(colvarProductBarcodeTrackingTypeId);

				TableSchema.TableColumn colvarProductBarcodeId = new TableSchema.TableColumn(schema);
				colvarProductBarcodeId.ColumnName = "ProductBarcodeId";
				colvarProductBarcodeId.DataType = DbType.String;
				colvarProductBarcodeId.MaxLength = 50;
				colvarProductBarcodeId.AutoIncrement = false;
				colvarProductBarcodeId.IsNullable = false;
				colvarProductBarcodeId.IsPrimaryKey = false;
				colvarProductBarcodeId.IsForeignKey = true;
				colvarProductBarcodeId.IsReadOnly = false;
				colvarProductBarcodeId.DefaultSetting = @"";
				colvarProductBarcodeId.ForeignKeyTableName = "IE_ProductBarcodes";
				schema.Columns.Add(colvarProductBarcodeId);

				TableSchema.TableColumn colvarLocationTypeID = new TableSchema.TableColumn(schema);
				colvarLocationTypeID.ColumnName = "LocationTypeID";
				colvarLocationTypeID.DataType = DbType.AnsiString;
				colvarLocationTypeID.MaxLength = 20;
				colvarLocationTypeID.AutoIncrement = false;
				colvarLocationTypeID.IsNullable = true;
				colvarLocationTypeID.IsPrimaryKey = false;
				colvarLocationTypeID.IsForeignKey = false;
				colvarLocationTypeID.IsReadOnly = false;
				colvarLocationTypeID.DefaultSetting = @"";
				colvarLocationTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationTypeID);

				TableSchema.TableColumn colvarLocationID = new TableSchema.TableColumn(schema);
				colvarLocationID.ColumnName = "LocationID";
				colvarLocationID.DataType = DbType.AnsiString;
				colvarLocationID.MaxLength = 50;
				colvarLocationID.AutoIncrement = false;
				colvarLocationID.IsNullable = true;
				colvarLocationID.IsPrimaryKey = false;
				colvarLocationID.IsForeignKey = false;
				colvarLocationID.IsReadOnly = false;
				colvarLocationID.DefaultSetting = @"";
				colvarLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationID);

				TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
				colvarComment.ColumnName = "Comment";
				colvarComment.DataType = DbType.String;
				colvarComment.MaxLength = 2000;
				colvarComment.AutoIncrement = false;
				colvarComment.IsNullable = true;
				colvarComment.IsPrimaryKey = false;
				colvarComment.IsForeignKey = false;
				colvarComment.IsReadOnly = false;
				colvarComment.DefaultSetting = @"";
				colvarComment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_ProductBarcodeTracking",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_ProductBarcodeTracking LoadFrom(IE_ProductBarcodeTracking item)
		{
			IE_ProductBarcodeTracking result = new IE_ProductBarcodeTracking();
			if (item.ProductBarcodeTrackingID != default(long)) {
				result.LoadByKey(item.ProductBarcodeTrackingID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long ProductBarcodeTrackingID {
			get { return GetColumnValue<long>(Columns.ProductBarcodeTrackingID); }
			set {
				SetColumnValue(Columns.ProductBarcodeTrackingID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductBarcodeTrackingID));
			}
		}
		[DataMember]
		public string ProductBarcodeTrackingTypeId {
			get { return GetColumnValue<string>(Columns.ProductBarcodeTrackingTypeId); }
			set {
				SetColumnValue(Columns.ProductBarcodeTrackingTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductBarcodeTrackingTypeId));
			}
		}
		[DataMember]
		public string ProductBarcodeId {
			get { return GetColumnValue<string>(Columns.ProductBarcodeId); }
			set {
				SetColumnValue(Columns.ProductBarcodeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductBarcodeId));
			}
		}
		[DataMember]
		public string LocationTypeID {
			get { return GetColumnValue<string>(Columns.LocationTypeID); }
			set {
				SetColumnValue(Columns.LocationTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LocationTypeID));
			}
		}
		[DataMember]
		public string LocationID {
			get { return GetColumnValue<string>(Columns.LocationID); }
			set {
				SetColumnValue(Columns.LocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LocationID));
			}
		}
		[DataMember]
		public string Comment {
			get { return GetColumnValue<string>(Columns.Comment); }
			set {
				SetColumnValue(Columns.Comment, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comment));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private IE_ProductBarcode _ProductBarcode;
		//Relationship: FK_IE_ProductBarcodeTracking_IE_ProductBarcodes
		public IE_ProductBarcode ProductBarcode
		{
			get
			{
				if(_ProductBarcode == null) {
					_ProductBarcode = IE_ProductBarcode.FetchByID(this.ProductBarcodeId);
				}
				return _ProductBarcode;
			}
			set
			{
				SetColumnValue("ProductBarcodeId", value.ProductBarcodeID);
				_ProductBarcode = value;
			}
		}

		private IE_ProductBarcodeTrackingType _ProductBarcodeTrackingType;
		//Relationship: FK_IE_ProductBarcodeTracking_IE_ProductBarcodeTrackingTypes
		public IE_ProductBarcodeTrackingType ProductBarcodeTrackingType
		{
			get
			{
				if(_ProductBarcodeTrackingType == null) {
					_ProductBarcodeTrackingType = IE_ProductBarcodeTrackingType.FetchByID(this.ProductBarcodeTrackingTypeId);
				}
				return _ProductBarcodeTrackingType;
			}
			set
			{
				SetColumnValue("ProductBarcodeTrackingTypeId", value.ProductBarcodeTrackingTypeID);
				_ProductBarcodeTrackingType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ProductBarcodeTrackingTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ProductBarcodeTrackingIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ProductBarcodeTrackingTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ProductBarcodeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn LocationTypeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LocationIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CommentColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ProductBarcodeTrackingID = @"ProductBarcodeTrackingID";
			public static readonly string ProductBarcodeTrackingTypeId = @"ProductBarcodeTrackingTypeId";
			public static readonly string ProductBarcodeId = @"ProductBarcodeId";
			public static readonly string LocationTypeID = @"LocationTypeID";
			public static readonly string LocationID = @"LocationID";
			public static readonly string Comment = @"Comment";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ProductBarcodeTrackingID; }
		}
		*/

		#region Foreign Collections

		private IE_ProductBarcodeCollection _IE_ProductBarcodesCol;
		//Relationship: FK_IE_ProductBarcodes_IE_ProductBarcodeTracking
		public IE_ProductBarcodeCollection IE_ProductBarcodesCol
		{
			get
			{
				if(_IE_ProductBarcodesCol == null) {
					_IE_ProductBarcodesCol = new IE_ProductBarcodeCollection();
					_IE_ProductBarcodesCol.LoadAndCloseReader(IE_ProductBarcode.Query()
						.WHERE(IE_ProductBarcode.Columns.LastProductBarcodeTrackingId, ProductBarcodeTrackingID).ExecuteReader());
				}
				return _IE_ProductBarcodesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the IE_ProductBarcodeTrackingType class.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcodeTrackingTypeCollection : ActiveList<IE_ProductBarcodeTrackingType, IE_ProductBarcodeTrackingTypeCollection>
	{
		public static IE_ProductBarcodeTrackingTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_ProductBarcodeTrackingTypeCollection result = new IE_ProductBarcodeTrackingTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_ProductBarcodeTrackingType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_ProductBarcodeTrackingTypes table.
	/// </summary>
	[DataContract]
	public partial class IE_ProductBarcodeTrackingType : ActiveRecord<IE_ProductBarcodeTrackingType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_ProductBarcodeTrackingType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_ProductBarcodeTrackingTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarProductBarcodeTrackingTypeID = new TableSchema.TableColumn(schema);
				colvarProductBarcodeTrackingTypeID.ColumnName = "ProductBarcodeTrackingTypeID";
				colvarProductBarcodeTrackingTypeID.DataType = DbType.AnsiString;
				colvarProductBarcodeTrackingTypeID.MaxLength = 20;
				colvarProductBarcodeTrackingTypeID.AutoIncrement = false;
				colvarProductBarcodeTrackingTypeID.IsNullable = false;
				colvarProductBarcodeTrackingTypeID.IsPrimaryKey = true;
				colvarProductBarcodeTrackingTypeID.IsForeignKey = false;
				colvarProductBarcodeTrackingTypeID.IsReadOnly = false;
				colvarProductBarcodeTrackingTypeID.DefaultSetting = @"";
				colvarProductBarcodeTrackingTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductBarcodeTrackingTypeID);

				TableSchema.TableColumn colvarProductBarcodeTrackingTypeName = new TableSchema.TableColumn(schema);
				colvarProductBarcodeTrackingTypeName.ColumnName = "ProductBarcodeTrackingTypeName";
				colvarProductBarcodeTrackingTypeName.DataType = DbType.String;
				colvarProductBarcodeTrackingTypeName.MaxLength = 100;
				colvarProductBarcodeTrackingTypeName.AutoIncrement = false;
				colvarProductBarcodeTrackingTypeName.IsNullable = false;
				colvarProductBarcodeTrackingTypeName.IsPrimaryKey = false;
				colvarProductBarcodeTrackingTypeName.IsForeignKey = false;
				colvarProductBarcodeTrackingTypeName.IsReadOnly = false;
				colvarProductBarcodeTrackingTypeName.DefaultSetting = @"";
				colvarProductBarcodeTrackingTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductBarcodeTrackingTypeName);

				TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
				colvarComment.ColumnName = "Comment";
				colvarComment.DataType = DbType.String;
				colvarComment.MaxLength = 1000;
				colvarComment.AutoIncrement = false;
				colvarComment.IsNullable = true;
				colvarComment.IsPrimaryKey = false;
				colvarComment.IsForeignKey = false;
				colvarComment.IsReadOnly = false;
				colvarComment.DefaultSetting = @"";
				colvarComment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment);

				TableSchema.TableColumn colvarIsInventoryMove = new TableSchema.TableColumn(schema);
				colvarIsInventoryMove.ColumnName = "IsInventoryMove";
				colvarIsInventoryMove.DataType = DbType.Boolean;
				colvarIsInventoryMove.MaxLength = 0;
				colvarIsInventoryMove.AutoIncrement = false;
				colvarIsInventoryMove.IsNullable = false;
				colvarIsInventoryMove.IsPrimaryKey = false;
				colvarIsInventoryMove.IsForeignKey = false;
				colvarIsInventoryMove.IsReadOnly = false;
				colvarIsInventoryMove.DefaultSetting = @"((0))";
				colvarIsInventoryMove.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsInventoryMove);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_ProductBarcodeTrackingTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_ProductBarcodeTrackingType LoadFrom(IE_ProductBarcodeTrackingType item)
		{
			IE_ProductBarcodeTrackingType result = new IE_ProductBarcodeTrackingType();
			if (item.ProductBarcodeTrackingTypeID != default(string)) {
				result.LoadByKey(item.ProductBarcodeTrackingTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ProductBarcodeTrackingTypeID {
			get { return GetColumnValue<string>(Columns.ProductBarcodeTrackingTypeID); }
			set {
				SetColumnValue(Columns.ProductBarcodeTrackingTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductBarcodeTrackingTypeID));
			}
		}
		[DataMember]
		public string ProductBarcodeTrackingTypeName {
			get { return GetColumnValue<string>(Columns.ProductBarcodeTrackingTypeName); }
			set {
				SetColumnValue(Columns.ProductBarcodeTrackingTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductBarcodeTrackingTypeName));
			}
		}
		[DataMember]
		public string Comment {
			get { return GetColumnValue<string>(Columns.Comment); }
			set {
				SetColumnValue(Columns.Comment, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comment));
			}
		}
		[DataMember]
		public bool IsInventoryMove {
			get { return GetColumnValue<bool>(Columns.IsInventoryMove); }
			set {
				SetColumnValue(Columns.IsInventoryMove, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsInventoryMove));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ProductBarcodeTrackingTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ProductBarcodeTrackingTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ProductBarcodeTrackingTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CommentColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsInventoryMoveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ProductBarcodeTrackingTypeID = @"ProductBarcodeTrackingTypeID";
			public static readonly string ProductBarcodeTrackingTypeName = @"ProductBarcodeTrackingTypeName";
			public static readonly string Comment = @"Comment";
			public static readonly string IsInventoryMove = @"IsInventoryMove";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ProductBarcodeTrackingTypeID; }
		}
		*/

		#region Foreign Collections

		private IE_ProductBarcodeTrackingCollection _IE_ProductBarcodeTrackingsCol;
		//Relationship: FK_IE_ProductBarcodeTracking_IE_ProductBarcodeTrackingTypes
		public IE_ProductBarcodeTrackingCollection IE_ProductBarcodeTrackingsCol
		{
			get
			{
				if(_IE_ProductBarcodeTrackingsCol == null) {
					_IE_ProductBarcodeTrackingsCol = new IE_ProductBarcodeTrackingCollection();
					_IE_ProductBarcodeTrackingsCol.LoadAndCloseReader(IE_ProductBarcodeTracking.Query()
						.WHERE(IE_ProductBarcodeTracking.Columns.ProductBarcodeTrackingTypeId, ProductBarcodeTrackingTypeID).ExecuteReader());
				}
				return _IE_ProductBarcodeTrackingsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the IE_PurchaseOrderItem class.
	/// </summary>
	[DataContract]
	public partial class IE_PurchaseOrderItemCollection : ActiveList<IE_PurchaseOrderItem, IE_PurchaseOrderItemCollection>
	{
		public static IE_PurchaseOrderItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_PurchaseOrderItemCollection result = new IE_PurchaseOrderItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_PurchaseOrderItem item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_PurchaseOrderItems table.
	/// </summary>
	[DataContract]
	public partial class IE_PurchaseOrderItem : ActiveRecord<IE_PurchaseOrderItem>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_PurchaseOrderItem()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_PurchaseOrderItems", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPurchaseOrderItemID = new TableSchema.TableColumn(schema);
				colvarPurchaseOrderItemID.ColumnName = "PurchaseOrderItemID";
				colvarPurchaseOrderItemID.DataType = DbType.Int64;
				colvarPurchaseOrderItemID.MaxLength = 0;
				colvarPurchaseOrderItemID.AutoIncrement = true;
				colvarPurchaseOrderItemID.IsNullable = false;
				colvarPurchaseOrderItemID.IsPrimaryKey = true;
				colvarPurchaseOrderItemID.IsForeignKey = false;
				colvarPurchaseOrderItemID.IsReadOnly = false;
				colvarPurchaseOrderItemID.DefaultSetting = @"";
				colvarPurchaseOrderItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPurchaseOrderItemID);

				TableSchema.TableColumn colvarPurchaseOrderId = new TableSchema.TableColumn(schema);
				colvarPurchaseOrderId.ColumnName = "PurchaseOrderId";
				colvarPurchaseOrderId.DataType = DbType.Int32;
				colvarPurchaseOrderId.MaxLength = 0;
				colvarPurchaseOrderId.AutoIncrement = false;
				colvarPurchaseOrderId.IsNullable = false;
				colvarPurchaseOrderId.IsPrimaryKey = false;
				colvarPurchaseOrderId.IsForeignKey = true;
				colvarPurchaseOrderId.IsReadOnly = false;
				colvarPurchaseOrderId.DefaultSetting = @"";
				colvarPurchaseOrderId.ForeignKeyTableName = "IE_PurchaseOrders";
				schema.Columns.Add(colvarPurchaseOrderId);

				TableSchema.TableColumn colvarItemId = new TableSchema.TableColumn(schema);
				colvarItemId.ColumnName = "ItemId";
				colvarItemId.DataType = DbType.AnsiString;
				colvarItemId.MaxLength = 50;
				colvarItemId.AutoIncrement = false;
				colvarItemId.IsNullable = false;
				colvarItemId.IsPrimaryKey = false;
				colvarItemId.IsForeignKey = true;
				colvarItemId.IsReadOnly = false;
				colvarItemId.DefaultSetting = @"";
				colvarItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarItemId);

				TableSchema.TableColumn colvarWarehouseSiteId = new TableSchema.TableColumn(schema);
				colvarWarehouseSiteId.ColumnName = "WarehouseSiteId";
				colvarWarehouseSiteId.DataType = DbType.AnsiString;
				colvarWarehouseSiteId.MaxLength = 20;
				colvarWarehouseSiteId.AutoIncrement = false;
				colvarWarehouseSiteId.IsNullable = true;
				colvarWarehouseSiteId.IsPrimaryKey = false;
				colvarWarehouseSiteId.IsForeignKey = true;
				colvarWarehouseSiteId.IsReadOnly = false;
				colvarWarehouseSiteId.DefaultSetting = @"";
				colvarWarehouseSiteId.ForeignKeyTableName = "IE_WarehouseSites";
				schema.Columns.Add(colvarWarehouseSiteId);

				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_PurchaseOrderItems",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_PurchaseOrderItem LoadFrom(IE_PurchaseOrderItem item)
		{
			IE_PurchaseOrderItem result = new IE_PurchaseOrderItem();
			if (item.PurchaseOrderItemID != default(long)) {
				result.LoadByKey(item.PurchaseOrderItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long PurchaseOrderItemID {
			get { return GetColumnValue<long>(Columns.PurchaseOrderItemID); }
			set {
				SetColumnValue(Columns.PurchaseOrderItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PurchaseOrderItemID));
			}
		}
		[DataMember]
		public int PurchaseOrderId {
			get { return GetColumnValue<int>(Columns.PurchaseOrderId); }
			set {
				SetColumnValue(Columns.PurchaseOrderId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PurchaseOrderId));
			}
		}
		[DataMember]
		public string ItemId {
			get { return GetColumnValue<string>(Columns.ItemId); }
			set {
				SetColumnValue(Columns.ItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemId));
			}
		}
		[DataMember]
		public string WarehouseSiteId {
			get { return GetColumnValue<string>(Columns.WarehouseSiteId); }
			set {
				SetColumnValue(Columns.WarehouseSiteId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WarehouseSiteId));
			}
		}
		[DataMember]
		public int Quantity {
			get { return GetColumnValue<int>(Columns.Quantity); }
			set {
				SetColumnValue(Columns.Quantity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Quantity));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Item _Item;
		//Relationship: FK_IE_PurchaseOrderItems_AE_Items
		public AE_Item Item
		{
			get
			{
				if(_Item == null) {
					_Item = AE_Item.FetchByID(this.ItemId);
				}
				return _Item;
			}
			set
			{
				SetColumnValue("ItemId", value.ItemID);
				_Item = value;
			}
		}

		private IE_PurchaseOrder _PurchaseOrder;
		//Relationship: FK_IE_PurchaseOrderItems_IE_PurchaseOrders
		public IE_PurchaseOrder PurchaseOrder
		{
			get
			{
				if(_PurchaseOrder == null) {
					_PurchaseOrder = IE_PurchaseOrder.FetchByID(this.PurchaseOrderId);
				}
				return _PurchaseOrder;
			}
			set
			{
				SetColumnValue("PurchaseOrderId", value.PurchaseOrderID);
				_PurchaseOrder = value;
			}
		}

		private IE_WarehouseSite _WarehouseSite;
		//Relationship: FK_IE_PurchaseOrderItems_IE_WarehouseSites
		public IE_WarehouseSite WarehouseSite
		{
			get
			{
				if(_WarehouseSite == null) {
					_WarehouseSite = IE_WarehouseSite.FetchByID(this.WarehouseSiteId);
				}
				return _WarehouseSite;
			}
			set
			{
				SetColumnValue("WarehouseSiteId", value.WarehouseSiteID);
				_WarehouseSite = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PurchaseOrderItemID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PurchaseOrderItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PurchaseOrderIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ItemIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn WarehouseSiteIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn QuantityColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PurchaseOrderItemID = @"PurchaseOrderItemID";
			public static readonly string PurchaseOrderId = @"PurchaseOrderId";
			public static readonly string ItemId = @"ItemId";
			public static readonly string WarehouseSiteId = @"WarehouseSiteId";
			public static readonly string Quantity = @"Quantity";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PurchaseOrderItemID; }
		}
		*/

		#region Foreign Collections

		private IE_ProductBarcodeCollection _IE_ProductBarcodesCol;
		//Relationship: FK_IE_ProductBarcodes_IE_PurchaseOrderItems
		public IE_ProductBarcodeCollection IE_ProductBarcodesCol
		{
			get
			{
				if(_IE_ProductBarcodesCol == null) {
					_IE_ProductBarcodesCol = new IE_ProductBarcodeCollection();
					_IE_ProductBarcodesCol.LoadAndCloseReader(IE_ProductBarcode.Query()
						.WHERE(IE_ProductBarcode.Columns.PurchaseOrderItemId, PurchaseOrderItemID).ExecuteReader());
				}
				return _IE_ProductBarcodesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the IE_PurchaseOrder class.
	/// </summary>
	[DataContract]
	public partial class IE_PurchaseOrderCollection : ActiveList<IE_PurchaseOrder, IE_PurchaseOrderCollection>
	{
		public static IE_PurchaseOrderCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_PurchaseOrderCollection result = new IE_PurchaseOrderCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_PurchaseOrder item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_PurchaseOrders table.
	/// </summary>
	[DataContract]
	public partial class IE_PurchaseOrder : ActiveRecord<IE_PurchaseOrder>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_PurchaseOrder()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_PurchaseOrders", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPurchaseOrderID = new TableSchema.TableColumn(schema);
				colvarPurchaseOrderID.ColumnName = "PurchaseOrderID";
				colvarPurchaseOrderID.DataType = DbType.Int32;
				colvarPurchaseOrderID.MaxLength = 0;
				colvarPurchaseOrderID.AutoIncrement = true;
				colvarPurchaseOrderID.IsNullable = false;
				colvarPurchaseOrderID.IsPrimaryKey = true;
				colvarPurchaseOrderID.IsForeignKey = false;
				colvarPurchaseOrderID.IsReadOnly = false;
				colvarPurchaseOrderID.DefaultSetting = @"";
				colvarPurchaseOrderID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPurchaseOrderID);

				TableSchema.TableColumn colvarVendorId = new TableSchema.TableColumn(schema);
				colvarVendorId.ColumnName = "VendorId";
				colvarVendorId.DataType = DbType.AnsiString;
				colvarVendorId.MaxLength = 20;
				colvarVendorId.AutoIncrement = false;
				colvarVendorId.IsNullable = false;
				colvarVendorId.IsPrimaryKey = false;
				colvarVendorId.IsForeignKey = true;
				colvarVendorId.IsReadOnly = false;
				colvarVendorId.DefaultSetting = @"";
				colvarVendorId.ForeignKeyTableName = "IE_Vendors";
				schema.Columns.Add(colvarVendorId);

				TableSchema.TableColumn colvarGPPONumber = new TableSchema.TableColumn(schema);
				colvarGPPONumber.ColumnName = "GPPONumber";
				colvarGPPONumber.DataType = DbType.AnsiString;
				colvarGPPONumber.MaxLength = 50;
				colvarGPPONumber.AutoIncrement = false;
				colvarGPPONumber.IsNullable = false;
				colvarGPPONumber.IsPrimaryKey = false;
				colvarGPPONumber.IsForeignKey = false;
				colvarGPPONumber.IsReadOnly = false;
				colvarGPPONumber.DefaultSetting = @"";
				colvarGPPONumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPPONumber);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_PurchaseOrders",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_PurchaseOrder LoadFrom(IE_PurchaseOrder item)
		{
			IE_PurchaseOrder result = new IE_PurchaseOrder();
			if (item.PurchaseOrderID != default(int)) {
				result.LoadByKey(item.PurchaseOrderID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PurchaseOrderID {
			get { return GetColumnValue<int>(Columns.PurchaseOrderID); }
			set {
				SetColumnValue(Columns.PurchaseOrderID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PurchaseOrderID));
			}
		}
		[DataMember]
		public string VendorId {
			get { return GetColumnValue<string>(Columns.VendorId); }
			set {
				SetColumnValue(Columns.VendorId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VendorId));
			}
		}
		[DataMember]
		public string GPPONumber {
			get { return GetColumnValue<string>(Columns.GPPONumber); }
			set {
				SetColumnValue(Columns.GPPONumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPPONumber));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private IE_Vendor _Vendor;
		//Relationship: FK_IE_PurchaseOrders_IE_Vendors
		public IE_Vendor Vendor
		{
			get
			{
				if(_Vendor == null) {
					_Vendor = IE_Vendor.FetchByID(this.VendorId);
				}
				return _Vendor;
			}
			set
			{
				SetColumnValue("VendorId", value.VendorID);
				_Vendor = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return VendorId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PurchaseOrderIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn VendorIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn GPPONumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PurchaseOrderID = @"PurchaseOrderID";
			public static readonly string VendorId = @"VendorId";
			public static readonly string GPPONumber = @"GPPONumber";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PurchaseOrderID; }
		}
		*/

		#region Foreign Collections

		private IE_PackingSlipCollection _IE_PackingSlipsCol;
		//Relationship: FK_IE_PackingSlips_IE_PurchaseOrders
		public IE_PackingSlipCollection IE_PackingSlipsCol
		{
			get
			{
				if(_IE_PackingSlipsCol == null) {
					_IE_PackingSlipsCol = new IE_PackingSlipCollection();
					_IE_PackingSlipsCol.LoadAndCloseReader(IE_PackingSlip.Query()
						.WHERE(IE_PackingSlip.Columns.PurchaseOrderId, PurchaseOrderID).ExecuteReader());
				}
				return _IE_PackingSlipsCol;
			}
		}

		private IE_PurchaseOrderItemCollection _IE_PurchaseOrderItemsCol;
		//Relationship: FK_IE_PurchaseOrderItems_IE_PurchaseOrders
		public IE_PurchaseOrderItemCollection IE_PurchaseOrderItemsCol
		{
			get
			{
				if(_IE_PurchaseOrderItemsCol == null) {
					_IE_PurchaseOrderItemsCol = new IE_PurchaseOrderItemCollection();
					_IE_PurchaseOrderItemsCol.LoadAndCloseReader(IE_PurchaseOrderItem.Query()
						.WHERE(IE_PurchaseOrderItem.Columns.PurchaseOrderId, PurchaseOrderID).ExecuteReader());
				}
				return _IE_PurchaseOrderItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the IE_Received class.
	/// </summary>
	[DataContract]
	public partial class IE_ReceivedCollection : ActiveList<IE_Received, IE_ReceivedCollection>
	{
		public static IE_ReceivedCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_ReceivedCollection result = new IE_ReceivedCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_Received item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_Received table.
	/// </summary>
	[DataContract]
	public partial class IE_Received : ActiveRecord<IE_Received>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_Received()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_Received", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarWarehouseID = new TableSchema.TableColumn(schema);
				colvarWarehouseID.ColumnName = "WarehouseID";
				colvarWarehouseID.DataType = DbType.AnsiString;
				colvarWarehouseID.MaxLength = 50;
				colvarWarehouseID.AutoIncrement = false;
				colvarWarehouseID.IsNullable = false;
				colvarWarehouseID.IsPrimaryKey = false;
				colvarWarehouseID.IsForeignKey = false;
				colvarWarehouseID.IsReadOnly = false;
				colvarWarehouseID.DefaultSetting = @"";
				colvarWarehouseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWarehouseID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_Received",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public string WarehouseID {
			get { return GetColumnValue<string>(Columns.WarehouseID); }
			set {
				SetColumnValue(Columns.WarehouseID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WarehouseID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return WarehouseID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn WarehouseIDColumn
		{
			get { return Schema.Columns[0]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string WarehouseID = @"WarehouseID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the IE_ReturnToManufacturerItem class.
	/// </summary>
	[DataContract]
	public partial class IE_ReturnToManufacturerItemCollection : ActiveList<IE_ReturnToManufacturerItem, IE_ReturnToManufacturerItemCollection>
	{
		public static IE_ReturnToManufacturerItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_ReturnToManufacturerItemCollection result = new IE_ReturnToManufacturerItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_ReturnToManufacturerItem item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_ReturnToManufacturerItems table.
	/// </summary>
	[DataContract]
	public partial class IE_ReturnToManufacturerItem : ActiveRecord<IE_ReturnToManufacturerItem>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_ReturnToManufacturerItem()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_ReturnToManufacturerItems", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSerialNumberID = new TableSchema.TableColumn(schema);
				colvarSerialNumberID.ColumnName = "SerialNumberID";
				colvarSerialNumberID.DataType = DbType.AnsiString;
				colvarSerialNumberID.MaxLength = 50;
				colvarSerialNumberID.AutoIncrement = false;
				colvarSerialNumberID.IsNullable = false;
				colvarSerialNumberID.IsPrimaryKey = true;
				colvarSerialNumberID.IsForeignKey = false;
				colvarSerialNumberID.IsReadOnly = false;
				colvarSerialNumberID.DefaultSetting = @"";
				colvarSerialNumberID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSerialNumberID);

				TableSchema.TableColumn colvarRtmaNumberID = new TableSchema.TableColumn(schema);
				colvarRtmaNumberID.ColumnName = "RtmaNumberID";
				colvarRtmaNumberID.DataType = DbType.String;
				colvarRtmaNumberID.MaxLength = 50;
				colvarRtmaNumberID.AutoIncrement = false;
				colvarRtmaNumberID.IsNullable = false;
				colvarRtmaNumberID.IsPrimaryKey = false;
				colvarRtmaNumberID.IsForeignKey = true;
				colvarRtmaNumberID.IsReadOnly = false;
				colvarRtmaNumberID.DefaultSetting = @"";
				colvarRtmaNumberID.ForeignKeyTableName = "IE_ReturnToManufacturers";
				schema.Columns.Add(colvarRtmaNumberID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = -1;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_ReturnToManufacturerItems",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_ReturnToManufacturerItem LoadFrom(IE_ReturnToManufacturerItem item)
		{
			IE_ReturnToManufacturerItem result = new IE_ReturnToManufacturerItem();
			if (item.SerialNumberID != default(string)) {
				result.LoadByKey(item.SerialNumberID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string SerialNumberID {
			get { return GetColumnValue<string>(Columns.SerialNumberID); }
			set {
				SetColumnValue(Columns.SerialNumberID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SerialNumberID));
			}
		}
		[DataMember]
		public string RtmaNumberID {
			get { return GetColumnValue<string>(Columns.RtmaNumberID); }
			set {
				SetColumnValue(Columns.RtmaNumberID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RtmaNumberID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private IE_ReturnToManufacturer _RtmaNumber;
		//Relationship: FK_IE_ReturnToManufacturerItems_IE_ReturnToManufacturers
		public IE_ReturnToManufacturer RtmaNumber
		{
			get
			{
				if(_RtmaNumber == null) {
					_RtmaNumber = IE_ReturnToManufacturer.FetchByID(this.RtmaNumberID);
				}
				return _RtmaNumber;
			}
			set
			{
				SetColumnValue("RtmaNumberID", value.RtmaNumberID);
				_RtmaNumber = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RtmaNumberID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SerialNumberIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RtmaNumberIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SerialNumberID = @"SerialNumberID";
			public static readonly string RtmaNumberID = @"RtmaNumberID";
			public static readonly string Description = @"Description";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SerialNumberID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the IE_ReturnToManufacturer class.
	/// </summary>
	[DataContract]
	public partial class IE_ReturnToManufacturerCollection : ActiveList<IE_ReturnToManufacturer, IE_ReturnToManufacturerCollection>
	{
		public static IE_ReturnToManufacturerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_ReturnToManufacturerCollection result = new IE_ReturnToManufacturerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_ReturnToManufacturer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_ReturnToManufacturers table.
	/// </summary>
	[DataContract]
	public partial class IE_ReturnToManufacturer : ActiveRecord<IE_ReturnToManufacturer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_ReturnToManufacturer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_ReturnToManufacturers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRtmaNumberID = new TableSchema.TableColumn(schema);
				colvarRtmaNumberID.ColumnName = "RtmaNumberID";
				colvarRtmaNumberID.DataType = DbType.String;
				colvarRtmaNumberID.MaxLength = 50;
				colvarRtmaNumberID.AutoIncrement = false;
				colvarRtmaNumberID.IsNullable = false;
				colvarRtmaNumberID.IsPrimaryKey = true;
				colvarRtmaNumberID.IsForeignKey = false;
				colvarRtmaNumberID.IsReadOnly = false;
				colvarRtmaNumberID.DefaultSetting = @"";
				colvarRtmaNumberID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRtmaNumberID);

				TableSchema.TableColumn colvarManufacturerId = new TableSchema.TableColumn(schema);
				colvarManufacturerId.ColumnName = "ManufacturerId";
				colvarManufacturerId.DataType = DbType.AnsiString;
				colvarManufacturerId.MaxLength = 20;
				colvarManufacturerId.AutoIncrement = false;
				colvarManufacturerId.IsNullable = false;
				colvarManufacturerId.IsPrimaryKey = false;
				colvarManufacturerId.IsForeignKey = true;
				colvarManufacturerId.IsReadOnly = false;
				colvarManufacturerId.DefaultSetting = @"";
				colvarManufacturerId.ForeignKeyTableName = "AE_Manufacturers";
				schema.Columns.Add(colvarManufacturerId);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_ReturnToManufacturers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_ReturnToManufacturer LoadFrom(IE_ReturnToManufacturer item)
		{
			IE_ReturnToManufacturer result = new IE_ReturnToManufacturer();
			if (item.RtmaNumberID != default(string)) {
				result.LoadByKey(item.RtmaNumberID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string RtmaNumberID {
			get { return GetColumnValue<string>(Columns.RtmaNumberID); }
			set {
				SetColumnValue(Columns.RtmaNumberID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RtmaNumberID));
			}
		}
		[DataMember]
		public string ManufacturerId {
			get { return GetColumnValue<string>(Columns.ManufacturerId); }
			set {
				SetColumnValue(Columns.ManufacturerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManufacturerId));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Manufacturer _Manufacturer;
		//Relationship: FK_IE_ReturnToManufacturers_AE_Manufacturers
		public AE_Manufacturer Manufacturer
		{
			get
			{
				if(_Manufacturer == null) {
					_Manufacturer = AE_Manufacturer.FetchByID(this.ManufacturerId);
				}
				return _Manufacturer;
			}
			set
			{
				SetColumnValue("ManufacturerId", value.ManufacturerID);
				_Manufacturer = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ManufacturerId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn RtmaNumberIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ManufacturerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RtmaNumberID = @"RtmaNumberID";
			public static readonly string ManufacturerId = @"ManufacturerId";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RtmaNumberID; }
		}
		*/

		#region Foreign Collections

		private IE_ReturnToManufacturerItemCollection _IE_ReturnToManufacturerItemsCol;
		//Relationship: FK_IE_ReturnToManufacturerItems_IE_ReturnToManufacturers
		public IE_ReturnToManufacturerItemCollection IE_ReturnToManufacturerItemsCol
		{
			get
			{
				if(_IE_ReturnToManufacturerItemsCol == null) {
					_IE_ReturnToManufacturerItemsCol = new IE_ReturnToManufacturerItemCollection();
					_IE_ReturnToManufacturerItemsCol.LoadAndCloseReader(IE_ReturnToManufacturerItem.Query()
						.WHERE(IE_ReturnToManufacturerItem.Columns.RtmaNumberID, RtmaNumberID).ExecuteReader());
				}
				return _IE_ReturnToManufacturerItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the IE_StockingLevel class.
	/// </summary>
	[DataContract]
	public partial class IE_StockingLevelCollection : ActiveList<IE_StockingLevel, IE_StockingLevelCollection>
	{
		public static IE_StockingLevelCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_StockingLevelCollection result = new IE_StockingLevelCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_StockingLevel item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_StockingLevels table.
	/// </summary>
	[DataContract]
	public partial class IE_StockingLevel : ActiveRecord<IE_StockingLevel>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_StockingLevel()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_StockingLevels", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarStockingLevelID = new TableSchema.TableColumn(schema);
				colvarStockingLevelID.ColumnName = "StockingLevelID";
				colvarStockingLevelID.DataType = DbType.Int32;
				colvarStockingLevelID.MaxLength = 0;
				colvarStockingLevelID.AutoIncrement = true;
				colvarStockingLevelID.IsNullable = false;
				colvarStockingLevelID.IsPrimaryKey = true;
				colvarStockingLevelID.IsForeignKey = false;
				colvarStockingLevelID.IsReadOnly = false;
				colvarStockingLevelID.DefaultSetting = @"";
				colvarStockingLevelID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockingLevelID);

				TableSchema.TableColumn colvarLocationTypeId = new TableSchema.TableColumn(schema);
				colvarLocationTypeId.ColumnName = "LocationTypeId";
				colvarLocationTypeId.DataType = DbType.AnsiString;
				colvarLocationTypeId.MaxLength = 20;
				colvarLocationTypeId.AutoIncrement = false;
				colvarLocationTypeId.IsNullable = false;
				colvarLocationTypeId.IsPrimaryKey = false;
				colvarLocationTypeId.IsForeignKey = true;
				colvarLocationTypeId.IsReadOnly = false;
				colvarLocationTypeId.DefaultSetting = @"";
				colvarLocationTypeId.ForeignKeyTableName = "IE_LocationTypes";
				schema.Columns.Add(colvarLocationTypeId);

				TableSchema.TableColumn colvarLocationId = new TableSchema.TableColumn(schema);
				colvarLocationId.ColumnName = "LocationId";
				colvarLocationId.DataType = DbType.AnsiString;
				colvarLocationId.MaxLength = 50;
				colvarLocationId.AutoIncrement = false;
				colvarLocationId.IsNullable = false;
				colvarLocationId.IsPrimaryKey = false;
				colvarLocationId.IsForeignKey = false;
				colvarLocationId.IsReadOnly = false;
				colvarLocationId.DefaultSetting = @"";
				colvarLocationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocationId);

				TableSchema.TableColumn colvarItemId = new TableSchema.TableColumn(schema);
				colvarItemId.ColumnName = "ItemId";
				colvarItemId.DataType = DbType.AnsiString;
				colvarItemId.MaxLength = 50;
				colvarItemId.AutoIncrement = false;
				colvarItemId.IsNullable = false;
				colvarItemId.IsPrimaryKey = false;
				colvarItemId.IsForeignKey = true;
				colvarItemId.IsReadOnly = false;
				colvarItemId.DefaultSetting = @"";
				colvarItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarItemId);

				TableSchema.TableColumn colvarReorderLevel = new TableSchema.TableColumn(schema);
				colvarReorderLevel.ColumnName = "ReorderLevel";
				colvarReorderLevel.DataType = DbType.Int32;
				colvarReorderLevel.MaxLength = 0;
				colvarReorderLevel.AutoIncrement = false;
				colvarReorderLevel.IsNullable = false;
				colvarReorderLevel.IsPrimaryKey = false;
				colvarReorderLevel.IsForeignKey = false;
				colvarReorderLevel.IsReadOnly = false;
				colvarReorderLevel.DefaultSetting = @"";
				colvarReorderLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReorderLevel);

				TableSchema.TableColumn colvarStockingLevel = new TableSchema.TableColumn(schema);
				colvarStockingLevel.ColumnName = "StockingLevel";
				colvarStockingLevel.DataType = DbType.Int32;
				colvarStockingLevel.MaxLength = 0;
				colvarStockingLevel.AutoIncrement = false;
				colvarStockingLevel.IsNullable = false;
				colvarStockingLevel.IsPrimaryKey = false;
				colvarStockingLevel.IsForeignKey = false;
				colvarStockingLevel.IsReadOnly = false;
				colvarStockingLevel.DefaultSetting = @"";
				colvarStockingLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockingLevel);

				TableSchema.TableColumn colvarOrderQuantity = new TableSchema.TableColumn(schema);
				colvarOrderQuantity.ColumnName = "OrderQuantity";
				colvarOrderQuantity.DataType = DbType.Int32;
				colvarOrderQuantity.MaxLength = 0;
				colvarOrderQuantity.AutoIncrement = false;
				colvarOrderQuantity.IsNullable = false;
				colvarOrderQuantity.IsPrimaryKey = false;
				colvarOrderQuantity.IsForeignKey = false;
				colvarOrderQuantity.IsReadOnly = false;
				colvarOrderQuantity.DefaultSetting = @"((1))";
				colvarOrderQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderQuantity);

				TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
				colvarComment.ColumnName = "Comment";
				colvarComment.DataType = DbType.String;
				colvarComment.MaxLength = -1;
				colvarComment.AutoIncrement = false;
				colvarComment.IsNullable = true;
				colvarComment.IsPrimaryKey = false;
				colvarComment.IsForeignKey = false;
				colvarComment.IsReadOnly = false;
				colvarComment.DefaultSetting = @"";
				colvarComment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_StockingLevels",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_StockingLevel LoadFrom(IE_StockingLevel item)
		{
			IE_StockingLevel result = new IE_StockingLevel();
			if (item.StockingLevelID != default(int)) {
				result.LoadByKey(item.StockingLevelID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int StockingLevelID {
			get { return GetColumnValue<int>(Columns.StockingLevelID); }
			set {
				SetColumnValue(Columns.StockingLevelID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StockingLevelID));
			}
		}
		[DataMember]
		public string LocationTypeId {
			get { return GetColumnValue<string>(Columns.LocationTypeId); }
			set {
				SetColumnValue(Columns.LocationTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LocationTypeId));
			}
		}
		[DataMember]
		public string LocationId {
			get { return GetColumnValue<string>(Columns.LocationId); }
			set {
				SetColumnValue(Columns.LocationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LocationId));
			}
		}
		[DataMember]
		public string ItemId {
			get { return GetColumnValue<string>(Columns.ItemId); }
			set {
				SetColumnValue(Columns.ItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemId));
			}
		}
		[DataMember]
		public int ReorderLevel {
			get { return GetColumnValue<int>(Columns.ReorderLevel); }
			set {
				SetColumnValue(Columns.ReorderLevel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReorderLevel));
			}
		}
		[DataMember]
		public int StockingLevel {
			get { return GetColumnValue<int>(Columns.StockingLevel); }
			set {
				SetColumnValue(Columns.StockingLevel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StockingLevel));
			}
		}
		[DataMember]
		public int OrderQuantity {
			get { return GetColumnValue<int>(Columns.OrderQuantity); }
			set {
				SetColumnValue(Columns.OrderQuantity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OrderQuantity));
			}
		}
		[DataMember]
		public string Comment {
			get { return GetColumnValue<string>(Columns.Comment); }
			set {
				SetColumnValue(Columns.Comment, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comment));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Item _Item;
		//Relationship: FK_IE_StockingLevels_AE_Items
		public AE_Item Item
		{
			get
			{
				if(_Item == null) {
					_Item = AE_Item.FetchByID(this.ItemId);
				}
				return _Item;
			}
			set
			{
				SetColumnValue("ItemId", value.ItemID);
				_Item = value;
			}
		}

		private IE_LocationType _LocationType;
		//Relationship: FK_IE_StockingLevels_IE_LocationTypes
		public IE_LocationType LocationType
		{
			get
			{
				if(_LocationType == null) {
					_LocationType = IE_LocationType.FetchByID(this.LocationTypeId);
				}
				return _LocationType;
			}
			set
			{
				SetColumnValue("LocationTypeId", value.LocationTypeID);
				_LocationType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return LocationTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn StockingLevelIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LocationTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LocationIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ItemIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ReorderLevelColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StockingLevelColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn OrderQuantityColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CommentColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string StockingLevelID = @"StockingLevelID";
			public static readonly string LocationTypeId = @"LocationTypeId";
			public static readonly string LocationId = @"LocationId";
			public static readonly string ItemId = @"ItemId";
			public static readonly string ReorderLevel = @"ReorderLevel";
			public static readonly string StockingLevel = @"StockingLevel";
			public static readonly string OrderQuantity = @"OrderQuantity";
			public static readonly string Comment = @"Comment";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return StockingLevelID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the IE_Vendor class.
	/// </summary>
	[DataContract]
	public partial class IE_VendorCollection : ActiveList<IE_Vendor, IE_VendorCollection>
	{
		public static IE_VendorCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_VendorCollection result = new IE_VendorCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_Vendor item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_Vendors table.
	/// </summary>
	[DataContract]
	public partial class IE_Vendor : ActiveRecord<IE_Vendor>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_Vendor()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_Vendors", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarVendorID = new TableSchema.TableColumn(schema);
				colvarVendorID.ColumnName = "VendorID";
				colvarVendorID.DataType = DbType.AnsiString;
				colvarVendorID.MaxLength = 20;
				colvarVendorID.AutoIncrement = false;
				colvarVendorID.IsNullable = false;
				colvarVendorID.IsPrimaryKey = true;
				colvarVendorID.IsForeignKey = false;
				colvarVendorID.IsReadOnly = false;
				colvarVendorID.DefaultSetting = @"";
				colvarVendorID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVendorID);

				TableSchema.TableColumn colvarVendorName = new TableSchema.TableColumn(schema);
				colvarVendorName.ColumnName = "VendorName";
				colvarVendorName.DataType = DbType.AnsiString;
				colvarVendorName.MaxLength = 100;
				colvarVendorName.AutoIncrement = false;
				colvarVendorName.IsNullable = false;
				colvarVendorName.IsPrimaryKey = false;
				colvarVendorName.IsForeignKey = false;
				colvarVendorName.IsReadOnly = false;
				colvarVendorName.DefaultSetting = @"";
				colvarVendorName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVendorName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_Vendors",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_Vendor LoadFrom(IE_Vendor item)
		{
			IE_Vendor result = new IE_Vendor();
			if (item.VendorID != default(string)) {
				result.LoadByKey(item.VendorID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string VendorID {
			get { return GetColumnValue<string>(Columns.VendorID); }
			set {
				SetColumnValue(Columns.VendorID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VendorID));
			}
		}
		[DataMember]
		public string VendorName {
			get { return GetColumnValue<string>(Columns.VendorName); }
			set {
				SetColumnValue(Columns.VendorName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VendorName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return VendorName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn VendorIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn VendorNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string VendorID = @"VendorID";
			public static readonly string VendorName = @"VendorName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return VendorID; }
		}
		*/

		#region Foreign Collections

		private IE_PurchaseOrderCollection _IE_PurchaseOrdersCol;
		//Relationship: FK_IE_PurchaseOrders_IE_Vendors
		public IE_PurchaseOrderCollection IE_PurchaseOrdersCol
		{
			get
			{
				if(_IE_PurchaseOrdersCol == null) {
					_IE_PurchaseOrdersCol = new IE_PurchaseOrderCollection();
					_IE_PurchaseOrdersCol.LoadAndCloseReader(IE_PurchaseOrder.Query()
						.WHERE(IE_PurchaseOrder.Columns.VendorId, VendorID).ExecuteReader());
				}
				return _IE_PurchaseOrdersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the IE_WarehouseSite class.
	/// </summary>
	[DataContract]
	public partial class IE_WarehouseSiteCollection : ActiveList<IE_WarehouseSite, IE_WarehouseSiteCollection>
	{
		public static IE_WarehouseSiteCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IE_WarehouseSiteCollection result = new IE_WarehouseSiteCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IE_WarehouseSite item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IE_WarehouseSites table.
	/// </summary>
	[DataContract]
	public partial class IE_WarehouseSite : ActiveRecord<IE_WarehouseSite>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IE_WarehouseSite()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IE_WarehouseSites", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarWarehouseSiteID = new TableSchema.TableColumn(schema);
				colvarWarehouseSiteID.ColumnName = "WarehouseSiteID";
				colvarWarehouseSiteID.DataType = DbType.AnsiString;
				colvarWarehouseSiteID.MaxLength = 20;
				colvarWarehouseSiteID.AutoIncrement = false;
				colvarWarehouseSiteID.IsNullable = false;
				colvarWarehouseSiteID.IsPrimaryKey = true;
				colvarWarehouseSiteID.IsForeignKey = false;
				colvarWarehouseSiteID.IsReadOnly = false;
				colvarWarehouseSiteID.DefaultSetting = @"";
				colvarWarehouseSiteID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWarehouseSiteID);

				TableSchema.TableColumn colvarWarehouseSiteName = new TableSchema.TableColumn(schema);
				colvarWarehouseSiteName.ColumnName = "WarehouseSiteName";
				colvarWarehouseSiteName.DataType = DbType.String;
				colvarWarehouseSiteName.MaxLength = 150;
				colvarWarehouseSiteName.AutoIncrement = false;
				colvarWarehouseSiteName.IsNullable = false;
				colvarWarehouseSiteName.IsPrimaryKey = false;
				colvarWarehouseSiteName.IsForeignKey = false;
				colvarWarehouseSiteName.IsReadOnly = false;
				colvarWarehouseSiteName.DefaultSetting = @"";
				colvarWarehouseSiteName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWarehouseSiteName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IE_WarehouseSites",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IE_WarehouseSite LoadFrom(IE_WarehouseSite item)
		{
			IE_WarehouseSite result = new IE_WarehouseSite();
			if (item.WarehouseSiteID != default(string)) {
				result.LoadByKey(item.WarehouseSiteID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string WarehouseSiteID {
			get { return GetColumnValue<string>(Columns.WarehouseSiteID); }
			set {
				SetColumnValue(Columns.WarehouseSiteID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WarehouseSiteID));
			}
		}
		[DataMember]
		public string WarehouseSiteName {
			get { return GetColumnValue<string>(Columns.WarehouseSiteName); }
			set {
				SetColumnValue(Columns.WarehouseSiteName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WarehouseSiteName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return WarehouseSiteName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn WarehouseSiteIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn WarehouseSiteNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string WarehouseSiteID = @"WarehouseSiteID";
			public static readonly string WarehouseSiteName = @"WarehouseSiteName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return WarehouseSiteID; }
		}
		*/

		#region Foreign Collections

		private IE_PurchaseOrderItemCollection _IE_PurchaseOrderItemsCol;
		//Relationship: FK_IE_PurchaseOrderItems_IE_WarehouseSites
		public IE_PurchaseOrderItemCollection IE_PurchaseOrderItemsCol
		{
			get
			{
				if(_IE_PurchaseOrderItemsCol == null) {
					_IE_PurchaseOrderItemsCol = new IE_PurchaseOrderItemCollection();
					_IE_PurchaseOrderItemsCol.LoadAndCloseReader(IE_PurchaseOrderItem.Query()
						.WHERE(IE_PurchaseOrderItem.Columns.WarehouseSiteId, WarehouseSiteID).ExecuteReader());
				}
				return _IE_PurchaseOrderItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the IS_Account class.
	/// </summary>
	[DataContract]
	public partial class IS_AccountCollection : ActiveList<IS_Account, IS_AccountCollection>
	{
		public static IS_AccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			IS_AccountCollection result = new IS_AccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (IS_Account item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the IS_Accounts table.
	/// </summary>
	[DataContract]
	public partial class IS_Account : ActiveRecord<IS_Account>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public IS_Account()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("IS_Accounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("IS_Accounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static IS_Account LoadFrom(IS_Account item)
		{
			IS_Account result = new IS_Account();
			if (item.AccountID != default(long)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_Account _Account;
		//Relationship: FK_IS_Accounts_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountID);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountID", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the LL_Account class.
	/// </summary>
	[DataContract]
	public partial class LL_AccountCollection : ActiveList<LL_Account, LL_AccountCollection>
	{
		public static LL_AccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			LL_AccountCollection result = new LL_AccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (LL_Account item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the LL_Accounts table.
	/// </summary>
	[DataContract]
	public partial class LL_Account : ActiveRecord<LL_Account>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public LL_Account()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("LL_Accounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("LL_Accounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static LL_Account LoadFrom(LL_Account item)
		{
			LL_Account result = new LL_Account();
			if (item.AccountID != default(long)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_Account _Account;
		//Relationship: FK_LL_Accounts_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountID);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountID", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_AccountAddress class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountAddressCollection : ActiveList<MC_AccountAddress, MC_AccountAddressCollection>
	{
		public static MC_AccountAddressCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountAddressCollection result = new MC_AccountAddressCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AccountAddress item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AccountAddresses table.
	/// </summary>
	[DataContract]
	public partial class MC_AccountAddress : ActiveRecord<MC_AccountAddress>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AccountAddress()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AccountAddresses", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountAddressID = new TableSchema.TableColumn(schema);
				colvarAccountAddressID.ColumnName = "AccountAddressID";
				colvarAccountAddressID.DataType = DbType.Int64;
				colvarAccountAddressID.MaxLength = 0;
				colvarAccountAddressID.AutoIncrement = true;
				colvarAccountAddressID.IsNullable = false;
				colvarAccountAddressID.IsPrimaryKey = true;
				colvarAccountAddressID.IsForeignKey = false;
				colvarAccountAddressID.IsReadOnly = false;
				colvarAccountAddressID.DefaultSetting = @"";
				colvarAccountAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountAddressID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = true;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "MC_Addresses";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarAccountAddressTypeId = new TableSchema.TableColumn(schema);
				colvarAccountAddressTypeId.ColumnName = "AccountAddressTypeId";
				colvarAccountAddressTypeId.DataType = DbType.AnsiString;
				colvarAccountAddressTypeId.MaxLength = 20;
				colvarAccountAddressTypeId.AutoIncrement = false;
				colvarAccountAddressTypeId.IsNullable = false;
				colvarAccountAddressTypeId.IsPrimaryKey = false;
				colvarAccountAddressTypeId.IsForeignKey = true;
				colvarAccountAddressTypeId.IsReadOnly = false;
				colvarAccountAddressTypeId.DefaultSetting = @"";
				colvarAccountAddressTypeId.ForeignKeyTableName = "AE_AccountAddressTypes";
				schema.Columns.Add(colvarAccountAddressTypeId);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AccountAddresses",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AccountAddress LoadFrom(MC_AccountAddress item)
		{
			MC_AccountAddress result = new MC_AccountAddress();
			if (item.AccountAddressID != default(long)) {
				result.LoadByKey(item.AccountAddressID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountAddressID {
			get { return GetColumnValue<long>(Columns.AccountAddressID); }
			set {
				SetColumnValue(Columns.AccountAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountAddressID));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set {
				SetColumnValue(Columns.AddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressId));
			}
		}
		[DataMember]
		public string AccountAddressTypeId {
			get { return GetColumnValue<string>(Columns.AccountAddressTypeId); }
			set {
				SetColumnValue(Columns.AccountAddressTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountAddressTypeId));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_AccountAddressType _AccountAddressType;
		//Relationship: FK_MC_AccountAddresses_AE_AccountAddressTypes
		public AE_AccountAddressType AccountAddressType
		{
			get
			{
				if(_AccountAddressType == null) {
					_AccountAddressType = AE_AccountAddressType.FetchByID(this.AccountAddressTypeId);
				}
				return _AccountAddressType;
			}
			set
			{
				SetColumnValue("AccountAddressTypeId", value.AccountAddressTypeID);
				_AccountAddressType = value;
			}
		}

		private MC_Address _Address;
		//Relationship: FK_MC_AccountAddresses_MC_Addresss
		public MC_Address Address
		{
			get
			{
				if(_Address == null) {
					_Address = MC_Address.FetchByID(this.AddressId);
				}
				return _Address;
			}
			set
			{
				SetColumnValue("AddressId", value.AddressID);
				_Address = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountAddressID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountAddressIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountAddressTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountAddressID = @"AccountAddressID";
			public static readonly string AccountId = @"AccountId";
			public static readonly string AddressId = @"AddressId";
			public static readonly string AccountAddressTypeId = @"AccountAddressTypeId";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountAddressID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_AccountFlag class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountFlagCollection : ActiveList<MC_AccountFlag, MC_AccountFlagCollection>
	{
		public static MC_AccountFlagCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountFlagCollection result = new MC_AccountFlagCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AccountFlag item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AccountFlags table.
	/// </summary>
	[DataContract]
	public partial class MC_AccountFlag : ActiveRecord<MC_AccountFlag>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AccountFlag()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AccountFlags", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountFlagID = new TableSchema.TableColumn(schema);
				colvarAccountFlagID.ColumnName = "AccountFlagID";
				colvarAccountFlagID.DataType = DbType.Int32;
				colvarAccountFlagID.MaxLength = 0;
				colvarAccountFlagID.AutoIncrement = true;
				colvarAccountFlagID.IsNullable = false;
				colvarAccountFlagID.IsPrimaryKey = true;
				colvarAccountFlagID.IsForeignKey = false;
				colvarAccountFlagID.IsReadOnly = false;
				colvarAccountFlagID.DefaultSetting = @"";
				colvarAccountFlagID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountFlagID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MC_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarAccountFlagTypeId = new TableSchema.TableColumn(schema);
				colvarAccountFlagTypeId.ColumnName = "AccountFlagTypeId";
				colvarAccountFlagTypeId.DataType = DbType.Int32;
				colvarAccountFlagTypeId.MaxLength = 0;
				colvarAccountFlagTypeId.AutoIncrement = false;
				colvarAccountFlagTypeId.IsNullable = false;
				colvarAccountFlagTypeId.IsPrimaryKey = false;
				colvarAccountFlagTypeId.IsForeignKey = true;
				colvarAccountFlagTypeId.IsReadOnly = false;
				colvarAccountFlagTypeId.DefaultSetting = @"";
				colvarAccountFlagTypeId.ForeignKeyTableName = "MC_AccountFlagTypes";
				schema.Columns.Add(colvarAccountFlagTypeId);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarRemovedOn = new TableSchema.TableColumn(schema);
				colvarRemovedOn.ColumnName = "RemovedOn";
				colvarRemovedOn.DataType = DbType.DateTime;
				colvarRemovedOn.MaxLength = 0;
				colvarRemovedOn.AutoIncrement = false;
				colvarRemovedOn.IsNullable = true;
				colvarRemovedOn.IsPrimaryKey = false;
				colvarRemovedOn.IsForeignKey = false;
				colvarRemovedOn.IsReadOnly = false;
				colvarRemovedOn.DefaultSetting = @"";
				colvarRemovedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemovedOn);

				TableSchema.TableColumn colvarRemovedBy = new TableSchema.TableColumn(schema);
				colvarRemovedBy.ColumnName = "RemovedBy";
				colvarRemovedBy.DataType = DbType.String;
				colvarRemovedBy.MaxLength = 50;
				colvarRemovedBy.AutoIncrement = false;
				colvarRemovedBy.IsNullable = true;
				colvarRemovedBy.IsPrimaryKey = false;
				colvarRemovedBy.IsForeignKey = false;
				colvarRemovedBy.IsReadOnly = false;
				colvarRemovedBy.DefaultSetting = @"";
				colvarRemovedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemovedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AccountFlags",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AccountFlag LoadFrom(MC_AccountFlag item)
		{
			MC_AccountFlag result = new MC_AccountFlag();
			if (item.AccountFlagID != default(int)) {
				result.LoadByKey(item.AccountFlagID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountFlagID {
			get { return GetColumnValue<int>(Columns.AccountFlagID); }
			set {
				SetColumnValue(Columns.AccountFlagID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountFlagID));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public int AccountFlagTypeId {
			get { return GetColumnValue<int>(Columns.AccountFlagTypeId); }
			set {
				SetColumnValue(Columns.AccountFlagTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountFlagTypeId));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime? RemovedOn {
			get { return GetColumnValue<DateTime?>(Columns.RemovedOn); }
			set {
				SetColumnValue(Columns.RemovedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RemovedOn));
			}
		}
		[DataMember]
		public string RemovedBy {
			get { return GetColumnValue<string>(Columns.RemovedBy); }
			set {
				SetColumnValue(Columns.RemovedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RemovedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_AccountFlagType _AccountFlagType;
		//Relationship: FK_MC_AccountFlags_MC_AccountFlagTypes
		public MC_AccountFlagType AccountFlagType
		{
			get
			{
				if(_AccountFlagType == null) {
					_AccountFlagType = MC_AccountFlagType.FetchByID(this.AccountFlagTypeId);
				}
				return _AccountFlagType;
			}
			set
			{
				SetColumnValue("AccountFlagTypeId", value.AccountFlagTypeID);
				_AccountFlagType = value;
			}
		}

		private MC_Account _Account;
		//Relationship: FK_MC_AccountFlags_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountFlagID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountFlagIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountFlagTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RemovedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RemovedByColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountFlagID = @"AccountFlagID";
			public static readonly string AccountId = @"AccountId";
			public static readonly string AccountFlagTypeId = @"AccountFlagTypeId";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string RemovedOn = @"RemovedOn";
			public static readonly string RemovedBy = @"RemovedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountFlagID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_AccountFlagType class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountFlagTypeCollection : ActiveList<MC_AccountFlagType, MC_AccountFlagTypeCollection>
	{
		public static MC_AccountFlagTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountFlagTypeCollection result = new MC_AccountFlagTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AccountFlagType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AccountFlagTypes table.
	/// </summary>
	[DataContract]
	public partial class MC_AccountFlagType : ActiveRecord<MC_AccountFlagType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AccountFlagType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AccountFlagTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountFlagTypeID = new TableSchema.TableColumn(schema);
				colvarAccountFlagTypeID.ColumnName = "AccountFlagTypeID";
				colvarAccountFlagTypeID.DataType = DbType.Int32;
				colvarAccountFlagTypeID.MaxLength = 0;
				colvarAccountFlagTypeID.AutoIncrement = true;
				colvarAccountFlagTypeID.IsNullable = false;
				colvarAccountFlagTypeID.IsPrimaryKey = true;
				colvarAccountFlagTypeID.IsForeignKey = false;
				colvarAccountFlagTypeID.IsReadOnly = false;
				colvarAccountFlagTypeID.DefaultSetting = @"";
				colvarAccountFlagTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountFlagTypeID);

				TableSchema.TableColumn colvarFlagType = new TableSchema.TableColumn(schema);
				colvarFlagType.ColumnName = "FlagType";
				colvarFlagType.DataType = DbType.String;
				colvarFlagType.MaxLength = 100;
				colvarFlagType.AutoIncrement = false;
				colvarFlagType.IsNullable = false;
				colvarFlagType.IsPrimaryKey = false;
				colvarFlagType.IsForeignKey = false;
				colvarFlagType.IsReadOnly = false;
				colvarFlagType.DefaultSetting = @"";
				colvarFlagType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFlagType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AccountFlagTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AccountFlagType LoadFrom(MC_AccountFlagType item)
		{
			MC_AccountFlagType result = new MC_AccountFlagType();
			if (item.AccountFlagTypeID != default(int)) {
				result.LoadByKey(item.AccountFlagTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountFlagTypeID {
			get { return GetColumnValue<int>(Columns.AccountFlagTypeID); }
			set {
				SetColumnValue(Columns.AccountFlagTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountFlagTypeID));
			}
		}
		[DataMember]
		public string FlagType {
			get { return GetColumnValue<string>(Columns.FlagType); }
			set {
				SetColumnValue(Columns.FlagType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FlagType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return FlagType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountFlagTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn FlagTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountFlagTypeID = @"AccountFlagTypeID";
			public static readonly string FlagType = @"FlagType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountFlagTypeID; }
		}
		*/

		#region Foreign Collections

		private MC_AccountFlagCollection _MC_AccountFlagsCol;
		//Relationship: FK_MC_AccountFlags_MC_AccountFlagTypes
		public MC_AccountFlagCollection MC_AccountFlagsCol
		{
			get
			{
				if(_MC_AccountFlagsCol == null) {
					_MC_AccountFlagsCol = new MC_AccountFlagCollection();
					_MC_AccountFlagsCol.LoadAndCloseReader(MC_AccountFlag.Query()
						.WHERE(MC_AccountFlag.Columns.AccountFlagTypeId, AccountFlagTypeID).ExecuteReader());
				}
				return _MC_AccountFlagsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_AccountInventory class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountInventoryCollection : ActiveList<MC_AccountInventory, MC_AccountInventoryCollection>
	{
		public static MC_AccountInventoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountInventoryCollection result = new MC_AccountInventoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AccountInventory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AccountInventory table.
	/// </summary>
	[DataContract]
	public partial class MC_AccountInventory : ActiveRecord<MC_AccountInventory>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AccountInventory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AccountInventory", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountInventoryID = new TableSchema.TableColumn(schema);
				colvarAccountInventoryID.ColumnName = "AccountInventoryID";
				colvarAccountInventoryID.DataType = DbType.Int64;
				colvarAccountInventoryID.MaxLength = 0;
				colvarAccountInventoryID.AutoIncrement = true;
				colvarAccountInventoryID.IsNullable = false;
				colvarAccountInventoryID.IsPrimaryKey = true;
				colvarAccountInventoryID.IsForeignKey = false;
				colvarAccountInventoryID.IsReadOnly = false;
				colvarAccountInventoryID.DefaultSetting = @"";
				colvarAccountInventoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountInventoryID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MC_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarInvoiceItemId = new TableSchema.TableColumn(schema);
				colvarInvoiceItemId.ColumnName = "InvoiceItemId";
				colvarInvoiceItemId.DataType = DbType.Int64;
				colvarInvoiceItemId.MaxLength = 0;
				colvarInvoiceItemId.AutoIncrement = false;
				colvarInvoiceItemId.IsNullable = true;
				colvarInvoiceItemId.IsPrimaryKey = false;
				colvarInvoiceItemId.IsForeignKey = true;
				colvarInvoiceItemId.IsReadOnly = false;
				colvarInvoiceItemId.DefaultSetting = @"";
				colvarInvoiceItemId.ForeignKeyTableName = "AE_InvoiceItems";
				schema.Columns.Add(colvarInvoiceItemId);

				TableSchema.TableColumn colvarInvoiceItemPosted = new TableSchema.TableColumn(schema);
				colvarInvoiceItemPosted.ColumnName = "InvoiceItemPosted";
				colvarInvoiceItemPosted.DataType = DbType.DateTime;
				colvarInvoiceItemPosted.MaxLength = 0;
				colvarInvoiceItemPosted.AutoIncrement = false;
				colvarInvoiceItemPosted.IsNullable = true;
				colvarInvoiceItemPosted.IsPrimaryKey = false;
				colvarInvoiceItemPosted.IsForeignKey = false;
				colvarInvoiceItemPosted.IsReadOnly = false;
				colvarInvoiceItemPosted.DefaultSetting = @"";
				colvarInvoiceItemPosted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceItemPosted);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedByDate = new TableSchema.TableColumn(schema);
				colvarModifiedByDate.ColumnName = "ModifiedByDate";
				colvarModifiedByDate.DataType = DbType.DateTime;
				colvarModifiedByDate.MaxLength = 0;
				colvarModifiedByDate.AutoIncrement = false;
				colvarModifiedByDate.IsNullable = false;
				colvarModifiedByDate.IsPrimaryKey = false;
				colvarModifiedByDate.IsForeignKey = false;
				colvarModifiedByDate.IsReadOnly = false;
				colvarModifiedByDate.DefaultSetting = @"(getdate())";
				colvarModifiedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByDate);

				TableSchema.TableColumn colvarModifiedById = new TableSchema.TableColumn(schema);
				colvarModifiedById.ColumnName = "ModifiedById";
				colvarModifiedById.DataType = DbType.String;
				colvarModifiedById.MaxLength = 50;
				colvarModifiedById.AutoIncrement = false;
				colvarModifiedById.IsNullable = false;
				colvarModifiedById.IsPrimaryKey = false;
				colvarModifiedById.IsForeignKey = false;
				colvarModifiedById.IsReadOnly = false;
				colvarModifiedById.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedById);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCreatedById = new TableSchema.TableColumn(schema);
				colvarCreatedById.ColumnName = "CreatedById";
				colvarCreatedById.DataType = DbType.String;
				colvarCreatedById.MaxLength = 50;
				colvarCreatedById.AutoIncrement = false;
				colvarCreatedById.IsNullable = false;
				colvarCreatedById.IsPrimaryKey = false;
				colvarCreatedById.IsForeignKey = false;
				colvarCreatedById.IsReadOnly = false;
				colvarCreatedById.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedById);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AccountInventory",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AccountInventory LoadFrom(MC_AccountInventory item)
		{
			MC_AccountInventory result = new MC_AccountInventory();
			if (item.AccountInventoryID != default(long)) {
				result.LoadByKey(item.AccountInventoryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountInventoryID {
			get { return GetColumnValue<long>(Columns.AccountInventoryID); }
			set {
				SetColumnValue(Columns.AccountInventoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountInventoryID));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public long? InvoiceItemId {
			get { return GetColumnValue<long?>(Columns.InvoiceItemId); }
			set {
				SetColumnValue(Columns.InvoiceItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceItemId));
			}
		}
		[DataMember]
		public DateTime? InvoiceItemPosted {
			get { return GetColumnValue<DateTime?>(Columns.InvoiceItemPosted); }
			set {
				SetColumnValue(Columns.InvoiceItemPosted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceItemPosted));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedByDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedByDate); }
			set {
				SetColumnValue(Columns.ModifiedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByDate));
			}
		}
		[DataMember]
		public string ModifiedById {
			get { return GetColumnValue<string>(Columns.ModifiedById); }
			set {
				SetColumnValue(Columns.ModifiedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedById));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string CreatedById {
			get { return GetColumnValue<string>(Columns.CreatedById); }
			set {
				SetColumnValue(Columns.CreatedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedById));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_InvoiceItem _InvoiceItem;
		//Relationship: FK_MC_AccountInventory_AE_InvoiceItems
		public AE_InvoiceItem InvoiceItem
		{
			get
			{
				if(_InvoiceItem == null) {
					_InvoiceItem = AE_InvoiceItem.FetchByID(this.InvoiceItemId);
				}
				return _InvoiceItem;
			}
			set
			{
				SetColumnValue("InvoiceItemId", value.InvoiceItemID);
				_InvoiceItem = value;
			}
		}

		private MC_Account _Account;
		//Relationship: FK_MC_AccountInventory_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountInventoryID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountInventoryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn InvoiceItemIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn InvoiceItemPostedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountInventoryID = @"AccountInventoryID";
			public static readonly string AccountId = @"AccountId";
			public static readonly string InvoiceItemId = @"InvoiceItemId";
			public static readonly string InvoiceItemPosted = @"InvoiceItemPosted";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedByDate = @"ModifiedByDate";
			public static readonly string ModifiedById = @"ModifiedById";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CreatedById = @"CreatedById";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountInventoryID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_AccountNoteCat1 class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountNoteCat1Collection : ActiveList<MC_AccountNoteCat1, MC_AccountNoteCat1Collection>
	{
		public static MC_AccountNoteCat1Collection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountNoteCat1Collection result = new MC_AccountNoteCat1Collection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AccountNoteCat1 item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AccountNoteCat1 table.
	/// </summary>
	[DataContract]
	public partial class MC_AccountNoteCat1 : ActiveRecord<MC_AccountNoteCat1>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AccountNoteCat1()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AccountNoteCat1", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarNoteCategory1ID = new TableSchema.TableColumn(schema);
				colvarNoteCategory1ID.ColumnName = "NoteCategory1ID";
				colvarNoteCategory1ID.DataType = DbType.Int32;
				colvarNoteCategory1ID.MaxLength = 0;
				colvarNoteCategory1ID.AutoIncrement = true;
				colvarNoteCategory1ID.IsNullable = false;
				colvarNoteCategory1ID.IsPrimaryKey = true;
				colvarNoteCategory1ID.IsForeignKey = false;
				colvarNoteCategory1ID.IsReadOnly = false;
				colvarNoteCategory1ID.DefaultSetting = @"";
				colvarNoteCategory1ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoteCategory1ID);

				TableSchema.TableColumn colvarCategory = new TableSchema.TableColumn(schema);
				colvarCategory.ColumnName = "Category";
				colvarCategory.DataType = DbType.String;
				colvarCategory.MaxLength = 50;
				colvarCategory.AutoIncrement = false;
				colvarCategory.IsNullable = false;
				colvarCategory.IsPrimaryKey = false;
				colvarCategory.IsForeignKey = false;
				colvarCategory.IsReadOnly = false;
				colvarCategory.DefaultSetting = @"";
				colvarCategory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCategory);

				TableSchema.TableColumn colvarNoteTypeId = new TableSchema.TableColumn(schema);
				colvarNoteTypeId.ColumnName = "NoteTypeId";
				colvarNoteTypeId.DataType = DbType.AnsiString;
				colvarNoteTypeId.MaxLength = 20;
				colvarNoteTypeId.AutoIncrement = false;
				colvarNoteTypeId.IsNullable = false;
				colvarNoteTypeId.IsPrimaryKey = false;
				colvarNoteTypeId.IsForeignKey = true;
				colvarNoteTypeId.IsReadOnly = false;
				colvarNoteTypeId.DefaultSetting = @"('STANDARD')";
				colvarNoteTypeId.ForeignKeyTableName = "MC_AccountNoteTypes";
				schema.Columns.Add(colvarNoteTypeId);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = -1;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AccountNoteCat1",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AccountNoteCat1 LoadFrom(MC_AccountNoteCat1 item)
		{
			MC_AccountNoteCat1 result = new MC_AccountNoteCat1();
			if (item.NoteCategory1ID != default(int)) {
				result.LoadByKey(item.NoteCategory1ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int NoteCategory1ID {
			get { return GetColumnValue<int>(Columns.NoteCategory1ID); }
			set {
				SetColumnValue(Columns.NoteCategory1ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteCategory1ID));
			}
		}
		[DataMember]
		public string Category {
			get { return GetColumnValue<string>(Columns.Category); }
			set {
				SetColumnValue(Columns.Category, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Category));
			}
		}
		[DataMember]
		public string NoteTypeId {
			get { return GetColumnValue<string>(Columns.NoteTypeId); }
			set {
				SetColumnValue(Columns.NoteTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteTypeId));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_AccountNoteType _NoteType;
		//Relationship: FK_MC_AccountNoteCat1_MC_AccountNoteTypes
		public MC_AccountNoteType NoteType
		{
			get
			{
				if(_NoteType == null) {
					_NoteType = MC_AccountNoteType.FetchByID(this.NoteTypeId);
				}
				return _NoteType;
			}
			set
			{
				SetColumnValue("NoteTypeId", value.NoteTypeID);
				_NoteType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Category;
		}

		#region Typed Columns

		public static TableSchema.TableColumn NoteCategory1IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CategoryColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn NoteTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string NoteCategory1ID = @"NoteCategory1ID";
			public static readonly string Category = @"Category";
			public static readonly string NoteTypeId = @"NoteTypeId";
			public static readonly string Description = @"Description";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return NoteCategory1ID; }
		}
		*/

		#region Foreign Collections

		private MC_AccountNoteCat2Collection _MC_AccountNoteCat2sCol;
		//Relationship: FK_MC_AccountNoteCat2_MC_AccountNoteCat1
		public MC_AccountNoteCat2Collection MC_AccountNoteCat2sCol
		{
			get
			{
				if(_MC_AccountNoteCat2sCol == null) {
					_MC_AccountNoteCat2sCol = new MC_AccountNoteCat2Collection();
					_MC_AccountNoteCat2sCol.LoadAndCloseReader(MC_AccountNoteCat2.Query()
						.WHERE(MC_AccountNoteCat2.Columns.NoteCategory1Id, NoteCategory1ID).ExecuteReader());
				}
				return _MC_AccountNoteCat2sCol;
			}
		}

		private MC_AccountNoteCollection _MC_AccountNotesCol;
		//Relationship: FK_MC_AccountNotes_MC_AccountNoteCat1
		public MC_AccountNoteCollection MC_AccountNotesCol
		{
			get
			{
				if(_MC_AccountNotesCol == null) {
					_MC_AccountNotesCol = new MC_AccountNoteCollection();
					_MC_AccountNotesCol.LoadAndCloseReader(MC_AccountNote.Query()
						.WHERE(MC_AccountNote.Columns.NoteCategory1Id, NoteCategory1ID).ExecuteReader());
				}
				return _MC_AccountNotesCol;
			}
		}

		private MC_DepartmentAccountNoteCat1Collection _MC_DepartmentAccountNoteCat1sCol;
		//Relationship: FK_MC_DepartmentAccountNoteCat1_MC_AccountNoteCat1
		public MC_DepartmentAccountNoteCat1Collection MC_DepartmentAccountNoteCat1sCol
		{
			get
			{
				if(_MC_DepartmentAccountNoteCat1sCol == null) {
					_MC_DepartmentAccountNoteCat1sCol = new MC_DepartmentAccountNoteCat1Collection();
					_MC_DepartmentAccountNoteCat1sCol.LoadAndCloseReader(MC_DepartmentAccountNoteCat1.Query()
						.WHERE(MC_DepartmentAccountNoteCat1.Columns.NoteCategory1ID, NoteCategory1ID).ExecuteReader());
				}
				return _MC_DepartmentAccountNoteCat1sCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_AccountNoteCat2 class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountNoteCat2Collection : ActiveList<MC_AccountNoteCat2, MC_AccountNoteCat2Collection>
	{
		public static MC_AccountNoteCat2Collection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountNoteCat2Collection result = new MC_AccountNoteCat2Collection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AccountNoteCat2 item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AccountNoteCat2 table.
	/// </summary>
	[DataContract]
	public partial class MC_AccountNoteCat2 : ActiveRecord<MC_AccountNoteCat2>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AccountNoteCat2()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AccountNoteCat2", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarNoteCategory2ID = new TableSchema.TableColumn(schema);
				colvarNoteCategory2ID.ColumnName = "NoteCategory2ID";
				colvarNoteCategory2ID.DataType = DbType.Int32;
				colvarNoteCategory2ID.MaxLength = 0;
				colvarNoteCategory2ID.AutoIncrement = true;
				colvarNoteCategory2ID.IsNullable = false;
				colvarNoteCategory2ID.IsPrimaryKey = true;
				colvarNoteCategory2ID.IsForeignKey = false;
				colvarNoteCategory2ID.IsReadOnly = false;
				colvarNoteCategory2ID.DefaultSetting = @"";
				colvarNoteCategory2ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoteCategory2ID);

				TableSchema.TableColumn colvarNoteCategory1Id = new TableSchema.TableColumn(schema);
				colvarNoteCategory1Id.ColumnName = "NoteCategory1Id";
				colvarNoteCategory1Id.DataType = DbType.Int32;
				colvarNoteCategory1Id.MaxLength = 0;
				colvarNoteCategory1Id.AutoIncrement = false;
				colvarNoteCategory1Id.IsNullable = false;
				colvarNoteCategory1Id.IsPrimaryKey = false;
				colvarNoteCategory1Id.IsForeignKey = true;
				colvarNoteCategory1Id.IsReadOnly = false;
				colvarNoteCategory1Id.DefaultSetting = @"";
				colvarNoteCategory1Id.ForeignKeyTableName = "MC_AccountNoteCat1";
				schema.Columns.Add(colvarNoteCategory1Id);

				TableSchema.TableColumn colvarCategory = new TableSchema.TableColumn(schema);
				colvarCategory.ColumnName = "Category";
				colvarCategory.DataType = DbType.String;
				colvarCategory.MaxLength = 50;
				colvarCategory.AutoIncrement = false;
				colvarCategory.IsNullable = false;
				colvarCategory.IsPrimaryKey = false;
				colvarCategory.IsForeignKey = false;
				colvarCategory.IsReadOnly = false;
				colvarCategory.DefaultSetting = @"";
				colvarCategory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCategory);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = -1;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AccountNoteCat2",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AccountNoteCat2 LoadFrom(MC_AccountNoteCat2 item)
		{
			MC_AccountNoteCat2 result = new MC_AccountNoteCat2();
			if (item.NoteCategory2ID != default(int)) {
				result.LoadByKey(item.NoteCategory2ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int NoteCategory2ID {
			get { return GetColumnValue<int>(Columns.NoteCategory2ID); }
			set {
				SetColumnValue(Columns.NoteCategory2ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteCategory2ID));
			}
		}
		[DataMember]
		public int NoteCategory1Id {
			get { return GetColumnValue<int>(Columns.NoteCategory1Id); }
			set {
				SetColumnValue(Columns.NoteCategory1Id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteCategory1Id));
			}
		}
		[DataMember]
		public string Category {
			get { return GetColumnValue<string>(Columns.Category); }
			set {
				SetColumnValue(Columns.Category, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Category));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_AccountNoteCat1 _NoteCategory1;
		//Relationship: FK_MC_AccountNoteCat2_MC_AccountNoteCat1
		public MC_AccountNoteCat1 NoteCategory1
		{
			get
			{
				if(_NoteCategory1 == null) {
					_NoteCategory1 = MC_AccountNoteCat1.FetchByID(this.NoteCategory1Id);
				}
				return _NoteCategory1;
			}
			set
			{
				SetColumnValue("NoteCategory1Id", value.NoteCategory1ID);
				_NoteCategory1 = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return NoteCategory2ID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn NoteCategory2IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NoteCategory1IdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CategoryColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string NoteCategory2ID = @"NoteCategory2ID";
			public static readonly string NoteCategory1Id = @"NoteCategory1Id";
			public static readonly string Category = @"Category";
			public static readonly string Description = @"Description";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return NoteCategory2ID; }
		}
		*/

		#region Foreign Collections

		private MC_AccountNoteCollection _MC_AccountNotesCol;
		//Relationship: FK_MC_AccountNotes_MC_AccountNoteCat2
		public MC_AccountNoteCollection MC_AccountNotesCol
		{
			get
			{
				if(_MC_AccountNotesCol == null) {
					_MC_AccountNotesCol = new MC_AccountNoteCollection();
					_MC_AccountNotesCol.LoadAndCloseReader(MC_AccountNote.Query()
						.WHERE(MC_AccountNote.Columns.NoteCategory2Id, NoteCategory2ID).ExecuteReader());
				}
				return _MC_AccountNotesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_AccountNote class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountNoteCollection : ActiveList<MC_AccountNote, MC_AccountNoteCollection>
	{
		public static MC_AccountNoteCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountNoteCollection result = new MC_AccountNoteCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AccountNote item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AccountNotes table.
	/// </summary>
	[DataContract]
	public partial class MC_AccountNote : ActiveRecord<MC_AccountNote>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AccountNote()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AccountNotes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarNoteID = new TableSchema.TableColumn(schema);
				colvarNoteID.ColumnName = "NoteID";
				colvarNoteID.DataType = DbType.Int64;
				colvarNoteID.MaxLength = 0;
				colvarNoteID.AutoIncrement = true;
				colvarNoteID.IsNullable = false;
				colvarNoteID.IsPrimaryKey = true;
				colvarNoteID.IsForeignKey = false;
				colvarNoteID.IsReadOnly = false;
				colvarNoteID.DefaultSetting = @"";
				colvarNoteID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoteID);

				TableSchema.TableColumn colvarNoteTypeId = new TableSchema.TableColumn(schema);
				colvarNoteTypeId.ColumnName = "NoteTypeId";
				colvarNoteTypeId.DataType = DbType.AnsiString;
				colvarNoteTypeId.MaxLength = 20;
				colvarNoteTypeId.AutoIncrement = false;
				colvarNoteTypeId.IsNullable = false;
				colvarNoteTypeId.IsPrimaryKey = false;
				colvarNoteTypeId.IsForeignKey = true;
				colvarNoteTypeId.IsReadOnly = false;
				colvarNoteTypeId.DefaultSetting = @"('STANDARD')";
				colvarNoteTypeId.ForeignKeyTableName = "MC_AccountNoteTypes";
				schema.Columns.Add(colvarNoteTypeId);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = true;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "AE_CustomerMasterFiles";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = true;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = true;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "AE_Customers";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = true;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = true;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "QL_Leads";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarNoteCategory1Id = new TableSchema.TableColumn(schema);
				colvarNoteCategory1Id.ColumnName = "NoteCategory1Id";
				colvarNoteCategory1Id.DataType = DbType.Int32;
				colvarNoteCategory1Id.MaxLength = 0;
				colvarNoteCategory1Id.AutoIncrement = false;
				colvarNoteCategory1Id.IsNullable = false;
				colvarNoteCategory1Id.IsPrimaryKey = false;
				colvarNoteCategory1Id.IsForeignKey = true;
				colvarNoteCategory1Id.IsReadOnly = false;
				colvarNoteCategory1Id.DefaultSetting = @"";
				colvarNoteCategory1Id.ForeignKeyTableName = "MC_AccountNoteCat1";
				schema.Columns.Add(colvarNoteCategory1Id);

				TableSchema.TableColumn colvarNoteCategory2Id = new TableSchema.TableColumn(schema);
				colvarNoteCategory2Id.ColumnName = "NoteCategory2Id";
				colvarNoteCategory2Id.DataType = DbType.Int32;
				colvarNoteCategory2Id.MaxLength = 0;
				colvarNoteCategory2Id.AutoIncrement = false;
				colvarNoteCategory2Id.IsNullable = true;
				colvarNoteCategory2Id.IsPrimaryKey = false;
				colvarNoteCategory2Id.IsForeignKey = true;
				colvarNoteCategory2Id.IsReadOnly = false;
				colvarNoteCategory2Id.DefaultSetting = @"";
				colvarNoteCategory2Id.ForeignKeyTableName = "MC_AccountNoteCat2";
				schema.Columns.Add(colvarNoteCategory2Id);

				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = -1;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = false;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AccountNotes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AccountNote LoadFrom(MC_AccountNote item)
		{
			MC_AccountNote result = new MC_AccountNote();
			if (item.NoteID != default(long)) {
				result.LoadByKey(item.NoteID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long NoteID {
			get { return GetColumnValue<long>(Columns.NoteID); }
			set {
				SetColumnValue(Columns.NoteID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteID));
			}
		}
		[DataMember]
		public string NoteTypeId {
			get { return GetColumnValue<string>(Columns.NoteTypeId); }
			set {
				SetColumnValue(Columns.NoteTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteTypeId));
			}
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set {
				SetColumnValue(Columns.CustomerMasterFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileId));
			}
		}
		[DataMember]
		public long? CustomerId {
			get { return GetColumnValue<long?>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public long? LeadId {
			get { return GetColumnValue<long?>(Columns.LeadId); }
			set {
				SetColumnValue(Columns.LeadId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadId));
			}
		}
		[DataMember]
		public int NoteCategory1Id {
			get { return GetColumnValue<int>(Columns.NoteCategory1Id); }
			set {
				SetColumnValue(Columns.NoteCategory1Id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteCategory1Id));
			}
		}
		[DataMember]
		public int? NoteCategory2Id {
			get { return GetColumnValue<int?>(Columns.NoteCategory2Id); }
			set {
				SetColumnValue(Columns.NoteCategory2Id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteCategory2Id));
			}
		}
		[DataMember]
		public string Note {
			get { return GetColumnValue<string>(Columns.Note); }
			set {
				SetColumnValue(Columns.Note, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Note));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_CustomerMasterFile _CustomerMasterFile;
		//Relationship: FK_MC_AccountNotes_AE_CustomerMasterFiles
		public AE_CustomerMasterFile CustomerMasterFile
		{
			get
			{
				if(_CustomerMasterFile == null) {
					_CustomerMasterFile = AE_CustomerMasterFile.FetchByID(this.CustomerMasterFileId);
				}
				return _CustomerMasterFile;
			}
			set
			{
				SetColumnValue("CustomerMasterFileId", value.CustomerMasterFileID);
				_CustomerMasterFile = value;
			}
		}

		private AE_Customer _Customer;
		//Relationship: FK_MC_AccountNotes_AE_Customers
		public AE_Customer Customer
		{
			get
			{
				if(_Customer == null) {
					_Customer = AE_Customer.FetchByID(this.CustomerId);
				}
				return _Customer;
			}
			set
			{
				SetColumnValue("CustomerId", value.CustomerID);
				_Customer = value;
			}
		}

		private MC_AccountNoteCat1 _NoteCategory1;
		//Relationship: FK_MC_AccountNotes_MC_AccountNoteCat1
		public MC_AccountNoteCat1 NoteCategory1
		{
			get
			{
				if(_NoteCategory1 == null) {
					_NoteCategory1 = MC_AccountNoteCat1.FetchByID(this.NoteCategory1Id);
				}
				return _NoteCategory1;
			}
			set
			{
				SetColumnValue("NoteCategory1Id", value.NoteCategory1ID);
				_NoteCategory1 = value;
			}
		}

		private MC_AccountNoteCat2 _NoteCategory2;
		//Relationship: FK_MC_AccountNotes_MC_AccountNoteCat2
		public MC_AccountNoteCat2 NoteCategory2
		{
			get
			{
				if(_NoteCategory2 == null) {
					_NoteCategory2 = MC_AccountNoteCat2.FetchByID(this.NoteCategory2Id);
				}
				return _NoteCategory2;
			}
			set
			{
				SetColumnValue("NoteCategory2Id", value.NoteCategory2ID);
				_NoteCategory2 = value;
			}
		}

		private MC_AccountNoteType _NoteType;
		//Relationship: FK_MC_AccountNotes_MC_AccountNoteTypes
		public MC_AccountNoteType NoteType
		{
			get
			{
				if(_NoteType == null) {
					_NoteType = MC_AccountNoteType.FetchByID(this.NoteTypeId);
				}
				return _NoteType;
			}
			set
			{
				SetColumnValue("NoteTypeId", value.NoteTypeID);
				_NoteType = value;
			}
		}

		private QL_Lead _Lead;
		//Relationship: FK_MC_AccountNotes_QL_Leads
		public QL_Lead Lead
		{
			get
			{
				if(_Lead == null) {
					_Lead = QL_Lead.FetchByID(this.LeadId);
				}
				return _Lead;
			}
			set
			{
				SetColumnValue("LeadId", value.LeadID);
				_Lead = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return NoteTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn NoteIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NoteTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn NoteCategory1IdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn NoteCategory2IdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn NoteColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string NoteID = @"NoteID";
			public static readonly string NoteTypeId = @"NoteTypeId";
			public static readonly string CustomerMasterFileId = @"CustomerMasterFileId";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string LeadId = @"LeadId";
			public static readonly string NoteCategory1Id = @"NoteCategory1Id";
			public static readonly string NoteCategory2Id = @"NoteCategory2Id";
			public static readonly string Note = @"Note";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return NoteID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_AccountNoteType class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountNoteTypeCollection : ActiveList<MC_AccountNoteType, MC_AccountNoteTypeCollection>
	{
		public static MC_AccountNoteTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountNoteTypeCollection result = new MC_AccountNoteTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AccountNoteType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AccountNoteTypes table.
	/// </summary>
	[DataContract]
	public partial class MC_AccountNoteType : ActiveRecord<MC_AccountNoteType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Auto_GeneratedID = "AUTO_GEN";
			[EnumMember()] public const string Billing_EngineID = "BILLING_ENGINE";
			[EnumMember()] public const string Central_StationID = "CEN_STATION";
			[EnumMember()] public const string Standard_NoteID = "STANDARD";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AccountNoteType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AccountNoteTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarNoteTypeID = new TableSchema.TableColumn(schema);
				colvarNoteTypeID.ColumnName = "NoteTypeID";
				colvarNoteTypeID.DataType = DbType.AnsiString;
				colvarNoteTypeID.MaxLength = 20;
				colvarNoteTypeID.AutoIncrement = false;
				colvarNoteTypeID.IsNullable = false;
				colvarNoteTypeID.IsPrimaryKey = true;
				colvarNoteTypeID.IsForeignKey = false;
				colvarNoteTypeID.IsReadOnly = false;
				colvarNoteTypeID.DefaultSetting = @"";
				colvarNoteTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoteTypeID);

				TableSchema.TableColumn colvarNoteType = new TableSchema.TableColumn(schema);
				colvarNoteType.ColumnName = "NoteType";
				colvarNoteType.DataType = DbType.String;
				colvarNoteType.MaxLength = 50;
				colvarNoteType.AutoIncrement = false;
				colvarNoteType.IsNullable = false;
				colvarNoteType.IsPrimaryKey = false;
				colvarNoteType.IsForeignKey = false;
				colvarNoteType.IsReadOnly = false;
				colvarNoteType.DefaultSetting = @"";
				colvarNoteType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoteType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AccountNoteTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AccountNoteType LoadFrom(MC_AccountNoteType item)
		{
			MC_AccountNoteType result = new MC_AccountNoteType();
			if (item.NoteTypeID != default(string)) {
				result.LoadByKey(item.NoteTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string NoteTypeID {
			get { return GetColumnValue<string>(Columns.NoteTypeID); }
			set {
				SetColumnValue(Columns.NoteTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteTypeID));
			}
		}
		[DataMember]
		public string NoteType {
			get { return GetColumnValue<string>(Columns.NoteType); }
			set {
				SetColumnValue(Columns.NoteType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return NoteType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn NoteTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NoteTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string NoteTypeID = @"NoteTypeID";
			public static readonly string NoteType = @"NoteType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return NoteTypeID; }
		}
		*/

		#region Foreign Collections

		private MC_AccountNoteCat1Collection _MC_AccountNoteCat1sCol;
		//Relationship: FK_MC_AccountNoteCat1_MC_AccountNoteTypes
		public MC_AccountNoteCat1Collection MC_AccountNoteCat1sCol
		{
			get
			{
				if(_MC_AccountNoteCat1sCol == null) {
					_MC_AccountNoteCat1sCol = new MC_AccountNoteCat1Collection();
					_MC_AccountNoteCat1sCol.LoadAndCloseReader(MC_AccountNoteCat1.Query()
						.WHERE(MC_AccountNoteCat1.Columns.NoteTypeId, NoteTypeID).ExecuteReader());
				}
				return _MC_AccountNoteCat1sCol;
			}
		}

		private MC_AccountNoteCollection _MC_AccountNotesCol;
		//Relationship: FK_MC_AccountNotes_MC_AccountNoteTypes
		public MC_AccountNoteCollection MC_AccountNotesCol
		{
			get
			{
				if(_MC_AccountNotesCol == null) {
					_MC_AccountNotesCol = new MC_AccountNoteCollection();
					_MC_AccountNotesCol.LoadAndCloseReader(MC_AccountNote.Query()
						.WHERE(MC_AccountNote.Columns.NoteTypeId, NoteTypeID).ExecuteReader());
				}
				return _MC_AccountNotesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_Account class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountCollection : ActiveList<MC_Account, MC_AccountCollection>
	{
		public static MC_AccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountCollection result = new MC_AccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_Account item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_Accounts table.
	/// </summary>
	[DataContract]
	public partial class MC_Account : ActiveRecord<MC_Account>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_Account()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_Accounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = true;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarAccountTypeId = new TableSchema.TableColumn(schema);
				colvarAccountTypeId.ColumnName = "AccountTypeId";
				colvarAccountTypeId.DataType = DbType.AnsiString;
				colvarAccountTypeId.MaxLength = 20;
				colvarAccountTypeId.AutoIncrement = false;
				colvarAccountTypeId.IsNullable = false;
				colvarAccountTypeId.IsPrimaryKey = false;
				colvarAccountTypeId.IsForeignKey = true;
				colvarAccountTypeId.IsReadOnly = false;
				colvarAccountTypeId.DefaultSetting = @"('ALRM')";
				colvarAccountTypeId.ForeignKeyTableName = "MC_AccountTypes";
				schema.Columns.Add(colvarAccountTypeId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"((5000))";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarShipContactId = new TableSchema.TableColumn(schema);
				colvarShipContactId.ColumnName = "ShipContactId";
				colvarShipContactId.DataType = DbType.Int64;
				colvarShipContactId.MaxLength = 0;
				colvarShipContactId.AutoIncrement = false;
				colvarShipContactId.IsNullable = true;
				colvarShipContactId.IsPrimaryKey = false;
				colvarShipContactId.IsForeignKey = true;
				colvarShipContactId.IsReadOnly = false;
				colvarShipContactId.DefaultSetting = @"";
				colvarShipContactId.ForeignKeyTableName = "AE_Customers";
				schema.Columns.Add(colvarShipContactId);

				TableSchema.TableColumn colvarShipAddressId = new TableSchema.TableColumn(schema);
				colvarShipAddressId.ColumnName = "ShipAddressId";
				colvarShipAddressId.DataType = DbType.Int64;
				colvarShipAddressId.MaxLength = 0;
				colvarShipAddressId.AutoIncrement = false;
				colvarShipAddressId.IsNullable = true;
				colvarShipAddressId.IsPrimaryKey = false;
				colvarShipAddressId.IsForeignKey = true;
				colvarShipAddressId.IsReadOnly = false;
				colvarShipAddressId.DefaultSetting = @"";
				colvarShipAddressId.ForeignKeyTableName = "MC_Addresses";
				schema.Columns.Add(colvarShipAddressId);

				TableSchema.TableColumn colvarDealerAccountId = new TableSchema.TableColumn(schema);
				colvarDealerAccountId.ColumnName = "DealerAccountId";
				colvarDealerAccountId.DataType = DbType.String;
				colvarDealerAccountId.MaxLength = 50;
				colvarDealerAccountId.AutoIncrement = false;
				colvarDealerAccountId.IsNullable = true;
				colvarDealerAccountId.IsPrimaryKey = false;
				colvarDealerAccountId.IsForeignKey = false;
				colvarDealerAccountId.IsReadOnly = false;
				colvarDealerAccountId.DefaultSetting = @"";
				colvarDealerAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerAccountId);

				TableSchema.TableColumn colvarShipContactSameAsCustomer = new TableSchema.TableColumn(schema);
				colvarShipContactSameAsCustomer.ColumnName = "ShipContactSameAsCustomer";
				colvarShipContactSameAsCustomer.DataType = DbType.Boolean;
				colvarShipContactSameAsCustomer.MaxLength = 0;
				colvarShipContactSameAsCustomer.AutoIncrement = false;
				colvarShipContactSameAsCustomer.IsNullable = false;
				colvarShipContactSameAsCustomer.IsPrimaryKey = false;
				colvarShipContactSameAsCustomer.IsForeignKey = false;
				colvarShipContactSameAsCustomer.IsReadOnly = false;
				colvarShipContactSameAsCustomer.DefaultSetting = @"((1))";
				colvarShipContactSameAsCustomer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShipContactSameAsCustomer);

				TableSchema.TableColumn colvarShipAddressSameAsCustomer = new TableSchema.TableColumn(schema);
				colvarShipAddressSameAsCustomer.ColumnName = "ShipAddressSameAsCustomer";
				colvarShipAddressSameAsCustomer.DataType = DbType.Boolean;
				colvarShipAddressSameAsCustomer.MaxLength = 0;
				colvarShipAddressSameAsCustomer.AutoIncrement = false;
				colvarShipAddressSameAsCustomer.IsNullable = false;
				colvarShipAddressSameAsCustomer.IsPrimaryKey = false;
				colvarShipAddressSameAsCustomer.IsForeignKey = false;
				colvarShipAddressSameAsCustomer.IsReadOnly = false;
				colvarShipAddressSameAsCustomer.DefaultSetting = @"((1))";
				colvarShipAddressSameAsCustomer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShipAddressSameAsCustomer);

				TableSchema.TableColumn colvarAccountName = new TableSchema.TableColumn(schema);
				colvarAccountName.ColumnName = "AccountName";
				colvarAccountName.DataType = DbType.String;
				colvarAccountName.MaxLength = 100;
				colvarAccountName.AutoIncrement = false;
				colvarAccountName.IsNullable = true;
				colvarAccountName.IsPrimaryKey = false;
				colvarAccountName.IsForeignKey = false;
				colvarAccountName.IsReadOnly = false;
				colvarAccountName.DefaultSetting = @"";
				colvarAccountName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountName);

				TableSchema.TableColumn colvarAccountDesc = new TableSchema.TableColumn(schema);
				colvarAccountDesc.ColumnName = "AccountDesc";
				colvarAccountDesc.DataType = DbType.String;
				colvarAccountDesc.MaxLength = -1;
				colvarAccountDesc.AutoIncrement = false;
				colvarAccountDesc.IsNullable = true;
				colvarAccountDesc.IsPrimaryKey = false;
				colvarAccountDesc.IsForeignKey = false;
				colvarAccountDesc.IsReadOnly = false;
				colvarAccountDesc.DefaultSetting = @"";
				colvarAccountDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountDesc);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_Accounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_Account LoadFrom(MC_Account item)
		{
			MC_Account result = new MC_Account();
			if (item.AccountID != default(long)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public string AccountTypeId {
			get { return GetColumnValue<string>(Columns.AccountTypeId); }
			set {
				SetColumnValue(Columns.AccountTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountTypeId));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public long? ShipContactId {
			get { return GetColumnValue<long?>(Columns.ShipContactId); }
			set {
				SetColumnValue(Columns.ShipContactId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShipContactId));
			}
		}
		[DataMember]
		public long? ShipAddressId {
			get { return GetColumnValue<long?>(Columns.ShipAddressId); }
			set {
				SetColumnValue(Columns.ShipAddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShipAddressId));
			}
		}
		[DataMember]
		public string DealerAccountId {
			get { return GetColumnValue<string>(Columns.DealerAccountId); }
			set {
				SetColumnValue(Columns.DealerAccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerAccountId));
			}
		}
		[DataMember]
		public bool ShipContactSameAsCustomer {
			get { return GetColumnValue<bool>(Columns.ShipContactSameAsCustomer); }
			set {
				SetColumnValue(Columns.ShipContactSameAsCustomer, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShipContactSameAsCustomer));
			}
		}
		[DataMember]
		public bool ShipAddressSameAsCustomer {
			get { return GetColumnValue<bool>(Columns.ShipAddressSameAsCustomer); }
			set {
				SetColumnValue(Columns.ShipAddressSameAsCustomer, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShipAddressSameAsCustomer));
			}
		}
		[DataMember]
		public string AccountName {
			get { return GetColumnValue<string>(Columns.AccountName); }
			set {
				SetColumnValue(Columns.AccountName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountName));
			}
		}
		[DataMember]
		public string AccountDesc {
			get { return GetColumnValue<string>(Columns.AccountDesc); }
			set {
				SetColumnValue(Columns.AccountDesc, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountDesc));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Customer _ShipContact;
		//Relationship: FK_MC_Accounts_AE_Customers
		public AE_Customer ShipContact
		{
			get
			{
				if(_ShipContact == null) {
					_ShipContact = AE_Customer.FetchByID(this.ShipContactId);
				}
				return _ShipContact;
			}
			set
			{
				SetColumnValue("ShipContactId", value.CustomerID);
				_ShipContact = value;
			}
		}

		private AE_Dealer _Dealer;
		//Relationship: FK_MC_Accounts_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		private MC_AccountType _AccountType;
		//Relationship: FK_MC_Accounts_MC_AccountTypes
		public MC_AccountType AccountType
		{
			get
			{
				if(_AccountType == null) {
					_AccountType = MC_AccountType.FetchByID(this.AccountTypeId);
				}
				return _AccountType;
			}
			set
			{
				SetColumnValue("AccountTypeId", value.AccountTypeID);
				_AccountType = value;
			}
		}

		private MC_Address _ShipAddress;
		//Relationship: FK_MC_Accounts_MC_Addresses
		public MC_Address ShipAddress
		{
			get
			{
				if(_ShipAddress == null) {
					_ShipAddress = MC_Address.FetchByID(this.ShipAddressId);
				}
				return _ShipAddress;
			}
			set
			{
				SetColumnValue("ShipAddressId", value.AddressID);
				_ShipAddress = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ShipContactIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ShipAddressIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DealerAccountIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ShipContactSameAsCustomerColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ShipAddressSameAsCustomerColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn AccountNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AccountDescColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string AccountTypeId = @"AccountTypeId";
			public static readonly string DealerId = @"DealerId";
			public static readonly string ShipContactId = @"ShipContactId";
			public static readonly string ShipAddressId = @"ShipAddressId";
			public static readonly string DealerAccountId = @"DealerAccountId";
			public static readonly string ShipContactSameAsCustomer = @"ShipContactSameAsCustomer";
			public static readonly string ShipAddressSameAsCustomer = @"ShipAddressSameAsCustomer";
			public static readonly string AccountName = @"AccountName";
			public static readonly string AccountDesc = @"AccountDesc";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/

		#region Foreign Collections

		private AE_CustomerAccountCollection _AE_CustomerAccountsCol;
		//Relationship: FK_AE_CustomerAccounts_MC_Accounts
		public AE_CustomerAccountCollection AE_CustomerAccountsCol
		{
			get
			{
				if(_AE_CustomerAccountsCol == null) {
					_AE_CustomerAccountsCol = new AE_CustomerAccountCollection();
					_AE_CustomerAccountsCol.LoadAndCloseReader(AE_CustomerAccount.Query()
						.WHERE(AE_CustomerAccount.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _AE_CustomerAccountsCol;
			}
		}

		private AE_InvoiceCollection _AE_InvoicesCol;
		//Relationship: FK_AE_Invoices_MC_Accounts
		public AE_InvoiceCollection AE_InvoicesCol
		{
			get
			{
				if(_AE_InvoicesCol == null) {
					_AE_InvoicesCol = new AE_InvoiceCollection();
					_AE_InvoicesCol.LoadAndCloseReader(AE_Invoice.Query()
						.WHERE(AE_Invoice.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _AE_InvoicesCol;
			}
		}

		private AE_PaymentCollection _AE_PaymentsCol;
		//Relationship: FK_AE_Payments_MC_Accounts
		public AE_PaymentCollection AE_PaymentsCol
		{
			get
			{
				if(_AE_PaymentsCol == null) {
					_AE_PaymentsCol = new AE_PaymentCollection();
					_AE_PaymentsCol.LoadAndCloseReader(AE_Payment.Query()
						.WHERE(AE_Payment.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _AE_PaymentsCol;
			}
		}

		private GS_AccountCollection _GS_AccountsCol;
		//Relationship: FK_GS_Accounts_MC_Accounts
		public GS_AccountCollection GS_AccountsCol
		{
			get
			{
				if(_GS_AccountsCol == null) {
					_GS_AccountsCol = new GS_AccountCollection();
					_GS_AccountsCol.LoadAndCloseReader(GS_Account.Query()
						.WHERE(GS_Account.Columns.AccountID, AccountID).ExecuteReader());
				}
				return _GS_AccountsCol;
			}
		}

		private IS_AccountCollection _IS_AccountsCol;
		//Relationship: FK_IS_Accounts_MC_Accounts
		public IS_AccountCollection IS_AccountsCol
		{
			get
			{
				if(_IS_AccountsCol == null) {
					_IS_AccountsCol = new IS_AccountCollection();
					_IS_AccountsCol.LoadAndCloseReader(IS_Account.Query()
						.WHERE(IS_Account.Columns.AccountID, AccountID).ExecuteReader());
				}
				return _IS_AccountsCol;
			}
		}

		private LL_AccountCollection _LL_AccountsCol;
		//Relationship: FK_LL_Accounts_MC_Accounts
		public LL_AccountCollection LL_AccountsCol
		{
			get
			{
				if(_LL_AccountsCol == null) {
					_LL_AccountsCol = new LL_AccountCollection();
					_LL_AccountsCol.LoadAndCloseReader(LL_Account.Query()
						.WHERE(LL_Account.Columns.AccountID, AccountID).ExecuteReader());
				}
				return _LL_AccountsCol;
			}
		}

		private MC_AccountFlagCollection _MC_AccountFlagsCol;
		//Relationship: FK_MC_AccountFlags_MC_Accounts
		public MC_AccountFlagCollection MC_AccountFlagsCol
		{
			get
			{
				if(_MC_AccountFlagsCol == null) {
					_MC_AccountFlagsCol = new MC_AccountFlagCollection();
					_MC_AccountFlagsCol.LoadAndCloseReader(MC_AccountFlag.Query()
						.WHERE(MC_AccountFlag.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _MC_AccountFlagsCol;
			}
		}

		private MC_AccountInventoryCollection _MC_AccountInventoriesCol;
		//Relationship: FK_MC_AccountInventory_MC_Accounts
		public MC_AccountInventoryCollection MC_AccountInventoriesCol
		{
			get
			{
				if(_MC_AccountInventoriesCol == null) {
					_MC_AccountInventoriesCol = new MC_AccountInventoryCollection();
					_MC_AccountInventoriesCol.LoadAndCloseReader(MC_AccountInventory.Query()
						.WHERE(MC_AccountInventory.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _MC_AccountInventoriesCol;
			}
		}

		private MS_AccountCustomerCollection _MS_AccountCustomersCol;
		//Relationship: FK_MS_AccountCustomers_MC_Accounts
		public MS_AccountCustomerCollection MS_AccountCustomersCol
		{
			get
			{
				if(_MS_AccountCustomersCol == null) {
					_MS_AccountCustomersCol = new MS_AccountCustomerCollection();
					_MS_AccountCustomersCol.LoadAndCloseReader(MS_AccountCustomer.Query()
						.WHERE(MS_AccountCustomer.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _MS_AccountCustomersCol;
			}
		}

		private MS_AccountCollection _MS_AccountsCol;
		//Relationship: FK_MS_Accounts_MC_Accounts
		public MS_AccountCollection MS_AccountsCol
		{
			get
			{
				if(_MS_AccountsCol == null) {
					_MS_AccountsCol = new MS_AccountCollection();
					_MS_AccountsCol.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.AccountID, AccountID).ExecuteReader());
				}
				return _MS_AccountsCol;
			}
		}

		private NM_AccountCollection _NM_AccountsCol;
		//Relationship: FK_NM_Accounts_MC_Accounts
		public NM_AccountCollection NM_AccountsCol
		{
			get
			{
				if(_NM_AccountsCol == null) {
					_NM_AccountsCol = new NM_AccountCollection();
					_NM_AccountsCol.LoadAndCloseReader(NM_Account.Query()
						.WHERE(NM_Account.Columns.AccountID, AccountID).ExecuteReader());
				}
				return _NM_AccountsCol;
			}
		}

		private SAE_BillingHistoryCollection _SAE_BillingHistoriesCol;
		//Relationship: FK_SAE_BillingHistory_MC_Accounts
		public SAE_BillingHistoryCollection SAE_BillingHistoriesCol
		{
			get
			{
				if(_SAE_BillingHistoriesCol == null) {
					_SAE_BillingHistoriesCol = new SAE_BillingHistoryCollection();
					_SAE_BillingHistoriesCol.LoadAndCloseReader(SAE_BillingHistory.Query()
						.WHERE(SAE_BillingHistory.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _SAE_BillingHistoriesCol;
			}
		}

		private SAE_BillingInfoSummaryCollection _SAE_BillingInfoSummariesCol;
		//Relationship: FK_SAE_CustomerMasterFileBillingInfoSummary_MC_Accounts
		public SAE_BillingInfoSummaryCollection SAE_BillingInfoSummariesCol
		{
			get
			{
				if(_SAE_BillingInfoSummariesCol == null) {
					_SAE_BillingInfoSummariesCol = new SAE_BillingInfoSummaryCollection();
					_SAE_BillingInfoSummariesCol.LoadAndCloseReader(SAE_BillingInfoSummary.Query()
						.WHERE(SAE_BillingInfoSummary.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _SAE_BillingInfoSummariesCol;
			}
		}

		private SP_AccountCollection _SP_AccountsCol;
		//Relationship: FK_SP_Accounts_MC_Accounts
		public SP_AccountCollection SP_AccountsCol
		{
			get
			{
				if(_SP_AccountsCol == null) {
					_SP_AccountsCol = new SP_AccountCollection();
					_SP_AccountsCol.LoadAndCloseReader(SP_Account.Query()
						.WHERE(SP_Account.Columns.AccountID, AccountID).ExecuteReader());
				}
				return _SP_AccountsCol;
			}
		}

		private WF_AccountCollection _WF_AccountsCol;
		//Relationship: FK_WF_Accounts_MC_Accounts
		public WF_AccountCollection WF_AccountsCol
		{
			get
			{
				if(_WF_AccountsCol == null) {
					_WF_AccountsCol = new WF_AccountCollection();
					_WF_AccountsCol.LoadAndCloseReader(WF_Account.Query()
						.WHERE(WF_Account.Columns.AccountID, AccountID).ExecuteReader());
				}
				return _WF_AccountsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_AccountSwungInfo class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountSwungInfoCollection : ActiveList<MC_AccountSwungInfo, MC_AccountSwungInfoCollection>
	{
		public static MC_AccountSwungInfoCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountSwungInfoCollection result = new MC_AccountSwungInfoCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AccountSwungInfo item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AccountSwungInfo table.
	/// </summary>
	[DataContract]
	public partial class MC_AccountSwungInfo : ActiveRecord<MC_AccountSwungInfo>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AccountSwungInfo()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AccountSwungInfo", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID_Old = new TableSchema.TableColumn(schema);
				colvarAccountID_Old.ColumnName = "AccountID_Old";
				colvarAccountID_Old.DataType = DbType.Int64;
				colvarAccountID_Old.MaxLength = 0;
				colvarAccountID_Old.AutoIncrement = false;
				colvarAccountID_Old.IsNullable = false;
				colvarAccountID_Old.IsPrimaryKey = true;
				colvarAccountID_Old.IsForeignKey = false;
				colvarAccountID_Old.IsReadOnly = false;
				colvarAccountID_Old.DefaultSetting = @"";
				colvarAccountID_Old.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID_Old);

				TableSchema.TableColumn colvarAccountID_New = new TableSchema.TableColumn(schema);
				colvarAccountID_New.ColumnName = "AccountID_New";
				colvarAccountID_New.DataType = DbType.Int64;
				colvarAccountID_New.MaxLength = 0;
				colvarAccountID_New.AutoIncrement = false;
				colvarAccountID_New.IsNullable = false;
				colvarAccountID_New.IsPrimaryKey = false;
				colvarAccountID_New.IsForeignKey = false;
				colvarAccountID_New.IsReadOnly = false;
				colvarAccountID_New.DefaultSetting = @"";
				colvarAccountID_New.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID_New);

				TableSchema.TableColumn colvarEquipmentSwung = new TableSchema.TableColumn(schema);
				colvarEquipmentSwung.ColumnName = "EquipmentSwung";
				colvarEquipmentSwung.DataType = DbType.DateTime;
				colvarEquipmentSwung.MaxLength = 0;
				colvarEquipmentSwung.AutoIncrement = false;
				colvarEquipmentSwung.IsNullable = true;
				colvarEquipmentSwung.IsPrimaryKey = false;
				colvarEquipmentSwung.IsForeignKey = false;
				colvarEquipmentSwung.IsReadOnly = false;
				colvarEquipmentSwung.DefaultSetting = @"";
				colvarEquipmentSwung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentSwung);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AccountSwungInfo",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AccountSwungInfo LoadFrom(MC_AccountSwungInfo item)
		{
			MC_AccountSwungInfo result = new MC_AccountSwungInfo();
			if (item.AccountID_Old != default(long)) {
				result.LoadByKey(item.AccountID_Old);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID_Old {
			get { return GetColumnValue<long>(Columns.AccountID_Old); }
			set {
				SetColumnValue(Columns.AccountID_Old, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID_Old));
			}
		}
		[DataMember]
		public long AccountID_New {
			get { return GetColumnValue<long>(Columns.AccountID_New); }
			set {
				SetColumnValue(Columns.AccountID_New, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID_New));
			}
		}
		[DataMember]
		public DateTime? EquipmentSwung {
			get { return GetColumnValue<DateTime?>(Columns.EquipmentSwung); }
			set {
				SetColumnValue(Columns.EquipmentSwung, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentSwung));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountID_Old.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountID_OldColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountID_NewColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn EquipmentSwungColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID_Old = @"AccountID_Old";
			public static readonly string AccountID_New = @"AccountID_New";
			public static readonly string EquipmentSwung = @"EquipmentSwung";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID_Old; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_AccountType class.
	/// </summary>
	[DataContract]
	public partial class MC_AccountTypeCollection : ActiveList<MC_AccountType, MC_AccountTypeCollection>
	{
		public static MC_AccountTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AccountTypeCollection result = new MC_AccountTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AccountType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AccountTypes table.
	/// </summary>
	[DataContract]
	public partial class MC_AccountType : ActiveRecord<MC_AccountType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AccountType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AccountTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountTypeID = new TableSchema.TableColumn(schema);
				colvarAccountTypeID.ColumnName = "AccountTypeID";
				colvarAccountTypeID.DataType = DbType.AnsiString;
				colvarAccountTypeID.MaxLength = 20;
				colvarAccountTypeID.AutoIncrement = false;
				colvarAccountTypeID.IsNullable = false;
				colvarAccountTypeID.IsPrimaryKey = true;
				colvarAccountTypeID.IsForeignKey = false;
				colvarAccountTypeID.IsReadOnly = false;
				colvarAccountTypeID.DefaultSetting = @"";
				colvarAccountTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountTypeID);

				TableSchema.TableColumn colvarAccountTypeName = new TableSchema.TableColumn(schema);
				colvarAccountTypeName.ColumnName = "AccountTypeName";
				colvarAccountTypeName.DataType = DbType.AnsiString;
				colvarAccountTypeName.MaxLength = 50;
				colvarAccountTypeName.AutoIncrement = false;
				colvarAccountTypeName.IsNullable = false;
				colvarAccountTypeName.IsPrimaryKey = false;
				colvarAccountTypeName.IsForeignKey = false;
				colvarAccountTypeName.IsReadOnly = false;
				colvarAccountTypeName.DefaultSetting = @"";
				colvarAccountTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountTypeName);

				TableSchema.TableColumn colvarMasterTable = new TableSchema.TableColumn(schema);
				colvarMasterTable.ColumnName = "MasterTable";
				colvarMasterTable.DataType = DbType.AnsiString;
				colvarMasterTable.MaxLength = 50;
				colvarMasterTable.AutoIncrement = false;
				colvarMasterTable.IsNullable = false;
				colvarMasterTable.IsPrimaryKey = false;
				colvarMasterTable.IsForeignKey = false;
				colvarMasterTable.IsReadOnly = false;
				colvarMasterTable.DefaultSetting = @"('NOT SET')";
				colvarMasterTable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMasterTable);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AccountTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AccountType LoadFrom(MC_AccountType item)
		{
			MC_AccountType result = new MC_AccountType();
			if (item.AccountTypeID != default(string)) {
				result.LoadByKey(item.AccountTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AccountTypeID {
			get { return GetColumnValue<string>(Columns.AccountTypeID); }
			set {
				SetColumnValue(Columns.AccountTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountTypeID));
			}
		}
		[DataMember]
		public string AccountTypeName {
			get { return GetColumnValue<string>(Columns.AccountTypeName); }
			set {
				SetColumnValue(Columns.AccountTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountTypeName));
			}
		}
		[DataMember]
		public string MasterTable {
			get { return GetColumnValue<string>(Columns.MasterTable); }
			set {
				SetColumnValue(Columns.MasterTable, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MasterTable));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MasterTableColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountTypeID = @"AccountTypeID";
			public static readonly string AccountTypeName = @"AccountTypeName";
			public static readonly string MasterTable = @"MasterTable";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountTypeID; }
		}
		*/

		#region Foreign Collections

		private AE_ItemAccountCollection _AE_ItemAccountsCol;
		//Relationship: FK_AE_ItemAccounts_MC_AccountTypes
		public AE_ItemAccountCollection AE_ItemAccountsCol
		{
			get
			{
				if(_AE_ItemAccountsCol == null) {
					_AE_ItemAccountsCol = new AE_ItemAccountCollection();
					_AE_ItemAccountsCol.LoadAndCloseReader(AE_ItemAccount.Query()
						.WHERE(AE_ItemAccount.Columns.AccountTypeId, AccountTypeID).ExecuteReader());
				}
				return _AE_ItemAccountsCol;
			}
		}

		private MC_AccountCollection _MC_AccountsCol;
		//Relationship: FK_MC_Accounts_MC_AccountTypes
		public MC_AccountCollection MC_AccountsCol
		{
			get
			{
				if(_MC_AccountsCol == null) {
					_MC_AccountsCol = new MC_AccountCollection();
					_MC_AccountsCol.LoadAndCloseReader(MC_Account.Query()
						.WHERE(MC_Account.Columns.AccountTypeId, AccountTypeID).ExecuteReader());
				}
				return _MC_AccountsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_AddressCoord class.
	/// </summary>
	[DataContract]
	public partial class MC_AddressCoordCollection : ActiveList<MC_AddressCoord, MC_AddressCoordCollection>
	{
		public static MC_AddressCoordCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AddressCoordCollection result = new MC_AddressCoordCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AddressCoord item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AddressCoords table.
	/// </summary>
	[DataContract]
	public partial class MC_AddressCoord : ActiveRecord<MC_AddressCoord>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AddressCoord()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AddressCoords", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressID = new TableSchema.TableColumn(schema);
				colvarAddressID.ColumnName = "AddressID";
				colvarAddressID.DataType = DbType.Int64;
				colvarAddressID.MaxLength = 0;
				colvarAddressID.AutoIncrement = false;
				colvarAddressID.IsNullable = false;
				colvarAddressID.IsPrimaryKey = true;
				colvarAddressID.IsForeignKey = false;
				colvarAddressID.IsReadOnly = false;
				colvarAddressID.DefaultSetting = @"";
				colvarAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressID);

				TableSchema.TableColumn colvarStatusCode = new TableSchema.TableColumn(schema);
				colvarStatusCode.ColumnName = "StatusCode";
				colvarStatusCode.DataType = DbType.Int32;
				colvarStatusCode.MaxLength = 0;
				colvarStatusCode.AutoIncrement = false;
				colvarStatusCode.IsNullable = false;
				colvarStatusCode.IsPrimaryKey = false;
				colvarStatusCode.IsForeignKey = true;
				colvarStatusCode.IsReadOnly = false;
				colvarStatusCode.DefaultSetting = @"";
				colvarStatusCode.ForeignKeyTableName = "MC_AddressCoordStatusCodes";
				schema.Columns.Add(colvarStatusCode);

				TableSchema.TableColumn colvarOurAddress = new TableSchema.TableColumn(schema);
				colvarOurAddress.ColumnName = "OurAddress";
				colvarOurAddress.DataType = DbType.String;
				colvarOurAddress.MaxLength = 500;
				colvarOurAddress.AutoIncrement = false;
				colvarOurAddress.IsNullable = true;
				colvarOurAddress.IsPrimaryKey = false;
				colvarOurAddress.IsForeignKey = false;
				colvarOurAddress.IsReadOnly = false;
				colvarOurAddress.DefaultSetting = @"";
				colvarOurAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOurAddress);

				TableSchema.TableColumn colvarFullAddress = new TableSchema.TableColumn(schema);
				colvarFullAddress.ColumnName = "FullAddress";
				colvarFullAddress.DataType = DbType.String;
				colvarFullAddress.MaxLength = 500;
				colvarFullAddress.AutoIncrement = false;
				colvarFullAddress.IsNullable = true;
				colvarFullAddress.IsPrimaryKey = false;
				colvarFullAddress.IsForeignKey = false;
				colvarFullAddress.IsReadOnly = false;
				colvarFullAddress.DefaultSetting = @"";
				colvarFullAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullAddress);

				TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
				colvarLatitude.ColumnName = "Latitude";
				colvarLatitude.DataType = DbType.Double;
				colvarLatitude.MaxLength = 0;
				colvarLatitude.AutoIncrement = false;
				colvarLatitude.IsNullable = true;
				colvarLatitude.IsPrimaryKey = false;
				colvarLatitude.IsForeignKey = false;
				colvarLatitude.IsReadOnly = false;
				colvarLatitude.DefaultSetting = @"";
				colvarLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitude);

				TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
				colvarLongitude.ColumnName = "Longitude";
				colvarLongitude.DataType = DbType.Double;
				colvarLongitude.MaxLength = 0;
				colvarLongitude.AutoIncrement = false;
				colvarLongitude.IsNullable = true;
				colvarLongitude.IsPrimaryKey = false;
				colvarLongitude.IsForeignKey = false;
				colvarLongitude.IsReadOnly = false;
				colvarLongitude.DefaultSetting = @"";
				colvarLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitude);

				TableSchema.TableColumn colvarAccuracy = new TableSchema.TableColumn(schema);
				colvarAccuracy.ColumnName = "Accuracy";
				colvarAccuracy.DataType = DbType.Int32;
				colvarAccuracy.MaxLength = 0;
				colvarAccuracy.AutoIncrement = false;
				colvarAccuracy.IsNullable = true;
				colvarAccuracy.IsPrimaryKey = false;
				colvarAccuracy.IsForeignKey = false;
				colvarAccuracy.IsReadOnly = false;
				colvarAccuracy.DefaultSetting = @"";
				colvarAccuracy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccuracy);

				TableSchema.TableColumn colvarAddressWordDistance = new TableSchema.TableColumn(schema);
				colvarAddressWordDistance.ColumnName = "AddressWordDistance";
				colvarAddressWordDistance.DataType = DbType.Int32;
				colvarAddressWordDistance.MaxLength = 0;
				colvarAddressWordDistance.AutoIncrement = false;
				colvarAddressWordDistance.IsNullable = true;
				colvarAddressWordDistance.IsPrimaryKey = false;
				colvarAddressWordDistance.IsForeignKey = false;
				colvarAddressWordDistance.IsReadOnly = false;
				colvarAddressWordDistance.DefaultSetting = @"";
				colvarAddressWordDistance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressWordDistance);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Guid;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Guid;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AddressCoords",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AddressCoord LoadFrom(MC_AddressCoord item)
		{
			MC_AddressCoord result = new MC_AddressCoord();
			if (item.AddressID != default(long)) {
				result.LoadByKey(item.AddressID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AddressID {
			get { return GetColumnValue<long>(Columns.AddressID); }
			set {
				SetColumnValue(Columns.AddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressID));
			}
		}
		[DataMember]
		public int StatusCode {
			get { return GetColumnValue<int>(Columns.StatusCode); }
			set {
				SetColumnValue(Columns.StatusCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StatusCode));
			}
		}
		[DataMember]
		public string OurAddress {
			get { return GetColumnValue<string>(Columns.OurAddress); }
			set {
				SetColumnValue(Columns.OurAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OurAddress));
			}
		}
		[DataMember]
		public string FullAddress {
			get { return GetColumnValue<string>(Columns.FullAddress); }
			set {
				SetColumnValue(Columns.FullAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullAddress));
			}
		}
		[DataMember]
		public double? Latitude {
			get { return GetColumnValue<double?>(Columns.Latitude); }
			set {
				SetColumnValue(Columns.Latitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Latitude));
			}
		}
		[DataMember]
		public double? Longitude {
			get { return GetColumnValue<double?>(Columns.Longitude); }
			set {
				SetColumnValue(Columns.Longitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Longitude));
			}
		}
		[DataMember]
		public int? Accuracy {
			get { return GetColumnValue<int?>(Columns.Accuracy); }
			set {
				SetColumnValue(Columns.Accuracy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Accuracy));
			}
		}
		[DataMember]
		public int? AddressWordDistance {
			get { return GetColumnValue<int?>(Columns.AddressWordDistance); }
			set {
				SetColumnValue(Columns.AddressWordDistance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressWordDistance));
			}
		}
		[DataMember]
		public Guid ModifiedBy {
			get { return GetColumnValue<Guid>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public Guid CreatedBy {
			get { return GetColumnValue<Guid>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_AddressCoordStatusCode _StatusCodeValue;
		//Relationship: FK_MC_AddressCoords_MC_AddressCoordStatusCodes
		public MC_AddressCoordStatusCode StatusCodeValue
		{
			get
			{
				if(_StatusCodeValue == null) {
					_StatusCodeValue = MC_AddressCoordStatusCode.FetchByID(this.StatusCode);
				}
				return _StatusCodeValue;
			}
			set
			{
				SetColumnValue("StatusCode", value.StatusCode);
				_StatusCodeValue = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AddressID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StatusCodeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn OurAddressColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn FullAddressColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LatitudeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn LongitudeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AccuracyColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AddressWordDistanceColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddressID = @"AddressID";
			public static readonly string StatusCode = @"StatusCode";
			public static readonly string OurAddress = @"OurAddress";
			public static readonly string FullAddress = @"FullAddress";
			public static readonly string Latitude = @"Latitude";
			public static readonly string Longitude = @"Longitude";
			public static readonly string Accuracy = @"Accuracy";
			public static readonly string AddressWordDistance = @"AddressWordDistance";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddressID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_AddressCoordStatusCode class.
	/// </summary>
	[DataContract]
	public partial class MC_AddressCoordStatusCodeCollection : ActiveList<MC_AddressCoordStatusCode, MC_AddressCoordStatusCodeCollection>
	{
		public static MC_AddressCoordStatusCodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AddressCoordStatusCodeCollection result = new MC_AddressCoordStatusCodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AddressCoordStatusCode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AddressCoordStatusCodes table.
	/// </summary>
	[DataContract]
	public partial class MC_AddressCoordStatusCode : ActiveRecord<MC_AddressCoordStatusCode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AddressCoordStatusCode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AddressCoordStatusCodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarStatusCode = new TableSchema.TableColumn(schema);
				colvarStatusCode.ColumnName = "StatusCode";
				colvarStatusCode.DataType = DbType.Int32;
				colvarStatusCode.MaxLength = 0;
				colvarStatusCode.AutoIncrement = false;
				colvarStatusCode.IsNullable = false;
				colvarStatusCode.IsPrimaryKey = true;
				colvarStatusCode.IsForeignKey = false;
				colvarStatusCode.IsReadOnly = false;
				colvarStatusCode.DefaultSetting = @"";
				colvarStatusCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusCode);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 1024;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AddressCoordStatusCodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AddressCoordStatusCode LoadFrom(MC_AddressCoordStatusCode item)
		{
			MC_AddressCoordStatusCode result = new MC_AddressCoordStatusCode();
			if (item.StatusCode != default(int)) {
				result.LoadByKey(item.StatusCode);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int StatusCode {
			get { return GetColumnValue<int>(Columns.StatusCode); }
			set {
				SetColumnValue(Columns.StatusCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StatusCode));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn StatusCodeColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string StatusCode = @"StatusCode";
			public static readonly string Description = @"Description";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return StatusCode; }
		}
		*/

		#region Foreign Collections

		private MC_AddressCoordCollection _MC_AddressCoordsCol;
		//Relationship: FK_MC_AddressCoords_MC_AddressCoordStatusCodes
		public MC_AddressCoordCollection MC_AddressCoordsCol
		{
			get
			{
				if(_MC_AddressCoordsCol == null) {
					_MC_AddressCoordsCol = new MC_AddressCoordCollection();
					_MC_AddressCoordsCol.LoadAndCloseReader(MC_AddressCoord.Query()
						.WHERE(MC_AddressCoord.Columns.StatusCode, StatusCode).ExecuteReader());
				}
				return _MC_AddressCoordsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_AddressDirectionalType class.
	/// </summary>
	[DataContract]
	public partial class MC_AddressDirectionalTypeCollection : ActiveList<MC_AddressDirectionalType, MC_AddressDirectionalTypeCollection>
	{
		public static MC_AddressDirectionalTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AddressDirectionalTypeCollection result = new MC_AddressDirectionalTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AddressDirectionalType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AddressDirectionalTypes table.
	/// </summary>
	[DataContract]
	public partial class MC_AddressDirectionalType : ActiveRecord<MC_AddressDirectionalType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AddressDirectionalType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AddressDirectionalTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressDirectionalTypesID = new TableSchema.TableColumn(schema);
				colvarAddressDirectionalTypesID.ColumnName = "AddressDirectionalTypesID";
				colvarAddressDirectionalTypesID.DataType = DbType.Int32;
				colvarAddressDirectionalTypesID.MaxLength = 0;
				colvarAddressDirectionalTypesID.AutoIncrement = false;
				colvarAddressDirectionalTypesID.IsNullable = false;
				colvarAddressDirectionalTypesID.IsPrimaryKey = true;
				colvarAddressDirectionalTypesID.IsForeignKey = false;
				colvarAddressDirectionalTypesID.IsReadOnly = false;
				colvarAddressDirectionalTypesID.DefaultSetting = @"";
				colvarAddressDirectionalTypesID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressDirectionalTypesID);

				TableSchema.TableColumn colvarDirectionalCode = new TableSchema.TableColumn(schema);
				colvarDirectionalCode.ColumnName = "DirectionalCode";
				colvarDirectionalCode.DataType = DbType.String;
				colvarDirectionalCode.MaxLength = 10;
				colvarDirectionalCode.AutoIncrement = false;
				colvarDirectionalCode.IsNullable = false;
				colvarDirectionalCode.IsPrimaryKey = false;
				colvarDirectionalCode.IsForeignKey = false;
				colvarDirectionalCode.IsReadOnly = false;
				colvarDirectionalCode.DefaultSetting = @"";
				colvarDirectionalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDirectionalCode);

				TableSchema.TableColumn colvarDirectionalCombinedDescription = new TableSchema.TableColumn(schema);
				colvarDirectionalCombinedDescription.ColumnName = "DirectionalCombinedDescription";
				colvarDirectionalCombinedDescription.DataType = DbType.String;
				colvarDirectionalCombinedDescription.MaxLength = 50;
				colvarDirectionalCombinedDescription.AutoIncrement = false;
				colvarDirectionalCombinedDescription.IsNullable = false;
				colvarDirectionalCombinedDescription.IsPrimaryKey = false;
				colvarDirectionalCombinedDescription.IsForeignKey = false;
				colvarDirectionalCombinedDescription.IsReadOnly = false;
				colvarDirectionalCombinedDescription.DefaultSetting = @"";
				colvarDirectionalCombinedDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDirectionalCombinedDescription);

				TableSchema.TableColumn colvarDirectionalDescription = new TableSchema.TableColumn(schema);
				colvarDirectionalDescription.ColumnName = "DirectionalDescription";
				colvarDirectionalDescription.DataType = DbType.String;
				colvarDirectionalDescription.MaxLength = 50;
				colvarDirectionalDescription.AutoIncrement = false;
				colvarDirectionalDescription.IsNullable = false;
				colvarDirectionalDescription.IsPrimaryKey = false;
				colvarDirectionalDescription.IsForeignKey = false;
				colvarDirectionalDescription.IsReadOnly = false;
				colvarDirectionalDescription.DefaultSetting = @"";
				colvarDirectionalDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDirectionalDescription);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AddressDirectionalTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AddressDirectionalType LoadFrom(MC_AddressDirectionalType item)
		{
			MC_AddressDirectionalType result = new MC_AddressDirectionalType();
			if (item.AddressDirectionalTypesID != default(int)) {
				result.LoadByKey(item.AddressDirectionalTypesID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AddressDirectionalTypesID {
			get { return GetColumnValue<int>(Columns.AddressDirectionalTypesID); }
			set {
				SetColumnValue(Columns.AddressDirectionalTypesID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressDirectionalTypesID));
			}
		}
		[DataMember]
		public string DirectionalCode {
			get { return GetColumnValue<string>(Columns.DirectionalCode); }
			set {
				SetColumnValue(Columns.DirectionalCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DirectionalCode));
			}
		}
		[DataMember]
		public string DirectionalCombinedDescription {
			get { return GetColumnValue<string>(Columns.DirectionalCombinedDescription); }
			set {
				SetColumnValue(Columns.DirectionalCombinedDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DirectionalCombinedDescription));
			}
		}
		[DataMember]
		public string DirectionalDescription {
			get { return GetColumnValue<string>(Columns.DirectionalDescription); }
			set {
				SetColumnValue(Columns.DirectionalDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DirectionalDescription));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return DirectionalCode;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressDirectionalTypesIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DirectionalCodeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DirectionalCombinedDescriptionColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DirectionalDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddressDirectionalTypesID = @"AddressDirectionalTypesID";
			public static readonly string DirectionalCode = @"DirectionalCode";
			public static readonly string DirectionalCombinedDescription = @"DirectionalCombinedDescription";
			public static readonly string DirectionalDescription = @"DirectionalDescription";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddressDirectionalTypesID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_Address class.
	/// </summary>
	[DataContract]
	public partial class MC_AddressCollection : ActiveList<MC_Address, MC_AddressCollection>
	{
		public static MC_AddressCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AddressCollection result = new MC_AddressCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_Address item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_Addresses table.
	/// </summary>
	[DataContract]
	public partial class MC_Address : ActiveRecord<MC_Address>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_Address()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_Addresses", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressID = new TableSchema.TableColumn(schema);
				colvarAddressID.ColumnName = "AddressID";
				colvarAddressID.DataType = DbType.Int64;
				colvarAddressID.MaxLength = 0;
				colvarAddressID.AutoIncrement = true;
				colvarAddressID.IsNullable = false;
				colvarAddressID.IsPrimaryKey = true;
				colvarAddressID.IsForeignKey = false;
				colvarAddressID.IsReadOnly = false;
				colvarAddressID.DefaultSetting = @"";
				colvarAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressID);

				TableSchema.TableColumn colvarQlAddressId = new TableSchema.TableColumn(schema);
				colvarQlAddressId.ColumnName = "QlAddressId";
				colvarQlAddressId.DataType = DbType.Int64;
				colvarQlAddressId.MaxLength = 0;
				colvarQlAddressId.AutoIncrement = false;
				colvarQlAddressId.IsNullable = true;
				colvarQlAddressId.IsPrimaryKey = false;
				colvarQlAddressId.IsForeignKey = true;
				colvarQlAddressId.IsReadOnly = false;
				colvarQlAddressId.DefaultSetting = @"";
				colvarQlAddressId.ForeignKeyTableName = "QL_Address";
				schema.Columns.Add(colvarQlAddressId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"((5000))";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarValidationVendorId = new TableSchema.TableColumn(schema);
				colvarValidationVendorId.ColumnName = "ValidationVendorId";
				colvarValidationVendorId.DataType = DbType.AnsiString;
				colvarValidationVendorId.MaxLength = 20;
				colvarValidationVendorId.AutoIncrement = false;
				colvarValidationVendorId.IsNullable = false;
				colvarValidationVendorId.IsPrimaryKey = false;
				colvarValidationVendorId.IsForeignKey = true;
				colvarValidationVendorId.IsReadOnly = false;
				colvarValidationVendorId.DefaultSetting = @"('NOVENDOR')";
				colvarValidationVendorId.ForeignKeyTableName = "MC_AddressValidationVendors";
				schema.Columns.Add(colvarValidationVendorId);

				TableSchema.TableColumn colvarAddressValidationStateId = new TableSchema.TableColumn(schema);
				colvarAddressValidationStateId.ColumnName = "AddressValidationStateId";
				colvarAddressValidationStateId.DataType = DbType.AnsiString;
				colvarAddressValidationStateId.MaxLength = 5;
				colvarAddressValidationStateId.AutoIncrement = false;
				colvarAddressValidationStateId.IsNullable = false;
				colvarAddressValidationStateId.IsPrimaryKey = false;
				colvarAddressValidationStateId.IsForeignKey = true;
				colvarAddressValidationStateId.IsReadOnly = false;
				colvarAddressValidationStateId.DefaultSetting = @"('UNV')";
				colvarAddressValidationStateId.ForeignKeyTableName = "MC_AddressValidationStates";
				schema.Columns.Add(colvarAddressValidationStateId);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = true;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "MC_PoliticalStates";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = false;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = true;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"(N'USA')";
				colvarCountryId.ForeignKeyTableName = "MC_PoliticalCountrys";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarTimeZoneId = new TableSchema.TableColumn(schema);
				colvarTimeZoneId.ColumnName = "TimeZoneId";
				colvarTimeZoneId.DataType = DbType.Int32;
				colvarTimeZoneId.MaxLength = 0;
				colvarTimeZoneId.AutoIncrement = false;
				colvarTimeZoneId.IsNullable = false;
				colvarTimeZoneId.IsPrimaryKey = false;
				colvarTimeZoneId.IsForeignKey = true;
				colvarTimeZoneId.IsReadOnly = false;
				colvarTimeZoneId.DefaultSetting = @"((7))";
				colvarTimeZoneId.ForeignKeyTableName = "MC_PoliticalTimeZones";
				schema.Columns.Add(colvarTimeZoneId);

				TableSchema.TableColumn colvarAddressTypeId = new TableSchema.TableColumn(schema);
				colvarAddressTypeId.ColumnName = "AddressTypeId";
				colvarAddressTypeId.DataType = DbType.AnsiString;
				colvarAddressTypeId.MaxLength = 10;
				colvarAddressTypeId.AutoIncrement = false;
				colvarAddressTypeId.IsNullable = false;
				colvarAddressTypeId.IsPrimaryKey = false;
				colvarAddressTypeId.IsForeignKey = true;
				colvarAddressTypeId.IsReadOnly = false;
				colvarAddressTypeId.DefaultSetting = @"(N'S')";
				colvarAddressTypeId.ForeignKeyTableName = "MC_AddressTypes";
				schema.Columns.Add(colvarAddressTypeId);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = false;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarStreetNumber = new TableSchema.TableColumn(schema);
				colvarStreetNumber.ColumnName = "StreetNumber";
				colvarStreetNumber.DataType = DbType.String;
				colvarStreetNumber.MaxLength = 40;
				colvarStreetNumber.AutoIncrement = false;
				colvarStreetNumber.IsNullable = true;
				colvarStreetNumber.IsPrimaryKey = false;
				colvarStreetNumber.IsForeignKey = false;
				colvarStreetNumber.IsReadOnly = false;
				colvarStreetNumber.DefaultSetting = @"";
				colvarStreetNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetNumber);

				TableSchema.TableColumn colvarStreetName = new TableSchema.TableColumn(schema);
				colvarStreetName.ColumnName = "StreetName";
				colvarStreetName.DataType = DbType.String;
				colvarStreetName.MaxLength = 50;
				colvarStreetName.AutoIncrement = false;
				colvarStreetName.IsNullable = true;
				colvarStreetName.IsPrimaryKey = false;
				colvarStreetName.IsForeignKey = false;
				colvarStreetName.IsReadOnly = false;
				colvarStreetName.DefaultSetting = @"";
				colvarStreetName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetName);

				TableSchema.TableColumn colvarStreetType = new TableSchema.TableColumn(schema);
				colvarStreetType.ColumnName = "StreetType";
				colvarStreetType.DataType = DbType.String;
				colvarStreetType.MaxLength = 20;
				colvarStreetType.AutoIncrement = false;
				colvarStreetType.IsNullable = true;
				colvarStreetType.IsPrimaryKey = false;
				colvarStreetType.IsForeignKey = false;
				colvarStreetType.IsReadOnly = false;
				colvarStreetType.DefaultSetting = @"";
				colvarStreetType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetType);

				TableSchema.TableColumn colvarPreDirectional = new TableSchema.TableColumn(schema);
				colvarPreDirectional.ColumnName = "PreDirectional";
				colvarPreDirectional.DataType = DbType.String;
				colvarPreDirectional.MaxLength = 20;
				colvarPreDirectional.AutoIncrement = false;
				colvarPreDirectional.IsNullable = true;
				colvarPreDirectional.IsPrimaryKey = false;
				colvarPreDirectional.IsForeignKey = false;
				colvarPreDirectional.IsReadOnly = false;
				colvarPreDirectional.DefaultSetting = @"";
				colvarPreDirectional.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreDirectional);

				TableSchema.TableColumn colvarPostDirectional = new TableSchema.TableColumn(schema);
				colvarPostDirectional.ColumnName = "PostDirectional";
				colvarPostDirectional.DataType = DbType.String;
				colvarPostDirectional.MaxLength = 20;
				colvarPostDirectional.AutoIncrement = false;
				colvarPostDirectional.IsNullable = true;
				colvarPostDirectional.IsPrimaryKey = false;
				colvarPostDirectional.IsForeignKey = false;
				colvarPostDirectional.IsReadOnly = false;
				colvarPostDirectional.DefaultSetting = @"";
				colvarPostDirectional.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostDirectional);

				TableSchema.TableColumn colvarExtension = new TableSchema.TableColumn(schema);
				colvarExtension.ColumnName = "Extension";
				colvarExtension.DataType = DbType.String;
				colvarExtension.MaxLength = 50;
				colvarExtension.AutoIncrement = false;
				colvarExtension.IsNullable = true;
				colvarExtension.IsPrimaryKey = false;
				colvarExtension.IsForeignKey = false;
				colvarExtension.IsReadOnly = false;
				colvarExtension.DefaultSetting = @"";
				colvarExtension.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtension);

				TableSchema.TableColumn colvarExtensionNumber = new TableSchema.TableColumn(schema);
				colvarExtensionNumber.ColumnName = "ExtensionNumber";
				colvarExtensionNumber.DataType = DbType.String;
				colvarExtensionNumber.MaxLength = 50;
				colvarExtensionNumber.AutoIncrement = false;
				colvarExtensionNumber.IsNullable = true;
				colvarExtensionNumber.IsPrimaryKey = false;
				colvarExtensionNumber.IsForeignKey = false;
				colvarExtensionNumber.IsReadOnly = false;
				colvarExtensionNumber.DefaultSetting = @"";
				colvarExtensionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtensionNumber);

				TableSchema.TableColumn colvarCounty = new TableSchema.TableColumn(schema);
				colvarCounty.ColumnName = "County";
				colvarCounty.DataType = DbType.String;
				colvarCounty.MaxLength = 50;
				colvarCounty.AutoIncrement = false;
				colvarCounty.IsNullable = true;
				colvarCounty.IsPrimaryKey = false;
				colvarCounty.IsForeignKey = false;
				colvarCounty.IsReadOnly = false;
				colvarCounty.DefaultSetting = @"";
				colvarCounty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCounty);

				TableSchema.TableColumn colvarCountyCode = new TableSchema.TableColumn(schema);
				colvarCountyCode.ColumnName = "CountyCode";
				colvarCountyCode.DataType = DbType.String;
				colvarCountyCode.MaxLength = 6;
				colvarCountyCode.AutoIncrement = false;
				colvarCountyCode.IsNullable = true;
				colvarCountyCode.IsPrimaryKey = false;
				colvarCountyCode.IsForeignKey = false;
				colvarCountyCode.IsReadOnly = false;
				colvarCountyCode.DefaultSetting = @"";
				colvarCountyCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountyCode);

				TableSchema.TableColumn colvarUrbanization = new TableSchema.TableColumn(schema);
				colvarUrbanization.ColumnName = "Urbanization";
				colvarUrbanization.DataType = DbType.String;
				colvarUrbanization.MaxLength = 50;
				colvarUrbanization.AutoIncrement = false;
				colvarUrbanization.IsNullable = true;
				colvarUrbanization.IsPrimaryKey = false;
				colvarUrbanization.IsForeignKey = false;
				colvarUrbanization.IsReadOnly = false;
				colvarUrbanization.DefaultSetting = @"";
				colvarUrbanization.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUrbanization);

				TableSchema.TableColumn colvarUrbanizationCode = new TableSchema.TableColumn(schema);
				colvarUrbanizationCode.ColumnName = "UrbanizationCode";
				colvarUrbanizationCode.DataType = DbType.String;
				colvarUrbanizationCode.MaxLength = 3;
				colvarUrbanizationCode.AutoIncrement = false;
				colvarUrbanizationCode.IsNullable = true;
				colvarUrbanizationCode.IsPrimaryKey = false;
				colvarUrbanizationCode.IsForeignKey = false;
				colvarUrbanizationCode.IsReadOnly = false;
				colvarUrbanizationCode.DefaultSetting = @"";
				colvarUrbanizationCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUrbanizationCode);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.AnsiString;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarPlusFour = new TableSchema.TableColumn(schema);
				colvarPlusFour.ColumnName = "PlusFour";
				colvarPlusFour.DataType = DbType.AnsiString;
				colvarPlusFour.MaxLength = 4;
				colvarPlusFour.AutoIncrement = false;
				colvarPlusFour.IsNullable = true;
				colvarPlusFour.IsPrimaryKey = false;
				colvarPlusFour.IsForeignKey = false;
				colvarPlusFour.IsReadOnly = false;
				colvarPlusFour.DefaultSetting = @"";
				colvarPlusFour.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlusFour);

				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "Phone";
				colvarPhone.DataType = DbType.AnsiString;
				colvarPhone.MaxLength = 20;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = true;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				colvarPhone.DefaultSetting = @"";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);

				TableSchema.TableColumn colvarDeliveryPoint = new TableSchema.TableColumn(schema);
				colvarDeliveryPoint.ColumnName = "DeliveryPoint";
				colvarDeliveryPoint.DataType = DbType.AnsiString;
				colvarDeliveryPoint.MaxLength = 2;
				colvarDeliveryPoint.AutoIncrement = false;
				colvarDeliveryPoint.IsNullable = true;
				colvarDeliveryPoint.IsPrimaryKey = false;
				colvarDeliveryPoint.IsForeignKey = false;
				colvarDeliveryPoint.IsReadOnly = false;
				colvarDeliveryPoint.DefaultSetting = @"";
				colvarDeliveryPoint.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryPoint);

				TableSchema.TableColumn colvarCrossStreet = new TableSchema.TableColumn(schema);
				colvarCrossStreet.ColumnName = "CrossStreet";
				colvarCrossStreet.DataType = DbType.AnsiString;
				colvarCrossStreet.MaxLength = 50;
				colvarCrossStreet.AutoIncrement = false;
				colvarCrossStreet.IsNullable = true;
				colvarCrossStreet.IsPrimaryKey = false;
				colvarCrossStreet.IsForeignKey = false;
				colvarCrossStreet.IsReadOnly = false;
				colvarCrossStreet.DefaultSetting = @"";
				colvarCrossStreet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCrossStreet);

				TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
				colvarLatitude.ColumnName = "Latitude";
				colvarLatitude.DataType = DbType.Double;
				colvarLatitude.MaxLength = 0;
				colvarLatitude.AutoIncrement = false;
				colvarLatitude.IsNullable = false;
				colvarLatitude.IsPrimaryKey = false;
				colvarLatitude.IsForeignKey = false;
				colvarLatitude.IsReadOnly = false;
				colvarLatitude.DefaultSetting = @"((0))";
				colvarLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitude);

				TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
				colvarLongitude.ColumnName = "Longitude";
				colvarLongitude.DataType = DbType.Double;
				colvarLongitude.MaxLength = 0;
				colvarLongitude.AutoIncrement = false;
				colvarLongitude.IsNullable = false;
				colvarLongitude.IsPrimaryKey = false;
				colvarLongitude.IsForeignKey = false;
				colvarLongitude.IsReadOnly = false;
				colvarLongitude.DefaultSetting = @"((0))";
				colvarLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitude);

				TableSchema.TableColumn colvarCongressionalDistric = new TableSchema.TableColumn(schema);
				colvarCongressionalDistric.ColumnName = "CongressionalDistric";
				colvarCongressionalDistric.DataType = DbType.Int32;
				colvarCongressionalDistric.MaxLength = 0;
				colvarCongressionalDistric.AutoIncrement = false;
				colvarCongressionalDistric.IsNullable = true;
				colvarCongressionalDistric.IsPrimaryKey = false;
				colvarCongressionalDistric.IsForeignKey = false;
				colvarCongressionalDistric.IsReadOnly = false;
				colvarCongressionalDistric.DefaultSetting = @"";
				colvarCongressionalDistric.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCongressionalDistric);

				TableSchema.TableColumn colvarDPV = new TableSchema.TableColumn(schema);
				colvarDPV.ColumnName = "DPV";
				colvarDPV.DataType = DbType.Boolean;
				colvarDPV.MaxLength = 0;
				colvarDPV.AutoIncrement = false;
				colvarDPV.IsNullable = false;
				colvarDPV.IsPrimaryKey = false;
				colvarDPV.IsForeignKey = false;
				colvarDPV.IsReadOnly = false;
				colvarDPV.DefaultSetting = @"((0))";
				colvarDPV.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDPV);

				TableSchema.TableColumn colvarDPVResponse = new TableSchema.TableColumn(schema);
				colvarDPVResponse.ColumnName = "DPVResponse";
				colvarDPVResponse.DataType = DbType.AnsiStringFixedLength;
				colvarDPVResponse.MaxLength = 10;
				colvarDPVResponse.AutoIncrement = false;
				colvarDPVResponse.IsNullable = true;
				colvarDPVResponse.IsPrimaryKey = false;
				colvarDPVResponse.IsForeignKey = false;
				colvarDPVResponse.IsReadOnly = false;
				colvarDPVResponse.DefaultSetting = @"";
				colvarDPVResponse.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDPVResponse);

				TableSchema.TableColumn colvarDPVFootNote = new TableSchema.TableColumn(schema);
				colvarDPVFootNote.ColumnName = "DPVFootNote";
				colvarDPVFootNote.DataType = DbType.AnsiString;
				colvarDPVFootNote.MaxLength = 50;
				colvarDPVFootNote.AutoIncrement = false;
				colvarDPVFootNote.IsNullable = true;
				colvarDPVFootNote.IsPrimaryKey = false;
				colvarDPVFootNote.IsForeignKey = false;
				colvarDPVFootNote.IsReadOnly = false;
				colvarDPVFootNote.DefaultSetting = @"";
				colvarDPVFootNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDPVFootNote);

				TableSchema.TableColumn colvarCarrierRoute = new TableSchema.TableColumn(schema);
				colvarCarrierRoute.ColumnName = "CarrierRoute";
				colvarCarrierRoute.DataType = DbType.AnsiString;
				colvarCarrierRoute.MaxLength = 50;
				colvarCarrierRoute.AutoIncrement = false;
				colvarCarrierRoute.IsNullable = true;
				colvarCarrierRoute.IsPrimaryKey = false;
				colvarCarrierRoute.IsForeignKey = false;
				colvarCarrierRoute.IsReadOnly = false;
				colvarCarrierRoute.DefaultSetting = @"";
				colvarCarrierRoute.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCarrierRoute);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_Addresses",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_Address LoadFrom(MC_Address item)
		{
			MC_Address result = new MC_Address();
			if (item.AddressID != default(long)) {
				result.LoadByKey(item.AddressID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AddressID {
			get { return GetColumnValue<long>(Columns.AddressID); }
			set {
				SetColumnValue(Columns.AddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressID));
			}
		}
		[DataMember]
		public long? QlAddressId {
			get { return GetColumnValue<long?>(Columns.QlAddressId); }
			set {
				SetColumnValue(Columns.QlAddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QlAddressId));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string ValidationVendorId {
			get { return GetColumnValue<string>(Columns.ValidationVendorId); }
			set {
				SetColumnValue(Columns.ValidationVendorId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ValidationVendorId));
			}
		}
		[DataMember]
		public string AddressValidationStateId {
			get { return GetColumnValue<string>(Columns.AddressValidationStateId); }
			set {
				SetColumnValue(Columns.AddressValidationStateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressValidationStateId));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set {
				SetColumnValue(Columns.CountryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryId));
			}
		}
		[DataMember]
		public int TimeZoneId {
			get { return GetColumnValue<int>(Columns.TimeZoneId); }
			set {
				SetColumnValue(Columns.TimeZoneId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneId));
			}
		}
		[DataMember]
		public string AddressTypeId {
			get { return GetColumnValue<string>(Columns.AddressTypeId); }
			set {
				SetColumnValue(Columns.AddressTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressTypeId));
			}
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set {
				SetColumnValue(Columns.StreetAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress));
			}
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set {
				SetColumnValue(Columns.StreetAddress2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress2));
			}
		}
		[DataMember]
		public string StreetNumber {
			get { return GetColumnValue<string>(Columns.StreetNumber); }
			set {
				SetColumnValue(Columns.StreetNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetNumber));
			}
		}
		[DataMember]
		public string StreetName {
			get { return GetColumnValue<string>(Columns.StreetName); }
			set {
				SetColumnValue(Columns.StreetName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetName));
			}
		}
		[DataMember]
		public string StreetType {
			get { return GetColumnValue<string>(Columns.StreetType); }
			set {
				SetColumnValue(Columns.StreetType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetType));
			}
		}
		[DataMember]
		public string PreDirectional {
			get { return GetColumnValue<string>(Columns.PreDirectional); }
			set {
				SetColumnValue(Columns.PreDirectional, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreDirectional));
			}
		}
		[DataMember]
		public string PostDirectional {
			get { return GetColumnValue<string>(Columns.PostDirectional); }
			set {
				SetColumnValue(Columns.PostDirectional, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostDirectional));
			}
		}
		[DataMember]
		public string Extension {
			get { return GetColumnValue<string>(Columns.Extension); }
			set {
				SetColumnValue(Columns.Extension, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Extension));
			}
		}
		[DataMember]
		public string ExtensionNumber {
			get { return GetColumnValue<string>(Columns.ExtensionNumber); }
			set {
				SetColumnValue(Columns.ExtensionNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExtensionNumber));
			}
		}
		[DataMember]
		public string County {
			get { return GetColumnValue<string>(Columns.County); }
			set {
				SetColumnValue(Columns.County, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.County));
			}
		}
		[DataMember]
		public string CountyCode {
			get { return GetColumnValue<string>(Columns.CountyCode); }
			set {
				SetColumnValue(Columns.CountyCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountyCode));
			}
		}
		[DataMember]
		public string Urbanization {
			get { return GetColumnValue<string>(Columns.Urbanization); }
			set {
				SetColumnValue(Columns.Urbanization, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Urbanization));
			}
		}
		[DataMember]
		public string UrbanizationCode {
			get { return GetColumnValue<string>(Columns.UrbanizationCode); }
			set {
				SetColumnValue(Columns.UrbanizationCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UrbanizationCode));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set {
				SetColumnValue(Columns.PostalCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostalCode));
			}
		}
		[DataMember]
		public string PlusFour {
			get { return GetColumnValue<string>(Columns.PlusFour); }
			set {
				SetColumnValue(Columns.PlusFour, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PlusFour));
			}
		}
		[DataMember]
		public string Phone {
			get { return GetColumnValue<string>(Columns.Phone); }
			set {
				SetColumnValue(Columns.Phone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone));
			}
		}
		[DataMember]
		public string DeliveryPoint {
			get { return GetColumnValue<string>(Columns.DeliveryPoint); }
			set {
				SetColumnValue(Columns.DeliveryPoint, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DeliveryPoint));
			}
		}
		[DataMember]
		public string CrossStreet {
			get { return GetColumnValue<string>(Columns.CrossStreet); }
			set {
				SetColumnValue(Columns.CrossStreet, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CrossStreet));
			}
		}
		[DataMember]
		public double Latitude {
			get { return GetColumnValue<double>(Columns.Latitude); }
			set {
				SetColumnValue(Columns.Latitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Latitude));
			}
		}
		[DataMember]
		public double Longitude {
			get { return GetColumnValue<double>(Columns.Longitude); }
			set {
				SetColumnValue(Columns.Longitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Longitude));
			}
		}
		[DataMember]
		public int? CongressionalDistric {
			get { return GetColumnValue<int?>(Columns.CongressionalDistric); }
			set {
				SetColumnValue(Columns.CongressionalDistric, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CongressionalDistric));
			}
		}
		[DataMember]
		public bool DPV {
			get { return GetColumnValue<bool>(Columns.DPV); }
			set {
				SetColumnValue(Columns.DPV, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DPV));
			}
		}
		[DataMember]
		public string DPVResponse {
			get { return GetColumnValue<string>(Columns.DPVResponse); }
			set {
				SetColumnValue(Columns.DPVResponse, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DPVResponse));
			}
		}
		[DataMember]
		public string DPVFootNote {
			get { return GetColumnValue<string>(Columns.DPVFootNote); }
			set {
				SetColumnValue(Columns.DPVFootNote, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DPVFootNote));
			}
		}
		[DataMember]
		public string CarrierRoute {
			get { return GetColumnValue<string>(Columns.CarrierRoute); }
			set {
				SetColumnValue(Columns.CarrierRoute, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CarrierRoute));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_AddressValidationState _AddressValidationState;
		//Relationship: FK_MC_Addresses_MC_AddressValidationStates
		public MC_AddressValidationState AddressValidationState
		{
			get
			{
				if(_AddressValidationState == null) {
					_AddressValidationState = MC_AddressValidationState.FetchByID(this.AddressValidationStateId);
				}
				return _AddressValidationState;
			}
			set
			{
				SetColumnValue("AddressValidationStateId", value.AddressValidationStateID);
				_AddressValidationState = value;
			}
		}

		private QL_Address _QlAddress;
		//Relationship: FK_MC_Addresses_QL_Address
		public QL_Address QlAddress
		{
			get
			{
				if(_QlAddress == null) {
					_QlAddress = QL_Address.FetchByID(this.QlAddressId);
				}
				return _QlAddress;
			}
			set
			{
				SetColumnValue("QlAddressId", value.AddressID);
				_QlAddress = value;
			}
		}

		private MC_AddressType _AddressType;
		//Relationship: FK_MC_Addresss_MC_AddressTypes
		public MC_AddressType AddressType
		{
			get
			{
				if(_AddressType == null) {
					_AddressType = MC_AddressType.FetchByID(this.AddressTypeId);
				}
				return _AddressType;
			}
			set
			{
				SetColumnValue("AddressTypeId", value.AddressTypeID);
				_AddressType = value;
			}
		}

		private MC_AddressValidationVendor _ValidationVendor;
		//Relationship: FK_MC_Addresss_MC_AddressValidationVendors
		public MC_AddressValidationVendor ValidationVendor
		{
			get
			{
				if(_ValidationVendor == null) {
					_ValidationVendor = MC_AddressValidationVendor.FetchByID(this.ValidationVendorId);
				}
				return _ValidationVendor;
			}
			set
			{
				SetColumnValue("ValidationVendorId", value.ValidationVendorID);
				_ValidationVendor = value;
			}
		}

		private MC_PoliticalCountry _Country;
		//Relationship: FK_MC_Addresss_MC_PoliticalCountrys
		public MC_PoliticalCountry Country
		{
			get
			{
				if(_Country == null) {
					_Country = MC_PoliticalCountry.FetchByID(this.CountryId);
				}
				return _Country;
			}
			set
			{
				SetColumnValue("CountryId", value.CountryID);
				_Country = value;
			}
		}

		private MC_PoliticalState _State;
		//Relationship: FK_MC_Addresss_MC_PoliticalStates
		public MC_PoliticalState State
		{
			get
			{
				if(_State == null) {
					_State = MC_PoliticalState.FetchByID(this.StateId);
				}
				return _State;
			}
			set
			{
				SetColumnValue("StateId", value.StateID);
				_State = value;
			}
		}

		private MC_PoliticalTimeZone _TimeZone;
		//Relationship: FK_MC_Addresss_MC_PoliticalTimeZones
		public MC_PoliticalTimeZone TimeZone
		{
			get
			{
				if(_TimeZone == null) {
					_TimeZone = MC_PoliticalTimeZone.FetchByID(this.TimeZoneId);
				}
				return _TimeZone;
			}
			set
			{
				SetColumnValue("TimeZoneId", value.TimeZoneID);
				_TimeZone = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AddressID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn QlAddressIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ValidationVendorIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AddressValidationStateIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn TimeZoneIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn AddressTypeIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn StreetNumberColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn StreetNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn StreetTypeColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PreDirectionalColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PostDirectionalColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ExtensionColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ExtensionNumberColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn CountyColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn CountyCodeColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn UrbanizationColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn UrbanizationCodeColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn PlusFourColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn PhoneColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn DeliveryPointColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn CrossStreetColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn LatitudeColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn LongitudeColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn CongressionalDistricColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn DPVColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn DPVResponseColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn DPVFootNoteColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn CarrierRouteColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[40]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddressID = @"AddressID";
			public static readonly string QlAddressId = @"QlAddressId";
			public static readonly string DealerId = @"DealerId";
			public static readonly string ValidationVendorId = @"ValidationVendorId";
			public static readonly string AddressValidationStateId = @"AddressValidationStateId";
			public static readonly string StateId = @"StateId";
			public static readonly string CountryId = @"CountryId";
			public static readonly string TimeZoneId = @"TimeZoneId";
			public static readonly string AddressTypeId = @"AddressTypeId";
			public static readonly string StreetAddress = @"StreetAddress";
			public static readonly string StreetAddress2 = @"StreetAddress2";
			public static readonly string StreetNumber = @"StreetNumber";
			public static readonly string StreetName = @"StreetName";
			public static readonly string StreetType = @"StreetType";
			public static readonly string PreDirectional = @"PreDirectional";
			public static readonly string PostDirectional = @"PostDirectional";
			public static readonly string Extension = @"Extension";
			public static readonly string ExtensionNumber = @"ExtensionNumber";
			public static readonly string County = @"County";
			public static readonly string CountyCode = @"CountyCode";
			public static readonly string Urbanization = @"Urbanization";
			public static readonly string UrbanizationCode = @"UrbanizationCode";
			public static readonly string City = @"City";
			public static readonly string PostalCode = @"PostalCode";
			public static readonly string PlusFour = @"PlusFour";
			public static readonly string Phone = @"Phone";
			public static readonly string DeliveryPoint = @"DeliveryPoint";
			public static readonly string CrossStreet = @"CrossStreet";
			public static readonly string Latitude = @"Latitude";
			public static readonly string Longitude = @"Longitude";
			public static readonly string CongressionalDistric = @"CongressionalDistric";
			public static readonly string DPV = @"DPV";
			public static readonly string DPVResponse = @"DPVResponse";
			public static readonly string DPVFootNote = @"DPVFootNote";
			public static readonly string CarrierRoute = @"CarrierRoute";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddressID; }
		}
		*/

		#region Foreign Collections

		private AE_CustomerAddressCollection _AE_CustomerAddressesCol;
		//Relationship: FK_AE_CustomerAddress_MC_Addresses
		public AE_CustomerAddressCollection AE_CustomerAddressesCol
		{
			get
			{
				if(_AE_CustomerAddressesCol == null) {
					_AE_CustomerAddressesCol = new AE_CustomerAddressCollection();
					_AE_CustomerAddressesCol.LoadAndCloseReader(AE_CustomerAddress.Query()
						.WHERE(AE_CustomerAddress.Columns.AddressId, AddressID).ExecuteReader());
				}
				return _AE_CustomerAddressesCol;
			}
		}

		private AE_CustomerCollection _AE_CustomersCol;
		//Relationship: FK_AE_Customers_MC_Addresss
		public AE_CustomerCollection AE_CustomersCol
		{
			get
			{
				if(_AE_CustomersCol == null) {
					_AE_CustomersCol = new AE_CustomerCollection();
					_AE_CustomersCol.LoadAndCloseReader(AE_Customer.Query()
						.WHERE(AE_Customer.Columns.AddressId, AddressID).ExecuteReader());
				}
				return _AE_CustomersCol;
			}
		}

		private MC_AccountAddressCollection _MC_AccountAddressesCol;
		//Relationship: FK_MC_AccountAddresses_MC_Addresss
		public MC_AccountAddressCollection MC_AccountAddressesCol
		{
			get
			{
				if(_MC_AccountAddressesCol == null) {
					_MC_AccountAddressesCol = new MC_AccountAddressCollection();
					_MC_AccountAddressesCol.LoadAndCloseReader(MC_AccountAddress.Query()
						.WHERE(MC_AccountAddress.Columns.AddressId, AddressID).ExecuteReader());
				}
				return _MC_AccountAddressesCol;
			}
		}

		private MC_AccountCollection _MC_AccountsCol;
		//Relationship: FK_MC_Accounts_MC_Addresses
		public MC_AccountCollection MC_AccountsCol
		{
			get
			{
				if(_MC_AccountsCol == null) {
					_MC_AccountsCol = new MC_AccountCollection();
					_MC_AccountsCol.LoadAndCloseReader(MC_Account.Query()
						.WHERE(MC_Account.Columns.ShipAddressId, AddressID).ExecuteReader());
				}
				return _MC_AccountsCol;
			}
		}

		private MS_AccountCollection _MS_AccountsCol;
		//Relationship: FK_MS_Accounts_MC_Addresses
		public MS_AccountCollection MS_AccountsCol
		{
			get
			{
				if(_MS_AccountsCol == null) {
					_MS_AccountsCol = new MS_AccountCollection();
					_MS_AccountsCol.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.PremiseAddressId, AddressID).ExecuteReader());
				}
				return _MS_AccountsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_AddressStreetType class.
	/// </summary>
	[DataContract]
	public partial class MC_AddressStreetTypeCollection : ActiveList<MC_AddressStreetType, MC_AddressStreetTypeCollection>
	{
		public static MC_AddressStreetTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AddressStreetTypeCollection result = new MC_AddressStreetTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AddressStreetType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AddressStreetTypes table.
	/// </summary>
	[DataContract]
	public partial class MC_AddressStreetType : ActiveRecord<MC_AddressStreetType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AddressStreetType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AddressStreetTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressStreetTypesID = new TableSchema.TableColumn(schema);
				colvarAddressStreetTypesID.ColumnName = "AddressStreetTypesID";
				colvarAddressStreetTypesID.DataType = DbType.Int32;
				colvarAddressStreetTypesID.MaxLength = 0;
				colvarAddressStreetTypesID.AutoIncrement = false;
				colvarAddressStreetTypesID.IsNullable = false;
				colvarAddressStreetTypesID.IsPrimaryKey = true;
				colvarAddressStreetTypesID.IsForeignKey = false;
				colvarAddressStreetTypesID.IsReadOnly = false;
				colvarAddressStreetTypesID.DefaultSetting = @"";
				colvarAddressStreetTypesID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressStreetTypesID);

				TableSchema.TableColumn colvarAddressStreetTypeCode = new TableSchema.TableColumn(schema);
				colvarAddressStreetTypeCode.ColumnName = "AddressStreetTypeCode";
				colvarAddressStreetTypeCode.DataType = DbType.String;
				colvarAddressStreetTypeCode.MaxLength = 10;
				colvarAddressStreetTypeCode.AutoIncrement = false;
				colvarAddressStreetTypeCode.IsNullable = false;
				colvarAddressStreetTypeCode.IsPrimaryKey = false;
				colvarAddressStreetTypeCode.IsForeignKey = false;
				colvarAddressStreetTypeCode.IsReadOnly = false;
				colvarAddressStreetTypeCode.DefaultSetting = @"";
				colvarAddressStreetTypeCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressStreetTypeCode);

				TableSchema.TableColumn colvarAddressStreetTypeCombinedDescription = new TableSchema.TableColumn(schema);
				colvarAddressStreetTypeCombinedDescription.ColumnName = "AddressStreetTypeCombinedDescription";
				colvarAddressStreetTypeCombinedDescription.DataType = DbType.String;
				colvarAddressStreetTypeCombinedDescription.MaxLength = 50;
				colvarAddressStreetTypeCombinedDescription.AutoIncrement = false;
				colvarAddressStreetTypeCombinedDescription.IsNullable = false;
				colvarAddressStreetTypeCombinedDescription.IsPrimaryKey = false;
				colvarAddressStreetTypeCombinedDescription.IsForeignKey = false;
				colvarAddressStreetTypeCombinedDescription.IsReadOnly = false;
				colvarAddressStreetTypeCombinedDescription.DefaultSetting = @"";
				colvarAddressStreetTypeCombinedDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressStreetTypeCombinedDescription);

				TableSchema.TableColumn colvarAddressStreetTypeDescription = new TableSchema.TableColumn(schema);
				colvarAddressStreetTypeDescription.ColumnName = "AddressStreetTypeDescription";
				colvarAddressStreetTypeDescription.DataType = DbType.String;
				colvarAddressStreetTypeDescription.MaxLength = 50;
				colvarAddressStreetTypeDescription.AutoIncrement = false;
				colvarAddressStreetTypeDescription.IsNullable = false;
				colvarAddressStreetTypeDescription.IsPrimaryKey = false;
				colvarAddressStreetTypeDescription.IsForeignKey = false;
				colvarAddressStreetTypeDescription.IsReadOnly = false;
				colvarAddressStreetTypeDescription.DefaultSetting = @"";
				colvarAddressStreetTypeDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressStreetTypeDescription);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AddressStreetTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AddressStreetType LoadFrom(MC_AddressStreetType item)
		{
			MC_AddressStreetType result = new MC_AddressStreetType();
			if (item.AddressStreetTypesID != default(int)) {
				result.LoadByKey(item.AddressStreetTypesID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AddressStreetTypesID {
			get { return GetColumnValue<int>(Columns.AddressStreetTypesID); }
			set {
				SetColumnValue(Columns.AddressStreetTypesID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressStreetTypesID));
			}
		}
		[DataMember]
		public string AddressStreetTypeCode {
			get { return GetColumnValue<string>(Columns.AddressStreetTypeCode); }
			set {
				SetColumnValue(Columns.AddressStreetTypeCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressStreetTypeCode));
			}
		}
		[DataMember]
		public string AddressStreetTypeCombinedDescription {
			get { return GetColumnValue<string>(Columns.AddressStreetTypeCombinedDescription); }
			set {
				SetColumnValue(Columns.AddressStreetTypeCombinedDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressStreetTypeCombinedDescription));
			}
		}
		[DataMember]
		public string AddressStreetTypeDescription {
			get { return GetColumnValue<string>(Columns.AddressStreetTypeDescription); }
			set {
				SetColumnValue(Columns.AddressStreetTypeDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressStreetTypeDescription));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AddressStreetTypeCode;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressStreetTypesIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AddressStreetTypeCodeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AddressStreetTypeCombinedDescriptionColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AddressStreetTypeDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddressStreetTypesID = @"AddressStreetTypesID";
			public static readonly string AddressStreetTypeCode = @"AddressStreetTypeCode";
			public static readonly string AddressStreetTypeCombinedDescription = @"AddressStreetTypeCombinedDescription";
			public static readonly string AddressStreetTypeDescription = @"AddressStreetTypeDescription";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddressStreetTypesID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_AddressType class.
	/// </summary>
	[DataContract]
	public partial class MC_AddressTypeCollection : ActiveList<MC_AddressType, MC_AddressTypeCollection>
	{
		public static MC_AddressTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AddressTypeCollection result = new MC_AddressTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AddressType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AddressTypes table.
	/// </summary>
	[DataContract]
	public partial class MC_AddressType : ActiveRecord<MC_AddressType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Non_StandardID = "N";
			[EnumMember()] public const string Standard_AddressID = "S";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AddressType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AddressTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressTypeID = new TableSchema.TableColumn(schema);
				colvarAddressTypeID.ColumnName = "AddressTypeID";
				colvarAddressTypeID.DataType = DbType.AnsiString;
				colvarAddressTypeID.MaxLength = 10;
				colvarAddressTypeID.AutoIncrement = false;
				colvarAddressTypeID.IsNullable = false;
				colvarAddressTypeID.IsPrimaryKey = true;
				colvarAddressTypeID.IsForeignKey = false;
				colvarAddressTypeID.IsReadOnly = false;
				colvarAddressTypeID.DefaultSetting = @"";
				colvarAddressTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressTypeID);

				TableSchema.TableColumn colvarAddressTypeName = new TableSchema.TableColumn(schema);
				colvarAddressTypeName.ColumnName = "AddressTypeName";
				colvarAddressTypeName.DataType = DbType.String;
				colvarAddressTypeName.MaxLength = 50;
				colvarAddressTypeName.AutoIncrement = false;
				colvarAddressTypeName.IsNullable = false;
				colvarAddressTypeName.IsPrimaryKey = false;
				colvarAddressTypeName.IsForeignKey = false;
				colvarAddressTypeName.IsReadOnly = false;
				colvarAddressTypeName.DefaultSetting = @"";
				colvarAddressTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressTypeName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AddressTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AddressType LoadFrom(MC_AddressType item)
		{
			MC_AddressType result = new MC_AddressType();
			if (item.AddressTypeID != default(string)) {
				result.LoadByKey(item.AddressTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AddressTypeID {
			get { return GetColumnValue<string>(Columns.AddressTypeID); }
			set {
				SetColumnValue(Columns.AddressTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressTypeID));
			}
		}
		[DataMember]
		public string AddressTypeName {
			get { return GetColumnValue<string>(Columns.AddressTypeName); }
			set {
				SetColumnValue(Columns.AddressTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressTypeName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AddressTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AddressTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddressTypeID = @"AddressTypeID";
			public static readonly string AddressTypeName = @"AddressTypeName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddressTypeID; }
		}
		*/

		#region Foreign Collections

		private MC_AddressCollection _MC_AddressesCol;
		//Relationship: FK_MC_Addresss_MC_AddressTypes
		public MC_AddressCollection MC_AddressesCol
		{
			get
			{
				if(_MC_AddressesCol == null) {
					_MC_AddressesCol = new MC_AddressCollection();
					_MC_AddressesCol.LoadAndCloseReader(MC_Address.Query()
						.WHERE(MC_Address.Columns.AddressTypeId, AddressTypeID).ExecuteReader());
				}
				return _MC_AddressesCol;
			}
		}

		private QL_AddressCollection _QL_AddressesCol;
		//Relationship: FK_QL_Address_MC_AddressTypes
		public QL_AddressCollection QL_AddressesCol
		{
			get
			{
				if(_QL_AddressesCol == null) {
					_QL_AddressesCol = new QL_AddressCollection();
					_QL_AddressesCol.LoadAndCloseReader(QL_Address.Query()
						.WHERE(QL_Address.Columns.AddressTypeId, AddressTypeID).ExecuteReader());
				}
				return _QL_AddressesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_AddressValidationState class.
	/// </summary>
	[DataContract]
	public partial class MC_AddressValidationStateCollection : ActiveList<MC_AddressValidationState, MC_AddressValidationStateCollection>
	{
		public static MC_AddressValidationStateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AddressValidationStateCollection result = new MC_AddressValidationStateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AddressValidationState item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AddressValidationStates table.
	/// </summary>
	[DataContract]
	public partial class MC_AddressValidationState : ActiveRecord<MC_AddressValidationState>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Failed_VerificationID = "FVER";
			[EnumMember()] public const string Manager_BypassedID = "MABP";
			[EnumMember()] public const string Manual_VerifiedID = "MAN";
			[EnumMember()] public const string UnverifiedID = "UNV";
			[EnumMember()] public const string VerifiedID = "VER";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AddressValidationState()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AddressValidationStates", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressValidationStateID = new TableSchema.TableColumn(schema);
				colvarAddressValidationStateID.ColumnName = "AddressValidationStateID";
				colvarAddressValidationStateID.DataType = DbType.AnsiString;
				colvarAddressValidationStateID.MaxLength = 5;
				colvarAddressValidationStateID.AutoIncrement = false;
				colvarAddressValidationStateID.IsNullable = false;
				colvarAddressValidationStateID.IsPrimaryKey = true;
				colvarAddressValidationStateID.IsForeignKey = false;
				colvarAddressValidationStateID.IsReadOnly = false;
				colvarAddressValidationStateID.DefaultSetting = @"";
				colvarAddressValidationStateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressValidationStateID);

				TableSchema.TableColumn colvarAddressValidationStateName = new TableSchema.TableColumn(schema);
				colvarAddressValidationStateName.ColumnName = "AddressValidationStateName";
				colvarAddressValidationStateName.DataType = DbType.AnsiString;
				colvarAddressValidationStateName.MaxLength = 50;
				colvarAddressValidationStateName.AutoIncrement = false;
				colvarAddressValidationStateName.IsNullable = false;
				colvarAddressValidationStateName.IsPrimaryKey = false;
				colvarAddressValidationStateName.IsForeignKey = false;
				colvarAddressValidationStateName.IsReadOnly = false;
				colvarAddressValidationStateName.DefaultSetting = @"";
				colvarAddressValidationStateName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressValidationStateName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AddressValidationStates",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AddressValidationState LoadFrom(MC_AddressValidationState item)
		{
			MC_AddressValidationState result = new MC_AddressValidationState();
			if (item.AddressValidationStateID != default(string)) {
				result.LoadByKey(item.AddressValidationStateID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AddressValidationStateID {
			get { return GetColumnValue<string>(Columns.AddressValidationStateID); }
			set {
				SetColumnValue(Columns.AddressValidationStateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressValidationStateID));
			}
		}
		[DataMember]
		public string AddressValidationStateName {
			get { return GetColumnValue<string>(Columns.AddressValidationStateName); }
			set {
				SetColumnValue(Columns.AddressValidationStateName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressValidationStateName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AddressValidationStateName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressValidationStateIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AddressValidationStateNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddressValidationStateID = @"AddressValidationStateID";
			public static readonly string AddressValidationStateName = @"AddressValidationStateName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddressValidationStateID; }
		}
		*/

		#region Foreign Collections

		private MC_AddressCollection _MC_AddressesCol;
		//Relationship: FK_MC_Addresses_MC_AddressValidationStates
		public MC_AddressCollection MC_AddressesCol
		{
			get
			{
				if(_MC_AddressesCol == null) {
					_MC_AddressesCol = new MC_AddressCollection();
					_MC_AddressesCol.LoadAndCloseReader(MC_Address.Query()
						.WHERE(MC_Address.Columns.AddressValidationStateId, AddressValidationStateID).ExecuteReader());
				}
				return _MC_AddressesCol;
			}
		}

		private QL_AddressCollection _QL_AddressesCol;
		//Relationship: FK_QL_Address_MC_AddressValidationStates
		public QL_AddressCollection QL_AddressesCol
		{
			get
			{
				if(_QL_AddressesCol == null) {
					_QL_AddressesCol = new QL_AddressCollection();
					_QL_AddressesCol.LoadAndCloseReader(QL_Address.Query()
						.WHERE(QL_Address.Columns.AddressValidationStateId, AddressValidationStateID).ExecuteReader());
				}
				return _QL_AddressesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_AddressValidationVendor class.
	/// </summary>
	[DataContract]
	public partial class MC_AddressValidationVendorCollection : ActiveList<MC_AddressValidationVendor, MC_AddressValidationVendorCollection>
	{
		public static MC_AddressValidationVendorCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_AddressValidationVendorCollection result = new MC_AddressValidationVendorCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_AddressValidationVendor item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_AddressValidationVendors table.
	/// </summary>
	[DataContract]
	public partial class MC_AddressValidationVendor : ActiveRecord<MC_AddressValidationVendor>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Intelligent_SearchID = "INTELSEARCH";
			[EnumMember()] public const string No_Vendor_DefaultID = "NOVENDOR";
			[EnumMember()] public const string Smarty_StreetID = "SMARTYSTREET";
			[EnumMember()] public const string Strike_IronID = "STRIKEIRN";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_AddressValidationVendor()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_AddressValidationVendors", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarValidationVendorID = new TableSchema.TableColumn(schema);
				colvarValidationVendorID.ColumnName = "ValidationVendorID";
				colvarValidationVendorID.DataType = DbType.AnsiString;
				colvarValidationVendorID.MaxLength = 20;
				colvarValidationVendorID.AutoIncrement = false;
				colvarValidationVendorID.IsNullable = false;
				colvarValidationVendorID.IsPrimaryKey = true;
				colvarValidationVendorID.IsForeignKey = false;
				colvarValidationVendorID.IsReadOnly = false;
				colvarValidationVendorID.DefaultSetting = @"";
				colvarValidationVendorID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValidationVendorID);

				TableSchema.TableColumn colvarVendorName = new TableSchema.TableColumn(schema);
				colvarVendorName.ColumnName = "VendorName";
				colvarVendorName.DataType = DbType.String;
				colvarVendorName.MaxLength = 200;
				colvarVendorName.AutoIncrement = false;
				colvarVendorName.IsNullable = false;
				colvarVendorName.IsPrimaryKey = false;
				colvarVendorName.IsForeignKey = false;
				colvarVendorName.IsReadOnly = false;
				colvarVendorName.DefaultSetting = @"";
				colvarVendorName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVendorName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_AddressValidationVendors",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_AddressValidationVendor LoadFrom(MC_AddressValidationVendor item)
		{
			MC_AddressValidationVendor result = new MC_AddressValidationVendor();
			if (item.ValidationVendorID != default(string)) {
				result.LoadByKey(item.ValidationVendorID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ValidationVendorID {
			get { return GetColumnValue<string>(Columns.ValidationVendorID); }
			set {
				SetColumnValue(Columns.ValidationVendorID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ValidationVendorID));
			}
		}
		[DataMember]
		public string VendorName {
			get { return GetColumnValue<string>(Columns.VendorName); }
			set {
				SetColumnValue(Columns.VendorName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VendorName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return VendorName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ValidationVendorIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn VendorNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ValidationVendorID = @"ValidationVendorID";
			public static readonly string VendorName = @"VendorName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ValidationVendorID; }
		}
		*/

		#region Foreign Collections

		private MC_AddressCollection _MC_AddressesCol;
		//Relationship: FK_MC_Addresss_MC_AddressValidationVendors
		public MC_AddressCollection MC_AddressesCol
		{
			get
			{
				if(_MC_AddressesCol == null) {
					_MC_AddressesCol = new MC_AddressCollection();
					_MC_AddressesCol.LoadAndCloseReader(MC_Address.Query()
						.WHERE(MC_Address.Columns.ValidationVendorId, ValidationVendorID).ExecuteReader());
				}
				return _MC_AddressesCol;
			}
		}

		private QL_AddressCollection _QL_AddressesCol;
		//Relationship: FK_QL_Address_MC_AddressValidationVendors
		public QL_AddressCollection QL_AddressesCol
		{
			get
			{
				if(_QL_AddressesCol == null) {
					_QL_AddressesCol = new QL_AddressCollection();
					_QL_AddressesCol.LoadAndCloseReader(QL_Address.Query()
						.WHERE(QL_Address.Columns.ValidationVendorId, ValidationVendorID).ExecuteReader());
				}
				return _QL_AddressesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_CorporateUserGroupMapping class.
	/// </summary>
	[DataContract]
	public partial class MC_CorporateUserGroupMappingCollection : ActiveList<MC_CorporateUserGroupMapping, MC_CorporateUserGroupMappingCollection>
	{
		public static MC_CorporateUserGroupMappingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_CorporateUserGroupMappingCollection result = new MC_CorporateUserGroupMappingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_CorporateUserGroupMapping item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_CorporateUserGroupMappings table.
	/// </summary>
	[DataContract]
	public partial class MC_CorporateUserGroupMapping : ActiveRecord<MC_CorporateUserGroupMapping>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_CorporateUserGroupMapping()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_CorporateUserGroupMappings", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCorporateUserGroupMappingID = new TableSchema.TableColumn(schema);
				colvarCorporateUserGroupMappingID.ColumnName = "CorporateUserGroupMappingID";
				colvarCorporateUserGroupMappingID.DataType = DbType.Int32;
				colvarCorporateUserGroupMappingID.MaxLength = 0;
				colvarCorporateUserGroupMappingID.AutoIncrement = true;
				colvarCorporateUserGroupMappingID.IsNullable = false;
				colvarCorporateUserGroupMappingID.IsPrimaryKey = true;
				colvarCorporateUserGroupMappingID.IsForeignKey = false;
				colvarCorporateUserGroupMappingID.IsReadOnly = false;
				colvarCorporateUserGroupMappingID.DefaultSetting = @"";
				colvarCorporateUserGroupMappingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorporateUserGroupMappingID);

				TableSchema.TableColumn colvarCorporateUserId = new TableSchema.TableColumn(schema);
				colvarCorporateUserId.ColumnName = "CorporateUserId";
				colvarCorporateUserId.DataType = DbType.Int32;
				colvarCorporateUserId.MaxLength = 0;
				colvarCorporateUserId.AutoIncrement = false;
				colvarCorporateUserId.IsNullable = false;
				colvarCorporateUserId.IsPrimaryKey = false;
				colvarCorporateUserId.IsForeignKey = true;
				colvarCorporateUserId.IsReadOnly = false;
				colvarCorporateUserId.DefaultSetting = @"";
				colvarCorporateUserId.ForeignKeyTableName = "MC_CorporateUsers";
				schema.Columns.Add(colvarCorporateUserId);

				TableSchema.TableColumn colvarCorporateUserGroupId = new TableSchema.TableColumn(schema);
				colvarCorporateUserGroupId.ColumnName = "CorporateUserGroupId";
				colvarCorporateUserGroupId.DataType = DbType.Byte;
				colvarCorporateUserGroupId.MaxLength = 0;
				colvarCorporateUserGroupId.AutoIncrement = false;
				colvarCorporateUserGroupId.IsNullable = false;
				colvarCorporateUserGroupId.IsPrimaryKey = false;
				colvarCorporateUserGroupId.IsForeignKey = true;
				colvarCorporateUserGroupId.IsReadOnly = false;
				colvarCorporateUserGroupId.DefaultSetting = @"";
				colvarCorporateUserGroupId.ForeignKeyTableName = "MC_CorporateUserGroups";
				schema.Columns.Add(colvarCorporateUserGroupId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_CorporateUserGroupMappings",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_CorporateUserGroupMapping LoadFrom(MC_CorporateUserGroupMapping item)
		{
			MC_CorporateUserGroupMapping result = new MC_CorporateUserGroupMapping();
			if (item.CorporateUserGroupMappingID != default(int)) {
				result.LoadByKey(item.CorporateUserGroupMappingID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CorporateUserGroupMappingID {
			get { return GetColumnValue<int>(Columns.CorporateUserGroupMappingID); }
			set {
				SetColumnValue(Columns.CorporateUserGroupMappingID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateUserGroupMappingID));
			}
		}
		[DataMember]
		public int CorporateUserId {
			get { return GetColumnValue<int>(Columns.CorporateUserId); }
			set {
				SetColumnValue(Columns.CorporateUserId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateUserId));
			}
		}
		[DataMember]
		public byte CorporateUserGroupId {
			get { return GetColumnValue<byte>(Columns.CorporateUserGroupId); }
			set {
				SetColumnValue(Columns.CorporateUserGroupId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateUserGroupId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_CorporateUserGroup _CorporateUserGroup;
		//Relationship: FK_MC_CorporateUserGroupMappings_MC_CorporateUserGroups
		public MC_CorporateUserGroup CorporateUserGroup
		{
			get
			{
				if(_CorporateUserGroup == null) {
					_CorporateUserGroup = MC_CorporateUserGroup.FetchByID(this.CorporateUserGroupId);
				}
				return _CorporateUserGroup;
			}
			set
			{
				SetColumnValue("CorporateUserGroupId", value.CorporateUserGroupID);
				_CorporateUserGroup = value;
			}
		}

		private MC_CorporateUser _CorporateUser;
		//Relationship: FK_MC_CorporateUserGroupMappings_MC_CorporateUsers
		public MC_CorporateUser CorporateUser
		{
			get
			{
				if(_CorporateUser == null) {
					_CorporateUser = MC_CorporateUser.FetchByID(this.CorporateUserId);
				}
				return _CorporateUser;
			}
			set
			{
				SetColumnValue("CorporateUserId", value.CorporateUserID);
				_CorporateUser = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CorporateUserGroupMappingID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CorporateUserGroupMappingIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CorporateUserIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CorporateUserGroupIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CorporateUserGroupMappingID = @"CorporateUserGroupMappingID";
			public static readonly string CorporateUserId = @"CorporateUserId";
			public static readonly string CorporateUserGroupId = @"CorporateUserGroupId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CorporateUserGroupMappingID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_CorporateUserGroup class.
	/// </summary>
	[DataContract]
	public partial class MC_CorporateUserGroupCollection : ActiveList<MC_CorporateUserGroup, MC_CorporateUserGroupCollection>
	{
		public static MC_CorporateUserGroupCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_CorporateUserGroupCollection result = new MC_CorporateUserGroupCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_CorporateUserGroup item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_CorporateUserGroups table.
	/// </summary>
	[DataContract]
	public partial class MC_CorporateUserGroup : ActiveRecord<MC_CorporateUserGroup>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_CorporateUserGroup()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_CorporateUserGroups", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCorporateUserGroupID = new TableSchema.TableColumn(schema);
				colvarCorporateUserGroupID.ColumnName = "CorporateUserGroupID";
				colvarCorporateUserGroupID.DataType = DbType.Byte;
				colvarCorporateUserGroupID.MaxLength = 0;
				colvarCorporateUserGroupID.AutoIncrement = true;
				colvarCorporateUserGroupID.IsNullable = false;
				colvarCorporateUserGroupID.IsPrimaryKey = true;
				colvarCorporateUserGroupID.IsForeignKey = false;
				colvarCorporateUserGroupID.IsReadOnly = false;
				colvarCorporateUserGroupID.DefaultSetting = @"";
				colvarCorporateUserGroupID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorporateUserGroupID);

				TableSchema.TableColumn colvarCorporateUserGroup = new TableSchema.TableColumn(schema);
				colvarCorporateUserGroup.ColumnName = "CorporateUserGroup";
				colvarCorporateUserGroup.DataType = DbType.String;
				colvarCorporateUserGroup.MaxLength = 50;
				colvarCorporateUserGroup.AutoIncrement = false;
				colvarCorporateUserGroup.IsNullable = false;
				colvarCorporateUserGroup.IsPrimaryKey = false;
				colvarCorporateUserGroup.IsForeignKey = false;
				colvarCorporateUserGroup.IsReadOnly = false;
				colvarCorporateUserGroup.DefaultSetting = @"";
				colvarCorporateUserGroup.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorporateUserGroup);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_CorporateUserGroups",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_CorporateUserGroup LoadFrom(MC_CorporateUserGroup item)
		{
			MC_CorporateUserGroup result = new MC_CorporateUserGroup();
			if (item.CorporateUserGroupID != default(byte)) {
				result.LoadByKey(item.CorporateUserGroupID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public byte CorporateUserGroupID {
			get { return GetColumnValue<byte>(Columns.CorporateUserGroupID); }
			set {
				SetColumnValue(Columns.CorporateUserGroupID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateUserGroupID));
			}
		}
		[DataMember]
		public string CorporateUserGroup {
			get { return GetColumnValue<string>(Columns.CorporateUserGroup); }
			set {
				SetColumnValue(Columns.CorporateUserGroup, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateUserGroup));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CorporateUserGroup;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CorporateUserGroupIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CorporateUserGroupColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CorporateUserGroupID = @"CorporateUserGroupID";
			public static readonly string CorporateUserGroup = @"CorporateUserGroup";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CorporateUserGroupID; }
		}
		*/

		#region Foreign Collections

		private MC_CorporateUserGroupMappingCollection _MC_CorporateUserGroupMappingsCol;
		//Relationship: FK_MC_CorporateUserGroupMappings_MC_CorporateUserGroups
		public MC_CorporateUserGroupMappingCollection MC_CorporateUserGroupMappingsCol
		{
			get
			{
				if(_MC_CorporateUserGroupMappingsCol == null) {
					_MC_CorporateUserGroupMappingsCol = new MC_CorporateUserGroupMappingCollection();
					_MC_CorporateUserGroupMappingsCol.LoadAndCloseReader(MC_CorporateUserGroupMapping.Query()
						.WHERE(MC_CorporateUserGroupMapping.Columns.CorporateUserGroupId, CorporateUserGroupID).ExecuteReader());
				}
				return _MC_CorporateUserGroupMappingsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_CorporateUser class.
	/// </summary>
	[DataContract]
	public partial class MC_CorporateUserCollection : ActiveList<MC_CorporateUser, MC_CorporateUserCollection>
	{
		public static MC_CorporateUserCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_CorporateUserCollection result = new MC_CorporateUserCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_CorporateUser item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_CorporateUsers table.
	/// </summary>
	[DataContract]
	public partial class MC_CorporateUser : ActiveRecord<MC_CorporateUser>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_CorporateUser()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_CorporateUsers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCorporateUserID = new TableSchema.TableColumn(schema);
				colvarCorporateUserID.ColumnName = "CorporateUserID";
				colvarCorporateUserID.DataType = DbType.Int32;
				colvarCorporateUserID.MaxLength = 0;
				colvarCorporateUserID.AutoIncrement = true;
				colvarCorporateUserID.IsNullable = false;
				colvarCorporateUserID.IsPrimaryKey = true;
				colvarCorporateUserID.IsForeignKey = false;
				colvarCorporateUserID.IsReadOnly = false;
				colvarCorporateUserID.DefaultSetting = @"";
				colvarCorporateUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorporateUserID);

				TableSchema.TableColumn colvarCorporateUserTypeId = new TableSchema.TableColumn(schema);
				colvarCorporateUserTypeId.ColumnName = "CorporateUserTypeId";
				colvarCorporateUserTypeId.DataType = DbType.Byte;
				colvarCorporateUserTypeId.MaxLength = 0;
				colvarCorporateUserTypeId.AutoIncrement = false;
				colvarCorporateUserTypeId.IsNullable = false;
				colvarCorporateUserTypeId.IsPrimaryKey = false;
				colvarCorporateUserTypeId.IsForeignKey = true;
				colvarCorporateUserTypeId.IsReadOnly = false;
				colvarCorporateUserTypeId.DefaultSetting = @"";
				colvarCorporateUserTypeId.ForeignKeyTableName = "MC_CorporateUserTypes";
				schema.Columns.Add(colvarCorporateUserTypeId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 100;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = false;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = false;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 500;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = false;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.AnsiString;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneCell = new TableSchema.TableColumn(schema);
				colvarPhoneCell.ColumnName = "PhoneCell";
				colvarPhoneCell.DataType = DbType.AnsiString;
				colvarPhoneCell.MaxLength = 20;
				colvarPhoneCell.AutoIncrement = false;
				colvarPhoneCell.IsNullable = true;
				colvarPhoneCell.IsPrimaryKey = false;
				colvarPhoneCell.IsForeignKey = false;
				colvarPhoneCell.IsReadOnly = false;
				colvarPhoneCell.DefaultSetting = @"";
				colvarPhoneCell.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneCell);

				TableSchema.TableColumn colvarADUsername = new TableSchema.TableColumn(schema);
				colvarADUsername.ColumnName = "ADUsername";
				colvarADUsername.DataType = DbType.String;
				colvarADUsername.MaxLength = 200;
				colvarADUsername.AutoIncrement = false;
				colvarADUsername.IsNullable = true;
				colvarADUsername.IsPrimaryKey = false;
				colvarADUsername.IsForeignKey = false;
				colvarADUsername.IsReadOnly = false;
				colvarADUsername.DefaultSetting = @"";
				colvarADUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarADUsername);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 500;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = false;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 20;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = false;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarLastLoginOn = new TableSchema.TableColumn(schema);
				colvarLastLoginOn.ColumnName = "LastLoginOn";
				colvarLastLoginOn.DataType = DbType.DateTime;
				colvarLastLoginOn.MaxLength = 0;
				colvarLastLoginOn.AutoIncrement = false;
				colvarLastLoginOn.IsNullable = true;
				colvarLastLoginOn.IsPrimaryKey = false;
				colvarLastLoginOn.IsForeignKey = false;
				colvarLastLoginOn.IsReadOnly = false;
				colvarLastLoginOn.DefaultSetting = @"";
				colvarLastLoginOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastLoginOn);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_CorporateUsers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_CorporateUser LoadFrom(MC_CorporateUser item)
		{
			MC_CorporateUser result = new MC_CorporateUser();
			if (item.CorporateUserID != default(int)) {
				result.LoadByKey(item.CorporateUserID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CorporateUserID {
			get { return GetColumnValue<int>(Columns.CorporateUserID); }
			set {
				SetColumnValue(Columns.CorporateUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateUserID));
			}
		}
		[DataMember]
		public byte CorporateUserTypeId {
			get { return GetColumnValue<byte>(Columns.CorporateUserTypeId); }
			set {
				SetColumnValue(Columns.CorporateUserTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateUserTypeId));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set {
				SetColumnValue(Columns.FullName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullName));
			}
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set {
				SetColumnValue(Columns.Email, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Email));
			}
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set {
				SetColumnValue(Columns.PhoneWork, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneWork));
			}
		}
		[DataMember]
		public string PhoneCell {
			get { return GetColumnValue<string>(Columns.PhoneCell); }
			set {
				SetColumnValue(Columns.PhoneCell, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneCell));
			}
		}
		[DataMember]
		public string ADUsername {
			get { return GetColumnValue<string>(Columns.ADUsername); }
			set {
				SetColumnValue(Columns.ADUsername, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ADUsername));
			}
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set {
				SetColumnValue(Columns.Username, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Username));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}
		[DataMember]
		public DateTime? LastLoginOn {
			get { return GetColumnValue<DateTime?>(Columns.LastLoginOn); }
			set {
				SetColumnValue(Columns.LastLoginOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastLoginOn));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_CorporateUserType _CorporateUserType;
		//Relationship: FK_MC_CorporateUsers_MC_CorporateUserTypes
		public MC_CorporateUserType CorporateUserType
		{
			get
			{
				if(_CorporateUserType == null) {
					_CorporateUserType = MC_CorporateUserType.FetchByID(this.CorporateUserTypeId);
				}
				return _CorporateUserType;
			}
			set
			{
				SetColumnValue("CorporateUserTypeId", value.CorporateUserTypeID);
				_CorporateUserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CorporateUserID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CorporateUserIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CorporateUserTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn PhoneCellColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ADUsernameColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn LastLoginOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[17]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CorporateUserID = @"CorporateUserID";
			public static readonly string CorporateUserTypeId = @"CorporateUserTypeId";
			public static readonly string DealerId = @"DealerId";
			public static readonly string FullName = @"FullName";
			public static readonly string Email = @"Email";
			public static readonly string PhoneWork = @"PhoneWork";
			public static readonly string PhoneCell = @"PhoneCell";
			public static readonly string ADUsername = @"ADUsername";
			public static readonly string Username = @"Username";
			public static readonly string Password = @"Password";
			public static readonly string LastLoginOn = @"LastLoginOn";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CorporateUserID; }
		}
		*/

		#region Foreign Collections

		private MC_CorporateUserGroupMappingCollection _MC_CorporateUserGroupMappingsCol;
		//Relationship: FK_MC_CorporateUserGroupMappings_MC_CorporateUsers
		public MC_CorporateUserGroupMappingCollection MC_CorporateUserGroupMappingsCol
		{
			get
			{
				if(_MC_CorporateUserGroupMappingsCol == null) {
					_MC_CorporateUserGroupMappingsCol = new MC_CorporateUserGroupMappingCollection();
					_MC_CorporateUserGroupMappingsCol.LoadAndCloseReader(MC_CorporateUserGroupMapping.Query()
						.WHERE(MC_CorporateUserGroupMapping.Columns.CorporateUserId, CorporateUserID).ExecuteReader());
				}
				return _MC_CorporateUserGroupMappingsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_CorporateUserType class.
	/// </summary>
	[DataContract]
	public partial class MC_CorporateUserTypeCollection : ActiveList<MC_CorporateUserType, MC_CorporateUserTypeCollection>
	{
		public static MC_CorporateUserTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_CorporateUserTypeCollection result = new MC_CorporateUserTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_CorporateUserType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_CorporateUserTypes table.
	/// </summary>
	[DataContract]
	public partial class MC_CorporateUserType : ActiveRecord<MC_CorporateUserType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_CorporateUserType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_CorporateUserTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCorporateUserTypeID = new TableSchema.TableColumn(schema);
				colvarCorporateUserTypeID.ColumnName = "CorporateUserTypeID";
				colvarCorporateUserTypeID.DataType = DbType.Byte;
				colvarCorporateUserTypeID.MaxLength = 0;
				colvarCorporateUserTypeID.AutoIncrement = true;
				colvarCorporateUserTypeID.IsNullable = false;
				colvarCorporateUserTypeID.IsPrimaryKey = true;
				colvarCorporateUserTypeID.IsForeignKey = false;
				colvarCorporateUserTypeID.IsReadOnly = false;
				colvarCorporateUserTypeID.DefaultSetting = @"";
				colvarCorporateUserTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorporateUserTypeID);

				TableSchema.TableColumn colvarCorporateUserType = new TableSchema.TableColumn(schema);
				colvarCorporateUserType.ColumnName = "CorporateUserType";
				colvarCorporateUserType.DataType = DbType.String;
				colvarCorporateUserType.MaxLength = 50;
				colvarCorporateUserType.AutoIncrement = false;
				colvarCorporateUserType.IsNullable = false;
				colvarCorporateUserType.IsPrimaryKey = false;
				colvarCorporateUserType.IsForeignKey = false;
				colvarCorporateUserType.IsReadOnly = false;
				colvarCorporateUserType.DefaultSetting = @"";
				colvarCorporateUserType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorporateUserType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_CorporateUserTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_CorporateUserType LoadFrom(MC_CorporateUserType item)
		{
			MC_CorporateUserType result = new MC_CorporateUserType();
			if (item.CorporateUserTypeID != default(byte)) {
				result.LoadByKey(item.CorporateUserTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public byte CorporateUserTypeID {
			get { return GetColumnValue<byte>(Columns.CorporateUserTypeID); }
			set {
				SetColumnValue(Columns.CorporateUserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateUserTypeID));
			}
		}
		[DataMember]
		public string CorporateUserType {
			get { return GetColumnValue<string>(Columns.CorporateUserType); }
			set {
				SetColumnValue(Columns.CorporateUserType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateUserType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CorporateUserType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CorporateUserTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CorporateUserTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CorporateUserTypeID = @"CorporateUserTypeID";
			public static readonly string CorporateUserType = @"CorporateUserType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CorporateUserTypeID; }
		}
		*/

		#region Foreign Collections

		private MC_CorporateUserCollection _MC_CorporateUsersCol;
		//Relationship: FK_MC_CorporateUsers_MC_CorporateUserTypes
		public MC_CorporateUserCollection MC_CorporateUsersCol
		{
			get
			{
				if(_MC_CorporateUsersCol == null) {
					_MC_CorporateUsersCol = new MC_CorporateUserCollection();
					_MC_CorporateUsersCol.LoadAndCloseReader(MC_CorporateUser.Query()
						.WHERE(MC_CorporateUser.Columns.CorporateUserTypeId, CorporateUserTypeID).ExecuteReader());
				}
				return _MC_CorporateUsersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_DealerUser class.
	/// </summary>
	[DataContract]
	public partial class MC_DealerUserCollection : ActiveList<MC_DealerUser, MC_DealerUserCollection>
	{
		public static MC_DealerUserCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_DealerUserCollection result = new MC_DealerUserCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_DealerUser item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_DealerUsers table.
	/// </summary>
	[DataContract]
	public partial class MC_DealerUser : ActiveRecord<MC_DealerUser>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_DealerUser()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_DealerUsers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDealerUserID = new TableSchema.TableColumn(schema);
				colvarDealerUserID.ColumnName = "DealerUserID";
				colvarDealerUserID.DataType = DbType.Int32;
				colvarDealerUserID.MaxLength = 0;
				colvarDealerUserID.AutoIncrement = true;
				colvarDealerUserID.IsNullable = false;
				colvarDealerUserID.IsPrimaryKey = true;
				colvarDealerUserID.IsForeignKey = false;
				colvarDealerUserID.IsReadOnly = false;
				colvarDealerUserID.DefaultSetting = @"";
				colvarDealerUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerUserID);

				TableSchema.TableColumn colvarDealerUserTypeId = new TableSchema.TableColumn(schema);
				colvarDealerUserTypeId.ColumnName = "DealerUserTypeId";
				colvarDealerUserTypeId.DataType = DbType.Byte;
				colvarDealerUserTypeId.MaxLength = 0;
				colvarDealerUserTypeId.AutoIncrement = false;
				colvarDealerUserTypeId.IsNullable = false;
				colvarDealerUserTypeId.IsPrimaryKey = false;
				colvarDealerUserTypeId.IsForeignKey = true;
				colvarDealerUserTypeId.IsReadOnly = false;
				colvarDealerUserTypeId.DefaultSetting = @"";
				colvarDealerUserTypeId.ForeignKeyTableName = "MC_DealerUserTypes";
				schema.Columns.Add(colvarDealerUserTypeId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarAuthUserId = new TableSchema.TableColumn(schema);
				colvarAuthUserId.ColumnName = "AuthUserId";
				colvarAuthUserId.DataType = DbType.Int32;
				colvarAuthUserId.MaxLength = 0;
				colvarAuthUserId.AutoIncrement = false;
				colvarAuthUserId.IsNullable = true;
				colvarAuthUserId.IsPrimaryKey = false;
				colvarAuthUserId.IsForeignKey = false;
				colvarAuthUserId.IsReadOnly = false;
				colvarAuthUserId.DefaultSetting = @"";
				colvarAuthUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthUserId);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.String;
				colvarUserID.MaxLength = 562;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = true;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = true;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarFirstname = new TableSchema.TableColumn(schema);
				colvarFirstname.ColumnName = "Firstname";
				colvarFirstname.DataType = DbType.String;
				colvarFirstname.MaxLength = 50;
				colvarFirstname.AutoIncrement = false;
				colvarFirstname.IsNullable = true;
				colvarFirstname.IsPrimaryKey = false;
				colvarFirstname.IsForeignKey = false;
				colvarFirstname.IsReadOnly = false;
				colvarFirstname.DefaultSetting = @"";
				colvarFirstname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstname);

				TableSchema.TableColumn colvarMiddlename = new TableSchema.TableColumn(schema);
				colvarMiddlename.ColumnName = "Middlename";
				colvarMiddlename.DataType = DbType.String;
				colvarMiddlename.MaxLength = 50;
				colvarMiddlename.AutoIncrement = false;
				colvarMiddlename.IsNullable = true;
				colvarMiddlename.IsPrimaryKey = false;
				colvarMiddlename.IsForeignKey = false;
				colvarMiddlename.IsReadOnly = false;
				colvarMiddlename.DefaultSetting = @"";
				colvarMiddlename.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddlename);

				TableSchema.TableColumn colvarLastname = new TableSchema.TableColumn(schema);
				colvarLastname.ColumnName = "Lastname";
				colvarLastname.DataType = DbType.String;
				colvarLastname.MaxLength = 50;
				colvarLastname.AutoIncrement = false;
				colvarLastname.IsNullable = true;
				colvarLastname.IsPrimaryKey = false;
				colvarLastname.IsForeignKey = false;
				colvarLastname.IsReadOnly = false;
				colvarLastname.DefaultSetting = @"";
				colvarLastname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastname);

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 100;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = false;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = false;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 500;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = false;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.AnsiString;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneCell = new TableSchema.TableColumn(schema);
				colvarPhoneCell.ColumnName = "PhoneCell";
				colvarPhoneCell.DataType = DbType.AnsiString;
				colvarPhoneCell.MaxLength = 20;
				colvarPhoneCell.AutoIncrement = false;
				colvarPhoneCell.IsNullable = true;
				colvarPhoneCell.IsPrimaryKey = false;
				colvarPhoneCell.IsForeignKey = false;
				colvarPhoneCell.IsReadOnly = false;
				colvarPhoneCell.DefaultSetting = @"";
				colvarPhoneCell.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneCell);

				TableSchema.TableColumn colvarADUsername = new TableSchema.TableColumn(schema);
				colvarADUsername.ColumnName = "ADUsername";
				colvarADUsername.DataType = DbType.String;
				colvarADUsername.MaxLength = 200;
				colvarADUsername.AutoIncrement = false;
				colvarADUsername.IsNullable = true;
				colvarADUsername.IsPrimaryKey = false;
				colvarADUsername.IsForeignKey = false;
				colvarADUsername.IsReadOnly = false;
				colvarADUsername.DefaultSetting = @"";
				colvarADUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarADUsername);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 500;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = false;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 20;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = false;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarLastLoginOn = new TableSchema.TableColumn(schema);
				colvarLastLoginOn.ColumnName = "LastLoginOn";
				colvarLastLoginOn.DataType = DbType.DateTime;
				colvarLastLoginOn.MaxLength = 0;
				colvarLastLoginOn.AutoIncrement = false;
				colvarLastLoginOn.IsNullable = true;
				colvarLastLoginOn.IsPrimaryKey = false;
				colvarLastLoginOn.IsForeignKey = false;
				colvarLastLoginOn.IsReadOnly = false;
				colvarLastLoginOn.DefaultSetting = @"";
				colvarLastLoginOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastLoginOn);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_DealerUsers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_DealerUser LoadFrom(MC_DealerUser item)
		{
			MC_DealerUser result = new MC_DealerUser();
			if (item.DealerUserID != default(int)) {
				result.LoadByKey(item.DealerUserID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DealerUserID {
			get { return GetColumnValue<int>(Columns.DealerUserID); }
			set {
				SetColumnValue(Columns.DealerUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerUserID));
			}
		}
		[DataMember]
		public byte DealerUserTypeId {
			get { return GetColumnValue<byte>(Columns.DealerUserTypeId); }
			set {
				SetColumnValue(Columns.DealerUserTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerUserTypeId));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public int? AuthUserId {
			get { return GetColumnValue<int?>(Columns.AuthUserId); }
			set {
				SetColumnValue(Columns.AuthUserId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthUserId));
			}
		}
		[DataMember]
		public string UserID {
			get { return GetColumnValue<string>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public string Firstname {
			get { return GetColumnValue<string>(Columns.Firstname); }
			set {
				SetColumnValue(Columns.Firstname, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Firstname));
			}
		}
		[DataMember]
		public string Middlename {
			get { return GetColumnValue<string>(Columns.Middlename); }
			set {
				SetColumnValue(Columns.Middlename, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Middlename));
			}
		}
		[DataMember]
		public string Lastname {
			get { return GetColumnValue<string>(Columns.Lastname); }
			set {
				SetColumnValue(Columns.Lastname, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Lastname));
			}
		}
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set {
				SetColumnValue(Columns.FullName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullName));
			}
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set {
				SetColumnValue(Columns.Email, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Email));
			}
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set {
				SetColumnValue(Columns.PhoneWork, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneWork));
			}
		}
		[DataMember]
		public string PhoneCell {
			get { return GetColumnValue<string>(Columns.PhoneCell); }
			set {
				SetColumnValue(Columns.PhoneCell, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneCell));
			}
		}
		[DataMember]
		public string ADUsername {
			get { return GetColumnValue<string>(Columns.ADUsername); }
			set {
				SetColumnValue(Columns.ADUsername, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ADUsername));
			}
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set {
				SetColumnValue(Columns.Username, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Username));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}
		[DataMember]
		public DateTime? LastLoginOn {
			get { return GetColumnValue<DateTime?>(Columns.LastLoginOn); }
			set {
				SetColumnValue(Columns.LastLoginOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastLoginOn));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Dealer _Dealer;
		//Relationship: FK_MC_DealerUsers_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		private MC_DealerUserType _DealerUserType;
		//Relationship: FK_MC_DealerUsers_MC_DealerUserTypes
		public MC_DealerUserType DealerUserType
		{
			get
			{
				if(_DealerUserType == null) {
					_DealerUserType = MC_DealerUserType.FetchByID(this.DealerUserTypeId);
				}
				return _DealerUserType;
			}
			set
			{
				SetColumnValue("DealerUserTypeId", value.DealerUserTypeID);
				_DealerUserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return DealerUserID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn DealerUserIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerUserTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AuthUserIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn FirstnameColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MiddlenameColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn LastnameColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PhoneCellColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ADUsernameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn LastLoginOnColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[21]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DealerUserID = @"DealerUserID";
			public static readonly string DealerUserTypeId = @"DealerUserTypeId";
			public static readonly string DealerId = @"DealerId";
			public static readonly string AuthUserId = @"AuthUserId";
			public static readonly string UserID = @"UserID";
			public static readonly string Firstname = @"Firstname";
			public static readonly string Middlename = @"Middlename";
			public static readonly string Lastname = @"Lastname";
			public static readonly string FullName = @"FullName";
			public static readonly string Email = @"Email";
			public static readonly string PhoneWork = @"PhoneWork";
			public static readonly string PhoneCell = @"PhoneCell";
			public static readonly string ADUsername = @"ADUsername";
			public static readonly string Username = @"Username";
			public static readonly string Password = @"Password";
			public static readonly string LastLoginOn = @"LastLoginOn";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DealerUserID; }
		}
		*/

		#region Foreign Collections

		private CA_AppointmentCollection _CA_AppointmentsCol;
		//Relationship: FK_CA_Appointments_MC_DealerUsers
		public CA_AppointmentCollection CA_AppointmentsCol
		{
			get
			{
				if(_CA_AppointmentsCol == null) {
					_CA_AppointmentsCol = new CA_AppointmentCollection();
					_CA_AppointmentsCol.LoadAndCloseReader(CA_Appointment.Query()
						.WHERE(CA_Appointment.Columns.DealerUserId, DealerUserID).ExecuteReader());
				}
				return _CA_AppointmentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_DealerUserType class.
	/// </summary>
	[DataContract]
	public partial class MC_DealerUserTypeCollection : ActiveList<MC_DealerUserType, MC_DealerUserTypeCollection>
	{
		public static MC_DealerUserTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_DealerUserTypeCollection result = new MC_DealerUserTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_DealerUserType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_DealerUserTypes table.
	/// </summary>
	[DataContract]
	public partial class MC_DealerUserType : ActiveRecord<MC_DealerUserType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_DealerUserType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_DealerUserTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDealerUserTypeID = new TableSchema.TableColumn(schema);
				colvarDealerUserTypeID.ColumnName = "DealerUserTypeID";
				colvarDealerUserTypeID.DataType = DbType.Byte;
				colvarDealerUserTypeID.MaxLength = 0;
				colvarDealerUserTypeID.AutoIncrement = true;
				colvarDealerUserTypeID.IsNullable = false;
				colvarDealerUserTypeID.IsPrimaryKey = true;
				colvarDealerUserTypeID.IsForeignKey = false;
				colvarDealerUserTypeID.IsReadOnly = false;
				colvarDealerUserTypeID.DefaultSetting = @"";
				colvarDealerUserTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerUserTypeID);

				TableSchema.TableColumn colvarDealerUserType = new TableSchema.TableColumn(schema);
				colvarDealerUserType.ColumnName = "DealerUserType";
				colvarDealerUserType.DataType = DbType.String;
				colvarDealerUserType.MaxLength = 50;
				colvarDealerUserType.AutoIncrement = false;
				colvarDealerUserType.IsNullable = false;
				colvarDealerUserType.IsPrimaryKey = false;
				colvarDealerUserType.IsForeignKey = false;
				colvarDealerUserType.IsReadOnly = false;
				colvarDealerUserType.DefaultSetting = @"";
				colvarDealerUserType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerUserType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_DealerUserTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_DealerUserType LoadFrom(MC_DealerUserType item)
		{
			MC_DealerUserType result = new MC_DealerUserType();
			if (item.DealerUserTypeID != default(byte)) {
				result.LoadByKey(item.DealerUserTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public byte DealerUserTypeID {
			get { return GetColumnValue<byte>(Columns.DealerUserTypeID); }
			set {
				SetColumnValue(Columns.DealerUserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerUserTypeID));
			}
		}
		[DataMember]
		public string DealerUserType {
			get { return GetColumnValue<string>(Columns.DealerUserType); }
			set {
				SetColumnValue(Columns.DealerUserType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerUserType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return DealerUserType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DealerUserTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerUserTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DealerUserTypeID = @"DealerUserTypeID";
			public static readonly string DealerUserType = @"DealerUserType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DealerUserTypeID; }
		}
		*/

		#region Foreign Collections

		private MC_DealerUserCollection _MC_DealerUsersCol;
		//Relationship: FK_MC_DealerUsers_MC_DealerUserTypes
		public MC_DealerUserCollection MC_DealerUsersCol
		{
			get
			{
				if(_MC_DealerUsersCol == null) {
					_MC_DealerUsersCol = new MC_DealerUserCollection();
					_MC_DealerUsersCol.LoadAndCloseReader(MC_DealerUser.Query()
						.WHERE(MC_DealerUser.Columns.DealerUserTypeId, DealerUserTypeID).ExecuteReader());
				}
				return _MC_DealerUsersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_DepartmentAccountNoteCat1 class.
	/// </summary>
	[DataContract]
	public partial class MC_DepartmentAccountNoteCat1Collection : ActiveList<MC_DepartmentAccountNoteCat1, MC_DepartmentAccountNoteCat1Collection>
	{
		public static MC_DepartmentAccountNoteCat1Collection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_DepartmentAccountNoteCat1Collection result = new MC_DepartmentAccountNoteCat1Collection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_DepartmentAccountNoteCat1 item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_DepartmentAccountNoteCat1 table.
	/// </summary>
	[DataContract]
	public partial class MC_DepartmentAccountNoteCat1 : ActiveRecord<MC_DepartmentAccountNoteCat1>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_DepartmentAccountNoteCat1()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_DepartmentAccountNoteCat1", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDepartmentID = new TableSchema.TableColumn(schema);
				colvarDepartmentID.ColumnName = "DepartmentID";
				colvarDepartmentID.DataType = DbType.AnsiString;
				colvarDepartmentID.MaxLength = 20;
				colvarDepartmentID.AutoIncrement = false;
				colvarDepartmentID.IsNullable = false;
				colvarDepartmentID.IsPrimaryKey = true;
				colvarDepartmentID.IsForeignKey = false;
				colvarDepartmentID.IsReadOnly = false;
				colvarDepartmentID.DefaultSetting = @"";
				colvarDepartmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentID);

				TableSchema.TableColumn colvarNoteCategory1ID = new TableSchema.TableColumn(schema);
				colvarNoteCategory1ID.ColumnName = "NoteCategory1ID";
				colvarNoteCategory1ID.DataType = DbType.Int32;
				colvarNoteCategory1ID.MaxLength = 0;
				colvarNoteCategory1ID.AutoIncrement = false;
				colvarNoteCategory1ID.IsNullable = false;
				colvarNoteCategory1ID.IsPrimaryKey = false;
				colvarNoteCategory1ID.IsForeignKey = true;
				colvarNoteCategory1ID.IsReadOnly = false;
				colvarNoteCategory1ID.DefaultSetting = @"";
				colvarNoteCategory1ID.ForeignKeyTableName = "MC_AccountNoteCat1";
				schema.Columns.Add(colvarNoteCategory1ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_DepartmentAccountNoteCat1",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_DepartmentAccountNoteCat1 LoadFrom(MC_DepartmentAccountNoteCat1 item)
		{
			MC_DepartmentAccountNoteCat1 result = new MC_DepartmentAccountNoteCat1();
			if (item.DepartmentID != default(string)) {
				result.LoadByKey(item.DepartmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string DepartmentID {
			get { return GetColumnValue<string>(Columns.DepartmentID); }
			set {
				SetColumnValue(Columns.DepartmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DepartmentID));
			}
		}
		[DataMember]
		public int NoteCategory1ID {
			get { return GetColumnValue<int>(Columns.NoteCategory1ID); }
			set {
				SetColumnValue(Columns.NoteCategory1ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteCategory1ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_AccountNoteCat1 _NoteCategory1;
		//Relationship: FK_MC_DepartmentAccountNoteCat1_MC_AccountNoteCat1
		public MC_AccountNoteCat1 NoteCategory1
		{
			get
			{
				if(_NoteCategory1 == null) {
					_NoteCategory1 = MC_AccountNoteCat1.FetchByID(this.NoteCategory1ID);
				}
				return _NoteCategory1;
			}
			set
			{
				SetColumnValue("NoteCategory1ID", value.NoteCategory1ID);
				_NoteCategory1 = value;
			}
		}

		private MC_Department _Department;
		//Relationship: FK_MC_DepartmentAccountNoteCat1_MC_Departments
		public MC_Department Department
		{
			get
			{
				if(_Department == null) {
					_Department = MC_Department.FetchByID(this.DepartmentID);
				}
				return _Department;
			}
			set
			{
				SetColumnValue("DepartmentID", value.DepartmentID);
				_Department = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return DepartmentID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DepartmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NoteCategory1IDColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DepartmentID = @"DepartmentID";
			public static readonly string NoteCategory1ID = @"NoteCategory1ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DepartmentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_Department class.
	/// </summary>
	[DataContract]
	public partial class MC_DepartmentCollection : ActiveList<MC_Department, MC_DepartmentCollection>
	{
		public static MC_DepartmentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_DepartmentCollection result = new MC_DepartmentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_Department item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_Departments table.
	/// </summary>
	[DataContract]
	public partial class MC_Department : ActiveRecord<MC_Department>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_Department()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_Departments", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDepartmentID = new TableSchema.TableColumn(schema);
				colvarDepartmentID.ColumnName = "DepartmentID";
				colvarDepartmentID.DataType = DbType.AnsiString;
				colvarDepartmentID.MaxLength = 20;
				colvarDepartmentID.AutoIncrement = false;
				colvarDepartmentID.IsNullable = false;
				colvarDepartmentID.IsPrimaryKey = true;
				colvarDepartmentID.IsForeignKey = false;
				colvarDepartmentID.IsReadOnly = false;
				colvarDepartmentID.DefaultSetting = @"";
				colvarDepartmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentID);

				TableSchema.TableColumn colvarDepartmentName = new TableSchema.TableColumn(schema);
				colvarDepartmentName.ColumnName = "DepartmentName";
				colvarDepartmentName.DataType = DbType.String;
				colvarDepartmentName.MaxLength = 50;
				colvarDepartmentName.AutoIncrement = false;
				colvarDepartmentName.IsNullable = false;
				colvarDepartmentName.IsPrimaryKey = false;
				colvarDepartmentName.IsForeignKey = false;
				colvarDepartmentName.IsReadOnly = false;
				colvarDepartmentName.DefaultSetting = @"";
				colvarDepartmentName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_Departments",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_Department LoadFrom(MC_Department item)
		{
			MC_Department result = new MC_Department();
			if (item.DepartmentID != default(string)) {
				result.LoadByKey(item.DepartmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string DepartmentID {
			get { return GetColumnValue<string>(Columns.DepartmentID); }
			set {
				SetColumnValue(Columns.DepartmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DepartmentID));
			}
		}
		[DataMember]
		public string DepartmentName {
			get { return GetColumnValue<string>(Columns.DepartmentName); }
			set {
				SetColumnValue(Columns.DepartmentName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DepartmentName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return DepartmentName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DepartmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DepartmentNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DepartmentID = @"DepartmentID";
			public static readonly string DepartmentName = @"DepartmentName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DepartmentID; }
		}
		*/

		#region Foreign Collections

		private MC_DepartmentAccountNoteCat1Collection _MC_DepartmentAccountNoteCat1sCol;
		//Relationship: FK_MC_DepartmentAccountNoteCat1_MC_Departments
		public MC_DepartmentAccountNoteCat1Collection MC_DepartmentAccountNoteCat1sCol
		{
			get
			{
				if(_MC_DepartmentAccountNoteCat1sCol == null) {
					_MC_DepartmentAccountNoteCat1sCol = new MC_DepartmentAccountNoteCat1Collection();
					_MC_DepartmentAccountNoteCat1sCol.LoadAndCloseReader(MC_DepartmentAccountNoteCat1.Query()
						.WHERE(MC_DepartmentAccountNoteCat1.Columns.DepartmentID, DepartmentID).ExecuteReader());
				}
				return _MC_DepartmentAccountNoteCat1sCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_FriendsAndFamilyType class.
	/// </summary>
	[DataContract]
	public partial class MC_FriendsAndFamilyTypeCollection : ActiveList<MC_FriendsAndFamilyType, MC_FriendsAndFamilyTypeCollection>
	{
		public static MC_FriendsAndFamilyTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_FriendsAndFamilyTypeCollection result = new MC_FriendsAndFamilyTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_FriendsAndFamilyType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_FriendsAndFamilyTypes table.
	/// </summary>
	[DataContract]
	public partial class MC_FriendsAndFamilyType : ActiveRecord<MC_FriendsAndFamilyType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_FriendsAndFamilyType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_FriendsAndFamilyTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarFriendsAndFamilyTypeID = new TableSchema.TableColumn(schema);
				colvarFriendsAndFamilyTypeID.ColumnName = "FriendsAndFamilyTypeID";
				colvarFriendsAndFamilyTypeID.DataType = DbType.AnsiString;
				colvarFriendsAndFamilyTypeID.MaxLength = 20;
				colvarFriendsAndFamilyTypeID.AutoIncrement = false;
				colvarFriendsAndFamilyTypeID.IsNullable = false;
				colvarFriendsAndFamilyTypeID.IsPrimaryKey = true;
				colvarFriendsAndFamilyTypeID.IsForeignKey = false;
				colvarFriendsAndFamilyTypeID.IsReadOnly = false;
				colvarFriendsAndFamilyTypeID.DefaultSetting = @"";
				colvarFriendsAndFamilyTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFriendsAndFamilyTypeID);

				TableSchema.TableColumn colvarFriendsAndFamilyType = new TableSchema.TableColumn(schema);
				colvarFriendsAndFamilyType.ColumnName = "FriendsAndFamilyType";
				colvarFriendsAndFamilyType.DataType = DbType.String;
				colvarFriendsAndFamilyType.MaxLength = 50;
				colvarFriendsAndFamilyType.AutoIncrement = false;
				colvarFriendsAndFamilyType.IsNullable = false;
				colvarFriendsAndFamilyType.IsPrimaryKey = false;
				colvarFriendsAndFamilyType.IsForeignKey = false;
				colvarFriendsAndFamilyType.IsReadOnly = false;
				colvarFriendsAndFamilyType.DefaultSetting = @"";
				colvarFriendsAndFamilyType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFriendsAndFamilyType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_FriendsAndFamilyTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_FriendsAndFamilyType LoadFrom(MC_FriendsAndFamilyType item)
		{
			MC_FriendsAndFamilyType result = new MC_FriendsAndFamilyType();
			if (item.FriendsAndFamilyTypeID != default(string)) {
				result.LoadByKey(item.FriendsAndFamilyTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string FriendsAndFamilyTypeID {
			get { return GetColumnValue<string>(Columns.FriendsAndFamilyTypeID); }
			set {
				SetColumnValue(Columns.FriendsAndFamilyTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FriendsAndFamilyTypeID));
			}
		}
		[DataMember]
		public string FriendsAndFamilyType {
			get { return GetColumnValue<string>(Columns.FriendsAndFamilyType); }
			set {
				SetColumnValue(Columns.FriendsAndFamilyType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FriendsAndFamilyType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return FriendsAndFamilyType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn FriendsAndFamilyTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn FriendsAndFamilyTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string FriendsAndFamilyTypeID = @"FriendsAndFamilyTypeID";
			public static readonly string FriendsAndFamilyType = @"FriendsAndFamilyType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return FriendsAndFamilyTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountSalesInformationCollection _MS_AccountSalesInformationsCol;
		//Relationship: FK_MS_AccountSalesInformations_MC_FriendsAndFamilyTypes
		public MS_AccountSalesInformationCollection MS_AccountSalesInformationsCol
		{
			get
			{
				if(_MS_AccountSalesInformationsCol == null) {
					_MS_AccountSalesInformationsCol = new MS_AccountSalesInformationCollection();
					_MS_AccountSalesInformationsCol.LoadAndCloseReader(MS_AccountSalesInformation.Query()
						.WHERE(MS_AccountSalesInformation.Columns.FriendsAndFamilyTypeId, FriendsAndFamilyTypeID).ExecuteReader());
				}
				return _MS_AccountSalesInformationsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_Holiday class.
	/// </summary>
	[DataContract]
	public partial class MC_HolidayCollection : ActiveList<MC_Holiday, MC_HolidayCollection>
	{
		public static MC_HolidayCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_HolidayCollection result = new MC_HolidayCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_Holiday item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_Holidays table.
	/// </summary>
	[DataContract]
	public partial class MC_Holiday : ActiveRecord<MC_Holiday>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_Holiday()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_Holidays", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarHolidayID = new TableSchema.TableColumn(schema);
				colvarHolidayID.ColumnName = "HolidayID";
				colvarHolidayID.DataType = DbType.Int64;
				colvarHolidayID.MaxLength = 0;
				colvarHolidayID.AutoIncrement = true;
				colvarHolidayID.IsNullable = false;
				colvarHolidayID.IsPrimaryKey = false;
				colvarHolidayID.IsForeignKey = false;
				colvarHolidayID.IsReadOnly = false;
				colvarHolidayID.DefaultSetting = @"";
				colvarHolidayID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHolidayID);

				TableSchema.TableColumn colvarHolidayDate = new TableSchema.TableColumn(schema);
				colvarHolidayDate.ColumnName = "HolidayDate";
				colvarHolidayDate.DataType = DbType.DateTime;
				colvarHolidayDate.MaxLength = 0;
				colvarHolidayDate.AutoIncrement = false;
				colvarHolidayDate.IsNullable = false;
				colvarHolidayDate.IsPrimaryKey = false;
				colvarHolidayDate.IsForeignKey = false;
				colvarHolidayDate.IsReadOnly = false;
				colvarHolidayDate.DefaultSetting = @"";
				colvarHolidayDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHolidayDate);

				TableSchema.TableColumn colvarHolidayName = new TableSchema.TableColumn(schema);
				colvarHolidayName.ColumnName = "HolidayName";
				colvarHolidayName.DataType = DbType.AnsiString;
				colvarHolidayName.MaxLength = 50;
				colvarHolidayName.AutoIncrement = false;
				colvarHolidayName.IsNullable = false;
				colvarHolidayName.IsPrimaryKey = false;
				colvarHolidayName.IsForeignKey = false;
				colvarHolidayName.IsReadOnly = false;
				colvarHolidayName.DefaultSetting = @"";
				colvarHolidayName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHolidayName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_Holidays",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public long HolidayID {
			get { return GetColumnValue<long>(Columns.HolidayID); }
			set {
				SetColumnValue(Columns.HolidayID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HolidayID));
			}
		}
		[DataMember]
		public DateTime HolidayDate {
			get { return GetColumnValue<DateTime>(Columns.HolidayDate); }
			set {
				SetColumnValue(Columns.HolidayDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HolidayDate));
			}
		}
		[DataMember]
		public string HolidayName {
			get { return GetColumnValue<string>(Columns.HolidayName); }
			set {
				SetColumnValue(Columns.HolidayName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HolidayName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return HolidayID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn HolidayIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn HolidayDateColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn HolidayNameColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string HolidayID = @"HolidayID";
			public static readonly string HolidayDate = @"HolidayDate";
			public static readonly string HolidayName = @"HolidayName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_Localization class.
	/// </summary>
	[DataContract]
	public partial class MC_LocalizationCollection : ActiveList<MC_Localization, MC_LocalizationCollection>
	{
		public static MC_LocalizationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_LocalizationCollection result = new MC_LocalizationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_Localization item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_Localization table.
	/// </summary>
	[DataContract]
	public partial class MC_Localization : ActiveRecord<MC_Localization>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_Localization()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_Localization", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLocalizationID = new TableSchema.TableColumn(schema);
				colvarLocalizationID.ColumnName = "LocalizationID";
				colvarLocalizationID.DataType = DbType.AnsiString;
				colvarLocalizationID.MaxLength = 20;
				colvarLocalizationID.AutoIncrement = false;
				colvarLocalizationID.IsNullable = false;
				colvarLocalizationID.IsPrimaryKey = true;
				colvarLocalizationID.IsForeignKey = false;
				colvarLocalizationID.IsReadOnly = false;
				colvarLocalizationID.DefaultSetting = @"";
				colvarLocalizationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocalizationID);

				TableSchema.TableColumn colvarLocalizationName = new TableSchema.TableColumn(schema);
				colvarLocalizationName.ColumnName = "LocalizationName";
				colvarLocalizationName.DataType = DbType.String;
				colvarLocalizationName.MaxLength = 50;
				colvarLocalizationName.AutoIncrement = false;
				colvarLocalizationName.IsNullable = false;
				colvarLocalizationName.IsPrimaryKey = false;
				colvarLocalizationName.IsForeignKey = false;
				colvarLocalizationName.IsReadOnly = false;
				colvarLocalizationName.DefaultSetting = @"";
				colvarLocalizationName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocalizationName);

				TableSchema.TableColumn colvarMSLocalId = new TableSchema.TableColumn(schema);
				colvarMSLocalId.ColumnName = "MSLocalId";
				colvarMSLocalId.DataType = DbType.Int32;
				colvarMSLocalId.MaxLength = 0;
				colvarMSLocalId.AutoIncrement = false;
				colvarMSLocalId.IsNullable = false;
				colvarMSLocalId.IsPrimaryKey = false;
				colvarMSLocalId.IsForeignKey = false;
				colvarMSLocalId.IsReadOnly = false;
				colvarMSLocalId.DefaultSetting = @"";
				colvarMSLocalId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMSLocalId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_Localization",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_Localization LoadFrom(MC_Localization item)
		{
			MC_Localization result = new MC_Localization();
			if (item.LocalizationID != default(string)) {
				result.LoadByKey(item.LocalizationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string LocalizationID {
			get { return GetColumnValue<string>(Columns.LocalizationID); }
			set {
				SetColumnValue(Columns.LocalizationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LocalizationID));
			}
		}
		[DataMember]
		public string LocalizationName {
			get { return GetColumnValue<string>(Columns.LocalizationName); }
			set {
				SetColumnValue(Columns.LocalizationName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LocalizationName));
			}
		}
		[DataMember]
		public int MSLocalId {
			get { return GetColumnValue<int>(Columns.MSLocalId); }
			set {
				SetColumnValue(Columns.MSLocalId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MSLocalId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return LocalizationName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn LocalizationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LocalizationNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MSLocalIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LocalizationID = @"LocalizationID";
			public static readonly string LocalizationName = @"LocalizationName";
			public static readonly string MSLocalId = @"MSLocalId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LocalizationID; }
		}
		*/

		#region Foreign Collections

		private AE_CustomerCollection _AE_CustomersCol;
		//Relationship: FK_AE_Customers_MC_Localization
		public AE_CustomerCollection AE_CustomersCol
		{
			get
			{
				if(_AE_CustomersCol == null) {
					_AE_CustomersCol = new AE_CustomerCollection();
					_AE_CustomersCol.LoadAndCloseReader(AE_Customer.Query()
						.WHERE(AE_Customer.Columns.LocalizationId, LocalizationID).ExecuteReader());
				}
				return _AE_CustomersCol;
			}
		}

		private QL_LeadCollection _QL_LeadsCol;
		//Relationship: FK_QL_Leads_MC_Localization
		public QL_LeadCollection QL_LeadsCol
		{
			get
			{
				if(_QL_LeadsCol == null) {
					_QL_LeadsCol = new QL_LeadCollection();
					_QL_LeadsCol.LoadAndCloseReader(QL_Lead.Query()
						.WHERE(QL_Lead.Columns.LocalizationId, LocalizationID).ExecuteReader());
				}
				return _QL_LeadsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_Market class.
	/// </summary>
	[DataContract]
	public partial class MC_MarketCollection : ActiveList<MC_Market, MC_MarketCollection>
	{
		public static MC_MarketCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_MarketCollection result = new MC_MarketCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_Market item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_Markets table.
	/// </summary>
	[DataContract]
	public partial class MC_Market : ActiveRecord<MC_Market>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_Market()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_Markets", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMarketID = new TableSchema.TableColumn(schema);
				colvarMarketID.ColumnName = "MarketID";
				colvarMarketID.DataType = DbType.Int32;
				colvarMarketID.MaxLength = 0;
				colvarMarketID.AutoIncrement = true;
				colvarMarketID.IsNullable = false;
				colvarMarketID.IsPrimaryKey = true;
				colvarMarketID.IsForeignKey = false;
				colvarMarketID.IsReadOnly = false;
				colvarMarketID.DefaultSetting = @"";
				colvarMarketID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMarketID);

				TableSchema.TableColumn colvarMarketName = new TableSchema.TableColumn(schema);
				colvarMarketName.ColumnName = "MarketName";
				colvarMarketName.DataType = DbType.String;
				colvarMarketName.MaxLength = 50;
				colvarMarketName.AutoIncrement = false;
				colvarMarketName.IsNullable = false;
				colvarMarketName.IsPrimaryKey = false;
				colvarMarketName.IsForeignKey = false;
				colvarMarketName.IsReadOnly = false;
				colvarMarketName.DefaultSetting = @"";
				colvarMarketName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMarketName);

				TableSchema.TableColumn colvarIsPurchasedLine = new TableSchema.TableColumn(schema);
				colvarIsPurchasedLine.ColumnName = "IsPurchasedLine";
				colvarIsPurchasedLine.DataType = DbType.Boolean;
				colvarIsPurchasedLine.MaxLength = 0;
				colvarIsPurchasedLine.AutoIncrement = false;
				colvarIsPurchasedLine.IsNullable = false;
				colvarIsPurchasedLine.IsPrimaryKey = false;
				colvarIsPurchasedLine.IsForeignKey = false;
				colvarIsPurchasedLine.IsReadOnly = false;
				colvarIsPurchasedLine.DefaultSetting = @"";
				colvarIsPurchasedLine.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPurchasedLine);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_Markets",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_Market LoadFrom(MC_Market item)
		{
			MC_Market result = new MC_Market();
			if (item.MarketID != default(int)) {
				result.LoadByKey(item.MarketID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MarketID {
			get { return GetColumnValue<int>(Columns.MarketID); }
			set {
				SetColumnValue(Columns.MarketID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MarketID));
			}
		}
		[DataMember]
		public string MarketName {
			get { return GetColumnValue<string>(Columns.MarketName); }
			set {
				SetColumnValue(Columns.MarketName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MarketName));
			}
		}
		[DataMember]
		public bool IsPurchasedLine {
			get { return GetColumnValue<bool>(Columns.IsPurchasedLine); }
			set {
				SetColumnValue(Columns.IsPurchasedLine, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPurchasedLine));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return MarketName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MarketIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MarketNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsPurchasedLineColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MarketID = @"MarketID";
			public static readonly string MarketName = @"MarketName";
			public static readonly string IsPurchasedLine = @"IsPurchasedLine";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MarketID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_PaymentBankAccountType class.
	/// </summary>
	[DataContract]
	public partial class MC_PaymentBankAccountTypeCollection : ActiveList<MC_PaymentBankAccountType, MC_PaymentBankAccountTypeCollection>
	{
		public static MC_PaymentBankAccountTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_PaymentBankAccountTypeCollection result = new MC_PaymentBankAccountTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_PaymentBankAccountType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_PaymentBankAccountTypes table.
	/// </summary>
	[DataContract]
	public partial class MC_PaymentBankAccountType : ActiveRecord<MC_PaymentBankAccountType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_PaymentBankAccountType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_PaymentBankAccountTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBankAccountTypeID = new TableSchema.TableColumn(schema);
				colvarBankAccountTypeID.ColumnName = "BankAccountTypeID";
				colvarBankAccountTypeID.DataType = DbType.Int32;
				colvarBankAccountTypeID.MaxLength = 0;
				colvarBankAccountTypeID.AutoIncrement = true;
				colvarBankAccountTypeID.IsNullable = false;
				colvarBankAccountTypeID.IsPrimaryKey = true;
				colvarBankAccountTypeID.IsForeignKey = false;
				colvarBankAccountTypeID.IsReadOnly = false;
				colvarBankAccountTypeID.DefaultSetting = @"";
				colvarBankAccountTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBankAccountTypeID);

				TableSchema.TableColumn colvarAccountType = new TableSchema.TableColumn(schema);
				colvarAccountType.ColumnName = "AccountType";
				colvarAccountType.DataType = DbType.String;
				colvarAccountType.MaxLength = 50;
				colvarAccountType.AutoIncrement = false;
				colvarAccountType.IsNullable = false;
				colvarAccountType.IsPrimaryKey = false;
				colvarAccountType.IsForeignKey = false;
				colvarAccountType.IsReadOnly = false;
				colvarAccountType.DefaultSetting = @"";
				colvarAccountType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_PaymentBankAccountTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_PaymentBankAccountType LoadFrom(MC_PaymentBankAccountType item)
		{
			MC_PaymentBankAccountType result = new MC_PaymentBankAccountType();
			if (item.BankAccountTypeID != default(int)) {
				result.LoadByKey(item.BankAccountTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BankAccountTypeID {
			get { return GetColumnValue<int>(Columns.BankAccountTypeID); }
			set {
				SetColumnValue(Columns.BankAccountTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BankAccountTypeID));
			}
		}
		[DataMember]
		public string AccountType {
			get { return GetColumnValue<string>(Columns.AccountType); }
			set {
				SetColumnValue(Columns.AccountType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BankAccountTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BankAccountTypeID = @"BankAccountTypeID";
			public static readonly string AccountType = @"AccountType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BankAccountTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_PaymentCreditCardType class.
	/// </summary>
	[DataContract]
	public partial class MC_PaymentCreditCardTypeCollection : ActiveList<MC_PaymentCreditCardType, MC_PaymentCreditCardTypeCollection>
	{
		public static MC_PaymentCreditCardTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_PaymentCreditCardTypeCollection result = new MC_PaymentCreditCardTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_PaymentCreditCardType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_PaymentCreditCardTypes table.
	/// </summary>
	[DataContract]
	public partial class MC_PaymentCreditCardType : ActiveRecord<MC_PaymentCreditCardType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_PaymentCreditCardType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_PaymentCreditCardTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditCardTypeID = new TableSchema.TableColumn(schema);
				colvarCreditCardTypeID.ColumnName = "CreditCardTypeID";
				colvarCreditCardTypeID.DataType = DbType.Int32;
				colvarCreditCardTypeID.MaxLength = 0;
				colvarCreditCardTypeID.AutoIncrement = true;
				colvarCreditCardTypeID.IsNullable = false;
				colvarCreditCardTypeID.IsPrimaryKey = true;
				colvarCreditCardTypeID.IsForeignKey = false;
				colvarCreditCardTypeID.IsReadOnly = false;
				colvarCreditCardTypeID.DefaultSetting = @"";
				colvarCreditCardTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditCardTypeID);

				TableSchema.TableColumn colvarCreditCard = new TableSchema.TableColumn(schema);
				colvarCreditCard.ColumnName = "CreditCard";
				colvarCreditCard.DataType = DbType.AnsiString;
				colvarCreditCard.MaxLength = 50;
				colvarCreditCard.AutoIncrement = false;
				colvarCreditCard.IsNullable = false;
				colvarCreditCard.IsPrimaryKey = false;
				colvarCreditCard.IsForeignKey = false;
				colvarCreditCard.IsReadOnly = false;
				colvarCreditCard.DefaultSetting = @"";
				colvarCreditCard.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditCard);

				TableSchema.TableColumn colvarShortName = new TableSchema.TableColumn(schema);
				colvarShortName.ColumnName = "ShortName";
				colvarShortName.DataType = DbType.AnsiString;
				colvarShortName.MaxLength = 10;
				colvarShortName.AutoIncrement = false;
				colvarShortName.IsNullable = false;
				colvarShortName.IsPrimaryKey = false;
				colvarShortName.IsForeignKey = false;
				colvarShortName.IsReadOnly = false;
				colvarShortName.DefaultSetting = @"";
				colvarShortName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_PaymentCreditCardTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_PaymentCreditCardType LoadFrom(MC_PaymentCreditCardType item)
		{
			MC_PaymentCreditCardType result = new MC_PaymentCreditCardType();
			if (item.CreditCardTypeID != default(int)) {
				result.LoadByKey(item.CreditCardTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CreditCardTypeID {
			get { return GetColumnValue<int>(Columns.CreditCardTypeID); }
			set {
				SetColumnValue(Columns.CreditCardTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditCardTypeID));
			}
		}
		[DataMember]
		public string CreditCard {
			get { return GetColumnValue<string>(Columns.CreditCard); }
			set {
				SetColumnValue(Columns.CreditCard, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditCard));
			}
		}
		[DataMember]
		public string ShortName {
			get { return GetColumnValue<string>(Columns.ShortName); }
			set {
				SetColumnValue(Columns.ShortName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CreditCard;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditCardTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CreditCardColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ShortNameColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditCardTypeID = @"CreditCardTypeID";
			public static readonly string CreditCard = @"CreditCard";
			public static readonly string ShortName = @"ShortName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditCardTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MC_PoliticalCountry class.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalCountryCollection : ActiveList<MC_PoliticalCountry, MC_PoliticalCountryCollection>
	{
		public static MC_PoliticalCountryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_PoliticalCountryCollection result = new MC_PoliticalCountryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_PoliticalCountry item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_PoliticalCountrys table.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalCountry : ActiveRecord<MC_PoliticalCountry>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string CanadaID = "CAN";
			[EnumMember()] public const string No_CountryID = "NON";
			[EnumMember()] public const string United_States_Of_AmericaID = "USA";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_PoliticalCountry()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_PoliticalCountrys", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCountryID = new TableSchema.TableColumn(schema);
				colvarCountryID.ColumnName = "CountryID";
				colvarCountryID.DataType = DbType.String;
				colvarCountryID.MaxLength = 10;
				colvarCountryID.AutoIncrement = false;
				colvarCountryID.IsNullable = false;
				colvarCountryID.IsPrimaryKey = true;
				colvarCountryID.IsForeignKey = false;
				colvarCountryID.IsReadOnly = false;
				colvarCountryID.DefaultSetting = @"";
				colvarCountryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryID);

				TableSchema.TableColumn colvarCountryName = new TableSchema.TableColumn(schema);
				colvarCountryName.ColumnName = "CountryName";
				colvarCountryName.DataType = DbType.String;
				colvarCountryName.MaxLength = 150;
				colvarCountryName.AutoIncrement = false;
				colvarCountryName.IsNullable = false;
				colvarCountryName.IsPrimaryKey = false;
				colvarCountryName.IsForeignKey = false;
				colvarCountryName.IsReadOnly = false;
				colvarCountryName.DefaultSetting = @"";
				colvarCountryName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryName);

				TableSchema.TableColumn colvarCountryAB = new TableSchema.TableColumn(schema);
				colvarCountryAB.ColumnName = "CountryAB";
				colvarCountryAB.DataType = DbType.String;
				colvarCountryAB.MaxLength = 50;
				colvarCountryAB.AutoIncrement = false;
				colvarCountryAB.IsNullable = false;
				colvarCountryAB.IsPrimaryKey = false;
				colvarCountryAB.IsForeignKey = false;
				colvarCountryAB.IsReadOnly = false;
				colvarCountryAB.DefaultSetting = @"";
				colvarCountryAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryAB);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_PoliticalCountrys",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_PoliticalCountry LoadFrom(MC_PoliticalCountry item)
		{
			MC_PoliticalCountry result = new MC_PoliticalCountry();
			if (item.CountryID != default(string)) {
				result.LoadByKey(item.CountryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CountryID {
			get { return GetColumnValue<string>(Columns.CountryID); }
			set {
				SetColumnValue(Columns.CountryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryID));
			}
		}
		[DataMember]
		public string CountryName {
			get { return GetColumnValue<string>(Columns.CountryName); }
			set {
				SetColumnValue(Columns.CountryName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryName));
			}
		}
		[DataMember]
		public string CountryAB {
			get { return GetColumnValue<string>(Columns.CountryAB); }
			set {
				SetColumnValue(Columns.CountryAB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryAB));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CountryName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CountryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CountryNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CountryABColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CountryID = @"CountryID";
			public static readonly string CountryName = @"CountryName";
			public static readonly string CountryAB = @"CountryAB";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CountryID; }
		}
		*/

		#region Foreign Collections

		private MC_AddressCollection _MC_AddressesCol;
		//Relationship: FK_MC_Addresss_MC_PoliticalCountrys
		public MC_AddressCollection MC_AddressesCol
		{
			get
			{
				if(_MC_AddressesCol == null) {
					_MC_AddressesCol = new MC_AddressCollection();
					_MC_AddressesCol.LoadAndCloseReader(MC_Address.Query()
						.WHERE(MC_Address.Columns.CountryId, CountryID).ExecuteReader());
				}
				return _MC_AddressesCol;
			}
		}

		private MC_PoliticalStateCollection _MC_PoliticalStatesCol;
		//Relationship: FK_MC_PoliticalStates_MC_PoliticalCountrys
		public MC_PoliticalStateCollection MC_PoliticalStatesCol
		{
			get
			{
				if(_MC_PoliticalStatesCol == null) {
					_MC_PoliticalStatesCol = new MC_PoliticalStateCollection();
					_MC_PoliticalStatesCol.LoadAndCloseReader(MC_PoliticalState.Query()
						.WHERE(MC_PoliticalState.Columns.CountryId, CountryID).ExecuteReader());
				}
				return _MC_PoliticalStatesCol;
			}
		}

		private QL_AddressCollection _QL_AddressesCol;
		//Relationship: FK_QL_Address_MC_PoliticalCountrys
		public QL_AddressCollection QL_AddressesCol
		{
			get
			{
				if(_QL_AddressesCol == null) {
					_QL_AddressesCol = new QL_AddressCollection();
					_QL_AddressesCol.LoadAndCloseReader(QL_Address.Query()
						.WHERE(QL_Address.Columns.CountryId, CountryID).ExecuteReader());
				}
				return _QL_AddressesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_PoliticalState class.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalStateCollection : ActiveList<MC_PoliticalState, MC_PoliticalStateCollection>
	{
		public static MC_PoliticalStateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_PoliticalStateCollection result = new MC_PoliticalStateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_PoliticalState item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_PoliticalStates table.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalState : ActiveRecord<MC_PoliticalState>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_PoliticalState()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_PoliticalStates", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarStateID = new TableSchema.TableColumn(schema);
				colvarStateID.ColumnName = "StateID";
				colvarStateID.DataType = DbType.AnsiString;
				colvarStateID.MaxLength = 4;
				colvarStateID.AutoIncrement = false;
				colvarStateID.IsNullable = false;
				colvarStateID.IsPrimaryKey = true;
				colvarStateID.IsForeignKey = false;
				colvarStateID.IsReadOnly = false;
				colvarStateID.DefaultSetting = @"";
				colvarStateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateID);

				TableSchema.TableColumn colvarStateName = new TableSchema.TableColumn(schema);
				colvarStateName.ColumnName = "StateName";
				colvarStateName.DataType = DbType.String;
				colvarStateName.MaxLength = 100;
				colvarStateName.AutoIncrement = false;
				colvarStateName.IsNullable = false;
				colvarStateName.IsPrimaryKey = false;
				colvarStateName.IsForeignKey = false;
				colvarStateName.IsReadOnly = false;
				colvarStateName.DefaultSetting = @"";
				colvarStateName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateName);

				TableSchema.TableColumn colvarStateAB = new TableSchema.TableColumn(schema);
				colvarStateAB.ColumnName = "StateAB";
				colvarStateAB.DataType = DbType.AnsiStringFixedLength;
				colvarStateAB.MaxLength = 2;
				colvarStateAB.AutoIncrement = false;
				colvarStateAB.IsNullable = false;
				colvarStateAB.IsPrimaryKey = false;
				colvarStateAB.IsForeignKey = false;
				colvarStateAB.IsReadOnly = false;
				colvarStateAB.DefaultSetting = @"";
				colvarStateAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateAB);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = false;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = true;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"(N'USA')";
				colvarCountryId.ForeignKeyTableName = "MC_PoliticalCountrys";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarGLStateCode = new TableSchema.TableColumn(schema);
				colvarGLStateCode.ColumnName = "GLStateCode";
				colvarGLStateCode.DataType = DbType.String;
				colvarGLStateCode.MaxLength = 3;
				colvarGLStateCode.AutoIncrement = false;
				colvarGLStateCode.IsNullable = true;
				colvarGLStateCode.IsPrimaryKey = false;
				colvarGLStateCode.IsForeignKey = false;
				colvarGLStateCode.IsReadOnly = false;
				colvarGLStateCode.DefaultSetting = @"";
				colvarGLStateCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGLStateCode);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_PoliticalStates",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_PoliticalState LoadFrom(MC_PoliticalState item)
		{
			MC_PoliticalState result = new MC_PoliticalState();
			if (item.StateID != default(string)) {
				result.LoadByKey(item.StateID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string StateID {
			get { return GetColumnValue<string>(Columns.StateID); }
			set {
				SetColumnValue(Columns.StateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateID));
			}
		}
		[DataMember]
		public string StateName {
			get { return GetColumnValue<string>(Columns.StateName); }
			set {
				SetColumnValue(Columns.StateName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateName));
			}
		}
		[DataMember]
		public string StateAB {
			get { return GetColumnValue<string>(Columns.StateAB); }
			set {
				SetColumnValue(Columns.StateAB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateAB));
			}
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set {
				SetColumnValue(Columns.CountryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryId));
			}
		}
		[DataMember]
		public string GLStateCode {
			get { return GetColumnValue<string>(Columns.GLStateCode); }
			set {
				SetColumnValue(Columns.GLStateCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GLStateCode));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_PoliticalCountry _Country;
		//Relationship: FK_MC_PoliticalStates_MC_PoliticalCountrys
		public MC_PoliticalCountry Country
		{
			get
			{
				if(_Country == null) {
					_Country = MC_PoliticalCountry.FetchByID(this.CountryId);
				}
				return _Country;
			}
			set
			{
				SetColumnValue("CountryId", value.CountryID);
				_Country = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return StateName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn StateIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StateNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn StateABColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GLStateCodeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string StateID = @"StateID";
			public static readonly string StateName = @"StateName";
			public static readonly string StateAB = @"StateAB";
			public static readonly string CountryId = @"CountryId";
			public static readonly string GLStateCode = @"GLStateCode";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return StateID; }
		}
		*/

		#region Foreign Collections

		private MC_AddressCollection _MC_AddressesCol;
		//Relationship: FK_MC_Addresss_MC_PoliticalStates
		public MC_AddressCollection MC_AddressesCol
		{
			get
			{
				if(_MC_AddressesCol == null) {
					_MC_AddressesCol = new MC_AddressCollection();
					_MC_AddressesCol.LoadAndCloseReader(MC_Address.Query()
						.WHERE(MC_Address.Columns.StateId, StateID).ExecuteReader());
				}
				return _MC_AddressesCol;
			}
		}

		private QL_AddressCollection _QL_AddressesCol;
		//Relationship: FK_QL_Address_MC_PoliticalStates
		public QL_AddressCollection QL_AddressesCol
		{
			get
			{
				if(_QL_AddressesCol == null) {
					_QL_AddressesCol = new QL_AddressCollection();
					_QL_AddressesCol.LoadAndCloseReader(QL_Address.Query()
						.WHERE(QL_Address.Columns.StateId, StateID).ExecuteReader());
				}
				return _QL_AddressesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_PoliticalTimeZone class.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalTimeZoneCollection : ActiveList<MC_PoliticalTimeZone, MC_PoliticalTimeZoneCollection>
	{
		public static MC_PoliticalTimeZoneCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_PoliticalTimeZoneCollection result = new MC_PoliticalTimeZoneCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_PoliticalTimeZone item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_PoliticalTimeZones table.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalTimeZone : ActiveRecord<MC_PoliticalTimeZone>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum TimeZoneEnum : int
		{
			[EnumMember()] No_Zone = 0,
			[EnumMember()] Atlantic_Daylight_Time = 1,
			[EnumMember()] Atlantic_Standard_Time = 2,
			[EnumMember()] Eastern_Daylight_Time = 3,
			[EnumMember()] Eastern_Standard_Time = 4,
			[EnumMember()] Central_Daylight_Time = 5,
			[EnumMember()] Central_Standard_Time = 6,
			[EnumMember()] Mountain_Daylight_Time = 7,
			[EnumMember()] Mountain_Standard_Time = 8,
			[EnumMember()] Pacific_Daylight_Time = 9,
			[EnumMember()] Pacific_Standard_Time = 10,
			[EnumMember()] Alaska_Daylight_Time = 11,
			[EnumMember()] Alaska_Standard_Time = 12,
			[EnumMember()] HawaiiAleutian_Daylight_Time = 13,
			[EnumMember()] HawaiiAleutian_Standard_Time = 14,
		}

		//[DataMember]
		//public TimeZoneEnum TimeZoneCode
		//{
		//	get { return (TimeZoneEnum)TimeZoneID; }
		//	set { TimeZoneID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_PoliticalTimeZone()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_PoliticalTimeZones", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTimeZoneID = new TableSchema.TableColumn(schema);
				colvarTimeZoneID.ColumnName = "TimeZoneID";
				colvarTimeZoneID.DataType = DbType.Int32;
				colvarTimeZoneID.MaxLength = 0;
				colvarTimeZoneID.AutoIncrement = false;
				colvarTimeZoneID.IsNullable = false;
				colvarTimeZoneID.IsPrimaryKey = true;
				colvarTimeZoneID.IsForeignKey = false;
				colvarTimeZoneID.IsReadOnly = false;
				colvarTimeZoneID.DefaultSetting = @"";
				colvarTimeZoneID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneID);

				TableSchema.TableColumn colvarTimeZoneName = new TableSchema.TableColumn(schema);
				colvarTimeZoneName.ColumnName = "TimeZoneName";
				colvarTimeZoneName.DataType = DbType.AnsiString;
				colvarTimeZoneName.MaxLength = 50;
				colvarTimeZoneName.AutoIncrement = false;
				colvarTimeZoneName.IsNullable = false;
				colvarTimeZoneName.IsPrimaryKey = false;
				colvarTimeZoneName.IsForeignKey = false;
				colvarTimeZoneName.IsReadOnly = false;
				colvarTimeZoneName.DefaultSetting = @"";
				colvarTimeZoneName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneName);

				TableSchema.TableColumn colvarTimeZoneAB = new TableSchema.TableColumn(schema);
				colvarTimeZoneAB.ColumnName = "TimeZoneAB";
				colvarTimeZoneAB.DataType = DbType.AnsiString;
				colvarTimeZoneAB.MaxLength = 4;
				colvarTimeZoneAB.AutoIncrement = false;
				colvarTimeZoneAB.IsNullable = false;
				colvarTimeZoneAB.IsPrimaryKey = false;
				colvarTimeZoneAB.IsForeignKey = false;
				colvarTimeZoneAB.IsReadOnly = false;
				colvarTimeZoneAB.DefaultSetting = @"";
				colvarTimeZoneAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneAB);

				TableSchema.TableColumn colvarCentralTime = new TableSchema.TableColumn(schema);
				colvarCentralTime.ColumnName = "CentralTime";
				colvarCentralTime.DataType = DbType.AnsiString;
				colvarCentralTime.MaxLength = 4;
				colvarCentralTime.AutoIncrement = false;
				colvarCentralTime.IsNullable = false;
				colvarCentralTime.IsPrimaryKey = false;
				colvarCentralTime.IsForeignKey = false;
				colvarCentralTime.IsReadOnly = false;
				colvarCentralTime.DefaultSetting = @"('UTC')";
				colvarCentralTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCentralTime);

				TableSchema.TableColumn colvarHourDifference = new TableSchema.TableColumn(schema);
				colvarHourDifference.ColumnName = "HourDifference";
				colvarHourDifference.DataType = DbType.Int32;
				colvarHourDifference.MaxLength = 0;
				colvarHourDifference.AutoIncrement = false;
				colvarHourDifference.IsNullable = false;
				colvarHourDifference.IsPrimaryKey = false;
				colvarHourDifference.IsForeignKey = false;
				colvarHourDifference.IsReadOnly = false;
				colvarHourDifference.DefaultSetting = @"";
				colvarHourDifference.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHourDifference);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MC_PoliticalTimeZones",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_PoliticalTimeZone LoadFrom(MC_PoliticalTimeZone item)
		{
			MC_PoliticalTimeZone result = new MC_PoliticalTimeZone();
			if (item.TimeZoneID != default(int)) {
				result.LoadByKey(item.TimeZoneID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TimeZoneID {
			get { return GetColumnValue<int>(Columns.TimeZoneID); }
			set {
				SetColumnValue(Columns.TimeZoneID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneID));
			}
		}
		[DataMember]
		public string TimeZoneName {
			get { return GetColumnValue<string>(Columns.TimeZoneName); }
			set {
				SetColumnValue(Columns.TimeZoneName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneName));
			}
		}
		[DataMember]
		public string TimeZoneAB {
			get { return GetColumnValue<string>(Columns.TimeZoneAB); }
			set {
				SetColumnValue(Columns.TimeZoneAB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneAB));
			}
		}
		[DataMember]
		public string CentralTime {
			get { return GetColumnValue<string>(Columns.CentralTime); }
			set {
				SetColumnValue(Columns.CentralTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CentralTime));
			}
		}
		[DataMember]
		public int HourDifference {
			get { return GetColumnValue<int>(Columns.HourDifference); }
			set {
				SetColumnValue(Columns.HourDifference, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HourDifference));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return TimeZoneName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TimeZoneIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TimeZoneNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TimeZoneABColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CentralTimeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn HourDifferenceColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TimeZoneID = @"TimeZoneID";
			public static readonly string TimeZoneName = @"TimeZoneName";
			public static readonly string TimeZoneAB = @"TimeZoneAB";
			public static readonly string CentralTime = @"CentralTime";
			public static readonly string HourDifference = @"HourDifference";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TimeZoneID; }
		}
		*/

		#region Foreign Collections

		private MC_AddressCollection _MC_AddressesCol;
		//Relationship: FK_MC_Addresss_MC_PoliticalTimeZones
		public MC_AddressCollection MC_AddressesCol
		{
			get
			{
				if(_MC_AddressesCol == null) {
					_MC_AddressesCol = new MC_AddressCollection();
					_MC_AddressesCol.LoadAndCloseReader(MC_Address.Query()
						.WHERE(MC_Address.Columns.TimeZoneId, TimeZoneID).ExecuteReader());
				}
				return _MC_AddressesCol;
			}
		}

		private QL_AddressCollection _QL_AddressesCol;
		//Relationship: FK_QL_Address_MC_PoliticalTimeZones
		public QL_AddressCollection QL_AddressesCol
		{
			get
			{
				if(_QL_AddressesCol == null) {
					_QL_AddressesCol = new QL_AddressCollection();
					_QL_AddressesCol.LoadAndCloseReader(QL_Address.Query()
						.WHERE(QL_Address.Columns.TimeZoneId, TimeZoneID).ExecuteReader());
				}
				return _QL_AddressesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MG_AuthorizeNetConfig class.
	/// </summary>
	[DataContract]
	public partial class MG_AuthorizeNetConfigCollection : ActiveList<MG_AuthorizeNetConfig, MG_AuthorizeNetConfigCollection>
	{
		public static MG_AuthorizeNetConfigCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MG_AuthorizeNetConfigCollection result = new MG_AuthorizeNetConfigCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MG_AuthorizeNetConfig item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MG_AuthorizeNetConfigs table.
	/// </summary>
	[DataContract]
	public partial class MG_AuthorizeNetConfig : ActiveRecord<MG_AuthorizeNetConfig>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MG_AuthorizeNetConfig()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MG_AuthorizeNetConfigs", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAuthorizeNetConfigID = new TableSchema.TableColumn(schema);
				colvarAuthorizeNetConfigID.ColumnName = "AuthorizeNetConfigID";
				colvarAuthorizeNetConfigID.DataType = DbType.Int16;
				colvarAuthorizeNetConfigID.MaxLength = 0;
				colvarAuthorizeNetConfigID.AutoIncrement = true;
				colvarAuthorizeNetConfigID.IsNullable = false;
				colvarAuthorizeNetConfigID.IsPrimaryKey = true;
				colvarAuthorizeNetConfigID.IsForeignKey = false;
				colvarAuthorizeNetConfigID.IsReadOnly = false;
				colvarAuthorizeNetConfigID.DefaultSetting = @"";
				colvarAuthorizeNetConfigID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthorizeNetConfigID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"((5000))";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarLiveApiLogin = new TableSchema.TableColumn(schema);
				colvarLiveApiLogin.ColumnName = "LiveApiLogin";
				colvarLiveApiLogin.DataType = DbType.AnsiString;
				colvarLiveApiLogin.MaxLength = 50;
				colvarLiveApiLogin.AutoIncrement = false;
				colvarLiveApiLogin.IsNullable = false;
				colvarLiveApiLogin.IsPrimaryKey = false;
				colvarLiveApiLogin.IsForeignKey = false;
				colvarLiveApiLogin.IsReadOnly = false;
				colvarLiveApiLogin.DefaultSetting = @"";
				colvarLiveApiLogin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLiveApiLogin);

				TableSchema.TableColumn colvarLiveTransactionKey = new TableSchema.TableColumn(schema);
				colvarLiveTransactionKey.ColumnName = "LiveTransactionKey";
				colvarLiveTransactionKey.DataType = DbType.AnsiString;
				colvarLiveTransactionKey.MaxLength = 50;
				colvarLiveTransactionKey.AutoIncrement = false;
				colvarLiveTransactionKey.IsNullable = false;
				colvarLiveTransactionKey.IsPrimaryKey = false;
				colvarLiveTransactionKey.IsForeignKey = false;
				colvarLiveTransactionKey.IsReadOnly = false;
				colvarLiveTransactionKey.DefaultSetting = @"";
				colvarLiveTransactionKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLiveTransactionKey);

				TableSchema.TableColumn colvarTestApiLogin = new TableSchema.TableColumn(schema);
				colvarTestApiLogin.ColumnName = "TestApiLogin";
				colvarTestApiLogin.DataType = DbType.AnsiString;
				colvarTestApiLogin.MaxLength = 50;
				colvarTestApiLogin.AutoIncrement = false;
				colvarTestApiLogin.IsNullable = true;
				colvarTestApiLogin.IsPrimaryKey = false;
				colvarTestApiLogin.IsForeignKey = false;
				colvarTestApiLogin.IsReadOnly = false;
				colvarTestApiLogin.DefaultSetting = @"";
				colvarTestApiLogin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTestApiLogin);

				TableSchema.TableColumn colvarTestTransactionKey = new TableSchema.TableColumn(schema);
				colvarTestTransactionKey.ColumnName = "TestTransactionKey";
				colvarTestTransactionKey.DataType = DbType.AnsiString;
				colvarTestTransactionKey.MaxLength = 50;
				colvarTestTransactionKey.AutoIncrement = false;
				colvarTestTransactionKey.IsNullable = true;
				colvarTestTransactionKey.IsPrimaryKey = false;
				colvarTestTransactionKey.IsForeignKey = false;
				colvarTestTransactionKey.IsReadOnly = false;
				colvarTestTransactionKey.DefaultSetting = @"";
				colvarTestTransactionKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTestTransactionKey);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MG_AuthorizeNetConfigs",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MG_AuthorizeNetConfig LoadFrom(MG_AuthorizeNetConfig item)
		{
			MG_AuthorizeNetConfig result = new MG_AuthorizeNetConfig();
			if (item.AuthorizeNetConfigID != default(short)) {
				result.LoadByKey(item.AuthorizeNetConfigID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public short AuthorizeNetConfigID {
			get { return GetColumnValue<short>(Columns.AuthorizeNetConfigID); }
			set {
				SetColumnValue(Columns.AuthorizeNetConfigID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthorizeNetConfigID));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string LiveApiLogin {
			get { return GetColumnValue<string>(Columns.LiveApiLogin); }
			set {
				SetColumnValue(Columns.LiveApiLogin, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LiveApiLogin));
			}
		}
		[DataMember]
		public string LiveTransactionKey {
			get { return GetColumnValue<string>(Columns.LiveTransactionKey); }
			set {
				SetColumnValue(Columns.LiveTransactionKey, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LiveTransactionKey));
			}
		}
		[DataMember]
		public string TestApiLogin {
			get { return GetColumnValue<string>(Columns.TestApiLogin); }
			set {
				SetColumnValue(Columns.TestApiLogin, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TestApiLogin));
			}
		}
		[DataMember]
		public string TestTransactionKey {
			get { return GetColumnValue<string>(Columns.TestTransactionKey); }
			set {
				SetColumnValue(Columns.TestTransactionKey, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TestTransactionKey));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AuthorizeNetConfigID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AuthorizeNetConfigIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LiveApiLoginColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn LiveTransactionKeyColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TestApiLoginColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TestTransactionKeyColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AuthorizeNetConfigID = @"AuthorizeNetConfigID";
			public static readonly string DealerId = @"DealerId";
			public static readonly string LiveApiLogin = @"LiveApiLogin";
			public static readonly string LiveTransactionKey = @"LiveTransactionKey";
			public static readonly string TestApiLogin = @"TestApiLogin";
			public static readonly string TestTransactionKey = @"TestTransactionKey";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AuthorizeNetConfigID; }
		}
		*/

		#region Foreign Collections

		private MG_AuthorizeNetTransactionCollection _MG_AuthorizeNetTransactionsCol;
		//Relationship: FK_MG_AuthorizeNetTransactions_MG_AuthorizeNetConfigs
		public MG_AuthorizeNetTransactionCollection MG_AuthorizeNetTransactionsCol
		{
			get
			{
				if(_MG_AuthorizeNetTransactionsCol == null) {
					_MG_AuthorizeNetTransactionsCol = new MG_AuthorizeNetTransactionCollection();
					_MG_AuthorizeNetTransactionsCol.LoadAndCloseReader(MG_AuthorizeNetTransaction.Query()
						.WHERE(MG_AuthorizeNetTransaction.Columns.AuthorizeNetConfigId, AuthorizeNetConfigID).ExecuteReader());
				}
				return _MG_AuthorizeNetTransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MG_AuthorizeNetTransaction class.
	/// </summary>
	[DataContract]
	public partial class MG_AuthorizeNetTransactionCollection : ActiveList<MG_AuthorizeNetTransaction, MG_AuthorizeNetTransactionCollection>
	{
		public static MG_AuthorizeNetTransactionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MG_AuthorizeNetTransactionCollection result = new MG_AuthorizeNetTransactionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MG_AuthorizeNetTransaction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MG_AuthorizeNetTransactions table.
	/// </summary>
	[DataContract]
	public partial class MG_AuthorizeNetTransaction : ActiveRecord<MG_AuthorizeNetTransaction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MG_AuthorizeNetTransaction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MG_AuthorizeNetTransactions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAuthorizenetTransactionID = new TableSchema.TableColumn(schema);
				colvarAuthorizenetTransactionID.ColumnName = "AuthorizenetTransactionID";
				colvarAuthorizenetTransactionID.DataType = DbType.Int64;
				colvarAuthorizenetTransactionID.MaxLength = 0;
				colvarAuthorizenetTransactionID.AutoIncrement = true;
				colvarAuthorizenetTransactionID.IsNullable = false;
				colvarAuthorizenetTransactionID.IsPrimaryKey = true;
				colvarAuthorizenetTransactionID.IsForeignKey = false;
				colvarAuthorizenetTransactionID.IsReadOnly = false;
				colvarAuthorizenetTransactionID.DefaultSetting = @"";
				colvarAuthorizenetTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthorizenetTransactionID);

				TableSchema.TableColumn colvarTransactionId = new TableSchema.TableColumn(schema);
				colvarTransactionId.ColumnName = "TransactionId";
				colvarTransactionId.DataType = DbType.Int64;
				colvarTransactionId.MaxLength = 0;
				colvarTransactionId.AutoIncrement = false;
				colvarTransactionId.IsNullable = false;
				colvarTransactionId.IsPrimaryKey = false;
				colvarTransactionId.IsForeignKey = true;
				colvarTransactionId.IsReadOnly = false;
				colvarTransactionId.DefaultSetting = @"";
				colvarTransactionId.ForeignKeyTableName = "MG_Transactions";
				schema.Columns.Add(colvarTransactionId);

				TableSchema.TableColumn colvarAuthTransactionID = new TableSchema.TableColumn(schema);
				colvarAuthTransactionID.ColumnName = "AuthTransactionID";
				colvarAuthTransactionID.DataType = DbType.AnsiString;
				colvarAuthTransactionID.MaxLength = 50;
				colvarAuthTransactionID.AutoIncrement = false;
				colvarAuthTransactionID.IsNullable = false;
				colvarAuthTransactionID.IsPrimaryKey = false;
				colvarAuthTransactionID.IsForeignKey = false;
				colvarAuthTransactionID.IsReadOnly = false;
				colvarAuthTransactionID.DefaultSetting = @"";
				colvarAuthTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthTransactionID);

				TableSchema.TableColumn colvarAuthorizeNetConfigId = new TableSchema.TableColumn(schema);
				colvarAuthorizeNetConfigId.ColumnName = "AuthorizeNetConfigId";
				colvarAuthorizeNetConfigId.DataType = DbType.Int16;
				colvarAuthorizeNetConfigId.MaxLength = 0;
				colvarAuthorizeNetConfigId.AutoIncrement = false;
				colvarAuthorizeNetConfigId.IsNullable = false;
				colvarAuthorizeNetConfigId.IsPrimaryKey = false;
				colvarAuthorizeNetConfigId.IsForeignKey = true;
				colvarAuthorizeNetConfigId.IsReadOnly = false;
				colvarAuthorizeNetConfigId.DefaultSetting = @"";
				colvarAuthorizeNetConfigId.ForeignKeyTableName = "MG_AuthorizeNetConfigs";
				schema.Columns.Add(colvarAuthorizeNetConfigId);

				TableSchema.TableColumn colvarInvoiceNumber = new TableSchema.TableColumn(schema);
				colvarInvoiceNumber.ColumnName = "InvoiceNumber";
				colvarInvoiceNumber.DataType = DbType.AnsiString;
				colvarInvoiceNumber.MaxLength = 30;
				colvarInvoiceNumber.AutoIncrement = false;
				colvarInvoiceNumber.IsNullable = true;
				colvarInvoiceNumber.IsPrimaryKey = false;
				colvarInvoiceNumber.IsForeignKey = false;
				colvarInvoiceNumber.IsReadOnly = false;
				colvarInvoiceNumber.DefaultSetting = @"";
				colvarInvoiceNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceNumber);

				TableSchema.TableColumn colvarTransationType = new TableSchema.TableColumn(schema);
				colvarTransationType.ColumnName = "TransationType";
				colvarTransationType.DataType = DbType.AnsiString;
				colvarTransationType.MaxLength = 20;
				colvarTransationType.AutoIncrement = false;
				colvarTransationType.IsNullable = true;
				colvarTransationType.IsPrimaryKey = false;
				colvarTransationType.IsForeignKey = false;
				colvarTransationType.IsReadOnly = false;
				colvarTransationType.DefaultSetting = @"";
				colvarTransationType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransationType);

				TableSchema.TableColumn colvarMethod = new TableSchema.TableColumn(schema);
				colvarMethod.ColumnName = "Method";
				colvarMethod.DataType = DbType.AnsiString;
				colvarMethod.MaxLength = 10;
				colvarMethod.AutoIncrement = false;
				colvarMethod.IsNullable = true;
				colvarMethod.IsPrimaryKey = false;
				colvarMethod.IsForeignKey = false;
				colvarMethod.IsReadOnly = false;
				colvarMethod.DefaultSetting = @"";
				colvarMethod.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMethod);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = true;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarApproved = new TableSchema.TableColumn(schema);
				colvarApproved.ColumnName = "Approved";
				colvarApproved.DataType = DbType.Boolean;
				colvarApproved.MaxLength = 0;
				colvarApproved.AutoIncrement = false;
				colvarApproved.IsNullable = true;
				colvarApproved.IsPrimaryKey = false;
				colvarApproved.IsForeignKey = false;
				colvarApproved.IsReadOnly = false;
				colvarApproved.DefaultSetting = @"";
				colvarApproved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApproved);

				TableSchema.TableColumn colvarAuthorizationCode = new TableSchema.TableColumn(schema);
				colvarAuthorizationCode.ColumnName = "AuthorizationCode";
				colvarAuthorizationCode.DataType = DbType.AnsiString;
				colvarAuthorizationCode.MaxLength = 20;
				colvarAuthorizationCode.AutoIncrement = false;
				colvarAuthorizationCode.IsNullable = true;
				colvarAuthorizationCode.IsPrimaryKey = false;
				colvarAuthorizationCode.IsForeignKey = false;
				colvarAuthorizationCode.IsReadOnly = false;
				colvarAuthorizationCode.DefaultSetting = @"";
				colvarAuthorizationCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthorizationCode);

				TableSchema.TableColumn colvarCardNumber = new TableSchema.TableColumn(schema);
				colvarCardNumber.ColumnName = "CardNumber";
				colvarCardNumber.DataType = DbType.AnsiString;
				colvarCardNumber.MaxLength = 15;
				colvarCardNumber.AutoIncrement = false;
				colvarCardNumber.IsNullable = true;
				colvarCardNumber.IsPrimaryKey = false;
				colvarCardNumber.IsForeignKey = false;
				colvarCardNumber.IsReadOnly = false;
				colvarCardNumber.DefaultSetting = @"";
				colvarCardNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCardNumber);

				TableSchema.TableColumn colvarMessage = new TableSchema.TableColumn(schema);
				colvarMessage.ColumnName = "Message";
				colvarMessage.DataType = DbType.AnsiString;
				colvarMessage.MaxLength = 250;
				colvarMessage.AutoIncrement = false;
				colvarMessage.IsNullable = true;
				colvarMessage.IsPrimaryKey = false;
				colvarMessage.IsForeignKey = false;
				colvarMessage.IsReadOnly = false;
				colvarMessage.DefaultSetting = @"";
				colvarMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessage);

				TableSchema.TableColumn colvarResponseCode = new TableSchema.TableColumn(schema);
				colvarResponseCode.ColumnName = "ResponseCode";
				colvarResponseCode.DataType = DbType.AnsiString;
				colvarResponseCode.MaxLength = 10;
				colvarResponseCode.AutoIncrement = false;
				colvarResponseCode.IsNullable = true;
				colvarResponseCode.IsPrimaryKey = false;
				colvarResponseCode.IsForeignKey = false;
				colvarResponseCode.IsReadOnly = false;
				colvarResponseCode.DefaultSetting = @"";
				colvarResponseCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResponseCode);

				TableSchema.TableColumn colvarMD5Hash = new TableSchema.TableColumn(schema);
				colvarMD5Hash.ColumnName = "MD5Hash";
				colvarMD5Hash.DataType = DbType.AnsiString;
				colvarMD5Hash.MaxLength = 50;
				colvarMD5Hash.AutoIncrement = false;
				colvarMD5Hash.IsNullable = true;
				colvarMD5Hash.IsPrimaryKey = false;
				colvarMD5Hash.IsForeignKey = false;
				colvarMD5Hash.IsReadOnly = false;
				colvarMD5Hash.DefaultSetting = @"";
				colvarMD5Hash.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMD5Hash);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MG_AuthorizeNetTransactions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MG_AuthorizeNetTransaction LoadFrom(MG_AuthorizeNetTransaction item)
		{
			MG_AuthorizeNetTransaction result = new MG_AuthorizeNetTransaction();
			if (item.AuthorizenetTransactionID != default(long)) {
				result.LoadByKey(item.AuthorizenetTransactionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AuthorizenetTransactionID {
			get { return GetColumnValue<long>(Columns.AuthorizenetTransactionID); }
			set {
				SetColumnValue(Columns.AuthorizenetTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthorizenetTransactionID));
			}
		}
		[DataMember]
		public long TransactionId {
			get { return GetColumnValue<long>(Columns.TransactionId); }
			set {
				SetColumnValue(Columns.TransactionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionId));
			}
		}
		[DataMember]
		public string AuthTransactionID {
			get { return GetColumnValue<string>(Columns.AuthTransactionID); }
			set {
				SetColumnValue(Columns.AuthTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthTransactionID));
			}
		}
		[DataMember]
		public short AuthorizeNetConfigId {
			get { return GetColumnValue<short>(Columns.AuthorizeNetConfigId); }
			set {
				SetColumnValue(Columns.AuthorizeNetConfigId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthorizeNetConfigId));
			}
		}
		[DataMember]
		public string InvoiceNumber {
			get { return GetColumnValue<string>(Columns.InvoiceNumber); }
			set {
				SetColumnValue(Columns.InvoiceNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceNumber));
			}
		}
		[DataMember]
		public string TransationType {
			get { return GetColumnValue<string>(Columns.TransationType); }
			set {
				SetColumnValue(Columns.TransationType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransationType));
			}
		}
		[DataMember]
		public string Method {
			get { return GetColumnValue<string>(Columns.Method); }
			set {
				SetColumnValue(Columns.Method, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Method));
			}
		}
		[DataMember]
		public decimal? Amount {
			get { return GetColumnValue<decimal?>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public bool? Approved {
			get { return GetColumnValue<bool?>(Columns.Approved); }
			set {
				SetColumnValue(Columns.Approved, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Approved));
			}
		}
		[DataMember]
		public string AuthorizationCode {
			get { return GetColumnValue<string>(Columns.AuthorizationCode); }
			set {
				SetColumnValue(Columns.AuthorizationCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthorizationCode));
			}
		}
		[DataMember]
		public string CardNumber {
			get { return GetColumnValue<string>(Columns.CardNumber); }
			set {
				SetColumnValue(Columns.CardNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CardNumber));
			}
		}
		[DataMember]
		public string Message {
			get { return GetColumnValue<string>(Columns.Message); }
			set {
				SetColumnValue(Columns.Message, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Message));
			}
		}
		[DataMember]
		public string ResponseCode {
			get { return GetColumnValue<string>(Columns.ResponseCode); }
			set {
				SetColumnValue(Columns.ResponseCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ResponseCode));
			}
		}
		[DataMember]
		public string MD5Hash {
			get { return GetColumnValue<string>(Columns.MD5Hash); }
			set {
				SetColumnValue(Columns.MD5Hash, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MD5Hash));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MG_AuthorizeNetConfig _AuthorizeNetConfig;
		//Relationship: FK_MG_AuthorizeNetTransactions_MG_AuthorizeNetConfigs
		public MG_AuthorizeNetConfig AuthorizeNetConfig
		{
			get
			{
				if(_AuthorizeNetConfig == null) {
					_AuthorizeNetConfig = MG_AuthorizeNetConfig.FetchByID(this.AuthorizeNetConfigId);
				}
				return _AuthorizeNetConfig;
			}
			set
			{
				SetColumnValue("AuthorizeNetConfigId", value.AuthorizeNetConfigID);
				_AuthorizeNetConfig = value;
			}
		}

		private MG_Transaction _Transaction;
		//Relationship: FK_MG_AuthorizeNetTransactions_MG_Transactions
		public MG_Transaction Transaction
		{
			get
			{
				if(_Transaction == null) {
					_Transaction = MG_Transaction.FetchByID(this.TransactionId);
				}
				return _Transaction;
			}
			set
			{
				SetColumnValue("TransactionId", value.TransactionID);
				_Transaction = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AuthorizenetTransactionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AuthorizenetTransactionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TransactionIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AuthTransactionIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AuthorizeNetConfigIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn InvoiceNumberColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TransationTypeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MethodColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ApprovedColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AuthorizationCodeColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CardNumberColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn MessageColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ResponseCodeColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn MD5HashColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AuthorizenetTransactionID = @"AuthorizenetTransactionID";
			public static readonly string TransactionId = @"TransactionId";
			public static readonly string AuthTransactionID = @"AuthTransactionID";
			public static readonly string AuthorizeNetConfigId = @"AuthorizeNetConfigId";
			public static readonly string InvoiceNumber = @"InvoiceNumber";
			public static readonly string TransationType = @"TransationType";
			public static readonly string Method = @"Method";
			public static readonly string Amount = @"Amount";
			public static readonly string Approved = @"Approved";
			public static readonly string AuthorizationCode = @"AuthorizationCode";
			public static readonly string CardNumber = @"CardNumber";
			public static readonly string Message = @"Message";
			public static readonly string ResponseCode = @"ResponseCode";
			public static readonly string MD5Hash = @"MD5Hash";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AuthorizenetTransactionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MG_Gateway class.
	/// </summary>
	[DataContract]
	public partial class MG_GatewayCollection : ActiveList<MG_Gateway, MG_GatewayCollection>
	{
		public static MG_GatewayCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MG_GatewayCollection result = new MG_GatewayCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MG_Gateway item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MG_Gateways table.
	/// </summary>
	[DataContract]
	public partial class MG_Gateway : ActiveRecord<MG_Gateway>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string AuthorizeNetID = "AUTHNET";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MG_Gateway()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MG_Gateways", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarGatewayID = new TableSchema.TableColumn(schema);
				colvarGatewayID.ColumnName = "GatewayID";
				colvarGatewayID.DataType = DbType.AnsiString;
				colvarGatewayID.MaxLength = 20;
				colvarGatewayID.AutoIncrement = false;
				colvarGatewayID.IsNullable = false;
				colvarGatewayID.IsPrimaryKey = true;
				colvarGatewayID.IsForeignKey = false;
				colvarGatewayID.IsReadOnly = false;
				colvarGatewayID.DefaultSetting = @"";
				colvarGatewayID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGatewayID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MG_Gateways",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MG_Gateway LoadFrom(MG_Gateway item)
		{
			MG_Gateway result = new MG_Gateway();
			if (item.GatewayID != default(string)) {
				result.LoadByKey(item.GatewayID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string GatewayID {
			get { return GetColumnValue<string>(Columns.GatewayID); }
			set {
				SetColumnValue(Columns.GatewayID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GatewayID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn GatewayIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string GatewayID = @"GatewayID";
			public static readonly string Name = @"Name";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return GatewayID; }
		}
		*/

		#region Foreign Collections

		private MG_TransactionCollection _MG_TransactionsCol;
		//Relationship: FK_MG_Transactions_MG_Gateways
		public MG_TransactionCollection MG_TransactionsCol
		{
			get
			{
				if(_MG_TransactionsCol == null) {
					_MG_TransactionsCol = new MG_TransactionCollection();
					_MG_TransactionsCol.LoadAndCloseReader(MG_Transaction.Query()
						.WHERE(MG_Transaction.Columns.GatewayId, GatewayID).ExecuteReader());
				}
				return _MG_TransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MG_Transaction class.
	/// </summary>
	[DataContract]
	public partial class MG_TransactionCollection : ActiveList<MG_Transaction, MG_TransactionCollection>
	{
		public static MG_TransactionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MG_TransactionCollection result = new MG_TransactionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MG_Transaction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MG_Transactions table.
	/// </summary>
	[DataContract]
	public partial class MG_Transaction : ActiveRecord<MG_Transaction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MG_Transaction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MG_Transactions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTransactionID = new TableSchema.TableColumn(schema);
				colvarTransactionID.ColumnName = "TransactionID";
				colvarTransactionID.DataType = DbType.Int64;
				colvarTransactionID.MaxLength = 0;
				colvarTransactionID.AutoIncrement = true;
				colvarTransactionID.IsNullable = false;
				colvarTransactionID.IsPrimaryKey = true;
				colvarTransactionID.IsForeignKey = false;
				colvarTransactionID.IsReadOnly = false;
				colvarTransactionID.DefaultSetting = @"";
				colvarTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionID);

				TableSchema.TableColumn colvarGatewayId = new TableSchema.TableColumn(schema);
				colvarGatewayId.ColumnName = "GatewayId";
				colvarGatewayId.DataType = DbType.AnsiString;
				colvarGatewayId.MaxLength = 20;
				colvarGatewayId.AutoIncrement = false;
				colvarGatewayId.IsNullable = false;
				colvarGatewayId.IsPrimaryKey = false;
				colvarGatewayId.IsForeignKey = true;
				colvarGatewayId.IsReadOnly = false;
				colvarGatewayId.DefaultSetting = @"";
				colvarGatewayId.ForeignKeyTableName = "MG_Gateways";
				schema.Columns.Add(colvarGatewayId);

				TableSchema.TableColumn colvarInvoiceId = new TableSchema.TableColumn(schema);
				colvarInvoiceId.ColumnName = "InvoiceId";
				colvarInvoiceId.DataType = DbType.Int64;
				colvarInvoiceId.MaxLength = 0;
				colvarInvoiceId.AutoIncrement = false;
				colvarInvoiceId.IsNullable = false;
				colvarInvoiceId.IsPrimaryKey = false;
				colvarInvoiceId.IsForeignKey = true;
				colvarInvoiceId.IsReadOnly = false;
				colvarInvoiceId.DefaultSetting = @"";
				colvarInvoiceId.ForeignKeyTableName = "AE_Invoices";
				schema.Columns.Add(colvarInvoiceId);

				TableSchema.TableColumn colvarSuccess = new TableSchema.TableColumn(schema);
				colvarSuccess.ColumnName = "Success";
				colvarSuccess.DataType = DbType.Boolean;
				colvarSuccess.MaxLength = 0;
				colvarSuccess.AutoIncrement = false;
				colvarSuccess.IsNullable = false;
				colvarSuccess.IsPrimaryKey = false;
				colvarSuccess.IsForeignKey = false;
				colvarSuccess.IsReadOnly = false;
				colvarSuccess.DefaultSetting = @"";
				colvarSuccess.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuccess);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MG_Transactions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MG_Transaction LoadFrom(MG_Transaction item)
		{
			MG_Transaction result = new MG_Transaction();
			if (item.TransactionID != default(long)) {
				result.LoadByKey(item.TransactionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long TransactionID {
			get { return GetColumnValue<long>(Columns.TransactionID); }
			set {
				SetColumnValue(Columns.TransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionID));
			}
		}
		[DataMember]
		public string GatewayId {
			get { return GetColumnValue<string>(Columns.GatewayId); }
			set {
				SetColumnValue(Columns.GatewayId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GatewayId));
			}
		}
		[DataMember]
		public long InvoiceId {
			get { return GetColumnValue<long>(Columns.InvoiceId); }
			set {
				SetColumnValue(Columns.InvoiceId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceId));
			}
		}
		[DataMember]
		public bool Success {
			get { return GetColumnValue<bool>(Columns.Success); }
			set {
				SetColumnValue(Columns.Success, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Success));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Invoice _Invoice;
		//Relationship: FK_MG_Transactions_AE_Invoices
		public AE_Invoice Invoice
		{
			get
			{
				if(_Invoice == null) {
					_Invoice = AE_Invoice.FetchByID(this.InvoiceId);
				}
				return _Invoice;
			}
			set
			{
				SetColumnValue("InvoiceId", value.InvoiceID);
				_Invoice = value;
			}
		}

		private MG_Gateway _Gateway;
		//Relationship: FK_MG_Transactions_MG_Gateways
		public MG_Gateway Gateway
		{
			get
			{
				if(_Gateway == null) {
					_Gateway = MG_Gateway.FetchByID(this.GatewayId);
				}
				return _Gateway;
			}
			set
			{
				SetColumnValue("GatewayId", value.GatewayID);
				_Gateway = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return GatewayId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TransactionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn GatewayIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn InvoiceIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SuccessColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TransactionID = @"TransactionID";
			public static readonly string GatewayId = @"GatewayId";
			public static readonly string InvoiceId = @"InvoiceId";
			public static readonly string Success = @"Success";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TransactionID; }
		}
		*/

		#region Foreign Collections

		private MG_AuthorizeNetTransactionCollection _MG_AuthorizeNetTransactionsCol;
		//Relationship: FK_MG_AuthorizeNetTransactions_MG_Transactions
		public MG_AuthorizeNetTransactionCollection MG_AuthorizeNetTransactionsCol
		{
			get
			{
				if(_MG_AuthorizeNetTransactionsCol == null) {
					_MG_AuthorizeNetTransactionsCol = new MG_AuthorizeNetTransactionCollection();
					_MG_AuthorizeNetTransactionsCol.LoadAndCloseReader(MG_AuthorizeNetTransaction.Query()
						.WHERE(MG_AuthorizeNetTransaction.Columns.TransactionId, TransactionID).ExecuteReader());
				}
				return _MG_AuthorizeNetTransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountAG class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountAGCollection : ActiveList<MS_AccountAG, MS_AccountAGCollection>
	{
		public static MS_AccountAGCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountAGCollection result = new MS_AccountAGCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountAG item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountAG table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountAG : ActiveRecord<MS_AccountAG>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountAG()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountAG", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarXmitCode = new TableSchema.TableColumn(schema);
				colvarXmitCode.ColumnName = "XmitCode";
				colvarXmitCode.DataType = DbType.AnsiString;
				colvarXmitCode.MaxLength = 50;
				colvarXmitCode.AutoIncrement = false;
				colvarXmitCode.IsNullable = false;
				colvarXmitCode.IsPrimaryKey = false;
				colvarXmitCode.IsForeignKey = false;
				colvarXmitCode.IsReadOnly = false;
				colvarXmitCode.DefaultSetting = @"";
				colvarXmitCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXmitCode);

				TableSchema.TableColumn colvarDevNum = new TableSchema.TableColumn(schema);
				colvarDevNum.ColumnName = "DevNum";
				colvarDevNum.DataType = DbType.Int32;
				colvarDevNum.MaxLength = 0;
				colvarDevNum.AutoIncrement = false;
				colvarDevNum.IsNullable = false;
				colvarDevNum.IsPrimaryKey = false;
				colvarDevNum.IsForeignKey = false;
				colvarDevNum.IsReadOnly = false;
				colvarDevNum.DefaultSetting = @"";
				colvarDevNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDevNum);

				TableSchema.TableColumn colvarSiteNum = new TableSchema.TableColumn(schema);
				colvarSiteNum.ColumnName = "SiteNum";
				colvarSiteNum.DataType = DbType.Int32;
				colvarSiteNum.MaxLength = 0;
				colvarSiteNum.AutoIncrement = false;
				colvarSiteNum.IsNullable = false;
				colvarSiteNum.IsPrimaryKey = false;
				colvarSiteNum.IsForeignKey = false;
				colvarSiteNum.IsReadOnly = false;
				colvarSiteNum.DefaultSetting = @"";
				colvarSiteNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteNum);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountAG",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountAG LoadFrom(MS_AccountAG item)
		{
			MS_AccountAG result = new MS_AccountAG();
			if (item.AccountID != default(long)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public string XmitCode {
			get { return GetColumnValue<string>(Columns.XmitCode); }
			set {
				SetColumnValue(Columns.XmitCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.XmitCode));
			}
		}
		[DataMember]
		public int DevNum {
			get { return GetColumnValue<int>(Columns.DevNum); }
			set {
				SetColumnValue(Columns.DevNum, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DevNum));
			}
		}
		[DataMember]
		public int SiteNum {
			get { return GetColumnValue<int>(Columns.SiteNum); }
			set {
				SetColumnValue(Columns.SiteNum, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteNum));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Account _Account;
		//Relationship: FK_MS_AccountAG_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountID);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountID", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return XmitCode;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn XmitCodeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DevNumColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SiteNumColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string XmitCode = @"XmitCode";
			public static readonly string DevNum = @"DevNum";
			public static readonly string SiteNum = @"SiteNum";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountCellularType class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountCellularTypeCollection : ActiveList<MS_AccountCellularType, MS_AccountCellularTypeCollection>
	{
		public static MS_AccountCellularTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountCellularTypeCollection result = new MS_AccountCellularTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountCellularType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountCellularTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountCellularType : ActiveRecord<MS_AccountCellularType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Cell_PrimaryID = "CELLPRI";
			[EnumMember()] public const string Cell_BackupID = "CELLSEC";
			[EnumMember()] public const string Cell_TrackerID = "CELLTRKR";
			[EnumMember()] public const string No_CellularID = "NOCELL";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountCellularType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountCellularTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCellularTypeID = new TableSchema.TableColumn(schema);
				colvarCellularTypeID.ColumnName = "CellularTypeID";
				colvarCellularTypeID.DataType = DbType.AnsiString;
				colvarCellularTypeID.MaxLength = 20;
				colvarCellularTypeID.AutoIncrement = false;
				colvarCellularTypeID.IsNullable = false;
				colvarCellularTypeID.IsPrimaryKey = true;
				colvarCellularTypeID.IsForeignKey = false;
				colvarCellularTypeID.IsReadOnly = false;
				colvarCellularTypeID.DefaultSetting = @"";
				colvarCellularTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularTypeID);

				TableSchema.TableColumn colvarCellularTypeName = new TableSchema.TableColumn(schema);
				colvarCellularTypeName.ColumnName = "CellularTypeName";
				colvarCellularTypeName.DataType = DbType.AnsiString;
				colvarCellularTypeName.MaxLength = 50;
				colvarCellularTypeName.AutoIncrement = false;
				colvarCellularTypeName.IsNullable = false;
				colvarCellularTypeName.IsPrimaryKey = false;
				colvarCellularTypeName.IsForeignKey = false;
				colvarCellularTypeName.IsReadOnly = false;
				colvarCellularTypeName.DefaultSetting = @"";
				colvarCellularTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularTypeName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountCellularTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountCellularType LoadFrom(MS_AccountCellularType item)
		{
			MS_AccountCellularType result = new MS_AccountCellularType();
			if (item.CellularTypeID != default(string)) {
				result.LoadByKey(item.CellularTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CellularTypeID {
			get { return GetColumnValue<string>(Columns.CellularTypeID); }
			set {
				SetColumnValue(Columns.CellularTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellularTypeID));
			}
		}
		[DataMember]
		public string CellularTypeName {
			get { return GetColumnValue<string>(Columns.CellularTypeName); }
			set {
				SetColumnValue(Columns.CellularTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellularTypeName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CellularTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CellularTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CellularTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CellularTypeID = @"CellularTypeID";
			public static readonly string CellularTypeName = @"CellularTypeName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CellularTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountCollection _MS_AccountsCol;
		//Relationship: FK_MS_Accounts_MS_AccountCellularTypes
		public MS_AccountCollection MS_AccountsCol
		{
			get
			{
				if(_MS_AccountsCol == null) {
					_MS_AccountsCol = new MS_AccountCollection();
					_MS_AccountsCol.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.CellularTypeId, CellularTypeID).ExecuteReader());
				}
				return _MS_AccountsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountCustomer class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountCustomerCollection : ActiveList<MS_AccountCustomer, MS_AccountCustomerCollection>
	{
		public static MS_AccountCustomerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountCustomerCollection result = new MS_AccountCustomerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountCustomer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountCustomers table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountCustomer : ActiveRecord<MS_AccountCustomer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountCustomer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountCustomers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountCustomerID = new TableSchema.TableColumn(schema);
				colvarAccountCustomerID.ColumnName = "AccountCustomerID";
				colvarAccountCustomerID.DataType = DbType.Int64;
				colvarAccountCustomerID.MaxLength = 0;
				colvarAccountCustomerID.AutoIncrement = true;
				colvarAccountCustomerID.IsNullable = false;
				colvarAccountCustomerID.IsPrimaryKey = true;
				colvarAccountCustomerID.IsForeignKey = false;
				colvarAccountCustomerID.IsReadOnly = false;
				colvarAccountCustomerID.DefaultSetting = @"";
				colvarAccountCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountCustomerID);

				TableSchema.TableColumn colvarAccountCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarAccountCustomerTypeId.ColumnName = "AccountCustomerTypeId";
				colvarAccountCustomerTypeId.DataType = DbType.AnsiString;
				colvarAccountCustomerTypeId.MaxLength = 5;
				colvarAccountCustomerTypeId.AutoIncrement = false;
				colvarAccountCustomerTypeId.IsNullable = false;
				colvarAccountCustomerTypeId.IsPrimaryKey = false;
				colvarAccountCustomerTypeId.IsForeignKey = true;
				colvarAccountCustomerTypeId.IsReadOnly = false;
				colvarAccountCustomerTypeId.DefaultSetting = @"('PRI')";
				colvarAccountCustomerTypeId.ForeignKeyTableName = "MS_AccountCustomerTypes";
				schema.Columns.Add(colvarAccountCustomerTypeId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = true;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "QL_Leads";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = false;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = true;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "AE_Customers";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MC_Accounts";
				schema.Columns.Add(colvarAccountId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountCustomers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountCustomer LoadFrom(MS_AccountCustomer item)
		{
			MS_AccountCustomer result = new MS_AccountCustomer();
			if (item.AccountCustomerID != default(long)) {
				result.LoadByKey(item.AccountCustomerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountCustomerID {
			get { return GetColumnValue<long>(Columns.AccountCustomerID); }
			set {
				SetColumnValue(Columns.AccountCustomerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountCustomerID));
			}
		}
		[DataMember]
		public string AccountCustomerTypeId {
			get { return GetColumnValue<string>(Columns.AccountCustomerTypeId); }
			set {
				SetColumnValue(Columns.AccountCustomerTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountCustomerTypeId));
			}
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set {
				SetColumnValue(Columns.LeadId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadId));
			}
		}
		[DataMember]
		public long CustomerId {
			get { return GetColumnValue<long>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Customer _Customer;
		//Relationship: FK_MS_AccountCustomers_AE_Customers
		public AE_Customer Customer
		{
			get
			{
				if(_Customer == null) {
					_Customer = AE_Customer.FetchByID(this.CustomerId);
				}
				return _Customer;
			}
			set
			{
				SetColumnValue("CustomerId", value.CustomerID);
				_Customer = value;
			}
		}

		private MC_Account _Account;
		//Relationship: FK_MS_AccountCustomers_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		private MS_AccountCustomerType _AccountCustomerType;
		//Relationship: FK_MS_AccountCustomers_MS_AccountCustomerTypes
		public MS_AccountCustomerType AccountCustomerType
		{
			get
			{
				if(_AccountCustomerType == null) {
					_AccountCustomerType = MS_AccountCustomerType.FetchByID(this.AccountCustomerTypeId);
				}
				return _AccountCustomerType;
			}
			set
			{
				SetColumnValue("AccountCustomerTypeId", value.AccountCustomerTypeID);
				_AccountCustomerType = value;
			}
		}

		private QL_Lead _Lead;
		//Relationship: FK_MS_AccountCustomers_QL_Leads
		public QL_Lead Lead
		{
			get
			{
				if(_Lead == null) {
					_Lead = QL_Lead.FetchByID(this.LeadId);
				}
				return _Lead;
			}
			set
			{
				SetColumnValue("LeadId", value.LeadID);
				_Lead = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountCustomerTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountCustomerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountCustomerTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountCustomerID = @"AccountCustomerID";
			public static readonly string AccountCustomerTypeId = @"AccountCustomerTypeId";
			public static readonly string LeadId = @"LeadId";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string AccountId = @"AccountId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountCustomerID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountCustomerType class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountCustomerTypeCollection : ActiveList<MS_AccountCustomerType, MS_AccountCustomerTypeCollection>
	{
		public static MS_AccountCustomerTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountCustomerTypeCollection result = new MS_AccountCustomerTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountCustomerType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountCustomerTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountCustomerType : ActiveRecord<MS_AccountCustomerType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountCustomerType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountCustomerTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountCustomerTypeID = new TableSchema.TableColumn(schema);
				colvarAccountCustomerTypeID.ColumnName = "AccountCustomerTypeID";
				colvarAccountCustomerTypeID.DataType = DbType.AnsiString;
				colvarAccountCustomerTypeID.MaxLength = 5;
				colvarAccountCustomerTypeID.AutoIncrement = false;
				colvarAccountCustomerTypeID.IsNullable = false;
				colvarAccountCustomerTypeID.IsPrimaryKey = true;
				colvarAccountCustomerTypeID.IsForeignKey = false;
				colvarAccountCustomerTypeID.IsReadOnly = false;
				colvarAccountCustomerTypeID.DefaultSetting = @"";
				colvarAccountCustomerTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountCustomerTypeID);

				TableSchema.TableColumn colvarAccountCustomerType = new TableSchema.TableColumn(schema);
				colvarAccountCustomerType.ColumnName = "AccountCustomerType";
				colvarAccountCustomerType.DataType = DbType.AnsiString;
				colvarAccountCustomerType.MaxLength = 50;
				colvarAccountCustomerType.AutoIncrement = false;
				colvarAccountCustomerType.IsNullable = false;
				colvarAccountCustomerType.IsPrimaryKey = false;
				colvarAccountCustomerType.IsForeignKey = false;
				colvarAccountCustomerType.IsReadOnly = false;
				colvarAccountCustomerType.DefaultSetting = @"";
				colvarAccountCustomerType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountCustomerType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountCustomerTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountCustomerType LoadFrom(MS_AccountCustomerType item)
		{
			MS_AccountCustomerType result = new MS_AccountCustomerType();
			if (item.AccountCustomerTypeID != default(string)) {
				result.LoadByKey(item.AccountCustomerTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AccountCustomerTypeID {
			get { return GetColumnValue<string>(Columns.AccountCustomerTypeID); }
			set {
				SetColumnValue(Columns.AccountCustomerTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountCustomerTypeID));
			}
		}
		[DataMember]
		public string AccountCustomerType {
			get { return GetColumnValue<string>(Columns.AccountCustomerType); }
			set {
				SetColumnValue(Columns.AccountCustomerType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountCustomerType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountCustomerType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountCustomerTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountCustomerTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountCustomerTypeID = @"AccountCustomerTypeID";
			public static readonly string AccountCustomerType = @"AccountCustomerType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountCustomerTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountCustomerCollection _MS_AccountCustomersCol;
		//Relationship: FK_MS_AccountCustomers_MS_AccountCustomerTypes
		public MS_AccountCustomerCollection MS_AccountCustomersCol
		{
			get
			{
				if(_MS_AccountCustomersCol == null) {
					_MS_AccountCustomersCol = new MS_AccountCustomerCollection();
					_MS_AccountCustomersCol.LoadAndCloseReader(MS_AccountCustomer.Query()
						.WHERE(MS_AccountCustomer.Columns.AccountCustomerTypeId, AccountCustomerTypeID).ExecuteReader());
				}
				return _MS_AccountCustomersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountDispatchAgencyAssignment class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountDispatchAgencyAssignmentCollection : ActiveList<MS_AccountDispatchAgencyAssignment, MS_AccountDispatchAgencyAssignmentCollection>
	{
		public static MS_AccountDispatchAgencyAssignmentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountDispatchAgencyAssignmentCollection result = new MS_AccountDispatchAgencyAssignmentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountDispatchAgencyAssignment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountDispatchAgencyAssignments table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountDispatchAgencyAssignment : ActiveRecord<MS_AccountDispatchAgencyAssignment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountDispatchAgencyAssignment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountDispatchAgencyAssignments", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDispatchAgencyAssignmentID = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyAssignmentID.ColumnName = "DispatchAgencyAssignmentID";
				colvarDispatchAgencyAssignmentID.DataType = DbType.Int64;
				colvarDispatchAgencyAssignmentID.MaxLength = 0;
				colvarDispatchAgencyAssignmentID.AutoIncrement = true;
				colvarDispatchAgencyAssignmentID.IsNullable = false;
				colvarDispatchAgencyAssignmentID.IsPrimaryKey = true;
				colvarDispatchAgencyAssignmentID.IsForeignKey = false;
				colvarDispatchAgencyAssignmentID.IsReadOnly = false;
				colvarDispatchAgencyAssignmentID.DefaultSetting = @"";
				colvarDispatchAgencyAssignmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyAssignmentID);

				TableSchema.TableColumn colvarDispatchAgencyId = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyId.ColumnName = "DispatchAgencyId";
				colvarDispatchAgencyId.DataType = DbType.Int32;
				colvarDispatchAgencyId.MaxLength = 0;
				colvarDispatchAgencyId.AutoIncrement = false;
				colvarDispatchAgencyId.IsNullable = false;
				colvarDispatchAgencyId.IsPrimaryKey = false;
				colvarDispatchAgencyId.IsForeignKey = true;
				colvarDispatchAgencyId.IsReadOnly = false;
				colvarDispatchAgencyId.DefaultSetting = @"";
				colvarDispatchAgencyId.ForeignKeyTableName = "MS_DispatchAgencies";
				schema.Columns.Add(colvarDispatchAgencyId);

				TableSchema.TableColumn colvarDispatchAgencyTypeId = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyTypeId.ColumnName = "DispatchAgencyTypeId";
				colvarDispatchAgencyTypeId.DataType = DbType.Byte;
				colvarDispatchAgencyTypeId.MaxLength = 0;
				colvarDispatchAgencyTypeId.AutoIncrement = false;
				colvarDispatchAgencyTypeId.IsNullable = false;
				colvarDispatchAgencyTypeId.IsPrimaryKey = false;
				colvarDispatchAgencyTypeId.IsForeignKey = false;
				colvarDispatchAgencyTypeId.IsReadOnly = false;
				colvarDispatchAgencyTypeId.DefaultSetting = @"";
				colvarDispatchAgencyTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyTypeId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MS_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarIndustryAccountId = new TableSchema.TableColumn(schema);
				colvarIndustryAccountId.ColumnName = "IndustryAccountId";
				colvarIndustryAccountId.DataType = DbType.Int64;
				colvarIndustryAccountId.MaxLength = 0;
				colvarIndustryAccountId.AutoIncrement = false;
				colvarIndustryAccountId.IsNullable = false;
				colvarIndustryAccountId.IsPrimaryKey = false;
				colvarIndustryAccountId.IsForeignKey = true;
				colvarIndustryAccountId.IsReadOnly = false;
				colvarIndustryAccountId.DefaultSetting = @"";
				colvarIndustryAccountId.ForeignKeyTableName = "MS_IndustryAccounts";
				schema.Columns.Add(colvarIndustryAccountId);

				TableSchema.TableColumn colvarDispatchAgencyName = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyName.ColumnName = "DispatchAgencyName";
				colvarDispatchAgencyName.DataType = DbType.String;
				colvarDispatchAgencyName.MaxLength = 100;
				colvarDispatchAgencyName.AutoIncrement = false;
				colvarDispatchAgencyName.IsNullable = false;
				colvarDispatchAgencyName.IsPrimaryKey = false;
				colvarDispatchAgencyName.IsForeignKey = false;
				colvarDispatchAgencyName.IsReadOnly = false;
				colvarDispatchAgencyName.DefaultSetting = @"";
				colvarDispatchAgencyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyName);

				TableSchema.TableColumn colvarPhone1 = new TableSchema.TableColumn(schema);
				colvarPhone1.ColumnName = "Phone1";
				colvarPhone1.DataType = DbType.AnsiString;
				colvarPhone1.MaxLength = 30;
				colvarPhone1.AutoIncrement = false;
				colvarPhone1.IsNullable = false;
				colvarPhone1.IsPrimaryKey = false;
				colvarPhone1.IsForeignKey = false;
				colvarPhone1.IsReadOnly = false;
				colvarPhone1.DefaultSetting = @"";
				colvarPhone1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone1);

				TableSchema.TableColumn colvarPermitNumber = new TableSchema.TableColumn(schema);
				colvarPermitNumber.ColumnName = "PermitNumber";
				colvarPermitNumber.DataType = DbType.AnsiString;
				colvarPermitNumber.MaxLength = 50;
				colvarPermitNumber.AutoIncrement = false;
				colvarPermitNumber.IsNullable = true;
				colvarPermitNumber.IsPrimaryKey = false;
				colvarPermitNumber.IsForeignKey = false;
				colvarPermitNumber.IsReadOnly = false;
				colvarPermitNumber.DefaultSetting = @"";
				colvarPermitNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermitNumber);

				TableSchema.TableColumn colvarPermitEffectiveDate = new TableSchema.TableColumn(schema);
				colvarPermitEffectiveDate.ColumnName = "PermitEffectiveDate";
				colvarPermitEffectiveDate.DataType = DbType.DateTime;
				colvarPermitEffectiveDate.MaxLength = 0;
				colvarPermitEffectiveDate.AutoIncrement = false;
				colvarPermitEffectiveDate.IsNullable = true;
				colvarPermitEffectiveDate.IsPrimaryKey = false;
				colvarPermitEffectiveDate.IsForeignKey = false;
				colvarPermitEffectiveDate.IsReadOnly = false;
				colvarPermitEffectiveDate.DefaultSetting = @"";
				colvarPermitEffectiveDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermitEffectiveDate);

				TableSchema.TableColumn colvarPermitExpireDate = new TableSchema.TableColumn(schema);
				colvarPermitExpireDate.ColumnName = "PermitExpireDate";
				colvarPermitExpireDate.DataType = DbType.DateTime;
				colvarPermitExpireDate.MaxLength = 0;
				colvarPermitExpireDate.AutoIncrement = false;
				colvarPermitExpireDate.IsNullable = true;
				colvarPermitExpireDate.IsPrimaryKey = false;
				colvarPermitExpireDate.IsForeignKey = false;
				colvarPermitExpireDate.IsReadOnly = false;
				colvarPermitExpireDate.DefaultSetting = @"";
				colvarPermitExpireDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermitExpireDate);

				TableSchema.TableColumn colvarIsVerified = new TableSchema.TableColumn(schema);
				colvarIsVerified.ColumnName = "IsVerified";
				colvarIsVerified.DataType = DbType.Boolean;
				colvarIsVerified.MaxLength = 0;
				colvarIsVerified.AutoIncrement = false;
				colvarIsVerified.IsNullable = false;
				colvarIsVerified.IsPrimaryKey = false;
				colvarIsVerified.IsForeignKey = false;
				colvarIsVerified.IsReadOnly = false;
				colvarIsVerified.DefaultSetting = @"((0))";
				colvarIsVerified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVerified);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountDispatchAgencyAssignments",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountDispatchAgencyAssignment LoadFrom(MS_AccountDispatchAgencyAssignment item)
		{
			MS_AccountDispatchAgencyAssignment result = new MS_AccountDispatchAgencyAssignment();
			if (item.DispatchAgencyAssignmentID != default(long)) {
				result.LoadByKey(item.DispatchAgencyAssignmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long DispatchAgencyAssignmentID {
			get { return GetColumnValue<long>(Columns.DispatchAgencyAssignmentID); }
			set {
				SetColumnValue(Columns.DispatchAgencyAssignmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyAssignmentID));
			}
		}
		[DataMember]
		public int DispatchAgencyId {
			get { return GetColumnValue<int>(Columns.DispatchAgencyId); }
			set {
				SetColumnValue(Columns.DispatchAgencyId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyId));
			}
		}
		[DataMember]
		public byte DispatchAgencyTypeId {
			get { return GetColumnValue<byte>(Columns.DispatchAgencyTypeId); }
			set {
				SetColumnValue(Columns.DispatchAgencyTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyTypeId));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public long IndustryAccountId {
			get { return GetColumnValue<long>(Columns.IndustryAccountId); }
			set {
				SetColumnValue(Columns.IndustryAccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryAccountId));
			}
		}
		[DataMember]
		public string DispatchAgencyName {
			get { return GetColumnValue<string>(Columns.DispatchAgencyName); }
			set {
				SetColumnValue(Columns.DispatchAgencyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyName));
			}
		}
		[DataMember]
		public string Phone1 {
			get { return GetColumnValue<string>(Columns.Phone1); }
			set {
				SetColumnValue(Columns.Phone1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone1));
			}
		}
		[DataMember]
		public string PermitNumber {
			get { return GetColumnValue<string>(Columns.PermitNumber); }
			set {
				SetColumnValue(Columns.PermitNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PermitNumber));
			}
		}
		[DataMember]
		public DateTime? PermitEffectiveDate {
			get { return GetColumnValue<DateTime?>(Columns.PermitEffectiveDate); }
			set {
				SetColumnValue(Columns.PermitEffectiveDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PermitEffectiveDate));
			}
		}
		[DataMember]
		public DateTime? PermitExpireDate {
			get { return GetColumnValue<DateTime?>(Columns.PermitExpireDate); }
			set {
				SetColumnValue(Columns.PermitExpireDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PermitExpireDate));
			}
		}
		[DataMember]
		public bool IsVerified {
			get { return GetColumnValue<bool>(Columns.IsVerified); }
			set {
				SetColumnValue(Columns.IsVerified, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsVerified));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Account _Account;
		//Relationship: FK_MS_AccountDispatchAgencyAssignments_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		private MS_DispatchAgency _DispatchAgency;
		//Relationship: FK_MS_AccountDispatchAgencyAssignments_MS_DispatchAgencies
		public MS_DispatchAgency DispatchAgency
		{
			get
			{
				if(_DispatchAgency == null) {
					_DispatchAgency = MS_DispatchAgency.FetchByID(this.DispatchAgencyId);
				}
				return _DispatchAgency;
			}
			set
			{
				SetColumnValue("DispatchAgencyId", value.DispatchAgencyID);
				_DispatchAgency = value;
			}
		}

		private MS_IndustryAccount _IndustryAccount;
		//Relationship: FK_MS_AccountDispatchAgencyAssignments_MS_IndustryAccounts
		public MS_IndustryAccount IndustryAccount
		{
			get
			{
				if(_IndustryAccount == null) {
					_IndustryAccount = MS_IndustryAccount.FetchByID(this.IndustryAccountId);
				}
				return _IndustryAccount;
			}
			set
			{
				SetColumnValue("IndustryAccountId", value.IndustryAccountID);
				_IndustryAccount = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return DispatchAgencyAssignmentID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn DispatchAgencyAssignmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DispatchAgencyIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DispatchAgencyTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IndustryAccountIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DispatchAgencyNameColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn Phone1Column
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PermitNumberColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PermitEffectiveDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn PermitExpireDateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsVerifiedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[17]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DispatchAgencyAssignmentID = @"DispatchAgencyAssignmentID";
			public static readonly string DispatchAgencyId = @"DispatchAgencyId";
			public static readonly string DispatchAgencyTypeId = @"DispatchAgencyTypeId";
			public static readonly string AccountId = @"AccountId";
			public static readonly string IndustryAccountId = @"IndustryAccountId";
			public static readonly string DispatchAgencyName = @"DispatchAgencyName";
			public static readonly string Phone1 = @"Phone1";
			public static readonly string PermitNumber = @"PermitNumber";
			public static readonly string PermitEffectiveDate = @"PermitEffectiveDate";
			public static readonly string PermitExpireDate = @"PermitExpireDate";
			public static readonly string IsVerified = @"IsVerified";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DispatchAgencyAssignmentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountDslSeizureType class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountDslSeizureTypeCollection : ActiveList<MS_AccountDslSeizureType, MS_AccountDslSeizureTypeCollection>
	{
		public static MS_AccountDslSeizureTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountDslSeizureTypeCollection result = new MS_AccountDslSeizureTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountDslSeizureType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountDslSeizureTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountDslSeizureType : ActiveRecord<MS_AccountDslSeizureType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum DslSeizureEnum : short
		{
			[EnumMember()] No = 1,
			[EnumMember()] Dsl = 2,
			[EnumMember()] Yes = 3,
		}

		//[DataMember]
		//public DslSeizureEnum DslSeizureCode
		//{
		//	get { return (DslSeizureEnum)DslSeizureID; }
		//	set { DslSeizureID = (short)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountDslSeizureType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountDslSeizureTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDslSeizureID = new TableSchema.TableColumn(schema);
				colvarDslSeizureID.ColumnName = "DslSeizureID";
				colvarDslSeizureID.DataType = DbType.Int16;
				colvarDslSeizureID.MaxLength = 0;
				colvarDslSeizureID.AutoIncrement = true;
				colvarDslSeizureID.IsNullable = false;
				colvarDslSeizureID.IsPrimaryKey = true;
				colvarDslSeizureID.IsForeignKey = false;
				colvarDslSeizureID.IsReadOnly = false;
				colvarDslSeizureID.DefaultSetting = @"";
				colvarDslSeizureID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDslSeizureID);

				TableSchema.TableColumn colvarDslSeizure = new TableSchema.TableColumn(schema);
				colvarDslSeizure.ColumnName = "DslSeizure";
				colvarDslSeizure.DataType = DbType.String;
				colvarDslSeizure.MaxLength = 50;
				colvarDslSeizure.AutoIncrement = false;
				colvarDslSeizure.IsNullable = false;
				colvarDslSeizure.IsPrimaryKey = false;
				colvarDslSeizure.IsForeignKey = false;
				colvarDslSeizure.IsReadOnly = false;
				colvarDslSeizure.DefaultSetting = @"";
				colvarDslSeizure.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDslSeizure);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountDslSeizureTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountDslSeizureType LoadFrom(MS_AccountDslSeizureType item)
		{
			MS_AccountDslSeizureType result = new MS_AccountDslSeizureType();
			if (item.DslSeizureID != default(short)) {
				result.LoadByKey(item.DslSeizureID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public short DslSeizureID {
			get { return GetColumnValue<short>(Columns.DslSeizureID); }
			set {
				SetColumnValue(Columns.DslSeizureID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DslSeizureID));
			}
		}
		[DataMember]
		public string DslSeizure {
			get { return GetColumnValue<string>(Columns.DslSeizure); }
			set {
				SetColumnValue(Columns.DslSeizure, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DslSeizure));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return DslSeizure;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DslSeizureIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DslSeizureColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DslSeizureID = @"DslSeizureID";
			public static readonly string DslSeizure = @"DslSeizure";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DslSeizureID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountCollection _MS_AccountsCol;
		//Relationship: FK_MS_Accounts_MS_AccountDslSeizureTypes
		public MS_AccountCollection MS_AccountsCol
		{
			get
			{
				if(_MS_AccountsCol == null) {
					_MS_AccountsCol = new MS_AccountCollection();
					_MS_AccountsCol.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.DslSeizureId, DslSeizureID).ExecuteReader());
				}
				return _MS_AccountsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountEquipment class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEquipmentCollection : ActiveList<MS_AccountEquipment, MS_AccountEquipmentCollection>
	{
		public static MS_AccountEquipmentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountEquipmentCollection result = new MS_AccountEquipmentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountEquipment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountEquipment table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEquipment : ActiveRecord<MS_AccountEquipment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountEquipment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountEquipment", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountEquipmentID = new TableSchema.TableColumn(schema);
				colvarAccountEquipmentID.ColumnName = "AccountEquipmentID";
				colvarAccountEquipmentID.DataType = DbType.Int64;
				colvarAccountEquipmentID.MaxLength = 0;
				colvarAccountEquipmentID.AutoIncrement = true;
				colvarAccountEquipmentID.IsNullable = false;
				colvarAccountEquipmentID.IsPrimaryKey = true;
				colvarAccountEquipmentID.IsForeignKey = false;
				colvarAccountEquipmentID.IsReadOnly = false;
				colvarAccountEquipmentID.DefaultSetting = @"";
				colvarAccountEquipmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountEquipmentID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MS_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarEquipmentId = new TableSchema.TableColumn(schema);
				colvarEquipmentId.ColumnName = "EquipmentId";
				colvarEquipmentId.DataType = DbType.AnsiString;
				colvarEquipmentId.MaxLength = 50;
				colvarEquipmentId.AutoIncrement = false;
				colvarEquipmentId.IsNullable = false;
				colvarEquipmentId.IsPrimaryKey = false;
				colvarEquipmentId.IsForeignKey = true;
				colvarEquipmentId.IsReadOnly = false;
				colvarEquipmentId.DefaultSetting = @"";
				colvarEquipmentId.ForeignKeyTableName = "MS_Equipments";
				schema.Columns.Add(colvarEquipmentId);

				TableSchema.TableColumn colvarEquipmentLocationId = new TableSchema.TableColumn(schema);
				colvarEquipmentLocationId.ColumnName = "EquipmentLocationId";
				colvarEquipmentLocationId.DataType = DbType.Int32;
				colvarEquipmentLocationId.MaxLength = 0;
				colvarEquipmentLocationId.AutoIncrement = false;
				colvarEquipmentLocationId.IsNullable = true;
				colvarEquipmentLocationId.IsPrimaryKey = false;
				colvarEquipmentLocationId.IsForeignKey = true;
				colvarEquipmentLocationId.IsReadOnly = false;
				colvarEquipmentLocationId.DefaultSetting = @"";
				colvarEquipmentLocationId.ForeignKeyTableName = "MS_EquipmentLocations";
				schema.Columns.Add(colvarEquipmentLocationId);

				TableSchema.TableColumn colvarGPEmployeeId = new TableSchema.TableColumn(schema);
				colvarGPEmployeeId.ColumnName = "GPEmployeeId";
				colvarGPEmployeeId.DataType = DbType.AnsiString;
				colvarGPEmployeeId.MaxLength = 50;
				colvarGPEmployeeId.AutoIncrement = false;
				colvarGPEmployeeId.IsNullable = true;
				colvarGPEmployeeId.IsPrimaryKey = false;
				colvarGPEmployeeId.IsForeignKey = false;
				colvarGPEmployeeId.IsReadOnly = false;
				colvarGPEmployeeId.DefaultSetting = @"";
				colvarGPEmployeeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeId);

				TableSchema.TableColumn colvarOfficeReconciliationItemId = new TableSchema.TableColumn(schema);
				colvarOfficeReconciliationItemId.ColumnName = "OfficeReconciliationItemId";
				colvarOfficeReconciliationItemId.DataType = DbType.Int32;
				colvarOfficeReconciliationItemId.MaxLength = 0;
				colvarOfficeReconciliationItemId.AutoIncrement = false;
				colvarOfficeReconciliationItemId.IsNullable = true;
				colvarOfficeReconciliationItemId.IsPrimaryKey = false;
				colvarOfficeReconciliationItemId.IsForeignKey = false;
				colvarOfficeReconciliationItemId.IsReadOnly = false;
				colvarOfficeReconciliationItemId.DefaultSetting = @"";
				colvarOfficeReconciliationItemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeReconciliationItemId);

				TableSchema.TableColumn colvarAccountEquipmentUpgradeTypeId = new TableSchema.TableColumn(schema);
				colvarAccountEquipmentUpgradeTypeId.ColumnName = "AccountEquipmentUpgradeTypeId";
				colvarAccountEquipmentUpgradeTypeId.DataType = DbType.AnsiString;
				colvarAccountEquipmentUpgradeTypeId.MaxLength = 10;
				colvarAccountEquipmentUpgradeTypeId.AutoIncrement = false;
				colvarAccountEquipmentUpgradeTypeId.IsNullable = false;
				colvarAccountEquipmentUpgradeTypeId.IsPrimaryKey = false;
				colvarAccountEquipmentUpgradeTypeId.IsForeignKey = true;
				colvarAccountEquipmentUpgradeTypeId.IsReadOnly = false;
				colvarAccountEquipmentUpgradeTypeId.DefaultSetting = @"";
				colvarAccountEquipmentUpgradeTypeId.ForeignKeyTableName = "MS_AccountEquipmentUpgradeTypes";
				schema.Columns.Add(colvarAccountEquipmentUpgradeTypeId);

				TableSchema.TableColumn colvarCustomerLocation = new TableSchema.TableColumn(schema);
				colvarCustomerLocation.ColumnName = "CustomerLocation";
				colvarCustomerLocation.DataType = DbType.String;
				colvarCustomerLocation.MaxLength = 200;
				colvarCustomerLocation.AutoIncrement = false;
				colvarCustomerLocation.IsNullable = true;
				colvarCustomerLocation.IsPrimaryKey = false;
				colvarCustomerLocation.IsForeignKey = false;
				colvarCustomerLocation.IsReadOnly = false;
				colvarCustomerLocation.DefaultSetting = @"";
				colvarCustomerLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerLocation);

				TableSchema.TableColumn colvarPoints = new TableSchema.TableColumn(schema);
				colvarPoints.ColumnName = "Points";
				colvarPoints.DataType = DbType.Int32;
				colvarPoints.MaxLength = 0;
				colvarPoints.AutoIncrement = false;
				colvarPoints.IsNullable = false;
				colvarPoints.IsPrimaryKey = false;
				colvarPoints.IsForeignKey = false;
				colvarPoints.IsReadOnly = false;
				colvarPoints.DefaultSetting = @"((1))";
				colvarPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPoints);

				TableSchema.TableColumn colvarActualPoints = new TableSchema.TableColumn(schema);
				colvarActualPoints.ColumnName = "ActualPoints";
				colvarActualPoints.DataType = DbType.Double;
				colvarActualPoints.MaxLength = 0;
				colvarActualPoints.AutoIncrement = false;
				colvarActualPoints.IsNullable = true;
				colvarActualPoints.IsPrimaryKey = false;
				colvarActualPoints.IsForeignKey = false;
				colvarActualPoints.IsReadOnly = false;
				colvarActualPoints.DefaultSetting = @"";
				colvarActualPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualPoints);

				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "Price";
				colvarPrice.DataType = DbType.Currency;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = false;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);

				TableSchema.TableColumn colvarIsExisting = new TableSchema.TableColumn(schema);
				colvarIsExisting.ColumnName = "IsExisting";
				colvarIsExisting.DataType = DbType.Boolean;
				colvarIsExisting.MaxLength = 0;
				colvarIsExisting.AutoIncrement = false;
				colvarIsExisting.IsNullable = false;
				colvarIsExisting.IsPrimaryKey = false;
				colvarIsExisting.IsForeignKey = false;
				colvarIsExisting.IsReadOnly = false;
				colvarIsExisting.DefaultSetting = @"((0))";
				colvarIsExisting.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExisting);

				TableSchema.TableColumn colvarBarcodeId = new TableSchema.TableColumn(schema);
				colvarBarcodeId.ColumnName = "BarcodeId";
				colvarBarcodeId.DataType = DbType.String;
				colvarBarcodeId.MaxLength = 25;
				colvarBarcodeId.AutoIncrement = false;
				colvarBarcodeId.IsNullable = true;
				colvarBarcodeId.IsPrimaryKey = false;
				colvarBarcodeId.IsForeignKey = false;
				colvarBarcodeId.IsReadOnly = false;
				colvarBarcodeId.DefaultSetting = @"";
				colvarBarcodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeId);

				TableSchema.TableColumn colvarIsServiceUpgrade = new TableSchema.TableColumn(schema);
				colvarIsServiceUpgrade.ColumnName = "IsServiceUpgrade";
				colvarIsServiceUpgrade.DataType = DbType.Boolean;
				colvarIsServiceUpgrade.MaxLength = 0;
				colvarIsServiceUpgrade.AutoIncrement = false;
				colvarIsServiceUpgrade.IsNullable = false;
				colvarIsServiceUpgrade.IsPrimaryKey = false;
				colvarIsServiceUpgrade.IsForeignKey = false;
				colvarIsServiceUpgrade.IsReadOnly = false;
				colvarIsServiceUpgrade.DefaultSetting = @"((0))";
				colvarIsServiceUpgrade.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsServiceUpgrade);

				TableSchema.TableColumn colvarIsExistingWiring = new TableSchema.TableColumn(schema);
				colvarIsExistingWiring.ColumnName = "IsExistingWiring";
				colvarIsExistingWiring.DataType = DbType.Boolean;
				colvarIsExistingWiring.MaxLength = 0;
				colvarIsExistingWiring.AutoIncrement = false;
				colvarIsExistingWiring.IsNullable = false;
				colvarIsExistingWiring.IsPrimaryKey = false;
				colvarIsExistingWiring.IsForeignKey = false;
				colvarIsExistingWiring.IsReadOnly = false;
				colvarIsExistingWiring.DefaultSetting = @"((0))";
				colvarIsExistingWiring.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExistingWiring);

				TableSchema.TableColumn colvarIsMainPanel = new TableSchema.TableColumn(schema);
				colvarIsMainPanel.ColumnName = "IsMainPanel";
				colvarIsMainPanel.DataType = DbType.Boolean;
				colvarIsMainPanel.MaxLength = 0;
				colvarIsMainPanel.AutoIncrement = false;
				colvarIsMainPanel.IsNullable = false;
				colvarIsMainPanel.IsPrimaryKey = false;
				colvarIsMainPanel.IsForeignKey = false;
				colvarIsMainPanel.IsReadOnly = false;
				colvarIsMainPanel.DefaultSetting = @"((0))";
				colvarIsMainPanel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMainPanel);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountEquipment",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountEquipment LoadFrom(MS_AccountEquipment item)
		{
			MS_AccountEquipment result = new MS_AccountEquipment();
			if (item.AccountEquipmentID != default(long)) {
				result.LoadByKey(item.AccountEquipmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountEquipmentID {
			get { return GetColumnValue<long>(Columns.AccountEquipmentID); }
			set {
				SetColumnValue(Columns.AccountEquipmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountEquipmentID));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public string EquipmentId {
			get { return GetColumnValue<string>(Columns.EquipmentId); }
			set {
				SetColumnValue(Columns.EquipmentId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentId));
			}
		}
		[DataMember]
		public int? EquipmentLocationId {
			get { return GetColumnValue<int?>(Columns.EquipmentLocationId); }
			set {
				SetColumnValue(Columns.EquipmentLocationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentLocationId));
			}
		}
		[DataMember]
		public string GPEmployeeId {
			get { return GetColumnValue<string>(Columns.GPEmployeeId); }
			set {
				SetColumnValue(Columns.GPEmployeeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeId));
			}
		}
		[DataMember]
		public int? OfficeReconciliationItemId {
			get { return GetColumnValue<int?>(Columns.OfficeReconciliationItemId); }
			set {
				SetColumnValue(Columns.OfficeReconciliationItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeReconciliationItemId));
			}
		}
		[DataMember]
		public string AccountEquipmentUpgradeTypeId {
			get { return GetColumnValue<string>(Columns.AccountEquipmentUpgradeTypeId); }
			set {
				SetColumnValue(Columns.AccountEquipmentUpgradeTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountEquipmentUpgradeTypeId));
			}
		}
		[DataMember]
		public string CustomerLocation {
			get { return GetColumnValue<string>(Columns.CustomerLocation); }
			set {
				SetColumnValue(Columns.CustomerLocation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerLocation));
			}
		}
		[DataMember]
		public int Points {
			get { return GetColumnValue<int>(Columns.Points); }
			set {
				SetColumnValue(Columns.Points, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Points));
			}
		}
		[DataMember]
		public double? ActualPoints {
			get { return GetColumnValue<double?>(Columns.ActualPoints); }
			set {
				SetColumnValue(Columns.ActualPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActualPoints));
			}
		}
		[DataMember]
		public decimal Price {
			get { return GetColumnValue<decimal>(Columns.Price); }
			set {
				SetColumnValue(Columns.Price, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Price));
			}
		}
		[DataMember]
		public bool IsExisting {
			get { return GetColumnValue<bool>(Columns.IsExisting); }
			set {
				SetColumnValue(Columns.IsExisting, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsExisting));
			}
		}
		[DataMember]
		public string BarcodeId {
			get { return GetColumnValue<string>(Columns.BarcodeId); }
			set {
				SetColumnValue(Columns.BarcodeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeId));
			}
		}
		[DataMember]
		public bool IsServiceUpgrade {
			get { return GetColumnValue<bool>(Columns.IsServiceUpgrade); }
			set {
				SetColumnValue(Columns.IsServiceUpgrade, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsServiceUpgrade));
			}
		}
		[DataMember]
		public bool IsExistingWiring {
			get { return GetColumnValue<bool>(Columns.IsExistingWiring); }
			set {
				SetColumnValue(Columns.IsExistingWiring, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsExistingWiring));
			}
		}
		[DataMember]
		public bool IsMainPanel {
			get { return GetColumnValue<bool>(Columns.IsMainPanel); }
			set {
				SetColumnValue(Columns.IsMainPanel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsMainPanel));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AccountEquipmentUpgradeType _AccountEquipmentUpgradeType;
		//Relationship: FK_MS_AccountEquipment_MS_AccountEquipmentUpgradeTypes
		public MS_AccountEquipmentUpgradeType AccountEquipmentUpgradeType
		{
			get
			{
				if(_AccountEquipmentUpgradeType == null) {
					_AccountEquipmentUpgradeType = MS_AccountEquipmentUpgradeType.FetchByID(this.AccountEquipmentUpgradeTypeId);
				}
				return _AccountEquipmentUpgradeType;
			}
			set
			{
				SetColumnValue("AccountEquipmentUpgradeTypeId", value.AccountEquipmentUpgradeTypeID);
				_AccountEquipmentUpgradeType = value;
			}
		}

		private MS_Account _Account;
		//Relationship: FK_MS_AccountEquipment_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		private MS_EquipmentLocation _EquipmentLocation;
		//Relationship: FK_MS_AccountEquipment_MS_EquipmentLocations
		public MS_EquipmentLocation EquipmentLocation
		{
			get
			{
				if(_EquipmentLocation == null) {
					_EquipmentLocation = MS_EquipmentLocation.FetchByID(this.EquipmentLocationId);
				}
				return _EquipmentLocation;
			}
			set
			{
				SetColumnValue("EquipmentLocationId", value.EquipmentLocationID);
				_EquipmentLocation = value;
			}
		}

		private MS_Equipment _Equipment;
		//Relationship: FK_MS_AccountEquipment_MS_Equipments
		public MS_Equipment Equipment
		{
			get
			{
				if(_Equipment == null) {
					_Equipment = MS_Equipment.FetchByID(this.EquipmentId);
				}
				return _Equipment;
			}
			set
			{
				SetColumnValue("EquipmentId", value.EquipmentID);
				_Equipment = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountEquipmentID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountEquipmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn EquipmentIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn EquipmentLocationIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPEmployeeIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn OfficeReconciliationItemIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AccountEquipmentUpgradeTypeIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CustomerLocationColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PointsColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ActualPointsColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn PriceColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsExistingColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn BarcodeIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsServiceUpgradeColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsExistingWiringColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsMainPanelColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[22]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountEquipmentID = @"AccountEquipmentID";
			public static readonly string AccountId = @"AccountId";
			public static readonly string EquipmentId = @"EquipmentId";
			public static readonly string EquipmentLocationId = @"EquipmentLocationId";
			public static readonly string GPEmployeeId = @"GPEmployeeId";
			public static readonly string OfficeReconciliationItemId = @"OfficeReconciliationItemId";
			public static readonly string AccountEquipmentUpgradeTypeId = @"AccountEquipmentUpgradeTypeId";
			public static readonly string CustomerLocation = @"CustomerLocation";
			public static readonly string Points = @"Points";
			public static readonly string ActualPoints = @"ActualPoints";
			public static readonly string Price = @"Price";
			public static readonly string IsExisting = @"IsExisting";
			public static readonly string BarcodeId = @"BarcodeId";
			public static readonly string IsServiceUpgrade = @"IsServiceUpgrade";
			public static readonly string IsExistingWiring = @"IsExistingWiring";
			public static readonly string IsMainPanel = @"IsMainPanel";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountEquipmentID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountZoneAssignmentCollection _MS_AccountZoneAssignmentsCol;
		//Relationship: FK_MS_AccountZoneAssignments_MS_AccountEquipment
		public MS_AccountZoneAssignmentCollection MS_AccountZoneAssignmentsCol
		{
			get
			{
				if(_MS_AccountZoneAssignmentsCol == null) {
					_MS_AccountZoneAssignmentsCol = new MS_AccountZoneAssignmentCollection();
					_MS_AccountZoneAssignmentsCol.LoadAndCloseReader(MS_AccountZoneAssignment.Query()
						.WHERE(MS_AccountZoneAssignment.Columns.AccountEquipmentId, AccountEquipmentID).ExecuteReader());
				}
				return _MS_AccountZoneAssignmentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountEquipmentUpgradeType class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEquipmentUpgradeTypeCollection : ActiveList<MS_AccountEquipmentUpgradeType, MS_AccountEquipmentUpgradeTypeCollection>
	{
		public static MS_AccountEquipmentUpgradeTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountEquipmentUpgradeTypeCollection result = new MS_AccountEquipmentUpgradeTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountEquipmentUpgradeType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountEquipmentUpgradeTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEquipmentUpgradeType : ActiveRecord<MS_AccountEquipmentUpgradeType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountEquipmentUpgradeType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountEquipmentUpgradeTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountEquipmentUpgradeTypeID = new TableSchema.TableColumn(schema);
				colvarAccountEquipmentUpgradeTypeID.ColumnName = "AccountEquipmentUpgradeTypeID";
				colvarAccountEquipmentUpgradeTypeID.DataType = DbType.AnsiString;
				colvarAccountEquipmentUpgradeTypeID.MaxLength = 10;
				colvarAccountEquipmentUpgradeTypeID.AutoIncrement = false;
				colvarAccountEquipmentUpgradeTypeID.IsNullable = false;
				colvarAccountEquipmentUpgradeTypeID.IsPrimaryKey = true;
				colvarAccountEquipmentUpgradeTypeID.IsForeignKey = false;
				colvarAccountEquipmentUpgradeTypeID.IsReadOnly = false;
				colvarAccountEquipmentUpgradeTypeID.DefaultSetting = @"";
				colvarAccountEquipmentUpgradeTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountEquipmentUpgradeTypeID);

				TableSchema.TableColumn colvarAccountEquipmentUpgradeType = new TableSchema.TableColumn(schema);
				colvarAccountEquipmentUpgradeType.ColumnName = "AccountEquipmentUpgradeType";
				colvarAccountEquipmentUpgradeType.DataType = DbType.AnsiString;
				colvarAccountEquipmentUpgradeType.MaxLength = 50;
				colvarAccountEquipmentUpgradeType.AutoIncrement = false;
				colvarAccountEquipmentUpgradeType.IsNullable = false;
				colvarAccountEquipmentUpgradeType.IsPrimaryKey = false;
				colvarAccountEquipmentUpgradeType.IsForeignKey = false;
				colvarAccountEquipmentUpgradeType.IsReadOnly = false;
				colvarAccountEquipmentUpgradeType.DefaultSetting = @"";
				colvarAccountEquipmentUpgradeType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountEquipmentUpgradeType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountEquipmentUpgradeTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountEquipmentUpgradeType LoadFrom(MS_AccountEquipmentUpgradeType item)
		{
			MS_AccountEquipmentUpgradeType result = new MS_AccountEquipmentUpgradeType();
			if (item.AccountEquipmentUpgradeTypeID != default(string)) {
				result.LoadByKey(item.AccountEquipmentUpgradeTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AccountEquipmentUpgradeTypeID {
			get { return GetColumnValue<string>(Columns.AccountEquipmentUpgradeTypeID); }
			set {
				SetColumnValue(Columns.AccountEquipmentUpgradeTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountEquipmentUpgradeTypeID));
			}
		}
		[DataMember]
		public string AccountEquipmentUpgradeType {
			get { return GetColumnValue<string>(Columns.AccountEquipmentUpgradeType); }
			set {
				SetColumnValue(Columns.AccountEquipmentUpgradeType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountEquipmentUpgradeType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountEquipmentUpgradeType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountEquipmentUpgradeTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountEquipmentUpgradeTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountEquipmentUpgradeTypeID = @"AccountEquipmentUpgradeTypeID";
			public static readonly string AccountEquipmentUpgradeType = @"AccountEquipmentUpgradeType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountEquipmentUpgradeTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountEquipmentCollection _MS_AccountEquipmentsCol;
		//Relationship: FK_MS_AccountEquipment_MS_AccountEquipmentUpgradeTypes
		public MS_AccountEquipmentCollection MS_AccountEquipmentsCol
		{
			get
			{
				if(_MS_AccountEquipmentsCol == null) {
					_MS_AccountEquipmentsCol = new MS_AccountEquipmentCollection();
					_MS_AccountEquipmentsCol.LoadAndCloseReader(MS_AccountEquipment.Query()
						.WHERE(MS_AccountEquipment.Columns.AccountEquipmentUpgradeTypeId, AccountEquipmentUpgradeTypeID).ExecuteReader());
				}
				return _MS_AccountEquipmentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountEvent class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEventCollection : ActiveList<MS_AccountEvent, MS_AccountEventCollection>
	{
		public static MS_AccountEventCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountEventCollection result = new MS_AccountEventCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountEvent item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountEvents table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountEvent : ActiveRecord<MS_AccountEvent>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountEvent()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountEvents", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountEventID = new TableSchema.TableColumn(schema);
				colvarAccountEventID.ColumnName = "AccountEventID";
				colvarAccountEventID.DataType = DbType.Int32;
				colvarAccountEventID.MaxLength = 0;
				colvarAccountEventID.AutoIncrement = true;
				colvarAccountEventID.IsNullable = false;
				colvarAccountEventID.IsPrimaryKey = true;
				colvarAccountEventID.IsForeignKey = false;
				colvarAccountEventID.IsReadOnly = false;
				colvarAccountEventID.DefaultSetting = @"";
				colvarAccountEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountEventID);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = true;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"";
				colvarMonitoringStationOSId.ForeignKeyTableName = "MS_MonitoringStationOSs";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarMoniEventId = new TableSchema.TableColumn(schema);
				colvarMoniEventId.ColumnName = "MoniEventId";
				colvarMoniEventId.DataType = DbType.Int32;
				colvarMoniEventId.MaxLength = 0;
				colvarMoniEventId.AutoIncrement = false;
				colvarMoniEventId.IsNullable = true;
				colvarMoniEventId.IsPrimaryKey = false;
				colvarMoniEventId.IsForeignKey = true;
				colvarMoniEventId.IsReadOnly = false;
				colvarMoniEventId.DefaultSetting = @"";
				colvarMoniEventId.ForeignKeyTableName = "MS_MonitronicsEntityEventCodes";
				schema.Columns.Add(colvarMoniEventId);

				TableSchema.TableColumn colvarAvantGuardEventId = new TableSchema.TableColumn(schema);
				colvarAvantGuardEventId.ColumnName = "AvantGuardEventId";
				colvarAvantGuardEventId.DataType = DbType.Int32;
				colvarAvantGuardEventId.MaxLength = 0;
				colvarAvantGuardEventId.AutoIncrement = false;
				colvarAvantGuardEventId.IsNullable = true;
				colvarAvantGuardEventId.IsPrimaryKey = false;
				colvarAvantGuardEventId.IsForeignKey = true;
				colvarAvantGuardEventId.IsReadOnly = false;
				colvarAvantGuardEventId.DefaultSetting = @"";
				colvarAvantGuardEventId.ForeignKeyTableName = "MS_AvantGuardEventCodes";
				schema.Columns.Add(colvarAvantGuardEventId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountEvents",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountEvent LoadFrom(MS_AccountEvent item)
		{
			MS_AccountEvent result = new MS_AccountEvent();
			if (item.AccountEventID != default(int)) {
				result.LoadByKey(item.AccountEventID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountEventID {
			get { return GetColumnValue<int>(Columns.AccountEventID); }
			set {
				SetColumnValue(Columns.AccountEventID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountEventID));
			}
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set {
				SetColumnValue(Columns.MonitoringStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSId));
			}
		}
		[DataMember]
		public int? MoniEventId {
			get { return GetColumnValue<int?>(Columns.MoniEventId); }
			set {
				SetColumnValue(Columns.MoniEventId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MoniEventId));
			}
		}
		[DataMember]
		public int? AvantGuardEventId {
			get { return GetColumnValue<int?>(Columns.AvantGuardEventId); }
			set {
				SetColumnValue(Columns.AvantGuardEventId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AvantGuardEventId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AvantGuardEventCode _AvantGuardEvent;
		//Relationship: FK_MS_AccountEvent_MS_AvantGuardEventCodes
		public MS_AvantGuardEventCode AvantGuardEvent
		{
			get
			{
				if(_AvantGuardEvent == null) {
					_AvantGuardEvent = MS_AvantGuardEventCode.FetchByID(this.AvantGuardEventId);
				}
				return _AvantGuardEvent;
			}
			set
			{
				SetColumnValue("AvantGuardEventId", value.AGEventID);
				_AvantGuardEvent = value;
			}
		}

		private MS_MonitoringStationOss _MonitoringStationOS;
		//Relationship: FK_MS_AccountEvents_MS_MonitoringStationOSs
		public MS_MonitoringStationOss MonitoringStationOS
		{
			get
			{
				if(_MonitoringStationOS == null) {
					_MonitoringStationOS = MS_MonitoringStationOss.FetchByID(this.MonitoringStationOSId);
				}
				return _MonitoringStationOS;
			}
			set
			{
				SetColumnValue("MonitoringStationOSId", value.MonitoringStationOSID);
				_MonitoringStationOS = value;
			}
		}

		private MS_MonitronicsEntityEventCode _MoniEvent;
		//Relationship: FK_MS_AccountEvents_MS_MonitronicsEventCodes
		public MS_MonitronicsEntityEventCode MoniEvent
		{
			get
			{
				if(_MoniEvent == null) {
					_MoniEvent = MS_MonitronicsEntityEventCode.FetchByID(this.MoniEventId);
				}
				return _MoniEvent;
			}
			set
			{
				SetColumnValue("MoniEventId", value.MoniEventID);
				_MoniEvent = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MonitoringStationOSId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountEventIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MoniEventIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AvantGuardEventIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountEventID = @"AccountEventID";
			public static readonly string MonitoringStationOSId = @"MonitoringStationOSId";
			public static readonly string MoniEventId = @"MoniEventId";
			public static readonly string AvantGuardEventId = @"AvantGuardEventId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountEventID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountZoneAssignmentCollection _MS_AccountZoneAssignmentsCol;
		//Relationship: FK_MS_AccountZoneAssignments_MS_AccountEvents
		public MS_AccountZoneAssignmentCollection MS_AccountZoneAssignmentsCol
		{
			get
			{
				if(_MS_AccountZoneAssignmentsCol == null) {
					_MS_AccountZoneAssignmentsCol = new MS_AccountZoneAssignmentCollection();
					_MS_AccountZoneAssignmentsCol.LoadAndCloseReader(MS_AccountZoneAssignment.Query()
						.WHERE(MS_AccountZoneAssignment.Columns.AccountEventId, AccountEventID).ExecuteReader());
				}
				return _MS_AccountZoneAssignmentsCol;
			}
		}

		private MS_EquipmentCollection _MS_EquipmentsCol;
		//Relationship: FK_MS_Equipments_MS_AccountEvents
		public MS_EquipmentCollection MS_EquipmentsCol
		{
			get
			{
				if(_MS_EquipmentsCol == null) {
					_MS_EquipmentsCol = new MS_EquipmentCollection();
					_MS_EquipmentsCol.LoadAndCloseReader(MS_Equipment.Query()
						.WHERE(MS_Equipment.Columns.AccountEventId, AccountEventID).ExecuteReader());
				}
				return _MS_EquipmentsCol;
			}
		}

		private MS_EquipmentTypesZoneEventTypeCollection _MS_EquipmentTypesZoneEventTypesCol;
		//Relationship: FK_MS_EquipmentTypesZoneEventTypes_MS_AccountEvent
		public MS_EquipmentTypesZoneEventTypeCollection MS_EquipmentTypesZoneEventTypesCol
		{
			get
			{
				if(_MS_EquipmentTypesZoneEventTypesCol == null) {
					_MS_EquipmentTypesZoneEventTypesCol = new MS_EquipmentTypesZoneEventTypeCollection();
					_MS_EquipmentTypesZoneEventTypesCol.LoadAndCloseReader(MS_EquipmentTypesZoneEventType.Query()
						.WHERE(MS_EquipmentTypesZoneEventType.Columns.AccountEventId, AccountEventID).ExecuteReader());
				}
				return _MS_EquipmentTypesZoneEventTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountHoldCatg1 class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountHoldCatg1Collection : ActiveList<MS_AccountHoldCatg1, MS_AccountHoldCatg1Collection>
	{
		public static MS_AccountHoldCatg1Collection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountHoldCatg1Collection result = new MS_AccountHoldCatg1Collection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountHoldCatg1 item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountHoldCatg1 table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountHoldCatg1 : ActiveRecord<MS_AccountHoldCatg1>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountHoldCatg1()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountHoldCatg1", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCatg1ID = new TableSchema.TableColumn(schema);
				colvarCatg1ID.ColumnName = "Catg1ID";
				colvarCatg1ID.DataType = DbType.Int32;
				colvarCatg1ID.MaxLength = 0;
				colvarCatg1ID.AutoIncrement = true;
				colvarCatg1ID.IsNullable = false;
				colvarCatg1ID.IsPrimaryKey = true;
				colvarCatg1ID.IsForeignKey = false;
				colvarCatg1ID.IsReadOnly = false;
				colvarCatg1ID.DefaultSetting = @"";
				colvarCatg1ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCatg1ID);

				TableSchema.TableColumn colvarCatgName = new TableSchema.TableColumn(schema);
				colvarCatgName.ColumnName = "CatgName";
				colvarCatgName.DataType = DbType.String;
				colvarCatgName.MaxLength = 50;
				colvarCatgName.AutoIncrement = false;
				colvarCatgName.IsNullable = false;
				colvarCatgName.IsPrimaryKey = false;
				colvarCatgName.IsForeignKey = false;
				colvarCatgName.IsReadOnly = false;
				colvarCatgName.DefaultSetting = @"";
				colvarCatgName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCatgName);

				TableSchema.TableColumn colvarCatgDescription = new TableSchema.TableColumn(schema);
				colvarCatgDescription.ColumnName = "CatgDescription";
				colvarCatgDescription.DataType = DbType.String;
				colvarCatgDescription.MaxLength = -1;
				colvarCatgDescription.AutoIncrement = false;
				colvarCatgDescription.IsNullable = true;
				colvarCatgDescription.IsPrimaryKey = false;
				colvarCatgDescription.IsForeignKey = false;
				colvarCatgDescription.IsReadOnly = false;
				colvarCatgDescription.DefaultSetting = @"";
				colvarCatgDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCatgDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountHoldCatg1",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountHoldCatg1 LoadFrom(MS_AccountHoldCatg1 item)
		{
			MS_AccountHoldCatg1 result = new MS_AccountHoldCatg1();
			if (item.Catg1ID != default(int)) {
				result.LoadByKey(item.Catg1ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int Catg1ID {
			get { return GetColumnValue<int>(Columns.Catg1ID); }
			set {
				SetColumnValue(Columns.Catg1ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Catg1ID));
			}
		}
		[DataMember]
		public string CatgName {
			get { return GetColumnValue<string>(Columns.CatgName); }
			set {
				SetColumnValue(Columns.CatgName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CatgName));
			}
		}
		[DataMember]
		public string CatgDescription {
			get { return GetColumnValue<string>(Columns.CatgDescription); }
			set {
				SetColumnValue(Columns.CatgDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CatgDescription));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CatgName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn Catg1IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CatgNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CatgDescriptionColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string Catg1ID = @"Catg1ID";
			public static readonly string CatgName = @"CatgName";
			public static readonly string CatgDescription = @"CatgDescription";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return Catg1ID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountHoldCatg2 class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountHoldCatg2Collection : ActiveList<MS_AccountHoldCatg2, MS_AccountHoldCatg2Collection>
	{
		public static MS_AccountHoldCatg2Collection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountHoldCatg2Collection result = new MS_AccountHoldCatg2Collection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountHoldCatg2 item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountHoldCatg2 table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountHoldCatg2 : ActiveRecord<MS_AccountHoldCatg2>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountHoldCatg2()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountHoldCatg2", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCatg2ID = new TableSchema.TableColumn(schema);
				colvarCatg2ID.ColumnName = "Catg2ID";
				colvarCatg2ID.DataType = DbType.Int32;
				colvarCatg2ID.MaxLength = 0;
				colvarCatg2ID.AutoIncrement = true;
				colvarCatg2ID.IsNullable = false;
				colvarCatg2ID.IsPrimaryKey = true;
				colvarCatg2ID.IsForeignKey = false;
				colvarCatg2ID.IsReadOnly = false;
				colvarCatg2ID.DefaultSetting = @"";
				colvarCatg2ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCatg2ID);

				TableSchema.TableColumn colvarCatgName = new TableSchema.TableColumn(schema);
				colvarCatgName.ColumnName = "CatgName";
				colvarCatgName.DataType = DbType.String;
				colvarCatgName.MaxLength = 50;
				colvarCatgName.AutoIncrement = false;
				colvarCatgName.IsNullable = false;
				colvarCatgName.IsPrimaryKey = false;
				colvarCatgName.IsForeignKey = false;
				colvarCatgName.IsReadOnly = false;
				colvarCatgName.DefaultSetting = @"";
				colvarCatgName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCatgName);

				TableSchema.TableColumn colvarCatg1Id = new TableSchema.TableColumn(schema);
				colvarCatg1Id.ColumnName = "Catg1Id";
				colvarCatg1Id.DataType = DbType.Int32;
				colvarCatg1Id.MaxLength = 0;
				colvarCatg1Id.AutoIncrement = false;
				colvarCatg1Id.IsNullable = false;
				colvarCatg1Id.IsPrimaryKey = false;
				colvarCatg1Id.IsForeignKey = false;
				colvarCatg1Id.IsReadOnly = false;
				colvarCatg1Id.DefaultSetting = @"";
				colvarCatg1Id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCatg1Id);

				TableSchema.TableColumn colvarRecruitFriendlyName = new TableSchema.TableColumn(schema);
				colvarRecruitFriendlyName.ColumnName = "RecruitFriendlyName";
				colvarRecruitFriendlyName.DataType = DbType.String;
				colvarRecruitFriendlyName.MaxLength = 50;
				colvarRecruitFriendlyName.AutoIncrement = false;
				colvarRecruitFriendlyName.IsNullable = true;
				colvarRecruitFriendlyName.IsPrimaryKey = false;
				colvarRecruitFriendlyName.IsForeignKey = false;
				colvarRecruitFriendlyName.IsReadOnly = false;
				colvarRecruitFriendlyName.DefaultSetting = @"";
				colvarRecruitFriendlyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitFriendlyName);

				TableSchema.TableColumn colvarCatgDescription = new TableSchema.TableColumn(schema);
				colvarCatgDescription.ColumnName = "CatgDescription";
				colvarCatgDescription.DataType = DbType.String;
				colvarCatgDescription.MaxLength = -1;
				colvarCatgDescription.AutoIncrement = false;
				colvarCatgDescription.IsNullable = true;
				colvarCatgDescription.IsPrimaryKey = false;
				colvarCatgDescription.IsForeignKey = false;
				colvarCatgDescription.IsReadOnly = false;
				colvarCatgDescription.DefaultSetting = @"";
				colvarCatgDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCatgDescription);

				TableSchema.TableColumn colvarIsRepFrontEndHold = new TableSchema.TableColumn(schema);
				colvarIsRepFrontEndHold.ColumnName = "IsRepFrontEndHold";
				colvarIsRepFrontEndHold.DataType = DbType.Boolean;
				colvarIsRepFrontEndHold.MaxLength = 0;
				colvarIsRepFrontEndHold.AutoIncrement = false;
				colvarIsRepFrontEndHold.IsNullable = false;
				colvarIsRepFrontEndHold.IsPrimaryKey = false;
				colvarIsRepFrontEndHold.IsForeignKey = false;
				colvarIsRepFrontEndHold.IsReadOnly = false;
				colvarIsRepFrontEndHold.DefaultSetting = @"";
				colvarIsRepFrontEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsRepFrontEndHold);

				TableSchema.TableColumn colvarIsRepBackEndHold = new TableSchema.TableColumn(schema);
				colvarIsRepBackEndHold.ColumnName = "IsRepBackEndHold";
				colvarIsRepBackEndHold.DataType = DbType.Boolean;
				colvarIsRepBackEndHold.MaxLength = 0;
				colvarIsRepBackEndHold.AutoIncrement = false;
				colvarIsRepBackEndHold.IsNullable = false;
				colvarIsRepBackEndHold.IsPrimaryKey = false;
				colvarIsRepBackEndHold.IsForeignKey = false;
				colvarIsRepBackEndHold.IsReadOnly = false;
				colvarIsRepBackEndHold.DefaultSetting = @"";
				colvarIsRepBackEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsRepBackEndHold);

				TableSchema.TableColumn colvarIsTechFrontEndHold = new TableSchema.TableColumn(schema);
				colvarIsTechFrontEndHold.ColumnName = "IsTechFrontEndHold";
				colvarIsTechFrontEndHold.DataType = DbType.Boolean;
				colvarIsTechFrontEndHold.MaxLength = 0;
				colvarIsTechFrontEndHold.AutoIncrement = false;
				colvarIsTechFrontEndHold.IsNullable = false;
				colvarIsTechFrontEndHold.IsPrimaryKey = false;
				colvarIsTechFrontEndHold.IsForeignKey = false;
				colvarIsTechFrontEndHold.IsReadOnly = false;
				colvarIsTechFrontEndHold.DefaultSetting = @"";
				colvarIsTechFrontEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechFrontEndHold);

				TableSchema.TableColumn colvarIsTechBackEndHold = new TableSchema.TableColumn(schema);
				colvarIsTechBackEndHold.ColumnName = "IsTechBackEndHold";
				colvarIsTechBackEndHold.DataType = DbType.Boolean;
				colvarIsTechBackEndHold.MaxLength = 0;
				colvarIsTechBackEndHold.AutoIncrement = false;
				colvarIsTechBackEndHold.IsNullable = false;
				colvarIsTechBackEndHold.IsPrimaryKey = false;
				colvarIsTechBackEndHold.IsForeignKey = false;
				colvarIsTechBackEndHold.IsReadOnly = false;
				colvarIsTechBackEndHold.DefaultSetting = @"";
				colvarIsTechBackEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechBackEndHold);

				TableSchema.TableColumn colvarPreventsContractSale = new TableSchema.TableColumn(schema);
				colvarPreventsContractSale.ColumnName = "PreventsContractSale";
				colvarPreventsContractSale.DataType = DbType.Boolean;
				colvarPreventsContractSale.MaxLength = 0;
				colvarPreventsContractSale.AutoIncrement = false;
				colvarPreventsContractSale.IsNullable = false;
				colvarPreventsContractSale.IsPrimaryKey = false;
				colvarPreventsContractSale.IsForeignKey = false;
				colvarPreventsContractSale.IsReadOnly = false;
				colvarPreventsContractSale.DefaultSetting = @"";
				colvarPreventsContractSale.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreventsContractSale);

				TableSchema.TableColumn colvarIsAccountFlag = new TableSchema.TableColumn(schema);
				colvarIsAccountFlag.ColumnName = "IsAccountFlag";
				colvarIsAccountFlag.DataType = DbType.Boolean;
				colvarIsAccountFlag.MaxLength = 0;
				colvarIsAccountFlag.AutoIncrement = false;
				colvarIsAccountFlag.IsNullable = false;
				colvarIsAccountFlag.IsPrimaryKey = false;
				colvarIsAccountFlag.IsForeignKey = false;
				colvarIsAccountFlag.IsReadOnly = false;
				colvarIsAccountFlag.DefaultSetting = @"((0))";
				colvarIsAccountFlag.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAccountFlag);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountHoldCatg2",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountHoldCatg2 LoadFrom(MS_AccountHoldCatg2 item)
		{
			MS_AccountHoldCatg2 result = new MS_AccountHoldCatg2();
			if (item.Catg2ID != default(int)) {
				result.LoadByKey(item.Catg2ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int Catg2ID {
			get { return GetColumnValue<int>(Columns.Catg2ID); }
			set {
				SetColumnValue(Columns.Catg2ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Catg2ID));
			}
		}
		[DataMember]
		public string CatgName {
			get { return GetColumnValue<string>(Columns.CatgName); }
			set {
				SetColumnValue(Columns.CatgName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CatgName));
			}
		}
		[DataMember]
		public int Catg1Id {
			get { return GetColumnValue<int>(Columns.Catg1Id); }
			set {
				SetColumnValue(Columns.Catg1Id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Catg1Id));
			}
		}
		[DataMember]
		public string RecruitFriendlyName {
			get { return GetColumnValue<string>(Columns.RecruitFriendlyName); }
			set {
				SetColumnValue(Columns.RecruitFriendlyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitFriendlyName));
			}
		}
		[DataMember]
		public string CatgDescription {
			get { return GetColumnValue<string>(Columns.CatgDescription); }
			set {
				SetColumnValue(Columns.CatgDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CatgDescription));
			}
		}
		[DataMember]
		public bool IsRepFrontEndHold {
			get { return GetColumnValue<bool>(Columns.IsRepFrontEndHold); }
			set {
				SetColumnValue(Columns.IsRepFrontEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsRepFrontEndHold));
			}
		}
		[DataMember]
		public bool IsRepBackEndHold {
			get { return GetColumnValue<bool>(Columns.IsRepBackEndHold); }
			set {
				SetColumnValue(Columns.IsRepBackEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsRepBackEndHold));
			}
		}
		[DataMember]
		public bool IsTechFrontEndHold {
			get { return GetColumnValue<bool>(Columns.IsTechFrontEndHold); }
			set {
				SetColumnValue(Columns.IsTechFrontEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTechFrontEndHold));
			}
		}
		[DataMember]
		public bool IsTechBackEndHold {
			get { return GetColumnValue<bool>(Columns.IsTechBackEndHold); }
			set {
				SetColumnValue(Columns.IsTechBackEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTechBackEndHold));
			}
		}
		[DataMember]
		public bool PreventsContractSale {
			get { return GetColumnValue<bool>(Columns.PreventsContractSale); }
			set {
				SetColumnValue(Columns.PreventsContractSale, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreventsContractSale));
			}
		}
		[DataMember]
		public bool IsAccountFlag {
			get { return GetColumnValue<bool>(Columns.IsAccountFlag); }
			set {
				SetColumnValue(Columns.IsAccountFlag, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAccountFlag));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CatgName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn Catg2IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CatgNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn Catg1IdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RecruitFriendlyNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CatgDescriptionColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsRepFrontEndHoldColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsRepBackEndHoldColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsTechFrontEndHoldColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsTechBackEndHoldColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn PreventsContractSaleColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsAccountFlagColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[16]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string Catg2ID = @"Catg2ID";
			public static readonly string CatgName = @"CatgName";
			public static readonly string Catg1Id = @"Catg1Id";
			public static readonly string RecruitFriendlyName = @"RecruitFriendlyName";
			public static readonly string CatgDescription = @"CatgDescription";
			public static readonly string IsRepFrontEndHold = @"IsRepFrontEndHold";
			public static readonly string IsRepBackEndHold = @"IsRepBackEndHold";
			public static readonly string IsTechFrontEndHold = @"IsTechFrontEndHold";
			public static readonly string IsTechBackEndHold = @"IsTechBackEndHold";
			public static readonly string PreventsContractSale = @"PreventsContractSale";
			public static readonly string IsAccountFlag = @"IsAccountFlag";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return Catg2ID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountHoldStockCollection _MS_AccountHoldStocksCol;
		//Relationship: FK_MS_AccountHoldStock_MS_AccountHoldCatg2
		public MS_AccountHoldStockCollection MS_AccountHoldStocksCol
		{
			get
			{
				if(_MS_AccountHoldStocksCol == null) {
					_MS_AccountHoldStocksCol = new MS_AccountHoldStockCollection();
					_MS_AccountHoldStocksCol.LoadAndCloseReader(MS_AccountHoldStock.Query()
						.WHERE(MS_AccountHoldStock.Columns.Catg2Id, Catg2ID).ExecuteReader());
				}
				return _MS_AccountHoldStocksCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountHold class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountHoldCollection : ActiveList<MS_AccountHold, MS_AccountHoldCollection>
	{
		public static MS_AccountHoldCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountHoldCollection result = new MS_AccountHoldCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountHold item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountHolds table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountHold : ActiveRecord<MS_AccountHold>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountHold()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountHolds", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountHoldID = new TableSchema.TableColumn(schema);
				colvarAccountHoldID.ColumnName = "AccountHoldID";
				colvarAccountHoldID.DataType = DbType.Int32;
				colvarAccountHoldID.MaxLength = 0;
				colvarAccountHoldID.AutoIncrement = true;
				colvarAccountHoldID.IsNullable = false;
				colvarAccountHoldID.IsPrimaryKey = true;
				colvarAccountHoldID.IsForeignKey = false;
				colvarAccountHoldID.IsReadOnly = false;
				colvarAccountHoldID.DefaultSetting = @"";
				colvarAccountHoldID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountHoldID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MS_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarCatg2Id = new TableSchema.TableColumn(schema);
				colvarCatg2Id.ColumnName = "Catg2Id";
				colvarCatg2Id.DataType = DbType.Int32;
				colvarCatg2Id.MaxLength = 0;
				colvarCatg2Id.AutoIncrement = false;
				colvarCatg2Id.IsNullable = false;
				colvarCatg2Id.IsPrimaryKey = false;
				colvarCatg2Id.IsForeignKey = false;
				colvarCatg2Id.IsReadOnly = false;
				colvarCatg2Id.DefaultSetting = @"";
				colvarCatg2Id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCatg2Id);

				TableSchema.TableColumn colvarHoldDescription = new TableSchema.TableColumn(schema);
				colvarHoldDescription.ColumnName = "HoldDescription";
				colvarHoldDescription.DataType = DbType.String;
				colvarHoldDescription.MaxLength = -1;
				colvarHoldDescription.AutoIncrement = false;
				colvarHoldDescription.IsNullable = true;
				colvarHoldDescription.IsPrimaryKey = false;
				colvarHoldDescription.IsForeignKey = false;
				colvarHoldDescription.IsReadOnly = false;
				colvarHoldDescription.DefaultSetting = @"";
				colvarHoldDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHoldDescription);

				TableSchema.TableColumn colvarFixedNote = new TableSchema.TableColumn(schema);
				colvarFixedNote.ColumnName = "FixedNote";
				colvarFixedNote.DataType = DbType.String;
				colvarFixedNote.MaxLength = -1;
				colvarFixedNote.AutoIncrement = false;
				colvarFixedNote.IsNullable = true;
				colvarFixedNote.IsPrimaryKey = false;
				colvarFixedNote.IsForeignKey = false;
				colvarFixedNote.IsReadOnly = false;
				colvarFixedNote.DefaultSetting = @"";
				colvarFixedNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFixedNote);

				TableSchema.TableColumn colvarFixedBy = new TableSchema.TableColumn(schema);
				colvarFixedBy.ColumnName = "FixedBy";
				colvarFixedBy.DataType = DbType.String;
				colvarFixedBy.MaxLength = 50;
				colvarFixedBy.AutoIncrement = false;
				colvarFixedBy.IsNullable = false;
				colvarFixedBy.IsPrimaryKey = false;
				colvarFixedBy.IsForeignKey = false;
				colvarFixedBy.IsReadOnly = false;
				colvarFixedBy.DefaultSetting = @"('SYSTEM')";
				colvarFixedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFixedBy);

				TableSchema.TableColumn colvarFixedOn = new TableSchema.TableColumn(schema);
				colvarFixedOn.ColumnName = "FixedOn";
				colvarFixedOn.DataType = DbType.DateTime;
				colvarFixedOn.MaxLength = 0;
				colvarFixedOn.AutoIncrement = false;
				colvarFixedOn.IsNullable = false;
				colvarFixedOn.IsPrimaryKey = false;
				colvarFixedOn.IsForeignKey = false;
				colvarFixedOn.IsReadOnly = false;
				colvarFixedOn.DefaultSetting = @"(getutcdate())";
				colvarFixedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFixedOn);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountHolds",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountHold LoadFrom(MS_AccountHold item)
		{
			MS_AccountHold result = new MS_AccountHold();
			if (item.AccountHoldID != default(int)) {
				result.LoadByKey(item.AccountHoldID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountHoldID {
			get { return GetColumnValue<int>(Columns.AccountHoldID); }
			set {
				SetColumnValue(Columns.AccountHoldID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountHoldID));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public int Catg2Id {
			get { return GetColumnValue<int>(Columns.Catg2Id); }
			set {
				SetColumnValue(Columns.Catg2Id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Catg2Id));
			}
		}
		[DataMember]
		public string HoldDescription {
			get { return GetColumnValue<string>(Columns.HoldDescription); }
			set {
				SetColumnValue(Columns.HoldDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HoldDescription));
			}
		}
		[DataMember]
		public string FixedNote {
			get { return GetColumnValue<string>(Columns.FixedNote); }
			set {
				SetColumnValue(Columns.FixedNote, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FixedNote));
			}
		}
		[DataMember]
		public string FixedBy {
			get { return GetColumnValue<string>(Columns.FixedBy); }
			set {
				SetColumnValue(Columns.FixedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FixedBy));
			}
		}
		[DataMember]
		public DateTime FixedOn {
			get { return GetColumnValue<DateTime>(Columns.FixedOn); }
			set {
				SetColumnValue(Columns.FixedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FixedOn));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Account _Account;
		//Relationship: FK_MS_AccountHolds_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountHoldID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountHoldIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn Catg2IdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn HoldDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn FixedNoteColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn FixedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn FixedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountHoldID = @"AccountHoldID";
			public static readonly string AccountId = @"AccountId";
			public static readonly string Catg2Id = @"Catg2Id";
			public static readonly string HoldDescription = @"HoldDescription";
			public static readonly string FixedNote = @"FixedNote";
			public static readonly string FixedBy = @"FixedBy";
			public static readonly string FixedOn = @"FixedOn";
			public static readonly string IsActive = @"IsActive";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountHoldID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountHoldStock class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountHoldStockCollection : ActiveList<MS_AccountHoldStock, MS_AccountHoldStockCollection>
	{
		public static MS_AccountHoldStockCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountHoldStockCollection result = new MS_AccountHoldStockCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountHoldStock item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountHoldStock table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountHoldStock : ActiveRecord<MS_AccountHoldStock>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountHoldStock()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountHoldStock", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCatg2Id = new TableSchema.TableColumn(schema);
				colvarCatg2Id.ColumnName = "Catg2Id";
				colvarCatg2Id.DataType = DbType.Int32;
				colvarCatg2Id.MaxLength = 0;
				colvarCatg2Id.AutoIncrement = false;
				colvarCatg2Id.IsNullable = false;
				colvarCatg2Id.IsPrimaryKey = true;
				colvarCatg2Id.IsForeignKey = false;
				colvarCatg2Id.IsReadOnly = false;
				colvarCatg2Id.DefaultSetting = @"";
				colvarCatg2Id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCatg2Id);

				TableSchema.TableColumn colvarStockName = new TableSchema.TableColumn(schema);
				colvarStockName.ColumnName = "StockName";
				colvarStockName.DataType = DbType.String;
				colvarStockName.MaxLength = 50;
				colvarStockName.AutoIncrement = false;
				colvarStockName.IsNullable = false;
				colvarStockName.IsPrimaryKey = false;
				colvarStockName.IsForeignKey = false;
				colvarStockName.IsReadOnly = false;
				colvarStockName.DefaultSetting = @"";
				colvarStockName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountHoldStock",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountHoldStock LoadFrom(MS_AccountHoldStock item)
		{
			MS_AccountHoldStock result = new MS_AccountHoldStock();
			if (item.Catg2Id != default(int)) {
				result.LoadByKey(item.Catg2Id);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int Catg2Id {
			get { return GetColumnValue<int>(Columns.Catg2Id); }
			set {
				SetColumnValue(Columns.Catg2Id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Catg2Id));
			}
		}
		[DataMember]
		public string StockName {
			get { return GetColumnValue<string>(Columns.StockName); }
			set {
				SetColumnValue(Columns.StockName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StockName));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AccountHoldCatg2 _Catg2;
		//Relationship: FK_MS_AccountHoldStock_MS_AccountHoldCatg2
		public MS_AccountHoldCatg2 Catg2
		{
			get
			{
				if(_Catg2 == null) {
					_Catg2 = MS_AccountHoldCatg2.FetchByID(this.Catg2Id);
				}
				return _Catg2;
			}
			set
			{
				SetColumnValue("Catg2Id", value.Catg2ID);
				_Catg2 = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return StockName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn Catg2IdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StockNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string Catg2Id = @"Catg2Id";
			public static readonly string StockName = @"StockName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return Catg2Id; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountPanelTypePanicZone class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountPanelTypePanicZoneCollection : ActiveList<MS_AccountPanelTypePanicZone, MS_AccountPanelTypePanicZoneCollection>
	{
		public static MS_AccountPanelTypePanicZoneCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountPanelTypePanicZoneCollection result = new MS_AccountPanelTypePanicZoneCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountPanelTypePanicZone item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountPanelTypePanicZones table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountPanelTypePanicZone : ActiveRecord<MS_AccountPanelTypePanicZone>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountPanelTypePanicZone()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountPanelTypePanicZones", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountPanelTypePanicZoneID = new TableSchema.TableColumn(schema);
				colvarAccountPanelTypePanicZoneID.ColumnName = "AccountPanelTypePanicZoneID";
				colvarAccountPanelTypePanicZoneID.DataType = DbType.Int32;
				colvarAccountPanelTypePanicZoneID.MaxLength = 0;
				colvarAccountPanelTypePanicZoneID.AutoIncrement = true;
				colvarAccountPanelTypePanicZoneID.IsNullable = false;
				colvarAccountPanelTypePanicZoneID.IsPrimaryKey = true;
				colvarAccountPanelTypePanicZoneID.IsForeignKey = false;
				colvarAccountPanelTypePanicZoneID.IsReadOnly = false;
				colvarAccountPanelTypePanicZoneID.DefaultSetting = @"";
				colvarAccountPanelTypePanicZoneID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountPanelTypePanicZoneID);

				TableSchema.TableColumn colvarPanelTypeId = new TableSchema.TableColumn(schema);
				colvarPanelTypeId.ColumnName = "PanelTypeId";
				colvarPanelTypeId.DataType = DbType.AnsiString;
				colvarPanelTypeId.MaxLength = 20;
				colvarPanelTypeId.AutoIncrement = false;
				colvarPanelTypeId.IsNullable = false;
				colvarPanelTypeId.IsPrimaryKey = false;
				colvarPanelTypeId.IsForeignKey = true;
				colvarPanelTypeId.IsReadOnly = false;
				colvarPanelTypeId.DefaultSetting = @"";
				colvarPanelTypeId.ForeignKeyTableName = "MS_AccountPanelTypes";
				schema.Columns.Add(colvarPanelTypeId);

				TableSchema.TableColumn colvarZoneNumber = new TableSchema.TableColumn(schema);
				colvarZoneNumber.ColumnName = "ZoneNumber";
				colvarZoneNumber.DataType = DbType.AnsiString;
				colvarZoneNumber.MaxLength = 6;
				colvarZoneNumber.AutoIncrement = false;
				colvarZoneNumber.IsNullable = false;
				colvarZoneNumber.IsPrimaryKey = false;
				colvarZoneNumber.IsForeignKey = false;
				colvarZoneNumber.IsReadOnly = false;
				colvarZoneNumber.DefaultSetting = @"";
				colvarZoneNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZoneNumber);

				TableSchema.TableColumn colvarEventTypeDescription = new TableSchema.TableColumn(schema);
				colvarEventTypeDescription.ColumnName = "EventTypeDescription";
				colvarEventTypeDescription.DataType = DbType.AnsiString;
				colvarEventTypeDescription.MaxLength = 50;
				colvarEventTypeDescription.AutoIncrement = false;
				colvarEventTypeDescription.IsNullable = false;
				colvarEventTypeDescription.IsPrimaryKey = false;
				colvarEventTypeDescription.IsForeignKey = false;
				colvarEventTypeDescription.IsReadOnly = false;
				colvarEventTypeDescription.DefaultSetting = @"";
				colvarEventTypeDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventTypeDescription);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountPanelTypePanicZones",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountPanelTypePanicZone LoadFrom(MS_AccountPanelTypePanicZone item)
		{
			MS_AccountPanelTypePanicZone result = new MS_AccountPanelTypePanicZone();
			if (item.AccountPanelTypePanicZoneID != default(int)) {
				result.LoadByKey(item.AccountPanelTypePanicZoneID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountPanelTypePanicZoneID {
			get { return GetColumnValue<int>(Columns.AccountPanelTypePanicZoneID); }
			set {
				SetColumnValue(Columns.AccountPanelTypePanicZoneID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountPanelTypePanicZoneID));
			}
		}
		[DataMember]
		public string PanelTypeId {
			get { return GetColumnValue<string>(Columns.PanelTypeId); }
			set {
				SetColumnValue(Columns.PanelTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeId));
			}
		}
		[DataMember]
		public string ZoneNumber {
			get { return GetColumnValue<string>(Columns.ZoneNumber); }
			set {
				SetColumnValue(Columns.ZoneNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZoneNumber));
			}
		}
		[DataMember]
		public string EventTypeDescription {
			get { return GetColumnValue<string>(Columns.EventTypeDescription); }
			set {
				SetColumnValue(Columns.EventTypeDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventTypeDescription));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AccountPanelType _PanelType;
		//Relationship: FK_MS_AccountPanelTypePanicZones_MS_AccountPanelTypes
		public MS_AccountPanelType PanelType
		{
			get
			{
				if(_PanelType == null) {
					_PanelType = MS_AccountPanelType.FetchByID(this.PanelTypeId);
				}
				return _PanelType;
			}
			set
			{
				SetColumnValue("PanelTypeId", value.PanelTypeID);
				_PanelType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PanelTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountPanelTypePanicZoneIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PanelTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ZoneNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn EventTypeDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountPanelTypePanicZoneID = @"AccountPanelTypePanicZoneID";
			public static readonly string PanelTypeId = @"PanelTypeId";
			public static readonly string ZoneNumber = @"ZoneNumber";
			public static readonly string EventTypeDescription = @"EventTypeDescription";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountPanelTypePanicZoneID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountPanelType class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountPanelTypeCollection : ActiveList<MS_AccountPanelType, MS_AccountPanelTypeCollection>
	{
		public static MS_AccountPanelTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountPanelTypeCollection result = new MS_AccountPanelTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountPanelType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountPanelTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountPanelType : ActiveRecord<MS_AccountPanelType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string _2_Gig_ID = "2GIG";
			[EnumMember()] public const string ConcordID = "CONCORD";
			[EnumMember()] public const string LynxID = "LYNX";
			[EnumMember()] public const string Pers_UnitID = "PERS";
			[EnumMember()] public const string Pers_Automobile_UnitID = "PERS-A";
			[EnumMember()] public const string Pers_Child_UnitID = "PERS-C";
			[EnumMember()] public const string Pers_Exercise_UnitID = "PERS-E";
			[EnumMember()] public const string Pers_Medical_UnitID = "PERS-M";
			[EnumMember()] public const string Pers_Pet_UnitID = "PERS-P";
			[EnumMember()] public const string SimonID = "SIMON";
			[EnumMember()] public const string VistaID = "VISTA";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountPanelType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountPanelTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPanelTypeID = new TableSchema.TableColumn(schema);
				colvarPanelTypeID.ColumnName = "PanelTypeID";
				colvarPanelTypeID.DataType = DbType.AnsiString;
				colvarPanelTypeID.MaxLength = 20;
				colvarPanelTypeID.AutoIncrement = false;
				colvarPanelTypeID.IsNullable = false;
				colvarPanelTypeID.IsPrimaryKey = true;
				colvarPanelTypeID.IsForeignKey = false;
				colvarPanelTypeID.IsReadOnly = false;
				colvarPanelTypeID.DefaultSetting = @"";
				colvarPanelTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeID);

				TableSchema.TableColumn colvarPanelTypeName = new TableSchema.TableColumn(schema);
				colvarPanelTypeName.ColumnName = "PanelTypeName";
				colvarPanelTypeName.DataType = DbType.AnsiString;
				colvarPanelTypeName.MaxLength = 50;
				colvarPanelTypeName.AutoIncrement = false;
				colvarPanelTypeName.IsNullable = false;
				colvarPanelTypeName.IsPrimaryKey = false;
				colvarPanelTypeName.IsForeignKey = false;
				colvarPanelTypeName.IsReadOnly = false;
				colvarPanelTypeName.DefaultSetting = @"";
				colvarPanelTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeName);

				TableSchema.TableColumn colvarUIName = new TableSchema.TableColumn(schema);
				colvarUIName.ColumnName = "UIName";
				colvarUIName.DataType = DbType.AnsiString;
				colvarUIName.MaxLength = 50;
				colvarUIName.AutoIncrement = false;
				colvarUIName.IsNullable = true;
				colvarUIName.IsPrimaryKey = false;
				colvarUIName.IsForeignKey = false;
				colvarUIName.IsReadOnly = false;
				colvarUIName.DefaultSetting = @"";
				colvarUIName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUIName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountPanelTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountPanelType LoadFrom(MS_AccountPanelType item)
		{
			MS_AccountPanelType result = new MS_AccountPanelType();
			if (item.PanelTypeID != default(string)) {
				result.LoadByKey(item.PanelTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string PanelTypeID {
			get { return GetColumnValue<string>(Columns.PanelTypeID); }
			set {
				SetColumnValue(Columns.PanelTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeID));
			}
		}
		[DataMember]
		public string PanelTypeName {
			get { return GetColumnValue<string>(Columns.PanelTypeName); }
			set {
				SetColumnValue(Columns.PanelTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeName));
			}
		}
		[DataMember]
		public string UIName {
			get { return GetColumnValue<string>(Columns.UIName); }
			set {
				SetColumnValue(Columns.UIName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UIName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return PanelTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PanelTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PanelTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UINameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PanelTypeID = @"PanelTypeID";
			public static readonly string PanelTypeName = @"PanelTypeName";
			public static readonly string UIName = @"UIName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PanelTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountPanelTypePanicZoneCollection _MS_AccountPanelTypePanicZonesCol;
		//Relationship: FK_MS_AccountPanelTypePanicZones_MS_AccountPanelTypes
		public MS_AccountPanelTypePanicZoneCollection MS_AccountPanelTypePanicZonesCol
		{
			get
			{
				if(_MS_AccountPanelTypePanicZonesCol == null) {
					_MS_AccountPanelTypePanicZonesCol = new MS_AccountPanelTypePanicZoneCollection();
					_MS_AccountPanelTypePanicZonesCol.LoadAndCloseReader(MS_AccountPanelTypePanicZone.Query()
						.WHERE(MS_AccountPanelTypePanicZone.Columns.PanelTypeId, PanelTypeID).ExecuteReader());
				}
				return _MS_AccountPanelTypePanicZonesCol;
			}
		}

		private MS_AccountCollection _MS_AccountsCol;
		//Relationship: FK_MS_Accounts_MS_AccountPanelTypes
		public MS_AccountCollection MS_AccountsCol
		{
			get
			{
				if(_MS_AccountsCol == null) {
					_MS_AccountsCol = new MS_AccountCollection();
					_MS_AccountsCol.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.PanelTypeId, PanelTypeID).ExecuteReader());
				}
				return _MS_AccountsCol;
			}
		}

		private SAE_InterimPanelTypeMapCollection _SAE_InterimPanelTypeMapsCol;
		//Relationship: FK_SAE_InterimPanelTypeMap_MS_AccountPanelTypes
		public SAE_InterimPanelTypeMapCollection SAE_InterimPanelTypeMapsCol
		{
			get
			{
				if(_SAE_InterimPanelTypeMapsCol == null) {
					_SAE_InterimPanelTypeMapsCol = new SAE_InterimPanelTypeMapCollection();
					_SAE_InterimPanelTypeMapsCol.LoadAndCloseReader(SAE_InterimPanelTypeMap.Query()
						.WHERE(SAE_InterimPanelTypeMap.Columns.PanelTypeId, PanelTypeID).ExecuteReader());
				}
				return _SAE_InterimPanelTypeMapsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_Account class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountCollection : ActiveList<MS_Account, MS_AccountCollection>
	{
		public static MS_AccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountCollection result = new MS_AccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_Account item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_Accounts table.
	/// </summary>
	[DataContract]
	public partial class MS_Account : ActiveRecord<MS_Account>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_Account()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_Accounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarPremiseAddressId = new TableSchema.TableColumn(schema);
				colvarPremiseAddressId.ColumnName = "PremiseAddressId";
				colvarPremiseAddressId.DataType = DbType.Int64;
				colvarPremiseAddressId.MaxLength = 0;
				colvarPremiseAddressId.AutoIncrement = false;
				colvarPremiseAddressId.IsNullable = true;
				colvarPremiseAddressId.IsPrimaryKey = false;
				colvarPremiseAddressId.IsForeignKey = true;
				colvarPremiseAddressId.IsReadOnly = false;
				colvarPremiseAddressId.DefaultSetting = @"";
				colvarPremiseAddressId.ForeignKeyTableName = "MC_Addresses";
				schema.Columns.Add(colvarPremiseAddressId);

				TableSchema.TableColumn colvarIndustryAccountId = new TableSchema.TableColumn(schema);
				colvarIndustryAccountId.ColumnName = "IndustryAccountId";
				colvarIndustryAccountId.DataType = DbType.Int64;
				colvarIndustryAccountId.MaxLength = 0;
				colvarIndustryAccountId.AutoIncrement = false;
				colvarIndustryAccountId.IsNullable = true;
				colvarIndustryAccountId.IsPrimaryKey = false;
				colvarIndustryAccountId.IsForeignKey = true;
				colvarIndustryAccountId.IsReadOnly = false;
				colvarIndustryAccountId.DefaultSetting = @"";
				colvarIndustryAccountId.ForeignKeyTableName = "MS_IndustryAccounts";
				schema.Columns.Add(colvarIndustryAccountId);

				TableSchema.TableColumn colvarIndustryAccount2Id = new TableSchema.TableColumn(schema);
				colvarIndustryAccount2Id.ColumnName = "IndustryAccount2Id";
				colvarIndustryAccount2Id.DataType = DbType.Int64;
				colvarIndustryAccount2Id.MaxLength = 0;
				colvarIndustryAccount2Id.AutoIncrement = false;
				colvarIndustryAccount2Id.IsNullable = true;
				colvarIndustryAccount2Id.IsPrimaryKey = false;
				colvarIndustryAccount2Id.IsForeignKey = true;
				colvarIndustryAccount2Id.IsReadOnly = false;
				colvarIndustryAccount2Id.DefaultSetting = @"";
				colvarIndustryAccount2Id.ForeignKeyTableName = "MS_IndustryAccounts";
				schema.Columns.Add(colvarIndustryAccount2Id);

				TableSchema.TableColumn colvarSiteTypeId = new TableSchema.TableColumn(schema);
				colvarSiteTypeId.ColumnName = "SiteTypeId";
				colvarSiteTypeId.DataType = DbType.AnsiString;
				colvarSiteTypeId.MaxLength = 20;
				colvarSiteTypeId.AutoIncrement = false;
				colvarSiteTypeId.IsNullable = true;
				colvarSiteTypeId.IsPrimaryKey = false;
				colvarSiteTypeId.IsForeignKey = true;
				colvarSiteTypeId.IsReadOnly = false;
				colvarSiteTypeId.DefaultSetting = @"('RBFM')";
				colvarSiteTypeId.ForeignKeyTableName = "MS_AccountSiteTypes";
				schema.Columns.Add(colvarSiteTypeId);

				TableSchema.TableColumn colvarSystemTypeId = new TableSchema.TableColumn(schema);
				colvarSystemTypeId.ColumnName = "SystemTypeId";
				colvarSystemTypeId.DataType = DbType.AnsiString;
				colvarSystemTypeId.MaxLength = 20;
				colvarSystemTypeId.AutoIncrement = false;
				colvarSystemTypeId.IsNullable = true;
				colvarSystemTypeId.IsPrimaryKey = false;
				colvarSystemTypeId.IsForeignKey = true;
				colvarSystemTypeId.IsReadOnly = false;
				colvarSystemTypeId.DefaultSetting = @"";
				colvarSystemTypeId.ForeignKeyTableName = "MS_AccountSystemTypes";
				schema.Columns.Add(colvarSystemTypeId);

				TableSchema.TableColumn colvarCellularTypeId = new TableSchema.TableColumn(schema);
				colvarCellularTypeId.ColumnName = "CellularTypeId";
				colvarCellularTypeId.DataType = DbType.AnsiString;
				colvarCellularTypeId.MaxLength = 20;
				colvarCellularTypeId.AutoIncrement = false;
				colvarCellularTypeId.IsNullable = true;
				colvarCellularTypeId.IsPrimaryKey = false;
				colvarCellularTypeId.IsForeignKey = true;
				colvarCellularTypeId.IsReadOnly = false;
				colvarCellularTypeId.DefaultSetting = @"";
				colvarCellularTypeId.ForeignKeyTableName = "MS_AccountCellularTypes";
				schema.Columns.Add(colvarCellularTypeId);

				TableSchema.TableColumn colvarPanelTypeId = new TableSchema.TableColumn(schema);
				colvarPanelTypeId.ColumnName = "PanelTypeId";
				colvarPanelTypeId.DataType = DbType.AnsiString;
				colvarPanelTypeId.MaxLength = 20;
				colvarPanelTypeId.AutoIncrement = false;
				colvarPanelTypeId.IsNullable = true;
				colvarPanelTypeId.IsPrimaryKey = false;
				colvarPanelTypeId.IsForeignKey = true;
				colvarPanelTypeId.IsReadOnly = false;
				colvarPanelTypeId.DefaultSetting = @"";
				colvarPanelTypeId.ForeignKeyTableName = "MS_AccountPanelTypes";
				schema.Columns.Add(colvarPanelTypeId);

				TableSchema.TableColumn colvarDslSeizureId = new TableSchema.TableColumn(schema);
				colvarDslSeizureId.ColumnName = "DslSeizureId";
				colvarDslSeizureId.DataType = DbType.Int16;
				colvarDslSeizureId.MaxLength = 0;
				colvarDslSeizureId.AutoIncrement = false;
				colvarDslSeizureId.IsNullable = true;
				colvarDslSeizureId.IsPrimaryKey = false;
				colvarDslSeizureId.IsForeignKey = true;
				colvarDslSeizureId.IsReadOnly = false;
				colvarDslSeizureId.DefaultSetting = @"((1))";
				colvarDslSeizureId.ForeignKeyTableName = "MS_AccountDslSeizureTypes";
				schema.Columns.Add(colvarDslSeizureId);

				TableSchema.TableColumn colvarPanelItemId = new TableSchema.TableColumn(schema);
				colvarPanelItemId.ColumnName = "PanelItemId";
				colvarPanelItemId.DataType = DbType.AnsiString;
				colvarPanelItemId.MaxLength = 50;
				colvarPanelItemId.AutoIncrement = false;
				colvarPanelItemId.IsNullable = true;
				colvarPanelItemId.IsPrimaryKey = false;
				colvarPanelItemId.IsForeignKey = true;
				colvarPanelItemId.IsReadOnly = false;
				colvarPanelItemId.DefaultSetting = @"";
				colvarPanelItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarPanelItemId);

				TableSchema.TableColumn colvarCellPackageItemId = new TableSchema.TableColumn(schema);
				colvarCellPackageItemId.ColumnName = "CellPackageItemId";
				colvarCellPackageItemId.DataType = DbType.AnsiString;
				colvarCellPackageItemId.MaxLength = 50;
				colvarCellPackageItemId.AutoIncrement = false;
				colvarCellPackageItemId.IsNullable = true;
				colvarCellPackageItemId.IsPrimaryKey = false;
				colvarCellPackageItemId.IsForeignKey = true;
				colvarCellPackageItemId.IsReadOnly = false;
				colvarCellPackageItemId.DefaultSetting = @"";
				colvarCellPackageItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarCellPackageItemId);

				TableSchema.TableColumn colvarContractId = new TableSchema.TableColumn(schema);
				colvarContractId.ColumnName = "ContractId";
				colvarContractId.DataType = DbType.Int32;
				colvarContractId.MaxLength = 0;
				colvarContractId.AutoIncrement = false;
				colvarContractId.IsNullable = true;
				colvarContractId.IsPrimaryKey = false;
				colvarContractId.IsForeignKey = true;
				colvarContractId.IsReadOnly = false;
				colvarContractId.DefaultSetting = @"";
				colvarContractId.ForeignKeyTableName = "AE_Contracts";
				schema.Columns.Add(colvarContractId);

				TableSchema.TableColumn colvarSignalFormatTypeId = new TableSchema.TableColumn(schema);
				colvarSignalFormatTypeId.ColumnName = "SignalFormatTypeId";
				colvarSignalFormatTypeId.DataType = DbType.Int16;
				colvarSignalFormatTypeId.MaxLength = 0;
				colvarSignalFormatTypeId.AutoIncrement = false;
				colvarSignalFormatTypeId.IsNullable = true;
				colvarSignalFormatTypeId.IsPrimaryKey = false;
				colvarSignalFormatTypeId.IsForeignKey = true;
				colvarSignalFormatTypeId.IsReadOnly = false;
				colvarSignalFormatTypeId.DefaultSetting = @"";
				colvarSignalFormatTypeId.ForeignKeyTableName = "MS_AccountSignalFormatTypes";
				schema.Columns.Add(colvarSignalFormatTypeId);

				TableSchema.TableColumn colvarTechId = new TableSchema.TableColumn(schema);
				colvarTechId.ColumnName = "TechId";
				colvarTechId.DataType = DbType.AnsiString;
				colvarTechId.MaxLength = 10;
				colvarTechId.AutoIncrement = false;
				colvarTechId.IsNullable = true;
				colvarTechId.IsPrimaryKey = false;
				colvarTechId.IsForeignKey = false;
				colvarTechId.IsReadOnly = false;
				colvarTechId.DefaultSetting = @"";
				colvarTechId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechId);

				TableSchema.TableColumn colvarPanelCode = new TableSchema.TableColumn(schema);
				colvarPanelCode.ColumnName = "PanelCode";
				colvarPanelCode.DataType = DbType.AnsiString;
				colvarPanelCode.MaxLength = 50;
				colvarPanelCode.AutoIncrement = false;
				colvarPanelCode.IsNullable = true;
				colvarPanelCode.IsPrimaryKey = false;
				colvarPanelCode.IsForeignKey = false;
				colvarPanelCode.IsReadOnly = false;
				colvarPanelCode.DefaultSetting = @"";
				colvarPanelCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelCode);

				TableSchema.TableColumn colvarPanelPhone = new TableSchema.TableColumn(schema);
				colvarPanelPhone.ColumnName = "PanelPhone";
				colvarPanelPhone.DataType = DbType.AnsiString;
				colvarPanelPhone.MaxLength = 30;
				colvarPanelPhone.AutoIncrement = false;
				colvarPanelPhone.IsNullable = true;
				colvarPanelPhone.IsPrimaryKey = false;
				colvarPanelPhone.IsForeignKey = false;
				colvarPanelPhone.IsReadOnly = false;
				colvarPanelPhone.DefaultSetting = @"";
				colvarPanelPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelPhone);

				TableSchema.TableColumn colvarPanelLocation = new TableSchema.TableColumn(schema);
				colvarPanelLocation.ColumnName = "PanelLocation";
				colvarPanelLocation.DataType = DbType.AnsiString;
				colvarPanelLocation.MaxLength = 50;
				colvarPanelLocation.AutoIncrement = false;
				colvarPanelLocation.IsNullable = true;
				colvarPanelLocation.IsPrimaryKey = false;
				colvarPanelLocation.IsForeignKey = false;
				colvarPanelLocation.IsReadOnly = false;
				colvarPanelLocation.DefaultSetting = @"";
				colvarPanelLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelLocation);

				TableSchema.TableColumn colvarTransformerLocation = new TableSchema.TableColumn(schema);
				colvarTransformerLocation.ColumnName = "TransformerLocation";
				colvarTransformerLocation.DataType = DbType.AnsiString;
				colvarTransformerLocation.MaxLength = 50;
				colvarTransformerLocation.AutoIncrement = false;
				colvarTransformerLocation.IsNullable = true;
				colvarTransformerLocation.IsPrimaryKey = false;
				colvarTransformerLocation.IsForeignKey = false;
				colvarTransformerLocation.IsReadOnly = false;
				colvarTransformerLocation.DefaultSetting = @"";
				colvarTransformerLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransformerLocation);

				TableSchema.TableColumn colvarPrivacy = new TableSchema.TableColumn(schema);
				colvarPrivacy.ColumnName = "Privacy";
				colvarPrivacy.DataType = DbType.Boolean;
				colvarPrivacy.MaxLength = 0;
				colvarPrivacy.AutoIncrement = false;
				colvarPrivacy.IsNullable = true;
				colvarPrivacy.IsPrimaryKey = false;
				colvarPrivacy.IsForeignKey = false;
				colvarPrivacy.IsReadOnly = false;
				colvarPrivacy.DefaultSetting = @"((0))";
				colvarPrivacy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrivacy);

				TableSchema.TableColumn colvarAccountPassword = new TableSchema.TableColumn(schema);
				colvarAccountPassword.ColumnName = "AccountPassword";
				colvarAccountPassword.DataType = DbType.String;
				colvarAccountPassword.MaxLength = 50;
				colvarAccountPassword.AutoIncrement = false;
				colvarAccountPassword.IsNullable = true;
				colvarAccountPassword.IsPrimaryKey = false;
				colvarAccountPassword.IsForeignKey = false;
				colvarAccountPassword.IsReadOnly = false;
				colvarAccountPassword.DefaultSetting = @"('[NO PASS]')";
				colvarAccountPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountPassword);

				TableSchema.TableColumn colvarSimProductBarcodeId = new TableSchema.TableColumn(schema);
				colvarSimProductBarcodeId.ColumnName = "SimProductBarcodeId";
				colvarSimProductBarcodeId.DataType = DbType.String;
				colvarSimProductBarcodeId.MaxLength = 50;
				colvarSimProductBarcodeId.AutoIncrement = false;
				colvarSimProductBarcodeId.IsNullable = true;
				colvarSimProductBarcodeId.IsPrimaryKey = false;
				colvarSimProductBarcodeId.IsForeignKey = false;
				colvarSimProductBarcodeId.IsReadOnly = false;
				colvarSimProductBarcodeId.DefaultSetting = @"";
				colvarSimProductBarcodeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSimProductBarcodeId);

				TableSchema.TableColumn colvarDispatchMessage = new TableSchema.TableColumn(schema);
				colvarDispatchMessage.ColumnName = "DispatchMessage";
				colvarDispatchMessage.DataType = DbType.String;
				colvarDispatchMessage.MaxLength = 250;
				colvarDispatchMessage.AutoIncrement = false;
				colvarDispatchMessage.IsNullable = true;
				colvarDispatchMessage.IsPrimaryKey = false;
				colvarDispatchMessage.IsForeignKey = false;
				colvarDispatchMessage.IsReadOnly = false;
				colvarDispatchMessage.DefaultSetting = @"";
				colvarDispatchMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchMessage);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_Accounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_Account LoadFrom(MS_Account item)
		{
			MS_Account result = new MS_Account();
			if (item.AccountID != default(long)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public long? PremiseAddressId {
			get { return GetColumnValue<long?>(Columns.PremiseAddressId); }
			set {
				SetColumnValue(Columns.PremiseAddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PremiseAddressId));
			}
		}
		[DataMember]
		public long? IndustryAccountId {
			get { return GetColumnValue<long?>(Columns.IndustryAccountId); }
			set {
				SetColumnValue(Columns.IndustryAccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryAccountId));
			}
		}
		[DataMember]
		public long? IndustryAccount2Id {
			get { return GetColumnValue<long?>(Columns.IndustryAccount2Id); }
			set {
				SetColumnValue(Columns.IndustryAccount2Id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryAccount2Id));
			}
		}
		[DataMember]
		public string SiteTypeId {
			get { return GetColumnValue<string>(Columns.SiteTypeId); }
			set {
				SetColumnValue(Columns.SiteTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteTypeId));
			}
		}
		[DataMember]
		public string SystemTypeId {
			get { return GetColumnValue<string>(Columns.SystemTypeId); }
			set {
				SetColumnValue(Columns.SystemTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemTypeId));
			}
		}
		[DataMember]
		public string CellularTypeId {
			get { return GetColumnValue<string>(Columns.CellularTypeId); }
			set {
				SetColumnValue(Columns.CellularTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellularTypeId));
			}
		}
		[DataMember]
		public string PanelTypeId {
			get { return GetColumnValue<string>(Columns.PanelTypeId); }
			set {
				SetColumnValue(Columns.PanelTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeId));
			}
		}
		[DataMember]
		public short? DslSeizureId {
			get { return GetColumnValue<short?>(Columns.DslSeizureId); }
			set {
				SetColumnValue(Columns.DslSeizureId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DslSeizureId));
			}
		}
		[DataMember]
		public string PanelItemId {
			get { return GetColumnValue<string>(Columns.PanelItemId); }
			set {
				SetColumnValue(Columns.PanelItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelItemId));
			}
		}
		[DataMember]
		public string CellPackageItemId {
			get { return GetColumnValue<string>(Columns.CellPackageItemId); }
			set {
				SetColumnValue(Columns.CellPackageItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellPackageItemId));
			}
		}
		[DataMember]
		public int? ContractId {
			get { return GetColumnValue<int?>(Columns.ContractId); }
			set {
				SetColumnValue(Columns.ContractId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractId));
			}
		}
		[DataMember]
		public short? SignalFormatTypeId {
			get { return GetColumnValue<short?>(Columns.SignalFormatTypeId); }
			set {
				SetColumnValue(Columns.SignalFormatTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SignalFormatTypeId));
			}
		}
		[DataMember]
		public string TechId {
			get { return GetColumnValue<string>(Columns.TechId); }
			set {
				SetColumnValue(Columns.TechId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechId));
			}
		}
		[DataMember]
		public string PanelCode {
			get { return GetColumnValue<string>(Columns.PanelCode); }
			set {
				SetColumnValue(Columns.PanelCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelCode));
			}
		}
		[DataMember]
		public string PanelPhone {
			get { return GetColumnValue<string>(Columns.PanelPhone); }
			set {
				SetColumnValue(Columns.PanelPhone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelPhone));
			}
		}
		[DataMember]
		public string PanelLocation {
			get { return GetColumnValue<string>(Columns.PanelLocation); }
			set {
				SetColumnValue(Columns.PanelLocation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelLocation));
			}
		}
		[DataMember]
		public string TransformerLocation {
			get { return GetColumnValue<string>(Columns.TransformerLocation); }
			set {
				SetColumnValue(Columns.TransformerLocation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransformerLocation));
			}
		}
		[DataMember]
		public bool? Privacy {
			get { return GetColumnValue<bool?>(Columns.Privacy); }
			set {
				SetColumnValue(Columns.Privacy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Privacy));
			}
		}
		[DataMember]
		public string AccountPassword {
			get { return GetColumnValue<string>(Columns.AccountPassword); }
			set {
				SetColumnValue(Columns.AccountPassword, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountPassword));
			}
		}
		[DataMember]
		public string SimProductBarcodeId {
			get { return GetColumnValue<string>(Columns.SimProductBarcodeId); }
			set {
				SetColumnValue(Columns.SimProductBarcodeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SimProductBarcodeId));
			}
		}
		[DataMember]
		public string DispatchMessage {
			get { return GetColumnValue<string>(Columns.DispatchMessage); }
			set {
				SetColumnValue(Columns.DispatchMessage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchMessage));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Contract _Contract;
		//Relationship: FK_MS_Accounts_AE_Contracts
		public AE_Contract Contract
		{
			get
			{
				if(_Contract == null) {
					_Contract = AE_Contract.FetchByID(this.ContractId);
				}
				return _Contract;
			}
			set
			{
				SetColumnValue("ContractId", value.ContractID);
				_Contract = value;
			}
		}

		private AE_Item _PanelItem;
		//Relationship: FK_MS_Accounts_AE_Items
		public AE_Item PanelItem
		{
			get
			{
				if(_PanelItem == null) {
					_PanelItem = AE_Item.FetchByID(this.PanelItemId);
				}
				return _PanelItem;
			}
			set
			{
				SetColumnValue("PanelItemId", value.ItemID);
				_PanelItem = value;
			}
		}

		private AE_Item _CellPackageItem;
		//Relationship: FK_MS_Accounts_AE_Items1
		public AE_Item CellPackageItem
		{
			get
			{
				if(_CellPackageItem == null) {
					_CellPackageItem = AE_Item.FetchByID(this.CellPackageItemId);
				}
				return _CellPackageItem;
			}
			set
			{
				SetColumnValue("CellPackageItemId", value.ItemID);
				_CellPackageItem = value;
			}
		}

		private MC_Account _Account;
		//Relationship: FK_MS_Accounts_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountID);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountID", value.AccountID);
				_Account = value;
			}
		}

		private MC_Address _PremiseAddress;
		//Relationship: FK_MS_Accounts_MC_Addresses
		public MC_Address PremiseAddress
		{
			get
			{
				if(_PremiseAddress == null) {
					_PremiseAddress = MC_Address.FetchByID(this.PremiseAddressId);
				}
				return _PremiseAddress;
			}
			set
			{
				SetColumnValue("PremiseAddressId", value.AddressID);
				_PremiseAddress = value;
			}
		}

		private MS_AccountCellularType _CellularType;
		//Relationship: FK_MS_Accounts_MS_AccountCellularTypes
		public MS_AccountCellularType CellularType
		{
			get
			{
				if(_CellularType == null) {
					_CellularType = MS_AccountCellularType.FetchByID(this.CellularTypeId);
				}
				return _CellularType;
			}
			set
			{
				SetColumnValue("CellularTypeId", value.CellularTypeID);
				_CellularType = value;
			}
		}

		private MS_AccountDslSeizureType _DslSeizure;
		//Relationship: FK_MS_Accounts_MS_AccountDslSeizureTypes
		public MS_AccountDslSeizureType DslSeizure
		{
			get
			{
				if(_DslSeizure == null) {
					_DslSeizure = MS_AccountDslSeizureType.FetchByID(this.DslSeizureId);
				}
				return _DslSeizure;
			}
			set
			{
				SetColumnValue("DslSeizureId", value.DslSeizureID);
				_DslSeizure = value;
			}
		}

		private MS_AccountPanelType _PanelType;
		//Relationship: FK_MS_Accounts_MS_AccountPanelTypes
		public MS_AccountPanelType PanelType
		{
			get
			{
				if(_PanelType == null) {
					_PanelType = MS_AccountPanelType.FetchByID(this.PanelTypeId);
				}
				return _PanelType;
			}
			set
			{
				SetColumnValue("PanelTypeId", value.PanelTypeID);
				_PanelType = value;
			}
		}

		private MS_AccountSignalFormatType _SignalFormatType;
		//Relationship: FK_MS_Accounts_MS_AccountSignalFormatTypes
		public MS_AccountSignalFormatType SignalFormatType
		{
			get
			{
				if(_SignalFormatType == null) {
					_SignalFormatType = MS_AccountSignalFormatType.FetchByID(this.SignalFormatTypeId);
				}
				return _SignalFormatType;
			}
			set
			{
				SetColumnValue("SignalFormatTypeId", value.SignalFormatTypeID);
				_SignalFormatType = value;
			}
		}

		private MS_AccountSiteType _SiteType;
		//Relationship: FK_MS_Accounts_MS_AccountSiteTypes
		public MS_AccountSiteType SiteType
		{
			get
			{
				if(_SiteType == null) {
					_SiteType = MS_AccountSiteType.FetchByID(this.SiteTypeId);
				}
				return _SiteType;
			}
			set
			{
				SetColumnValue("SiteTypeId", value.SiteTypeID);
				_SiteType = value;
			}
		}

		private MS_AccountSystemType _SystemType;
		//Relationship: FK_MS_Accounts_MS_AccountSystemTypes
		public MS_AccountSystemType SystemType
		{
			get
			{
				if(_SystemType == null) {
					_SystemType = MS_AccountSystemType.FetchByID(this.SystemTypeId);
				}
				return _SystemType;
			}
			set
			{
				SetColumnValue("SystemTypeId", value.SystemTypeID);
				_SystemType = value;
			}
		}

		private MS_IndustryAccount _IndustryAccount;
		//Relationship: FK_MS_Accounts_MS_IndustryAccounts
		public MS_IndustryAccount IndustryAccount
		{
			get
			{
				if(_IndustryAccount == null) {
					_IndustryAccount = MS_IndustryAccount.FetchByID(this.IndustryAccountId);
				}
				return _IndustryAccount;
			}
			set
			{
				SetColumnValue("IndustryAccountId", value.IndustryAccountID);
				_IndustryAccount = value;
			}
		}

		private MS_IndustryAccount _IndustryAccount2;
		//Relationship: FK_MS_Accounts_MS_IndustryAccounts1
		public MS_IndustryAccount IndustryAccount2
		{
			get
			{
				if(_IndustryAccount2 == null) {
					_IndustryAccount2 = MS_IndustryAccount.FetchByID(this.IndustryAccount2Id);
				}
				return _IndustryAccount2;
			}
			set
			{
				SetColumnValue("IndustryAccount2Id", value.IndustryAccountID);
				_IndustryAccount2 = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PremiseAddressIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IndustryAccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IndustryAccount2IdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SiteTypeIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SystemTypeIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CellularTypeIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PanelTypeIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DslSeizureIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn PanelItemIdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CellPackageItemIdColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ContractIdColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn SignalFormatTypeIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn TechIdColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PanelCodeColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PanelPhoneColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn PanelLocationColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn TransformerLocationColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn PrivacyColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn AccountPasswordColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn SimProductBarcodeIdColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn DispatchMessageColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[29]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string PremiseAddressId = @"PremiseAddressId";
			public static readonly string IndustryAccountId = @"IndustryAccountId";
			public static readonly string IndustryAccount2Id = @"IndustryAccount2Id";
			public static readonly string SiteTypeId = @"SiteTypeId";
			public static readonly string SystemTypeId = @"SystemTypeId";
			public static readonly string CellularTypeId = @"CellularTypeId";
			public static readonly string PanelTypeId = @"PanelTypeId";
			public static readonly string DslSeizureId = @"DslSeizureId";
			public static readonly string PanelItemId = @"PanelItemId";
			public static readonly string CellPackageItemId = @"CellPackageItemId";
			public static readonly string ContractId = @"ContractId";
			public static readonly string SignalFormatTypeId = @"SignalFormatTypeId";
			public static readonly string TechId = @"TechId";
			public static readonly string PanelCode = @"PanelCode";
			public static readonly string PanelPhone = @"PanelPhone";
			public static readonly string PanelLocation = @"PanelLocation";
			public static readonly string TransformerLocation = @"TransformerLocation";
			public static readonly string Privacy = @"Privacy";
			public static readonly string AccountPassword = @"AccountPassword";
			public static readonly string SimProductBarcodeId = @"SimProductBarcodeId";
			public static readonly string DispatchMessage = @"DispatchMessage";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountAGCollection _MS_AccountAGsCol;
		//Relationship: FK_MS_AccountAG_MS_Accounts
		public MS_AccountAGCollection MS_AccountAGsCol
		{
			get
			{
				if(_MS_AccountAGsCol == null) {
					_MS_AccountAGsCol = new MS_AccountAGCollection();
					_MS_AccountAGsCol.LoadAndCloseReader(MS_AccountAG.Query()
						.WHERE(MS_AccountAG.Columns.AccountID, AccountID).ExecuteReader());
				}
				return _MS_AccountAGsCol;
			}
		}

		private MS_AccountDispatchAgencyAssignmentCollection _MS_AccountDispatchAgencyAssignmentsCol;
		//Relationship: FK_MS_AccountDispatchAgencyAssignments_MS_Accounts
		public MS_AccountDispatchAgencyAssignmentCollection MS_AccountDispatchAgencyAssignmentsCol
		{
			get
			{
				if(_MS_AccountDispatchAgencyAssignmentsCol == null) {
					_MS_AccountDispatchAgencyAssignmentsCol = new MS_AccountDispatchAgencyAssignmentCollection();
					_MS_AccountDispatchAgencyAssignmentsCol.LoadAndCloseReader(MS_AccountDispatchAgencyAssignment.Query()
						.WHERE(MS_AccountDispatchAgencyAssignment.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _MS_AccountDispatchAgencyAssignmentsCol;
			}
		}

		private MS_AccountEquipmentCollection _MS_AccountEquipmentsCol;
		//Relationship: FK_MS_AccountEquipment_MS_Accounts
		public MS_AccountEquipmentCollection MS_AccountEquipmentsCol
		{
			get
			{
				if(_MS_AccountEquipmentsCol == null) {
					_MS_AccountEquipmentsCol = new MS_AccountEquipmentCollection();
					_MS_AccountEquipmentsCol.LoadAndCloseReader(MS_AccountEquipment.Query()
						.WHERE(MS_AccountEquipment.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _MS_AccountEquipmentsCol;
			}
		}

		private MS_AccountHoldCollection _MS_AccountHoldsCol;
		//Relationship: FK_MS_AccountHolds_MS_Accounts
		public MS_AccountHoldCollection MS_AccountHoldsCol
		{
			get
			{
				if(_MS_AccountHoldsCol == null) {
					_MS_AccountHoldsCol = new MS_AccountHoldCollection();
					_MS_AccountHoldsCol.LoadAndCloseReader(MS_AccountHold.Query()
						.WHERE(MS_AccountHold.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _MS_AccountHoldsCol;
			}
		}

		private MS_AccountSalesInformationCollection _MS_AccountSalesInformationsCol;
		//Relationship: FK_MS_AccountSalesInformations_MS_Accounts
		public MS_AccountSalesInformationCollection MS_AccountSalesInformationsCol
		{
			get
			{
				if(_MS_AccountSalesInformationsCol == null) {
					_MS_AccountSalesInformationsCol = new MS_AccountSalesInformationCollection();
					_MS_AccountSalesInformationsCol.LoadAndCloseReader(MS_AccountSalesInformation.Query()
						.WHERE(MS_AccountSalesInformation.Columns.AccountID, AccountID).ExecuteReader());
				}
				return _MS_AccountSalesInformationsCol;
			}
		}

		private MS_AccountSiteGeneralDispatchCollection _MS_AccountSiteGeneralDispatchesCol;
		//Relationship: FK_MS_AccountSiteGeneralDispatches_MS_Accounts
		public MS_AccountSiteGeneralDispatchCollection MS_AccountSiteGeneralDispatchesCol
		{
			get
			{
				if(_MS_AccountSiteGeneralDispatchesCol == null) {
					_MS_AccountSiteGeneralDispatchesCol = new MS_AccountSiteGeneralDispatchCollection();
					_MS_AccountSiteGeneralDispatchesCol.LoadAndCloseReader(MS_AccountSiteGeneralDispatch.Query()
						.WHERE(MS_AccountSiteGeneralDispatch.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _MS_AccountSiteGeneralDispatchesCol;
			}
		}

		private MS_AccountSubmitCollection _MS_AccountSubmitsCol;
		//Relationship: FK_MS_AccountSubmits_MS_Accounts
		public MS_AccountSubmitCollection MS_AccountSubmitsCol
		{
			get
			{
				if(_MS_AccountSubmitsCol == null) {
					_MS_AccountSubmitsCol = new MS_AccountSubmitCollection();
					_MS_AccountSubmitsCol.LoadAndCloseReader(MS_AccountSubmit.Query()
						.WHERE(MS_AccountSubmit.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _MS_AccountSubmitsCol;
			}
		}

		private MS_AvantGuardAccountStateCollection _MS_AvantGuardAccountStatesCol;
		//Relationship: FK_MS_AvantGuardAccountState_MS_Accounts
		public MS_AvantGuardAccountStateCollection MS_AvantGuardAccountStatesCol
		{
			get
			{
				if(_MS_AvantGuardAccountStatesCol == null) {
					_MS_AvantGuardAccountStatesCol = new MS_AvantGuardAccountStateCollection();
					_MS_AvantGuardAccountStatesCol.LoadAndCloseReader(MS_AvantGuardAccountState.Query()
						.WHERE(MS_AvantGuardAccountState.Columns.AccountID, AccountID).ExecuteReader());
				}
				return _MS_AvantGuardAccountStatesCol;
			}
		}

		private MS_DeviceEventCollection _MS_DeviceEventsCol;
		//Relationship: FK_MS_DeviceEvents_MS_Accounts
		public MS_DeviceEventCollection MS_DeviceEventsCol
		{
			get
			{
				if(_MS_DeviceEventsCol == null) {
					_MS_DeviceEventsCol = new MS_DeviceEventCollection();
					_MS_DeviceEventsCol.LoadAndCloseReader(MS_DeviceEvent.Query()
						.WHERE(MS_DeviceEvent.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _MS_DeviceEventsCol;
			}
		}

		private MS_EmergencyContactCollection _MS_EmergencyContactsCol;
		//Relationship: FK_MS_EmergencyContacts_MS_Accounts
		public MS_EmergencyContactCollection MS_EmergencyContactsCol
		{
			get
			{
				if(_MS_EmergencyContactsCol == null) {
					_MS_EmergencyContactsCol = new MS_EmergencyContactCollection();
					_MS_EmergencyContactsCol.LoadAndCloseReader(MS_EmergencyContact.Query()
						.WHERE(MS_EmergencyContact.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _MS_EmergencyContactsCol;
			}
		}

		private MS_IndustryAccountCollection _MS_IndustryAccountsCol;
		//Relationship: FK_MS_IndustryAccounts_MS_Accounts
		public MS_IndustryAccountCollection MS_IndustryAccountsCol
		{
			get
			{
				if(_MS_IndustryAccountsCol == null) {
					_MS_IndustryAccountsCol = new MS_IndustryAccountCollection();
					_MS_IndustryAccountsCol.LoadAndCloseReader(MS_IndustryAccount.Query()
						.WHERE(MS_IndustryAccount.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _MS_IndustryAccountsCol;
			}
		}

		private TS_ServiceTicketCollection _TS_ServiceTicketsCol;
		//Relationship: FK_TS_ServiceTickets_MS_Accounts
		public TS_ServiceTicketCollection TS_ServiceTicketsCol
		{
			get
			{
				if(_TS_ServiceTicketsCol == null) {
					_TS_ServiceTicketsCol = new TS_ServiceTicketCollection();
					_TS_ServiceTicketsCol.LoadAndCloseReader(TS_ServiceTicket.Query()
						.WHERE(TS_ServiceTicket.Columns.AccountId, AccountID).ExecuteReader());
				}
				return _TS_ServiceTicketsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSalesInformation class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSalesInformationCollection : ActiveList<MS_AccountSalesInformation, MS_AccountSalesInformationCollection>
	{
		public static MS_AccountSalesInformationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSalesInformationCollection result = new MS_AccountSalesInformationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountSalesInformation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountSalesInformations table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSalesInformation : ActiveRecord<MS_AccountSalesInformation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountSalesInformation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountSalesInformations", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarPaymentTypeId = new TableSchema.TableColumn(schema);
				colvarPaymentTypeId.ColumnName = "PaymentTypeId";
				colvarPaymentTypeId.DataType = DbType.AnsiString;
				colvarPaymentTypeId.MaxLength = 20;
				colvarPaymentTypeId.AutoIncrement = false;
				colvarPaymentTypeId.IsNullable = true;
				colvarPaymentTypeId.IsPrimaryKey = false;
				colvarPaymentTypeId.IsForeignKey = true;
				colvarPaymentTypeId.IsReadOnly = false;
				colvarPaymentTypeId.DefaultSetting = @"";
				colvarPaymentTypeId.ForeignKeyTableName = "AE_PaymentTypes";
				schema.Columns.Add(colvarPaymentTypeId);

				TableSchema.TableColumn colvarFriendsAndFamilyTypeId = new TableSchema.TableColumn(schema);
				colvarFriendsAndFamilyTypeId.ColumnName = "FriendsAndFamilyTypeId";
				colvarFriendsAndFamilyTypeId.DataType = DbType.AnsiString;
				colvarFriendsAndFamilyTypeId.MaxLength = 20;
				colvarFriendsAndFamilyTypeId.AutoIncrement = false;
				colvarFriendsAndFamilyTypeId.IsNullable = false;
				colvarFriendsAndFamilyTypeId.IsPrimaryKey = false;
				colvarFriendsAndFamilyTypeId.IsForeignKey = true;
				colvarFriendsAndFamilyTypeId.IsReadOnly = false;
				colvarFriendsAndFamilyTypeId.DefaultSetting = @"('EMP')";
				colvarFriendsAndFamilyTypeId.ForeignKeyTableName = "MC_FriendsAndFamilyTypes";
				schema.Columns.Add(colvarFriendsAndFamilyTypeId);

				TableSchema.TableColumn colvarAccountSubmitId = new TableSchema.TableColumn(schema);
				colvarAccountSubmitId.ColumnName = "AccountSubmitId";
				colvarAccountSubmitId.DataType = DbType.Int64;
				colvarAccountSubmitId.MaxLength = 0;
				colvarAccountSubmitId.AutoIncrement = false;
				colvarAccountSubmitId.IsNullable = true;
				colvarAccountSubmitId.IsPrimaryKey = false;
				colvarAccountSubmitId.IsForeignKey = true;
				colvarAccountSubmitId.IsReadOnly = false;
				colvarAccountSubmitId.DefaultSetting = @"";
				colvarAccountSubmitId.ForeignKeyTableName = "MS_AccountSubmits";
				schema.Columns.Add(colvarAccountSubmitId);

				TableSchema.TableColumn colvarBillingDay = new TableSchema.TableColumn(schema);
				colvarBillingDay.ColumnName = "BillingDay";
				colvarBillingDay.DataType = DbType.Int16;
				colvarBillingDay.MaxLength = 0;
				colvarBillingDay.AutoIncrement = false;
				colvarBillingDay.IsNullable = false;
				colvarBillingDay.IsPrimaryKey = false;
				colvarBillingDay.IsForeignKey = false;
				colvarBillingDay.IsReadOnly = false;
				colvarBillingDay.DefaultSetting = @"((5))";
				colvarBillingDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingDay);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarIsMoni = new TableSchema.TableColumn(schema);
				colvarIsMoni.ColumnName = "IsMoni";
				colvarIsMoni.DataType = DbType.Boolean;
				colvarIsMoni.MaxLength = 0;
				colvarIsMoni.AutoIncrement = false;
				colvarIsMoni.IsNullable = false;
				colvarIsMoni.IsPrimaryKey = false;
				colvarIsMoni.IsForeignKey = false;
				colvarIsMoni.IsReadOnly = false;
				colvarIsMoni.DefaultSetting = @"((0))";
				colvarIsMoni.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMoni);

				TableSchema.TableColumn colvarIsTakeOver = new TableSchema.TableColumn(schema);
				colvarIsTakeOver.ColumnName = "IsTakeOver";
				colvarIsTakeOver.DataType = DbType.Boolean;
				colvarIsTakeOver.MaxLength = 0;
				colvarIsTakeOver.AutoIncrement = false;
				colvarIsTakeOver.IsNullable = false;
				colvarIsTakeOver.IsPrimaryKey = false;
				colvarIsTakeOver.IsForeignKey = false;
				colvarIsTakeOver.IsReadOnly = false;
				colvarIsTakeOver.DefaultSetting = @"((0))";
				colvarIsTakeOver.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTakeOver);

				TableSchema.TableColumn colvarIsOwner = new TableSchema.TableColumn(schema);
				colvarIsOwner.ColumnName = "IsOwner";
				colvarIsOwner.DataType = DbType.Boolean;
				colvarIsOwner.MaxLength = 0;
				colvarIsOwner.AutoIncrement = false;
				colvarIsOwner.IsNullable = false;
				colvarIsOwner.IsPrimaryKey = false;
				colvarIsOwner.IsForeignKey = false;
				colvarIsOwner.IsReadOnly = false;
				colvarIsOwner.DefaultSetting = @"((1))";
				colvarIsOwner.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsOwner);

				TableSchema.TableColumn colvarInstallDate = new TableSchema.TableColumn(schema);
				colvarInstallDate.ColumnName = "InstallDate";
				colvarInstallDate.DataType = DbType.DateTime;
				colvarInstallDate.MaxLength = 0;
				colvarInstallDate.AutoIncrement = false;
				colvarInstallDate.IsNullable = true;
				colvarInstallDate.IsPrimaryKey = false;
				colvarInstallDate.IsForeignKey = false;
				colvarInstallDate.IsReadOnly = false;
				colvarInstallDate.DefaultSetting = @"";
				colvarInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallDate);

				TableSchema.TableColumn colvarSubmittedToCSDate = new TableSchema.TableColumn(schema);
				colvarSubmittedToCSDate.ColumnName = "SubmittedToCSDate";
				colvarSubmittedToCSDate.DataType = DbType.DateTime;
				colvarSubmittedToCSDate.MaxLength = 0;
				colvarSubmittedToCSDate.AutoIncrement = false;
				colvarSubmittedToCSDate.IsNullable = true;
				colvarSubmittedToCSDate.IsPrimaryKey = false;
				colvarSubmittedToCSDate.IsForeignKey = false;
				colvarSubmittedToCSDate.IsReadOnly = false;
				colvarSubmittedToCSDate.DefaultSetting = @"";
				colvarSubmittedToCSDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubmittedToCSDate);

				TableSchema.TableColumn colvarCsConfirmationNumber = new TableSchema.TableColumn(schema);
				colvarCsConfirmationNumber.ColumnName = "CsConfirmationNumber";
				colvarCsConfirmationNumber.DataType = DbType.AnsiString;
				colvarCsConfirmationNumber.MaxLength = 50;
				colvarCsConfirmationNumber.AutoIncrement = false;
				colvarCsConfirmationNumber.IsNullable = true;
				colvarCsConfirmationNumber.IsPrimaryKey = false;
				colvarCsConfirmationNumber.IsForeignKey = false;
				colvarCsConfirmationNumber.IsReadOnly = false;
				colvarCsConfirmationNumber.DefaultSetting = @"";
				colvarCsConfirmationNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsConfirmationNumber);

				TableSchema.TableColumn colvarCsTwoWayConfNumber = new TableSchema.TableColumn(schema);
				colvarCsTwoWayConfNumber.ColumnName = "CsTwoWayConfNumber";
				colvarCsTwoWayConfNumber.DataType = DbType.AnsiString;
				colvarCsTwoWayConfNumber.MaxLength = 50;
				colvarCsTwoWayConfNumber.AutoIncrement = false;
				colvarCsTwoWayConfNumber.IsNullable = true;
				colvarCsTwoWayConfNumber.IsPrimaryKey = false;
				colvarCsTwoWayConfNumber.IsForeignKey = false;
				colvarCsTwoWayConfNumber.IsReadOnly = false;
				colvarCsTwoWayConfNumber.DefaultSetting = @"";
				colvarCsTwoWayConfNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsTwoWayConfNumber);

				TableSchema.TableColumn colvarSubmittedToGPDate = new TableSchema.TableColumn(schema);
				colvarSubmittedToGPDate.ColumnName = "SubmittedToGPDate";
				colvarSubmittedToGPDate.DataType = DbType.DateTime;
				colvarSubmittedToGPDate.MaxLength = 0;
				colvarSubmittedToGPDate.AutoIncrement = false;
				colvarSubmittedToGPDate.IsNullable = true;
				colvarSubmittedToGPDate.IsPrimaryKey = false;
				colvarSubmittedToGPDate.IsForeignKey = false;
				colvarSubmittedToGPDate.IsReadOnly = false;
				colvarSubmittedToGPDate.DefaultSetting = @"";
				colvarSubmittedToGPDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubmittedToGPDate);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountSalesInformations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountSalesInformation LoadFrom(MS_AccountSalesInformation item)
		{
			MS_AccountSalesInformation result = new MS_AccountSalesInformation();
			if (item.AccountID != default(long)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public string PaymentTypeId {
			get { return GetColumnValue<string>(Columns.PaymentTypeId); }
			set {
				SetColumnValue(Columns.PaymentTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaymentTypeId));
			}
		}
		[DataMember]
		public string FriendsAndFamilyTypeId {
			get { return GetColumnValue<string>(Columns.FriendsAndFamilyTypeId); }
			set {
				SetColumnValue(Columns.FriendsAndFamilyTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FriendsAndFamilyTypeId));
			}
		}
		[DataMember]
		public long? AccountSubmitId {
			get { return GetColumnValue<long?>(Columns.AccountSubmitId); }
			set {
				SetColumnValue(Columns.AccountSubmitId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSubmitId));
			}
		}
		[DataMember]
		public short BillingDay {
			get { return GetColumnValue<short>(Columns.BillingDay); }
			set {
				SetColumnValue(Columns.BillingDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BillingDay));
			}
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set {
				SetColumnValue(Columns.Email, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Email));
			}
		}
		[DataMember]
		public bool IsMoni {
			get { return GetColumnValue<bool>(Columns.IsMoni); }
			set {
				SetColumnValue(Columns.IsMoni, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsMoni));
			}
		}
		[DataMember]
		public bool IsTakeOver {
			get { return GetColumnValue<bool>(Columns.IsTakeOver); }
			set {
				SetColumnValue(Columns.IsTakeOver, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTakeOver));
			}
		}
		[DataMember]
		public bool IsOwner {
			get { return GetColumnValue<bool>(Columns.IsOwner); }
			set {
				SetColumnValue(Columns.IsOwner, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsOwner));
			}
		}
		[DataMember]
		public DateTime? InstallDate {
			get { return GetColumnValue<DateTime?>(Columns.InstallDate); }
			set {
				SetColumnValue(Columns.InstallDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InstallDate));
			}
		}
		[DataMember]
		public DateTime? SubmittedToCSDate {
			get { return GetColumnValue<DateTime?>(Columns.SubmittedToCSDate); }
			set {
				SetColumnValue(Columns.SubmittedToCSDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubmittedToCSDate));
			}
		}
		[DataMember]
		public string CsConfirmationNumber {
			get { return GetColumnValue<string>(Columns.CsConfirmationNumber); }
			set {
				SetColumnValue(Columns.CsConfirmationNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CsConfirmationNumber));
			}
		}
		[DataMember]
		public string CsTwoWayConfNumber {
			get { return GetColumnValue<string>(Columns.CsTwoWayConfNumber); }
			set {
				SetColumnValue(Columns.CsTwoWayConfNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CsTwoWayConfNumber));
			}
		}
		[DataMember]
		public DateTime? SubmittedToGPDate {
			get { return GetColumnValue<DateTime?>(Columns.SubmittedToGPDate); }
			set {
				SetColumnValue(Columns.SubmittedToGPDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubmittedToGPDate));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_PaymentType _PaymentType;
		//Relationship: FK_MS_AccountSalesInformations_AE_PaymentTypes
		public AE_PaymentType PaymentType
		{
			get
			{
				if(_PaymentType == null) {
					_PaymentType = AE_PaymentType.FetchByID(this.PaymentTypeId);
				}
				return _PaymentType;
			}
			set
			{
				SetColumnValue("PaymentTypeId", value.PaymentTypeID);
				_PaymentType = value;
			}
		}

		private MC_FriendsAndFamilyType _FriendsAndFamilyType;
		//Relationship: FK_MS_AccountSalesInformations_MC_FriendsAndFamilyTypes
		public MC_FriendsAndFamilyType FriendsAndFamilyType
		{
			get
			{
				if(_FriendsAndFamilyType == null) {
					_FriendsAndFamilyType = MC_FriendsAndFamilyType.FetchByID(this.FriendsAndFamilyTypeId);
				}
				return _FriendsAndFamilyType;
			}
			set
			{
				SetColumnValue("FriendsAndFamilyTypeId", value.FriendsAndFamilyTypeID);
				_FriendsAndFamilyType = value;
			}
		}

		private MS_Account _Account;
		//Relationship: FK_MS_AccountSalesInformations_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountID);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountID", value.AccountID);
				_Account = value;
			}
		}

		private MS_AccountSubmit _AccountSubmit;
		//Relationship: FK_MS_AccountSalesInformations_MS_AccountSubmits
		public MS_AccountSubmit AccountSubmit
		{
			get
			{
				if(_AccountSubmit == null) {
					_AccountSubmit = MS_AccountSubmit.FetchByID(this.AccountSubmitId);
				}
				return _AccountSubmit;
			}
			set
			{
				SetColumnValue("AccountSubmitId", value.AccountSubmitID);
				_AccountSubmit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PaymentTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PaymentTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn FriendsAndFamilyTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountSubmitIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn BillingDayColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsMoniColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsTakeOverColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsOwnerColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn InstallDateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn SubmittedToCSDateColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CsConfirmationNumberColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CsTwoWayConfNumberColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn SubmittedToGPDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[21]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string PaymentTypeId = @"PaymentTypeId";
			public static readonly string FriendsAndFamilyTypeId = @"FriendsAndFamilyTypeId";
			public static readonly string AccountSubmitId = @"AccountSubmitId";
			public static readonly string BillingDay = @"BillingDay";
			public static readonly string Email = @"Email";
			public static readonly string IsMoni = @"IsMoni";
			public static readonly string IsTakeOver = @"IsTakeOver";
			public static readonly string IsOwner = @"IsOwner";
			public static readonly string InstallDate = @"InstallDate";
			public static readonly string SubmittedToCSDate = @"SubmittedToCSDate";
			public static readonly string CsConfirmationNumber = @"CsConfirmationNumber";
			public static readonly string CsTwoWayConfNumber = @"CsTwoWayConfNumber";
			public static readonly string SubmittedToGPDate = @"SubmittedToGPDate";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSignalFormatType class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSignalFormatTypeCollection : ActiveList<MS_AccountSignalFormatType, MS_AccountSignalFormatTypeCollection>
	{
		public static MS_AccountSignalFormatTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSignalFormatTypeCollection result = new MS_AccountSignalFormatTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountSignalFormatType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountSignalFormatTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSignalFormatType : ActiveRecord<MS_AccountSignalFormatType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountSignalFormatType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountSignalFormatTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSignalFormatTypeID = new TableSchema.TableColumn(schema);
				colvarSignalFormatTypeID.ColumnName = "SignalFormatTypeID";
				colvarSignalFormatTypeID.DataType = DbType.Int16;
				colvarSignalFormatTypeID.MaxLength = 0;
				colvarSignalFormatTypeID.AutoIncrement = true;
				colvarSignalFormatTypeID.IsNullable = false;
				colvarSignalFormatTypeID.IsPrimaryKey = true;
				colvarSignalFormatTypeID.IsForeignKey = false;
				colvarSignalFormatTypeID.IsReadOnly = false;
				colvarSignalFormatTypeID.DefaultSetting = @"";
				colvarSignalFormatTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSignalFormatTypeID);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = true;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"";
				colvarMonitoringStationOSId.ForeignKeyTableName = "MS_MonitoringStationOSs";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarSignalFormatType = new TableSchema.TableColumn(schema);
				colvarSignalFormatType.ColumnName = "SignalFormatType";
				colvarSignalFormatType.DataType = DbType.AnsiString;
				colvarSignalFormatType.MaxLength = 50;
				colvarSignalFormatType.AutoIncrement = false;
				colvarSignalFormatType.IsNullable = false;
				colvarSignalFormatType.IsPrimaryKey = false;
				colvarSignalFormatType.IsForeignKey = false;
				colvarSignalFormatType.IsReadOnly = false;
				colvarSignalFormatType.DefaultSetting = @"";
				colvarSignalFormatType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSignalFormatType);

				TableSchema.TableColumn colvarMsSignalFormatTypeId = new TableSchema.TableColumn(schema);
				colvarMsSignalFormatTypeId.ColumnName = "MsSignalFormatTypeId";
				colvarMsSignalFormatTypeId.DataType = DbType.AnsiString;
				colvarMsSignalFormatTypeId.MaxLength = 50;
				colvarMsSignalFormatTypeId.AutoIncrement = false;
				colvarMsSignalFormatTypeId.IsNullable = false;
				colvarMsSignalFormatTypeId.IsPrimaryKey = false;
				colvarMsSignalFormatTypeId.IsForeignKey = false;
				colvarMsSignalFormatTypeId.IsReadOnly = false;
				colvarMsSignalFormatTypeId.DefaultSetting = @"";
				colvarMsSignalFormatTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsSignalFormatTypeId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountSignalFormatTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountSignalFormatType LoadFrom(MS_AccountSignalFormatType item)
		{
			MS_AccountSignalFormatType result = new MS_AccountSignalFormatType();
			if (item.SignalFormatTypeID != default(short)) {
				result.LoadByKey(item.SignalFormatTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public short SignalFormatTypeID {
			get { return GetColumnValue<short>(Columns.SignalFormatTypeID); }
			set {
				SetColumnValue(Columns.SignalFormatTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SignalFormatTypeID));
			}
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set {
				SetColumnValue(Columns.MonitoringStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSId));
			}
		}
		[DataMember]
		public string SignalFormatType {
			get { return GetColumnValue<string>(Columns.SignalFormatType); }
			set {
				SetColumnValue(Columns.SignalFormatType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SignalFormatType));
			}
		}
		[DataMember]
		public string MsSignalFormatTypeId {
			get { return GetColumnValue<string>(Columns.MsSignalFormatTypeId); }
			set {
				SetColumnValue(Columns.MsSignalFormatTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MsSignalFormatTypeId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_MonitoringStationOss _MonitoringStationOS;
		//Relationship: FK_MS_AccountSignalFormatTypes_MS_MonitoringStationOSs
		public MS_MonitoringStationOss MonitoringStationOS
		{
			get
			{
				if(_MonitoringStationOS == null) {
					_MonitoringStationOS = MS_MonitoringStationOss.FetchByID(this.MonitoringStationOSId);
				}
				return _MonitoringStationOS;
			}
			set
			{
				SetColumnValue("MonitoringStationOSId", value.MonitoringStationOSID);
				_MonitoringStationOS = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MonitoringStationOSId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SignalFormatTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SignalFormatTypeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MsSignalFormatTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SignalFormatTypeID = @"SignalFormatTypeID";
			public static readonly string MonitoringStationOSId = @"MonitoringStationOSId";
			public static readonly string SignalFormatType = @"SignalFormatType";
			public static readonly string MsSignalFormatTypeId = @"MsSignalFormatTypeId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SignalFormatTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountCollection _MS_AccountsCol;
		//Relationship: FK_MS_Accounts_MS_AccountSignalFormatTypes
		public MS_AccountCollection MS_AccountsCol
		{
			get
			{
				if(_MS_AccountsCol == null) {
					_MS_AccountsCol = new MS_AccountCollection();
					_MS_AccountsCol.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.SignalFormatTypeId, SignalFormatTypeID).ExecuteReader());
				}
				return _MS_AccountsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSiteGeneralDispatch class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSiteGeneralDispatchCollection : ActiveList<MS_AccountSiteGeneralDispatch, MS_AccountSiteGeneralDispatchCollection>
	{
		public static MS_AccountSiteGeneralDispatchCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSiteGeneralDispatchCollection result = new MS_AccountSiteGeneralDispatchCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountSiteGeneralDispatch item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountSiteGeneralDispatches table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSiteGeneralDispatch : ActiveRecord<MS_AccountSiteGeneralDispatch>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountSiteGeneralDispatch()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountSiteGeneralDispatches", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountSiteGeneralDispatchID = new TableSchema.TableColumn(schema);
				colvarAccountSiteGeneralDispatchID.ColumnName = "AccountSiteGeneralDispatchID";
				colvarAccountSiteGeneralDispatchID.DataType = DbType.Int64;
				colvarAccountSiteGeneralDispatchID.MaxLength = 0;
				colvarAccountSiteGeneralDispatchID.AutoIncrement = true;
				colvarAccountSiteGeneralDispatchID.IsNullable = false;
				colvarAccountSiteGeneralDispatchID.IsPrimaryKey = true;
				colvarAccountSiteGeneralDispatchID.IsForeignKey = false;
				colvarAccountSiteGeneralDispatchID.IsReadOnly = false;
				colvarAccountSiteGeneralDispatchID.DefaultSetting = @"";
				colvarAccountSiteGeneralDispatchID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountSiteGeneralDispatchID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MS_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarInstructions = new TableSchema.TableColumn(schema);
				colvarInstructions.ColumnName = "Instructions";
				colvarInstructions.DataType = DbType.String;
				colvarInstructions.MaxLength = -1;
				colvarInstructions.AutoIncrement = false;
				colvarInstructions.IsNullable = false;
				colvarInstructions.IsPrimaryKey = false;
				colvarInstructions.IsForeignKey = false;
				colvarInstructions.IsReadOnly = false;
				colvarInstructions.DefaultSetting = @"";
				colvarInstructions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstructions);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountSiteGeneralDispatches",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountSiteGeneralDispatch LoadFrom(MS_AccountSiteGeneralDispatch item)
		{
			MS_AccountSiteGeneralDispatch result = new MS_AccountSiteGeneralDispatch();
			if (item.AccountSiteGeneralDispatchID != default(long)) {
				result.LoadByKey(item.AccountSiteGeneralDispatchID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountSiteGeneralDispatchID {
			get { return GetColumnValue<long>(Columns.AccountSiteGeneralDispatchID); }
			set {
				SetColumnValue(Columns.AccountSiteGeneralDispatchID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSiteGeneralDispatchID));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public string Instructions {
			get { return GetColumnValue<string>(Columns.Instructions); }
			set {
				SetColumnValue(Columns.Instructions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Instructions));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Account _Account;
		//Relationship: FK_MS_AccountSiteGeneralDispatches_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountSiteGeneralDispatchID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountSiteGeneralDispatchIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn InstructionsColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountSiteGeneralDispatchID = @"AccountSiteGeneralDispatchID";
			public static readonly string AccountId = @"AccountId";
			public static readonly string Instructions = @"Instructions";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountSiteGeneralDispatchID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSiteType class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSiteTypeCollection : ActiveList<MS_AccountSiteType, MS_AccountSiteTypeCollection>
	{
		public static MS_AccountSiteTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSiteTypeCollection result = new MS_AccountSiteTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountSiteType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountSiteTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSiteType : ActiveRecord<MS_AccountSiteType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string BurgFire_CommID = "CBF   ";
			[EnumMember()] public const string BurgFireMed_CommID = "CBFM  ";
			[EnumMember()] public const string Burg_Only_CommID = "CBUR  ";
			[EnumMember()] public const string Fire_Only_CommID = "CFIR  ";
			[EnumMember()] public const string BurgFire_ResID = "RBF   ";
			[EnumMember()] public const string BurgFireMed_ResID = "RBFM  ";
			[EnumMember()] public const string Burg_Only_ResID = "RBUR  ";
			[EnumMember()] public const string Fire_Only_ResID = "RFIR  ";
			[EnumMember()] public const string PERSMedical_OnlyID = "RMED  ";
			[EnumMember()] public const string Ul_FireID = "ULF   ";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountSiteType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountSiteTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSiteTypeID = new TableSchema.TableColumn(schema);
				colvarSiteTypeID.ColumnName = "SiteTypeID";
				colvarSiteTypeID.DataType = DbType.AnsiString;
				colvarSiteTypeID.MaxLength = 20;
				colvarSiteTypeID.AutoIncrement = false;
				colvarSiteTypeID.IsNullable = false;
				colvarSiteTypeID.IsPrimaryKey = true;
				colvarSiteTypeID.IsForeignKey = false;
				colvarSiteTypeID.IsReadOnly = false;
				colvarSiteTypeID.DefaultSetting = @"";
				colvarSiteTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteTypeID);

				TableSchema.TableColumn colvarSiteType = new TableSchema.TableColumn(schema);
				colvarSiteType.ColumnName = "SiteType";
				colvarSiteType.DataType = DbType.AnsiString;
				colvarSiteType.MaxLength = 50;
				colvarSiteType.AutoIncrement = false;
				colvarSiteType.IsNullable = false;
				colvarSiteType.IsPrimaryKey = false;
				colvarSiteType.IsForeignKey = false;
				colvarSiteType.IsReadOnly = false;
				colvarSiteType.DefaultSetting = @"";
				colvarSiteType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountSiteTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountSiteType LoadFrom(MS_AccountSiteType item)
		{
			MS_AccountSiteType result = new MS_AccountSiteType();
			if (item.SiteTypeID != default(string)) {
				result.LoadByKey(item.SiteTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string SiteTypeID {
			get { return GetColumnValue<string>(Columns.SiteTypeID); }
			set {
				SetColumnValue(Columns.SiteTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteTypeID));
			}
		}
		[DataMember]
		public string SiteType {
			get { return GetColumnValue<string>(Columns.SiteType); }
			set {
				SetColumnValue(Columns.SiteType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return SiteType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SiteTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SiteTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SiteTypeID = @"SiteTypeID";
			public static readonly string SiteType = @"SiteType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SiteTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountCollection _MS_AccountsCol;
		//Relationship: FK_MS_Accounts_MS_AccountSiteTypes
		public MS_AccountCollection MS_AccountsCol
		{
			get
			{
				if(_MS_AccountsCol == null) {
					_MS_AccountsCol = new MS_AccountCollection();
					_MS_AccountsCol.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.SiteTypeId, SiteTypeID).ExecuteReader());
				}
				return _MS_AccountsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSubmitAG class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSubmitAGCollection : ActiveList<MS_AccountSubmitAG, MS_AccountSubmitAGCollection>
	{
		public static MS_AccountSubmitAGCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSubmitAGCollection result = new MS_AccountSubmitAGCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountSubmitAG item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountSubmitAGs table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSubmitAG : ActiveRecord<MS_AccountSubmitAG>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountSubmitAG()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountSubmitAGs", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountSubmitAGID = new TableSchema.TableColumn(schema);
				colvarAccountSubmitAGID.ColumnName = "AccountSubmitAGID";
				colvarAccountSubmitAGID.DataType = DbType.Int64;
				colvarAccountSubmitAGID.MaxLength = 0;
				colvarAccountSubmitAGID.AutoIncrement = false;
				colvarAccountSubmitAGID.IsNullable = false;
				colvarAccountSubmitAGID.IsPrimaryKey = true;
				colvarAccountSubmitAGID.IsForeignKey = false;
				colvarAccountSubmitAGID.IsReadOnly = false;
				colvarAccountSubmitAGID.DefaultSetting = @"";
				colvarAccountSubmitAGID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountSubmitAGID);

				TableSchema.TableColumn colvarErrorTypeNum = new TableSchema.TableColumn(schema);
				colvarErrorTypeNum.ColumnName = "ErrorTypeNum";
				colvarErrorTypeNum.DataType = DbType.Int32;
				colvarErrorTypeNum.MaxLength = 0;
				colvarErrorTypeNum.AutoIncrement = false;
				colvarErrorTypeNum.IsNullable = false;
				colvarErrorTypeNum.IsPrimaryKey = false;
				colvarErrorTypeNum.IsForeignKey = false;
				colvarErrorTypeNum.IsReadOnly = false;
				colvarErrorTypeNum.DefaultSetting = @"";
				colvarErrorTypeNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrorTypeNum);

				TableSchema.TableColumn colvarSqlConnectionLost = new TableSchema.TableColumn(schema);
				colvarSqlConnectionLost.ColumnName = "SqlConnectionLost";
				colvarSqlConnectionLost.DataType = DbType.Boolean;
				colvarSqlConnectionLost.MaxLength = 0;
				colvarSqlConnectionLost.AutoIncrement = false;
				colvarSqlConnectionLost.IsNullable = false;
				colvarSqlConnectionLost.IsPrimaryKey = false;
				colvarSqlConnectionLost.IsForeignKey = false;
				colvarSqlConnectionLost.IsReadOnly = false;
				colvarSqlConnectionLost.DefaultSetting = @"";
				colvarSqlConnectionLost.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSqlConnectionLost);

				TableSchema.TableColumn colvarSuccess = new TableSchema.TableColumn(schema);
				colvarSuccess.ColumnName = "Success";
				colvarSuccess.DataType = DbType.Boolean;
				colvarSuccess.MaxLength = 0;
				colvarSuccess.AutoIncrement = false;
				colvarSuccess.IsNullable = false;
				colvarSuccess.IsPrimaryKey = false;
				colvarSuccess.IsForeignKey = false;
				colvarSuccess.IsReadOnly = false;
				colvarSuccess.DefaultSetting = @"";
				colvarSuccess.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuccess);

				TableSchema.TableColumn colvarUserErrorMessage = new TableSchema.TableColumn(schema);
				colvarUserErrorMessage.ColumnName = "UserErrorMessage";
				colvarUserErrorMessage.DataType = DbType.AnsiString;
				colvarUserErrorMessage.MaxLength = 150;
				colvarUserErrorMessage.AutoIncrement = false;
				colvarUserErrorMessage.IsNullable = true;
				colvarUserErrorMessage.IsPrimaryKey = false;
				colvarUserErrorMessage.IsForeignKey = false;
				colvarUserErrorMessage.IsReadOnly = false;
				colvarUserErrorMessage.DefaultSetting = @"";
				colvarUserErrorMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserErrorMessage);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountSubmitAGs",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountSubmitAG LoadFrom(MS_AccountSubmitAG item)
		{
			MS_AccountSubmitAG result = new MS_AccountSubmitAG();
			if (item.AccountSubmitAGID != default(long)) {
				result.LoadByKey(item.AccountSubmitAGID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountSubmitAGID {
			get { return GetColumnValue<long>(Columns.AccountSubmitAGID); }
			set {
				SetColumnValue(Columns.AccountSubmitAGID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSubmitAGID));
			}
		}
		[DataMember]
		public int ErrorTypeNum {
			get { return GetColumnValue<int>(Columns.ErrorTypeNum); }
			set {
				SetColumnValue(Columns.ErrorTypeNum, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ErrorTypeNum));
			}
		}
		[DataMember]
		public bool SqlConnectionLost {
			get { return GetColumnValue<bool>(Columns.SqlConnectionLost); }
			set {
				SetColumnValue(Columns.SqlConnectionLost, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SqlConnectionLost));
			}
		}
		[DataMember]
		public bool Success {
			get { return GetColumnValue<bool>(Columns.Success); }
			set {
				SetColumnValue(Columns.Success, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Success));
			}
		}
		[DataMember]
		public string UserErrorMessage {
			get { return GetColumnValue<string>(Columns.UserErrorMessage); }
			set {
				SetColumnValue(Columns.UserErrorMessage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserErrorMessage));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AccountSubmit _AccountSubmitAG;
		//Relationship: FK_MS_AccountSubmitAGs_MS_AccountSubmits
		public MS_AccountSubmit AccountSubmitAG
		{
			get
			{
				if(_AccountSubmitAG == null) {
					_AccountSubmitAG = MS_AccountSubmit.FetchByID(this.AccountSubmitAGID);
				}
				return _AccountSubmitAG;
			}
			set
			{
				SetColumnValue("AccountSubmitAGID", value.AccountSubmitID);
				_AccountSubmitAG = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountSubmitAGID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountSubmitAGIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ErrorTypeNumColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SqlConnectionLostColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SuccessColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn UserErrorMessageColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountSubmitAGID = @"AccountSubmitAGID";
			public static readonly string ErrorTypeNum = @"ErrorTypeNum";
			public static readonly string SqlConnectionLost = @"SqlConnectionLost";
			public static readonly string Success = @"Success";
			public static readonly string UserErrorMessage = @"UserErrorMessage";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountSubmitAGID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSubmitM class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSubmitMCollection : ActiveList<MS_AccountSubmitM, MS_AccountSubmitMCollection>
	{
		public static MS_AccountSubmitMCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSubmitMCollection result = new MS_AccountSubmitMCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountSubmitM item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountSubmitMs table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSubmitM : ActiveRecord<MS_AccountSubmitM>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountSubmitM()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountSubmitMs", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountSubmitMsID = new TableSchema.TableColumn(schema);
				colvarAccountSubmitMsID.ColumnName = "AccountSubmitMsID";
				colvarAccountSubmitMsID.DataType = DbType.Int64;
				colvarAccountSubmitMsID.MaxLength = 0;
				colvarAccountSubmitMsID.AutoIncrement = true;
				colvarAccountSubmitMsID.IsNullable = false;
				colvarAccountSubmitMsID.IsPrimaryKey = true;
				colvarAccountSubmitMsID.IsForeignKey = false;
				colvarAccountSubmitMsID.IsReadOnly = false;
				colvarAccountSubmitMsID.DefaultSetting = @"";
				colvarAccountSubmitMsID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountSubmitMsID);

				TableSchema.TableColumn colvarAccountSubmitId = new TableSchema.TableColumn(schema);
				colvarAccountSubmitId.ColumnName = "AccountSubmitId";
				colvarAccountSubmitId.DataType = DbType.Int64;
				colvarAccountSubmitId.MaxLength = 0;
				colvarAccountSubmitId.AutoIncrement = false;
				colvarAccountSubmitId.IsNullable = false;
				colvarAccountSubmitId.IsPrimaryKey = false;
				colvarAccountSubmitId.IsForeignKey = true;
				colvarAccountSubmitId.IsReadOnly = false;
				colvarAccountSubmitId.DefaultSetting = @"";
				colvarAccountSubmitId.ForeignKeyTableName = "MS_AccountSubmits";
				schema.Columns.Add(colvarAccountSubmitId);

				TableSchema.TableColumn colvarTableName = new TableSchema.TableColumn(schema);
				colvarTableName.ColumnName = "TableName";
				colvarTableName.DataType = DbType.AnsiString;
				colvarTableName.MaxLength = 50;
				colvarTableName.AutoIncrement = false;
				colvarTableName.IsNullable = true;
				colvarTableName.IsPrimaryKey = false;
				colvarTableName.IsForeignKey = false;
				colvarTableName.IsReadOnly = false;
				colvarTableName.DefaultSetting = @"";
				colvarTableName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTableName);

				TableSchema.TableColumn colvarEntryId = new TableSchema.TableColumn(schema);
				colvarEntryId.ColumnName = "EntryId";
				colvarEntryId.DataType = DbType.AnsiString;
				colvarEntryId.MaxLength = 50;
				colvarEntryId.AutoIncrement = false;
				colvarEntryId.IsNullable = true;
				colvarEntryId.IsPrimaryKey = false;
				colvarEntryId.IsForeignKey = false;
				colvarEntryId.IsReadOnly = false;
				colvarEntryId.DefaultSetting = @"";
				colvarEntryId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntryId);

				TableSchema.TableColumn colvarSiteNo = new TableSchema.TableColumn(schema);
				colvarSiteNo.ColumnName = "SiteNo";
				colvarSiteNo.DataType = DbType.Int32;
				colvarSiteNo.MaxLength = 0;
				colvarSiteNo.AutoIncrement = false;
				colvarSiteNo.IsNullable = true;
				colvarSiteNo.IsPrimaryKey = false;
				colvarSiteNo.IsForeignKey = false;
				colvarSiteNo.IsReadOnly = false;
				colvarSiteNo.DefaultSetting = @"";
				colvarSiteNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteNo);

				TableSchema.TableColumn colvarCsNo = new TableSchema.TableColumn(schema);
				colvarCsNo.ColumnName = "CsNo";
				colvarCsNo.DataType = DbType.AnsiString;
				colvarCsNo.MaxLength = 20;
				colvarCsNo.AutoIncrement = false;
				colvarCsNo.IsNullable = true;
				colvarCsNo.IsPrimaryKey = false;
				colvarCsNo.IsForeignKey = false;
				colvarCsNo.IsReadOnly = false;
				colvarCsNo.DefaultSetting = @"";
				colvarCsNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsNo);

				TableSchema.TableColumn colvarErrNo = new TableSchema.TableColumn(schema);
				colvarErrNo.ColumnName = "ErrNo";
				colvarErrNo.DataType = DbType.Int32;
				colvarErrNo.MaxLength = 0;
				colvarErrNo.AutoIncrement = false;
				colvarErrNo.IsNullable = true;
				colvarErrNo.IsPrimaryKey = false;
				colvarErrNo.IsForeignKey = false;
				colvarErrNo.IsReadOnly = false;
				colvarErrNo.DefaultSetting = @"";
				colvarErrNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrNo);

				TableSchema.TableColumn colvarMsgType = new TableSchema.TableColumn(schema);
				colvarMsgType.ColumnName = "MsgType";
				colvarMsgType.DataType = DbType.Byte;
				colvarMsgType.MaxLength = 0;
				colvarMsgType.AutoIncrement = false;
				colvarMsgType.IsNullable = true;
				colvarMsgType.IsPrimaryKey = false;
				colvarMsgType.IsForeignKey = false;
				colvarMsgType.IsReadOnly = false;
				colvarMsgType.DefaultSetting = @"";
				colvarMsgType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsgType);

				TableSchema.TableColumn colvarErrText = new TableSchema.TableColumn(schema);
				colvarErrText.ColumnName = "ErrText";
				colvarErrText.DataType = DbType.AnsiString;
				colvarErrText.MaxLength = 500;
				colvarErrText.AutoIncrement = false;
				colvarErrText.IsNullable = true;
				colvarErrText.IsPrimaryKey = false;
				colvarErrText.IsForeignKey = false;
				colvarErrText.IsReadOnly = false;
				colvarErrText.DefaultSetting = @"";
				colvarErrText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrText);

				TableSchema.TableColumn colvarErrDate = new TableSchema.TableColumn(schema);
				colvarErrDate.ColumnName = "ErrDate";
				colvarErrDate.DataType = DbType.DateTime;
				colvarErrDate.MaxLength = 0;
				colvarErrDate.AutoIncrement = false;
				colvarErrDate.IsNullable = true;
				colvarErrDate.IsPrimaryKey = false;
				colvarErrDate.IsForeignKey = false;
				colvarErrDate.IsReadOnly = false;
				colvarErrDate.DefaultSetting = @"";
				colvarErrDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrDate);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountSubmitMs",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountSubmitM LoadFrom(MS_AccountSubmitM item)
		{
			MS_AccountSubmitM result = new MS_AccountSubmitM();
			if (item.AccountSubmitMsID != default(long)) {
				result.LoadByKey(item.AccountSubmitMsID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountSubmitMsID {
			get { return GetColumnValue<long>(Columns.AccountSubmitMsID); }
			set {
				SetColumnValue(Columns.AccountSubmitMsID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSubmitMsID));
			}
		}
		[DataMember]
		public long AccountSubmitId {
			get { return GetColumnValue<long>(Columns.AccountSubmitId); }
			set {
				SetColumnValue(Columns.AccountSubmitId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSubmitId));
			}
		}
		[DataMember]
		public string TableName {
			get { return GetColumnValue<string>(Columns.TableName); }
			set {
				SetColumnValue(Columns.TableName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TableName));
			}
		}
		[DataMember]
		public string EntryId {
			get { return GetColumnValue<string>(Columns.EntryId); }
			set {
				SetColumnValue(Columns.EntryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EntryId));
			}
		}
		[DataMember]
		public int? SiteNo {
			get { return GetColumnValue<int?>(Columns.SiteNo); }
			set {
				SetColumnValue(Columns.SiteNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteNo));
			}
		}
		[DataMember]
		public string CsNo {
			get { return GetColumnValue<string>(Columns.CsNo); }
			set {
				SetColumnValue(Columns.CsNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CsNo));
			}
		}
		[DataMember]
		public int? ErrNo {
			get { return GetColumnValue<int?>(Columns.ErrNo); }
			set {
				SetColumnValue(Columns.ErrNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ErrNo));
			}
		}
		[DataMember]
		public byte? MsgType {
			get { return GetColumnValue<byte?>(Columns.MsgType); }
			set {
				SetColumnValue(Columns.MsgType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MsgType));
			}
		}
		[DataMember]
		public string ErrText {
			get { return GetColumnValue<string>(Columns.ErrText); }
			set {
				SetColumnValue(Columns.ErrText, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ErrText));
			}
		}
		[DataMember]
		public DateTime? ErrDate {
			get { return GetColumnValue<DateTime?>(Columns.ErrDate); }
			set {
				SetColumnValue(Columns.ErrDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ErrDate));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AccountSubmit _AccountSubmit;
		//Relationship: FK_MS_AccountSubmitMs_MS_AccountSubmits
		public MS_AccountSubmit AccountSubmit
		{
			get
			{
				if(_AccountSubmit == null) {
					_AccountSubmit = MS_AccountSubmit.FetchByID(this.AccountSubmitId);
				}
				return _AccountSubmit;
			}
			set
			{
				SetColumnValue("AccountSubmitId", value.AccountSubmitID);
				_AccountSubmit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountSubmitMsID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountSubmitMsIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountSubmitIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TableNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn EntryIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SiteNoColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CsNoColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ErrNoColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn MsgTypeColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ErrTextColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ErrDateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountSubmitMsID = @"AccountSubmitMsID";
			public static readonly string AccountSubmitId = @"AccountSubmitId";
			public static readonly string TableName = @"TableName";
			public static readonly string EntryId = @"EntryId";
			public static readonly string SiteNo = @"SiteNo";
			public static readonly string CsNo = @"CsNo";
			public static readonly string ErrNo = @"ErrNo";
			public static readonly string MsgType = @"MsgType";
			public static readonly string ErrText = @"ErrText";
			public static readonly string ErrDate = @"ErrDate";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountSubmitMsID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSubmitMsXml class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSubmitMsXmlCollection : ActiveList<MS_AccountSubmitMsXml, MS_AccountSubmitMsXmlCollection>
	{
		public static MS_AccountSubmitMsXmlCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSubmitMsXmlCollection result = new MS_AccountSubmitMsXmlCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountSubmitMsXml item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountSubmitMsXmls table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSubmitMsXml : ActiveRecord<MS_AccountSubmitMsXml>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountSubmitMsXml()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountSubmitMsXmls", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountSubmitID = new TableSchema.TableColumn(schema);
				colvarAccountSubmitID.ColumnName = "AccountSubmitID";
				colvarAccountSubmitID.DataType = DbType.Int64;
				colvarAccountSubmitID.MaxLength = 0;
				colvarAccountSubmitID.AutoIncrement = false;
				colvarAccountSubmitID.IsNullable = false;
				colvarAccountSubmitID.IsPrimaryKey = true;
				colvarAccountSubmitID.IsForeignKey = false;
				colvarAccountSubmitID.IsReadOnly = false;
				colvarAccountSubmitID.DefaultSetting = @"";
				colvarAccountSubmitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountSubmitID);

				TableSchema.TableColumn colvarAccount = new TableSchema.TableColumn(schema);
				colvarAccount.ColumnName = "Account";
				colvarAccount.DataType = DbType.String;
				colvarAccount.MaxLength = -1;
				colvarAccount.AutoIncrement = false;
				colvarAccount.IsNullable = false;
				colvarAccount.IsPrimaryKey = false;
				colvarAccount.IsForeignKey = false;
				colvarAccount.IsReadOnly = false;
				colvarAccount.DefaultSetting = @"";
				colvarAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccount);

				TableSchema.TableColumn colvarCreditRequest = new TableSchema.TableColumn(schema);
				colvarCreditRequest.ColumnName = "CreditRequest";
				colvarCreditRequest.DataType = DbType.String;
				colvarCreditRequest.MaxLength = -1;
				colvarCreditRequest.AutoIncrement = false;
				colvarCreditRequest.IsNullable = true;
				colvarCreditRequest.IsPrimaryKey = false;
				colvarCreditRequest.IsForeignKey = false;
				colvarCreditRequest.IsReadOnly = false;
				colvarCreditRequest.DefaultSetting = @"";
				colvarCreditRequest.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditRequest);

				TableSchema.TableColumn colvarPurchaseInfo = new TableSchema.TableColumn(schema);
				colvarPurchaseInfo.ColumnName = "PurchaseInfo";
				colvarPurchaseInfo.DataType = DbType.String;
				colvarPurchaseInfo.MaxLength = -1;
				colvarPurchaseInfo.AutoIncrement = false;
				colvarPurchaseInfo.IsNullable = true;
				colvarPurchaseInfo.IsPrimaryKey = false;
				colvarPurchaseInfo.IsForeignKey = false;
				colvarPurchaseInfo.IsReadOnly = false;
				colvarPurchaseInfo.DefaultSetting = @"";
				colvarPurchaseInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPurchaseInfo);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountSubmitMsXmls",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountSubmitMsXml LoadFrom(MS_AccountSubmitMsXml item)
		{
			MS_AccountSubmitMsXml result = new MS_AccountSubmitMsXml();
			if (item.AccountSubmitID != default(long)) {
				result.LoadByKey(item.AccountSubmitID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountSubmitID {
			get { return GetColumnValue<long>(Columns.AccountSubmitID); }
			set {
				SetColumnValue(Columns.AccountSubmitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSubmitID));
			}
		}
		[DataMember]
		public string Account {
			get { return GetColumnValue<string>(Columns.Account); }
			set {
				SetColumnValue(Columns.Account, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Account));
			}
		}
		[DataMember]
		public string CreditRequest {
			get { return GetColumnValue<string>(Columns.CreditRequest); }
			set {
				SetColumnValue(Columns.CreditRequest, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditRequest));
			}
		}
		[DataMember]
		public string PurchaseInfo {
			get { return GetColumnValue<string>(Columns.PurchaseInfo); }
			set {
				SetColumnValue(Columns.PurchaseInfo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PurchaseInfo));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AccountSubmit _AccountSubmit;
		//Relationship: FK_MS_AccountSubmitMsXmls_MS_AccountSubmits
		public MS_AccountSubmit AccountSubmit
		{
			get
			{
				if(_AccountSubmit == null) {
					_AccountSubmit = MS_AccountSubmit.FetchByID(this.AccountSubmitID);
				}
				return _AccountSubmit;
			}
			set
			{
				SetColumnValue("AccountSubmitID", value.AccountSubmitID);
				_AccountSubmit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Account;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountSubmitIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreditRequestColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PurchaseInfoColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountSubmitID = @"AccountSubmitID";
			public static readonly string Account = @"Account";
			public static readonly string CreditRequest = @"CreditRequest";
			public static readonly string PurchaseInfo = @"PurchaseInfo";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountSubmitID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSubmit class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSubmitCollection : ActiveList<MS_AccountSubmit, MS_AccountSubmitCollection>
	{
		public static MS_AccountSubmitCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSubmitCollection result = new MS_AccountSubmitCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountSubmit item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountSubmits table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSubmit : ActiveRecord<MS_AccountSubmit>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountSubmit()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountSubmits", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountSubmitID = new TableSchema.TableColumn(schema);
				colvarAccountSubmitID.ColumnName = "AccountSubmitID";
				colvarAccountSubmitID.DataType = DbType.Int64;
				colvarAccountSubmitID.MaxLength = 0;
				colvarAccountSubmitID.AutoIncrement = true;
				colvarAccountSubmitID.IsNullable = false;
				colvarAccountSubmitID.IsPrimaryKey = true;
				colvarAccountSubmitID.IsForeignKey = false;
				colvarAccountSubmitID.IsReadOnly = false;
				colvarAccountSubmitID.DefaultSetting = @"";
				colvarAccountSubmitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountSubmitID);

				TableSchema.TableColumn colvarAccountSubmitTypeId = new TableSchema.TableColumn(schema);
				colvarAccountSubmitTypeId.ColumnName = "AccountSubmitTypeId";
				colvarAccountSubmitTypeId.DataType = DbType.Int16;
				colvarAccountSubmitTypeId.MaxLength = 0;
				colvarAccountSubmitTypeId.AutoIncrement = false;
				colvarAccountSubmitTypeId.IsNullable = false;
				colvarAccountSubmitTypeId.IsPrimaryKey = false;
				colvarAccountSubmitTypeId.IsForeignKey = true;
				colvarAccountSubmitTypeId.IsReadOnly = false;
				colvarAccountSubmitTypeId.DefaultSetting = @"((1))";
				colvarAccountSubmitTypeId.ForeignKeyTableName = "MS_AccountSubmitTypes";
				schema.Columns.Add(colvarAccountSubmitTypeId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MS_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarIndustryAccountId = new TableSchema.TableColumn(schema);
				colvarIndustryAccountId.ColumnName = "IndustryAccountId";
				colvarIndustryAccountId.DataType = DbType.Int64;
				colvarIndustryAccountId.MaxLength = 0;
				colvarIndustryAccountId.AutoIncrement = false;
				colvarIndustryAccountId.IsNullable = true;
				colvarIndustryAccountId.IsPrimaryKey = false;
				colvarIndustryAccountId.IsForeignKey = true;
				colvarIndustryAccountId.IsReadOnly = false;
				colvarIndustryAccountId.DefaultSetting = @"";
				colvarIndustryAccountId.ForeignKeyTableName = "MS_IndustryAccounts";
				schema.Columns.Add(colvarIndustryAccountId);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = true;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"('AG_ALARMSYS')";
				colvarMonitoringStationOSId.ForeignKeyTableName = "MS_MonitoringStationOSs";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarGPTechId = new TableSchema.TableColumn(schema);
				colvarGPTechId.ColumnName = "GPTechId";
				colvarGPTechId.DataType = DbType.AnsiString;
				colvarGPTechId.MaxLength = 20;
				colvarGPTechId.AutoIncrement = false;
				colvarGPTechId.IsNullable = false;
				colvarGPTechId.IsPrimaryKey = false;
				colvarGPTechId.IsForeignKey = false;
				colvarGPTechId.IsReadOnly = false;
				colvarGPTechId.DefaultSetting = @"";
				colvarGPTechId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPTechId);

				TableSchema.TableColumn colvarDateSubmitted = new TableSchema.TableColumn(schema);
				colvarDateSubmitted.ColumnName = "DateSubmitted";
				colvarDateSubmitted.DataType = DbType.DateTime;
				colvarDateSubmitted.MaxLength = 0;
				colvarDateSubmitted.AutoIncrement = false;
				colvarDateSubmitted.IsNullable = false;
				colvarDateSubmitted.IsPrimaryKey = false;
				colvarDateSubmitted.IsForeignKey = false;
				colvarDateSubmitted.IsReadOnly = false;
				colvarDateSubmitted.DefaultSetting = @"(getutcdate())";
				colvarDateSubmitted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateSubmitted);

				TableSchema.TableColumn colvarWasSuccessfull = new TableSchema.TableColumn(schema);
				colvarWasSuccessfull.ColumnName = "WasSuccessfull";
				colvarWasSuccessfull.DataType = DbType.Boolean;
				colvarWasSuccessfull.MaxLength = 0;
				colvarWasSuccessfull.AutoIncrement = false;
				colvarWasSuccessfull.IsNullable = false;
				colvarWasSuccessfull.IsPrimaryKey = false;
				colvarWasSuccessfull.IsForeignKey = false;
				colvarWasSuccessfull.IsReadOnly = false;
				colvarWasSuccessfull.DefaultSetting = @"((1))";
				colvarWasSuccessfull.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWasSuccessfull);

				TableSchema.TableColumn colvarMessage = new TableSchema.TableColumn(schema);
				colvarMessage.ColumnName = "Message";
				colvarMessage.DataType = DbType.String;
				colvarMessage.MaxLength = -1;
				colvarMessage.AutoIncrement = false;
				colvarMessage.IsNullable = true;
				colvarMessage.IsPrimaryKey = false;
				colvarMessage.IsForeignKey = false;
				colvarMessage.IsReadOnly = false;
				colvarMessage.DefaultSetting = @"";
				colvarMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessage);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountSubmits",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountSubmit LoadFrom(MS_AccountSubmit item)
		{
			MS_AccountSubmit result = new MS_AccountSubmit();
			if (item.AccountSubmitID != default(long)) {
				result.LoadByKey(item.AccountSubmitID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountSubmitID {
			get { return GetColumnValue<long>(Columns.AccountSubmitID); }
			set {
				SetColumnValue(Columns.AccountSubmitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSubmitID));
			}
		}
		[DataMember]
		public short AccountSubmitTypeId {
			get { return GetColumnValue<short>(Columns.AccountSubmitTypeId); }
			set {
				SetColumnValue(Columns.AccountSubmitTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSubmitTypeId));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public long? IndustryAccountId {
			get { return GetColumnValue<long?>(Columns.IndustryAccountId); }
			set {
				SetColumnValue(Columns.IndustryAccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryAccountId));
			}
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set {
				SetColumnValue(Columns.MonitoringStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSId));
			}
		}
		[DataMember]
		public string GPTechId {
			get { return GetColumnValue<string>(Columns.GPTechId); }
			set {
				SetColumnValue(Columns.GPTechId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPTechId));
			}
		}
		[DataMember]
		public DateTime DateSubmitted {
			get { return GetColumnValue<DateTime>(Columns.DateSubmitted); }
			set {
				SetColumnValue(Columns.DateSubmitted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DateSubmitted));
			}
		}
		[DataMember]
		public bool WasSuccessfull {
			get { return GetColumnValue<bool>(Columns.WasSuccessfull); }
			set {
				SetColumnValue(Columns.WasSuccessfull, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WasSuccessfull));
			}
		}
		[DataMember]
		public string Message {
			get { return GetColumnValue<string>(Columns.Message); }
			set {
				SetColumnValue(Columns.Message, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Message));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Account _Account;
		//Relationship: FK_MS_AccountSubmits_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		private MS_AccountSubmitType _AccountSubmitType;
		//Relationship: FK_MS_AccountSubmits_MS_AccountSubmitTypes
		public MS_AccountSubmitType AccountSubmitType
		{
			get
			{
				if(_AccountSubmitType == null) {
					_AccountSubmitType = MS_AccountSubmitType.FetchByID(this.AccountSubmitTypeId);
				}
				return _AccountSubmitType;
			}
			set
			{
				SetColumnValue("AccountSubmitTypeId", value.AccountSubmitTypeID);
				_AccountSubmitType = value;
			}
		}

		private MS_IndustryAccount _IndustryAccount;
		//Relationship: FK_MS_AccountSubmits_MS_IndustryAccounts
		public MS_IndustryAccount IndustryAccount
		{
			get
			{
				if(_IndustryAccount == null) {
					_IndustryAccount = MS_IndustryAccount.FetchByID(this.IndustryAccountId);
				}
				return _IndustryAccount;
			}
			set
			{
				SetColumnValue("IndustryAccountId", value.IndustryAccountID);
				_IndustryAccount = value;
			}
		}

		private MS_MonitoringStationOss _MonitoringStationOS;
		//Relationship: FK_MS_AccountSubmits_MS_MonitoringStationOSs
		public MS_MonitoringStationOss MonitoringStationOS
		{
			get
			{
				if(_MonitoringStationOS == null) {
					_MonitoringStationOS = MS_MonitoringStationOss.FetchByID(this.MonitoringStationOSId);
				}
				return _MonitoringStationOS;
			}
			set
			{
				SetColumnValue("MonitoringStationOSId", value.MonitoringStationOSID);
				_MonitoringStationOS = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountSubmitID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountSubmitIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountSubmitTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IndustryAccountIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn GPTechIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DateSubmittedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn WasSuccessfullColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn MessageColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountSubmitID = @"AccountSubmitID";
			public static readonly string AccountSubmitTypeId = @"AccountSubmitTypeId";
			public static readonly string AccountId = @"AccountId";
			public static readonly string IndustryAccountId = @"IndustryAccountId";
			public static readonly string MonitoringStationOSId = @"MonitoringStationOSId";
			public static readonly string GPTechId = @"GPTechId";
			public static readonly string DateSubmitted = @"DateSubmitted";
			public static readonly string WasSuccessfull = @"WasSuccessfull";
			public static readonly string Message = @"Message";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountSubmitID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountSalesInformationCollection _MS_AccountSalesInformationsCol;
		//Relationship: FK_MS_AccountSalesInformations_MS_AccountSubmits
		public MS_AccountSalesInformationCollection MS_AccountSalesInformationsCol
		{
			get
			{
				if(_MS_AccountSalesInformationsCol == null) {
					_MS_AccountSalesInformationsCol = new MS_AccountSalesInformationCollection();
					_MS_AccountSalesInformationsCol.LoadAndCloseReader(MS_AccountSalesInformation.Query()
						.WHERE(MS_AccountSalesInformation.Columns.AccountSubmitId, AccountSubmitID).ExecuteReader());
				}
				return _MS_AccountSalesInformationsCol;
			}
		}

		private MS_AccountSubmitAGCollection _MS_AccountSubmitAGsCol;
		//Relationship: FK_MS_AccountSubmitAGs_MS_AccountSubmits
		public MS_AccountSubmitAGCollection MS_AccountSubmitAGsCol
		{
			get
			{
				if(_MS_AccountSubmitAGsCol == null) {
					_MS_AccountSubmitAGsCol = new MS_AccountSubmitAGCollection();
					_MS_AccountSubmitAGsCol.LoadAndCloseReader(MS_AccountSubmitAG.Query()
						.WHERE(MS_AccountSubmitAG.Columns.AccountSubmitAGID, AccountSubmitID).ExecuteReader());
				}
				return _MS_AccountSubmitAGsCol;
			}
		}

		private MS_AccountSubmitMCollection _MS_AccountSubmitMsCol;
		//Relationship: FK_MS_AccountSubmitMs_MS_AccountSubmits
		public MS_AccountSubmitMCollection MS_AccountSubmitMsCol
		{
			get
			{
				if(_MS_AccountSubmitMsCol == null) {
					_MS_AccountSubmitMsCol = new MS_AccountSubmitMCollection();
					_MS_AccountSubmitMsCol.LoadAndCloseReader(MS_AccountSubmitM.Query()
						.WHERE(MS_AccountSubmitM.Columns.AccountSubmitId, AccountSubmitID).ExecuteReader());
				}
				return _MS_AccountSubmitMsCol;
			}
		}

		private MS_AccountSubmitMsXmlCollection _MS_AccountSubmitMsXmlsCol;
		//Relationship: FK_MS_AccountSubmitMsXmls_MS_AccountSubmits
		public MS_AccountSubmitMsXmlCollection MS_AccountSubmitMsXmlsCol
		{
			get
			{
				if(_MS_AccountSubmitMsXmlsCol == null) {
					_MS_AccountSubmitMsXmlsCol = new MS_AccountSubmitMsXmlCollection();
					_MS_AccountSubmitMsXmlsCol.LoadAndCloseReader(MS_AccountSubmitMsXml.Query()
						.WHERE(MS_AccountSubmitMsXml.Columns.AccountSubmitID, AccountSubmitID).ExecuteReader());
				}
				return _MS_AccountSubmitMsXmlsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSubmitType class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSubmitTypeCollection : ActiveList<MS_AccountSubmitType, MS_AccountSubmitTypeCollection>
	{
		public static MS_AccountSubmitTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSubmitTypeCollection result = new MS_AccountSubmitTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountSubmitType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountSubmitTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSubmitType : ActiveRecord<MS_AccountSubmitType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum AccountSubmitTypeEnum : short
		{
			[EnumMember()] Undefined = 0,
			[EnumMember()] Onboard_System = 1,
			[EnumMember()] Turn_Service_On = 2,
			[EnumMember()] Turn_Service_On_Pending = 3,
			[EnumMember()] Turn_Service_On_Cancel = 4,
			[EnumMember()] Onboard_And_Turn_Service_On = 5,
			[EnumMember()] Shell_Account = 6,
			[EnumMember()] Initiate_Two_Way_Test = 7,
			[EnumMember()] Pull_Panel = 8,
		}

		//[DataMember]
		//public AccountSubmitTypeEnum AccountSubmitTypeCode
		//{
		//	get { return (AccountSubmitTypeEnum)AccountSubmitTypeID; }
		//	set { AccountSubmitTypeID = (short)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountSubmitType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountSubmitTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountSubmitTypeID = new TableSchema.TableColumn(schema);
				colvarAccountSubmitTypeID.ColumnName = "AccountSubmitTypeID";
				colvarAccountSubmitTypeID.DataType = DbType.Int16;
				colvarAccountSubmitTypeID.MaxLength = 0;
				colvarAccountSubmitTypeID.AutoIncrement = false;
				colvarAccountSubmitTypeID.IsNullable = false;
				colvarAccountSubmitTypeID.IsPrimaryKey = true;
				colvarAccountSubmitTypeID.IsForeignKey = false;
				colvarAccountSubmitTypeID.IsReadOnly = false;
				colvarAccountSubmitTypeID.DefaultSetting = @"";
				colvarAccountSubmitTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountSubmitTypeID);

				TableSchema.TableColumn colvarAccountSubmitType = new TableSchema.TableColumn(schema);
				colvarAccountSubmitType.ColumnName = "AccountSubmitType";
				colvarAccountSubmitType.DataType = DbType.AnsiString;
				colvarAccountSubmitType.MaxLength = 50;
				colvarAccountSubmitType.AutoIncrement = false;
				colvarAccountSubmitType.IsNullable = false;
				colvarAccountSubmitType.IsPrimaryKey = false;
				colvarAccountSubmitType.IsForeignKey = false;
				colvarAccountSubmitType.IsReadOnly = false;
				colvarAccountSubmitType.DefaultSetting = @"";
				colvarAccountSubmitType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountSubmitType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountSubmitTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountSubmitType LoadFrom(MS_AccountSubmitType item)
		{
			MS_AccountSubmitType result = new MS_AccountSubmitType();
			if (item.AccountSubmitTypeID != default(short)) {
				result.LoadByKey(item.AccountSubmitTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public short AccountSubmitTypeID {
			get { return GetColumnValue<short>(Columns.AccountSubmitTypeID); }
			set {
				SetColumnValue(Columns.AccountSubmitTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSubmitTypeID));
			}
		}
		[DataMember]
		public string AccountSubmitType {
			get { return GetColumnValue<string>(Columns.AccountSubmitType); }
			set {
				SetColumnValue(Columns.AccountSubmitType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSubmitType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountSubmitType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountSubmitTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountSubmitTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountSubmitTypeID = @"AccountSubmitTypeID";
			public static readonly string AccountSubmitType = @"AccountSubmitType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountSubmitTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountSubmitCollection _MS_AccountSubmitsCol;
		//Relationship: FK_MS_AccountSubmits_MS_AccountSubmitTypes
		public MS_AccountSubmitCollection MS_AccountSubmitsCol
		{
			get
			{
				if(_MS_AccountSubmitsCol == null) {
					_MS_AccountSubmitsCol = new MS_AccountSubmitCollection();
					_MS_AccountSubmitsCol.LoadAndCloseReader(MS_AccountSubmit.Query()
						.WHERE(MS_AccountSubmit.Columns.AccountSubmitTypeId, AccountSubmitTypeID).ExecuteReader());
				}
				return _MS_AccountSubmitsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSwungInfo class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSwungInfoCollection : ActiveList<MS_AccountSwungInfo, MS_AccountSwungInfoCollection>
	{
		public static MS_AccountSwungInfoCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSwungInfoCollection result = new MS_AccountSwungInfoCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountSwungInfo item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountSwungInfo table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSwungInfo : ActiveRecord<MS_AccountSwungInfo>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountSwungInfo()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountSwungInfo", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInterimAccountID = new TableSchema.TableColumn(schema);
				colvarInterimAccountID.ColumnName = "InterimAccountID";
				colvarInterimAccountID.DataType = DbType.Int32;
				colvarInterimAccountID.MaxLength = 0;
				colvarInterimAccountID.AutoIncrement = false;
				colvarInterimAccountID.IsNullable = false;
				colvarInterimAccountID.IsPrimaryKey = true;
				colvarInterimAccountID.IsForeignKey = false;
				colvarInterimAccountID.IsReadOnly = false;
				colvarInterimAccountID.DefaultSetting = @"";
				colvarInterimAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInterimAccountID);

				TableSchema.TableColumn colvarMsAccountID = new TableSchema.TableColumn(schema);
				colvarMsAccountID.ColumnName = "MsAccountID";
				colvarMsAccountID.DataType = DbType.Int64;
				colvarMsAccountID.MaxLength = 0;
				colvarMsAccountID.AutoIncrement = false;
				colvarMsAccountID.IsNullable = true;
				colvarMsAccountID.IsPrimaryKey = false;
				colvarMsAccountID.IsForeignKey = false;
				colvarMsAccountID.IsReadOnly = false;
				colvarMsAccountID.DefaultSetting = @"";
				colvarMsAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAccountID);

				TableSchema.TableColumn colvarCustomerMasterFileID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileID.ColumnName = "CustomerMasterFileID";
				colvarCustomerMasterFileID.DataType = DbType.Int64;
				colvarCustomerMasterFileID.MaxLength = 0;
				colvarCustomerMasterFileID.AutoIncrement = false;
				colvarCustomerMasterFileID.IsNullable = true;
				colvarCustomerMasterFileID.IsPrimaryKey = false;
				colvarCustomerMasterFileID.IsForeignKey = false;
				colvarCustomerMasterFileID.IsReadOnly = false;
				colvarCustomerMasterFileID.DefaultSetting = @"";
				colvarCustomerMasterFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileID);

				TableSchema.TableColumn colvarCustomerMasterFile = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFile.ColumnName = "CustomerMasterFile";
				colvarCustomerMasterFile.DataType = DbType.DateTime;
				colvarCustomerMasterFile.MaxLength = 0;
				colvarCustomerMasterFile.AutoIncrement = false;
				colvarCustomerMasterFile.IsNullable = true;
				colvarCustomerMasterFile.IsPrimaryKey = false;
				colvarCustomerMasterFile.IsForeignKey = false;
				colvarCustomerMasterFile.IsReadOnly = false;
				colvarCustomerMasterFile.DefaultSetting = @"";
				colvarCustomerMasterFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFile);

				TableSchema.TableColumn colvarPremiseAddress = new TableSchema.TableColumn(schema);
				colvarPremiseAddress.ColumnName = "PremiseAddress";
				colvarPremiseAddress.DataType = DbType.DateTime;
				colvarPremiseAddress.MaxLength = 0;
				colvarPremiseAddress.AutoIncrement = false;
				colvarPremiseAddress.IsNullable = true;
				colvarPremiseAddress.IsPrimaryKey = false;
				colvarPremiseAddress.IsForeignKey = false;
				colvarPremiseAddress.IsReadOnly = false;
				colvarPremiseAddress.DefaultSetting = @"";
				colvarPremiseAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremiseAddress);

				TableSchema.TableColumn colvarMcAccount = new TableSchema.TableColumn(schema);
				colvarMcAccount.ColumnName = "McAccount";
				colvarMcAccount.DataType = DbType.DateTime;
				colvarMcAccount.MaxLength = 0;
				colvarMcAccount.AutoIncrement = false;
				colvarMcAccount.IsNullable = true;
				colvarMcAccount.IsPrimaryKey = false;
				colvarMcAccount.IsForeignKey = false;
				colvarMcAccount.IsReadOnly = false;
				colvarMcAccount.DefaultSetting = @"";
				colvarMcAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMcAccount);

				TableSchema.TableColumn colvarMsAccount = new TableSchema.TableColumn(schema);
				colvarMsAccount.ColumnName = "MsAccount";
				colvarMsAccount.DataType = DbType.DateTime;
				colvarMsAccount.MaxLength = 0;
				colvarMsAccount.AutoIncrement = false;
				colvarMsAccount.IsNullable = true;
				colvarMsAccount.IsPrimaryKey = false;
				colvarMsAccount.IsForeignKey = false;
				colvarMsAccount.IsReadOnly = false;
				colvarMsAccount.DefaultSetting = @"";
				colvarMsAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAccount);

				TableSchema.TableColumn colvarQlLead = new TableSchema.TableColumn(schema);
				colvarQlLead.ColumnName = "QlLead";
				colvarQlLead.DataType = DbType.DateTime;
				colvarQlLead.MaxLength = 0;
				colvarQlLead.AutoIncrement = false;
				colvarQlLead.IsNullable = true;
				colvarQlLead.IsPrimaryKey = false;
				colvarQlLead.IsForeignKey = false;
				colvarQlLead.IsReadOnly = false;
				colvarQlLead.DefaultSetting = @"";
				colvarQlLead.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQlLead);

				TableSchema.TableColumn colvarQlCreditReport = new TableSchema.TableColumn(schema);
				colvarQlCreditReport.ColumnName = "QlCreditReport";
				colvarQlCreditReport.DataType = DbType.DateTime;
				colvarQlCreditReport.MaxLength = 0;
				colvarQlCreditReport.AutoIncrement = false;
				colvarQlCreditReport.IsNullable = true;
				colvarQlCreditReport.IsPrimaryKey = false;
				colvarQlCreditReport.IsForeignKey = false;
				colvarQlCreditReport.IsReadOnly = false;
				colvarQlCreditReport.DefaultSetting = @"";
				colvarQlCreditReport.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQlCreditReport);

				TableSchema.TableColumn colvarAeCustomer = new TableSchema.TableColumn(schema);
				colvarAeCustomer.ColumnName = "AeCustomer";
				colvarAeCustomer.DataType = DbType.DateTime;
				colvarAeCustomer.MaxLength = 0;
				colvarAeCustomer.AutoIncrement = false;
				colvarAeCustomer.IsNullable = true;
				colvarAeCustomer.IsPrimaryKey = false;
				colvarAeCustomer.IsForeignKey = false;
				colvarAeCustomer.IsReadOnly = false;
				colvarAeCustomer.DefaultSetting = @"";
				colvarAeCustomer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAeCustomer);

				TableSchema.TableColumn colvarAeCustomerAccount = new TableSchema.TableColumn(schema);
				colvarAeCustomerAccount.ColumnName = "AeCustomerAccount";
				colvarAeCustomerAccount.DataType = DbType.DateTime;
				colvarAeCustomerAccount.MaxLength = 0;
				colvarAeCustomerAccount.AutoIncrement = false;
				colvarAeCustomerAccount.IsNullable = true;
				colvarAeCustomerAccount.IsPrimaryKey = false;
				colvarAeCustomerAccount.IsForeignKey = false;
				colvarAeCustomerAccount.IsReadOnly = false;
				colvarAeCustomerAccount.DefaultSetting = @"";
				colvarAeCustomerAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAeCustomerAccount);

				TableSchema.TableColumn colvarMsEmergencyContact = new TableSchema.TableColumn(schema);
				colvarMsEmergencyContact.ColumnName = "MsEmergencyContact";
				colvarMsEmergencyContact.DataType = DbType.DateTime;
				colvarMsEmergencyContact.MaxLength = 0;
				colvarMsEmergencyContact.AutoIncrement = false;
				colvarMsEmergencyContact.IsNullable = true;
				colvarMsEmergencyContact.IsPrimaryKey = false;
				colvarMsEmergencyContact.IsForeignKey = false;
				colvarMsEmergencyContact.IsReadOnly = false;
				colvarMsEmergencyContact.DefaultSetting = @"";
				colvarMsEmergencyContact.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsEmergencyContact);

				TableSchema.TableColumn colvarEquipmentSwung = new TableSchema.TableColumn(schema);
				colvarEquipmentSwung.ColumnName = "EquipmentSwung";
				colvarEquipmentSwung.DataType = DbType.DateTime;
				colvarEquipmentSwung.MaxLength = 0;
				colvarEquipmentSwung.AutoIncrement = false;
				colvarEquipmentSwung.IsNullable = true;
				colvarEquipmentSwung.IsPrimaryKey = false;
				colvarEquipmentSwung.IsForeignKey = false;
				colvarEquipmentSwung.IsReadOnly = false;
				colvarEquipmentSwung.DefaultSetting = @"";
				colvarEquipmentSwung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentSwung);

				TableSchema.TableColumn colvarSwingStatus = new TableSchema.TableColumn(schema);
				colvarSwingStatus.ColumnName = "SwingStatus";
				colvarSwingStatus.DataType = DbType.AnsiString;
				colvarSwingStatus.MaxLength = -1;
				colvarSwingStatus.AutoIncrement = false;
				colvarSwingStatus.IsNullable = true;
				colvarSwingStatus.IsPrimaryKey = false;
				colvarSwingStatus.IsForeignKey = false;
				colvarSwingStatus.IsReadOnly = false;
				colvarSwingStatus.DefaultSetting = @"";
				colvarSwingStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSwingStatus);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountSwungInfo",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountSwungInfo LoadFrom(MS_AccountSwungInfo item)
		{
			MS_AccountSwungInfo result = new MS_AccountSwungInfo();
			if (item.InterimAccountID != default(int)) {
				result.LoadByKey(item.InterimAccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int InterimAccountID {
			get { return GetColumnValue<int>(Columns.InterimAccountID); }
			set {
				SetColumnValue(Columns.InterimAccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InterimAccountID));
			}
		}
		[DataMember]
		public long? MsAccountID {
			get { return GetColumnValue<long?>(Columns.MsAccountID); }
			set {
				SetColumnValue(Columns.MsAccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MsAccountID));
			}
		}
		[DataMember]
		public long? CustomerMasterFileID {
			get { return GetColumnValue<long?>(Columns.CustomerMasterFileID); }
			set {
				SetColumnValue(Columns.CustomerMasterFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileID));
			}
		}
		[DataMember]
		public DateTime? CustomerMasterFile {
			get { return GetColumnValue<DateTime?>(Columns.CustomerMasterFile); }
			set {
				SetColumnValue(Columns.CustomerMasterFile, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFile));
			}
		}
		[DataMember]
		public DateTime? PremiseAddress {
			get { return GetColumnValue<DateTime?>(Columns.PremiseAddress); }
			set {
				SetColumnValue(Columns.PremiseAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PremiseAddress));
			}
		}
		[DataMember]
		public DateTime? McAccount {
			get { return GetColumnValue<DateTime?>(Columns.McAccount); }
			set {
				SetColumnValue(Columns.McAccount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.McAccount));
			}
		}
		[DataMember]
		public DateTime? MsAccount {
			get { return GetColumnValue<DateTime?>(Columns.MsAccount); }
			set {
				SetColumnValue(Columns.MsAccount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MsAccount));
			}
		}
		[DataMember]
		public DateTime? QlLead {
			get { return GetColumnValue<DateTime?>(Columns.QlLead); }
			set {
				SetColumnValue(Columns.QlLead, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QlLead));
			}
		}
		[DataMember]
		public DateTime? QlCreditReport {
			get { return GetColumnValue<DateTime?>(Columns.QlCreditReport); }
			set {
				SetColumnValue(Columns.QlCreditReport, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QlCreditReport));
			}
		}
		[DataMember]
		public DateTime? AeCustomer {
			get { return GetColumnValue<DateTime?>(Columns.AeCustomer); }
			set {
				SetColumnValue(Columns.AeCustomer, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AeCustomer));
			}
		}
		[DataMember]
		public DateTime? AeCustomerAccount {
			get { return GetColumnValue<DateTime?>(Columns.AeCustomerAccount); }
			set {
				SetColumnValue(Columns.AeCustomerAccount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AeCustomerAccount));
			}
		}
		[DataMember]
		public DateTime? MsEmergencyContact {
			get { return GetColumnValue<DateTime?>(Columns.MsEmergencyContact); }
			set {
				SetColumnValue(Columns.MsEmergencyContact, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MsEmergencyContact));
			}
		}
		[DataMember]
		public DateTime? EquipmentSwung {
			get { return GetColumnValue<DateTime?>(Columns.EquipmentSwung); }
			set {
				SetColumnValue(Columns.EquipmentSwung, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentSwung));
			}
		}
		[DataMember]
		public string SwingStatus {
			get { return GetColumnValue<string>(Columns.SwingStatus); }
			set {
				SetColumnValue(Columns.SwingStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SwingStatus));
			}
		}
		[DataMember]
		public DateTime? CreatedOn {
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return InterimAccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn InterimAccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MsAccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PremiseAddressColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn McAccountColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MsAccountColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn QlLeadColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn QlCreditReportColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AeCustomerColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn AeCustomerAccountColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn MsEmergencyContactColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn EquipmentSwungColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn SwingStatusColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string InterimAccountID = @"InterimAccountID";
			public static readonly string MsAccountID = @"MsAccountID";
			public static readonly string CustomerMasterFileID = @"CustomerMasterFileID";
			public static readonly string CustomerMasterFile = @"CustomerMasterFile";
			public static readonly string PremiseAddress = @"PremiseAddress";
			public static readonly string McAccount = @"McAccount";
			public static readonly string MsAccount = @"MsAccount";
			public static readonly string QlLead = @"QlLead";
			public static readonly string QlCreditReport = @"QlCreditReport";
			public static readonly string AeCustomer = @"AeCustomer";
			public static readonly string AeCustomerAccount = @"AeCustomerAccount";
			public static readonly string MsEmergencyContact = @"MsEmergencyContact";
			public static readonly string EquipmentSwung = @"EquipmentSwung";
			public static readonly string SwingStatus = @"SwingStatus";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return InterimAccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountSystemType class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSystemTypeCollection : ActiveList<MS_AccountSystemType, MS_AccountSystemTypeCollection>
	{
		public static MS_AccountSystemTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountSystemTypeCollection result = new MS_AccountSystemTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountSystemType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountSystemTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountSystemType : ActiveRecord<MS_AccountSystemType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Two_WayID = "2WAY";
			[EnumMember()] public const string Two_Way_Over_CellularID = "2WYCELL";
			[EnumMember()] public const string DigitalID = "DIGI";
			[EnumMember()] public const string Gps_CellularID = "GPSC";
			[EnumMember()] public const string Gps_TrackerID = "GPST";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountSystemType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountSystemTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSystemTypeID = new TableSchema.TableColumn(schema);
				colvarSystemTypeID.ColumnName = "SystemTypeID";
				colvarSystemTypeID.DataType = DbType.AnsiString;
				colvarSystemTypeID.MaxLength = 20;
				colvarSystemTypeID.AutoIncrement = false;
				colvarSystemTypeID.IsNullable = false;
				colvarSystemTypeID.IsPrimaryKey = true;
				colvarSystemTypeID.IsForeignKey = false;
				colvarSystemTypeID.IsReadOnly = false;
				colvarSystemTypeID.DefaultSetting = @"";
				colvarSystemTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeID);

				TableSchema.TableColumn colvarSystemTypeName = new TableSchema.TableColumn(schema);
				colvarSystemTypeName.ColumnName = "SystemTypeName";
				colvarSystemTypeName.DataType = DbType.AnsiString;
				colvarSystemTypeName.MaxLength = 50;
				colvarSystemTypeName.AutoIncrement = false;
				colvarSystemTypeName.IsNullable = false;
				colvarSystemTypeName.IsPrimaryKey = false;
				colvarSystemTypeName.IsForeignKey = false;
				colvarSystemTypeName.IsReadOnly = false;
				colvarSystemTypeName.DefaultSetting = @"";
				colvarSystemTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountSystemTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountSystemType LoadFrom(MS_AccountSystemType item)
		{
			MS_AccountSystemType result = new MS_AccountSystemType();
			if (item.SystemTypeID != default(string)) {
				result.LoadByKey(item.SystemTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string SystemTypeID {
			get { return GetColumnValue<string>(Columns.SystemTypeID); }
			set {
				SetColumnValue(Columns.SystemTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemTypeID));
			}
		}
		[DataMember]
		public string SystemTypeName {
			get { return GetColumnValue<string>(Columns.SystemTypeName); }
			set {
				SetColumnValue(Columns.SystemTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemTypeName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return SystemTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SystemTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SystemTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SystemTypeID = @"SystemTypeID";
			public static readonly string SystemTypeName = @"SystemTypeName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SystemTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountCollection _MS_AccountsCol;
		//Relationship: FK_MS_Accounts_MS_AccountSystemTypes
		public MS_AccountCollection MS_AccountsCol
		{
			get
			{
				if(_MS_AccountsCol == null) {
					_MS_AccountsCol = new MS_AccountCollection();
					_MS_AccountsCol.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.SystemTypeId, SystemTypeID).ExecuteReader());
				}
				return _MS_AccountsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountZoneAssignment class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountZoneAssignmentCollection : ActiveList<MS_AccountZoneAssignment, MS_AccountZoneAssignmentCollection>
	{
		public static MS_AccountZoneAssignmentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountZoneAssignmentCollection result = new MS_AccountZoneAssignmentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountZoneAssignment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountZoneAssignments table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountZoneAssignment : ActiveRecord<MS_AccountZoneAssignment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountZoneAssignment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountZoneAssignments", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountZoneAssignmentID = new TableSchema.TableColumn(schema);
				colvarAccountZoneAssignmentID.ColumnName = "AccountZoneAssignmentID";
				colvarAccountZoneAssignmentID.DataType = DbType.Int64;
				colvarAccountZoneAssignmentID.MaxLength = 0;
				colvarAccountZoneAssignmentID.AutoIncrement = true;
				colvarAccountZoneAssignmentID.IsNullable = false;
				colvarAccountZoneAssignmentID.IsPrimaryKey = true;
				colvarAccountZoneAssignmentID.IsForeignKey = false;
				colvarAccountZoneAssignmentID.IsReadOnly = false;
				colvarAccountZoneAssignmentID.DefaultSetting = @"";
				colvarAccountZoneAssignmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountZoneAssignmentID);

				TableSchema.TableColumn colvarAccountEquipmentId = new TableSchema.TableColumn(schema);
				colvarAccountEquipmentId.ColumnName = "AccountEquipmentId";
				colvarAccountEquipmentId.DataType = DbType.Int64;
				colvarAccountEquipmentId.MaxLength = 0;
				colvarAccountEquipmentId.AutoIncrement = false;
				colvarAccountEquipmentId.IsNullable = false;
				colvarAccountEquipmentId.IsPrimaryKey = false;
				colvarAccountEquipmentId.IsForeignKey = true;
				colvarAccountEquipmentId.IsReadOnly = false;
				colvarAccountEquipmentId.DefaultSetting = @"";
				colvarAccountEquipmentId.ForeignKeyTableName = "MS_AccountEquipment";
				schema.Columns.Add(colvarAccountEquipmentId);

				TableSchema.TableColumn colvarAccountZoneTypeId = new TableSchema.TableColumn(schema);
				colvarAccountZoneTypeId.ColumnName = "AccountZoneTypeId";
				colvarAccountZoneTypeId.DataType = DbType.AnsiString;
				colvarAccountZoneTypeId.MaxLength = 10;
				colvarAccountZoneTypeId.AutoIncrement = false;
				colvarAccountZoneTypeId.IsNullable = true;
				colvarAccountZoneTypeId.IsPrimaryKey = false;
				colvarAccountZoneTypeId.IsForeignKey = true;
				colvarAccountZoneTypeId.IsReadOnly = false;
				colvarAccountZoneTypeId.DefaultSetting = @"";
				colvarAccountZoneTypeId.ForeignKeyTableName = "MS_AccountZoneTypes";
				schema.Columns.Add(colvarAccountZoneTypeId);

				TableSchema.TableColumn colvarAccountEventId = new TableSchema.TableColumn(schema);
				colvarAccountEventId.ColumnName = "AccountEventId";
				colvarAccountEventId.DataType = DbType.Int32;
				colvarAccountEventId.MaxLength = 0;
				colvarAccountEventId.AutoIncrement = false;
				colvarAccountEventId.IsNullable = true;
				colvarAccountEventId.IsPrimaryKey = false;
				colvarAccountEventId.IsForeignKey = true;
				colvarAccountEventId.IsReadOnly = false;
				colvarAccountEventId.DefaultSetting = @"";
				colvarAccountEventId.ForeignKeyTableName = "MS_AccountEvents";
				schema.Columns.Add(colvarAccountEventId);

				TableSchema.TableColumn colvarZone = new TableSchema.TableColumn(schema);
				colvarZone.ColumnName = "Zone";
				colvarZone.DataType = DbType.AnsiString;
				colvarZone.MaxLength = 3;
				colvarZone.AutoIncrement = false;
				colvarZone.IsNullable = true;
				colvarZone.IsPrimaryKey = false;
				colvarZone.IsForeignKey = false;
				colvarZone.IsReadOnly = false;
				colvarZone.DefaultSetting = @"";
				colvarZone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZone);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarIsExisting = new TableSchema.TableColumn(schema);
				colvarIsExisting.ColumnName = "IsExisting";
				colvarIsExisting.DataType = DbType.Boolean;
				colvarIsExisting.MaxLength = 0;
				colvarIsExisting.AutoIncrement = false;
				colvarIsExisting.IsNullable = false;
				colvarIsExisting.IsPrimaryKey = false;
				colvarIsExisting.IsForeignKey = false;
				colvarIsExisting.IsReadOnly = false;
				colvarIsExisting.DefaultSetting = @"((0))";
				colvarIsExisting.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExisting);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountZoneAssignments",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountZoneAssignment LoadFrom(MS_AccountZoneAssignment item)
		{
			MS_AccountZoneAssignment result = new MS_AccountZoneAssignment();
			if (item.AccountZoneAssignmentID != default(long)) {
				result.LoadByKey(item.AccountZoneAssignmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountZoneAssignmentID {
			get { return GetColumnValue<long>(Columns.AccountZoneAssignmentID); }
			set {
				SetColumnValue(Columns.AccountZoneAssignmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountZoneAssignmentID));
			}
		}
		[DataMember]
		public long AccountEquipmentId {
			get { return GetColumnValue<long>(Columns.AccountEquipmentId); }
			set {
				SetColumnValue(Columns.AccountEquipmentId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountEquipmentId));
			}
		}
		[DataMember]
		public string AccountZoneTypeId {
			get { return GetColumnValue<string>(Columns.AccountZoneTypeId); }
			set {
				SetColumnValue(Columns.AccountZoneTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountZoneTypeId));
			}
		}
		[DataMember]
		public int? AccountEventId {
			get { return GetColumnValue<int?>(Columns.AccountEventId); }
			set {
				SetColumnValue(Columns.AccountEventId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountEventId));
			}
		}
		[DataMember]
		public string Zone {
			get { return GetColumnValue<string>(Columns.Zone); }
			set {
				SetColumnValue(Columns.Zone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Zone));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}
		[DataMember]
		public bool IsExisting {
			get { return GetColumnValue<bool>(Columns.IsExisting); }
			set {
				SetColumnValue(Columns.IsExisting, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsExisting));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AccountEquipment _AccountEquipment;
		//Relationship: FK_MS_AccountZoneAssignments_MS_AccountEquipment
		public MS_AccountEquipment AccountEquipment
		{
			get
			{
				if(_AccountEquipment == null) {
					_AccountEquipment = MS_AccountEquipment.FetchByID(this.AccountEquipmentId);
				}
				return _AccountEquipment;
			}
			set
			{
				SetColumnValue("AccountEquipmentId", value.AccountEquipmentID);
				_AccountEquipment = value;
			}
		}

		private MS_AccountEvent _AccountEvent;
		//Relationship: FK_MS_AccountZoneAssignments_MS_AccountEvents
		public MS_AccountEvent AccountEvent
		{
			get
			{
				if(_AccountEvent == null) {
					_AccountEvent = MS_AccountEvent.FetchByID(this.AccountEventId);
				}
				return _AccountEvent;
			}
			set
			{
				SetColumnValue("AccountEventId", value.AccountEventID);
				_AccountEvent = value;
			}
		}

		private MS_AccountZoneType _AccountZoneType;
		//Relationship: FK_MS_AccountZoneAssignments_MS_AccountZoneTypes
		public MS_AccountZoneType AccountZoneType
		{
			get
			{
				if(_AccountZoneType == null) {
					_AccountZoneType = MS_AccountZoneType.FetchByID(this.AccountZoneTypeId);
				}
				return _AccountZoneType;
			}
			set
			{
				SetColumnValue("AccountZoneTypeId", value.AccountZoneTypeID);
				_AccountZoneType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountZoneAssignmentID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountZoneAssignmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountEquipmentIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountZoneTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountEventIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ZoneColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsExistingColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountZoneAssignmentID = @"AccountZoneAssignmentID";
			public static readonly string AccountEquipmentId = @"AccountEquipmentId";
			public static readonly string AccountZoneTypeId = @"AccountZoneTypeId";
			public static readonly string AccountEventId = @"AccountEventId";
			public static readonly string Zone = @"Zone";
			public static readonly string Comments = @"Comments";
			public static readonly string IsExisting = @"IsExisting";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountZoneAssignmentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AccountZoneType class.
	/// </summary>
	[DataContract]
	public partial class MS_AccountZoneTypeCollection : ActiveList<MS_AccountZoneType, MS_AccountZoneTypeCollection>
	{
		public static MS_AccountZoneTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AccountZoneTypeCollection result = new MS_AccountZoneTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AccountZoneType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AccountZoneTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_AccountZoneType : ActiveRecord<MS_AccountZoneType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string FireID = "FIRE";
			[EnumMember()] public const string MedicalID = "MEDICAL";
			[EnumMember()] public const string No_ZoneID = "NOZONE";
			[EnumMember()] public const string PanelID = "PANEL";
			[EnumMember()] public const string PoliceID = "POLICE";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AccountZoneType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AccountZoneTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountZoneTypeID = new TableSchema.TableColumn(schema);
				colvarAccountZoneTypeID.ColumnName = "AccountZoneTypeID";
				colvarAccountZoneTypeID.DataType = DbType.AnsiString;
				colvarAccountZoneTypeID.MaxLength = 10;
				colvarAccountZoneTypeID.AutoIncrement = false;
				colvarAccountZoneTypeID.IsNullable = false;
				colvarAccountZoneTypeID.IsPrimaryKey = true;
				colvarAccountZoneTypeID.IsForeignKey = false;
				colvarAccountZoneTypeID.IsReadOnly = false;
				colvarAccountZoneTypeID.DefaultSetting = @"";
				colvarAccountZoneTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountZoneTypeID);

				TableSchema.TableColumn colvarAccountZoneType = new TableSchema.TableColumn(schema);
				colvarAccountZoneType.ColumnName = "AccountZoneType";
				colvarAccountZoneType.DataType = DbType.AnsiString;
				colvarAccountZoneType.MaxLength = 50;
				colvarAccountZoneType.AutoIncrement = false;
				colvarAccountZoneType.IsNullable = false;
				colvarAccountZoneType.IsPrimaryKey = false;
				colvarAccountZoneType.IsForeignKey = false;
				colvarAccountZoneType.IsReadOnly = false;
				colvarAccountZoneType.DefaultSetting = @"";
				colvarAccountZoneType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountZoneType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AccountZoneTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AccountZoneType LoadFrom(MS_AccountZoneType item)
		{
			MS_AccountZoneType result = new MS_AccountZoneType();
			if (item.AccountZoneTypeID != default(string)) {
				result.LoadByKey(item.AccountZoneTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AccountZoneTypeID {
			get { return GetColumnValue<string>(Columns.AccountZoneTypeID); }
			set {
				SetColumnValue(Columns.AccountZoneTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountZoneTypeID));
			}
		}
		[DataMember]
		public string AccountZoneType {
			get { return GetColumnValue<string>(Columns.AccountZoneType); }
			set {
				SetColumnValue(Columns.AccountZoneType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountZoneType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountZoneType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountZoneTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountZoneTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountZoneTypeID = @"AccountZoneTypeID";
			public static readonly string AccountZoneType = @"AccountZoneType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountZoneTypeID; }
		}
		*/

		#region Foreign Collections

		private AE_ItemCollection _AE_ItemsCol;
		//Relationship: FK_AE_Items_MS_AccountZoneTypes
		public AE_ItemCollection AE_ItemsCol
		{
			get
			{
				if(_AE_ItemsCol == null) {
					_AE_ItemsCol = new AE_ItemCollection();
					_AE_ItemsCol.LoadAndCloseReader(AE_Item.Query()
						.WHERE(AE_Item.Columns.AccountZoneTypeId, AccountZoneTypeID).ExecuteReader());
				}
				return _AE_ItemsCol;
			}
		}

		private AE_ITEMS_NEWCollection _AE_ITEMS_NEWSCol;
		//Relationship: FK_AE_ITEMS_NEW_MS_AccountZoneTypes
		public AE_ITEMS_NEWCollection AE_ITEMS_NEWSCol
		{
			get
			{
				if(_AE_ITEMS_NEWSCol == null) {
					_AE_ITEMS_NEWSCol = new AE_ITEMS_NEWCollection();
					_AE_ITEMS_NEWSCol.LoadAndCloseReader(AE_ITEMS_NEW.Query()
						.WHERE(AE_ITEMS_NEW.Columns.AccountZoneTypeId, AccountZoneTypeID).ExecuteReader());
				}
				return _AE_ITEMS_NEWSCol;
			}
		}

		private MS_AccountZoneAssignmentCollection _MS_AccountZoneAssignmentsCol;
		//Relationship: FK_MS_AccountZoneAssignments_MS_AccountZoneTypes
		public MS_AccountZoneAssignmentCollection MS_AccountZoneAssignmentsCol
		{
			get
			{
				if(_MS_AccountZoneAssignmentsCol == null) {
					_MS_AccountZoneAssignmentsCol = new MS_AccountZoneAssignmentCollection();
					_MS_AccountZoneAssignmentsCol.LoadAndCloseReader(MS_AccountZoneAssignment.Query()
						.WHERE(MS_AccountZoneAssignment.Columns.AccountZoneTypeId, AccountZoneTypeID).ExecuteReader());
				}
				return _MS_AccountZoneAssignmentsCol;
			}
		}

		private MS_EquipmentAccountZoneTypeCollection _MS_EquipmentAccountZoneTypesCol;
		//Relationship: FK_MS_EquipmentAccountZoneTypes_MS_AccountZoneTypes
		public MS_EquipmentAccountZoneTypeCollection MS_EquipmentAccountZoneTypesCol
		{
			get
			{
				if(_MS_EquipmentAccountZoneTypesCol == null) {
					_MS_EquipmentAccountZoneTypesCol = new MS_EquipmentAccountZoneTypeCollection();
					_MS_EquipmentAccountZoneTypesCol.LoadAndCloseReader(MS_EquipmentAccountZoneType.Query()
						.WHERE(MS_EquipmentAccountZoneType.Columns.AccountZoneTypeId, AccountZoneTypeID).ExecuteReader());
				}
				return _MS_EquipmentAccountZoneTypesCol;
			}
		}

		private MS_EquipmentCollection _MS_EquipmentsCol;
		//Relationship: FK_MS_Equipments_MS_AccountZoneTypes
		public MS_EquipmentCollection MS_EquipmentsCol
		{
			get
			{
				if(_MS_EquipmentsCol == null) {
					_MS_EquipmentsCol = new MS_EquipmentCollection();
					_MS_EquipmentsCol.LoadAndCloseReader(MS_Equipment.Query()
						.WHERE(MS_Equipment.Columns.AccountZoneTypeId, AccountZoneTypeID).ExecuteReader());
				}
				return _MS_EquipmentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AvantGuardAccountState class.
	/// </summary>
	[DataContract]
	public partial class MS_AvantGuardAccountStateCollection : ActiveList<MS_AvantGuardAccountState, MS_AvantGuardAccountStateCollection>
	{
		public static MS_AvantGuardAccountStateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AvantGuardAccountStateCollection result = new MS_AvantGuardAccountStateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AvantGuardAccountState item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AvantGuardAccountState table.
	/// </summary>
	[DataContract]
	public partial class MS_AvantGuardAccountState : ActiveRecord<MS_AvantGuardAccountState>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AvantGuardAccountState()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AvantGuardAccountState", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarTwoWayTestStartedOn = new TableSchema.TableColumn(schema);
				colvarTwoWayTestStartedOn.ColumnName = "TwoWayTestStartedOn";
				colvarTwoWayTestStartedOn.DataType = DbType.DateTime;
				colvarTwoWayTestStartedOn.MaxLength = 0;
				colvarTwoWayTestStartedOn.AutoIncrement = false;
				colvarTwoWayTestStartedOn.IsNullable = true;
				colvarTwoWayTestStartedOn.IsPrimaryKey = false;
				colvarTwoWayTestStartedOn.IsForeignKey = false;
				colvarTwoWayTestStartedOn.IsReadOnly = false;
				colvarTwoWayTestStartedOn.DefaultSetting = @"";
				colvarTwoWayTestStartedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTwoWayTestStartedOn);

				TableSchema.TableColumn colvarConfirmedOn = new TableSchema.TableColumn(schema);
				colvarConfirmedOn.ColumnName = "ConfirmedOn";
				colvarConfirmedOn.DataType = DbType.DateTime;
				colvarConfirmedOn.MaxLength = 0;
				colvarConfirmedOn.AutoIncrement = false;
				colvarConfirmedOn.IsNullable = true;
				colvarConfirmedOn.IsPrimaryKey = false;
				colvarConfirmedOn.IsForeignKey = false;
				colvarConfirmedOn.IsReadOnly = false;
				colvarConfirmedOn.DefaultSetting = @"";
				colvarConfirmedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConfirmedOn);

				TableSchema.TableColumn colvarConfirmedBy = new TableSchema.TableColumn(schema);
				colvarConfirmedBy.ColumnName = "ConfirmedBy";
				colvarConfirmedBy.DataType = DbType.String;
				colvarConfirmedBy.MaxLength = 50;
				colvarConfirmedBy.AutoIncrement = false;
				colvarConfirmedBy.IsNullable = true;
				colvarConfirmedBy.IsPrimaryKey = false;
				colvarConfirmedBy.IsForeignKey = false;
				colvarConfirmedBy.IsReadOnly = false;
				colvarConfirmedBy.DefaultSetting = @"";
				colvarConfirmedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConfirmedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AvantGuardAccountState",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AvantGuardAccountState LoadFrom(MS_AvantGuardAccountState item)
		{
			MS_AvantGuardAccountState result = new MS_AvantGuardAccountState();
			if (item.AccountID != default(long)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public DateTime? TwoWayTestStartedOn {
			get { return GetColumnValue<DateTime?>(Columns.TwoWayTestStartedOn); }
			set {
				SetColumnValue(Columns.TwoWayTestStartedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TwoWayTestStartedOn));
			}
		}
		[DataMember]
		public DateTime? ConfirmedOn {
			get { return GetColumnValue<DateTime?>(Columns.ConfirmedOn); }
			set {
				SetColumnValue(Columns.ConfirmedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ConfirmedOn));
			}
		}
		[DataMember]
		public string ConfirmedBy {
			get { return GetColumnValue<string>(Columns.ConfirmedBy); }
			set {
				SetColumnValue(Columns.ConfirmedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ConfirmedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Account _Account;
		//Relationship: FK_MS_AvantGuardAccountState_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountID);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountID", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TwoWayTestStartedOnColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ConfirmedOnColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ConfirmedByColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string TwoWayTestStartedOn = @"TwoWayTestStartedOn";
			public static readonly string ConfirmedOn = @"ConfirmedOn";
			public static readonly string ConfirmedBy = @"ConfirmedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AvantGuardEventCode class.
	/// </summary>
	[DataContract]
	public partial class MS_AvantGuardEventCodeCollection : ActiveList<MS_AvantGuardEventCode, MS_AvantGuardEventCodeCollection>
	{
		public static MS_AvantGuardEventCodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AvantGuardEventCodeCollection result = new MS_AvantGuardEventCodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AvantGuardEventCode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AvantGuardEventCodes table.
	/// </summary>
	[DataContract]
	public partial class MS_AvantGuardEventCode : ActiveRecord<MS_AvantGuardEventCode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AvantGuardEventCode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AvantGuardEventCodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAGEventID = new TableSchema.TableColumn(schema);
				colvarAGEventID.ColumnName = "AGEventID";
				colvarAGEventID.DataType = DbType.Int32;
				colvarAGEventID.MaxLength = 0;
				colvarAGEventID.AutoIncrement = true;
				colvarAGEventID.IsNullable = false;
				colvarAGEventID.IsPrimaryKey = true;
				colvarAGEventID.IsForeignKey = false;
				colvarAGEventID.IsReadOnly = false;
				colvarAGEventID.DefaultSetting = @"";
				colvarAGEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAGEventID);

				TableSchema.TableColumn colvarevent_id = new TableSchema.TableColumn(schema);
				colvarevent_id.ColumnName = "event_id";
				colvarevent_id.DataType = DbType.AnsiString;
				colvarevent_id.MaxLength = 50;
				colvarevent_id.AutoIncrement = false;
				colvarevent_id.IsNullable = false;
				colvarevent_id.IsPrimaryKey = false;
				colvarevent_id.IsForeignKey = false;
				colvarevent_id.IsReadOnly = false;
				colvarevent_id.DefaultSetting = @"";
				colvarevent_id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarevent_id);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AvantGuardEventCodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AvantGuardEventCode LoadFrom(MS_AvantGuardEventCode item)
		{
			MS_AvantGuardEventCode result = new MS_AvantGuardEventCode();
			if (item.AGEventID != default(int)) {
				result.LoadByKey(item.AGEventID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AGEventID {
			get { return GetColumnValue<int>(Columns.AGEventID); }
			set {
				SetColumnValue(Columns.AGEventID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AGEventID));
			}
		}
		[DataMember]
		public string event_id {
			get { return GetColumnValue<string>(Columns.event_id); }
			set {
				SetColumnValue(Columns.event_id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.event_id));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return event_id;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AGEventIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn event_idColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AGEventID = @"AGEventID";
			public static readonly string event_id = @"event_id";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AGEventID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountEventCollection _MS_AccountEventsCol;
		//Relationship: FK_MS_AccountEvent_MS_AvantGuardEventCodes
		public MS_AccountEventCollection MS_AccountEventsCol
		{
			get
			{
				if(_MS_AccountEventsCol == null) {
					_MS_AccountEventsCol = new MS_AccountEventCollection();
					_MS_AccountEventsCol.LoadAndCloseReader(MS_AccountEvent.Query()
						.WHERE(MS_AccountEvent.Columns.AvantGuardEventId, AGEventID).ExecuteReader());
				}
				return _MS_AccountEventsCol;
			}
		}

		private MS_EquipmentTypeEventTypeCollection _MS_EquipmentTypeEventTypesCol;
		//Relationship: FK_MS_EquipmentTypeEventTypes_MS_AvantGuardEventCodes
		public MS_EquipmentTypeEventTypeCollection MS_EquipmentTypeEventTypesCol
		{
			get
			{
				if(_MS_EquipmentTypeEventTypesCol == null) {
					_MS_EquipmentTypeEventTypesCol = new MS_EquipmentTypeEventTypeCollection();
					_MS_EquipmentTypeEventTypesCol.LoadAndCloseReader(MS_EquipmentTypeEventType.Query()
						.WHERE(MS_EquipmentTypeEventType.Columns.AGEventId, AGEventID).ExecuteReader());
				}
				return _MS_EquipmentTypeEventTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_AvantGuardRelation class.
	/// </summary>
	[DataContract]
	public partial class MS_AvantGuardRelationCollection : ActiveList<MS_AvantGuardRelation, MS_AvantGuardRelationCollection>
	{
		public static MS_AvantGuardRelationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AvantGuardRelationCollection result = new MS_AvantGuardRelationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AvantGuardRelation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AvantGuardRelations table.
	/// </summary>
	[DataContract]
	public partial class MS_AvantGuardRelation : ActiveRecord<MS_AvantGuardRelation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AvantGuardRelation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AvantGuardRelations", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRelationID = new TableSchema.TableColumn(schema);
				colvarRelationID.ColumnName = "RelationID";
				colvarRelationID.DataType = DbType.String;
				colvarRelationID.MaxLength = 50;
				colvarRelationID.AutoIncrement = false;
				colvarRelationID.IsNullable = false;
				colvarRelationID.IsPrimaryKey = true;
				colvarRelationID.IsForeignKey = false;
				colvarRelationID.IsReadOnly = false;
				colvarRelationID.DefaultSetting = @"";
				colvarRelationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRelationID);

				TableSchema.TableColumn colvarRelationship = new TableSchema.TableColumn(schema);
				colvarRelationship.ColumnName = "Relationship";
				colvarRelationship.DataType = DbType.String;
				colvarRelationship.MaxLength = 50;
				colvarRelationship.AutoIncrement = false;
				colvarRelationship.IsNullable = false;
				colvarRelationship.IsPrimaryKey = false;
				colvarRelationship.IsForeignKey = false;
				colvarRelationship.IsReadOnly = false;
				colvarRelationship.DefaultSetting = @"";
				colvarRelationship.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRelationship);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AvantGuardRelations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AvantGuardRelation LoadFrom(MS_AvantGuardRelation item)
		{
			MS_AvantGuardRelation result = new MS_AvantGuardRelation();
			if (item.RelationID != default(string)) {
				result.LoadByKey(item.RelationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string RelationID {
			get { return GetColumnValue<string>(Columns.RelationID); }
			set {
				SetColumnValue(Columns.RelationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RelationID));
			}
		}
		[DataMember]
		public string Relationship {
			get { return GetColumnValue<string>(Columns.Relationship); }
			set {
				SetColumnValue(Columns.Relationship, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Relationship));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Relationship;
		}

		#region Typed Columns

		public static TableSchema.TableColumn RelationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RelationshipColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RelationID = @"RelationID";
			public static readonly string Relationship = @"Relationship";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RelationID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AvantGuardSystemTypeCode class.
	/// </summary>
	[DataContract]
	public partial class MS_AvantGuardSystemTypeCodeCollection : ActiveList<MS_AvantGuardSystemTypeCode, MS_AvantGuardSystemTypeCodeCollection>
	{
		public static MS_AvantGuardSystemTypeCodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AvantGuardSystemTypeCodeCollection result = new MS_AvantGuardSystemTypeCodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AvantGuardSystemTypeCode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AvantGuardSystemTypeCodes table.
	/// </summary>
	[DataContract]
	public partial class MS_AvantGuardSystemTypeCode : ActiveRecord<MS_AvantGuardSystemTypeCode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AvantGuardSystemTypeCode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AvantGuardSystemTypeCodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAvantGuardSystemTypeID = new TableSchema.TableColumn(schema);
				colvarAvantGuardSystemTypeID.ColumnName = "AvantGuardSystemTypeID";
				colvarAvantGuardSystemTypeID.DataType = DbType.Int32;
				colvarAvantGuardSystemTypeID.MaxLength = 0;
				colvarAvantGuardSystemTypeID.AutoIncrement = true;
				colvarAvantGuardSystemTypeID.IsNullable = false;
				colvarAvantGuardSystemTypeID.IsPrimaryKey = true;
				colvarAvantGuardSystemTypeID.IsForeignKey = false;
				colvarAvantGuardSystemTypeID.IsReadOnly = false;
				colvarAvantGuardSystemTypeID.DefaultSetting = @"";
				colvarAvantGuardSystemTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAvantGuardSystemTypeID);

				TableSchema.TableColumn colvarItemId = new TableSchema.TableColumn(schema);
				colvarItemId.ColumnName = "ItemId";
				colvarItemId.DataType = DbType.AnsiString;
				colvarItemId.MaxLength = 50;
				colvarItemId.AutoIncrement = false;
				colvarItemId.IsNullable = false;
				colvarItemId.IsPrimaryKey = false;
				colvarItemId.IsForeignKey = true;
				colvarItemId.IsReadOnly = false;
				colvarItemId.DefaultSetting = @"";
				colvarItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarItemId);

				TableSchema.TableColumn colvarSystemTypeName = new TableSchema.TableColumn(schema);
				colvarSystemTypeName.ColumnName = "SystemTypeName";
				colvarSystemTypeName.DataType = DbType.String;
				colvarSystemTypeName.MaxLength = 50;
				colvarSystemTypeName.AutoIncrement = false;
				colvarSystemTypeName.IsNullable = false;
				colvarSystemTypeName.IsPrimaryKey = false;
				colvarSystemTypeName.IsForeignKey = false;
				colvarSystemTypeName.IsReadOnly = false;
				colvarSystemTypeName.DefaultSetting = @"";
				colvarSystemTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeName);

				TableSchema.TableColumn colvarSystemType_Id = new TableSchema.TableColumn(schema);
				colvarSystemType_Id.ColumnName = "SystemType_Id";
				colvarSystemType_Id.DataType = DbType.AnsiString;
				colvarSystemType_Id.MaxLength = 10;
				colvarSystemType_Id.AutoIncrement = false;
				colvarSystemType_Id.IsNullable = false;
				colvarSystemType_Id.IsPrimaryKey = false;
				colvarSystemType_Id.IsForeignKey = false;
				colvarSystemType_Id.IsReadOnly = false;
				colvarSystemType_Id.DefaultSetting = @"";
				colvarSystemType_Id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemType_Id);

				TableSchema.TableColumn colvarIsTwoWay = new TableSchema.TableColumn(schema);
				colvarIsTwoWay.ColumnName = "IsTwoWay";
				colvarIsTwoWay.DataType = DbType.Boolean;
				colvarIsTwoWay.MaxLength = 0;
				colvarIsTwoWay.AutoIncrement = false;
				colvarIsTwoWay.IsNullable = true;
				colvarIsTwoWay.IsPrimaryKey = false;
				colvarIsTwoWay.IsForeignKey = false;
				colvarIsTwoWay.IsReadOnly = false;
				colvarIsTwoWay.DefaultSetting = @"";
				colvarIsTwoWay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTwoWay);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AvantGuardSystemTypeCodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AvantGuardSystemTypeCode LoadFrom(MS_AvantGuardSystemTypeCode item)
		{
			MS_AvantGuardSystemTypeCode result = new MS_AvantGuardSystemTypeCode();
			if (item.AvantGuardSystemTypeID != default(int)) {
				result.LoadByKey(item.AvantGuardSystemTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AvantGuardSystemTypeID {
			get { return GetColumnValue<int>(Columns.AvantGuardSystemTypeID); }
			set {
				SetColumnValue(Columns.AvantGuardSystemTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AvantGuardSystemTypeID));
			}
		}
		[DataMember]
		public string ItemId {
			get { return GetColumnValue<string>(Columns.ItemId); }
			set {
				SetColumnValue(Columns.ItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemId));
			}
		}
		[DataMember]
		public string SystemTypeName {
			get { return GetColumnValue<string>(Columns.SystemTypeName); }
			set {
				SetColumnValue(Columns.SystemTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemTypeName));
			}
		}
		[DataMember]
		public string SystemType_Id {
			get { return GetColumnValue<string>(Columns.SystemType_Id); }
			set {
				SetColumnValue(Columns.SystemType_Id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemType_Id));
			}
		}
		[DataMember]
		public bool? IsTwoWay {
			get { return GetColumnValue<bool?>(Columns.IsTwoWay); }
			set {
				SetColumnValue(Columns.IsTwoWay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTwoWay));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Item _Item;
		//Relationship: FK_MS_AvantGuardSystemTypeCodes_AE_Items
		public AE_Item Item
		{
			get
			{
				if(_Item == null) {
					_Item = AE_Item.FetchByID(this.ItemId);
				}
				return _Item;
			}
			set
			{
				SetColumnValue("ItemId", value.ItemID);
				_Item = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ItemId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AvantGuardSystemTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ItemIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SystemTypeNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SystemType_IdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsTwoWayColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AvantGuardSystemTypeID = @"AvantGuardSystemTypeID";
			public static readonly string ItemId = @"ItemId";
			public static readonly string SystemTypeName = @"SystemTypeName";
			public static readonly string SystemType_Id = @"SystemType_Id";
			public static readonly string IsTwoWay = @"IsTwoWay";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AvantGuardSystemTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_AvantGuardTestCategory class.
	/// </summary>
	[DataContract]
	public partial class MS_AvantGuardTestCategoryCollection : ActiveList<MS_AvantGuardTestCategory, MS_AvantGuardTestCategoryCollection>
	{
		public static MS_AvantGuardTestCategoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_AvantGuardTestCategoryCollection result = new MS_AvantGuardTestCategoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_AvantGuardTestCategory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_AvantGuardTestCategories table.
	/// </summary>
	[DataContract]
	public partial class MS_AvantGuardTestCategory : ActiveRecord<MS_AvantGuardTestCategory>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_AvantGuardTestCategory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_AvantGuardTestCategories", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAGTestCategoryID = new TableSchema.TableColumn(schema);
				colvarAGTestCategoryID.ColumnName = "AGTestCategoryID";
				colvarAGTestCategoryID.DataType = DbType.Int32;
				colvarAGTestCategoryID.MaxLength = 0;
				colvarAGTestCategoryID.AutoIncrement = false;
				colvarAGTestCategoryID.IsNullable = false;
				colvarAGTestCategoryID.IsPrimaryKey = true;
				colvarAGTestCategoryID.IsForeignKey = false;
				colvarAGTestCategoryID.IsReadOnly = false;
				colvarAGTestCategoryID.DefaultSetting = @"";
				colvarAGTestCategoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAGTestCategoryID);

				TableSchema.TableColumn colvarcatg_id = new TableSchema.TableColumn(schema);
				colvarcatg_id.ColumnName = "catg_id";
				colvarcatg_id.DataType = DbType.AnsiString;
				colvarcatg_id.MaxLength = 10;
				colvarcatg_id.AutoIncrement = false;
				colvarcatg_id.IsNullable = false;
				colvarcatg_id.IsPrimaryKey = false;
				colvarcatg_id.IsForeignKey = false;
				colvarcatg_id.IsReadOnly = false;
				colvarcatg_id.DefaultSetting = @"";
				colvarcatg_id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarcatg_id);

				TableSchema.TableColumn colvarDescr = new TableSchema.TableColumn(schema);
				colvarDescr.ColumnName = "Descr";
				colvarDescr.DataType = DbType.String;
				colvarDescr.MaxLength = 50;
				colvarDescr.AutoIncrement = false;
				colvarDescr.IsNullable = false;
				colvarDescr.IsPrimaryKey = false;
				colvarDescr.IsForeignKey = false;
				colvarDescr.IsReadOnly = false;
				colvarDescr.DefaultSetting = @"";
				colvarDescr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescr);

				TableSchema.TableColumn colvardefault_hours = new TableSchema.TableColumn(schema);
				colvardefault_hours.ColumnName = "default_hours";
				colvardefault_hours.DataType = DbType.Int16;
				colvardefault_hours.MaxLength = 0;
				colvardefault_hours.AutoIncrement = false;
				colvardefault_hours.IsNullable = true;
				colvardefault_hours.IsPrimaryKey = false;
				colvardefault_hours.IsForeignKey = false;
				colvardefault_hours.IsReadOnly = false;
				colvardefault_hours.DefaultSetting = @"";
				colvardefault_hours.ForeignKeyTableName = "";
				schema.Columns.Add(colvardefault_hours);

				TableSchema.TableColumn colvardefault_minutes = new TableSchema.TableColumn(schema);
				colvardefault_minutes.ColumnName = "default_minutes";
				colvardefault_minutes.DataType = DbType.Int16;
				colvardefault_minutes.MaxLength = 0;
				colvardefault_minutes.AutoIncrement = false;
				colvardefault_minutes.IsNullable = true;
				colvardefault_minutes.IsPrimaryKey = false;
				colvardefault_minutes.IsForeignKey = false;
				colvardefault_minutes.IsReadOnly = false;
				colvardefault_minutes.DefaultSetting = @"";
				colvardefault_minutes.ForeignKeyTableName = "";
				schema.Columns.Add(colvardefault_minutes);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_AvantGuardTestCategories",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_AvantGuardTestCategory LoadFrom(MS_AvantGuardTestCategory item)
		{
			MS_AvantGuardTestCategory result = new MS_AvantGuardTestCategory();
			if (item.AGTestCategoryID != default(int)) {
				result.LoadByKey(item.AGTestCategoryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AGTestCategoryID {
			get { return GetColumnValue<int>(Columns.AGTestCategoryID); }
			set {
				SetColumnValue(Columns.AGTestCategoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AGTestCategoryID));
			}
		}
		[DataMember]
		public string catg_id {
			get { return GetColumnValue<string>(Columns.catg_id); }
			set {
				SetColumnValue(Columns.catg_id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.catg_id));
			}
		}
		[DataMember]
		public string Descr {
			get { return GetColumnValue<string>(Columns.Descr); }
			set {
				SetColumnValue(Columns.Descr, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Descr));
			}
		}
		[DataMember]
		public short? default_hours {
			get { return GetColumnValue<short?>(Columns.default_hours); }
			set {
				SetColumnValue(Columns.default_hours, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.default_hours));
			}
		}
		[DataMember]
		public short? default_minutes {
			get { return GetColumnValue<short?>(Columns.default_minutes); }
			set {
				SetColumnValue(Columns.default_minutes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.default_minutes));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return catg_id;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AGTestCategoryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn catg_idColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DescrColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn default_hoursColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn default_minutesColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AGTestCategoryID = @"AGTestCategoryID";
			public static readonly string catg_id = @"catg_id";
			public static readonly string Descr = @"Descr";
			public static readonly string default_hours = @"default_hours";
			public static readonly string default_minutes = @"default_minutes";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AGTestCategoryID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_Dealer class.
	/// </summary>
	[DataContract]
	public partial class MS_DealerCollection : ActiveList<MS_Dealer, MS_DealerCollection>
	{
		public static MS_DealerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_DealerCollection result = new MS_DealerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_Dealer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_Dealers table.
	/// </summary>
	[DataContract]
	public partial class MS_Dealer : ActiveRecord<MS_Dealer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_Dealer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_Dealers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDealerID = new TableSchema.TableColumn(schema);
				colvarDealerID.ColumnName = "DealerID";
				colvarDealerID.DataType = DbType.Int32;
				colvarDealerID.MaxLength = 0;
				colvarDealerID.AutoIncrement = false;
				colvarDealerID.IsNullable = false;
				colvarDealerID.IsPrimaryKey = true;
				colvarDealerID.IsForeignKey = false;
				colvarDealerID.IsReadOnly = false;
				colvarDealerID.DefaultSetting = @"";
				colvarDealerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerID);

				TableSchema.TableColumn colvarMoniServiceNo = new TableSchema.TableColumn(schema);
				colvarMoniServiceNo.ColumnName = "MoniServiceNo";
				colvarMoniServiceNo.DataType = DbType.AnsiString;
				colvarMoniServiceNo.MaxLength = 30;
				colvarMoniServiceNo.AutoIncrement = false;
				colvarMoniServiceNo.IsNullable = true;
				colvarMoniServiceNo.IsPrimaryKey = false;
				colvarMoniServiceNo.IsForeignKey = false;
				colvarMoniServiceNo.IsReadOnly = false;
				colvarMoniServiceNo.DefaultSetting = @"";
				colvarMoniServiceNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoniServiceNo);

				TableSchema.TableColumn colvarMoniInstallServiceNo = new TableSchema.TableColumn(schema);
				colvarMoniInstallServiceNo.ColumnName = "MoniInstallServiceNo";
				colvarMoniInstallServiceNo.DataType = DbType.AnsiString;
				colvarMoniInstallServiceNo.MaxLength = 30;
				colvarMoniInstallServiceNo.AutoIncrement = false;
				colvarMoniInstallServiceNo.IsNullable = true;
				colvarMoniInstallServiceNo.IsPrimaryKey = false;
				colvarMoniInstallServiceNo.IsForeignKey = false;
				colvarMoniInstallServiceNo.IsReadOnly = false;
				colvarMoniInstallServiceNo.DefaultSetting = @"";
				colvarMoniInstallServiceNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoniInstallServiceNo);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_Dealers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_Dealer LoadFrom(MS_Dealer item)
		{
			MS_Dealer result = new MS_Dealer();
			if (item.DealerID != default(int)) {
				result.LoadByKey(item.DealerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DealerID {
			get { return GetColumnValue<int>(Columns.DealerID); }
			set {
				SetColumnValue(Columns.DealerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerID));
			}
		}
		[DataMember]
		public string MoniServiceNo {
			get { return GetColumnValue<string>(Columns.MoniServiceNo); }
			set {
				SetColumnValue(Columns.MoniServiceNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MoniServiceNo));
			}
		}
		[DataMember]
		public string MoniInstallServiceNo {
			get { return GetColumnValue<string>(Columns.MoniInstallServiceNo); }
			set {
				SetColumnValue(Columns.MoniInstallServiceNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MoniInstallServiceNo));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Dealer _Dealer;
		//Relationship: FK_MS_Dealers_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerID);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerID", value.DealerID);
				_Dealer = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MoniServiceNo;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DealerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MoniServiceNoColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MoniInstallServiceNoColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DealerID = @"DealerID";
			public static readonly string MoniServiceNo = @"MoniServiceNo";
			public static readonly string MoniInstallServiceNo = @"MoniInstallServiceNo";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DealerID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_DeviceEvent class.
	/// </summary>
	[DataContract]
	public partial class MS_DeviceEventCollection : ActiveList<MS_DeviceEvent, MS_DeviceEventCollection>
	{
		public static MS_DeviceEventCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_DeviceEventCollection result = new MS_DeviceEventCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_DeviceEvent item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_DeviceEvents table.
	/// </summary>
	[DataContract]
	public partial class MS_DeviceEvent : ActiveRecord<MS_DeviceEvent>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_DeviceEvent()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_DeviceEvents", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEventID = new TableSchema.TableColumn(schema);
				colvarEventID.ColumnName = "EventID";
				colvarEventID.DataType = DbType.Int64;
				colvarEventID.MaxLength = 0;
				colvarEventID.AutoIncrement = true;
				colvarEventID.IsNullable = false;
				colvarEventID.IsPrimaryKey = true;
				colvarEventID.IsForeignKey = false;
				colvarEventID.IsReadOnly = false;
				colvarEventID.DefaultSetting = @"";
				colvarEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"((100164))";
				colvarAccountId.ForeignKeyTableName = "MS_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarDeviceNumber = new TableSchema.TableColumn(schema);
				colvarDeviceNumber.ColumnName = "DeviceNumber";
				colvarDeviceNumber.DataType = DbType.AnsiString;
				colvarDeviceNumber.MaxLength = 20;
				colvarDeviceNumber.AutoIncrement = false;
				colvarDeviceNumber.IsNullable = true;
				colvarDeviceNumber.IsPrimaryKey = false;
				colvarDeviceNumber.IsForeignKey = false;
				colvarDeviceNumber.IsReadOnly = false;
				colvarDeviceNumber.DefaultSetting = @"";
				colvarDeviceNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeviceNumber);

				TableSchema.TableColumn colvarEmergencyType = new TableSchema.TableColumn(schema);
				colvarEmergencyType.ColumnName = "EmergencyType";
				colvarEmergencyType.DataType = DbType.AnsiString;
				colvarEmergencyType.MaxLength = 20;
				colvarEmergencyType.AutoIncrement = false;
				colvarEmergencyType.IsNullable = true;
				colvarEmergencyType.IsPrimaryKey = false;
				colvarEmergencyType.IsForeignKey = false;
				colvarEmergencyType.IsReadOnly = false;
				colvarEmergencyType.DefaultSetting = @"";
				colvarEmergencyType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyType);

				TableSchema.TableColumn colvarURL = new TableSchema.TableColumn(schema);
				colvarURL.ColumnName = "URL";
				colvarURL.DataType = DbType.String;
				colvarURL.MaxLength = 500;
				colvarURL.AutoIncrement = false;
				colvarURL.IsNullable = true;
				colvarURL.IsPrimaryKey = false;
				colvarURL.IsForeignKey = false;
				colvarURL.IsReadOnly = false;
				colvarURL.DefaultSetting = @"";
				colvarURL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarURL);

				TableSchema.TableColumn colvarSuccessfull = new TableSchema.TableColumn(schema);
				colvarSuccessfull.ColumnName = "Successfull";
				colvarSuccessfull.DataType = DbType.Boolean;
				colvarSuccessfull.MaxLength = 0;
				colvarSuccessfull.AutoIncrement = false;
				colvarSuccessfull.IsNullable = false;
				colvarSuccessfull.IsPrimaryKey = false;
				colvarSuccessfull.IsForeignKey = false;
				colvarSuccessfull.IsReadOnly = false;
				colvarSuccessfull.DefaultSetting = @"((1))";
				colvarSuccessfull.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuccessfull);

				TableSchema.TableColumn colvarServerName = new TableSchema.TableColumn(schema);
				colvarServerName.ColumnName = "ServerName";
				colvarServerName.DataType = DbType.String;
				colvarServerName.MaxLength = 50;
				colvarServerName.AutoIncrement = false;
				colvarServerName.IsNullable = false;
				colvarServerName.IsPrimaryKey = false;
				colvarServerName.IsForeignKey = false;
				colvarServerName.IsReadOnly = false;
				colvarServerName.DefaultSetting = @"(N'NOTSET')";
				colvarServerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServerName);

				TableSchema.TableColumn colvarRequest = new TableSchema.TableColumn(schema);
				colvarRequest.ColumnName = "Request";
				colvarRequest.DataType = DbType.String;
				colvarRequest.MaxLength = -1;
				colvarRequest.AutoIncrement = false;
				colvarRequest.IsNullable = false;
				colvarRequest.IsPrimaryKey = false;
				colvarRequest.IsForeignKey = false;
				colvarRequest.IsReadOnly = false;
				colvarRequest.DefaultSetting = @"";
				colvarRequest.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequest);

				TableSchema.TableColumn colvarResponse = new TableSchema.TableColumn(schema);
				colvarResponse.ColumnName = "Response";
				colvarResponse.DataType = DbType.String;
				colvarResponse.MaxLength = -1;
				colvarResponse.AutoIncrement = false;
				colvarResponse.IsNullable = false;
				colvarResponse.IsPrimaryKey = false;
				colvarResponse.IsForeignKey = false;
				colvarResponse.IsReadOnly = false;
				colvarResponse.DefaultSetting = @"";
				colvarResponse.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResponse);

				TableSchema.TableColumn colvarMonitoringStationSuccessfull = new TableSchema.TableColumn(schema);
				colvarMonitoringStationSuccessfull.ColumnName = "MonitoringStationSuccessfull";
				colvarMonitoringStationSuccessfull.DataType = DbType.Boolean;
				colvarMonitoringStationSuccessfull.MaxLength = 0;
				colvarMonitoringStationSuccessfull.AutoIncrement = false;
				colvarMonitoringStationSuccessfull.IsNullable = false;
				colvarMonitoringStationSuccessfull.IsPrimaryKey = false;
				colvarMonitoringStationSuccessfull.IsForeignKey = false;
				colvarMonitoringStationSuccessfull.IsReadOnly = false;
				colvarMonitoringStationSuccessfull.DefaultSetting = @"((1))";
				colvarMonitoringStationSuccessfull.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationSuccessfull);

				TableSchema.TableColumn colvarMonitoringStationResponse = new TableSchema.TableColumn(schema);
				colvarMonitoringStationResponse.ColumnName = "MonitoringStationResponse";
				colvarMonitoringStationResponse.DataType = DbType.String;
				colvarMonitoringStationResponse.MaxLength = 500;
				colvarMonitoringStationResponse.AutoIncrement = false;
				colvarMonitoringStationResponse.IsNullable = true;
				colvarMonitoringStationResponse.IsPrimaryKey = false;
				colvarMonitoringStationResponse.IsForeignKey = false;
				colvarMonitoringStationResponse.IsReadOnly = false;
				colvarMonitoringStationResponse.DefaultSetting = @"";
				colvarMonitoringStationResponse.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationResponse);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_DeviceEvents",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_DeviceEvent LoadFrom(MS_DeviceEvent item)
		{
			MS_DeviceEvent result = new MS_DeviceEvent();
			if (item.EventID != default(long)) {
				result.LoadByKey(item.EventID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long EventID {
			get { return GetColumnValue<long>(Columns.EventID); }
			set {
				SetColumnValue(Columns.EventID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventID));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public string DeviceNumber {
			get { return GetColumnValue<string>(Columns.DeviceNumber); }
			set {
				SetColumnValue(Columns.DeviceNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DeviceNumber));
			}
		}
		[DataMember]
		public string EmergencyType {
			get { return GetColumnValue<string>(Columns.EmergencyType); }
			set {
				SetColumnValue(Columns.EmergencyType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyType));
			}
		}
		[DataMember]
		public string URL {
			get { return GetColumnValue<string>(Columns.URL); }
			set {
				SetColumnValue(Columns.URL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.URL));
			}
		}
		[DataMember]
		public bool Successfull {
			get { return GetColumnValue<bool>(Columns.Successfull); }
			set {
				SetColumnValue(Columns.Successfull, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Successfull));
			}
		}
		[DataMember]
		public string ServerName {
			get { return GetColumnValue<string>(Columns.ServerName); }
			set {
				SetColumnValue(Columns.ServerName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServerName));
			}
		}
		[DataMember]
		public string Request {
			get { return GetColumnValue<string>(Columns.Request); }
			set {
				SetColumnValue(Columns.Request, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Request));
			}
		}
		[DataMember]
		public string Response {
			get { return GetColumnValue<string>(Columns.Response); }
			set {
				SetColumnValue(Columns.Response, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Response));
			}
		}
		[DataMember]
		public bool MonitoringStationSuccessfull {
			get { return GetColumnValue<bool>(Columns.MonitoringStationSuccessfull); }
			set {
				SetColumnValue(Columns.MonitoringStationSuccessfull, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationSuccessfull));
			}
		}
		[DataMember]
		public string MonitoringStationResponse {
			get { return GetColumnValue<string>(Columns.MonitoringStationResponse); }
			set {
				SetColumnValue(Columns.MonitoringStationResponse, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationResponse));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Account _Account;
		//Relationship: FK_MS_DeviceEvents_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EventID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn EventIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DeviceNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn EmergencyTypeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn URLColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SuccessfullColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ServerNameColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn RequestColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ResponseColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn MonitoringStationSuccessfullColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn MonitoringStationResponseColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[14]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EventID = @"EventID";
			public static readonly string AccountId = @"AccountId";
			public static readonly string DeviceNumber = @"DeviceNumber";
			public static readonly string EmergencyType = @"EmergencyType";
			public static readonly string URL = @"URL";
			public static readonly string Successfull = @"Successfull";
			public static readonly string ServerName = @"ServerName";
			public static readonly string Request = @"Request";
			public static readonly string Response = @"Response";
			public static readonly string MonitoringStationSuccessfull = @"MonitoringStationSuccessfull";
			public static readonly string MonitoringStationResponse = @"MonitoringStationResponse";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EventID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_DispatchAgency class.
	/// </summary>
	[DataContract]
	public partial class MS_DispatchAgencyCollection : ActiveList<MS_DispatchAgency, MS_DispatchAgencyCollection>
	{
		public static MS_DispatchAgencyCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_DispatchAgencyCollection result = new MS_DispatchAgencyCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_DispatchAgency item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_DispatchAgencies table.
	/// </summary>
	[DataContract]
	public partial class MS_DispatchAgency : ActiveRecord<MS_DispatchAgency>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_DispatchAgency()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_DispatchAgencies", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDispatchAgencyID = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyID.ColumnName = "DispatchAgencyID";
				colvarDispatchAgencyID.DataType = DbType.Int32;
				colvarDispatchAgencyID.MaxLength = 0;
				colvarDispatchAgencyID.AutoIncrement = true;
				colvarDispatchAgencyID.IsNullable = false;
				colvarDispatchAgencyID.IsPrimaryKey = true;
				colvarDispatchAgencyID.IsForeignKey = false;
				colvarDispatchAgencyID.IsReadOnly = false;
				colvarDispatchAgencyID.DefaultSetting = @"";
				colvarDispatchAgencyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyID);

				TableSchema.TableColumn colvarDispatchAgencyTypeId = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyTypeId.ColumnName = "DispatchAgencyTypeId";
				colvarDispatchAgencyTypeId.DataType = DbType.Byte;
				colvarDispatchAgencyTypeId.MaxLength = 0;
				colvarDispatchAgencyTypeId.AutoIncrement = false;
				colvarDispatchAgencyTypeId.IsNullable = false;
				colvarDispatchAgencyTypeId.IsPrimaryKey = false;
				colvarDispatchAgencyTypeId.IsForeignKey = true;
				colvarDispatchAgencyTypeId.IsReadOnly = false;
				colvarDispatchAgencyTypeId.DefaultSetting = @"";
				colvarDispatchAgencyTypeId.ForeignKeyTableName = "MS_DispatchAgencyTypes";
				schema.Columns.Add(colvarDispatchAgencyTypeId);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = true;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"";
				colvarMonitoringStationOSId.ForeignKeyTableName = "MS_MonitoringStationOSs";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarDispatchAgencyOsId = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyOsId.ColumnName = "DispatchAgencyOsId";
				colvarDispatchAgencyOsId.DataType = DbType.Int32;
				colvarDispatchAgencyOsId.MaxLength = 0;
				colvarDispatchAgencyOsId.AutoIncrement = false;
				colvarDispatchAgencyOsId.IsNullable = false;
				colvarDispatchAgencyOsId.IsPrimaryKey = false;
				colvarDispatchAgencyOsId.IsForeignKey = false;
				colvarDispatchAgencyOsId.IsReadOnly = false;
				colvarDispatchAgencyOsId.DefaultSetting = @"";
				colvarDispatchAgencyOsId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyOsId);

				TableSchema.TableColumn colvarDispatchAgencyName = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyName.ColumnName = "DispatchAgencyName";
				colvarDispatchAgencyName.DataType = DbType.String;
				colvarDispatchAgencyName.MaxLength = 100;
				colvarDispatchAgencyName.AutoIncrement = false;
				colvarDispatchAgencyName.IsNullable = false;
				colvarDispatchAgencyName.IsPrimaryKey = false;
				colvarDispatchAgencyName.IsForeignKey = false;
				colvarDispatchAgencyName.IsReadOnly = false;
				colvarDispatchAgencyName.DefaultSetting = @"('AG_ALARMSYS')";
				colvarDispatchAgencyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyName);

				TableSchema.TableColumn colvarMsAgencyNumber = new TableSchema.TableColumn(schema);
				colvarMsAgencyNumber.ColumnName = "MsAgencyNumber";
				colvarMsAgencyNumber.DataType = DbType.AnsiString;
				colvarMsAgencyNumber.MaxLength = 50;
				colvarMsAgencyNumber.AutoIncrement = false;
				colvarMsAgencyNumber.IsNullable = false;
				colvarMsAgencyNumber.IsPrimaryKey = false;
				colvarMsAgencyNumber.IsForeignKey = false;
				colvarMsAgencyNumber.IsReadOnly = false;
				colvarMsAgencyNumber.DefaultSetting = @"";
				colvarMsAgencyNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAgencyNumber);

				TableSchema.TableColumn colvarAddress1 = new TableSchema.TableColumn(schema);
				colvarAddress1.ColumnName = "Address1";
				colvarAddress1.DataType = DbType.String;
				colvarAddress1.MaxLength = 100;
				colvarAddress1.AutoIncrement = false;
				colvarAddress1.IsNullable = true;
				colvarAddress1.IsPrimaryKey = false;
				colvarAddress1.IsForeignKey = false;
				colvarAddress1.IsReadOnly = false;
				colvarAddress1.DefaultSetting = @"";
				colvarAddress1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress1);

				TableSchema.TableColumn colvarAddress2 = new TableSchema.TableColumn(schema);
				colvarAddress2.ColumnName = "Address2";
				colvarAddress2.DataType = DbType.String;
				colvarAddress2.MaxLength = 100;
				colvarAddress2.AutoIncrement = false;
				colvarAddress2.IsNullable = true;
				colvarAddress2.IsPrimaryKey = false;
				colvarAddress2.IsForeignKey = false;
				colvarAddress2.IsReadOnly = false;
				colvarAddress2.DefaultSetting = @"";
				colvarAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "State";
				colvarState.DataType = DbType.AnsiString;
				colvarState.MaxLength = 2;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = true;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				colvarState.DefaultSetting = @"";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.String;
				colvarZipCode.MaxLength = 10;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = true;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarPhone1 = new TableSchema.TableColumn(schema);
				colvarPhone1.ColumnName = "Phone1";
				colvarPhone1.DataType = DbType.String;
				colvarPhone1.MaxLength = 15;
				colvarPhone1.AutoIncrement = false;
				colvarPhone1.IsNullable = true;
				colvarPhone1.IsPrimaryKey = false;
				colvarPhone1.IsForeignKey = false;
				colvarPhone1.IsReadOnly = false;
				colvarPhone1.DefaultSetting = @"";
				colvarPhone1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone1);

				TableSchema.TableColumn colvarPhone2 = new TableSchema.TableColumn(schema);
				colvarPhone2.ColumnName = "Phone2";
				colvarPhone2.DataType = DbType.String;
				colvarPhone2.MaxLength = 15;
				colvarPhone2.AutoIncrement = false;
				colvarPhone2.IsNullable = true;
				colvarPhone2.IsPrimaryKey = false;
				colvarPhone2.IsForeignKey = false;
				colvarPhone2.IsReadOnly = false;
				colvarPhone2.DefaultSetting = @"";
				colvarPhone2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone2);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_DispatchAgencies",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_DispatchAgency LoadFrom(MS_DispatchAgency item)
		{
			MS_DispatchAgency result = new MS_DispatchAgency();
			if (item.DispatchAgencyID != default(int)) {
				result.LoadByKey(item.DispatchAgencyID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DispatchAgencyID {
			get { return GetColumnValue<int>(Columns.DispatchAgencyID); }
			set {
				SetColumnValue(Columns.DispatchAgencyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyID));
			}
		}
		[DataMember]
		public byte DispatchAgencyTypeId {
			get { return GetColumnValue<byte>(Columns.DispatchAgencyTypeId); }
			set {
				SetColumnValue(Columns.DispatchAgencyTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyTypeId));
			}
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set {
				SetColumnValue(Columns.MonitoringStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSId));
			}
		}
		[DataMember]
		public int DispatchAgencyOsId {
			get { return GetColumnValue<int>(Columns.DispatchAgencyOsId); }
			set {
				SetColumnValue(Columns.DispatchAgencyOsId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyOsId));
			}
		}
		[DataMember]
		public string DispatchAgencyName {
			get { return GetColumnValue<string>(Columns.DispatchAgencyName); }
			set {
				SetColumnValue(Columns.DispatchAgencyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyName));
			}
		}
		[DataMember]
		public string MsAgencyNumber {
			get { return GetColumnValue<string>(Columns.MsAgencyNumber); }
			set {
				SetColumnValue(Columns.MsAgencyNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MsAgencyNumber));
			}
		}
		[DataMember]
		public string Address1 {
			get { return GetColumnValue<string>(Columns.Address1); }
			set {
				SetColumnValue(Columns.Address1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Address1));
			}
		}
		[DataMember]
		public string Address2 {
			get { return GetColumnValue<string>(Columns.Address2); }
			set {
				SetColumnValue(Columns.Address2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Address2));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string State {
			get { return GetColumnValue<string>(Columns.State); }
			set {
				SetColumnValue(Columns.State, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.State));
			}
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set {
				SetColumnValue(Columns.ZipCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZipCode));
			}
		}
		[DataMember]
		public string Phone1 {
			get { return GetColumnValue<string>(Columns.Phone1); }
			set {
				SetColumnValue(Columns.Phone1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone1));
			}
		}
		[DataMember]
		public string Phone2 {
			get { return GetColumnValue<string>(Columns.Phone2); }
			set {
				SetColumnValue(Columns.Phone2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone2));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_DispatchAgencyType _DispatchAgencyType;
		//Relationship: FK_MS_DispatchAgencies_MS_DispatchAgencyTypes
		public MS_DispatchAgencyType DispatchAgencyType
		{
			get
			{
				if(_DispatchAgencyType == null) {
					_DispatchAgencyType = MS_DispatchAgencyType.FetchByID(this.DispatchAgencyTypeId);
				}
				return _DispatchAgencyType;
			}
			set
			{
				SetColumnValue("DispatchAgencyTypeId", value.DispatchAgencyTypeID);
				_DispatchAgencyType = value;
			}
		}

		private MS_MonitoringStationOss _MonitoringStationOS;
		//Relationship: FK_MS_DispatchAgencies_MS_MonitoringStationOSs
		public MS_MonitoringStationOss MonitoringStationOS
		{
			get
			{
				if(_MonitoringStationOS == null) {
					_MonitoringStationOS = MS_MonitoringStationOss.FetchByID(this.MonitoringStationOSId);
				}
				return _MonitoringStationOS;
			}
			set
			{
				SetColumnValue("MonitoringStationOSId", value.MonitoringStationOSID);
				_MonitoringStationOS = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return DispatchAgencyID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn DispatchAgencyIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DispatchAgencyTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DispatchAgencyOsIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DispatchAgencyNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MsAgencyNumberColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn Address1Column
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn Address2Column
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn StateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn Phone1Column
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn Phone2Column
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[18]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DispatchAgencyID = @"DispatchAgencyID";
			public static readonly string DispatchAgencyTypeId = @"DispatchAgencyTypeId";
			public static readonly string MonitoringStationOSId = @"MonitoringStationOSId";
			public static readonly string DispatchAgencyOsId = @"DispatchAgencyOsId";
			public static readonly string DispatchAgencyName = @"DispatchAgencyName";
			public static readonly string MsAgencyNumber = @"MsAgencyNumber";
			public static readonly string Address1 = @"Address1";
			public static readonly string Address2 = @"Address2";
			public static readonly string City = @"City";
			public static readonly string State = @"State";
			public static readonly string ZipCode = @"ZipCode";
			public static readonly string Phone1 = @"Phone1";
			public static readonly string Phone2 = @"Phone2";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DispatchAgencyID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountDispatchAgencyAssignmentCollection _MS_AccountDispatchAgencyAssignmentsCol;
		//Relationship: FK_MS_AccountDispatchAgencyAssignments_MS_DispatchAgencies
		public MS_AccountDispatchAgencyAssignmentCollection MS_AccountDispatchAgencyAssignmentsCol
		{
			get
			{
				if(_MS_AccountDispatchAgencyAssignmentsCol == null) {
					_MS_AccountDispatchAgencyAssignmentsCol = new MS_AccountDispatchAgencyAssignmentCollection();
					_MS_AccountDispatchAgencyAssignmentsCol.LoadAndCloseReader(MS_AccountDispatchAgencyAssignment.Query()
						.WHERE(MS_AccountDispatchAgencyAssignment.Columns.DispatchAgencyId, DispatchAgencyID).ExecuteReader());
				}
				return _MS_AccountDispatchAgencyAssignmentsCol;
			}
		}

		private MS_DispatchAgencyCityZipLookupCollection _MS_DispatchAgencyCityZipLookupsCol;
		//Relationship: FK_MS_DispatchAgencyCityZipLookups_MS_DispatchAgencies
		public MS_DispatchAgencyCityZipLookupCollection MS_DispatchAgencyCityZipLookupsCol
		{
			get
			{
				if(_MS_DispatchAgencyCityZipLookupsCol == null) {
					_MS_DispatchAgencyCityZipLookupsCol = new MS_DispatchAgencyCityZipLookupCollection();
					_MS_DispatchAgencyCityZipLookupsCol.LoadAndCloseReader(MS_DispatchAgencyCityZipLookup.Query()
						.WHERE(MS_DispatchAgencyCityZipLookup.Columns.DispatchAgencyId, DispatchAgencyID).ExecuteReader());
				}
				return _MS_DispatchAgencyCityZipLookupsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_DispatchAgencyCityZipLookup class.
	/// </summary>
	[DataContract]
	public partial class MS_DispatchAgencyCityZipLookupCollection : ActiveList<MS_DispatchAgencyCityZipLookup, MS_DispatchAgencyCityZipLookupCollection>
	{
		public static MS_DispatchAgencyCityZipLookupCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_DispatchAgencyCityZipLookupCollection result = new MS_DispatchAgencyCityZipLookupCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_DispatchAgencyCityZipLookup item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_DispatchAgencyCityZipLookups table.
	/// </summary>
	[DataContract]
	public partial class MS_DispatchAgencyCityZipLookup : ActiveRecord<MS_DispatchAgencyCityZipLookup>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_DispatchAgencyCityZipLookup()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_DispatchAgencyCityZipLookups", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLookupID = new TableSchema.TableColumn(schema);
				colvarLookupID.ColumnName = "LookupID";
				colvarLookupID.DataType = DbType.Int32;
				colvarLookupID.MaxLength = 0;
				colvarLookupID.AutoIncrement = true;
				colvarLookupID.IsNullable = false;
				colvarLookupID.IsPrimaryKey = true;
				colvarLookupID.IsForeignKey = false;
				colvarLookupID.IsReadOnly = false;
				colvarLookupID.DefaultSetting = @"";
				colvarLookupID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLookupID);

				TableSchema.TableColumn colvarCityZipId = new TableSchema.TableColumn(schema);
				colvarCityZipId.ColumnName = "CityZipId";
				colvarCityZipId.DataType = DbType.Int32;
				colvarCityZipId.MaxLength = 0;
				colvarCityZipId.AutoIncrement = false;
				colvarCityZipId.IsNullable = true;
				colvarCityZipId.IsPrimaryKey = false;
				colvarCityZipId.IsForeignKey = true;
				colvarCityZipId.IsReadOnly = false;
				colvarCityZipId.DefaultSetting = @"";
				colvarCityZipId.ForeignKeyTableName = "MS_DispatchAgencyCityZips";
				schema.Columns.Add(colvarCityZipId);

				TableSchema.TableColumn colvarDispatchAgencyId = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyId.ColumnName = "DispatchAgencyId";
				colvarDispatchAgencyId.DataType = DbType.Int32;
				colvarDispatchAgencyId.MaxLength = 0;
				colvarDispatchAgencyId.AutoIncrement = false;
				colvarDispatchAgencyId.IsNullable = false;
				colvarDispatchAgencyId.IsPrimaryKey = false;
				colvarDispatchAgencyId.IsForeignKey = true;
				colvarDispatchAgencyId.IsReadOnly = false;
				colvarDispatchAgencyId.DefaultSetting = @"";
				colvarDispatchAgencyId.ForeignKeyTableName = "MS_DispatchAgencies";
				schema.Columns.Add(colvarDispatchAgencyId);

				TableSchema.TableColumn colvarDispatchAgencyTypeId = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyTypeId.ColumnName = "DispatchAgencyTypeId";
				colvarDispatchAgencyTypeId.DataType = DbType.Byte;
				colvarDispatchAgencyTypeId.MaxLength = 0;
				colvarDispatchAgencyTypeId.AutoIncrement = false;
				colvarDispatchAgencyTypeId.IsNullable = false;
				colvarDispatchAgencyTypeId.IsPrimaryKey = false;
				colvarDispatchAgencyTypeId.IsForeignKey = true;
				colvarDispatchAgencyTypeId.IsReadOnly = false;
				colvarDispatchAgencyTypeId.DefaultSetting = @"";
				colvarDispatchAgencyTypeId.ForeignKeyTableName = "MS_DispatchAgencyTypes";
				schema.Columns.Add(colvarDispatchAgencyTypeId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_DispatchAgencyCityZipLookups",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_DispatchAgencyCityZipLookup LoadFrom(MS_DispatchAgencyCityZipLookup item)
		{
			MS_DispatchAgencyCityZipLookup result = new MS_DispatchAgencyCityZipLookup();
			if (item.LookupID != default(int)) {
				result.LoadByKey(item.LookupID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int LookupID {
			get { return GetColumnValue<int>(Columns.LookupID); }
			set {
				SetColumnValue(Columns.LookupID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LookupID));
			}
		}
		[DataMember]
		public int? CityZipId {
			get { return GetColumnValue<int?>(Columns.CityZipId); }
			set {
				SetColumnValue(Columns.CityZipId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CityZipId));
			}
		}
		[DataMember]
		public int DispatchAgencyId {
			get { return GetColumnValue<int>(Columns.DispatchAgencyId); }
			set {
				SetColumnValue(Columns.DispatchAgencyId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyId));
			}
		}
		[DataMember]
		public byte DispatchAgencyTypeId {
			get { return GetColumnValue<byte>(Columns.DispatchAgencyTypeId); }
			set {
				SetColumnValue(Columns.DispatchAgencyTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyTypeId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_DispatchAgency _DispatchAgency;
		//Relationship: FK_MS_DispatchAgencyCityZipLookups_MS_DispatchAgencies
		public MS_DispatchAgency DispatchAgency
		{
			get
			{
				if(_DispatchAgency == null) {
					_DispatchAgency = MS_DispatchAgency.FetchByID(this.DispatchAgencyId);
				}
				return _DispatchAgency;
			}
			set
			{
				SetColumnValue("DispatchAgencyId", value.DispatchAgencyID);
				_DispatchAgency = value;
			}
		}

		private MS_DispatchAgencyCityZip _CityZip;
		//Relationship: FK_MS_DispatchAgencyCityZipLookups_MS_DispatchAgencyCityZips
		public MS_DispatchAgencyCityZip CityZip
		{
			get
			{
				if(_CityZip == null) {
					_CityZip = MS_DispatchAgencyCityZip.FetchByID(this.CityZipId);
				}
				return _CityZip;
			}
			set
			{
				SetColumnValue("CityZipId", value.CityZipID);
				_CityZip = value;
			}
		}

		private MS_DispatchAgencyType _DispatchAgencyType;
		//Relationship: FK_MS_DispatchAgencyCityZipLookups_MS_DispatchAgencyTypes
		public MS_DispatchAgencyType DispatchAgencyType
		{
			get
			{
				if(_DispatchAgencyType == null) {
					_DispatchAgencyType = MS_DispatchAgencyType.FetchByID(this.DispatchAgencyTypeId);
				}
				return _DispatchAgencyType;
			}
			set
			{
				SetColumnValue("DispatchAgencyTypeId", value.DispatchAgencyTypeID);
				_DispatchAgencyType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return LookupID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LookupIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CityZipIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DispatchAgencyIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DispatchAgencyTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LookupID = @"LookupID";
			public static readonly string CityZipId = @"CityZipId";
			public static readonly string DispatchAgencyId = @"DispatchAgencyId";
			public static readonly string DispatchAgencyTypeId = @"DispatchAgencyTypeId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LookupID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_DispatchAgencyCityZip class.
	/// </summary>
	[DataContract]
	public partial class MS_DispatchAgencyCityZipCollection : ActiveList<MS_DispatchAgencyCityZip, MS_DispatchAgencyCityZipCollection>
	{
		public static MS_DispatchAgencyCityZipCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_DispatchAgencyCityZipCollection result = new MS_DispatchAgencyCityZipCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_DispatchAgencyCityZip item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_DispatchAgencyCityZips table.
	/// </summary>
	[DataContract]
	public partial class MS_DispatchAgencyCityZip : ActiveRecord<MS_DispatchAgencyCityZip>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_DispatchAgencyCityZip()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_DispatchAgencyCityZips", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCityZipID = new TableSchema.TableColumn(schema);
				colvarCityZipID.ColumnName = "CityZipID";
				colvarCityZipID.DataType = DbType.Int32;
				colvarCityZipID.MaxLength = 0;
				colvarCityZipID.AutoIncrement = false;
				colvarCityZipID.IsNullable = false;
				colvarCityZipID.IsPrimaryKey = true;
				colvarCityZipID.IsForeignKey = false;
				colvarCityZipID.IsReadOnly = false;
				colvarCityZipID.DefaultSetting = @"";
				colvarCityZipID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCityZipID);

				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "State";
				colvarState.DataType = DbType.AnsiString;
				colvarState.MaxLength = 2;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = false;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				colvarState.DefaultSetting = @"";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);

				TableSchema.TableColumn colvarCountyName = new TableSchema.TableColumn(schema);
				colvarCountyName.ColumnName = "CountyName";
				colvarCountyName.DataType = DbType.AnsiString;
				colvarCountyName.MaxLength = 100;
				colvarCountyName.AutoIncrement = false;
				colvarCountyName.IsNullable = false;
				colvarCountyName.IsPrimaryKey = false;
				colvarCountyName.IsForeignKey = false;
				colvarCountyName.IsReadOnly = false;
				colvarCountyName.DefaultSetting = @"";
				colvarCountyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountyName);

				TableSchema.TableColumn colvarCityName = new TableSchema.TableColumn(schema);
				colvarCityName.ColumnName = "CityName";
				colvarCityName.DataType = DbType.AnsiString;
				colvarCityName.MaxLength = 100;
				colvarCityName.AutoIncrement = false;
				colvarCityName.IsNullable = false;
				colvarCityName.IsPrimaryKey = false;
				colvarCityName.IsForeignKey = false;
				colvarCityName.IsReadOnly = false;
				colvarCityName.DefaultSetting = @"";
				colvarCityName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCityName);

				TableSchema.TableColumn colvarZip = new TableSchema.TableColumn(schema);
				colvarZip.ColumnName = "Zip";
				colvarZip.DataType = DbType.AnsiString;
				colvarZip.MaxLength = 15;
				colvarZip.AutoIncrement = false;
				colvarZip.IsNullable = false;
				colvarZip.IsPrimaryKey = false;
				colvarZip.IsForeignKey = false;
				colvarZip.IsReadOnly = false;
				colvarZip.DefaultSetting = @"";
				colvarZip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZip);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_DispatchAgencyCityZips",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_DispatchAgencyCityZip LoadFrom(MS_DispatchAgencyCityZip item)
		{
			MS_DispatchAgencyCityZip result = new MS_DispatchAgencyCityZip();
			if (item.CityZipID != default(int)) {
				result.LoadByKey(item.CityZipID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CityZipID {
			get { return GetColumnValue<int>(Columns.CityZipID); }
			set {
				SetColumnValue(Columns.CityZipID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CityZipID));
			}
		}
		[DataMember]
		public string State {
			get { return GetColumnValue<string>(Columns.State); }
			set {
				SetColumnValue(Columns.State, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.State));
			}
		}
		[DataMember]
		public string CountyName {
			get { return GetColumnValue<string>(Columns.CountyName); }
			set {
				SetColumnValue(Columns.CountyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountyName));
			}
		}
		[DataMember]
		public string CityName {
			get { return GetColumnValue<string>(Columns.CityName); }
			set {
				SetColumnValue(Columns.CityName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CityName));
			}
		}
		[DataMember]
		public string Zip {
			get { return GetColumnValue<string>(Columns.Zip); }
			set {
				SetColumnValue(Columns.Zip, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Zip));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return State;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CityZipIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StateColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CountyNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CityNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ZipColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CityZipID = @"CityZipID";
			public static readonly string State = @"State";
			public static readonly string CountyName = @"CountyName";
			public static readonly string CityName = @"CityName";
			public static readonly string Zip = @"Zip";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CityZipID; }
		}
		*/

		#region Foreign Collections

		private MS_DispatchAgencyCityZipLookupCollection _MS_DispatchAgencyCityZipLookupsCol;
		//Relationship: FK_MS_DispatchAgencyCityZipLookups_MS_DispatchAgencyCityZips
		public MS_DispatchAgencyCityZipLookupCollection MS_DispatchAgencyCityZipLookupsCol
		{
			get
			{
				if(_MS_DispatchAgencyCityZipLookupsCol == null) {
					_MS_DispatchAgencyCityZipLookupsCol = new MS_DispatchAgencyCityZipLookupCollection();
					_MS_DispatchAgencyCityZipLookupsCol.LoadAndCloseReader(MS_DispatchAgencyCityZipLookup.Query()
						.WHERE(MS_DispatchAgencyCityZipLookup.Columns.CityZipId, CityZipID).ExecuteReader());
				}
				return _MS_DispatchAgencyCityZipLookupsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_DispatchAgencyType class.
	/// </summary>
	[DataContract]
	public partial class MS_DispatchAgencyTypeCollection : ActiveList<MS_DispatchAgencyType, MS_DispatchAgencyTypeCollection>
	{
		public static MS_DispatchAgencyTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_DispatchAgencyTypeCollection result = new MS_DispatchAgencyTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_DispatchAgencyType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_DispatchAgencyTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_DispatchAgencyType : ActiveRecord<MS_DispatchAgencyType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_DispatchAgencyType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_DispatchAgencyTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDispatchAgencyTypeID = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyTypeID.ColumnName = "DispatchAgencyTypeID";
				colvarDispatchAgencyTypeID.DataType = DbType.Byte;
				colvarDispatchAgencyTypeID.MaxLength = 0;
				colvarDispatchAgencyTypeID.AutoIncrement = true;
				colvarDispatchAgencyTypeID.IsNullable = false;
				colvarDispatchAgencyTypeID.IsPrimaryKey = true;
				colvarDispatchAgencyTypeID.IsForeignKey = false;
				colvarDispatchAgencyTypeID.IsReadOnly = false;
				colvarDispatchAgencyTypeID.DefaultSetting = @"";
				colvarDispatchAgencyTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyTypeID);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = false;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"('AG_ALARMSYS')";
				colvarMonitoringStationOSId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarDispatchAgencyType = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyType.ColumnName = "DispatchAgencyType";
				colvarDispatchAgencyType.DataType = DbType.AnsiString;
				colvarDispatchAgencyType.MaxLength = 50;
				colvarDispatchAgencyType.AutoIncrement = false;
				colvarDispatchAgencyType.IsNullable = false;
				colvarDispatchAgencyType.IsPrimaryKey = false;
				colvarDispatchAgencyType.IsForeignKey = false;
				colvarDispatchAgencyType.IsReadOnly = false;
				colvarDispatchAgencyType.DefaultSetting = @"";
				colvarDispatchAgencyType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDispatchAgencyType);

				TableSchema.TableColumn colvarMsAgencyTypeNo = new TableSchema.TableColumn(schema);
				colvarMsAgencyTypeNo.ColumnName = "MsAgencyTypeNo";
				colvarMsAgencyTypeNo.DataType = DbType.AnsiString;
				colvarMsAgencyTypeNo.MaxLength = 10;
				colvarMsAgencyTypeNo.AutoIncrement = false;
				colvarMsAgencyTypeNo.IsNullable = false;
				colvarMsAgencyTypeNo.IsPrimaryKey = false;
				colvarMsAgencyTypeNo.IsForeignKey = false;
				colvarMsAgencyTypeNo.IsReadOnly = false;
				colvarMsAgencyTypeNo.DefaultSetting = @"";
				colvarMsAgencyTypeNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAgencyTypeNo);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_DispatchAgencyTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_DispatchAgencyType LoadFrom(MS_DispatchAgencyType item)
		{
			MS_DispatchAgencyType result = new MS_DispatchAgencyType();
			if (item.DispatchAgencyTypeID != default(byte)) {
				result.LoadByKey(item.DispatchAgencyTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public byte DispatchAgencyTypeID {
			get { return GetColumnValue<byte>(Columns.DispatchAgencyTypeID); }
			set {
				SetColumnValue(Columns.DispatchAgencyTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyTypeID));
			}
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set {
				SetColumnValue(Columns.MonitoringStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSId));
			}
		}
		[DataMember]
		public string DispatchAgencyType {
			get { return GetColumnValue<string>(Columns.DispatchAgencyType); }
			set {
				SetColumnValue(Columns.DispatchAgencyType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyType));
			}
		}
		[DataMember]
		public string MsAgencyTypeNo {
			get { return GetColumnValue<string>(Columns.MsAgencyTypeNo); }
			set {
				SetColumnValue(Columns.MsAgencyTypeNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MsAgencyTypeNo));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return MonitoringStationOSId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DispatchAgencyTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DispatchAgencyTypeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MsAgencyTypeNoColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DispatchAgencyTypeID = @"DispatchAgencyTypeID";
			public static readonly string MonitoringStationOSId = @"MonitoringStationOSId";
			public static readonly string DispatchAgencyType = @"DispatchAgencyType";
			public static readonly string MsAgencyTypeNo = @"MsAgencyTypeNo";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DispatchAgencyTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_DispatchAgencyCollection _MS_DispatchAgenciesCol;
		//Relationship: FK_MS_DispatchAgencies_MS_DispatchAgencyTypes
		public MS_DispatchAgencyCollection MS_DispatchAgenciesCol
		{
			get
			{
				if(_MS_DispatchAgenciesCol == null) {
					_MS_DispatchAgenciesCol = new MS_DispatchAgencyCollection();
					_MS_DispatchAgenciesCol.LoadAndCloseReader(MS_DispatchAgency.Query()
						.WHERE(MS_DispatchAgency.Columns.DispatchAgencyTypeId, DispatchAgencyTypeID).ExecuteReader());
				}
				return _MS_DispatchAgenciesCol;
			}
		}

		private MS_DispatchAgencyCityZipLookupCollection _MS_DispatchAgencyCityZipLookupsCol;
		//Relationship: FK_MS_DispatchAgencyCityZipLookups_MS_DispatchAgencyTypes
		public MS_DispatchAgencyCityZipLookupCollection MS_DispatchAgencyCityZipLookupsCol
		{
			get
			{
				if(_MS_DispatchAgencyCityZipLookupsCol == null) {
					_MS_DispatchAgencyCityZipLookupsCol = new MS_DispatchAgencyCityZipLookupCollection();
					_MS_DispatchAgencyCityZipLookupsCol.LoadAndCloseReader(MS_DispatchAgencyCityZipLookup.Query()
						.WHERE(MS_DispatchAgencyCityZipLookup.Columns.DispatchAgencyTypeId, DispatchAgencyTypeID).ExecuteReader());
				}
				return _MS_DispatchAgencyCityZipLookupsCol;
			}
		}

		private MS_MonitronicsDispatchAgencyCollection _MS_MonitronicsDispatchAgenciesCol;
		//Relationship: FK_MS_MonitronicsDispatchAgencies_MS_DispatchAgencyTypes
		public MS_MonitronicsDispatchAgencyCollection MS_MonitronicsDispatchAgenciesCol
		{
			get
			{
				if(_MS_MonitronicsDispatchAgenciesCol == null) {
					_MS_MonitronicsDispatchAgenciesCol = new MS_MonitronicsDispatchAgencyCollection();
					_MS_MonitronicsDispatchAgenciesCol.LoadAndCloseReader(MS_MonitronicsDispatchAgency.Query()
						.WHERE(MS_MonitronicsDispatchAgency.Columns.DispatchAgencyTypeId, DispatchAgencyTypeID).ExecuteReader());
				}
				return _MS_MonitronicsDispatchAgenciesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_EmergencyContactAuthority class.
	/// </summary>
	[DataContract]
	public partial class MS_EmergencyContactAuthorityCollection : ActiveList<MS_EmergencyContactAuthority, MS_EmergencyContactAuthorityCollection>
	{
		public static MS_EmergencyContactAuthorityCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EmergencyContactAuthorityCollection result = new MS_EmergencyContactAuthorityCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EmergencyContactAuthority item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EmergencyContactAuthorities table.
	/// </summary>
	[DataContract]
	public partial class MS_EmergencyContactAuthority : ActiveRecord<MS_EmergencyContactAuthority>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EmergencyContactAuthority()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EmergencyContactAuthorities", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAuthorityID = new TableSchema.TableColumn(schema);
				colvarAuthorityID.ColumnName = "AuthorityID";
				colvarAuthorityID.DataType = DbType.Int32;
				colvarAuthorityID.MaxLength = 0;
				colvarAuthorityID.AutoIncrement = true;
				colvarAuthorityID.IsNullable = false;
				colvarAuthorityID.IsPrimaryKey = true;
				colvarAuthorityID.IsForeignKey = false;
				colvarAuthorityID.IsReadOnly = false;
				colvarAuthorityID.DefaultSetting = @"";
				colvarAuthorityID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthorityID);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = true;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"";
				colvarMonitoringStationOSId.ForeignKeyTableName = "MS_MonitoringStationOSs";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarMsAuthorityId = new TableSchema.TableColumn(schema);
				colvarMsAuthorityId.ColumnName = "MsAuthorityId";
				colvarMsAuthorityId.DataType = DbType.AnsiString;
				colvarMsAuthorityId.MaxLength = 50;
				colvarMsAuthorityId.AutoIncrement = false;
				colvarMsAuthorityId.IsNullable = false;
				colvarMsAuthorityId.IsPrimaryKey = false;
				colvarMsAuthorityId.IsForeignKey = false;
				colvarMsAuthorityId.IsReadOnly = false;
				colvarMsAuthorityId.DefaultSetting = @"";
				colvarMsAuthorityId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsAuthorityId);

				TableSchema.TableColumn colvarAuthorityDescription = new TableSchema.TableColumn(schema);
				colvarAuthorityDescription.ColumnName = "AuthorityDescription";
				colvarAuthorityDescription.DataType = DbType.String;
				colvarAuthorityDescription.MaxLength = 100;
				colvarAuthorityDescription.AutoIncrement = false;
				colvarAuthorityDescription.IsNullable = false;
				colvarAuthorityDescription.IsPrimaryKey = false;
				colvarAuthorityDescription.IsForeignKey = false;
				colvarAuthorityDescription.IsReadOnly = false;
				colvarAuthorityDescription.DefaultSetting = @"";
				colvarAuthorityDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthorityDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EmergencyContactAuthorities",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EmergencyContactAuthority LoadFrom(MS_EmergencyContactAuthority item)
		{
			MS_EmergencyContactAuthority result = new MS_EmergencyContactAuthority();
			if (item.AuthorityID != default(int)) {
				result.LoadByKey(item.AuthorityID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AuthorityID {
			get { return GetColumnValue<int>(Columns.AuthorityID); }
			set {
				SetColumnValue(Columns.AuthorityID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthorityID));
			}
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set {
				SetColumnValue(Columns.MonitoringStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSId));
			}
		}
		[DataMember]
		public string MsAuthorityId {
			get { return GetColumnValue<string>(Columns.MsAuthorityId); }
			set {
				SetColumnValue(Columns.MsAuthorityId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MsAuthorityId));
			}
		}
		[DataMember]
		public string AuthorityDescription {
			get { return GetColumnValue<string>(Columns.AuthorityDescription); }
			set {
				SetColumnValue(Columns.AuthorityDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthorityDescription));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_MonitoringStationOss _MonitoringStationOS;
		//Relationship: FK_MS_EmergencyContactAuthorities_MS_MonitoringStationOSs
		public MS_MonitoringStationOss MonitoringStationOS
		{
			get
			{
				if(_MonitoringStationOS == null) {
					_MonitoringStationOS = MS_MonitoringStationOss.FetchByID(this.MonitoringStationOSId);
				}
				return _MonitoringStationOS;
			}
			set
			{
				SetColumnValue("MonitoringStationOSId", value.MonitoringStationOSID);
				_MonitoringStationOS = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MonitoringStationOSId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AuthorityIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MsAuthorityIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AuthorityDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AuthorityID = @"AuthorityID";
			public static readonly string MonitoringStationOSId = @"MonitoringStationOSId";
			public static readonly string MsAuthorityId = @"MsAuthorityId";
			public static readonly string AuthorityDescription = @"AuthorityDescription";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AuthorityID; }
		}
		*/

		#region Foreign Collections

		private MS_EmergencyContactCollection _MS_EmergencyContactsCol;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactAuthorities
		public MS_EmergencyContactCollection MS_EmergencyContactsCol
		{
			get
			{
				if(_MS_EmergencyContactsCol == null) {
					_MS_EmergencyContactsCol = new MS_EmergencyContactCollection();
					_MS_EmergencyContactsCol.LoadAndCloseReader(MS_EmergencyContact.Query()
						.WHERE(MS_EmergencyContact.Columns.AuthorityId, AuthorityID).ExecuteReader());
				}
				return _MS_EmergencyContactsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_EmergencyContactPhoneType class.
	/// </summary>
	[DataContract]
	public partial class MS_EmergencyContactPhoneTypeCollection : ActiveList<MS_EmergencyContactPhoneType, MS_EmergencyContactPhoneTypeCollection>
	{
		public static MS_EmergencyContactPhoneTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EmergencyContactPhoneTypeCollection result = new MS_EmergencyContactPhoneTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EmergencyContactPhoneType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EmergencyContactPhoneTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_EmergencyContactPhoneType : ActiveRecord<MS_EmergencyContactPhoneType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EmergencyContactPhoneType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EmergencyContactPhoneTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPhoneTypeID = new TableSchema.TableColumn(schema);
				colvarPhoneTypeID.ColumnName = "PhoneTypeID";
				colvarPhoneTypeID.DataType = DbType.Int32;
				colvarPhoneTypeID.MaxLength = 0;
				colvarPhoneTypeID.AutoIncrement = true;
				colvarPhoneTypeID.IsNullable = false;
				colvarPhoneTypeID.IsPrimaryKey = true;
				colvarPhoneTypeID.IsForeignKey = false;
				colvarPhoneTypeID.IsReadOnly = false;
				colvarPhoneTypeID.DefaultSetting = @"";
				colvarPhoneTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneTypeID);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = true;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"('AG_GPSTRACK')";
				colvarMonitoringStationOSId.ForeignKeyTableName = "MS_MonitoringStationOSs";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarMsPhoneTypeId = new TableSchema.TableColumn(schema);
				colvarMsPhoneTypeId.ColumnName = "MsPhoneTypeId";
				colvarMsPhoneTypeId.DataType = DbType.AnsiString;
				colvarMsPhoneTypeId.MaxLength = 10;
				colvarMsPhoneTypeId.AutoIncrement = false;
				colvarMsPhoneTypeId.IsNullable = false;
				colvarMsPhoneTypeId.IsPrimaryKey = false;
				colvarMsPhoneTypeId.IsForeignKey = false;
				colvarMsPhoneTypeId.IsReadOnly = false;
				colvarMsPhoneTypeId.DefaultSetting = @"";
				colvarMsPhoneTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsPhoneTypeId);

				TableSchema.TableColumn colvarPhoneTypeDescription = new TableSchema.TableColumn(schema);
				colvarPhoneTypeDescription.ColumnName = "PhoneTypeDescription";
				colvarPhoneTypeDescription.DataType = DbType.String;
				colvarPhoneTypeDescription.MaxLength = 50;
				colvarPhoneTypeDescription.AutoIncrement = false;
				colvarPhoneTypeDescription.IsNullable = false;
				colvarPhoneTypeDescription.IsPrimaryKey = false;
				colvarPhoneTypeDescription.IsForeignKey = false;
				colvarPhoneTypeDescription.IsReadOnly = false;
				colvarPhoneTypeDescription.DefaultSetting = @"";
				colvarPhoneTypeDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneTypeDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EmergencyContactPhoneTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EmergencyContactPhoneType LoadFrom(MS_EmergencyContactPhoneType item)
		{
			MS_EmergencyContactPhoneType result = new MS_EmergencyContactPhoneType();
			if (item.PhoneTypeID != default(int)) {
				result.LoadByKey(item.PhoneTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PhoneTypeID {
			get { return GetColumnValue<int>(Columns.PhoneTypeID); }
			set {
				SetColumnValue(Columns.PhoneTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneTypeID));
			}
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set {
				SetColumnValue(Columns.MonitoringStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSId));
			}
		}
		[DataMember]
		public string MsPhoneTypeId {
			get { return GetColumnValue<string>(Columns.MsPhoneTypeId); }
			set {
				SetColumnValue(Columns.MsPhoneTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MsPhoneTypeId));
			}
		}
		[DataMember]
		public string PhoneTypeDescription {
			get { return GetColumnValue<string>(Columns.PhoneTypeDescription); }
			set {
				SetColumnValue(Columns.PhoneTypeDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneTypeDescription));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_MonitoringStationOss _MonitoringStationOS;
		//Relationship: FK_MS_EmergencyContactPhoneTypes_MS_MonitoringStationOSs
		public MS_MonitoringStationOss MonitoringStationOS
		{
			get
			{
				if(_MonitoringStationOS == null) {
					_MonitoringStationOS = MS_MonitoringStationOss.FetchByID(this.MonitoringStationOSId);
				}
				return _MonitoringStationOS;
			}
			set
			{
				SetColumnValue("MonitoringStationOSId", value.MonitoringStationOSID);
				_MonitoringStationOS = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MonitoringStationOSId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PhoneTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MsPhoneTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PhoneTypeDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PhoneTypeID = @"PhoneTypeID";
			public static readonly string MonitoringStationOSId = @"MonitoringStationOSId";
			public static readonly string MsPhoneTypeId = @"MsPhoneTypeId";
			public static readonly string PhoneTypeDescription = @"PhoneTypeDescription";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PhoneTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_EmergencyContactCollection _MS_EmergencyContactsCol;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactPhoneTypes
		public MS_EmergencyContactCollection MS_EmergencyContactsCol
		{
			get
			{
				if(_MS_EmergencyContactsCol == null) {
					_MS_EmergencyContactsCol = new MS_EmergencyContactCollection();
					_MS_EmergencyContactsCol.LoadAndCloseReader(MS_EmergencyContact.Query()
						.WHERE(MS_EmergencyContact.Columns.Phone1TypeId, PhoneTypeID).ExecuteReader());
				}
				return _MS_EmergencyContactsCol;
			}
		}

		private MS_EmergencyContactCollection _MS_EmergencyContacts02Col;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactPhoneTypes1
		public MS_EmergencyContactCollection MS_EmergencyContacts02Col
		{
			get
			{
				if(_MS_EmergencyContacts02Col == null) {
					_MS_EmergencyContacts02Col = new MS_EmergencyContactCollection();
					_MS_EmergencyContacts02Col.LoadAndCloseReader(MS_EmergencyContact.Query()
						.WHERE(MS_EmergencyContact.Columns.Phone2TypeId, PhoneTypeID).ExecuteReader());
				}
				return _MS_EmergencyContacts02Col;
			}
		}

		private MS_EmergencyContactCollection _MS_EmergencyContacts03Col;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactPhoneTypes2
		public MS_EmergencyContactCollection MS_EmergencyContacts03Col
		{
			get
			{
				if(_MS_EmergencyContacts03Col == null) {
					_MS_EmergencyContacts03Col = new MS_EmergencyContactCollection();
					_MS_EmergencyContacts03Col.LoadAndCloseReader(MS_EmergencyContact.Query()
						.WHERE(MS_EmergencyContact.Columns.Phone3TypeId, PhoneTypeID).ExecuteReader());
				}
				return _MS_EmergencyContacts03Col;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_EmergencyContactRelationship class.
	/// </summary>
	[DataContract]
	public partial class MS_EmergencyContactRelationshipCollection : ActiveList<MS_EmergencyContactRelationship, MS_EmergencyContactRelationshipCollection>
	{
		public static MS_EmergencyContactRelationshipCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EmergencyContactRelationshipCollection result = new MS_EmergencyContactRelationshipCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EmergencyContactRelationship item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EmergencyContactRelationships table.
	/// </summary>
	[DataContract]
	public partial class MS_EmergencyContactRelationship : ActiveRecord<MS_EmergencyContactRelationship>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EmergencyContactRelationship()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EmergencyContactRelationships", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRelationshipID = new TableSchema.TableColumn(schema);
				colvarRelationshipID.ColumnName = "RelationshipID";
				colvarRelationshipID.DataType = DbType.Int32;
				colvarRelationshipID.MaxLength = 0;
				colvarRelationshipID.AutoIncrement = true;
				colvarRelationshipID.IsNullable = false;
				colvarRelationshipID.IsPrimaryKey = true;
				colvarRelationshipID.IsForeignKey = false;
				colvarRelationshipID.IsReadOnly = false;
				colvarRelationshipID.DefaultSetting = @"";
				colvarRelationshipID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRelationshipID);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = true;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"";
				colvarMonitoringStationOSId.ForeignKeyTableName = "MS_MonitoringStationOSs";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarMsRelationshipId = new TableSchema.TableColumn(schema);
				colvarMsRelationshipId.ColumnName = "MsRelationshipId";
				colvarMsRelationshipId.DataType = DbType.AnsiString;
				colvarMsRelationshipId.MaxLength = 50;
				colvarMsRelationshipId.AutoIncrement = false;
				colvarMsRelationshipId.IsNullable = false;
				colvarMsRelationshipId.IsPrimaryKey = false;
				colvarMsRelationshipId.IsForeignKey = false;
				colvarMsRelationshipId.IsReadOnly = false;
				colvarMsRelationshipId.DefaultSetting = @"";
				colvarMsRelationshipId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsRelationshipId);

				TableSchema.TableColumn colvarRelationshipDescription = new TableSchema.TableColumn(schema);
				colvarRelationshipDescription.ColumnName = "RelationshipDescription";
				colvarRelationshipDescription.DataType = DbType.String;
				colvarRelationshipDescription.MaxLength = 50;
				colvarRelationshipDescription.AutoIncrement = false;
				colvarRelationshipDescription.IsNullable = false;
				colvarRelationshipDescription.IsPrimaryKey = false;
				colvarRelationshipDescription.IsForeignKey = false;
				colvarRelationshipDescription.IsReadOnly = false;
				colvarRelationshipDescription.DefaultSetting = @"";
				colvarRelationshipDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRelationshipDescription);

				TableSchema.TableColumn colvarIsEVC = new TableSchema.TableColumn(schema);
				colvarIsEVC.ColumnName = "IsEVC";
				colvarIsEVC.DataType = DbType.Boolean;
				colvarIsEVC.MaxLength = 0;
				colvarIsEVC.AutoIncrement = false;
				colvarIsEVC.IsNullable = false;
				colvarIsEVC.IsPrimaryKey = false;
				colvarIsEVC.IsForeignKey = false;
				colvarIsEVC.IsReadOnly = false;
				colvarIsEVC.DefaultSetting = @"((0))";
				colvarIsEVC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsEVC);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EmergencyContactRelationships",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EmergencyContactRelationship LoadFrom(MS_EmergencyContactRelationship item)
		{
			MS_EmergencyContactRelationship result = new MS_EmergencyContactRelationship();
			if (item.RelationshipID != default(int)) {
				result.LoadByKey(item.RelationshipID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RelationshipID {
			get { return GetColumnValue<int>(Columns.RelationshipID); }
			set {
				SetColumnValue(Columns.RelationshipID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RelationshipID));
			}
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set {
				SetColumnValue(Columns.MonitoringStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSId));
			}
		}
		[DataMember]
		public string MsRelationshipId {
			get { return GetColumnValue<string>(Columns.MsRelationshipId); }
			set {
				SetColumnValue(Columns.MsRelationshipId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MsRelationshipId));
			}
		}
		[DataMember]
		public string RelationshipDescription {
			get { return GetColumnValue<string>(Columns.RelationshipDescription); }
			set {
				SetColumnValue(Columns.RelationshipDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RelationshipDescription));
			}
		}
		[DataMember]
		public bool IsEVC {
			get { return GetColumnValue<bool>(Columns.IsEVC); }
			set {
				SetColumnValue(Columns.IsEVC, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsEVC));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_MonitoringStationOss _MonitoringStationOS;
		//Relationship: FK_MS_EmergencyContactRelationships_MS_MonitoringStationOSs
		public MS_MonitoringStationOss MonitoringStationOS
		{
			get
			{
				if(_MonitoringStationOS == null) {
					_MonitoringStationOS = MS_MonitoringStationOss.FetchByID(this.MonitoringStationOSId);
				}
				return _MonitoringStationOS;
			}
			set
			{
				SetColumnValue("MonitoringStationOSId", value.MonitoringStationOSID);
				_MonitoringStationOS = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MonitoringStationOSId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn RelationshipIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MsRelationshipIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RelationshipDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsEVCColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RelationshipID = @"RelationshipID";
			public static readonly string MonitoringStationOSId = @"MonitoringStationOSId";
			public static readonly string MsRelationshipId = @"MsRelationshipId";
			public static readonly string RelationshipDescription = @"RelationshipDescription";
			public static readonly string IsEVC = @"IsEVC";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RelationshipID; }
		}
		*/

		#region Foreign Collections

		private MS_EmergencyContactCollection _MS_EmergencyContactsCol;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactRelationships
		public MS_EmergencyContactCollection MS_EmergencyContactsCol
		{
			get
			{
				if(_MS_EmergencyContactsCol == null) {
					_MS_EmergencyContactsCol = new MS_EmergencyContactCollection();
					_MS_EmergencyContactsCol.LoadAndCloseReader(MS_EmergencyContact.Query()
						.WHERE(MS_EmergencyContact.Columns.RelationshipId, RelationshipID).ExecuteReader());
				}
				return _MS_EmergencyContactsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_EmergencyContact class.
	/// </summary>
	[DataContract]
	public partial class MS_EmergencyContactCollection : ActiveList<MS_EmergencyContact, MS_EmergencyContactCollection>
	{
		public static MS_EmergencyContactCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EmergencyContactCollection result = new MS_EmergencyContactCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EmergencyContact item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EmergencyContacts table.
	/// </summary>
	[DataContract]
	public partial class MS_EmergencyContact : ActiveRecord<MS_EmergencyContact>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EmergencyContact()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EmergencyContacts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEmergencyContactID = new TableSchema.TableColumn(schema);
				colvarEmergencyContactID.ColumnName = "EmergencyContactID";
				colvarEmergencyContactID.DataType = DbType.Int64;
				colvarEmergencyContactID.MaxLength = 0;
				colvarEmergencyContactID.AutoIncrement = true;
				colvarEmergencyContactID.IsNullable = false;
				colvarEmergencyContactID.IsPrimaryKey = true;
				colvarEmergencyContactID.IsForeignKey = false;
				colvarEmergencyContactID.IsReadOnly = false;
				colvarEmergencyContactID.DefaultSetting = @"";
				colvarEmergencyContactID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyContactID);

				TableSchema.TableColumn colvarEmergencyContactTypeId = new TableSchema.TableColumn(schema);
				colvarEmergencyContactTypeId.ColumnName = "EmergencyContactTypeId";
				colvarEmergencyContactTypeId.DataType = DbType.Int32;
				colvarEmergencyContactTypeId.MaxLength = 0;
				colvarEmergencyContactTypeId.AutoIncrement = false;
				colvarEmergencyContactTypeId.IsNullable = false;
				colvarEmergencyContactTypeId.IsPrimaryKey = false;
				colvarEmergencyContactTypeId.IsForeignKey = true;
				colvarEmergencyContactTypeId.IsReadOnly = false;
				colvarEmergencyContactTypeId.DefaultSetting = @"((5))";
				colvarEmergencyContactTypeId.ForeignKeyTableName = "MS_EmergencyContactTypes";
				schema.Columns.Add(colvarEmergencyContactTypeId);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int64;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = true;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = false;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MS_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarRelationshipId = new TableSchema.TableColumn(schema);
				colvarRelationshipId.ColumnName = "RelationshipId";
				colvarRelationshipId.DataType = DbType.Int32;
				colvarRelationshipId.MaxLength = 0;
				colvarRelationshipId.AutoIncrement = false;
				colvarRelationshipId.IsNullable = false;
				colvarRelationshipId.IsPrimaryKey = false;
				colvarRelationshipId.IsForeignKey = true;
				colvarRelationshipId.IsReadOnly = false;
				colvarRelationshipId.DefaultSetting = @"";
				colvarRelationshipId.ForeignKeyTableName = "MS_EmergencyContactRelationships";
				schema.Columns.Add(colvarRelationshipId);

				TableSchema.TableColumn colvarAuthorityId = new TableSchema.TableColumn(schema);
				colvarAuthorityId.ColumnName = "AuthorityId";
				colvarAuthorityId.DataType = DbType.Int32;
				colvarAuthorityId.MaxLength = 0;
				colvarAuthorityId.AutoIncrement = false;
				colvarAuthorityId.IsNullable = false;
				colvarAuthorityId.IsPrimaryKey = false;
				colvarAuthorityId.IsForeignKey = true;
				colvarAuthorityId.IsReadOnly = false;
				colvarAuthorityId.DefaultSetting = @"((8))";
				colvarAuthorityId.ForeignKeyTableName = "MS_EmergencyContactAuthorities";
				schema.Columns.Add(colvarAuthorityId);

				TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
				colvarOrderNumber.ColumnName = "OrderNumber";
				colvarOrderNumber.DataType = DbType.Int16;
				colvarOrderNumber.MaxLength = 0;
				colvarOrderNumber.AutoIncrement = false;
				colvarOrderNumber.IsNullable = false;
				colvarOrderNumber.IsPrimaryKey = false;
				colvarOrderNumber.IsForeignKey = false;
				colvarOrderNumber.IsReadOnly = false;
				colvarOrderNumber.DefaultSetting = @"((0))";
				colvarOrderNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNumber);

				TableSchema.TableColumn colvarAllergies = new TableSchema.TableColumn(schema);
				colvarAllergies.ColumnName = "Allergies";
				colvarAllergies.DataType = DbType.String;
				colvarAllergies.MaxLength = 1000;
				colvarAllergies.AutoIncrement = false;
				colvarAllergies.IsNullable = true;
				colvarAllergies.IsPrimaryKey = false;
				colvarAllergies.IsForeignKey = false;
				colvarAllergies.IsReadOnly = false;
				colvarAllergies.DefaultSetting = @"";
				colvarAllergies.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllergies);

				TableSchema.TableColumn colvarMedicalConditions = new TableSchema.TableColumn(schema);
				colvarMedicalConditions.ColumnName = "MedicalConditions";
				colvarMedicalConditions.DataType = DbType.String;
				colvarMedicalConditions.MaxLength = 1000;
				colvarMedicalConditions.AutoIncrement = false;
				colvarMedicalConditions.IsNullable = true;
				colvarMedicalConditions.IsPrimaryKey = false;
				colvarMedicalConditions.IsForeignKey = false;
				colvarMedicalConditions.IsReadOnly = false;
				colvarMedicalConditions.DefaultSetting = @"";
				colvarMedicalConditions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMedicalConditions);

				TableSchema.TableColumn colvarHasKey = new TableSchema.TableColumn(schema);
				colvarHasKey.ColumnName = "HasKey";
				colvarHasKey.DataType = DbType.Boolean;
				colvarHasKey.MaxLength = 0;
				colvarHasKey.AutoIncrement = false;
				colvarHasKey.IsNullable = false;
				colvarHasKey.IsPrimaryKey = false;
				colvarHasKey.IsForeignKey = false;
				colvarHasKey.IsReadOnly = false;
				colvarHasKey.DefaultSetting = @"((0))";
				colvarHasKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasKey);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.AnsiString;
				colvarPrefix.MaxLength = 50;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = true;
				colvarPrefix.IsPrimaryKey = false;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.AnsiString;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.AnsiString;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.AnsiString;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPostfix = new TableSchema.TableColumn(schema);
				colvarPostfix.ColumnName = "Postfix";
				colvarPostfix.DataType = DbType.AnsiString;
				colvarPostfix.MaxLength = 50;
				colvarPostfix.AutoIncrement = false;
				colvarPostfix.IsNullable = true;
				colvarPostfix.IsPrimaryKey = false;
				colvarPostfix.IsForeignKey = false;
				colvarPostfix.IsReadOnly = false;
				colvarPostfix.DefaultSetting = @"";
				colvarPostfix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostfix);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.AnsiString;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.AnsiString;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarPhone1 = new TableSchema.TableColumn(schema);
				colvarPhone1.ColumnName = "Phone1";
				colvarPhone1.DataType = DbType.AnsiString;
				colvarPhone1.MaxLength = 20;
				colvarPhone1.AutoIncrement = false;
				colvarPhone1.IsNullable = false;
				colvarPhone1.IsPrimaryKey = false;
				colvarPhone1.IsForeignKey = false;
				colvarPhone1.IsReadOnly = false;
				colvarPhone1.DefaultSetting = @"";
				colvarPhone1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone1);

				TableSchema.TableColumn colvarPhone1TypeId = new TableSchema.TableColumn(schema);
				colvarPhone1TypeId.ColumnName = "Phone1TypeId";
				colvarPhone1TypeId.DataType = DbType.Int32;
				colvarPhone1TypeId.MaxLength = 0;
				colvarPhone1TypeId.AutoIncrement = false;
				colvarPhone1TypeId.IsNullable = false;
				colvarPhone1TypeId.IsPrimaryKey = false;
				colvarPhone1TypeId.IsForeignKey = true;
				colvarPhone1TypeId.IsReadOnly = false;
				colvarPhone1TypeId.DefaultSetting = @"";
				colvarPhone1TypeId.ForeignKeyTableName = "MS_EmergencyContactPhoneTypes";
				schema.Columns.Add(colvarPhone1TypeId);

				TableSchema.TableColumn colvarPhone2 = new TableSchema.TableColumn(schema);
				colvarPhone2.ColumnName = "Phone2";
				colvarPhone2.DataType = DbType.AnsiString;
				colvarPhone2.MaxLength = 20;
				colvarPhone2.AutoIncrement = false;
				colvarPhone2.IsNullable = true;
				colvarPhone2.IsPrimaryKey = false;
				colvarPhone2.IsForeignKey = false;
				colvarPhone2.IsReadOnly = false;
				colvarPhone2.DefaultSetting = @"";
				colvarPhone2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone2);

				TableSchema.TableColumn colvarPhone2TypeId = new TableSchema.TableColumn(schema);
				colvarPhone2TypeId.ColumnName = "Phone2TypeId";
				colvarPhone2TypeId.DataType = DbType.Int32;
				colvarPhone2TypeId.MaxLength = 0;
				colvarPhone2TypeId.AutoIncrement = false;
				colvarPhone2TypeId.IsNullable = true;
				colvarPhone2TypeId.IsPrimaryKey = false;
				colvarPhone2TypeId.IsForeignKey = true;
				colvarPhone2TypeId.IsReadOnly = false;
				colvarPhone2TypeId.DefaultSetting = @"";
				colvarPhone2TypeId.ForeignKeyTableName = "MS_EmergencyContactPhoneTypes";
				schema.Columns.Add(colvarPhone2TypeId);

				TableSchema.TableColumn colvarPhone3 = new TableSchema.TableColumn(schema);
				colvarPhone3.ColumnName = "Phone3";
				colvarPhone3.DataType = DbType.AnsiString;
				colvarPhone3.MaxLength = 20;
				colvarPhone3.AutoIncrement = false;
				colvarPhone3.IsNullable = true;
				colvarPhone3.IsPrimaryKey = false;
				colvarPhone3.IsForeignKey = false;
				colvarPhone3.IsReadOnly = false;
				colvarPhone3.DefaultSetting = @"";
				colvarPhone3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone3);

				TableSchema.TableColumn colvarPhone3TypeId = new TableSchema.TableColumn(schema);
				colvarPhone3TypeId.ColumnName = "Phone3TypeId";
				colvarPhone3TypeId.DataType = DbType.Int32;
				colvarPhone3TypeId.MaxLength = 0;
				colvarPhone3TypeId.AutoIncrement = false;
				colvarPhone3TypeId.IsNullable = true;
				colvarPhone3TypeId.IsPrimaryKey = false;
				colvarPhone3TypeId.IsForeignKey = true;
				colvarPhone3TypeId.IsReadOnly = false;
				colvarPhone3TypeId.DefaultSetting = @"";
				colvarPhone3TypeId.ForeignKeyTableName = "MS_EmergencyContactPhoneTypes";
				schema.Columns.Add(colvarPhone3TypeId);

				TableSchema.TableColumn colvarComment1 = new TableSchema.TableColumn(schema);
				colvarComment1.ColumnName = "Comment1";
				colvarComment1.DataType = DbType.String;
				colvarComment1.MaxLength = -1;
				colvarComment1.AutoIncrement = false;
				colvarComment1.IsNullable = true;
				colvarComment1.IsPrimaryKey = false;
				colvarComment1.IsForeignKey = false;
				colvarComment1.IsReadOnly = false;
				colvarComment1.DefaultSetting = @"";
				colvarComment1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment1);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EmergencyContacts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EmergencyContact LoadFrom(MS_EmergencyContact item)
		{
			MS_EmergencyContact result = new MS_EmergencyContact();
			if (item.EmergencyContactID != default(long)) {
				result.LoadByKey(item.EmergencyContactID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long EmergencyContactID {
			get { return GetColumnValue<long>(Columns.EmergencyContactID); }
			set {
				SetColumnValue(Columns.EmergencyContactID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyContactID));
			}
		}
		[DataMember]
		public int EmergencyContactTypeId {
			get { return GetColumnValue<int>(Columns.EmergencyContactTypeId); }
			set {
				SetColumnValue(Columns.EmergencyContactTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyContactTypeId));
			}
		}
		[DataMember]
		public long? CustomerId {
			get { return GetColumnValue<long?>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public int RelationshipId {
			get { return GetColumnValue<int>(Columns.RelationshipId); }
			set {
				SetColumnValue(Columns.RelationshipId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RelationshipId));
			}
		}
		[DataMember]
		public int AuthorityId {
			get { return GetColumnValue<int>(Columns.AuthorityId); }
			set {
				SetColumnValue(Columns.AuthorityId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthorityId));
			}
		}
		[DataMember]
		public short OrderNumber {
			get { return GetColumnValue<short>(Columns.OrderNumber); }
			set {
				SetColumnValue(Columns.OrderNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OrderNumber));
			}
		}
		[DataMember]
		public string Allergies {
			get { return GetColumnValue<string>(Columns.Allergies); }
			set {
				SetColumnValue(Columns.Allergies, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Allergies));
			}
		}
		[DataMember]
		public string MedicalConditions {
			get { return GetColumnValue<string>(Columns.MedicalConditions); }
			set {
				SetColumnValue(Columns.MedicalConditions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MedicalConditions));
			}
		}
		[DataMember]
		public bool HasKey {
			get { return GetColumnValue<bool>(Columns.HasKey); }
			set {
				SetColumnValue(Columns.HasKey, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasKey));
			}
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set {
				SetColumnValue(Columns.DOB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DOB));
			}
		}
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set {
				SetColumnValue(Columns.Prefix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Prefix));
			}
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set {
				SetColumnValue(Columns.FirstName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FirstName));
			}
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set {
				SetColumnValue(Columns.MiddleName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiddleName));
			}
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set {
				SetColumnValue(Columns.LastName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastName));
			}
		}
		[DataMember]
		public string Postfix {
			get { return GetColumnValue<string>(Columns.Postfix); }
			set {
				SetColumnValue(Columns.Postfix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Postfix));
			}
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set {
				SetColumnValue(Columns.Email, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Email));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}
		[DataMember]
		public string Phone1 {
			get { return GetColumnValue<string>(Columns.Phone1); }
			set {
				SetColumnValue(Columns.Phone1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone1));
			}
		}
		[DataMember]
		public int Phone1TypeId {
			get { return GetColumnValue<int>(Columns.Phone1TypeId); }
			set {
				SetColumnValue(Columns.Phone1TypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone1TypeId));
			}
		}
		[DataMember]
		public string Phone2 {
			get { return GetColumnValue<string>(Columns.Phone2); }
			set {
				SetColumnValue(Columns.Phone2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone2));
			}
		}
		[DataMember]
		public int? Phone2TypeId {
			get { return GetColumnValue<int?>(Columns.Phone2TypeId); }
			set {
				SetColumnValue(Columns.Phone2TypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone2TypeId));
			}
		}
		[DataMember]
		public string Phone3 {
			get { return GetColumnValue<string>(Columns.Phone3); }
			set {
				SetColumnValue(Columns.Phone3, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone3));
			}
		}
		[DataMember]
		public int? Phone3TypeId {
			get { return GetColumnValue<int?>(Columns.Phone3TypeId); }
			set {
				SetColumnValue(Columns.Phone3TypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone3TypeId));
			}
		}
		[DataMember]
		public string Comment1 {
			get { return GetColumnValue<string>(Columns.Comment1); }
			set {
				SetColumnValue(Columns.Comment1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comment1));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Account _Account;
		//Relationship: FK_MS_EmergencyContacts_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		private MS_EmergencyContactAuthority _Authority;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactAuthorities
		public MS_EmergencyContactAuthority Authority
		{
			get
			{
				if(_Authority == null) {
					_Authority = MS_EmergencyContactAuthority.FetchByID(this.AuthorityId);
				}
				return _Authority;
			}
			set
			{
				SetColumnValue("AuthorityId", value.AuthorityID);
				_Authority = value;
			}
		}

		private MS_EmergencyContactPhoneType _Phone1Type;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactPhoneTypes
		public MS_EmergencyContactPhoneType Phone1Type
		{
			get
			{
				if(_Phone1Type == null) {
					_Phone1Type = MS_EmergencyContactPhoneType.FetchByID(this.Phone1TypeId);
				}
				return _Phone1Type;
			}
			set
			{
				SetColumnValue("Phone1TypeId", value.PhoneTypeID);
				_Phone1Type = value;
			}
		}

		private MS_EmergencyContactPhoneType _Phone2Type;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactPhoneTypes1
		public MS_EmergencyContactPhoneType Phone2Type
		{
			get
			{
				if(_Phone2Type == null) {
					_Phone2Type = MS_EmergencyContactPhoneType.FetchByID(this.Phone2TypeId);
				}
				return _Phone2Type;
			}
			set
			{
				SetColumnValue("Phone2TypeId", value.PhoneTypeID);
				_Phone2Type = value;
			}
		}

		private MS_EmergencyContactPhoneType _Phone3Type;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactPhoneTypes2
		public MS_EmergencyContactPhoneType Phone3Type
		{
			get
			{
				if(_Phone3Type == null) {
					_Phone3Type = MS_EmergencyContactPhoneType.FetchByID(this.Phone3TypeId);
				}
				return _Phone3Type;
			}
			set
			{
				SetColumnValue("Phone3TypeId", value.PhoneTypeID);
				_Phone3Type = value;
			}
		}

		private MS_EmergencyContactRelationship _Relationship;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactRelationships
		public MS_EmergencyContactRelationship Relationship
		{
			get
			{
				if(_Relationship == null) {
					_Relationship = MS_EmergencyContactRelationship.FetchByID(this.RelationshipId);
				}
				return _Relationship;
			}
			set
			{
				SetColumnValue("RelationshipId", value.RelationshipID);
				_Relationship = value;
			}
		}

		private MS_EmergencyContactType _EmergencyContactType;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactTypes
		public MS_EmergencyContactType EmergencyContactType
		{
			get
			{
				if(_EmergencyContactType == null) {
					_EmergencyContactType = MS_EmergencyContactType.FetchByID(this.EmergencyContactTypeId);
				}
				return _EmergencyContactType;
			}
			set
			{
				SetColumnValue("EmergencyContactTypeId", value.EmergencyContactTypeID);
				_EmergencyContactType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EmergencyContactID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn EmergencyContactIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EmergencyContactTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RelationshipIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AuthorityIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn OrderNumberColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AllergiesColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn MedicalConditionsColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn HasKeyColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PostfixColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn Phone1Column
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn Phone1TypeIdColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn Phone2Column
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn Phone2TypeIdColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn Phone3Column
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn Phone3TypeIdColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn Comment1Column
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[31]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EmergencyContactID = @"EmergencyContactID";
			public static readonly string EmergencyContactTypeId = @"EmergencyContactTypeId";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string AccountId = @"AccountId";
			public static readonly string RelationshipId = @"RelationshipId";
			public static readonly string AuthorityId = @"AuthorityId";
			public static readonly string OrderNumber = @"OrderNumber";
			public static readonly string Allergies = @"Allergies";
			public static readonly string MedicalConditions = @"MedicalConditions";
			public static readonly string HasKey = @"HasKey";
			public static readonly string DOB = @"DOB";
			public static readonly string Prefix = @"Prefix";
			public static readonly string FirstName = @"FirstName";
			public static readonly string MiddleName = @"MiddleName";
			public static readonly string LastName = @"LastName";
			public static readonly string Postfix = @"Postfix";
			public static readonly string Email = @"Email";
			public static readonly string Password = @"Password";
			public static readonly string Phone1 = @"Phone1";
			public static readonly string Phone1TypeId = @"Phone1TypeId";
			public static readonly string Phone2 = @"Phone2";
			public static readonly string Phone2TypeId = @"Phone2TypeId";
			public static readonly string Phone3 = @"Phone3";
			public static readonly string Phone3TypeId = @"Phone3TypeId";
			public static readonly string Comment1 = @"Comment1";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EmergencyContactID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_EmergencyContactType class.
	/// </summary>
	[DataContract]
	public partial class MS_EmergencyContactTypeCollection : ActiveList<MS_EmergencyContactType, MS_EmergencyContactTypeCollection>
	{
		public static MS_EmergencyContactTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EmergencyContactTypeCollection result = new MS_EmergencyContactTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EmergencyContactType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EmergencyContactTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_EmergencyContactType : ActiveRecord<MS_EmergencyContactType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EmergencyContactType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EmergencyContactTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEmergencyContactTypeID = new TableSchema.TableColumn(schema);
				colvarEmergencyContactTypeID.ColumnName = "EmergencyContactTypeID";
				colvarEmergencyContactTypeID.DataType = DbType.Int32;
				colvarEmergencyContactTypeID.MaxLength = 0;
				colvarEmergencyContactTypeID.AutoIncrement = true;
				colvarEmergencyContactTypeID.IsNullable = false;
				colvarEmergencyContactTypeID.IsPrimaryKey = true;
				colvarEmergencyContactTypeID.IsForeignKey = false;
				colvarEmergencyContactTypeID.IsReadOnly = false;
				colvarEmergencyContactTypeID.DefaultSetting = @"";
				colvarEmergencyContactTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyContactTypeID);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = true;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"";
				colvarMonitoringStationOSId.ForeignKeyTableName = "MS_MonitoringStationOSs";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarMsContactTypeId = new TableSchema.TableColumn(schema);
				colvarMsContactTypeId.ColumnName = "MsContactTypeId";
				colvarMsContactTypeId.DataType = DbType.AnsiString;
				colvarMsContactTypeId.MaxLength = 50;
				colvarMsContactTypeId.AutoIncrement = false;
				colvarMsContactTypeId.IsNullable = false;
				colvarMsContactTypeId.IsPrimaryKey = false;
				colvarMsContactTypeId.IsForeignKey = false;
				colvarMsContactTypeId.IsReadOnly = false;
				colvarMsContactTypeId.DefaultSetting = @"";
				colvarMsContactTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsContactTypeId);

				TableSchema.TableColumn colvarContactTypeDescription = new TableSchema.TableColumn(schema);
				colvarContactTypeDescription.ColumnName = "ContactTypeDescription";
				colvarContactTypeDescription.DataType = DbType.AnsiString;
				colvarContactTypeDescription.MaxLength = 100;
				colvarContactTypeDescription.AutoIncrement = false;
				colvarContactTypeDescription.IsNullable = false;
				colvarContactTypeDescription.IsPrimaryKey = false;
				colvarContactTypeDescription.IsForeignKey = false;
				colvarContactTypeDescription.IsReadOnly = false;
				colvarContactTypeDescription.DefaultSetting = @"";
				colvarContactTypeDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactTypeDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EmergencyContactTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EmergencyContactType LoadFrom(MS_EmergencyContactType item)
		{
			MS_EmergencyContactType result = new MS_EmergencyContactType();
			if (item.EmergencyContactTypeID != default(int)) {
				result.LoadByKey(item.EmergencyContactTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EmergencyContactTypeID {
			get { return GetColumnValue<int>(Columns.EmergencyContactTypeID); }
			set {
				SetColumnValue(Columns.EmergencyContactTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyContactTypeID));
			}
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set {
				SetColumnValue(Columns.MonitoringStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSId));
			}
		}
		[DataMember]
		public string MsContactTypeId {
			get { return GetColumnValue<string>(Columns.MsContactTypeId); }
			set {
				SetColumnValue(Columns.MsContactTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MsContactTypeId));
			}
		}
		[DataMember]
		public string ContactTypeDescription {
			get { return GetColumnValue<string>(Columns.ContactTypeDescription); }
			set {
				SetColumnValue(Columns.ContactTypeDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactTypeDescription));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_MonitoringStationOss _MonitoringStationOS;
		//Relationship: FK_MS_EmergencyContactTypes_MS_MonitoringStationOSs
		public MS_MonitoringStationOss MonitoringStationOS
		{
			get
			{
				if(_MonitoringStationOS == null) {
					_MonitoringStationOS = MS_MonitoringStationOss.FetchByID(this.MonitoringStationOSId);
				}
				return _MonitoringStationOS;
			}
			set
			{
				SetColumnValue("MonitoringStationOSId", value.MonitoringStationOSID);
				_MonitoringStationOS = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MonitoringStationOSId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EmergencyContactTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MsContactTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ContactTypeDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EmergencyContactTypeID = @"EmergencyContactTypeID";
			public static readonly string MonitoringStationOSId = @"MonitoringStationOSId";
			public static readonly string MsContactTypeId = @"MsContactTypeId";
			public static readonly string ContactTypeDescription = @"ContactTypeDescription";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EmergencyContactTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_EmergencyContactCollection _MS_EmergencyContactsCol;
		//Relationship: FK_MS_EmergencyContacts_MS_EmergencyContactTypes
		public MS_EmergencyContactCollection MS_EmergencyContactsCol
		{
			get
			{
				if(_MS_EmergencyContactsCol == null) {
					_MS_EmergencyContactsCol = new MS_EmergencyContactCollection();
					_MS_EmergencyContactsCol.LoadAndCloseReader(MS_EmergencyContact.Query()
						.WHERE(MS_EmergencyContact.Columns.EmergencyContactTypeId, EmergencyContactTypeID).ExecuteReader());
				}
				return _MS_EmergencyContactsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentAccountZoneTypeEvent class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentAccountZoneTypeEventCollection : ActiveList<MS_EquipmentAccountZoneTypeEvent, MS_EquipmentAccountZoneTypeEventCollection>
	{
		public static MS_EquipmentAccountZoneTypeEventCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentAccountZoneTypeEventCollection result = new MS_EquipmentAccountZoneTypeEventCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentAccountZoneTypeEvent item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentAccountZoneTypeEvents table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentAccountZoneTypeEvent : ActiveRecord<MS_EquipmentAccountZoneTypeEvent>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentAccountZoneTypeEvent()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentAccountZoneTypeEvents", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentAccountZoneTypeEventID = new TableSchema.TableColumn(schema);
				colvarEquipmentAccountZoneTypeEventID.ColumnName = "EquipmentAccountZoneTypeEventID";
				colvarEquipmentAccountZoneTypeEventID.DataType = DbType.Int32;
				colvarEquipmentAccountZoneTypeEventID.MaxLength = 0;
				colvarEquipmentAccountZoneTypeEventID.AutoIncrement = true;
				colvarEquipmentAccountZoneTypeEventID.IsNullable = false;
				colvarEquipmentAccountZoneTypeEventID.IsPrimaryKey = true;
				colvarEquipmentAccountZoneTypeEventID.IsForeignKey = false;
				colvarEquipmentAccountZoneTypeEventID.IsReadOnly = false;
				colvarEquipmentAccountZoneTypeEventID.DefaultSetting = @"";
				colvarEquipmentAccountZoneTypeEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentAccountZoneTypeEventID);

				TableSchema.TableColumn colvarEquipmentAccountZoneTypeId = new TableSchema.TableColumn(schema);
				colvarEquipmentAccountZoneTypeId.ColumnName = "EquipmentAccountZoneTypeId";
				colvarEquipmentAccountZoneTypeId.DataType = DbType.Int32;
				colvarEquipmentAccountZoneTypeId.MaxLength = 0;
				colvarEquipmentAccountZoneTypeId.AutoIncrement = false;
				colvarEquipmentAccountZoneTypeId.IsNullable = false;
				colvarEquipmentAccountZoneTypeId.IsPrimaryKey = false;
				colvarEquipmentAccountZoneTypeId.IsForeignKey = true;
				colvarEquipmentAccountZoneTypeId.IsReadOnly = false;
				colvarEquipmentAccountZoneTypeId.DefaultSetting = @"";
				colvarEquipmentAccountZoneTypeId.ForeignKeyTableName = "MS_EquipmentAccountZoneTypes";
				schema.Columns.Add(colvarEquipmentAccountZoneTypeId);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = true;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"";
				colvarMonitoringStationOSId.ForeignKeyTableName = "MS_MonitoringStationOSs";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarAccountEventId = new TableSchema.TableColumn(schema);
				colvarAccountEventId.ColumnName = "AccountEventId";
				colvarAccountEventId.DataType = DbType.Int32;
				colvarAccountEventId.MaxLength = 0;
				colvarAccountEventId.AutoIncrement = false;
				colvarAccountEventId.IsNullable = false;
				colvarAccountEventId.IsPrimaryKey = false;
				colvarAccountEventId.IsForeignKey = false;
				colvarAccountEventId.IsReadOnly = false;
				colvarAccountEventId.DefaultSetting = @"";
				colvarAccountEventId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountEventId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentAccountZoneTypeEvents",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentAccountZoneTypeEvent LoadFrom(MS_EquipmentAccountZoneTypeEvent item)
		{
			MS_EquipmentAccountZoneTypeEvent result = new MS_EquipmentAccountZoneTypeEvent();
			if (item.EquipmentAccountZoneTypeEventID != default(int)) {
				result.LoadByKey(item.EquipmentAccountZoneTypeEventID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EquipmentAccountZoneTypeEventID {
			get { return GetColumnValue<int>(Columns.EquipmentAccountZoneTypeEventID); }
			set {
				SetColumnValue(Columns.EquipmentAccountZoneTypeEventID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentAccountZoneTypeEventID));
			}
		}
		[DataMember]
		public int EquipmentAccountZoneTypeId {
			get { return GetColumnValue<int>(Columns.EquipmentAccountZoneTypeId); }
			set {
				SetColumnValue(Columns.EquipmentAccountZoneTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentAccountZoneTypeId));
			}
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set {
				SetColumnValue(Columns.MonitoringStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSId));
			}
		}
		[DataMember]
		public int AccountEventId {
			get { return GetColumnValue<int>(Columns.AccountEventId); }
			set {
				SetColumnValue(Columns.AccountEventId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountEventId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_EquipmentAccountZoneType _EquipmentAccountZoneType;
		//Relationship: FK_MS_EquipmentAccountZoneTypeEvents_MS_EquipmentAccountZoneTypes
		public MS_EquipmentAccountZoneType EquipmentAccountZoneType
		{
			get
			{
				if(_EquipmentAccountZoneType == null) {
					_EquipmentAccountZoneType = MS_EquipmentAccountZoneType.FetchByID(this.EquipmentAccountZoneTypeId);
				}
				return _EquipmentAccountZoneType;
			}
			set
			{
				SetColumnValue("EquipmentAccountZoneTypeId", value.EquipmentAccountZoneTypeID);
				_EquipmentAccountZoneType = value;
			}
		}

		private MS_MonitoringStationOss _MonitoringStationOS;
		//Relationship: FK_MS_EquipmentAccountZoneTypeEvents_MS_MonitoringStationOSs
		public MS_MonitoringStationOss MonitoringStationOS
		{
			get
			{
				if(_MonitoringStationOS == null) {
					_MonitoringStationOS = MS_MonitoringStationOss.FetchByID(this.MonitoringStationOSId);
				}
				return _MonitoringStationOS;
			}
			set
			{
				SetColumnValue("MonitoringStationOSId", value.MonitoringStationOSID);
				_MonitoringStationOS = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EquipmentAccountZoneTypeEventID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentAccountZoneTypeEventIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentAccountZoneTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountEventIdColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentAccountZoneTypeEventID = @"EquipmentAccountZoneTypeEventID";
			public static readonly string EquipmentAccountZoneTypeId = @"EquipmentAccountZoneTypeId";
			public static readonly string MonitoringStationOSId = @"MonitoringStationOSId";
			public static readonly string AccountEventId = @"AccountEventId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentAccountZoneTypeEventID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentAccountZoneType class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentAccountZoneTypeCollection : ActiveList<MS_EquipmentAccountZoneType, MS_EquipmentAccountZoneTypeCollection>
	{
		public static MS_EquipmentAccountZoneTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentAccountZoneTypeCollection result = new MS_EquipmentAccountZoneTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentAccountZoneType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentAccountZoneTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentAccountZoneType : ActiveRecord<MS_EquipmentAccountZoneType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentAccountZoneType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentAccountZoneTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentAccountZoneTypeID = new TableSchema.TableColumn(schema);
				colvarEquipmentAccountZoneTypeID.ColumnName = "EquipmentAccountZoneTypeID";
				colvarEquipmentAccountZoneTypeID.DataType = DbType.Int32;
				colvarEquipmentAccountZoneTypeID.MaxLength = 0;
				colvarEquipmentAccountZoneTypeID.AutoIncrement = true;
				colvarEquipmentAccountZoneTypeID.IsNullable = false;
				colvarEquipmentAccountZoneTypeID.IsPrimaryKey = true;
				colvarEquipmentAccountZoneTypeID.IsForeignKey = false;
				colvarEquipmentAccountZoneTypeID.IsReadOnly = false;
				colvarEquipmentAccountZoneTypeID.DefaultSetting = @"";
				colvarEquipmentAccountZoneTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentAccountZoneTypeID);

				TableSchema.TableColumn colvarEquipmentId = new TableSchema.TableColumn(schema);
				colvarEquipmentId.ColumnName = "EquipmentId";
				colvarEquipmentId.DataType = DbType.AnsiString;
				colvarEquipmentId.MaxLength = 50;
				colvarEquipmentId.AutoIncrement = false;
				colvarEquipmentId.IsNullable = false;
				colvarEquipmentId.IsPrimaryKey = false;
				colvarEquipmentId.IsForeignKey = true;
				colvarEquipmentId.IsReadOnly = false;
				colvarEquipmentId.DefaultSetting = @"";
				colvarEquipmentId.ForeignKeyTableName = "MS_Equipments";
				schema.Columns.Add(colvarEquipmentId);

				TableSchema.TableColumn colvarAccountZoneTypeId = new TableSchema.TableColumn(schema);
				colvarAccountZoneTypeId.ColumnName = "AccountZoneTypeId";
				colvarAccountZoneTypeId.DataType = DbType.AnsiString;
				colvarAccountZoneTypeId.MaxLength = 10;
				colvarAccountZoneTypeId.AutoIncrement = false;
				colvarAccountZoneTypeId.IsNullable = false;
				colvarAccountZoneTypeId.IsPrimaryKey = false;
				colvarAccountZoneTypeId.IsForeignKey = true;
				colvarAccountZoneTypeId.IsReadOnly = false;
				colvarAccountZoneTypeId.DefaultSetting = @"";
				colvarAccountZoneTypeId.ForeignKeyTableName = "MS_AccountZoneTypes";
				schema.Columns.Add(colvarAccountZoneTypeId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentAccountZoneTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentAccountZoneType LoadFrom(MS_EquipmentAccountZoneType item)
		{
			MS_EquipmentAccountZoneType result = new MS_EquipmentAccountZoneType();
			if (item.EquipmentAccountZoneTypeID != default(int)) {
				result.LoadByKey(item.EquipmentAccountZoneTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EquipmentAccountZoneTypeID {
			get { return GetColumnValue<int>(Columns.EquipmentAccountZoneTypeID); }
			set {
				SetColumnValue(Columns.EquipmentAccountZoneTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentAccountZoneTypeID));
			}
		}
		[DataMember]
		public string EquipmentId {
			get { return GetColumnValue<string>(Columns.EquipmentId); }
			set {
				SetColumnValue(Columns.EquipmentId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentId));
			}
		}
		[DataMember]
		public string AccountZoneTypeId {
			get { return GetColumnValue<string>(Columns.AccountZoneTypeId); }
			set {
				SetColumnValue(Columns.AccountZoneTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountZoneTypeId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AccountZoneType _AccountZoneType;
		//Relationship: FK_MS_EquipmentAccountZoneTypes_MS_AccountZoneTypes
		public MS_AccountZoneType AccountZoneType
		{
			get
			{
				if(_AccountZoneType == null) {
					_AccountZoneType = MS_AccountZoneType.FetchByID(this.AccountZoneTypeId);
				}
				return _AccountZoneType;
			}
			set
			{
				SetColumnValue("AccountZoneTypeId", value.AccountZoneTypeID);
				_AccountZoneType = value;
			}
		}

		private MS_Equipment _Equipment;
		//Relationship: FK_MS_EquipmentAccountZoneTypes_MS_Equipments
		public MS_Equipment Equipment
		{
			get
			{
				if(_Equipment == null) {
					_Equipment = MS_Equipment.FetchByID(this.EquipmentId);
				}
				return _Equipment;
			}
			set
			{
				SetColumnValue("EquipmentId", value.EquipmentID);
				_Equipment = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EquipmentId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentAccountZoneTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountZoneTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentAccountZoneTypeID = @"EquipmentAccountZoneTypeID";
			public static readonly string EquipmentId = @"EquipmentId";
			public static readonly string AccountZoneTypeId = @"AccountZoneTypeId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentAccountZoneTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_EquipmentAccountZoneTypeEventCollection _MS_EquipmentAccountZoneTypeEventsCol;
		//Relationship: FK_MS_EquipmentAccountZoneTypeEvents_MS_EquipmentAccountZoneTypes
		public MS_EquipmentAccountZoneTypeEventCollection MS_EquipmentAccountZoneTypeEventsCol
		{
			get
			{
				if(_MS_EquipmentAccountZoneTypeEventsCol == null) {
					_MS_EquipmentAccountZoneTypeEventsCol = new MS_EquipmentAccountZoneTypeEventCollection();
					_MS_EquipmentAccountZoneTypeEventsCol.LoadAndCloseReader(MS_EquipmentAccountZoneTypeEvent.Query()
						.WHERE(MS_EquipmentAccountZoneTypeEvent.Columns.EquipmentAccountZoneTypeId, EquipmentAccountZoneTypeID).ExecuteReader());
				}
				return _MS_EquipmentAccountZoneTypeEventsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentCellularVendor class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentCellularVendorCollection : ActiveList<MS_EquipmentCellularVendor, MS_EquipmentCellularVendorCollection>
	{
		public static MS_EquipmentCellularVendorCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentCellularVendorCollection result = new MS_EquipmentCellularVendorCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentCellularVendor item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentCellularVendors table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentCellularVendor : ActiveRecord<MS_EquipmentCellularVendor>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentCellularVendor()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentCellularVendors", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentID = new TableSchema.TableColumn(schema);
				colvarEquipmentID.ColumnName = "EquipmentID";
				colvarEquipmentID.DataType = DbType.AnsiString;
				colvarEquipmentID.MaxLength = 50;
				colvarEquipmentID.AutoIncrement = false;
				colvarEquipmentID.IsNullable = false;
				colvarEquipmentID.IsPrimaryKey = true;
				colvarEquipmentID.IsForeignKey = false;
				colvarEquipmentID.IsReadOnly = false;
				colvarEquipmentID.DefaultSetting = @"";
				colvarEquipmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentID);

				TableSchema.TableColumn colvarCellularProvidorName = new TableSchema.TableColumn(schema);
				colvarCellularProvidorName.ColumnName = "CellularProvidorName";
				colvarCellularProvidorName.DataType = DbType.AnsiString;
				colvarCellularProvidorName.MaxLength = 50;
				colvarCellularProvidorName.AutoIncrement = false;
				colvarCellularProvidorName.IsNullable = false;
				colvarCellularProvidorName.IsPrimaryKey = false;
				colvarCellularProvidorName.IsForeignKey = false;
				colvarCellularProvidorName.IsReadOnly = false;
				colvarCellularProvidorName.DefaultSetting = @"";
				colvarCellularProvidorName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularProvidorName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentCellularVendors",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentCellularVendor LoadFrom(MS_EquipmentCellularVendor item)
		{
			MS_EquipmentCellularVendor result = new MS_EquipmentCellularVendor();
			if (item.EquipmentID != default(string)) {
				result.LoadByKey(item.EquipmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string EquipmentID {
			get { return GetColumnValue<string>(Columns.EquipmentID); }
			set {
				SetColumnValue(Columns.EquipmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentID));
			}
		}
		[DataMember]
		public string CellularProvidorName {
			get { return GetColumnValue<string>(Columns.CellularProvidorName); }
			set {
				SetColumnValue(Columns.CellularProvidorName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellularProvidorName));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Equipment _Equipment;
		//Relationship: FK_MS_EquipmentCellularVendors_MS_Equipments
		public MS_Equipment Equipment
		{
			get
			{
				if(_Equipment == null) {
					_Equipment = MS_Equipment.FetchByID(this.EquipmentID);
				}
				return _Equipment;
			}
			set
			{
				SetColumnValue("EquipmentID", value.EquipmentID);
				_Equipment = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CellularProvidorName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CellularProvidorNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentID = @"EquipmentID";
			public static readonly string CellularProvidorName = @"CellularProvidorName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentExisting class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentExistingCollection : ActiveList<MS_EquipmentExisting, MS_EquipmentExistingCollection>
	{
		public static MS_EquipmentExistingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentExistingCollection result = new MS_EquipmentExistingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentExisting item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentExistings table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentExisting : ActiveRecord<MS_EquipmentExisting>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentExisting()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentExistings", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentExistingID = new TableSchema.TableColumn(schema);
				colvarEquipmentExistingID.ColumnName = "EquipmentExistingID";
				colvarEquipmentExistingID.DataType = DbType.Int32;
				colvarEquipmentExistingID.MaxLength = 0;
				colvarEquipmentExistingID.AutoIncrement = true;
				colvarEquipmentExistingID.IsNullable = false;
				colvarEquipmentExistingID.IsPrimaryKey = true;
				colvarEquipmentExistingID.IsForeignKey = false;
				colvarEquipmentExistingID.IsReadOnly = false;
				colvarEquipmentExistingID.DefaultSetting = @"";
				colvarEquipmentExistingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentExistingID);

				TableSchema.TableColumn colvarEquipmentId = new TableSchema.TableColumn(schema);
				colvarEquipmentId.ColumnName = "EquipmentId";
				colvarEquipmentId.DataType = DbType.AnsiString;
				colvarEquipmentId.MaxLength = 50;
				colvarEquipmentId.AutoIncrement = false;
				colvarEquipmentId.IsNullable = false;
				colvarEquipmentId.IsPrimaryKey = false;
				colvarEquipmentId.IsForeignKey = true;
				colvarEquipmentId.IsReadOnly = false;
				colvarEquipmentId.DefaultSetting = @"";
				colvarEquipmentId.ForeignKeyTableName = "MS_Equipments";
				schema.Columns.Add(colvarEquipmentId);

				TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
				colvarOrderNumber.ColumnName = "OrderNumber";
				colvarOrderNumber.DataType = DbType.Int16;
				colvarOrderNumber.MaxLength = 0;
				colvarOrderNumber.AutoIncrement = false;
				colvarOrderNumber.IsNullable = false;
				colvarOrderNumber.IsPrimaryKey = false;
				colvarOrderNumber.IsForeignKey = false;
				colvarOrderNumber.IsReadOnly = false;
				colvarOrderNumber.DefaultSetting = @"";
				colvarOrderNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNumber);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentExistings",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentExisting LoadFrom(MS_EquipmentExisting item)
		{
			MS_EquipmentExisting result = new MS_EquipmentExisting();
			if (item.EquipmentExistingID != default(int)) {
				result.LoadByKey(item.EquipmentExistingID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EquipmentExistingID {
			get { return GetColumnValue<int>(Columns.EquipmentExistingID); }
			set {
				SetColumnValue(Columns.EquipmentExistingID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentExistingID));
			}
		}
		[DataMember]
		public string EquipmentId {
			get { return GetColumnValue<string>(Columns.EquipmentId); }
			set {
				SetColumnValue(Columns.EquipmentId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentId));
			}
		}
		[DataMember]
		public short OrderNumber {
			get { return GetColumnValue<short>(Columns.OrderNumber); }
			set {
				SetColumnValue(Columns.OrderNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OrderNumber));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Equipment _Equipment;
		//Relationship: FK_MS_EquipmentExistings_MS_Equipments
		public MS_Equipment Equipment
		{
			get
			{
				if(_Equipment == null) {
					_Equipment = MS_Equipment.FetchByID(this.EquipmentId);
				}
				return _Equipment;
			}
			set
			{
				SetColumnValue("EquipmentId", value.EquipmentID);
				_Equipment = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EquipmentId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentExistingIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn OrderNumberColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentExistingID = @"EquipmentExistingID";
			public static readonly string EquipmentId = @"EquipmentId";
			public static readonly string OrderNumber = @"OrderNumber";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentExistingID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentLocation class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentLocationCollection : ActiveList<MS_EquipmentLocation, MS_EquipmentLocationCollection>
	{
		public static MS_EquipmentLocationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentLocationCollection result = new MS_EquipmentLocationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentLocation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentLocations table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentLocation : ActiveRecord<MS_EquipmentLocation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentLocation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentLocations", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentLocationID = new TableSchema.TableColumn(schema);
				colvarEquipmentLocationID.ColumnName = "EquipmentLocationID";
				colvarEquipmentLocationID.DataType = DbType.Int32;
				colvarEquipmentLocationID.MaxLength = 0;
				colvarEquipmentLocationID.AutoIncrement = true;
				colvarEquipmentLocationID.IsNullable = false;
				colvarEquipmentLocationID.IsPrimaryKey = true;
				colvarEquipmentLocationID.IsForeignKey = false;
				colvarEquipmentLocationID.IsReadOnly = false;
				colvarEquipmentLocationID.DefaultSetting = @"";
				colvarEquipmentLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentLocationID);

				TableSchema.TableColumn colvarEquipmentLocationDesc = new TableSchema.TableColumn(schema);
				colvarEquipmentLocationDesc.ColumnName = "EquipmentLocationDesc";
				colvarEquipmentLocationDesc.DataType = DbType.String;
				colvarEquipmentLocationDesc.MaxLength = 50;
				colvarEquipmentLocationDesc.AutoIncrement = false;
				colvarEquipmentLocationDesc.IsNullable = false;
				colvarEquipmentLocationDesc.IsPrimaryKey = false;
				colvarEquipmentLocationDesc.IsForeignKey = false;
				colvarEquipmentLocationDesc.IsReadOnly = false;
				colvarEquipmentLocationDesc.DefaultSetting = @"";
				colvarEquipmentLocationDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentLocationDesc);

				TableSchema.TableColumn colvarMonitronicsCode = new TableSchema.TableColumn(schema);
				colvarMonitronicsCode.ColumnName = "MonitronicsCode";
				colvarMonitronicsCode.DataType = DbType.AnsiString;
				colvarMonitronicsCode.MaxLength = 10;
				colvarMonitronicsCode.AutoIncrement = false;
				colvarMonitronicsCode.IsNullable = true;
				colvarMonitronicsCode.IsPrimaryKey = false;
				colvarMonitronicsCode.IsForeignKey = false;
				colvarMonitronicsCode.IsReadOnly = false;
				colvarMonitronicsCode.DefaultSetting = @"";
				colvarMonitronicsCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitronicsCode);

				TableSchema.TableColumn colvarCriticomCode = new TableSchema.TableColumn(schema);
				colvarCriticomCode.ColumnName = "CriticomCode";
				colvarCriticomCode.DataType = DbType.AnsiString;
				colvarCriticomCode.MaxLength = 10;
				colvarCriticomCode.AutoIncrement = false;
				colvarCriticomCode.IsNullable = true;
				colvarCriticomCode.IsPrimaryKey = false;
				colvarCriticomCode.IsForeignKey = false;
				colvarCriticomCode.IsReadOnly = false;
				colvarCriticomCode.DefaultSetting = @"";
				colvarCriticomCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCriticomCode);

				TableSchema.TableColumn colvarAvantGuardCode = new TableSchema.TableColumn(schema);
				colvarAvantGuardCode.ColumnName = "AvantGuardCode";
				colvarAvantGuardCode.DataType = DbType.AnsiString;
				colvarAvantGuardCode.MaxLength = 10;
				colvarAvantGuardCode.AutoIncrement = false;
				colvarAvantGuardCode.IsNullable = true;
				colvarAvantGuardCode.IsPrimaryKey = false;
				colvarAvantGuardCode.IsForeignKey = false;
				colvarAvantGuardCode.IsReadOnly = false;
				colvarAvantGuardCode.DefaultSetting = @"";
				colvarAvantGuardCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAvantGuardCode);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentLocations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentLocation LoadFrom(MS_EquipmentLocation item)
		{
			MS_EquipmentLocation result = new MS_EquipmentLocation();
			if (item.EquipmentLocationID != default(int)) {
				result.LoadByKey(item.EquipmentLocationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EquipmentLocationID {
			get { return GetColumnValue<int>(Columns.EquipmentLocationID); }
			set {
				SetColumnValue(Columns.EquipmentLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentLocationID));
			}
		}
		[DataMember]
		public string EquipmentLocationDesc {
			get { return GetColumnValue<string>(Columns.EquipmentLocationDesc); }
			set {
				SetColumnValue(Columns.EquipmentLocationDesc, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentLocationDesc));
			}
		}
		[DataMember]
		public string MonitronicsCode {
			get { return GetColumnValue<string>(Columns.MonitronicsCode); }
			set {
				SetColumnValue(Columns.MonitronicsCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitronicsCode));
			}
		}
		[DataMember]
		public string CriticomCode {
			get { return GetColumnValue<string>(Columns.CriticomCode); }
			set {
				SetColumnValue(Columns.CriticomCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CriticomCode));
			}
		}
		[DataMember]
		public string AvantGuardCode {
			get { return GetColumnValue<string>(Columns.AvantGuardCode); }
			set {
				SetColumnValue(Columns.AvantGuardCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AvantGuardCode));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return EquipmentLocationDesc;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentLocationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentLocationDescColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitronicsCodeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CriticomCodeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AvantGuardCodeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentLocationID = @"EquipmentLocationID";
			public static readonly string EquipmentLocationDesc = @"EquipmentLocationDesc";
			public static readonly string MonitronicsCode = @"MonitronicsCode";
			public static readonly string CriticomCode = @"CriticomCode";
			public static readonly string AvantGuardCode = @"AvantGuardCode";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentLocationID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountEquipmentCollection _MS_AccountEquipmentsCol;
		//Relationship: FK_MS_AccountEquipment_MS_EquipmentLocations
		public MS_AccountEquipmentCollection MS_AccountEquipmentsCol
		{
			get
			{
				if(_MS_AccountEquipmentsCol == null) {
					_MS_AccountEquipmentsCol = new MS_AccountEquipmentCollection();
					_MS_AccountEquipmentsCol.LoadAndCloseReader(MS_AccountEquipment.Query()
						.WHERE(MS_AccountEquipment.Columns.EquipmentLocationId, EquipmentLocationID).ExecuteReader());
				}
				return _MS_AccountEquipmentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentMonitoredType class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentMonitoredTypeCollection : ActiveList<MS_EquipmentMonitoredType, MS_EquipmentMonitoredTypeCollection>
	{
		public static MS_EquipmentMonitoredTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentMonitoredTypeCollection result = new MS_EquipmentMonitoredTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentMonitoredType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentMonitoredTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentMonitoredType : ActiveRecord<MS_EquipmentMonitoredType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentMonitoredType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentMonitoredTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentMonitoredTypeId = new TableSchema.TableColumn(schema);
				colvarEquipmentMonitoredTypeId.ColumnName = "EquipmentMonitoredTypeId";
				colvarEquipmentMonitoredTypeId.DataType = DbType.Int32;
				colvarEquipmentMonitoredTypeId.MaxLength = 0;
				colvarEquipmentMonitoredTypeId.AutoIncrement = false;
				colvarEquipmentMonitoredTypeId.IsNullable = false;
				colvarEquipmentMonitoredTypeId.IsPrimaryKey = true;
				colvarEquipmentMonitoredTypeId.IsForeignKey = false;
				colvarEquipmentMonitoredTypeId.IsReadOnly = false;
				colvarEquipmentMonitoredTypeId.DefaultSetting = @"";
				colvarEquipmentMonitoredTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentMonitoredTypeId);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarMonitronicsCode = new TableSchema.TableColumn(schema);
				colvarMonitronicsCode.ColumnName = "MonitronicsCode";
				colvarMonitronicsCode.DataType = DbType.String;
				colvarMonitronicsCode.MaxLength = 10;
				colvarMonitronicsCode.AutoIncrement = false;
				colvarMonitronicsCode.IsNullable = true;
				colvarMonitronicsCode.IsPrimaryKey = false;
				colvarMonitronicsCode.IsForeignKey = false;
				colvarMonitronicsCode.IsReadOnly = false;
				colvarMonitronicsCode.DefaultSetting = @"";
				colvarMonitronicsCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitronicsCode);

				TableSchema.TableColumn colvarSAICode = new TableSchema.TableColumn(schema);
				colvarSAICode.ColumnName = "SAICode";
				colvarSAICode.DataType = DbType.String;
				colvarSAICode.MaxLength = 10;
				colvarSAICode.AutoIncrement = false;
				colvarSAICode.IsNullable = true;
				colvarSAICode.IsPrimaryKey = false;
				colvarSAICode.IsForeignKey = false;
				colvarSAICode.IsReadOnly = false;
				colvarSAICode.DefaultSetting = @"";
				colvarSAICode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSAICode);

				TableSchema.TableColumn colvarCriticomCode = new TableSchema.TableColumn(schema);
				colvarCriticomCode.ColumnName = "CriticomCode";
				colvarCriticomCode.DataType = DbType.String;
				colvarCriticomCode.MaxLength = 10;
				colvarCriticomCode.AutoIncrement = false;
				colvarCriticomCode.IsNullable = true;
				colvarCriticomCode.IsPrimaryKey = false;
				colvarCriticomCode.IsForeignKey = false;
				colvarCriticomCode.IsReadOnly = false;
				colvarCriticomCode.DefaultSetting = @"";
				colvarCriticomCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCriticomCode);

				TableSchema.TableColumn colvarAvantGuardCode = new TableSchema.TableColumn(schema);
				colvarAvantGuardCode.ColumnName = "AvantGuardCode";
				colvarAvantGuardCode.DataType = DbType.String;
				colvarAvantGuardCode.MaxLength = 10;
				colvarAvantGuardCode.AutoIncrement = false;
				colvarAvantGuardCode.IsNullable = true;
				colvarAvantGuardCode.IsPrimaryKey = false;
				colvarAvantGuardCode.IsForeignKey = false;
				colvarAvantGuardCode.IsReadOnly = false;
				colvarAvantGuardCode.DefaultSetting = @"";
				colvarAvantGuardCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAvantGuardCode);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentMonitoredTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentMonitoredType LoadFrom(MS_EquipmentMonitoredType item)
		{
			MS_EquipmentMonitoredType result = new MS_EquipmentMonitoredType();
			if (item.EquipmentMonitoredTypeId != default(int)) {
				result.LoadByKey(item.EquipmentMonitoredTypeId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EquipmentMonitoredTypeId {
			get { return GetColumnValue<int>(Columns.EquipmentMonitoredTypeId); }
			set {
				SetColumnValue(Columns.EquipmentMonitoredTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentMonitoredTypeId));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string MonitronicsCode {
			get { return GetColumnValue<string>(Columns.MonitronicsCode); }
			set {
				SetColumnValue(Columns.MonitronicsCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitronicsCode));
			}
		}
		[DataMember]
		public string SAICode {
			get { return GetColumnValue<string>(Columns.SAICode); }
			set {
				SetColumnValue(Columns.SAICode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SAICode));
			}
		}
		[DataMember]
		public string CriticomCode {
			get { return GetColumnValue<string>(Columns.CriticomCode); }
			set {
				SetColumnValue(Columns.CriticomCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CriticomCode));
			}
		}
		[DataMember]
		public string AvantGuardCode {
			get { return GetColumnValue<string>(Columns.AvantGuardCode); }
			set {
				SetColumnValue(Columns.AvantGuardCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AvantGuardCode));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentMonitoredTypeIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitronicsCodeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SAICodeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CriticomCodeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AvantGuardCodeColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentMonitoredTypeId = @"EquipmentMonitoredTypeId";
			public static readonly string Description = @"Description";
			public static readonly string MonitronicsCode = @"MonitronicsCode";
			public static readonly string SAICode = @"SAICode";
			public static readonly string CriticomCode = @"CriticomCode";
			public static readonly string AvantGuardCode = @"AvantGuardCode";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentMonitoredTypeId; }
		}
		*/

		#region Foreign Collections

		private MS_EquipmentCollection _MS_EquipmentsCol;
		//Relationship: FK_MS_Equipments_MS_EquipmentMonitoredTypes
		public MS_EquipmentCollection MS_EquipmentsCol
		{
			get
			{
				if(_MS_EquipmentsCol == null) {
					_MS_EquipmentsCol = new MS_EquipmentCollection();
					_MS_EquipmentsCol.LoadAndCloseReader(MS_Equipment.Query()
						.WHERE(MS_Equipment.Columns.EquipmentMonitoredTypeId, EquipmentMonitoredTypeId).ExecuteReader());
				}
				return _MS_EquipmentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentMonitronicsCellProvider class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentMonitronicsCellProviderCollection : ActiveList<MS_EquipmentMonitronicsCellProvider, MS_EquipmentMonitronicsCellProviderCollection>
	{
		public static MS_EquipmentMonitronicsCellProviderCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentMonitronicsCellProviderCollection result = new MS_EquipmentMonitronicsCellProviderCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentMonitronicsCellProvider item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentMonitronicsCellProviders table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentMonitronicsCellProvider : ActiveRecord<MS_EquipmentMonitronicsCellProvider>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentMonitronicsCellProvider()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentMonitronicsCellProviders", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentID = new TableSchema.TableColumn(schema);
				colvarEquipmentID.ColumnName = "EquipmentID";
				colvarEquipmentID.DataType = DbType.AnsiString;
				colvarEquipmentID.MaxLength = 50;
				colvarEquipmentID.AutoIncrement = false;
				colvarEquipmentID.IsNullable = false;
				colvarEquipmentID.IsPrimaryKey = true;
				colvarEquipmentID.IsForeignKey = false;
				colvarEquipmentID.IsReadOnly = false;
				colvarEquipmentID.DefaultSetting = @"";
				colvarEquipmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentID);

				TableSchema.TableColumn colvarEntityOptionId = new TableSchema.TableColumn(schema);
				colvarEntityOptionId.ColumnName = "EntityOptionId";
				colvarEntityOptionId.DataType = DbType.Int32;
				colvarEntityOptionId.MaxLength = 0;
				colvarEntityOptionId.AutoIncrement = false;
				colvarEntityOptionId.IsNullable = false;
				colvarEntityOptionId.IsPrimaryKey = false;
				colvarEntityOptionId.IsForeignKey = true;
				colvarEntityOptionId.IsReadOnly = false;
				colvarEntityOptionId.DefaultSetting = @"";
				colvarEntityOptionId.ForeignKeyTableName = "MS_MonitronicsEntityOptions";
				schema.Columns.Add(colvarEntityOptionId);

				TableSchema.TableColumn colvarCellProv = new TableSchema.TableColumn(schema);
				colvarCellProv.ColumnName = "CellProv";
				colvarCellProv.DataType = DbType.AnsiString;
				colvarCellProv.MaxLength = 50;
				colvarCellProv.AutoIncrement = false;
				colvarCellProv.IsNullable = false;
				colvarCellProv.IsPrimaryKey = false;
				colvarCellProv.IsForeignKey = false;
				colvarCellProv.IsReadOnly = false;
				colvarCellProv.DefaultSetting = @"((147))";
				colvarCellProv.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellProv);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentMonitronicsCellProviders",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentMonitronicsCellProvider LoadFrom(MS_EquipmentMonitronicsCellProvider item)
		{
			MS_EquipmentMonitronicsCellProvider result = new MS_EquipmentMonitronicsCellProvider();
			if (item.EquipmentID != default(string)) {
				result.LoadByKey(item.EquipmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string EquipmentID {
			get { return GetColumnValue<string>(Columns.EquipmentID); }
			set {
				SetColumnValue(Columns.EquipmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentID));
			}
		}
		[DataMember]
		public int EntityOptionId {
			get { return GetColumnValue<int>(Columns.EntityOptionId); }
			set {
				SetColumnValue(Columns.EntityOptionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EntityOptionId));
			}
		}
		[DataMember]
		public string CellProv {
			get { return GetColumnValue<string>(Columns.CellProv); }
			set {
				SetColumnValue(Columns.CellProv, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellProv));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Equipment _Equipment;
		//Relationship: FK_MS_EquipmentMonitronicsCellProviders_MS_Equipments
		public MS_Equipment Equipment
		{
			get
			{
				if(_Equipment == null) {
					_Equipment = MS_Equipment.FetchByID(this.EquipmentID);
				}
				return _Equipment;
			}
			set
			{
				SetColumnValue("EquipmentID", value.EquipmentID);
				_Equipment = value;
			}
		}

		private MS_MonitronicsEntityOption _EntityOption;
		//Relationship: FK_MS_EquipmentMonitronicsCellProviders_MS_MonitronicsEntityOptions
		public MS_MonitronicsEntityOption EntityOption
		{
			get
			{
				if(_EntityOption == null) {
					_EntityOption = MS_MonitronicsEntityOption.FetchByID(this.EntityOptionId);
				}
				return _EntityOption;
			}
			set
			{
				SetColumnValue("EntityOptionId", value.EntityOptionID);
				_EntityOption = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EquipmentID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EntityOptionIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CellProvColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentID = @"EquipmentID";
			public static readonly string EntityOptionId = @"EntityOptionId";
			public static readonly string CellProv = @"CellProv";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentMonitronicsCellService class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentMonitronicsCellServiceCollection : ActiveList<MS_EquipmentMonitronicsCellService, MS_EquipmentMonitronicsCellServiceCollection>
	{
		public static MS_EquipmentMonitronicsCellServiceCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentMonitronicsCellServiceCollection result = new MS_EquipmentMonitronicsCellServiceCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentMonitronicsCellService item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentMonitronicsCellServices table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentMonitronicsCellService : ActiveRecord<MS_EquipmentMonitronicsCellService>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentMonitronicsCellService()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentMonitronicsCellServices", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentID = new TableSchema.TableColumn(schema);
				colvarEquipmentID.ColumnName = "EquipmentID";
				colvarEquipmentID.DataType = DbType.AnsiString;
				colvarEquipmentID.MaxLength = 50;
				colvarEquipmentID.AutoIncrement = false;
				colvarEquipmentID.IsNullable = false;
				colvarEquipmentID.IsPrimaryKey = true;
				colvarEquipmentID.IsForeignKey = false;
				colvarEquipmentID.IsReadOnly = false;
				colvarEquipmentID.DefaultSetting = @"";
				colvarEquipmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentID);

				TableSchema.TableColumn colvarOptionId = new TableSchema.TableColumn(schema);
				colvarOptionId.ColumnName = "OptionId";
				colvarOptionId.DataType = DbType.AnsiString;
				colvarOptionId.MaxLength = 50;
				colvarOptionId.AutoIncrement = false;
				colvarOptionId.IsNullable = false;
				colvarOptionId.IsPrimaryKey = false;
				colvarOptionId.IsForeignKey = true;
				colvarOptionId.IsReadOnly = false;
				colvarOptionId.DefaultSetting = @"";
				colvarOptionId.ForeignKeyTableName = "MS_MonitronicsEntityCellServices";
				schema.Columns.Add(colvarOptionId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentMonitronicsCellServices",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentMonitronicsCellService LoadFrom(MS_EquipmentMonitronicsCellService item)
		{
			MS_EquipmentMonitronicsCellService result = new MS_EquipmentMonitronicsCellService();
			if (item.EquipmentID != default(string)) {
				result.LoadByKey(item.EquipmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string EquipmentID {
			get { return GetColumnValue<string>(Columns.EquipmentID); }
			set {
				SetColumnValue(Columns.EquipmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentID));
			}
		}
		[DataMember]
		public string OptionId {
			get { return GetColumnValue<string>(Columns.OptionId); }
			set {
				SetColumnValue(Columns.OptionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OptionId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Equipment _Equipment;
		//Relationship: FK_MS_EquipmentMonitronicsCellServices_MS_Equipments
		public MS_Equipment Equipment
		{
			get
			{
				if(_Equipment == null) {
					_Equipment = MS_Equipment.FetchByID(this.EquipmentID);
				}
				return _Equipment;
			}
			set
			{
				SetColumnValue("EquipmentID", value.EquipmentID);
				_Equipment = value;
			}
		}

		private MS_MonitronicsEntityCellService _Option;
		//Relationship: FK_MS_EquipmentMonitronicsCellServices_MS_MonitronicsEntityCellServices
		public MS_MonitronicsEntityCellService Option
		{
			get
			{
				if(_Option == null) {
					_Option = MS_MonitronicsEntityCellService.FetchByID(this.OptionId);
				}
				return _Option;
			}
			set
			{
				SetColumnValue("OptionId", value.OptionID);
				_Option = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return OptionId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn OptionIdColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentID = @"EquipmentID";
			public static readonly string OptionId = @"OptionId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentMonitronicsDevice class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentMonitronicsDeviceCollection : ActiveList<MS_EquipmentMonitronicsDevice, MS_EquipmentMonitronicsDeviceCollection>
	{
		public static MS_EquipmentMonitronicsDeviceCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentMonitronicsDeviceCollection result = new MS_EquipmentMonitronicsDeviceCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentMonitronicsDevice item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentMonitronicsDevices table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentMonitronicsDevice : ActiveRecord<MS_EquipmentMonitronicsDevice>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentMonitronicsDevice()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentMonitronicsDevices", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentID = new TableSchema.TableColumn(schema);
				colvarEquipmentID.ColumnName = "EquipmentID";
				colvarEquipmentID.DataType = DbType.AnsiString;
				colvarEquipmentID.MaxLength = 50;
				colvarEquipmentID.AutoIncrement = false;
				colvarEquipmentID.IsNullable = false;
				colvarEquipmentID.IsPrimaryKey = true;
				colvarEquipmentID.IsForeignKey = false;
				colvarEquipmentID.IsReadOnly = false;
				colvarEquipmentID.DefaultSetting = @"";
				colvarEquipmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentID);

				TableSchema.TableColumn colvarDeviceId = new TableSchema.TableColumn(schema);
				colvarDeviceId.ColumnName = "DeviceId";
				colvarDeviceId.DataType = DbType.AnsiString;
				colvarDeviceId.MaxLength = 50;
				colvarDeviceId.AutoIncrement = false;
				colvarDeviceId.IsNullable = false;
				colvarDeviceId.IsPrimaryKey = false;
				colvarDeviceId.IsForeignKey = false;
				colvarDeviceId.IsReadOnly = false;
				colvarDeviceId.DefaultSetting = @"";
				colvarDeviceId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeviceId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentMonitronicsDevices",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentMonitronicsDevice LoadFrom(MS_EquipmentMonitronicsDevice item)
		{
			MS_EquipmentMonitronicsDevice result = new MS_EquipmentMonitronicsDevice();
			if (item.EquipmentID != default(string)) {
				result.LoadByKey(item.EquipmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string EquipmentID {
			get { return GetColumnValue<string>(Columns.EquipmentID); }
			set {
				SetColumnValue(Columns.EquipmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentID));
			}
		}
		[DataMember]
		public string DeviceId {
			get { return GetColumnValue<string>(Columns.DeviceId); }
			set {
				SetColumnValue(Columns.DeviceId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DeviceId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Equipment _Equipment;
		//Relationship: FK_MS_EquipmentMonitronicsDevices_MS_Equipments
		public MS_Equipment Equipment
		{
			get
			{
				if(_Equipment == null) {
					_Equipment = MS_Equipment.FetchByID(this.EquipmentID);
				}
				return _Equipment;
			}
			set
			{
				SetColumnValue("EquipmentID", value.EquipmentID);
				_Equipment = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return DeviceId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DeviceIdColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentID = @"EquipmentID";
			public static readonly string DeviceId = @"DeviceId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentMostFrequent class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentMostFrequentCollection : ActiveList<MS_EquipmentMostFrequent, MS_EquipmentMostFrequentCollection>
	{
		public static MS_EquipmentMostFrequentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentMostFrequentCollection result = new MS_EquipmentMostFrequentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentMostFrequent item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentMostFrequents table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentMostFrequent : ActiveRecord<MS_EquipmentMostFrequent>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentMostFrequent()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentMostFrequents", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentMostFrequentID = new TableSchema.TableColumn(schema);
				colvarEquipmentMostFrequentID.ColumnName = "EquipmentMostFrequentID";
				colvarEquipmentMostFrequentID.DataType = DbType.Int32;
				colvarEquipmentMostFrequentID.MaxLength = 0;
				colvarEquipmentMostFrequentID.AutoIncrement = true;
				colvarEquipmentMostFrequentID.IsNullable = false;
				colvarEquipmentMostFrequentID.IsPrimaryKey = true;
				colvarEquipmentMostFrequentID.IsForeignKey = false;
				colvarEquipmentMostFrequentID.IsReadOnly = false;
				colvarEquipmentMostFrequentID.DefaultSetting = @"";
				colvarEquipmentMostFrequentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentMostFrequentID);

				TableSchema.TableColumn colvarEquipmentId = new TableSchema.TableColumn(schema);
				colvarEquipmentId.ColumnName = "EquipmentId";
				colvarEquipmentId.DataType = DbType.AnsiString;
				colvarEquipmentId.MaxLength = 50;
				colvarEquipmentId.AutoIncrement = false;
				colvarEquipmentId.IsNullable = false;
				colvarEquipmentId.IsPrimaryKey = false;
				colvarEquipmentId.IsForeignKey = true;
				colvarEquipmentId.IsReadOnly = false;
				colvarEquipmentId.DefaultSetting = @"";
				colvarEquipmentId.ForeignKeyTableName = "MS_Equipments";
				schema.Columns.Add(colvarEquipmentId);

				TableSchema.TableColumn colvarOrderNumber = new TableSchema.TableColumn(schema);
				colvarOrderNumber.ColumnName = "OrderNumber";
				colvarOrderNumber.DataType = DbType.Int16;
				colvarOrderNumber.MaxLength = 0;
				colvarOrderNumber.AutoIncrement = false;
				colvarOrderNumber.IsNullable = false;
				colvarOrderNumber.IsPrimaryKey = false;
				colvarOrderNumber.IsForeignKey = false;
				colvarOrderNumber.IsReadOnly = false;
				colvarOrderNumber.DefaultSetting = @"";
				colvarOrderNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderNumber);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentMostFrequents",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentMostFrequent LoadFrom(MS_EquipmentMostFrequent item)
		{
			MS_EquipmentMostFrequent result = new MS_EquipmentMostFrequent();
			if (item.EquipmentMostFrequentID != default(int)) {
				result.LoadByKey(item.EquipmentMostFrequentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EquipmentMostFrequentID {
			get { return GetColumnValue<int>(Columns.EquipmentMostFrequentID); }
			set {
				SetColumnValue(Columns.EquipmentMostFrequentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentMostFrequentID));
			}
		}
		[DataMember]
		public string EquipmentId {
			get { return GetColumnValue<string>(Columns.EquipmentId); }
			set {
				SetColumnValue(Columns.EquipmentId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentId));
			}
		}
		[DataMember]
		public short OrderNumber {
			get { return GetColumnValue<short>(Columns.OrderNumber); }
			set {
				SetColumnValue(Columns.OrderNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OrderNumber));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Equipment _Equipment;
		//Relationship: FK_MS_EquipmentMostFrequents_MS_Equipments
		public MS_Equipment Equipment
		{
			get
			{
				if(_Equipment == null) {
					_Equipment = MS_Equipment.FetchByID(this.EquipmentId);
				}
				return _Equipment;
			}
			set
			{
				SetColumnValue("EquipmentId", value.EquipmentID);
				_Equipment = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EquipmentId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentMostFrequentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn OrderNumberColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentMostFrequentID = @"EquipmentMostFrequentID";
			public static readonly string EquipmentId = @"EquipmentId";
			public static readonly string OrderNumber = @"OrderNumber";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentMostFrequentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentPanelDefaultZone class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentPanelDefaultZoneCollection : ActiveList<MS_EquipmentPanelDefaultZone, MS_EquipmentPanelDefaultZoneCollection>
	{
		public static MS_EquipmentPanelDefaultZoneCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentPanelDefaultZoneCollection result = new MS_EquipmentPanelDefaultZoneCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentPanelDefaultZone item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentPanelDefaultZones table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentPanelDefaultZone : ActiveRecord<MS_EquipmentPanelDefaultZone>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentPanelDefaultZone()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentPanelDefaultZones", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentPanelDefaultZonesID = new TableSchema.TableColumn(schema);
				colvarEquipmentPanelDefaultZonesID.ColumnName = "EquipmentPanelDefaultZonesID";
				colvarEquipmentPanelDefaultZonesID.DataType = DbType.Int32;
				colvarEquipmentPanelDefaultZonesID.MaxLength = 0;
				colvarEquipmentPanelDefaultZonesID.AutoIncrement = false;
				colvarEquipmentPanelDefaultZonesID.IsNullable = false;
				colvarEquipmentPanelDefaultZonesID.IsPrimaryKey = true;
				colvarEquipmentPanelDefaultZonesID.IsForeignKey = false;
				colvarEquipmentPanelDefaultZonesID.IsReadOnly = false;
				colvarEquipmentPanelDefaultZonesID.DefaultSetting = @"";
				colvarEquipmentPanelDefaultZonesID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentPanelDefaultZonesID);

				TableSchema.TableColumn colvarZone = new TableSchema.TableColumn(schema);
				colvarZone.ColumnName = "Zone";
				colvarZone.DataType = DbType.AnsiStringFixedLength;
				colvarZone.MaxLength = 3;
				colvarZone.AutoIncrement = false;
				colvarZone.IsNullable = false;
				colvarZone.IsPrimaryKey = false;
				colvarZone.IsForeignKey = false;
				colvarZone.IsReadOnly = false;
				colvarZone.DefaultSetting = @"";
				colvarZone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZone);

				TableSchema.TableColumn colvarEquipmentPanelTypeID = new TableSchema.TableColumn(schema);
				colvarEquipmentPanelTypeID.ColumnName = "EquipmentPanelTypeID";
				colvarEquipmentPanelTypeID.DataType = DbType.Int32;
				colvarEquipmentPanelTypeID.MaxLength = 0;
				colvarEquipmentPanelTypeID.AutoIncrement = false;
				colvarEquipmentPanelTypeID.IsNullable = false;
				colvarEquipmentPanelTypeID.IsPrimaryKey = false;
				colvarEquipmentPanelTypeID.IsForeignKey = true;
				colvarEquipmentPanelTypeID.IsReadOnly = false;
				colvarEquipmentPanelTypeID.DefaultSetting = @"";
				colvarEquipmentPanelTypeID.ForeignKeyTableName = "MS_EquipmentPanelTypes";
				schema.Columns.Add(colvarEquipmentPanelTypeID);

				TableSchema.TableColumn colvarDefaultEventID = new TableSchema.TableColumn(schema);
				colvarDefaultEventID.ColumnName = "DefaultEventID";
				colvarDefaultEventID.DataType = DbType.Int32;
				colvarDefaultEventID.MaxLength = 0;
				colvarDefaultEventID.AutoIncrement = false;
				colvarDefaultEventID.IsNullable = true;
				colvarDefaultEventID.IsPrimaryKey = false;
				colvarDefaultEventID.IsForeignKey = false;
				colvarDefaultEventID.IsReadOnly = false;
				colvarDefaultEventID.DefaultSetting = @"";
				colvarDefaultEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultEventID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentPanelDefaultZones",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentPanelDefaultZone LoadFrom(MS_EquipmentPanelDefaultZone item)
		{
			MS_EquipmentPanelDefaultZone result = new MS_EquipmentPanelDefaultZone();
			if (item.EquipmentPanelDefaultZonesID != default(int)) {
				result.LoadByKey(item.EquipmentPanelDefaultZonesID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EquipmentPanelDefaultZonesID {
			get { return GetColumnValue<int>(Columns.EquipmentPanelDefaultZonesID); }
			set {
				SetColumnValue(Columns.EquipmentPanelDefaultZonesID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentPanelDefaultZonesID));
			}
		}
		[DataMember]
		public string Zone {
			get { return GetColumnValue<string>(Columns.Zone); }
			set {
				SetColumnValue(Columns.Zone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Zone));
			}
		}
		[DataMember]
		public int EquipmentPanelTypeID {
			get { return GetColumnValue<int>(Columns.EquipmentPanelTypeID); }
			set {
				SetColumnValue(Columns.EquipmentPanelTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentPanelTypeID));
			}
		}
		[DataMember]
		public int? DefaultEventID {
			get { return GetColumnValue<int?>(Columns.DefaultEventID); }
			set {
				SetColumnValue(Columns.DefaultEventID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultEventID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_EquipmentPanelType _EquipmentPanelType;
		//Relationship: FK_MS_EquipmentPanelDefaultZones_MS_EquipmentPanelType
		public MS_EquipmentPanelType EquipmentPanelType
		{
			get
			{
				if(_EquipmentPanelType == null) {
					_EquipmentPanelType = MS_EquipmentPanelType.FetchByID(this.EquipmentPanelTypeID);
				}
				return _EquipmentPanelType;
			}
			set
			{
				SetColumnValue("EquipmentPanelTypeID", value.EquipmentPanelTypeId);
				_EquipmentPanelType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Zone;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentPanelDefaultZonesIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ZoneColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn EquipmentPanelTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DefaultEventIDColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentPanelDefaultZonesID = @"EquipmentPanelDefaultZonesID";
			public static readonly string Zone = @"Zone";
			public static readonly string EquipmentPanelTypeID = @"EquipmentPanelTypeID";
			public static readonly string DefaultEventID = @"DefaultEventID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentPanelDefaultZonesID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentPanelType class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentPanelTypeCollection : ActiveList<MS_EquipmentPanelType, MS_EquipmentPanelTypeCollection>
	{
		public static MS_EquipmentPanelTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentPanelTypeCollection result = new MS_EquipmentPanelTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentPanelType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentPanelTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentPanelType : ActiveRecord<MS_EquipmentPanelType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentPanelType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentPanelTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentPanelTypeId = new TableSchema.TableColumn(schema);
				colvarEquipmentPanelTypeId.ColumnName = "EquipmentPanelTypeId";
				colvarEquipmentPanelTypeId.DataType = DbType.Int32;
				colvarEquipmentPanelTypeId.MaxLength = 0;
				colvarEquipmentPanelTypeId.AutoIncrement = false;
				colvarEquipmentPanelTypeId.IsNullable = false;
				colvarEquipmentPanelTypeId.IsPrimaryKey = true;
				colvarEquipmentPanelTypeId.IsForeignKey = false;
				colvarEquipmentPanelTypeId.IsReadOnly = false;
				colvarEquipmentPanelTypeId.DefaultSetting = @"";
				colvarEquipmentPanelTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentPanelTypeId);

				TableSchema.TableColumn colvarPanelTypeName = new TableSchema.TableColumn(schema);
				colvarPanelTypeName.ColumnName = "PanelTypeName";
				colvarPanelTypeName.DataType = DbType.AnsiString;
				colvarPanelTypeName.MaxLength = 50;
				colvarPanelTypeName.AutoIncrement = false;
				colvarPanelTypeName.IsNullable = false;
				colvarPanelTypeName.IsPrimaryKey = false;
				colvarPanelTypeName.IsForeignKey = false;
				colvarPanelTypeName.IsReadOnly = false;
				colvarPanelTypeName.DefaultSetting = @"";
				colvarPanelTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeName);

				TableSchema.TableColumn colvarAvantGuardCode = new TableSchema.TableColumn(schema);
				colvarAvantGuardCode.ColumnName = "AvantGuardCode";
				colvarAvantGuardCode.DataType = DbType.AnsiString;
				colvarAvantGuardCode.MaxLength = 20;
				colvarAvantGuardCode.AutoIncrement = false;
				colvarAvantGuardCode.IsNullable = true;
				colvarAvantGuardCode.IsPrimaryKey = false;
				colvarAvantGuardCode.IsForeignKey = false;
				colvarAvantGuardCode.IsReadOnly = false;
				colvarAvantGuardCode.DefaultSetting = @"";
				colvarAvantGuardCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAvantGuardCode);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentPanelTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentPanelType LoadFrom(MS_EquipmentPanelType item)
		{
			MS_EquipmentPanelType result = new MS_EquipmentPanelType();
			if (item.EquipmentPanelTypeId != default(int)) {
				result.LoadByKey(item.EquipmentPanelTypeId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EquipmentPanelTypeId {
			get { return GetColumnValue<int>(Columns.EquipmentPanelTypeId); }
			set {
				SetColumnValue(Columns.EquipmentPanelTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentPanelTypeId));
			}
		}
		[DataMember]
		public string PanelTypeName {
			get { return GetColumnValue<string>(Columns.PanelTypeName); }
			set {
				SetColumnValue(Columns.PanelTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeName));
			}
		}
		[DataMember]
		public string AvantGuardCode {
			get { return GetColumnValue<string>(Columns.AvantGuardCode); }
			set {
				SetColumnValue(Columns.AvantGuardCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AvantGuardCode));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return PanelTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentPanelTypeIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PanelTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AvantGuardCodeColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentPanelTypeId = @"EquipmentPanelTypeId";
			public static readonly string PanelTypeName = @"PanelTypeName";
			public static readonly string AvantGuardCode = @"AvantGuardCode";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentPanelTypeId; }
		}
		*/

		#region Foreign Collections

		private MS_EquipmentPanelDefaultZoneCollection _MS_EquipmentPanelDefaultZonesCol;
		//Relationship: FK_MS_EquipmentPanelDefaultZones_MS_EquipmentPanelType
		public MS_EquipmentPanelDefaultZoneCollection MS_EquipmentPanelDefaultZonesCol
		{
			get
			{
				if(_MS_EquipmentPanelDefaultZonesCol == null) {
					_MS_EquipmentPanelDefaultZonesCol = new MS_EquipmentPanelDefaultZoneCollection();
					_MS_EquipmentPanelDefaultZonesCol.LoadAndCloseReader(MS_EquipmentPanelDefaultZone.Query()
						.WHERE(MS_EquipmentPanelDefaultZone.Columns.EquipmentPanelTypeID, EquipmentPanelTypeId).ExecuteReader());
				}
				return _MS_EquipmentPanelDefaultZonesCol;
			}
		}

		private MS_EquipmentCollection _MS_EquipmentsCol;
		//Relationship: FK_MS_Equipments_MS_EquipmentPanelTypes
		public MS_EquipmentCollection MS_EquipmentsCol
		{
			get
			{
				if(_MS_EquipmentsCol == null) {
					_MS_EquipmentsCol = new MS_EquipmentCollection();
					_MS_EquipmentsCol.LoadAndCloseReader(MS_Equipment.Query()
						.WHERE(MS_Equipment.Columns.EquipmentPanelTypeId, EquipmentPanelTypeId).ExecuteReader());
				}
				return _MS_EquipmentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_Equipment class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentCollection : ActiveList<MS_Equipment, MS_EquipmentCollection>
	{
		public static MS_EquipmentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentCollection result = new MS_EquipmentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_Equipment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_Equipments table.
	/// </summary>
	[DataContract]
	public partial class MS_Equipment : ActiveRecord<MS_Equipment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_Equipment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_Equipments", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentID = new TableSchema.TableColumn(schema);
				colvarEquipmentID.ColumnName = "EquipmentID";
				colvarEquipmentID.DataType = DbType.AnsiString;
				colvarEquipmentID.MaxLength = 50;
				colvarEquipmentID.AutoIncrement = false;
				colvarEquipmentID.IsNullable = false;
				colvarEquipmentID.IsPrimaryKey = true;
				colvarEquipmentID.IsForeignKey = false;
				colvarEquipmentID.IsReadOnly = false;
				colvarEquipmentID.DefaultSetting = @"";
				colvarEquipmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentID);

				TableSchema.TableColumn colvarEquipmentMonitoredTypeId = new TableSchema.TableColumn(schema);
				colvarEquipmentMonitoredTypeId.ColumnName = "EquipmentMonitoredTypeId";
				colvarEquipmentMonitoredTypeId.DataType = DbType.Int32;
				colvarEquipmentMonitoredTypeId.MaxLength = 0;
				colvarEquipmentMonitoredTypeId.AutoIncrement = false;
				colvarEquipmentMonitoredTypeId.IsNullable = true;
				colvarEquipmentMonitoredTypeId.IsPrimaryKey = false;
				colvarEquipmentMonitoredTypeId.IsForeignKey = true;
				colvarEquipmentMonitoredTypeId.IsReadOnly = false;
				colvarEquipmentMonitoredTypeId.DefaultSetting = @"";
				colvarEquipmentMonitoredTypeId.ForeignKeyTableName = "MS_EquipmentMonitoredTypes";
				schema.Columns.Add(colvarEquipmentMonitoredTypeId);

				TableSchema.TableColumn colvarEquipmentTypeId = new TableSchema.TableColumn(schema);
				colvarEquipmentTypeId.ColumnName = "EquipmentTypeId";
				colvarEquipmentTypeId.DataType = DbType.Int32;
				colvarEquipmentTypeId.MaxLength = 0;
				colvarEquipmentTypeId.AutoIncrement = false;
				colvarEquipmentTypeId.IsNullable = true;
				colvarEquipmentTypeId.IsPrimaryKey = false;
				colvarEquipmentTypeId.IsForeignKey = true;
				colvarEquipmentTypeId.IsReadOnly = false;
				colvarEquipmentTypeId.DefaultSetting = @"";
				colvarEquipmentTypeId.ForeignKeyTableName = "MS_EquipmentTypes";
				schema.Columns.Add(colvarEquipmentTypeId);

				TableSchema.TableColumn colvarAccountZoneTypeId = new TableSchema.TableColumn(schema);
				colvarAccountZoneTypeId.ColumnName = "AccountZoneTypeId";
				colvarAccountZoneTypeId.DataType = DbType.AnsiString;
				colvarAccountZoneTypeId.MaxLength = 10;
				colvarAccountZoneTypeId.AutoIncrement = false;
				colvarAccountZoneTypeId.IsNullable = false;
				colvarAccountZoneTypeId.IsPrimaryKey = false;
				colvarAccountZoneTypeId.IsForeignKey = true;
				colvarAccountZoneTypeId.IsReadOnly = false;
				colvarAccountZoneTypeId.DefaultSetting = @"";
				colvarAccountZoneTypeId.ForeignKeyTableName = "MS_AccountZoneTypes";
				schema.Columns.Add(colvarAccountZoneTypeId);

				TableSchema.TableColumn colvarAccountEventId = new TableSchema.TableColumn(schema);
				colvarAccountEventId.ColumnName = "AccountEventId";
				colvarAccountEventId.DataType = DbType.Int32;
				colvarAccountEventId.MaxLength = 0;
				colvarAccountEventId.AutoIncrement = false;
				colvarAccountEventId.IsNullable = true;
				colvarAccountEventId.IsPrimaryKey = false;
				colvarAccountEventId.IsForeignKey = true;
				colvarAccountEventId.IsReadOnly = false;
				colvarAccountEventId.DefaultSetting = @"";
				colvarAccountEventId.ForeignKeyTableName = "MS_AccountEvents";
				schema.Columns.Add(colvarAccountEventId);

				TableSchema.TableColumn colvarEquipmentPanelTypeId = new TableSchema.TableColumn(schema);
				colvarEquipmentPanelTypeId.ColumnName = "EquipmentPanelTypeId";
				colvarEquipmentPanelTypeId.DataType = DbType.Int32;
				colvarEquipmentPanelTypeId.MaxLength = 0;
				colvarEquipmentPanelTypeId.AutoIncrement = false;
				colvarEquipmentPanelTypeId.IsNullable = true;
				colvarEquipmentPanelTypeId.IsPrimaryKey = false;
				colvarEquipmentPanelTypeId.IsForeignKey = true;
				colvarEquipmentPanelTypeId.IsReadOnly = false;
				colvarEquipmentPanelTypeId.DefaultSetting = @"";
				colvarEquipmentPanelTypeId.ForeignKeyTableName = "MS_EquipmentPanelTypes";
				schema.Columns.Add(colvarEquipmentPanelTypeId);

				TableSchema.TableColumn colvarGPItemNmbr = new TableSchema.TableColumn(schema);
				colvarGPItemNmbr.ColumnName = "GPItemNmbr";
				colvarGPItemNmbr.DataType = DbType.String;
				colvarGPItemNmbr.MaxLength = 31;
				colvarGPItemNmbr.AutoIncrement = false;
				colvarGPItemNmbr.IsNullable = false;
				colvarGPItemNmbr.IsPrimaryKey = false;
				colvarGPItemNmbr.IsForeignKey = false;
				colvarGPItemNmbr.IsReadOnly = false;
				colvarGPItemNmbr.DefaultSetting = @"";
				colvarGPItemNmbr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPItemNmbr);

				TableSchema.TableColumn colvarItemDescription = new TableSchema.TableColumn(schema);
				colvarItemDescription.ColumnName = "ItemDescription";
				colvarItemDescription.DataType = DbType.String;
				colvarItemDescription.MaxLength = 101;
				colvarItemDescription.AutoIncrement = false;
				colvarItemDescription.IsNullable = false;
				colvarItemDescription.IsPrimaryKey = false;
				colvarItemDescription.IsForeignKey = false;
				colvarItemDescription.IsReadOnly = false;
				colvarItemDescription.DefaultSetting = @"";
				colvarItemDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemDescription);

				TableSchema.TableColumn colvarShortName = new TableSchema.TableColumn(schema);
				colvarShortName.ColumnName = "ShortName";
				colvarShortName.DataType = DbType.String;
				colvarShortName.MaxLength = 20;
				colvarShortName.AutoIncrement = false;
				colvarShortName.IsNullable = true;
				colvarShortName.IsPrimaryKey = false;
				colvarShortName.IsForeignKey = false;
				colvarShortName.IsReadOnly = false;
				colvarShortName.DefaultSetting = @"";
				colvarShortName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortName);

				TableSchema.TableColumn colvarGenDescription = new TableSchema.TableColumn(schema);
				colvarGenDescription.ColumnName = "GenDescription";
				colvarGenDescription.DataType = DbType.String;
				colvarGenDescription.MaxLength = 150;
				colvarGenDescription.AutoIncrement = false;
				colvarGenDescription.IsNullable = true;
				colvarGenDescription.IsPrimaryKey = false;
				colvarGenDescription.IsForeignKey = false;
				colvarGenDescription.IsReadOnly = false;
				colvarGenDescription.DefaultSetting = @"";
				colvarGenDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGenDescription);

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 136;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = false;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = true;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarShowInInventory = new TableSchema.TableColumn(schema);
				colvarShowInInventory.ColumnName = "ShowInInventory";
				colvarShowInInventory.DataType = DbType.Boolean;
				colvarShowInInventory.MaxLength = 0;
				colvarShowInInventory.AutoIncrement = false;
				colvarShowInInventory.IsNullable = false;
				colvarShowInInventory.IsPrimaryKey = false;
				colvarShowInInventory.IsForeignKey = false;
				colvarShowInInventory.IsReadOnly = false;
				colvarShowInInventory.DefaultSetting = @"((0))";
				colvarShowInInventory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShowInInventory);

				TableSchema.TableColumn colvarPoints = new TableSchema.TableColumn(schema);
				colvarPoints.ColumnName = "Points";
				colvarPoints.DataType = DbType.Byte;
				colvarPoints.MaxLength = 0;
				colvarPoints.AutoIncrement = false;
				colvarPoints.IsNullable = false;
				colvarPoints.IsPrimaryKey = false;
				colvarPoints.IsForeignKey = false;
				colvarPoints.IsReadOnly = false;
				colvarPoints.DefaultSetting = @"((0))";
				colvarPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPoints);

				TableSchema.TableColumn colvarActualPoints = new TableSchema.TableColumn(schema);
				colvarActualPoints.ColumnName = "ActualPoints";
				colvarActualPoints.DataType = DbType.Double;
				colvarActualPoints.MaxLength = 0;
				colvarActualPoints.AutoIncrement = false;
				colvarActualPoints.IsNullable = true;
				colvarActualPoints.IsPrimaryKey = false;
				colvarActualPoints.IsForeignKey = false;
				colvarActualPoints.IsReadOnly = false;
				colvarActualPoints.DefaultSetting = @"";
				colvarActualPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualPoints);

				TableSchema.TableColumn colvarRetailPrice = new TableSchema.TableColumn(schema);
				colvarRetailPrice.ColumnName = "RetailPrice";
				colvarRetailPrice.DataType = DbType.Currency;
				colvarRetailPrice.MaxLength = 0;
				colvarRetailPrice.AutoIncrement = false;
				colvarRetailPrice.IsNullable = false;
				colvarRetailPrice.IsPrimaryKey = false;
				colvarRetailPrice.IsForeignKey = false;
				colvarRetailPrice.IsReadOnly = false;
				colvarRetailPrice.DefaultSetting = @"((0))";
				colvarRetailPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRetailPrice);

				TableSchema.TableColumn colvarIsCellUnit = new TableSchema.TableColumn(schema);
				colvarIsCellUnit.ColumnName = "IsCellUnit";
				colvarIsCellUnit.DataType = DbType.Boolean;
				colvarIsCellUnit.MaxLength = 0;
				colvarIsCellUnit.AutoIncrement = false;
				colvarIsCellUnit.IsNullable = true;
				colvarIsCellUnit.IsPrimaryKey = false;
				colvarIsCellUnit.IsForeignKey = false;
				colvarIsCellUnit.IsReadOnly = false;
				colvarIsCellUnit.DefaultSetting = @"";
				colvarIsCellUnit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCellUnit);

				TableSchema.TableColumn colvarAuditDay = new TableSchema.TableColumn(schema);
				colvarAuditDay.ColumnName = "AuditDay";
				colvarAuditDay.DataType = DbType.Int32;
				colvarAuditDay.MaxLength = 0;
				colvarAuditDay.AutoIncrement = false;
				colvarAuditDay.IsNullable = true;
				colvarAuditDay.IsPrimaryKey = false;
				colvarAuditDay.IsForeignKey = false;
				colvarAuditDay.IsReadOnly = false;
				colvarAuditDay.DefaultSetting = @"";
				colvarAuditDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuditDay);

				TableSchema.TableColumn colvarEmployeeCost = new TableSchema.TableColumn(schema);
				colvarEmployeeCost.ColumnName = "EmployeeCost";
				colvarEmployeeCost.DataType = DbType.Currency;
				colvarEmployeeCost.MaxLength = 0;
				colvarEmployeeCost.AutoIncrement = false;
				colvarEmployeeCost.IsNullable = true;
				colvarEmployeeCost.IsPrimaryKey = false;
				colvarEmployeeCost.IsForeignKey = false;
				colvarEmployeeCost.IsReadOnly = false;
				colvarEmployeeCost.DefaultSetting = @"";
				colvarEmployeeCost.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmployeeCost);

				TableSchema.TableColumn colvarDefaultTechStockLevel = new TableSchema.TableColumn(schema);
				colvarDefaultTechStockLevel.ColumnName = "DefaultTechStockLevel";
				colvarDefaultTechStockLevel.DataType = DbType.Int32;
				colvarDefaultTechStockLevel.MaxLength = 0;
				colvarDefaultTechStockLevel.AutoIncrement = false;
				colvarDefaultTechStockLevel.IsNullable = true;
				colvarDefaultTechStockLevel.IsPrimaryKey = false;
				colvarDefaultTechStockLevel.IsForeignKey = false;
				colvarDefaultTechStockLevel.IsReadOnly = false;
				colvarDefaultTechStockLevel.DefaultSetting = @"";
				colvarDefaultTechStockLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultTechStockLevel);

				TableSchema.TableColumn colvarIsHighlighted = new TableSchema.TableColumn(schema);
				colvarIsHighlighted.ColumnName = "IsHighlighted";
				colvarIsHighlighted.DataType = DbType.Boolean;
				colvarIsHighlighted.MaxLength = 0;
				colvarIsHighlighted.AutoIncrement = false;
				colvarIsHighlighted.IsNullable = false;
				colvarIsHighlighted.IsPrimaryKey = false;
				colvarIsHighlighted.IsForeignKey = false;
				colvarIsHighlighted.IsReadOnly = false;
				colvarIsHighlighted.DefaultSetting = @"((0))";
				colvarIsHighlighted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHighlighted);

				TableSchema.TableColumn colvarIsWireless = new TableSchema.TableColumn(schema);
				colvarIsWireless.ColumnName = "IsWireless";
				colvarIsWireless.DataType = DbType.Boolean;
				colvarIsWireless.MaxLength = 0;
				colvarIsWireless.AutoIncrement = false;
				colvarIsWireless.IsNullable = false;
				colvarIsWireless.IsPrimaryKey = false;
				colvarIsWireless.IsForeignKey = false;
				colvarIsWireless.IsReadOnly = false;
				colvarIsWireless.DefaultSetting = @"((0))";
				colvarIsWireless.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsWireless);

				TableSchema.TableColumn colvarIsGeneric = new TableSchema.TableColumn(schema);
				colvarIsGeneric.ColumnName = "IsGeneric";
				colvarIsGeneric.DataType = DbType.Boolean;
				colvarIsGeneric.MaxLength = 0;
				colvarIsGeneric.AutoIncrement = false;
				colvarIsGeneric.IsNullable = false;
				colvarIsGeneric.IsPrimaryKey = false;
				colvarIsGeneric.IsForeignKey = false;
				colvarIsGeneric.IsReadOnly = false;
				colvarIsGeneric.DefaultSetting = @"((0))";
				colvarIsGeneric.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsGeneric);

				TableSchema.TableColumn colvarIsExisting = new TableSchema.TableColumn(schema);
				colvarIsExisting.ColumnName = "IsExisting";
				colvarIsExisting.DataType = DbType.Boolean;
				colvarIsExisting.MaxLength = 0;
				colvarIsExisting.AutoIncrement = false;
				colvarIsExisting.IsNullable = false;
				colvarIsExisting.IsPrimaryKey = false;
				colvarIsExisting.IsForeignKey = false;
				colvarIsExisting.IsReadOnly = false;
				colvarIsExisting.DefaultSetting = @"((0))";
				colvarIsExisting.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExisting);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_Equipments",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_Equipment LoadFrom(MS_Equipment item)
		{
			MS_Equipment result = new MS_Equipment();
			if (item.EquipmentID != default(string)) {
				result.LoadByKey(item.EquipmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string EquipmentID {
			get { return GetColumnValue<string>(Columns.EquipmentID); }
			set {
				SetColumnValue(Columns.EquipmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentID));
			}
		}
		[DataMember]
		public int? EquipmentMonitoredTypeId {
			get { return GetColumnValue<int?>(Columns.EquipmentMonitoredTypeId); }
			set {
				SetColumnValue(Columns.EquipmentMonitoredTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentMonitoredTypeId));
			}
		}
		[DataMember]
		public int? EquipmentTypeId {
			get { return GetColumnValue<int?>(Columns.EquipmentTypeId); }
			set {
				SetColumnValue(Columns.EquipmentTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentTypeId));
			}
		}
		[DataMember]
		public string AccountZoneTypeId {
			get { return GetColumnValue<string>(Columns.AccountZoneTypeId); }
			set {
				SetColumnValue(Columns.AccountZoneTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountZoneTypeId));
			}
		}
		[DataMember]
		public int? AccountEventId {
			get { return GetColumnValue<int?>(Columns.AccountEventId); }
			set {
				SetColumnValue(Columns.AccountEventId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountEventId));
			}
		}
		[DataMember]
		public int? EquipmentPanelTypeId {
			get { return GetColumnValue<int?>(Columns.EquipmentPanelTypeId); }
			set {
				SetColumnValue(Columns.EquipmentPanelTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentPanelTypeId));
			}
		}
		[DataMember]
		public string GPItemNmbr {
			get { return GetColumnValue<string>(Columns.GPItemNmbr); }
			set {
				SetColumnValue(Columns.GPItemNmbr, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPItemNmbr));
			}
		}
		[DataMember]
		public string ItemDescription {
			get { return GetColumnValue<string>(Columns.ItemDescription); }
			set {
				SetColumnValue(Columns.ItemDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemDescription));
			}
		}
		[DataMember]
		public string ShortName {
			get { return GetColumnValue<string>(Columns.ShortName); }
			set {
				SetColumnValue(Columns.ShortName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortName));
			}
		}
		[DataMember]
		public string GenDescription {
			get { return GetColumnValue<string>(Columns.GenDescription); }
			set {
				SetColumnValue(Columns.GenDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GenDescription));
			}
		}
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set {
				SetColumnValue(Columns.FullName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullName));
			}
		}
		[DataMember]
		public bool ShowInInventory {
			get { return GetColumnValue<bool>(Columns.ShowInInventory); }
			set {
				SetColumnValue(Columns.ShowInInventory, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShowInInventory));
			}
		}
		[DataMember]
		public byte Points {
			get { return GetColumnValue<byte>(Columns.Points); }
			set {
				SetColumnValue(Columns.Points, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Points));
			}
		}
		[DataMember]
		public double? ActualPoints {
			get { return GetColumnValue<double?>(Columns.ActualPoints); }
			set {
				SetColumnValue(Columns.ActualPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActualPoints));
			}
		}
		[DataMember]
		public decimal RetailPrice {
			get { return GetColumnValue<decimal>(Columns.RetailPrice); }
			set {
				SetColumnValue(Columns.RetailPrice, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RetailPrice));
			}
		}
		[DataMember]
		public bool? IsCellUnit {
			get { return GetColumnValue<bool?>(Columns.IsCellUnit); }
			set {
				SetColumnValue(Columns.IsCellUnit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCellUnit));
			}
		}
		[DataMember]
		public int? AuditDay {
			get { return GetColumnValue<int?>(Columns.AuditDay); }
			set {
				SetColumnValue(Columns.AuditDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuditDay));
			}
		}
		[DataMember]
		public decimal? EmployeeCost {
			get { return GetColumnValue<decimal?>(Columns.EmployeeCost); }
			set {
				SetColumnValue(Columns.EmployeeCost, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmployeeCost));
			}
		}
		[DataMember]
		public int? DefaultTechStockLevel {
			get { return GetColumnValue<int?>(Columns.DefaultTechStockLevel); }
			set {
				SetColumnValue(Columns.DefaultTechStockLevel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultTechStockLevel));
			}
		}
		[DataMember]
		public bool IsHighlighted {
			get { return GetColumnValue<bool>(Columns.IsHighlighted); }
			set {
				SetColumnValue(Columns.IsHighlighted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsHighlighted));
			}
		}
		[DataMember]
		public bool IsWireless {
			get { return GetColumnValue<bool>(Columns.IsWireless); }
			set {
				SetColumnValue(Columns.IsWireless, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsWireless));
			}
		}
		[DataMember]
		public bool IsGeneric {
			get { return GetColumnValue<bool>(Columns.IsGeneric); }
			set {
				SetColumnValue(Columns.IsGeneric, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsGeneric));
			}
		}
		[DataMember]
		public bool IsExisting {
			get { return GetColumnValue<bool>(Columns.IsExisting); }
			set {
				SetColumnValue(Columns.IsExisting, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsExisting));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Item _Equipment;
		//Relationship: FK_MS_Equipments_AE_Items
		public AE_Item Equipment
		{
			get
			{
				if(_Equipment == null) {
					_Equipment = AE_Item.FetchByID(this.EquipmentID);
				}
				return _Equipment;
			}
			set
			{
				SetColumnValue("EquipmentID", value.ItemID);
				_Equipment = value;
			}
		}

		private MS_AccountEvent _AccountEvent;
		//Relationship: FK_MS_Equipments_MS_AccountEvents
		public MS_AccountEvent AccountEvent
		{
			get
			{
				if(_AccountEvent == null) {
					_AccountEvent = MS_AccountEvent.FetchByID(this.AccountEventId);
				}
				return _AccountEvent;
			}
			set
			{
				SetColumnValue("AccountEventId", value.AccountEventID);
				_AccountEvent = value;
			}
		}

		private MS_AccountZoneType _AccountZoneType;
		//Relationship: FK_MS_Equipments_MS_AccountZoneTypes
		public MS_AccountZoneType AccountZoneType
		{
			get
			{
				if(_AccountZoneType == null) {
					_AccountZoneType = MS_AccountZoneType.FetchByID(this.AccountZoneTypeId);
				}
				return _AccountZoneType;
			}
			set
			{
				SetColumnValue("AccountZoneTypeId", value.AccountZoneTypeID);
				_AccountZoneType = value;
			}
		}

		private MS_EquipmentMonitoredType _EquipmentMonitoredType;
		//Relationship: FK_MS_Equipments_MS_EquipmentMonitoredTypes
		public MS_EquipmentMonitoredType EquipmentMonitoredType
		{
			get
			{
				if(_EquipmentMonitoredType == null) {
					_EquipmentMonitoredType = MS_EquipmentMonitoredType.FetchByID(this.EquipmentMonitoredTypeId);
				}
				return _EquipmentMonitoredType;
			}
			set
			{
				SetColumnValue("EquipmentMonitoredTypeId", value.EquipmentMonitoredTypeId);
				_EquipmentMonitoredType = value;
			}
		}

		private MS_EquipmentPanelType _EquipmentPanelType;
		//Relationship: FK_MS_Equipments_MS_EquipmentPanelTypes
		public MS_EquipmentPanelType EquipmentPanelType
		{
			get
			{
				if(_EquipmentPanelType == null) {
					_EquipmentPanelType = MS_EquipmentPanelType.FetchByID(this.EquipmentPanelTypeId);
				}
				return _EquipmentPanelType;
			}
			set
			{
				SetColumnValue("EquipmentPanelTypeId", value.EquipmentPanelTypeId);
				_EquipmentPanelType = value;
			}
		}

		private MS_EquipmentType _EquipmentType;
		//Relationship: FK_MS_Equipments_MS_EquipmentTypes
		public MS_EquipmentType EquipmentType
		{
			get
			{
				if(_EquipmentType == null) {
					_EquipmentType = MS_EquipmentType.FetchByID(this.EquipmentTypeId);
				}
				return _EquipmentType;
			}
			set
			{
				SetColumnValue("EquipmentTypeId", value.EquipmentTypeID);
				_EquipmentType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EquipmentID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentMonitoredTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn EquipmentTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountZoneTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AccountEventIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn EquipmentPanelTypeIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn GPItemNmbrColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ItemDescriptionColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ShortNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn GenDescriptionColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ShowInInventoryColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn PointsColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ActualPointsColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn RetailPriceColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsCellUnitColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn AuditDayColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn EmployeeCostColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn DefaultTechStockLevelColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsHighlightedColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsWirelessColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn IsGenericColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn IsExistingColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[30]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentID = @"EquipmentID";
			public static readonly string EquipmentMonitoredTypeId = @"EquipmentMonitoredTypeId";
			public static readonly string EquipmentTypeId = @"EquipmentTypeId";
			public static readonly string AccountZoneTypeId = @"AccountZoneTypeId";
			public static readonly string AccountEventId = @"AccountEventId";
			public static readonly string EquipmentPanelTypeId = @"EquipmentPanelTypeId";
			public static readonly string GPItemNmbr = @"GPItemNmbr";
			public static readonly string ItemDescription = @"ItemDescription";
			public static readonly string ShortName = @"ShortName";
			public static readonly string GenDescription = @"GenDescription";
			public static readonly string FullName = @"FullName";
			public static readonly string ShowInInventory = @"ShowInInventory";
			public static readonly string Points = @"Points";
			public static readonly string ActualPoints = @"ActualPoints";
			public static readonly string RetailPrice = @"RetailPrice";
			public static readonly string IsCellUnit = @"IsCellUnit";
			public static readonly string AuditDay = @"AuditDay";
			public static readonly string EmployeeCost = @"EmployeeCost";
			public static readonly string DefaultTechStockLevel = @"DefaultTechStockLevel";
			public static readonly string IsHighlighted = @"IsHighlighted";
			public static readonly string IsWireless = @"IsWireless";
			public static readonly string IsGeneric = @"IsGeneric";
			public static readonly string IsExisting = @"IsExisting";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountEquipmentCollection _MS_AccountEquipmentsCol;
		//Relationship: FK_MS_AccountEquipment_MS_Equipments
		public MS_AccountEquipmentCollection MS_AccountEquipmentsCol
		{
			get
			{
				if(_MS_AccountEquipmentsCol == null) {
					_MS_AccountEquipmentsCol = new MS_AccountEquipmentCollection();
					_MS_AccountEquipmentsCol.LoadAndCloseReader(MS_AccountEquipment.Query()
						.WHERE(MS_AccountEquipment.Columns.EquipmentId, EquipmentID).ExecuteReader());
				}
				return _MS_AccountEquipmentsCol;
			}
		}

		private MS_EquipmentAccountZoneTypeCollection _MS_EquipmentAccountZoneTypesCol;
		//Relationship: FK_MS_EquipmentAccountZoneTypes_MS_Equipments
		public MS_EquipmentAccountZoneTypeCollection MS_EquipmentAccountZoneTypesCol
		{
			get
			{
				if(_MS_EquipmentAccountZoneTypesCol == null) {
					_MS_EquipmentAccountZoneTypesCol = new MS_EquipmentAccountZoneTypeCollection();
					_MS_EquipmentAccountZoneTypesCol.LoadAndCloseReader(MS_EquipmentAccountZoneType.Query()
						.WHERE(MS_EquipmentAccountZoneType.Columns.EquipmentId, EquipmentID).ExecuteReader());
				}
				return _MS_EquipmentAccountZoneTypesCol;
			}
		}

		private MS_EquipmentCellularVendorCollection _MS_EquipmentCellularVendorsCol;
		//Relationship: FK_MS_EquipmentCellularVendors_MS_Equipments
		public MS_EquipmentCellularVendorCollection MS_EquipmentCellularVendorsCol
		{
			get
			{
				if(_MS_EquipmentCellularVendorsCol == null) {
					_MS_EquipmentCellularVendorsCol = new MS_EquipmentCellularVendorCollection();
					_MS_EquipmentCellularVendorsCol.LoadAndCloseReader(MS_EquipmentCellularVendor.Query()
						.WHERE(MS_EquipmentCellularVendor.Columns.EquipmentID, EquipmentID).ExecuteReader());
				}
				return _MS_EquipmentCellularVendorsCol;
			}
		}

		private MS_EquipmentExistingCollection _MS_EquipmentExistingsCol;
		//Relationship: FK_MS_EquipmentExistings_MS_Equipments
		public MS_EquipmentExistingCollection MS_EquipmentExistingsCol
		{
			get
			{
				if(_MS_EquipmentExistingsCol == null) {
					_MS_EquipmentExistingsCol = new MS_EquipmentExistingCollection();
					_MS_EquipmentExistingsCol.LoadAndCloseReader(MS_EquipmentExisting.Query()
						.WHERE(MS_EquipmentExisting.Columns.EquipmentId, EquipmentID).ExecuteReader());
				}
				return _MS_EquipmentExistingsCol;
			}
		}

		private MS_EquipmentMonitronicsCellProviderCollection _MS_EquipmentMonitronicsCellProvidersCol;
		//Relationship: FK_MS_EquipmentMonitronicsCellProviders_MS_Equipments
		public MS_EquipmentMonitronicsCellProviderCollection MS_EquipmentMonitronicsCellProvidersCol
		{
			get
			{
				if(_MS_EquipmentMonitronicsCellProvidersCol == null) {
					_MS_EquipmentMonitronicsCellProvidersCol = new MS_EquipmentMonitronicsCellProviderCollection();
					_MS_EquipmentMonitronicsCellProvidersCol.LoadAndCloseReader(MS_EquipmentMonitronicsCellProvider.Query()
						.WHERE(MS_EquipmentMonitronicsCellProvider.Columns.EquipmentID, EquipmentID).ExecuteReader());
				}
				return _MS_EquipmentMonitronicsCellProvidersCol;
			}
		}

		private MS_EquipmentMonitronicsCellServiceCollection _MS_EquipmentMonitronicsCellServicesCol;
		//Relationship: FK_MS_EquipmentMonitronicsCellServices_MS_Equipments
		public MS_EquipmentMonitronicsCellServiceCollection MS_EquipmentMonitronicsCellServicesCol
		{
			get
			{
				if(_MS_EquipmentMonitronicsCellServicesCol == null) {
					_MS_EquipmentMonitronicsCellServicesCol = new MS_EquipmentMonitronicsCellServiceCollection();
					_MS_EquipmentMonitronicsCellServicesCol.LoadAndCloseReader(MS_EquipmentMonitronicsCellService.Query()
						.WHERE(MS_EquipmentMonitronicsCellService.Columns.EquipmentID, EquipmentID).ExecuteReader());
				}
				return _MS_EquipmentMonitronicsCellServicesCol;
			}
		}

		private MS_EquipmentMonitronicsDeviceCollection _MS_EquipmentMonitronicsDevicesCol;
		//Relationship: FK_MS_EquipmentMonitronicsDevices_MS_Equipments
		public MS_EquipmentMonitronicsDeviceCollection MS_EquipmentMonitronicsDevicesCol
		{
			get
			{
				if(_MS_EquipmentMonitronicsDevicesCol == null) {
					_MS_EquipmentMonitronicsDevicesCol = new MS_EquipmentMonitronicsDeviceCollection();
					_MS_EquipmentMonitronicsDevicesCol.LoadAndCloseReader(MS_EquipmentMonitronicsDevice.Query()
						.WHERE(MS_EquipmentMonitronicsDevice.Columns.EquipmentID, EquipmentID).ExecuteReader());
				}
				return _MS_EquipmentMonitronicsDevicesCol;
			}
		}

		private MS_EquipmentMostFrequentCollection _MS_EquipmentMostFrequentsCol;
		//Relationship: FK_MS_EquipmentMostFrequents_MS_Equipments
		public MS_EquipmentMostFrequentCollection MS_EquipmentMostFrequentsCol
		{
			get
			{
				if(_MS_EquipmentMostFrequentsCol == null) {
					_MS_EquipmentMostFrequentsCol = new MS_EquipmentMostFrequentCollection();
					_MS_EquipmentMostFrequentsCol.LoadAndCloseReader(MS_EquipmentMostFrequent.Query()
						.WHERE(MS_EquipmentMostFrequent.Columns.EquipmentId, EquipmentID).ExecuteReader());
				}
				return _MS_EquipmentMostFrequentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentTypeEventType class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentTypeEventTypeCollection : ActiveList<MS_EquipmentTypeEventType, MS_EquipmentTypeEventTypeCollection>
	{
		public static MS_EquipmentTypeEventTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentTypeEventTypeCollection result = new MS_EquipmentTypeEventTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentTypeEventType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentTypeEventTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentTypeEventType : ActiveRecord<MS_EquipmentTypeEventType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentTypeEventType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentTypeEventTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentTypeEventTypeID = new TableSchema.TableColumn(schema);
				colvarEquipmentTypeEventTypeID.ColumnName = "EquipmentTypeEventTypeID";
				colvarEquipmentTypeEventTypeID.DataType = DbType.Int32;
				colvarEquipmentTypeEventTypeID.MaxLength = 0;
				colvarEquipmentTypeEventTypeID.AutoIncrement = true;
				colvarEquipmentTypeEventTypeID.IsNullable = false;
				colvarEquipmentTypeEventTypeID.IsPrimaryKey = true;
				colvarEquipmentTypeEventTypeID.IsForeignKey = false;
				colvarEquipmentTypeEventTypeID.IsReadOnly = false;
				colvarEquipmentTypeEventTypeID.DefaultSetting = @"";
				colvarEquipmentTypeEventTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentTypeEventTypeID);

				TableSchema.TableColumn colvarEquipmentTypeId = new TableSchema.TableColumn(schema);
				colvarEquipmentTypeId.ColumnName = "EquipmentTypeId";
				colvarEquipmentTypeId.DataType = DbType.Int32;
				colvarEquipmentTypeId.MaxLength = 0;
				colvarEquipmentTypeId.AutoIncrement = false;
				colvarEquipmentTypeId.IsNullable = false;
				colvarEquipmentTypeId.IsPrimaryKey = false;
				colvarEquipmentTypeId.IsForeignKey = true;
				colvarEquipmentTypeId.IsReadOnly = false;
				colvarEquipmentTypeId.DefaultSetting = @"";
				colvarEquipmentTypeId.ForeignKeyTableName = "MS_EquipmentTypes";
				schema.Columns.Add(colvarEquipmentTypeId);

				TableSchema.TableColumn colvarMoniEventId = new TableSchema.TableColumn(schema);
				colvarMoniEventId.ColumnName = "MoniEventId";
				colvarMoniEventId.DataType = DbType.Int32;
				colvarMoniEventId.MaxLength = 0;
				colvarMoniEventId.AutoIncrement = false;
				colvarMoniEventId.IsNullable = true;
				colvarMoniEventId.IsPrimaryKey = false;
				colvarMoniEventId.IsForeignKey = true;
				colvarMoniEventId.IsReadOnly = false;
				colvarMoniEventId.DefaultSetting = @"";
				colvarMoniEventId.ForeignKeyTableName = "MS_MonitronicsEntityEventCodes";
				schema.Columns.Add(colvarMoniEventId);

				TableSchema.TableColumn colvarAGEventId = new TableSchema.TableColumn(schema);
				colvarAGEventId.ColumnName = "AGEventId";
				colvarAGEventId.DataType = DbType.Int32;
				colvarAGEventId.MaxLength = 0;
				colvarAGEventId.AutoIncrement = false;
				colvarAGEventId.IsNullable = true;
				colvarAGEventId.IsPrimaryKey = false;
				colvarAGEventId.IsForeignKey = true;
				colvarAGEventId.IsReadOnly = false;
				colvarAGEventId.DefaultSetting = @"";
				colvarAGEventId.ForeignKeyTableName = "MS_AvantGuardEventCodes";
				schema.Columns.Add(colvarAGEventId);

				TableSchema.TableColumn colvarSortOrder = new TableSchema.TableColumn(schema);
				colvarSortOrder.ColumnName = "SortOrder";
				colvarSortOrder.DataType = DbType.Byte;
				colvarSortOrder.MaxLength = 0;
				colvarSortOrder.AutoIncrement = false;
				colvarSortOrder.IsNullable = false;
				colvarSortOrder.IsPrimaryKey = false;
				colvarSortOrder.IsForeignKey = false;
				colvarSortOrder.IsReadOnly = false;
				colvarSortOrder.DefaultSetting = @"";
				colvarSortOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSortOrder);

				TableSchema.TableColumn colvarDefaultItem = new TableSchema.TableColumn(schema);
				colvarDefaultItem.ColumnName = "DefaultItem";
				colvarDefaultItem.DataType = DbType.Boolean;
				colvarDefaultItem.MaxLength = 0;
				colvarDefaultItem.AutoIncrement = false;
				colvarDefaultItem.IsNullable = false;
				colvarDefaultItem.IsPrimaryKey = false;
				colvarDefaultItem.IsForeignKey = false;
				colvarDefaultItem.IsReadOnly = false;
				colvarDefaultItem.DefaultSetting = @"";
				colvarDefaultItem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultItem);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentTypeEventTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentTypeEventType LoadFrom(MS_EquipmentTypeEventType item)
		{
			MS_EquipmentTypeEventType result = new MS_EquipmentTypeEventType();
			if (item.EquipmentTypeEventTypeID != default(int)) {
				result.LoadByKey(item.EquipmentTypeEventTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EquipmentTypeEventTypeID {
			get { return GetColumnValue<int>(Columns.EquipmentTypeEventTypeID); }
			set {
				SetColumnValue(Columns.EquipmentTypeEventTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentTypeEventTypeID));
			}
		}
		[DataMember]
		public int EquipmentTypeId {
			get { return GetColumnValue<int>(Columns.EquipmentTypeId); }
			set {
				SetColumnValue(Columns.EquipmentTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentTypeId));
			}
		}
		[DataMember]
		public int? MoniEventId {
			get { return GetColumnValue<int?>(Columns.MoniEventId); }
			set {
				SetColumnValue(Columns.MoniEventId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MoniEventId));
			}
		}
		[DataMember]
		public int? AGEventId {
			get { return GetColumnValue<int?>(Columns.AGEventId); }
			set {
				SetColumnValue(Columns.AGEventId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AGEventId));
			}
		}
		[DataMember]
		public byte SortOrder {
			get { return GetColumnValue<byte>(Columns.SortOrder); }
			set {
				SetColumnValue(Columns.SortOrder, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SortOrder));
			}
		}
		[DataMember]
		public bool DefaultItem {
			get { return GetColumnValue<bool>(Columns.DefaultItem); }
			set {
				SetColumnValue(Columns.DefaultItem, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultItem));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AvantGuardEventCode _AGEvent;
		//Relationship: FK_MS_EquipmentTypeEventTypes_MS_AvantGuardEventCodes
		public MS_AvantGuardEventCode AGEvent
		{
			get
			{
				if(_AGEvent == null) {
					_AGEvent = MS_AvantGuardEventCode.FetchByID(this.AGEventId);
				}
				return _AGEvent;
			}
			set
			{
				SetColumnValue("AGEventId", value.AGEventID);
				_AGEvent = value;
			}
		}

		private MS_EquipmentType _EquipmentType;
		//Relationship: FK_MS_EquipmentTypeEventTypes_MS_EquipmentType
		public MS_EquipmentType EquipmentType
		{
			get
			{
				if(_EquipmentType == null) {
					_EquipmentType = MS_EquipmentType.FetchByID(this.EquipmentTypeId);
				}
				return _EquipmentType;
			}
			set
			{
				SetColumnValue("EquipmentTypeId", value.EquipmentTypeID);
				_EquipmentType = value;
			}
		}

		private MS_MonitronicsEntityEventCode _MoniEvent;
		//Relationship: FK_MS_EquipmentTypeEventTypes_MS_MonitronicsEventCodes
		public MS_MonitronicsEntityEventCode MoniEvent
		{
			get
			{
				if(_MoniEvent == null) {
					_MoniEvent = MS_MonitronicsEntityEventCode.FetchByID(this.MoniEventId);
				}
				return _MoniEvent;
			}
			set
			{
				SetColumnValue("MoniEventId", value.MoniEventID);
				_MoniEvent = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EquipmentTypeEventTypeID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentTypeEventTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MoniEventIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AGEventIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SortOrderColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DefaultItemColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentTypeEventTypeID = @"EquipmentTypeEventTypeID";
			public static readonly string EquipmentTypeId = @"EquipmentTypeId";
			public static readonly string MoniEventId = @"MoniEventId";
			public static readonly string AGEventId = @"AGEventId";
			public static readonly string SortOrder = @"SortOrder";
			public static readonly string DefaultItem = @"DefaultItem";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentTypeEventTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentType class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentTypeCollection : ActiveList<MS_EquipmentType, MS_EquipmentTypeCollection>
	{
		public static MS_EquipmentTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentTypeCollection result = new MS_EquipmentTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentType : ActiveRecord<MS_EquipmentType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentTypeID = new TableSchema.TableColumn(schema);
				colvarEquipmentTypeID.ColumnName = "EquipmentTypeID";
				colvarEquipmentTypeID.DataType = DbType.Int32;
				colvarEquipmentTypeID.MaxLength = 0;
				colvarEquipmentTypeID.AutoIncrement = true;
				colvarEquipmentTypeID.IsNullable = false;
				colvarEquipmentTypeID.IsPrimaryKey = true;
				colvarEquipmentTypeID.IsForeignKey = false;
				colvarEquipmentTypeID.IsReadOnly = false;
				colvarEquipmentTypeID.DefaultSetting = @"";
				colvarEquipmentTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentTypeID);

				TableSchema.TableColumn colvarEquipmentType = new TableSchema.TableColumn(schema);
				colvarEquipmentType.ColumnName = "EquipmentType";
				colvarEquipmentType.DataType = DbType.String;
				colvarEquipmentType.MaxLength = 100;
				colvarEquipmentType.AutoIncrement = false;
				colvarEquipmentType.IsNullable = false;
				colvarEquipmentType.IsPrimaryKey = false;
				colvarEquipmentType.IsForeignKey = false;
				colvarEquipmentType.IsReadOnly = false;
				colvarEquipmentType.DefaultSetting = @"";
				colvarEquipmentType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentType);

				TableSchema.TableColumn colvarMonitronicsCode = new TableSchema.TableColumn(schema);
				colvarMonitronicsCode.ColumnName = "MonitronicsCode";
				colvarMonitronicsCode.DataType = DbType.AnsiString;
				colvarMonitronicsCode.MaxLength = 50;
				colvarMonitronicsCode.AutoIncrement = false;
				colvarMonitronicsCode.IsNullable = true;
				colvarMonitronicsCode.IsPrimaryKey = false;
				colvarMonitronicsCode.IsForeignKey = false;
				colvarMonitronicsCode.IsReadOnly = false;
				colvarMonitronicsCode.DefaultSetting = @"";
				colvarMonitronicsCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitronicsCode);

				TableSchema.TableColumn colvarCriticomCode = new TableSchema.TableColumn(schema);
				colvarCriticomCode.ColumnName = "CriticomCode";
				colvarCriticomCode.DataType = DbType.AnsiString;
				colvarCriticomCode.MaxLength = 10;
				colvarCriticomCode.AutoIncrement = false;
				colvarCriticomCode.IsNullable = true;
				colvarCriticomCode.IsPrimaryKey = false;
				colvarCriticomCode.IsForeignKey = false;
				colvarCriticomCode.IsReadOnly = false;
				colvarCriticomCode.DefaultSetting = @"";
				colvarCriticomCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCriticomCode);

				TableSchema.TableColumn colvarAvantGuardCode = new TableSchema.TableColumn(schema);
				colvarAvantGuardCode.ColumnName = "AvantGuardCode";
				colvarAvantGuardCode.DataType = DbType.AnsiString;
				colvarAvantGuardCode.MaxLength = 50;
				colvarAvantGuardCode.AutoIncrement = false;
				colvarAvantGuardCode.IsNullable = true;
				colvarAvantGuardCode.IsPrimaryKey = false;
				colvarAvantGuardCode.IsForeignKey = false;
				colvarAvantGuardCode.IsReadOnly = false;
				colvarAvantGuardCode.DefaultSetting = @"";
				colvarAvantGuardCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAvantGuardCode);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentType LoadFrom(MS_EquipmentType item)
		{
			MS_EquipmentType result = new MS_EquipmentType();
			if (item.EquipmentTypeID != default(int)) {
				result.LoadByKey(item.EquipmentTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EquipmentTypeID {
			get { return GetColumnValue<int>(Columns.EquipmentTypeID); }
			set {
				SetColumnValue(Columns.EquipmentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentTypeID));
			}
		}
		[DataMember]
		public string EquipmentType {
			get { return GetColumnValue<string>(Columns.EquipmentType); }
			set {
				SetColumnValue(Columns.EquipmentType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentType));
			}
		}
		[DataMember]
		public string MonitronicsCode {
			get { return GetColumnValue<string>(Columns.MonitronicsCode); }
			set {
				SetColumnValue(Columns.MonitronicsCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitronicsCode));
			}
		}
		[DataMember]
		public string CriticomCode {
			get { return GetColumnValue<string>(Columns.CriticomCode); }
			set {
				SetColumnValue(Columns.CriticomCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CriticomCode));
			}
		}
		[DataMember]
		public string AvantGuardCode {
			get { return GetColumnValue<string>(Columns.AvantGuardCode); }
			set {
				SetColumnValue(Columns.AvantGuardCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AvantGuardCode));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return EquipmentType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentTypeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitronicsCodeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CriticomCodeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AvantGuardCodeColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentTypeID = @"EquipmentTypeID";
			public static readonly string EquipmentType = @"EquipmentType";
			public static readonly string MonitronicsCode = @"MonitronicsCode";
			public static readonly string CriticomCode = @"CriticomCode";
			public static readonly string AvantGuardCode = @"AvantGuardCode";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_EquipmentCollection _MS_EquipmentsCol;
		//Relationship: FK_MS_Equipments_MS_EquipmentTypes
		public MS_EquipmentCollection MS_EquipmentsCol
		{
			get
			{
				if(_MS_EquipmentsCol == null) {
					_MS_EquipmentsCol = new MS_EquipmentCollection();
					_MS_EquipmentsCol.LoadAndCloseReader(MS_Equipment.Query()
						.WHERE(MS_Equipment.Columns.EquipmentTypeId, EquipmentTypeID).ExecuteReader());
				}
				return _MS_EquipmentsCol;
			}
		}

		private MS_EquipmentTypeEventTypeCollection _MS_EquipmentTypeEventTypesCol;
		//Relationship: FK_MS_EquipmentTypeEventTypes_MS_EquipmentType
		public MS_EquipmentTypeEventTypeCollection MS_EquipmentTypeEventTypesCol
		{
			get
			{
				if(_MS_EquipmentTypeEventTypesCol == null) {
					_MS_EquipmentTypeEventTypesCol = new MS_EquipmentTypeEventTypeCollection();
					_MS_EquipmentTypeEventTypesCol.LoadAndCloseReader(MS_EquipmentTypeEventType.Query()
						.WHERE(MS_EquipmentTypeEventType.Columns.EquipmentTypeId, EquipmentTypeID).ExecuteReader());
				}
				return _MS_EquipmentTypeEventTypesCol;
			}
		}

		private MS_EquipmentTypesZoneEventTypeCollection _MS_EquipmentTypesZoneEventTypesCol;
		//Relationship: FK_MS_EquipmentTypesZoneEventTypes_MS_EquipmentType
		public MS_EquipmentTypesZoneEventTypeCollection MS_EquipmentTypesZoneEventTypesCol
		{
			get
			{
				if(_MS_EquipmentTypesZoneEventTypesCol == null) {
					_MS_EquipmentTypesZoneEventTypesCol = new MS_EquipmentTypesZoneEventTypeCollection();
					_MS_EquipmentTypesZoneEventTypesCol.LoadAndCloseReader(MS_EquipmentTypesZoneEventType.Query()
						.WHERE(MS_EquipmentTypesZoneEventType.Columns.EquipmentTypeID, EquipmentTypeID).ExecuteReader());
				}
				return _MS_EquipmentTypesZoneEventTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_EquipmentTypesZoneEventType class.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentTypesZoneEventTypeCollection : ActiveList<MS_EquipmentTypesZoneEventType, MS_EquipmentTypesZoneEventTypeCollection>
	{
		public static MS_EquipmentTypesZoneEventTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_EquipmentTypesZoneEventTypeCollection result = new MS_EquipmentTypesZoneEventTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_EquipmentTypesZoneEventType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_EquipmentTypesZoneEventTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_EquipmentTypesZoneEventType : ActiveRecord<MS_EquipmentTypesZoneEventType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_EquipmentTypesZoneEventType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_EquipmentTypesZoneEventTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipmentTypesZoneEventTypeID = new TableSchema.TableColumn(schema);
				colvarEquipmentTypesZoneEventTypeID.ColumnName = "EquipmentTypesZoneEventTypeID";
				colvarEquipmentTypesZoneEventTypeID.DataType = DbType.Int32;
				colvarEquipmentTypesZoneEventTypeID.MaxLength = 0;
				colvarEquipmentTypesZoneEventTypeID.AutoIncrement = true;
				colvarEquipmentTypesZoneEventTypeID.IsNullable = false;
				colvarEquipmentTypesZoneEventTypeID.IsPrimaryKey = true;
				colvarEquipmentTypesZoneEventTypeID.IsForeignKey = false;
				colvarEquipmentTypesZoneEventTypeID.IsReadOnly = false;
				colvarEquipmentTypesZoneEventTypeID.DefaultSetting = @"";
				colvarEquipmentTypesZoneEventTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipmentTypesZoneEventTypeID);

				TableSchema.TableColumn colvarEquipmentTypeID = new TableSchema.TableColumn(schema);
				colvarEquipmentTypeID.ColumnName = "EquipmentTypeID";
				colvarEquipmentTypeID.DataType = DbType.Int32;
				colvarEquipmentTypeID.MaxLength = 0;
				colvarEquipmentTypeID.AutoIncrement = false;
				colvarEquipmentTypeID.IsNullable = false;
				colvarEquipmentTypeID.IsPrimaryKey = false;
				colvarEquipmentTypeID.IsForeignKey = true;
				colvarEquipmentTypeID.IsReadOnly = false;
				colvarEquipmentTypeID.DefaultSetting = @"";
				colvarEquipmentTypeID.ForeignKeyTableName = "MS_EquipmentTypes";
				schema.Columns.Add(colvarEquipmentTypeID);

				TableSchema.TableColumn colvarAccountEventId = new TableSchema.TableColumn(schema);
				colvarAccountEventId.ColumnName = "AccountEventId";
				colvarAccountEventId.DataType = DbType.Int32;
				colvarAccountEventId.MaxLength = 0;
				colvarAccountEventId.AutoIncrement = false;
				colvarAccountEventId.IsNullable = false;
				colvarAccountEventId.IsPrimaryKey = false;
				colvarAccountEventId.IsForeignKey = true;
				colvarAccountEventId.IsReadOnly = false;
				colvarAccountEventId.DefaultSetting = @"";
				colvarAccountEventId.ForeignKeyTableName = "MS_AccountEvents";
				schema.Columns.Add(colvarAccountEventId);

				TableSchema.TableColumn colvarSortOrder = new TableSchema.TableColumn(schema);
				colvarSortOrder.ColumnName = "SortOrder";
				colvarSortOrder.DataType = DbType.Int32;
				colvarSortOrder.MaxLength = 0;
				colvarSortOrder.AutoIncrement = false;
				colvarSortOrder.IsNullable = false;
				colvarSortOrder.IsPrimaryKey = false;
				colvarSortOrder.IsForeignKey = false;
				colvarSortOrder.IsReadOnly = false;
				colvarSortOrder.DefaultSetting = @"";
				colvarSortOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSortOrder);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_EquipmentTypesZoneEventTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_EquipmentTypesZoneEventType LoadFrom(MS_EquipmentTypesZoneEventType item)
		{
			MS_EquipmentTypesZoneEventType result = new MS_EquipmentTypesZoneEventType();
			if (item.EquipmentTypesZoneEventTypeID != default(int)) {
				result.LoadByKey(item.EquipmentTypesZoneEventTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EquipmentTypesZoneEventTypeID {
			get { return GetColumnValue<int>(Columns.EquipmentTypesZoneEventTypeID); }
			set {
				SetColumnValue(Columns.EquipmentTypesZoneEventTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentTypesZoneEventTypeID));
			}
		}
		[DataMember]
		public int EquipmentTypeID {
			get { return GetColumnValue<int>(Columns.EquipmentTypeID); }
			set {
				SetColumnValue(Columns.EquipmentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipmentTypeID));
			}
		}
		[DataMember]
		public int AccountEventId {
			get { return GetColumnValue<int>(Columns.AccountEventId); }
			set {
				SetColumnValue(Columns.AccountEventId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountEventId));
			}
		}
		[DataMember]
		public int SortOrder {
			get { return GetColumnValue<int>(Columns.SortOrder); }
			set {
				SetColumnValue(Columns.SortOrder, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SortOrder));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AccountEvent _AccountEvent;
		//Relationship: FK_MS_EquipmentTypesZoneEventTypes_MS_AccountEvent
		public MS_AccountEvent AccountEvent
		{
			get
			{
				if(_AccountEvent == null) {
					_AccountEvent = MS_AccountEvent.FetchByID(this.AccountEventId);
				}
				return _AccountEvent;
			}
			set
			{
				SetColumnValue("AccountEventId", value.AccountEventID);
				_AccountEvent = value;
			}
		}

		private MS_EquipmentType _EquipmentType;
		//Relationship: FK_MS_EquipmentTypesZoneEventTypes_MS_EquipmentType
		public MS_EquipmentType EquipmentType
		{
			get
			{
				if(_EquipmentType == null) {
					_EquipmentType = MS_EquipmentType.FetchByID(this.EquipmentTypeID);
				}
				return _EquipmentType;
			}
			set
			{
				SetColumnValue("EquipmentTypeID", value.EquipmentTypeID);
				_EquipmentType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EquipmentTypesZoneEventTypeID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipmentTypesZoneEventTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipmentTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountEventIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SortOrderColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipmentTypesZoneEventTypeID = @"EquipmentTypesZoneEventTypeID";
			public static readonly string EquipmentTypeID = @"EquipmentTypeID";
			public static readonly string AccountEventId = @"AccountEventId";
			public static readonly string SortOrder = @"SortOrder";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipmentTypesZoneEventTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_IndustryAccount class.
	/// </summary>
	[DataContract]
	public partial class MS_IndustryAccountCollection : ActiveList<MS_IndustryAccount, MS_IndustryAccountCollection>
	{
		public static MS_IndustryAccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_IndustryAccountCollection result = new MS_IndustryAccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_IndustryAccount item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_IndustryAccounts table.
	/// </summary>
	[DataContract]
	public partial class MS_IndustryAccount : ActiveRecord<MS_IndustryAccount>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_IndustryAccount()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_IndustryAccounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarIndustryAccountID = new TableSchema.TableColumn(schema);
				colvarIndustryAccountID.ColumnName = "IndustryAccountID";
				colvarIndustryAccountID.DataType = DbType.Int64;
				colvarIndustryAccountID.MaxLength = 0;
				colvarIndustryAccountID.AutoIncrement = true;
				colvarIndustryAccountID.IsNullable = false;
				colvarIndustryAccountID.IsPrimaryKey = true;
				colvarIndustryAccountID.IsForeignKey = false;
				colvarIndustryAccountID.IsReadOnly = false;
				colvarIndustryAccountID.DefaultSetting = @"";
				colvarIndustryAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MS_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarReceiverLineId = new TableSchema.TableColumn(schema);
				colvarReceiverLineId.ColumnName = "ReceiverLineId";
				colvarReceiverLineId.DataType = DbType.AnsiString;
				colvarReceiverLineId.MaxLength = 30;
				colvarReceiverLineId.AutoIncrement = false;
				colvarReceiverLineId.IsNullable = false;
				colvarReceiverLineId.IsPrimaryKey = false;
				colvarReceiverLineId.IsForeignKey = true;
				colvarReceiverLineId.IsReadOnly = false;
				colvarReceiverLineId.DefaultSetting = @"";
				colvarReceiverLineId.ForeignKeyTableName = "MS_ReceiverLines";
				schema.Columns.Add(colvarReceiverLineId);

				TableSchema.TableColumn colvarReceiverLineBlockId = new TableSchema.TableColumn(schema);
				colvarReceiverLineBlockId.ColumnName = "ReceiverLineBlockId";
				colvarReceiverLineBlockId.DataType = DbType.AnsiString;
				colvarReceiverLineBlockId.MaxLength = 50;
				colvarReceiverLineBlockId.AutoIncrement = false;
				colvarReceiverLineBlockId.IsNullable = false;
				colvarReceiverLineBlockId.IsPrimaryKey = false;
				colvarReceiverLineBlockId.IsForeignKey = true;
				colvarReceiverLineBlockId.IsReadOnly = false;
				colvarReceiverLineBlockId.DefaultSetting = @"";
				colvarReceiverLineBlockId.ForeignKeyTableName = "MS_ReceiverLineBlocks";
				schema.Columns.Add(colvarReceiverLineBlockId);

				TableSchema.TableColumn colvarSubscriberId = new TableSchema.TableColumn(schema);
				colvarSubscriberId.ColumnName = "SubscriberId";
				colvarSubscriberId.DataType = DbType.AnsiString;
				colvarSubscriberId.MaxLength = 6;
				colvarSubscriberId.AutoIncrement = false;
				colvarSubscriberId.IsNullable = false;
				colvarSubscriberId.IsPrimaryKey = false;
				colvarSubscriberId.IsForeignKey = false;
				colvarSubscriberId.IsReadOnly = false;
				colvarSubscriberId.DefaultSetting = @"";
				colvarSubscriberId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubscriberId);

				TableSchema.TableColumn colvarCsid = new TableSchema.TableColumn(schema);
				colvarCsid.ColumnName = "Csid";
				colvarCsid.DataType = DbType.AnsiString;
				colvarCsid.MaxLength = 15;
				colvarCsid.AutoIncrement = false;
				colvarCsid.IsNullable = true;
				colvarCsid.IsPrimaryKey = false;
				colvarCsid.IsForeignKey = false;
				colvarCsid.IsReadOnly = false;
				colvarCsid.DefaultSetting = @"";
				colvarCsid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsid);

				TableSchema.TableColumn colvarInTestMode = new TableSchema.TableColumn(schema);
				colvarInTestMode.ColumnName = "InTestMode";
				colvarInTestMode.DataType = DbType.Boolean;
				colvarInTestMode.MaxLength = 0;
				colvarInTestMode.AutoIncrement = false;
				colvarInTestMode.IsNullable = false;
				colvarInTestMode.IsPrimaryKey = false;
				colvarInTestMode.IsForeignKey = false;
				colvarInTestMode.IsReadOnly = false;
				colvarInTestMode.DefaultSetting = @"((0))";
				colvarInTestMode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInTestMode);

				TableSchema.TableColumn colvarIsMove = new TableSchema.TableColumn(schema);
				colvarIsMove.ColumnName = "IsMove";
				colvarIsMove.DataType = DbType.Boolean;
				colvarIsMove.MaxLength = 0;
				colvarIsMove.AutoIncrement = false;
				colvarIsMove.IsNullable = false;
				colvarIsMove.IsPrimaryKey = false;
				colvarIsMove.IsForeignKey = false;
				colvarIsMove.IsReadOnly = false;
				colvarIsMove.DefaultSetting = @"((0))";
				colvarIsMove.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMove);

				TableSchema.TableColumn colvarIsTakeover = new TableSchema.TableColumn(schema);
				colvarIsTakeover.ColumnName = "IsTakeover";
				colvarIsTakeover.DataType = DbType.Boolean;
				colvarIsTakeover.MaxLength = 0;
				colvarIsTakeover.AutoIncrement = false;
				colvarIsTakeover.IsNullable = false;
				colvarIsTakeover.IsPrimaryKey = false;
				colvarIsTakeover.IsForeignKey = false;
				colvarIsTakeover.IsReadOnly = false;
				colvarIsTakeover.DefaultSetting = @"((0))";
				colvarIsTakeover.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTakeover);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_IndustryAccounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_IndustryAccount LoadFrom(MS_IndustryAccount item)
		{
			MS_IndustryAccount result = new MS_IndustryAccount();
			if (item.IndustryAccountID != default(long)) {
				result.LoadByKey(item.IndustryAccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long IndustryAccountID {
			get { return GetColumnValue<long>(Columns.IndustryAccountID); }
			set {
				SetColumnValue(Columns.IndustryAccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryAccountID));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public string ReceiverLineId {
			get { return GetColumnValue<string>(Columns.ReceiverLineId); }
			set {
				SetColumnValue(Columns.ReceiverLineId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineId));
			}
		}
		[DataMember]
		public string ReceiverLineBlockId {
			get { return GetColumnValue<string>(Columns.ReceiverLineBlockId); }
			set {
				SetColumnValue(Columns.ReceiverLineBlockId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineBlockId));
			}
		}
		[DataMember]
		public string SubscriberId {
			get { return GetColumnValue<string>(Columns.SubscriberId); }
			set {
				SetColumnValue(Columns.SubscriberId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubscriberId));
			}
		}
		[DataMember]
		public string Csid {
			get { return GetColumnValue<string>(Columns.Csid); }
			set {
				SetColumnValue(Columns.Csid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Csid));
			}
		}
		[DataMember]
		public bool InTestMode {
			get { return GetColumnValue<bool>(Columns.InTestMode); }
			set {
				SetColumnValue(Columns.InTestMode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InTestMode));
			}
		}
		[DataMember]
		public bool IsMove {
			get { return GetColumnValue<bool>(Columns.IsMove); }
			set {
				SetColumnValue(Columns.IsMove, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsMove));
			}
		}
		[DataMember]
		public bool IsTakeover {
			get { return GetColumnValue<bool>(Columns.IsTakeover); }
			set {
				SetColumnValue(Columns.IsTakeover, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTakeover));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Account _Account;
		//Relationship: FK_MS_IndustryAccounts_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		private MS_ReceiverLineBlock _ReceiverLineBlock;
		//Relationship: FK_MS_IndustryAccounts_MS_ReceiverLineBlocks
		public MS_ReceiverLineBlock ReceiverLineBlock
		{
			get
			{
				if(_ReceiverLineBlock == null) {
					_ReceiverLineBlock = MS_ReceiverLineBlock.FetchByID(this.ReceiverLineBlockId);
				}
				return _ReceiverLineBlock;
			}
			set
			{
				SetColumnValue("ReceiverLineBlockId", value.ReceiverLineBlockID);
				_ReceiverLineBlock = value;
			}
		}

		private MS_ReceiverLine _ReceiverLine;
		//Relationship: FK_MS_IndustryAccounts_MS_ReceiverLines
		public MS_ReceiverLine ReceiverLine
		{
			get
			{
				if(_ReceiverLine == null) {
					_ReceiverLine = MS_ReceiverLine.FetchByID(this.ReceiverLineId);
				}
				return _ReceiverLine;
			}
			set
			{
				SetColumnValue("ReceiverLineId", value.ReceiverLineID);
				_ReceiverLine = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return IndustryAccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IndustryAccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ReceiverLineIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ReceiverLineBlockIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SubscriberIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CsidColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn InTestModeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsMoveColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsTakeoverColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string IndustryAccountID = @"IndustryAccountID";
			public static readonly string AccountId = @"AccountId";
			public static readonly string ReceiverLineId = @"ReceiverLineId";
			public static readonly string ReceiverLineBlockId = @"ReceiverLineBlockId";
			public static readonly string SubscriberId = @"SubscriberId";
			public static readonly string Csid = @"Csid";
			public static readonly string InTestMode = @"InTestMode";
			public static readonly string IsMove = @"IsMove";
			public static readonly string IsTakeover = @"IsTakeover";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return IndustryAccountID; }
		}
		*/

		#region Foreign Collections

		private GS_AccountCollection _GS_AccountsCol;
		//Relationship: FK_GS_Accounts_MS_IndustryAccounts
		public GS_AccountCollection GS_AccountsCol
		{
			get
			{
				if(_GS_AccountsCol == null) {
					_GS_AccountsCol = new GS_AccountCollection();
					_GS_AccountsCol.LoadAndCloseReader(GS_Account.Query()
						.WHERE(GS_Account.Columns.IndustryAccountId, IndustryAccountID).ExecuteReader());
				}
				return _GS_AccountsCol;
			}
		}

		private MS_AccountDispatchAgencyAssignmentCollection _MS_AccountDispatchAgencyAssignmentsCol;
		//Relationship: FK_MS_AccountDispatchAgencyAssignments_MS_IndustryAccounts
		public MS_AccountDispatchAgencyAssignmentCollection MS_AccountDispatchAgencyAssignmentsCol
		{
			get
			{
				if(_MS_AccountDispatchAgencyAssignmentsCol == null) {
					_MS_AccountDispatchAgencyAssignmentsCol = new MS_AccountDispatchAgencyAssignmentCollection();
					_MS_AccountDispatchAgencyAssignmentsCol.LoadAndCloseReader(MS_AccountDispatchAgencyAssignment.Query()
						.WHERE(MS_AccountDispatchAgencyAssignment.Columns.IndustryAccountId, IndustryAccountID).ExecuteReader());
				}
				return _MS_AccountDispatchAgencyAssignmentsCol;
			}
		}

		private MS_AccountCollection _MS_AccountsCol;
		//Relationship: FK_MS_Accounts_MS_IndustryAccounts
		public MS_AccountCollection MS_AccountsCol
		{
			get
			{
				if(_MS_AccountsCol == null) {
					_MS_AccountsCol = new MS_AccountCollection();
					_MS_AccountsCol.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.IndustryAccountId, IndustryAccountID).ExecuteReader());
				}
				return _MS_AccountsCol;
			}
		}

		private MS_AccountCollection _MS_Accounts02Col;
		//Relationship: FK_MS_Accounts_MS_IndustryAccounts1
		public MS_AccountCollection MS_Accounts02Col
		{
			get
			{
				if(_MS_Accounts02Col == null) {
					_MS_Accounts02Col = new MS_AccountCollection();
					_MS_Accounts02Col.LoadAndCloseReader(MS_Account.Query()
						.WHERE(MS_Account.Columns.IndustryAccount2Id, IndustryAccountID).ExecuteReader());
				}
				return _MS_Accounts02Col;
			}
		}

		private MS_AccountSubmitCollection _MS_AccountSubmitsCol;
		//Relationship: FK_MS_AccountSubmits_MS_IndustryAccounts
		public MS_AccountSubmitCollection MS_AccountSubmitsCol
		{
			get
			{
				if(_MS_AccountSubmitsCol == null) {
					_MS_AccountSubmitsCol = new MS_AccountSubmitCollection();
					_MS_AccountSubmitsCol.LoadAndCloseReader(MS_AccountSubmit.Query()
						.WHERE(MS_AccountSubmit.Columns.IndustryAccountId, IndustryAccountID).ExecuteReader());
				}
				return _MS_AccountSubmitsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_Market class.
	/// </summary>
	[DataContract]
	public partial class MS_MarketCollection : ActiveList<MS_Market, MS_MarketCollection>
	{
		public static MS_MarketCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MarketCollection result = new MS_MarketCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_Market item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_Market table.
	/// </summary>
	[DataContract]
	public partial class MS_Market : ActiveRecord<MS_Market>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_Market()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_Market", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMarketID = new TableSchema.TableColumn(schema);
				colvarMarketID.ColumnName = "MarketID";
				colvarMarketID.DataType = DbType.Int32;
				colvarMarketID.MaxLength = 0;
				colvarMarketID.AutoIncrement = true;
				colvarMarketID.IsNullable = false;
				colvarMarketID.IsPrimaryKey = true;
				colvarMarketID.IsForeignKey = false;
				colvarMarketID.IsReadOnly = false;
				colvarMarketID.DefaultSetting = @"";
				colvarMarketID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMarketID);

				TableSchema.TableColumn colvarMStationOSId = new TableSchema.TableColumn(schema);
				colvarMStationOSId.ColumnName = "MStationOSId";
				colvarMStationOSId.DataType = DbType.AnsiString;
				colvarMStationOSId.MaxLength = 50;
				colvarMStationOSId.AutoIncrement = false;
				colvarMStationOSId.IsNullable = false;
				colvarMStationOSId.IsPrimaryKey = false;
				colvarMStationOSId.IsForeignKey = true;
				colvarMStationOSId.IsReadOnly = false;
				colvarMStationOSId.DefaultSetting = @"";
				colvarMStationOSId.ForeignKeyTableName = "MS_MonitoringStationOSs";
				schema.Columns.Add(colvarMStationOSId);

				TableSchema.TableColumn colvarMarketName = new TableSchema.TableColumn(schema);
				colvarMarketName.ColumnName = "MarketName";
				colvarMarketName.DataType = DbType.String;
				colvarMarketName.MaxLength = 50;
				colvarMarketName.AutoIncrement = false;
				colvarMarketName.IsNullable = false;
				colvarMarketName.IsPrimaryKey = false;
				colvarMarketName.IsForeignKey = false;
				colvarMarketName.IsReadOnly = false;
				colvarMarketName.DefaultSetting = @"";
				colvarMarketName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMarketName);

				TableSchema.TableColumn colvarIsPurchasedLine = new TableSchema.TableColumn(schema);
				colvarIsPurchasedLine.ColumnName = "IsPurchasedLine";
				colvarIsPurchasedLine.DataType = DbType.Boolean;
				colvarIsPurchasedLine.MaxLength = 0;
				colvarIsPurchasedLine.AutoIncrement = false;
				colvarIsPurchasedLine.IsNullable = false;
				colvarIsPurchasedLine.IsPrimaryKey = false;
				colvarIsPurchasedLine.IsForeignKey = false;
				colvarIsPurchasedLine.IsReadOnly = false;
				colvarIsPurchasedLine.DefaultSetting = @"";
				colvarIsPurchasedLine.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPurchasedLine);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_Market",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_Market LoadFrom(MS_Market item)
		{
			MS_Market result = new MS_Market();
			if (item.MarketID != default(int)) {
				result.LoadByKey(item.MarketID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MarketID {
			get { return GetColumnValue<int>(Columns.MarketID); }
			set {
				SetColumnValue(Columns.MarketID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MarketID));
			}
		}
		[DataMember]
		public string MStationOSId {
			get { return GetColumnValue<string>(Columns.MStationOSId); }
			set {
				SetColumnValue(Columns.MStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MStationOSId));
			}
		}
		[DataMember]
		public string MarketName {
			get { return GetColumnValue<string>(Columns.MarketName); }
			set {
				SetColumnValue(Columns.MarketName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MarketName));
			}
		}
		[DataMember]
		public bool IsPurchasedLine {
			get { return GetColumnValue<bool>(Columns.IsPurchasedLine); }
			set {
				SetColumnValue(Columns.IsPurchasedLine, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPurchasedLine));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_MonitoringStationOss _MStationOS;
		//Relationship: FK_MS_Market_MS_MonitoringStationOSs
		public MS_MonitoringStationOss MStationOS
		{
			get
			{
				if(_MStationOS == null) {
					_MStationOS = MS_MonitoringStationOss.FetchByID(this.MStationOSId);
				}
				return _MStationOS;
			}
			set
			{
				SetColumnValue("MStationOSId", value.MonitoringStationOSID);
				_MStationOS = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MStationOSId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MarketIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MStationOSIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MarketNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsPurchasedLineColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MarketID = @"MarketID";
			public static readonly string MStationOSId = @"MStationOSId";
			public static readonly string MarketName = @"MarketName";
			public static readonly string IsPurchasedLine = @"IsPurchasedLine";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MarketID; }
		}
		*/

		#region Foreign Collections

		private MS_MarketSubConversionCollection _MS_MarketSubConversionsCol;
		//Relationship: FK_MS_MarketSubConversion_MS_Market
		public MS_MarketSubConversionCollection MS_MarketSubConversionsCol
		{
			get
			{
				if(_MS_MarketSubConversionsCol == null) {
					_MS_MarketSubConversionsCol = new MS_MarketSubConversionCollection();
					_MS_MarketSubConversionsCol.LoadAndCloseReader(MS_MarketSubConversion.Query()
						.WHERE(MS_MarketSubConversion.Columns.MarketId, MarketID).ExecuteReader());
				}
				return _MS_MarketSubConversionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_MarketSubConversion class.
	/// </summary>
	[DataContract]
	public partial class MS_MarketSubConversionCollection : ActiveList<MS_MarketSubConversion, MS_MarketSubConversionCollection>
	{
		public static MS_MarketSubConversionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MarketSubConversionCollection result = new MS_MarketSubConversionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MarketSubConversion item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MarketSubConversion table.
	/// </summary>
	[DataContract]
	public partial class MS_MarketSubConversion : ActiveRecord<MS_MarketSubConversion>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MarketSubConversion()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MarketSubConversion", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTeamLocationId = new TableSchema.TableColumn(schema);
				colvarTeamLocationId.ColumnName = "TeamLocationId";
				colvarTeamLocationId.DataType = DbType.Int32;
				colvarTeamLocationId.MaxLength = 0;
				colvarTeamLocationId.AutoIncrement = false;
				colvarTeamLocationId.IsNullable = false;
				colvarTeamLocationId.IsPrimaryKey = true;
				colvarTeamLocationId.IsForeignKey = false;
				colvarTeamLocationId.IsReadOnly = false;
				colvarTeamLocationId.DefaultSetting = @"";
				colvarTeamLocationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationId);

				TableSchema.TableColumn colvarMarketId = new TableSchema.TableColumn(schema);
				colvarMarketId.ColumnName = "MarketId";
				colvarMarketId.DataType = DbType.Int32;
				colvarMarketId.MaxLength = 0;
				colvarMarketId.AutoIncrement = false;
				colvarMarketId.IsNullable = false;
				colvarMarketId.IsPrimaryKey = false;
				colvarMarketId.IsForeignKey = true;
				colvarMarketId.IsReadOnly = false;
				colvarMarketId.DefaultSetting = @"";
				colvarMarketId.ForeignKeyTableName = "MS_Market";
				schema.Columns.Add(colvarMarketId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MarketSubConversion",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MarketSubConversion LoadFrom(MS_MarketSubConversion item)
		{
			MS_MarketSubConversion result = new MS_MarketSubConversion();
			if (item.TeamLocationId != default(int)) {
				result.LoadByKey(item.TeamLocationId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TeamLocationId {
			get { return GetColumnValue<int>(Columns.TeamLocationId); }
			set {
				SetColumnValue(Columns.TeamLocationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationId));
			}
		}
		[DataMember]
		public int MarketId {
			get { return GetColumnValue<int>(Columns.MarketId); }
			set {
				SetColumnValue(Columns.MarketId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MarketId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Market _Market;
		//Relationship: FK_MS_MarketSubConversion_MS_Market
		public MS_Market Market
		{
			get
			{
				if(_Market == null) {
					_Market = MS_Market.FetchByID(this.MarketId);
				}
				return _Market;
			}
			set
			{
				SetColumnValue("MarketId", value.MarketID);
				_Market = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TeamLocationId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TeamLocationIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MarketIdColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TeamLocationId = @"TeamLocationId";
			public static readonly string MarketId = @"MarketId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TeamLocationId; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitoringStationOss class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitoringStationOssCollection : ActiveList<MS_MonitoringStationOss, MS_MonitoringStationOssCollection>
	{
		public static MS_MonitoringStationOssCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitoringStationOssCollection result = new MS_MonitoringStationOssCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitoringStationOss item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitoringStationOSs table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitoringStationOss : ActiveRecord<MS_MonitoringStationOss>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitoringStationOss()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitoringStationOSs", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMonitoringStationOSID = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSID.ColumnName = "MonitoringStationOSID";
				colvarMonitoringStationOSID.DataType = DbType.AnsiString;
				colvarMonitoringStationOSID.MaxLength = 50;
				colvarMonitoringStationOSID.AutoIncrement = false;
				colvarMonitoringStationOSID.IsNullable = false;
				colvarMonitoringStationOSID.IsPrimaryKey = true;
				colvarMonitoringStationOSID.IsForeignKey = false;
				colvarMonitoringStationOSID.IsReadOnly = false;
				colvarMonitoringStationOSID.DefaultSetting = @"";
				colvarMonitoringStationOSID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationOSID);

				TableSchema.TableColumn colvarMonitoringStationId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationId.ColumnName = "MonitoringStationId";
				colvarMonitoringStationId.DataType = DbType.AnsiString;
				colvarMonitoringStationId.MaxLength = 50;
				colvarMonitoringStationId.AutoIncrement = false;
				colvarMonitoringStationId.IsNullable = false;
				colvarMonitoringStationId.IsPrimaryKey = false;
				colvarMonitoringStationId.IsForeignKey = true;
				colvarMonitoringStationId.IsReadOnly = false;
				colvarMonitoringStationId.DefaultSetting = @"";
				colvarMonitoringStationId.ForeignKeyTableName = "MS_MonitoringStations";
				schema.Columns.Add(colvarMonitoringStationId);

				TableSchema.TableColumn colvarOSDescription = new TableSchema.TableColumn(schema);
				colvarOSDescription.ColumnName = "OSDescription";
				colvarOSDescription.DataType = DbType.String;
				colvarOSDescription.MaxLength = 50;
				colvarOSDescription.AutoIncrement = false;
				colvarOSDescription.IsNullable = false;
				colvarOSDescription.IsPrimaryKey = false;
				colvarOSDescription.IsForeignKey = false;
				colvarOSDescription.IsReadOnly = false;
				colvarOSDescription.DefaultSetting = @"";
				colvarOSDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOSDescription);

				TableSchema.TableColumn colvarWSURL = new TableSchema.TableColumn(schema);
				colvarWSURL.ColumnName = "WSURL";
				colvarWSURL.DataType = DbType.AnsiString;
				colvarWSURL.MaxLength = 500;
				colvarWSURL.AutoIncrement = false;
				colvarWSURL.IsNullable = true;
				colvarWSURL.IsPrimaryKey = false;
				colvarWSURL.IsForeignKey = false;
				colvarWSURL.IsReadOnly = false;
				colvarWSURL.DefaultSetting = @"";
				colvarWSURL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWSURL);

				TableSchema.TableColumn colvarWSUID = new TableSchema.TableColumn(schema);
				colvarWSUID.ColumnName = "WSUID";
				colvarWSUID.DataType = DbType.AnsiString;
				colvarWSUID.MaxLength = 50;
				colvarWSUID.AutoIncrement = false;
				colvarWSUID.IsNullable = true;
				colvarWSUID.IsPrimaryKey = false;
				colvarWSUID.IsForeignKey = false;
				colvarWSUID.IsReadOnly = false;
				colvarWSUID.DefaultSetting = @"";
				colvarWSUID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWSUID);

				TableSchema.TableColumn colvarWSPWD = new TableSchema.TableColumn(schema);
				colvarWSPWD.ColumnName = "WSPWD";
				colvarWSPWD.DataType = DbType.AnsiString;
				colvarWSPWD.MaxLength = 50;
				colvarWSPWD.AutoIncrement = false;
				colvarWSPWD.IsNullable = true;
				colvarWSPWD.IsPrimaryKey = false;
				colvarWSPWD.IsForeignKey = false;
				colvarWSPWD.IsReadOnly = false;
				colvarWSPWD.DefaultSetting = @"";
				colvarWSPWD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWSPWD);

				TableSchema.TableColumn colvarWSTestURL = new TableSchema.TableColumn(schema);
				colvarWSTestURL.ColumnName = "WSTestURL";
				colvarWSTestURL.DataType = DbType.AnsiString;
				colvarWSTestURL.MaxLength = 500;
				colvarWSTestURL.AutoIncrement = false;
				colvarWSTestURL.IsNullable = true;
				colvarWSTestURL.IsPrimaryKey = false;
				colvarWSTestURL.IsForeignKey = false;
				colvarWSTestURL.IsReadOnly = false;
				colvarWSTestURL.DefaultSetting = @"";
				colvarWSTestURL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWSTestURL);

				TableSchema.TableColumn colvarWSTestUID = new TableSchema.TableColumn(schema);
				colvarWSTestUID.ColumnName = "WSTestUID";
				colvarWSTestUID.DataType = DbType.AnsiString;
				colvarWSTestUID.MaxLength = 50;
				colvarWSTestUID.AutoIncrement = false;
				colvarWSTestUID.IsNullable = true;
				colvarWSTestUID.IsPrimaryKey = false;
				colvarWSTestUID.IsForeignKey = false;
				colvarWSTestUID.IsReadOnly = false;
				colvarWSTestUID.DefaultSetting = @"";
				colvarWSTestUID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWSTestUID);

				TableSchema.TableColumn colvarWSTestPWD = new TableSchema.TableColumn(schema);
				colvarWSTestPWD.ColumnName = "WSTestPWD";
				colvarWSTestPWD.DataType = DbType.AnsiString;
				colvarWSTestPWD.MaxLength = 50;
				colvarWSTestPWD.AutoIncrement = false;
				colvarWSTestPWD.IsNullable = true;
				colvarWSTestPWD.IsPrimaryKey = false;
				colvarWSTestPWD.IsForeignKey = false;
				colvarWSTestPWD.IsReadOnly = false;
				colvarWSTestPWD.DefaultSetting = @"";
				colvarWSTestPWD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWSTestPWD);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitoringStationOSs",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitoringStationOss LoadFrom(MS_MonitoringStationOss item)
		{
			MS_MonitoringStationOss result = new MS_MonitoringStationOss();
			if (item.MonitoringStationOSID != default(string)) {
				result.LoadByKey(item.MonitoringStationOSID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string MonitoringStationOSID {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSID); }
			set {
				SetColumnValue(Columns.MonitoringStationOSID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSID));
			}
		}
		[DataMember]
		public string MonitoringStationId {
			get { return GetColumnValue<string>(Columns.MonitoringStationId); }
			set {
				SetColumnValue(Columns.MonitoringStationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationId));
			}
		}
		[DataMember]
		public string OSDescription {
			get { return GetColumnValue<string>(Columns.OSDescription); }
			set {
				SetColumnValue(Columns.OSDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OSDescription));
			}
		}
		[DataMember]
		public string WSURL {
			get { return GetColumnValue<string>(Columns.WSURL); }
			set {
				SetColumnValue(Columns.WSURL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WSURL));
			}
		}
		[DataMember]
		public string WSUID {
			get { return GetColumnValue<string>(Columns.WSUID); }
			set {
				SetColumnValue(Columns.WSUID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WSUID));
			}
		}
		[DataMember]
		public string WSPWD {
			get { return GetColumnValue<string>(Columns.WSPWD); }
			set {
				SetColumnValue(Columns.WSPWD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WSPWD));
			}
		}
		[DataMember]
		public string WSTestURL {
			get { return GetColumnValue<string>(Columns.WSTestURL); }
			set {
				SetColumnValue(Columns.WSTestURL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WSTestURL));
			}
		}
		[DataMember]
		public string WSTestUID {
			get { return GetColumnValue<string>(Columns.WSTestUID); }
			set {
				SetColumnValue(Columns.WSTestUID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WSTestUID));
			}
		}
		[DataMember]
		public string WSTestPWD {
			get { return GetColumnValue<string>(Columns.WSTestPWD); }
			set {
				SetColumnValue(Columns.WSTestPWD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WSTestPWD));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_MonitoringStation _MonitoringStation;
		//Relationship: FK_MS_MonitoringStationOSs_MS_MonitoringStations
		public MS_MonitoringStation MonitoringStation
		{
			get
			{
				if(_MonitoringStation == null) {
					_MonitoringStation = MS_MonitoringStation.FetchByID(this.MonitoringStationId);
				}
				return _MonitoringStation;
			}
			set
			{
				SetColumnValue("MonitoringStationId", value.MonitoringStationsID);
				_MonitoringStation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MonitoringStationId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MonitoringStationOSIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MonitoringStationIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn OSDescriptionColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn WSURLColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn WSUIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn WSPWDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn WSTestURLColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn WSTestUIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn WSTestPWDColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[16]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MonitoringStationOSID = @"MonitoringStationOSID";
			public static readonly string MonitoringStationId = @"MonitoringStationId";
			public static readonly string OSDescription = @"OSDescription";
			public static readonly string WSURL = @"WSURL";
			public static readonly string WSUID = @"WSUID";
			public static readonly string WSPWD = @"WSPWD";
			public static readonly string WSTestURL = @"WSTestURL";
			public static readonly string WSTestUID = @"WSTestUID";
			public static readonly string WSTestPWD = @"WSTestPWD";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MonitoringStationOSID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountEventCollection _MS_AccountEventsCol;
		//Relationship: FK_MS_AccountEvents_MS_MonitoringStationOSs
		public MS_AccountEventCollection MS_AccountEventsCol
		{
			get
			{
				if(_MS_AccountEventsCol == null) {
					_MS_AccountEventsCol = new MS_AccountEventCollection();
					_MS_AccountEventsCol.LoadAndCloseReader(MS_AccountEvent.Query()
						.WHERE(MS_AccountEvent.Columns.MonitoringStationOSId, MonitoringStationOSID).ExecuteReader());
				}
				return _MS_AccountEventsCol;
			}
		}

		private MS_AccountSignalFormatTypeCollection _MS_AccountSignalFormatTypesCol;
		//Relationship: FK_MS_AccountSignalFormatTypes_MS_MonitoringStationOSs
		public MS_AccountSignalFormatTypeCollection MS_AccountSignalFormatTypesCol
		{
			get
			{
				if(_MS_AccountSignalFormatTypesCol == null) {
					_MS_AccountSignalFormatTypesCol = new MS_AccountSignalFormatTypeCollection();
					_MS_AccountSignalFormatTypesCol.LoadAndCloseReader(MS_AccountSignalFormatType.Query()
						.WHERE(MS_AccountSignalFormatType.Columns.MonitoringStationOSId, MonitoringStationOSID).ExecuteReader());
				}
				return _MS_AccountSignalFormatTypesCol;
			}
		}

		private MS_AccountSubmitCollection _MS_AccountSubmitsCol;
		//Relationship: FK_MS_AccountSubmits_MS_MonitoringStationOSs
		public MS_AccountSubmitCollection MS_AccountSubmitsCol
		{
			get
			{
				if(_MS_AccountSubmitsCol == null) {
					_MS_AccountSubmitsCol = new MS_AccountSubmitCollection();
					_MS_AccountSubmitsCol.LoadAndCloseReader(MS_AccountSubmit.Query()
						.WHERE(MS_AccountSubmit.Columns.MonitoringStationOSId, MonitoringStationOSID).ExecuteReader());
				}
				return _MS_AccountSubmitsCol;
			}
		}

		private MS_DispatchAgencyCollection _MS_DispatchAgenciesCol;
		//Relationship: FK_MS_DispatchAgencies_MS_MonitoringStationOSs
		public MS_DispatchAgencyCollection MS_DispatchAgenciesCol
		{
			get
			{
				if(_MS_DispatchAgenciesCol == null) {
					_MS_DispatchAgenciesCol = new MS_DispatchAgencyCollection();
					_MS_DispatchAgenciesCol.LoadAndCloseReader(MS_DispatchAgency.Query()
						.WHERE(MS_DispatchAgency.Columns.MonitoringStationOSId, MonitoringStationOSID).ExecuteReader());
				}
				return _MS_DispatchAgenciesCol;
			}
		}

		private MS_EmergencyContactAuthorityCollection _MS_EmergencyContactAuthoritiesCol;
		//Relationship: FK_MS_EmergencyContactAuthorities_MS_MonitoringStationOSs
		public MS_EmergencyContactAuthorityCollection MS_EmergencyContactAuthoritiesCol
		{
			get
			{
				if(_MS_EmergencyContactAuthoritiesCol == null) {
					_MS_EmergencyContactAuthoritiesCol = new MS_EmergencyContactAuthorityCollection();
					_MS_EmergencyContactAuthoritiesCol.LoadAndCloseReader(MS_EmergencyContactAuthority.Query()
						.WHERE(MS_EmergencyContactAuthority.Columns.MonitoringStationOSId, MonitoringStationOSID).ExecuteReader());
				}
				return _MS_EmergencyContactAuthoritiesCol;
			}
		}

		private MS_EmergencyContactPhoneTypeCollection _MS_EmergencyContactPhoneTypesCol;
		//Relationship: FK_MS_EmergencyContactPhoneTypes_MS_MonitoringStationOSs
		public MS_EmergencyContactPhoneTypeCollection MS_EmergencyContactPhoneTypesCol
		{
			get
			{
				if(_MS_EmergencyContactPhoneTypesCol == null) {
					_MS_EmergencyContactPhoneTypesCol = new MS_EmergencyContactPhoneTypeCollection();
					_MS_EmergencyContactPhoneTypesCol.LoadAndCloseReader(MS_EmergencyContactPhoneType.Query()
						.WHERE(MS_EmergencyContactPhoneType.Columns.MonitoringStationOSId, MonitoringStationOSID).ExecuteReader());
				}
				return _MS_EmergencyContactPhoneTypesCol;
			}
		}

		private MS_EmergencyContactRelationshipCollection _MS_EmergencyContactRelationshipsCol;
		//Relationship: FK_MS_EmergencyContactRelationships_MS_MonitoringStationOSs
		public MS_EmergencyContactRelationshipCollection MS_EmergencyContactRelationshipsCol
		{
			get
			{
				if(_MS_EmergencyContactRelationshipsCol == null) {
					_MS_EmergencyContactRelationshipsCol = new MS_EmergencyContactRelationshipCollection();
					_MS_EmergencyContactRelationshipsCol.LoadAndCloseReader(MS_EmergencyContactRelationship.Query()
						.WHERE(MS_EmergencyContactRelationship.Columns.MonitoringStationOSId, MonitoringStationOSID).ExecuteReader());
				}
				return _MS_EmergencyContactRelationshipsCol;
			}
		}

		private MS_EmergencyContactTypeCollection _MS_EmergencyContactTypesCol;
		//Relationship: FK_MS_EmergencyContactTypes_MS_MonitoringStationOSs
		public MS_EmergencyContactTypeCollection MS_EmergencyContactTypesCol
		{
			get
			{
				if(_MS_EmergencyContactTypesCol == null) {
					_MS_EmergencyContactTypesCol = new MS_EmergencyContactTypeCollection();
					_MS_EmergencyContactTypesCol.LoadAndCloseReader(MS_EmergencyContactType.Query()
						.WHERE(MS_EmergencyContactType.Columns.MonitoringStationOSId, MonitoringStationOSID).ExecuteReader());
				}
				return _MS_EmergencyContactTypesCol;
			}
		}

		private MS_EquipmentAccountZoneTypeEventCollection _MS_EquipmentAccountZoneTypeEventsCol;
		//Relationship: FK_MS_EquipmentAccountZoneTypeEvents_MS_MonitoringStationOSs
		public MS_EquipmentAccountZoneTypeEventCollection MS_EquipmentAccountZoneTypeEventsCol
		{
			get
			{
				if(_MS_EquipmentAccountZoneTypeEventsCol == null) {
					_MS_EquipmentAccountZoneTypeEventsCol = new MS_EquipmentAccountZoneTypeEventCollection();
					_MS_EquipmentAccountZoneTypeEventsCol.LoadAndCloseReader(MS_EquipmentAccountZoneTypeEvent.Query()
						.WHERE(MS_EquipmentAccountZoneTypeEvent.Columns.MonitoringStationOSId, MonitoringStationOSID).ExecuteReader());
				}
				return _MS_EquipmentAccountZoneTypeEventsCol;
			}
		}

		private MS_MarketCollection _MS_MarketsCol;
		//Relationship: FK_MS_Market_MS_MonitoringStationOSs
		public MS_MarketCollection MS_MarketsCol
		{
			get
			{
				if(_MS_MarketsCol == null) {
					_MS_MarketsCol = new MS_MarketCollection();
					_MS_MarketsCol.LoadAndCloseReader(MS_Market.Query()
						.WHERE(MS_Market.Columns.MStationOSId, MonitoringStationOSID).ExecuteReader());
				}
				return _MS_MarketsCol;
			}
		}

		private MS_ReceiverLineCollection _MS_ReceiverLinesCol;
		//Relationship: FK_MS_ReceiverLines_MS_MonitoringStationOSs
		public MS_ReceiverLineCollection MS_ReceiverLinesCol
		{
			get
			{
				if(_MS_ReceiverLinesCol == null) {
					_MS_ReceiverLinesCol = new MS_ReceiverLineCollection();
					_MS_ReceiverLinesCol.LoadAndCloseReader(MS_ReceiverLine.Query()
						.WHERE(MS_ReceiverLine.Columns.MonitoringStationOSId, MonitoringStationOSID).ExecuteReader());
				}
				return _MS_ReceiverLinesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitoringStation class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitoringStationCollection : ActiveList<MS_MonitoringStation, MS_MonitoringStationCollection>
	{
		public static MS_MonitoringStationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitoringStationCollection result = new MS_MonitoringStationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitoringStation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitoringStations table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitoringStation : ActiveRecord<MS_MonitoringStation>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Avant_GuardID = "AG";
			[EnumMember()] public const string CriticomID = "CC";
			[EnumMember()] public const string MonitronicsID = "MI";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitoringStation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitoringStations", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMonitoringStationsID = new TableSchema.TableColumn(schema);
				colvarMonitoringStationsID.ColumnName = "MonitoringStationsID";
				colvarMonitoringStationsID.DataType = DbType.AnsiString;
				colvarMonitoringStationsID.MaxLength = 50;
				colvarMonitoringStationsID.AutoIncrement = false;
				colvarMonitoringStationsID.IsNullable = false;
				colvarMonitoringStationsID.IsPrimaryKey = true;
				colvarMonitoringStationsID.IsForeignKey = false;
				colvarMonitoringStationsID.IsReadOnly = false;
				colvarMonitoringStationsID.DefaultSetting = @"";
				colvarMonitoringStationsID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationsID);

				TableSchema.TableColumn colvarMonitoringStationName = new TableSchema.TableColumn(schema);
				colvarMonitoringStationName.ColumnName = "MonitoringStationName";
				colvarMonitoringStationName.DataType = DbType.String;
				colvarMonitoringStationName.MaxLength = 150;
				colvarMonitoringStationName.AutoIncrement = false;
				colvarMonitoringStationName.IsNullable = false;
				colvarMonitoringStationName.IsPrimaryKey = false;
				colvarMonitoringStationName.IsForeignKey = false;
				colvarMonitoringStationName.IsReadOnly = false;
				colvarMonitoringStationName.DefaultSetting = @"";
				colvarMonitoringStationName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationName);

				TableSchema.TableColumn colvarContactPhoneNumber = new TableSchema.TableColumn(schema);
				colvarContactPhoneNumber.ColumnName = "ContactPhoneNumber";
				colvarContactPhoneNumber.DataType = DbType.AnsiString;
				colvarContactPhoneNumber.MaxLength = 50;
				colvarContactPhoneNumber.AutoIncrement = false;
				colvarContactPhoneNumber.IsNullable = false;
				colvarContactPhoneNumber.IsPrimaryKey = false;
				colvarContactPhoneNumber.IsForeignKey = false;
				colvarContactPhoneNumber.IsReadOnly = false;
				colvarContactPhoneNumber.DefaultSetting = @"('NOT SET YET')";
				colvarContactPhoneNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactPhoneNumber);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitoringStations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitoringStation LoadFrom(MS_MonitoringStation item)
		{
			MS_MonitoringStation result = new MS_MonitoringStation();
			if (item.MonitoringStationsID != default(string)) {
				result.LoadByKey(item.MonitoringStationsID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string MonitoringStationsID {
			get { return GetColumnValue<string>(Columns.MonitoringStationsID); }
			set {
				SetColumnValue(Columns.MonitoringStationsID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationsID));
			}
		}
		[DataMember]
		public string MonitoringStationName {
			get { return GetColumnValue<string>(Columns.MonitoringStationName); }
			set {
				SetColumnValue(Columns.MonitoringStationName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationName));
			}
		}
		[DataMember]
		public string ContactPhoneNumber {
			get { return GetColumnValue<string>(Columns.ContactPhoneNumber); }
			set {
				SetColumnValue(Columns.ContactPhoneNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactPhoneNumber));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return MonitoringStationName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MonitoringStationsIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MonitoringStationNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ContactPhoneNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MonitoringStationsID = @"MonitoringStationsID";
			public static readonly string MonitoringStationName = @"MonitoringStationName";
			public static readonly string ContactPhoneNumber = @"ContactPhoneNumber";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MonitoringStationsID; }
		}
		*/

		#region Foreign Collections

		private MS_MonitoringStationOssCollection _MS_MonitoringStationOssesCol;
		//Relationship: FK_MS_MonitoringStationOSs_MS_MonitoringStations
		public MS_MonitoringStationOssCollection MS_MonitoringStationOssesCol
		{
			get
			{
				if(_MS_MonitoringStationOssesCol == null) {
					_MS_MonitoringStationOssesCol = new MS_MonitoringStationOssCollection();
					_MS_MonitoringStationOssesCol.LoadAndCloseReader(MS_MonitoringStationOss.Query()
						.WHERE(MS_MonitoringStationOss.Columns.MonitoringStationId, MonitoringStationsID).ExecuteReader());
				}
				return _MS_MonitoringStationOssesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsDispatchAgency class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsDispatchAgencyCollection : ActiveList<MS_MonitronicsDispatchAgency, MS_MonitronicsDispatchAgencyCollection>
	{
		public static MS_MonitronicsDispatchAgencyCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsDispatchAgencyCollection result = new MS_MonitronicsDispatchAgencyCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsDispatchAgency item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsDispatchAgencies table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsDispatchAgency : ActiveRecord<MS_MonitronicsDispatchAgency>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsDispatchAgency()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsDispatchAgencies", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMoniDispatchAgencyID = new TableSchema.TableColumn(schema);
				colvarMoniDispatchAgencyID.ColumnName = "MoniDispatchAgencyID";
				colvarMoniDispatchAgencyID.DataType = DbType.Int32;
				colvarMoniDispatchAgencyID.MaxLength = 0;
				colvarMoniDispatchAgencyID.AutoIncrement = true;
				colvarMoniDispatchAgencyID.IsNullable = false;
				colvarMoniDispatchAgencyID.IsPrimaryKey = true;
				colvarMoniDispatchAgencyID.IsForeignKey = false;
				colvarMoniDispatchAgencyID.IsReadOnly = false;
				colvarMoniDispatchAgencyID.DefaultSetting = @"";
				colvarMoniDispatchAgencyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoniDispatchAgencyID);

				TableSchema.TableColumn colvarDispatchAgencyTypeId = new TableSchema.TableColumn(schema);
				colvarDispatchAgencyTypeId.ColumnName = "DispatchAgencyTypeId";
				colvarDispatchAgencyTypeId.DataType = DbType.Byte;
				colvarDispatchAgencyTypeId.MaxLength = 0;
				colvarDispatchAgencyTypeId.AutoIncrement = false;
				colvarDispatchAgencyTypeId.IsNullable = false;
				colvarDispatchAgencyTypeId.IsPrimaryKey = false;
				colvarDispatchAgencyTypeId.IsForeignKey = true;
				colvarDispatchAgencyTypeId.IsReadOnly = false;
				colvarDispatchAgencyTypeId.DefaultSetting = @"";
				colvarDispatchAgencyTypeId.ForeignKeyTableName = "MS_DispatchAgencyTypes";
				schema.Columns.Add(colvarDispatchAgencyTypeId);

				TableSchema.TableColumn colvarAgency_no = new TableSchema.TableColumn(schema);
				colvarAgency_no.ColumnName = "Agency_no";
				colvarAgency_no.DataType = DbType.String;
				colvarAgency_no.MaxLength = 15;
				colvarAgency_no.AutoIncrement = false;
				colvarAgency_no.IsNullable = true;
				colvarAgency_no.IsPrimaryKey = false;
				colvarAgency_no.IsForeignKey = false;
				colvarAgency_no.IsReadOnly = false;
				colvarAgency_no.DefaultSetting = @"";
				colvarAgency_no.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgency_no);

				TableSchema.TableColumn colvarAgencyName = new TableSchema.TableColumn(schema);
				colvarAgencyName.ColumnName = "AgencyName";
				colvarAgencyName.DataType = DbType.String;
				colvarAgencyName.MaxLength = 50;
				colvarAgencyName.AutoIncrement = false;
				colvarAgencyName.IsNullable = false;
				colvarAgencyName.IsPrimaryKey = false;
				colvarAgencyName.IsForeignKey = false;
				colvarAgencyName.IsReadOnly = false;
				colvarAgencyName.DefaultSetting = @"";
				colvarAgencyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgencyName);

				TableSchema.TableColumn colvarPhone1 = new TableSchema.TableColumn(schema);
				colvarPhone1.ColumnName = "Phone1";
				colvarPhone1.DataType = DbType.String;
				colvarPhone1.MaxLength = 20;
				colvarPhone1.AutoIncrement = false;
				colvarPhone1.IsNullable = false;
				colvarPhone1.IsPrimaryKey = false;
				colvarPhone1.IsForeignKey = false;
				colvarPhone1.IsReadOnly = false;
				colvarPhone1.DefaultSetting = @"";
				colvarPhone1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone1);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.String;
				colvarZipCode.MaxLength = 50;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = false;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsDispatchAgencies",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsDispatchAgency LoadFrom(MS_MonitronicsDispatchAgency item)
		{
			MS_MonitronicsDispatchAgency result = new MS_MonitronicsDispatchAgency();
			if (item.MoniDispatchAgencyID != default(int)) {
				result.LoadByKey(item.MoniDispatchAgencyID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MoniDispatchAgencyID {
			get { return GetColumnValue<int>(Columns.MoniDispatchAgencyID); }
			set {
				SetColumnValue(Columns.MoniDispatchAgencyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MoniDispatchAgencyID));
			}
		}
		[DataMember]
		public byte DispatchAgencyTypeId {
			get { return GetColumnValue<byte>(Columns.DispatchAgencyTypeId); }
			set {
				SetColumnValue(Columns.DispatchAgencyTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DispatchAgencyTypeId));
			}
		}
		[DataMember]
		public string Agency_no {
			get { return GetColumnValue<string>(Columns.Agency_no); }
			set {
				SetColumnValue(Columns.Agency_no, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Agency_no));
			}
		}
		[DataMember]
		public string AgencyName {
			get { return GetColumnValue<string>(Columns.AgencyName); }
			set {
				SetColumnValue(Columns.AgencyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgencyName));
			}
		}
		[DataMember]
		public string Phone1 {
			get { return GetColumnValue<string>(Columns.Phone1); }
			set {
				SetColumnValue(Columns.Phone1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone1));
			}
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set {
				SetColumnValue(Columns.ZipCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZipCode));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_DispatchAgencyType _DispatchAgencyType;
		//Relationship: FK_MS_MonitronicsDispatchAgencies_MS_DispatchAgencyTypes
		public MS_DispatchAgencyType DispatchAgencyType
		{
			get
			{
				if(_DispatchAgencyType == null) {
					_DispatchAgencyType = MS_DispatchAgencyType.FetchByID(this.DispatchAgencyTypeId);
				}
				return _DispatchAgencyType;
			}
			set
			{
				SetColumnValue("DispatchAgencyTypeId", value.DispatchAgencyTypeID);
				_DispatchAgencyType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MoniDispatchAgencyID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MoniDispatchAgencyIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DispatchAgencyTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn Agency_noColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AgencyNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn Phone1Column
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MoniDispatchAgencyID = @"MoniDispatchAgencyID";
			public static readonly string DispatchAgencyTypeId = @"DispatchAgencyTypeId";
			public static readonly string Agency_no = @"Agency_no";
			public static readonly string AgencyName = @"AgencyName";
			public static readonly string Phone1 = @"Phone1";
			public static readonly string ZipCode = @"ZipCode";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MoniDispatchAgencyID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntity class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityCollection : ActiveList<MS_MonitronicsEntity, MS_MonitronicsEntityCollection>
	{
		public static MS_MonitronicsEntityCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityCollection result = new MS_MonitronicsEntityCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntity item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntities table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntity : ActiveRecord<MS_MonitronicsEntity>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string AgenciesID = "agencies";
			[EnumMember()] public const string AgencyTypesID = "agencytypes";
			[EnumMember()] public const string AuthoritiesID = "authorities";
			[EnumMember()] public const string Bus_RulesID = "BusRules";
			[EnumMember()] public const string Cell_ProvidersID = "cellproviders";
			[EnumMember()] public const string Cell_ServicesID = "cellsvcs";
			[EnumMember()] public const string ContactsID = "Contacts";
			[EnumMember()] public const string Contact_TypesID = "Contypes";
			[EnumMember()] public const string Zone_Equipment_EventsID = "equip_event_xref";
			[EnumMember()] public const string Equipment_LocationsID = "EquipLocs";
			[EnumMember()] public const string Equipment_TypesID = "EquipTypes";
			[EnumMember()] public const string Event_HistoriesID = "EventHistories";
			[EnumMember()] public const string EventsID = "events";
			[EnumMember()] public const string LanguagesID = "languages";
			[EnumMember()] public const string Name_PrefixesID = "nameprefixes";
			[EnumMember()] public const string Name_SuffixesID = "namesuffixes";
			[EnumMember()] public const string OosCatsID = "ooscats";
			[EnumMember()] public const string OptionsID = "options";
			[EnumMember()] public const string Partial_BatchesID = "PartialBatches";
			[EnumMember()] public const string Permit_TypesID = "permtypes";
			[EnumMember()] public const string Phone_TypesID = "Phonetypes";
			[EnumMember()] public const string PrefixesID = "prefixes";
			[EnumMember()] public const string RelationsID = "Relations";
			[EnumMember()] public const string SecGroupsID = "secgroups";
			[EnumMember()] public const string ServiceCompanyID = "servicecompany";
			[EnumMember()] public const string Site_Agency_PermitsID = "SiteAgencyPermits";
			[EnumMember()] public const string Site_DispatchesID = "SiteDispatches";
			[EnumMember()] public const string Site_ErrorsID = "SiteErrors";
			[EnumMember()] public const string Site_General_DispatchesID = "SiteGeneralDispatches";
			[EnumMember()] public const string Site_NotesID = "SiteNotes";
			[EnumMember()] public const string Site_OptionsID = "SiteOptions";
			[EnumMember()] public const string Site_System_OptionsID = "SiteSystemOptions";
			[EnumMember()] public const string Site_SystemsID = "SiteSystems";
			[EnumMember()] public const string Site_TypesID = "SiteTypes";
			[EnumMember()] public const string StatesID = "states";
			[EnumMember()] public const string System_Type_XrefID = "Systype_xref";
			[EnumMember()] public const string System_TypesID = "Systypes";
			[EnumMember()] public const string Test_CategoriesID = "testcats";
			[EnumMember()] public const string Two_WaysID = "twoways";
			[EnumMember()] public const string ZipsID = "zips";
			[EnumMember()] public const string ZonesID = "Zones";
			[EnumMember()] public const string Zone_StatesID = "Zonestates";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntity()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntities", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEntityID = new TableSchema.TableColumn(schema);
				colvarEntityID.ColumnName = "EntityID";
				colvarEntityID.DataType = DbType.AnsiString;
				colvarEntityID.MaxLength = 22;
				colvarEntityID.AutoIncrement = false;
				colvarEntityID.IsNullable = false;
				colvarEntityID.IsPrimaryKey = true;
				colvarEntityID.IsForeignKey = false;
				colvarEntityID.IsReadOnly = false;
				colvarEntityID.DefaultSetting = @"";
				colvarEntityID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntityID);

				TableSchema.TableColumn colvarEntityName = new TableSchema.TableColumn(schema);
				colvarEntityName.ColumnName = "EntityName";
				colvarEntityName.DataType = DbType.AnsiString;
				colvarEntityName.MaxLength = 50;
				colvarEntityName.AutoIncrement = false;
				colvarEntityName.IsNullable = false;
				colvarEntityName.IsPrimaryKey = false;
				colvarEntityName.IsForeignKey = false;
				colvarEntityName.IsReadOnly = false;
				colvarEntityName.DefaultSetting = @"";
				colvarEntityName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntityName);

				TableSchema.TableColumn colvarHasDependency = new TableSchema.TableColumn(schema);
				colvarHasDependency.ColumnName = "HasDependency";
				colvarHasDependency.DataType = DbType.Boolean;
				colvarHasDependency.MaxLength = 0;
				colvarHasDependency.AutoIncrement = false;
				colvarHasDependency.IsNullable = false;
				colvarHasDependency.IsPrimaryKey = false;
				colvarHasDependency.IsForeignKey = false;
				colvarHasDependency.IsReadOnly = false;
				colvarHasDependency.DefaultSetting = @"((0))";
				colvarHasDependency.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasDependency);

				TableSchema.TableColumn colvarEntityDescription = new TableSchema.TableColumn(schema);
				colvarEntityDescription.ColumnName = "EntityDescription";
				colvarEntityDescription.DataType = DbType.AnsiString;
				colvarEntityDescription.MaxLength = -1;
				colvarEntityDescription.AutoIncrement = false;
				colvarEntityDescription.IsNullable = true;
				colvarEntityDescription.IsPrimaryKey = false;
				colvarEntityDescription.IsForeignKey = false;
				colvarEntityDescription.IsReadOnly = false;
				colvarEntityDescription.DefaultSetting = @"";
				colvarEntityDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntityDescription);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntities",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntity LoadFrom(MS_MonitronicsEntity item)
		{
			MS_MonitronicsEntity result = new MS_MonitronicsEntity();
			if (item.EntityID != default(string)) {
				result.LoadByKey(item.EntityID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string EntityID {
			get { return GetColumnValue<string>(Columns.EntityID); }
			set {
				SetColumnValue(Columns.EntityID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EntityID));
			}
		}
		[DataMember]
		public string EntityName {
			get { return GetColumnValue<string>(Columns.EntityName); }
			set {
				SetColumnValue(Columns.EntityName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EntityName));
			}
		}
		[DataMember]
		public bool HasDependency {
			get { return GetColumnValue<bool>(Columns.HasDependency); }
			set {
				SetColumnValue(Columns.HasDependency, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasDependency));
			}
		}
		[DataMember]
		public string EntityDescription {
			get { return GetColumnValue<string>(Columns.EntityDescription); }
			set {
				SetColumnValue(Columns.EntityDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EntityDescription));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return EntityName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EntityIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EntityNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn HasDependencyColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn EntityDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EntityID = @"EntityID";
			public static readonly string EntityName = @"EntityName";
			public static readonly string HasDependency = @"HasDependency";
			public static readonly string EntityDescription = @"EntityDescription";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EntityID; }
		}
		*/

		#region Foreign Collections

		private MS_MonitronicsSubmitsGetDataCollection _MS_MonitronicsSubmitsGetDatasCol;
		//Relationship: FK_MS_MonitronicsSubmitsGetDatas_MS_MonitronicsEntities
		public MS_MonitronicsSubmitsGetDataCollection MS_MonitronicsSubmitsGetDatasCol
		{
			get
			{
				if(_MS_MonitronicsSubmitsGetDatasCol == null) {
					_MS_MonitronicsSubmitsGetDatasCol = new MS_MonitronicsSubmitsGetDataCollection();
					_MS_MonitronicsSubmitsGetDatasCol.LoadAndCloseReader(MS_MonitronicsSubmitsGetData.Query()
						.WHERE(MS_MonitronicsSubmitsGetData.Columns.EntityId, EntityID).ExecuteReader());
				}
				return _MS_MonitronicsSubmitsGetDatasCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityAgency class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityAgencyCollection : ActiveList<MS_MonitronicsEntityAgency, MS_MonitronicsEntityAgencyCollection>
	{
		public static MS_MonitronicsEntityAgencyCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityAgencyCollection result = new MS_MonitronicsEntityAgencyCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityAgency item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityAgencies table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityAgency : ActiveRecord<MS_MonitronicsEntityAgency>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityAgency()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityAgencies", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEntityAgenciesID = new TableSchema.TableColumn(schema);
				colvarEntityAgenciesID.ColumnName = "EntityAgenciesID";
				colvarEntityAgenciesID.DataType = DbType.Int32;
				colvarEntityAgenciesID.MaxLength = 0;
				colvarEntityAgenciesID.AutoIncrement = true;
				colvarEntityAgenciesID.IsNullable = false;
				colvarEntityAgenciesID.IsPrimaryKey = true;
				colvarEntityAgenciesID.IsForeignKey = false;
				colvarEntityAgenciesID.IsReadOnly = false;
				colvarEntityAgenciesID.DefaultSetting = @"";
				colvarEntityAgenciesID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntityAgenciesID);

				TableSchema.TableColumn colvarAgencyNumberID = new TableSchema.TableColumn(schema);
				colvarAgencyNumberID.ColumnName = "AgencyNumberID";
				colvarAgencyNumberID.DataType = DbType.AnsiString;
				colvarAgencyNumberID.MaxLength = 50;
				colvarAgencyNumberID.AutoIncrement = false;
				colvarAgencyNumberID.IsNullable = false;
				colvarAgencyNumberID.IsPrimaryKey = false;
				colvarAgencyNumberID.IsForeignKey = false;
				colvarAgencyNumberID.IsReadOnly = false;
				colvarAgencyNumberID.DefaultSetting = @"";
				colvarAgencyNumberID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgencyNumberID);

				TableSchema.TableColumn colvarAgencyTypeId = new TableSchema.TableColumn(schema);
				colvarAgencyTypeId.ColumnName = "AgencyTypeId";
				colvarAgencyTypeId.DataType = DbType.AnsiString;
				colvarAgencyTypeId.MaxLength = 50;
				colvarAgencyTypeId.AutoIncrement = false;
				colvarAgencyTypeId.IsNullable = false;
				colvarAgencyTypeId.IsPrimaryKey = false;
				colvarAgencyTypeId.IsForeignKey = false;
				colvarAgencyTypeId.IsReadOnly = false;
				colvarAgencyTypeId.DefaultSetting = @"";
				colvarAgencyTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgencyTypeId);

				TableSchema.TableColumn colvarAgencyName = new TableSchema.TableColumn(schema);
				colvarAgencyName.ColumnName = "AgencyName";
				colvarAgencyName.DataType = DbType.AnsiString;
				colvarAgencyName.MaxLength = 50;
				colvarAgencyName.AutoIncrement = false;
				colvarAgencyName.IsNullable = false;
				colvarAgencyName.IsPrimaryKey = false;
				colvarAgencyName.IsForeignKey = false;
				colvarAgencyName.IsReadOnly = false;
				colvarAgencyName.DefaultSetting = @"";
				colvarAgencyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgencyName);

				TableSchema.TableColumn colvarCityName = new TableSchema.TableColumn(schema);
				colvarCityName.ColumnName = "CityName";
				colvarCityName.DataType = DbType.AnsiString;
				colvarCityName.MaxLength = 50;
				colvarCityName.AutoIncrement = false;
				colvarCityName.IsNullable = true;
				colvarCityName.IsPrimaryKey = false;
				colvarCityName.IsForeignKey = false;
				colvarCityName.IsReadOnly = false;
				colvarCityName.DefaultSetting = @"";
				colvarCityName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCityName);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 50;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = false;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.AnsiString;
				colvarZipCode.MaxLength = 50;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = true;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarPhone1 = new TableSchema.TableColumn(schema);
				colvarPhone1.ColumnName = "Phone1";
				colvarPhone1.DataType = DbType.AnsiString;
				colvarPhone1.MaxLength = 50;
				colvarPhone1.AutoIncrement = false;
				colvarPhone1.IsNullable = false;
				colvarPhone1.IsPrimaryKey = false;
				colvarPhone1.IsForeignKey = false;
				colvarPhone1.IsReadOnly = false;
				colvarPhone1.DefaultSetting = @"";
				colvarPhone1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone1);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityAgencies",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityAgency LoadFrom(MS_MonitronicsEntityAgency item)
		{
			MS_MonitronicsEntityAgency result = new MS_MonitronicsEntityAgency();
			if (item.EntityAgenciesID != default(int)) {
				result.LoadByKey(item.EntityAgenciesID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EntityAgenciesID {
			get { return GetColumnValue<int>(Columns.EntityAgenciesID); }
			set {
				SetColumnValue(Columns.EntityAgenciesID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EntityAgenciesID));
			}
		}
		[DataMember]
		public string AgencyNumberID {
			get { return GetColumnValue<string>(Columns.AgencyNumberID); }
			set {
				SetColumnValue(Columns.AgencyNumberID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgencyNumberID));
			}
		}
		[DataMember]
		public string AgencyTypeId {
			get { return GetColumnValue<string>(Columns.AgencyTypeId); }
			set {
				SetColumnValue(Columns.AgencyTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgencyTypeId));
			}
		}
		[DataMember]
		public string AgencyName {
			get { return GetColumnValue<string>(Columns.AgencyName); }
			set {
				SetColumnValue(Columns.AgencyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgencyName));
			}
		}
		[DataMember]
		public string CityName {
			get { return GetColumnValue<string>(Columns.CityName); }
			set {
				SetColumnValue(Columns.CityName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CityName));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set {
				SetColumnValue(Columns.ZipCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZipCode));
			}
		}
		[DataMember]
		public string Phone1 {
			get { return GetColumnValue<string>(Columns.Phone1); }
			set {
				SetColumnValue(Columns.Phone1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone1));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AgencyNumberID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EntityAgenciesIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AgencyNumberIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AgencyTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AgencyNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CityNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn Phone1Column
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EntityAgenciesID = @"EntityAgenciesID";
			public static readonly string AgencyNumberID = @"AgencyNumberID";
			public static readonly string AgencyTypeId = @"AgencyTypeId";
			public static readonly string AgencyName = @"AgencyName";
			public static readonly string CityName = @"CityName";
			public static readonly string StateId = @"StateId";
			public static readonly string ZipCode = @"ZipCode";
			public static readonly string Phone1 = @"Phone1";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EntityAgenciesID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityAgencyType class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityAgencyTypeCollection : ActiveList<MS_MonitronicsEntityAgencyType, MS_MonitronicsEntityAgencyTypeCollection>
	{
		public static MS_MonitronicsEntityAgencyTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityAgencyTypeCollection result = new MS_MonitronicsEntityAgencyTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityAgencyType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityAgencyTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityAgencyType : ActiveRecord<MS_MonitronicsEntityAgencyType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityAgencyType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityAgencyTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAgencyTypeID = new TableSchema.TableColumn(schema);
				colvarAgencyTypeID.ColumnName = "AgencyTypeID";
				colvarAgencyTypeID.DataType = DbType.AnsiString;
				colvarAgencyTypeID.MaxLength = 10;
				colvarAgencyTypeID.AutoIncrement = false;
				colvarAgencyTypeID.IsNullable = false;
				colvarAgencyTypeID.IsPrimaryKey = true;
				colvarAgencyTypeID.IsForeignKey = false;
				colvarAgencyTypeID.IsReadOnly = false;
				colvarAgencyTypeID.DefaultSetting = @"";
				colvarAgencyTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgencyTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityAgencyTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityAgencyType LoadFrom(MS_MonitronicsEntityAgencyType item)
		{
			MS_MonitronicsEntityAgencyType result = new MS_MonitronicsEntityAgencyType();
			if (item.AgencyTypeID != default(string)) {
				result.LoadByKey(item.AgencyTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AgencyTypeID {
			get { return GetColumnValue<string>(Columns.AgencyTypeID); }
			set {
				SetColumnValue(Columns.AgencyTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgencyTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AgencyTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AgencyTypeID = @"AgencyTypeID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AgencyTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityAuthority class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityAuthorityCollection : ActiveList<MS_MonitronicsEntityAuthority, MS_MonitronicsEntityAuthorityCollection>
	{
		public static MS_MonitronicsEntityAuthorityCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityAuthorityCollection result = new MS_MonitronicsEntityAuthorityCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityAuthority item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityAuthorities table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityAuthority : ActiveRecord<MS_MonitronicsEntityAuthority>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Commercial_No_Data_ChangeID = "CPAR";
			[EnumMember()] public const string Commercial_RestrictedID = "CRST";
			[EnumMember()] public const string DuressID = "DURS";
			[EnumMember()] public const string Full_Authority_Open_AnytimeID = "FOA ";
			[EnumMember()] public const string Full_AuthorityID = "FULL";
			[EnumMember()] public const string No_Data_Change_Open_AnytimeID = "NCOA";
			[EnumMember()] public const string Residential_ContactID = "RCON";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityAuthority()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityAuthorities", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAuthID = new TableSchema.TableColumn(schema);
				colvarAuthID.ColumnName = "AuthID";
				colvarAuthID.DataType = DbType.AnsiString;
				colvarAuthID.MaxLength = 30;
				colvarAuthID.AutoIncrement = false;
				colvarAuthID.IsNullable = false;
				colvarAuthID.IsPrimaryKey = true;
				colvarAuthID.IsForeignKey = false;
				colvarAuthID.IsReadOnly = false;
				colvarAuthID.DefaultSetting = @"";
				colvarAuthID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityAuthorities",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityAuthority LoadFrom(MS_MonitronicsEntityAuthority item)
		{
			MS_MonitronicsEntityAuthority result = new MS_MonitronicsEntityAuthority();
			if (item.AuthID != default(string)) {
				result.LoadByKey(item.AuthID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AuthID {
			get { return GetColumnValue<string>(Columns.AuthID); }
			set {
				SetColumnValue(Columns.AuthID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AuthIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AuthID = @"AuthID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AuthID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityBusRule class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityBusRuleCollection : ActiveList<MS_MonitronicsEntityBusRule, MS_MonitronicsEntityBusRuleCollection>
	{
		public static MS_MonitronicsEntityBusRuleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityBusRuleCollection result = new MS_MonitronicsEntityBusRuleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityBusRule item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityBusRules table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityBusRule : ActiveRecord<MS_MonitronicsEntityBusRule>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityBusRule()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityBusRules", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarErrorNoID = new TableSchema.TableColumn(schema);
				colvarErrorNoID.ColumnName = "ErrorNoID";
				colvarErrorNoID.DataType = DbType.AnsiString;
				colvarErrorNoID.MaxLength = 50;
				colvarErrorNoID.AutoIncrement = false;
				colvarErrorNoID.IsNullable = false;
				colvarErrorNoID.IsPrimaryKey = true;
				colvarErrorNoID.IsForeignKey = false;
				colvarErrorNoID.IsReadOnly = false;
				colvarErrorNoID.DefaultSetting = @"";
				colvarErrorNoID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrorNoID);

				TableSchema.TableColumn colvarTableName = new TableSchema.TableColumn(schema);
				colvarTableName.ColumnName = "TableName";
				colvarTableName.DataType = DbType.AnsiString;
				colvarTableName.MaxLength = 50;
				colvarTableName.AutoIncrement = false;
				colvarTableName.IsNullable = false;
				colvarTableName.IsPrimaryKey = false;
				colvarTableName.IsForeignKey = false;
				colvarTableName.IsReadOnly = false;
				colvarTableName.DefaultSetting = @"";
				colvarTableName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTableName);

				TableSchema.TableColumn colvarBusRule = new TableSchema.TableColumn(schema);
				colvarBusRule.ColumnName = "BusRule";
				colvarBusRule.DataType = DbType.AnsiString;
				colvarBusRule.MaxLength = 50;
				colvarBusRule.AutoIncrement = false;
				colvarBusRule.IsNullable = false;
				colvarBusRule.IsPrimaryKey = false;
				colvarBusRule.IsForeignKey = false;
				colvarBusRule.IsReadOnly = false;
				colvarBusRule.DefaultSetting = @"";
				colvarBusRule.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBusRule);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityBusRules",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityBusRule LoadFrom(MS_MonitronicsEntityBusRule item)
		{
			MS_MonitronicsEntityBusRule result = new MS_MonitronicsEntityBusRule();
			if (item.ErrorNoID != default(string)) {
				result.LoadByKey(item.ErrorNoID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ErrorNoID {
			get { return GetColumnValue<string>(Columns.ErrorNoID); }
			set {
				SetColumnValue(Columns.ErrorNoID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ErrorNoID));
			}
		}
		[DataMember]
		public string TableName {
			get { return GetColumnValue<string>(Columns.TableName); }
			set {
				SetColumnValue(Columns.TableName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TableName));
			}
		}
		[DataMember]
		public string BusRule {
			get { return GetColumnValue<string>(Columns.BusRule); }
			set {
				SetColumnValue(Columns.BusRule, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BusRule));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return TableName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ErrorNoIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TableNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BusRuleColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ErrorNoID = @"ErrorNoID";
			public static readonly string TableName = @"TableName";
			public static readonly string BusRule = @"BusRule";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ErrorNoID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityCellProvider class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityCellProviderCollection : ActiveList<MS_MonitronicsEntityCellProvider, MS_MonitronicsEntityCellProviderCollection>
	{
		public static MS_MonitronicsEntityCellProviderCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityCellProviderCollection result = new MS_MonitronicsEntityCellProviderCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityCellProvider item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityCellProviders table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityCellProvider : ActiveRecord<MS_MonitronicsEntityCellProvider>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityCellProvider()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityCellProviders", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCellProviderID = new TableSchema.TableColumn(schema);
				colvarCellProviderID.ColumnName = "CellProviderID";
				colvarCellProviderID.DataType = DbType.AnsiString;
				colvarCellProviderID.MaxLength = 50;
				colvarCellProviderID.AutoIncrement = false;
				colvarCellProviderID.IsNullable = false;
				colvarCellProviderID.IsPrimaryKey = true;
				colvarCellProviderID.IsForeignKey = false;
				colvarCellProviderID.IsReadOnly = false;
				colvarCellProviderID.DefaultSetting = @"";
				colvarCellProviderID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellProviderID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityCellProviders",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityCellProvider LoadFrom(MS_MonitronicsEntityCellProvider item)
		{
			MS_MonitronicsEntityCellProvider result = new MS_MonitronicsEntityCellProvider();
			if (item.CellProviderID != default(string)) {
				result.LoadByKey(item.CellProviderID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CellProviderID {
			get { return GetColumnValue<string>(Columns.CellProviderID); }
			set {
				SetColumnValue(Columns.CellProviderID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellProviderID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CellProviderIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CellProviderID = @"CellProviderID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CellProviderID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityCellService class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityCellServiceCollection : ActiveList<MS_MonitronicsEntityCellService, MS_MonitronicsEntityCellServiceCollection>
	{
		public static MS_MonitronicsEntityCellServiceCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityCellServiceCollection result = new MS_MonitronicsEntityCellServiceCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityCellService item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityCellServices table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityCellService : ActiveRecord<MS_MonitronicsEntityCellService>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityCellService()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityCellServices", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarOptionID = new TableSchema.TableColumn(schema);
				colvarOptionID.ColumnName = "OptionID";
				colvarOptionID.DataType = DbType.AnsiString;
				colvarOptionID.MaxLength = 50;
				colvarOptionID.AutoIncrement = false;
				colvarOptionID.IsNullable = false;
				colvarOptionID.IsPrimaryKey = true;
				colvarOptionID.IsForeignKey = false;
				colvarOptionID.IsReadOnly = false;
				colvarOptionID.DefaultSetting = @"";
				colvarOptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOptionID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityCellServices",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityCellService LoadFrom(MS_MonitronicsEntityCellService item)
		{
			MS_MonitronicsEntityCellService result = new MS_MonitronicsEntityCellService();
			if (item.OptionID != default(string)) {
				result.LoadByKey(item.OptionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string OptionID {
			get { return GetColumnValue<string>(Columns.OptionID); }
			set {
				SetColumnValue(Columns.OptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OptionID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn OptionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string OptionID = @"OptionID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return OptionID; }
		}
		*/

		#region Foreign Collections

		private MS_EquipmentMonitronicsCellServiceCollection _MS_EquipmentMonitronicsCellServicesCol;
		//Relationship: FK_MS_EquipmentMonitronicsCellServices_MS_MonitronicsEntityCellServices
		public MS_EquipmentMonitronicsCellServiceCollection MS_EquipmentMonitronicsCellServicesCol
		{
			get
			{
				if(_MS_EquipmentMonitronicsCellServicesCol == null) {
					_MS_EquipmentMonitronicsCellServicesCol = new MS_EquipmentMonitronicsCellServiceCollection();
					_MS_EquipmentMonitronicsCellServicesCol.LoadAndCloseReader(MS_EquipmentMonitronicsCellService.Query()
						.WHERE(MS_EquipmentMonitronicsCellService.Columns.OptionId, OptionID).ExecuteReader());
				}
				return _MS_EquipmentMonitronicsCellServicesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityContactType class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityContactTypeCollection : ActiveList<MS_MonitronicsEntityContactType, MS_MonitronicsEntityContactTypeCollection>
	{
		public static MS_MonitronicsEntityContactTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityContactTypeCollection result = new MS_MonitronicsEntityContactTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityContactType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityContactTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityContactType : ActiveRecord<MS_MonitronicsEntityContactType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Business_ContactID = "BUS   ";
			[EnumMember()] public const string Duress_ContactID = "DURS  ";
			[EnumMember()] public const string Monitoring_ContactID = "MON   ";
			[EnumMember()] public const string PatientID = "PA    ";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityContactType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityContactTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContactTypeID = new TableSchema.TableColumn(schema);
				colvarContactTypeID.ColumnName = "ContactTypeID";
				colvarContactTypeID.DataType = DbType.AnsiString;
				colvarContactTypeID.MaxLength = 20;
				colvarContactTypeID.AutoIncrement = false;
				colvarContactTypeID.IsNullable = false;
				colvarContactTypeID.IsPrimaryKey = true;
				colvarContactTypeID.IsForeignKey = false;
				colvarContactTypeID.IsReadOnly = false;
				colvarContactTypeID.DefaultSetting = @"";
				colvarContactTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityContactTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityContactType LoadFrom(MS_MonitronicsEntityContactType item)
		{
			MS_MonitronicsEntityContactType result = new MS_MonitronicsEntityContactType();
			if (item.ContactTypeID != default(string)) {
				result.LoadByKey(item.ContactTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ContactTypeID {
			get { return GetColumnValue<string>(Columns.ContactTypeID); }
			set {
				SetColumnValue(Columns.ContactTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContactTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContactTypeID = @"ContactTypeID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContactTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityContractType class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityContractTypeCollection : ActiveList<MS_MonitronicsEntityContractType, MS_MonitronicsEntityContractTypeCollection>
	{
		public static MS_MonitronicsEntityContractTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityContractTypeCollection result = new MS_MonitronicsEntityContractTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityContractType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityContractTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityContractType : ActiveRecord<MS_MonitronicsEntityContractType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityContractType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityContractTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContractTypeID = new TableSchema.TableColumn(schema);
				colvarContractTypeID.ColumnName = "ContractTypeID";
				colvarContractTypeID.DataType = DbType.AnsiString;
				colvarContractTypeID.MaxLength = 50;
				colvarContractTypeID.AutoIncrement = false;
				colvarContractTypeID.IsNullable = false;
				colvarContractTypeID.IsPrimaryKey = true;
				colvarContractTypeID.IsForeignKey = false;
				colvarContractTypeID.IsReadOnly = false;
				colvarContractTypeID.DefaultSetting = @"";
				colvarContractTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityContractTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityContractType LoadFrom(MS_MonitronicsEntityContractType item)
		{
			MS_MonitronicsEntityContractType result = new MS_MonitronicsEntityContractType();
			if (item.ContractTypeID != default(string)) {
				result.LoadByKey(item.ContractTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ContractTypeID {
			get { return GetColumnValue<string>(Columns.ContractTypeID); }
			set {
				SetColumnValue(Columns.ContractTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContractTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContractTypeID = @"ContractTypeID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContractTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityEquipEventXRef class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEquipEventXRefCollection : ActiveList<MS_MonitronicsEntityEquipEventXRef, MS_MonitronicsEntityEquipEventXRefCollection>
	{
		public static MS_MonitronicsEntityEquipEventXRefCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityEquipEventXRefCollection result = new MS_MonitronicsEntityEquipEventXRefCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityEquipEventXRef item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityEquipEventXRef table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEquipEventXRef : ActiveRecord<MS_MonitronicsEntityEquipEventXRef>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityEquipEventXRef()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityEquipEventXRef", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEntityEquipEventXRefID = new TableSchema.TableColumn(schema);
				colvarEntityEquipEventXRefID.ColumnName = "EntityEquipEventXRefID";
				colvarEntityEquipEventXRefID.DataType = DbType.Int32;
				colvarEntityEquipEventXRefID.MaxLength = 0;
				colvarEntityEquipEventXRefID.AutoIncrement = true;
				colvarEntityEquipEventXRefID.IsNullable = false;
				colvarEntityEquipEventXRefID.IsPrimaryKey = true;
				colvarEntityEquipEventXRefID.IsForeignKey = false;
				colvarEntityEquipEventXRefID.IsReadOnly = false;
				colvarEntityEquipEventXRefID.DefaultSetting = @"";
				colvarEntityEquipEventXRefID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntityEquipEventXRefID);

				TableSchema.TableColumn colvarEquipTypeID = new TableSchema.TableColumn(schema);
				colvarEquipTypeID.ColumnName = "EquipTypeID";
				colvarEquipTypeID.DataType = DbType.AnsiString;
				colvarEquipTypeID.MaxLength = 50;
				colvarEquipTypeID.AutoIncrement = false;
				colvarEquipTypeID.IsNullable = false;
				colvarEquipTypeID.IsPrimaryKey = false;
				colvarEquipTypeID.IsForeignKey = false;
				colvarEquipTypeID.IsReadOnly = false;
				colvarEquipTypeID.DefaultSetting = @"";
				colvarEquipTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipTypeID);

				TableSchema.TableColumn colvarEventId = new TableSchema.TableColumn(schema);
				colvarEventId.ColumnName = "EventId";
				colvarEventId.DataType = DbType.AnsiString;
				colvarEventId.MaxLength = 50;
				colvarEventId.AutoIncrement = false;
				colvarEventId.IsNullable = true;
				colvarEventId.IsPrimaryKey = false;
				colvarEventId.IsForeignKey = false;
				colvarEventId.IsReadOnly = false;
				colvarEventId.DefaultSetting = @"";
				colvarEventId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventId);

				TableSchema.TableColumn colvarSiteKind = new TableSchema.TableColumn(schema);
				colvarSiteKind.ColumnName = "SiteKind";
				colvarSiteKind.DataType = DbType.AnsiString;
				colvarSiteKind.MaxLength = 50;
				colvarSiteKind.AutoIncrement = false;
				colvarSiteKind.IsNullable = true;
				colvarSiteKind.IsPrimaryKey = false;
				colvarSiteKind.IsForeignKey = false;
				colvarSiteKind.IsReadOnly = false;
				colvarSiteKind.DefaultSetting = @"";
				colvarSiteKind.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteKind);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityEquipEventXRef",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityEquipEventXRef LoadFrom(MS_MonitronicsEntityEquipEventXRef item)
		{
			MS_MonitronicsEntityEquipEventXRef result = new MS_MonitronicsEntityEquipEventXRef();
			if (item.EntityEquipEventXRefID != default(int)) {
				result.LoadByKey(item.EntityEquipEventXRefID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EntityEquipEventXRefID {
			get { return GetColumnValue<int>(Columns.EntityEquipEventXRefID); }
			set {
				SetColumnValue(Columns.EntityEquipEventXRefID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EntityEquipEventXRefID));
			}
		}
		[DataMember]
		public string EquipTypeID {
			get { return GetColumnValue<string>(Columns.EquipTypeID); }
			set {
				SetColumnValue(Columns.EquipTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipTypeID));
			}
		}
		[DataMember]
		public string EventId {
			get { return GetColumnValue<string>(Columns.EventId); }
			set {
				SetColumnValue(Columns.EventId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventId));
			}
		}
		[DataMember]
		public string SiteKind {
			get { return GetColumnValue<string>(Columns.SiteKind); }
			set {
				SetColumnValue(Columns.SiteKind, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteKind));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return EquipTypeID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EntityEquipEventXRefIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EquipTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn EventIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SiteKindColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EntityEquipEventXRefID = @"EntityEquipEventXRefID";
			public static readonly string EquipTypeID = @"EquipTypeID";
			public static readonly string EventId = @"EventId";
			public static readonly string SiteKind = @"SiteKind";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EntityEquipEventXRefID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityEquipmentLocation class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEquipmentLocationCollection : ActiveList<MS_MonitronicsEntityEquipmentLocation, MS_MonitronicsEntityEquipmentLocationCollection>
	{
		public static MS_MonitronicsEntityEquipmentLocationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityEquipmentLocationCollection result = new MS_MonitronicsEntityEquipmentLocationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityEquipmentLocation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityEquipmentLocations table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEquipmentLocation : ActiveRecord<MS_MonitronicsEntityEquipmentLocation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityEquipmentLocation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityEquipmentLocations", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipLocID = new TableSchema.TableColumn(schema);
				colvarEquipLocID.ColumnName = "EquipLocID";
				colvarEquipLocID.DataType = DbType.AnsiString;
				colvarEquipLocID.MaxLength = 50;
				colvarEquipLocID.AutoIncrement = false;
				colvarEquipLocID.IsNullable = false;
				colvarEquipLocID.IsPrimaryKey = true;
				colvarEquipLocID.IsForeignKey = false;
				colvarEquipLocID.IsReadOnly = false;
				colvarEquipLocID.DefaultSetting = @"";
				colvarEquipLocID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipLocID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityEquipmentLocations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityEquipmentLocation LoadFrom(MS_MonitronicsEntityEquipmentLocation item)
		{
			MS_MonitronicsEntityEquipmentLocation result = new MS_MonitronicsEntityEquipmentLocation();
			if (item.EquipLocID != default(string)) {
				result.LoadByKey(item.EquipLocID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string EquipLocID {
			get { return GetColumnValue<string>(Columns.EquipLocID); }
			set {
				SetColumnValue(Columns.EquipLocID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipLocID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipLocIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipLocID = @"EquipLocID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipLocID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityEquipmentType class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEquipmentTypeCollection : ActiveList<MS_MonitronicsEntityEquipmentType, MS_MonitronicsEntityEquipmentTypeCollection>
	{
		public static MS_MonitronicsEntityEquipmentTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityEquipmentTypeCollection result = new MS_MonitronicsEntityEquipmentTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityEquipmentType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityEquipmentTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEquipmentType : ActiveRecord<MS_MonitronicsEntityEquipmentType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityEquipmentType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityEquipmentTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEquipTypeId = new TableSchema.TableColumn(schema);
				colvarEquipTypeId.ColumnName = "EquipTypeId";
				colvarEquipTypeId.DataType = DbType.AnsiString;
				colvarEquipTypeId.MaxLength = 50;
				colvarEquipTypeId.AutoIncrement = false;
				colvarEquipTypeId.IsNullable = false;
				colvarEquipTypeId.IsPrimaryKey = true;
				colvarEquipTypeId.IsForeignKey = false;
				colvarEquipTypeId.IsReadOnly = false;
				colvarEquipTypeId.DefaultSetting = @"";
				colvarEquipTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEquipTypeId);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityEquipmentTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityEquipmentType LoadFrom(MS_MonitronicsEntityEquipmentType item)
		{
			MS_MonitronicsEntityEquipmentType result = new MS_MonitronicsEntityEquipmentType();
			if (item.EquipTypeId != default(string)) {
				result.LoadByKey(item.EquipTypeId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string EquipTypeId {
			get { return GetColumnValue<string>(Columns.EquipTypeId); }
			set {
				SetColumnValue(Columns.EquipTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EquipTypeId));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EquipTypeIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EquipTypeId = @"EquipTypeId";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EquipTypeId; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityEventCode class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEventCodeCollection : ActiveList<MS_MonitronicsEntityEventCode, MS_MonitronicsEntityEventCodeCollection>
	{
		public static MS_MonitronicsEntityEventCodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityEventCodeCollection result = new MS_MonitronicsEntityEventCodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityEventCode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityEventCodes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEventCode : ActiveRecord<MS_MonitronicsEntityEventCode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityEventCode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityEventCodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMoniEventID = new TableSchema.TableColumn(schema);
				colvarMoniEventID.ColumnName = "MoniEventID";
				colvarMoniEventID.DataType = DbType.Int32;
				colvarMoniEventID.MaxLength = 0;
				colvarMoniEventID.AutoIncrement = false;
				colvarMoniEventID.IsNullable = false;
				colvarMoniEventID.IsPrimaryKey = true;
				colvarMoniEventID.IsForeignKey = false;
				colvarMoniEventID.IsReadOnly = false;
				colvarMoniEventID.DefaultSetting = @"";
				colvarMoniEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoniEventID);

				TableSchema.TableColumn colvarevent_id = new TableSchema.TableColumn(schema);
				colvarevent_id.ColumnName = "event_id";
				colvarevent_id.DataType = DbType.Int32;
				colvarevent_id.MaxLength = 0;
				colvarevent_id.AutoIncrement = false;
				colvarevent_id.IsNullable = false;
				colvarevent_id.IsPrimaryKey = false;
				colvarevent_id.IsForeignKey = false;
				colvarevent_id.IsReadOnly = false;
				colvarevent_id.DefaultSetting = @"";
				colvarevent_id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarevent_id);

				TableSchema.TableColumn colvarservtype_id = new TableSchema.TableColumn(schema);
				colvarservtype_id.ColumnName = "servtype_id";
				colvarservtype_id.DataType = DbType.String;
				colvarservtype_id.MaxLength = 10;
				colvarservtype_id.AutoIncrement = false;
				colvarservtype_id.IsNullable = false;
				colvarservtype_id.IsPrimaryKey = false;
				colvarservtype_id.IsForeignKey = false;
				colvarservtype_id.IsReadOnly = false;
				colvarservtype_id.DefaultSetting = @"";
				colvarservtype_id.ForeignKeyTableName = "";
				schema.Columns.Add(colvarservtype_id);

				TableSchema.TableColumn colvardescr = new TableSchema.TableColumn(schema);
				colvardescr.ColumnName = "descr";
				colvardescr.DataType = DbType.String;
				colvardescr.MaxLength = 50;
				colvardescr.AutoIncrement = false;
				colvardescr.IsNullable = false;
				colvardescr.IsPrimaryKey = false;
				colvardescr.IsForeignKey = false;
				colvardescr.IsReadOnly = false;
				colvardescr.DefaultSetting = @"";
				colvardescr.ForeignKeyTableName = "";
				schema.Columns.Add(colvardescr);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityEventCodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityEventCode LoadFrom(MS_MonitronicsEntityEventCode item)
		{
			MS_MonitronicsEntityEventCode result = new MS_MonitronicsEntityEventCode();
			if (item.MoniEventID != default(int)) {
				result.LoadByKey(item.MoniEventID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MoniEventID {
			get { return GetColumnValue<int>(Columns.MoniEventID); }
			set {
				SetColumnValue(Columns.MoniEventID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MoniEventID));
			}
		}
		[DataMember]
		public int event_id {
			get { return GetColumnValue<int>(Columns.event_id); }
			set {
				SetColumnValue(Columns.event_id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.event_id));
			}
		}
		[DataMember]
		public string servtype_id {
			get { return GetColumnValue<string>(Columns.servtype_id); }
			set {
				SetColumnValue(Columns.servtype_id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.servtype_id));
			}
		}
		[DataMember]
		public string descr {
			get { return GetColumnValue<string>(Columns.descr); }
			set {
				SetColumnValue(Columns.descr, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.descr));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return MoniEventID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MoniEventIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn event_idColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn servtype_idColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn descrColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MoniEventID = @"MoniEventID";
			public static readonly string event_id = @"event_id";
			public static readonly string servtype_id = @"servtype_id";
			public static readonly string descr = @"descr";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MoniEventID; }
		}
		*/

		#region Foreign Collections

		private MS_AccountEventCollection _MS_AccountEventsCol;
		//Relationship: FK_MS_AccountEvents_MS_MonitronicsEventCodes
		public MS_AccountEventCollection MS_AccountEventsCol
		{
			get
			{
				if(_MS_AccountEventsCol == null) {
					_MS_AccountEventsCol = new MS_AccountEventCollection();
					_MS_AccountEventsCol.LoadAndCloseReader(MS_AccountEvent.Query()
						.WHERE(MS_AccountEvent.Columns.MoniEventId, MoniEventID).ExecuteReader());
				}
				return _MS_AccountEventsCol;
			}
		}

		private MS_EquipmentTypeEventTypeCollection _MS_EquipmentTypeEventTypesCol;
		//Relationship: FK_MS_EquipmentTypeEventTypes_MS_MonitronicsEventCodes
		public MS_EquipmentTypeEventTypeCollection MS_EquipmentTypeEventTypesCol
		{
			get
			{
				if(_MS_EquipmentTypeEventTypesCol == null) {
					_MS_EquipmentTypeEventTypesCol = new MS_EquipmentTypeEventTypeCollection();
					_MS_EquipmentTypeEventTypesCol.LoadAndCloseReader(MS_EquipmentTypeEventType.Query()
						.WHERE(MS_EquipmentTypeEventType.Columns.MoniEventId, MoniEventID).ExecuteReader());
				}
				return _MS_EquipmentTypeEventTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityEventHistory class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEventHistoryCollection : ActiveList<MS_MonitronicsEntityEventHistory, MS_MonitronicsEntityEventHistoryCollection>
	{
		public static MS_MonitronicsEntityEventHistoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityEventHistoryCollection result = new MS_MonitronicsEntityEventHistoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityEventHistory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityEventHistories table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEventHistory : ActiveRecord<MS_MonitronicsEntityEventHistory>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityEventHistory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityEventHistories", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEventHistoryID = new TableSchema.TableColumn(schema);
				colvarEventHistoryID.ColumnName = "EventHistoryID";
				colvarEventHistoryID.DataType = DbType.Int64;
				colvarEventHistoryID.MaxLength = 0;
				colvarEventHistoryID.AutoIncrement = true;
				colvarEventHistoryID.IsNullable = false;
				colvarEventHistoryID.IsPrimaryKey = true;
				colvarEventHistoryID.IsForeignKey = false;
				colvarEventHistoryID.IsReadOnly = false;
				colvarEventHistoryID.DefaultSetting = @"";
				colvarEventHistoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventHistoryID);

				TableSchema.TableColumn colvarSubmitsGetDataId = new TableSchema.TableColumn(schema);
				colvarSubmitsGetDataId.ColumnName = "SubmitsGetDataId";
				colvarSubmitsGetDataId.DataType = DbType.Int64;
				colvarSubmitsGetDataId.MaxLength = 0;
				colvarSubmitsGetDataId.AutoIncrement = false;
				colvarSubmitsGetDataId.IsNullable = false;
				colvarSubmitsGetDataId.IsPrimaryKey = false;
				colvarSubmitsGetDataId.IsForeignKey = true;
				colvarSubmitsGetDataId.IsReadOnly = false;
				colvarSubmitsGetDataId.DefaultSetting = @"";
				colvarSubmitsGetDataId.ForeignKeyTableName = "MS_MonitronicsSubmitsGetDatas";
				schema.Columns.Add(colvarSubmitsGetDataId);

				TableSchema.TableColumn colvarIndustryAccountId = new TableSchema.TableColumn(schema);
				colvarIndustryAccountId.ColumnName = "IndustryAccountId";
				colvarIndustryAccountId.DataType = DbType.Int64;
				colvarIndustryAccountId.MaxLength = 0;
				colvarIndustryAccountId.AutoIncrement = false;
				colvarIndustryAccountId.IsNullable = false;
				colvarIndustryAccountId.IsPrimaryKey = false;
				colvarIndustryAccountId.IsForeignKey = false;
				colvarIndustryAccountId.IsReadOnly = false;
				colvarIndustryAccountId.DefaultSetting = @"";
				colvarIndustryAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountId);

				TableSchema.TableColumn colvarCsNo = new TableSchema.TableColumn(schema);
				colvarCsNo.ColumnName = "CsNo";
				colvarCsNo.DataType = DbType.AnsiString;
				colvarCsNo.MaxLength = 30;
				colvarCsNo.AutoIncrement = false;
				colvarCsNo.IsNullable = true;
				colvarCsNo.IsPrimaryKey = false;
				colvarCsNo.IsForeignKey = false;
				colvarCsNo.IsReadOnly = false;
				colvarCsNo.DefaultSetting = @"";
				colvarCsNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsNo);

				TableSchema.TableColumn colvarEventDate = new TableSchema.TableColumn(schema);
				colvarEventDate.ColumnName = "EventDate";
				colvarEventDate.DataType = DbType.DateTime;
				colvarEventDate.MaxLength = 0;
				colvarEventDate.AutoIncrement = false;
				colvarEventDate.IsNullable = true;
				colvarEventDate.IsPrimaryKey = false;
				colvarEventDate.IsForeignKey = false;
				colvarEventDate.IsReadOnly = false;
				colvarEventDate.DefaultSetting = @"";
				colvarEventDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventDate);

				TableSchema.TableColumn colvarZoneId = new TableSchema.TableColumn(schema);
				colvarZoneId.ColumnName = "ZoneId";
				colvarZoneId.DataType = DbType.AnsiString;
				colvarZoneId.MaxLength = 30;
				colvarZoneId.AutoIncrement = false;
				colvarZoneId.IsNullable = true;
				colvarZoneId.IsPrimaryKey = false;
				colvarZoneId.IsForeignKey = false;
				colvarZoneId.IsReadOnly = false;
				colvarZoneId.DefaultSetting = @"";
				colvarZoneId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZoneId);

				TableSchema.TableColumn colvarArea = new TableSchema.TableColumn(schema);
				colvarArea.ColumnName = "Area";
				colvarArea.DataType = DbType.AnsiString;
				colvarArea.MaxLength = 50;
				colvarArea.AutoIncrement = false;
				colvarArea.IsNullable = true;
				colvarArea.IsPrimaryKey = false;
				colvarArea.IsForeignKey = false;
				colvarArea.IsReadOnly = false;
				colvarArea.DefaultSetting = @"";
				colvarArea.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArea);

				TableSchema.TableColumn colvarEventId = new TableSchema.TableColumn(schema);
				colvarEventId.ColumnName = "EventId";
				colvarEventId.DataType = DbType.AnsiString;
				colvarEventId.MaxLength = 30;
				colvarEventId.AutoIncrement = false;
				colvarEventId.IsNullable = true;
				colvarEventId.IsPrimaryKey = false;
				colvarEventId.IsForeignKey = false;
				colvarEventId.IsReadOnly = false;
				colvarEventId.DefaultSetting = @"";
				colvarEventId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventId);

				TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
				colvarUserName.ColumnName = "UserName";
				colvarUserName.DataType = DbType.AnsiString;
				colvarUserName.MaxLength = 50;
				colvarUserName.AutoIncrement = false;
				colvarUserName.IsNullable = true;
				colvarUserName.IsPrimaryKey = false;
				colvarUserName.IsForeignKey = false;
				colvarUserName.IsReadOnly = false;
				colvarUserName.DefaultSetting = @"";
				colvarUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserName);

				TableSchema.TableColumn colvarZoneStateId = new TableSchema.TableColumn(schema);
				colvarZoneStateId.ColumnName = "ZoneStateId";
				colvarZoneStateId.DataType = DbType.AnsiString;
				colvarZoneStateId.MaxLength = 10;
				colvarZoneStateId.AutoIncrement = false;
				colvarZoneStateId.IsNullable = true;
				colvarZoneStateId.IsPrimaryKey = false;
				colvarZoneStateId.IsForeignKey = false;
				colvarZoneStateId.IsReadOnly = false;
				colvarZoneStateId.DefaultSetting = @"";
				colvarZoneStateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZoneStateId);

				TableSchema.TableColumn colvarmatch = new TableSchema.TableColumn(schema);
				colvarmatch.ColumnName = "match";
				colvarmatch.DataType = DbType.AnsiString;
				colvarmatch.MaxLength = 100;
				colvarmatch.AutoIncrement = false;
				colvarmatch.IsNullable = true;
				colvarmatch.IsPrimaryKey = false;
				colvarmatch.IsForeignKey = false;
				colvarmatch.IsReadOnly = false;
				colvarmatch.DefaultSetting = @"";
				colvarmatch.ForeignKeyTableName = "";
				schema.Columns.Add(colvarmatch);

				TableSchema.TableColumn colvarcomputed = new TableSchema.TableColumn(schema);
				colvarcomputed.ColumnName = "computed";
				colvarcomputed.DataType = DbType.AnsiString;
				colvarcomputed.MaxLength = 100;
				colvarcomputed.AutoIncrement = false;
				colvarcomputed.IsNullable = true;
				colvarcomputed.IsPrimaryKey = false;
				colvarcomputed.IsForeignKey = false;
				colvarcomputed.IsReadOnly = false;
				colvarcomputed.DefaultSetting = @"";
				colvarcomputed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarcomputed);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityEventHistories",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityEventHistory LoadFrom(MS_MonitronicsEntityEventHistory item)
		{
			MS_MonitronicsEntityEventHistory result = new MS_MonitronicsEntityEventHistory();
			if (item.EventHistoryID != default(long)) {
				result.LoadByKey(item.EventHistoryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long EventHistoryID {
			get { return GetColumnValue<long>(Columns.EventHistoryID); }
			set {
				SetColumnValue(Columns.EventHistoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventHistoryID));
			}
		}
		[DataMember]
		public long SubmitsGetDataId {
			get { return GetColumnValue<long>(Columns.SubmitsGetDataId); }
			set {
				SetColumnValue(Columns.SubmitsGetDataId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubmitsGetDataId));
			}
		}
		[DataMember]
		public long IndustryAccountId {
			get { return GetColumnValue<long>(Columns.IndustryAccountId); }
			set {
				SetColumnValue(Columns.IndustryAccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryAccountId));
			}
		}
		[DataMember]
		public string CsNo {
			get { return GetColumnValue<string>(Columns.CsNo); }
			set {
				SetColumnValue(Columns.CsNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CsNo));
			}
		}
		[DataMember]
		public DateTime? EventDate {
			get { return GetColumnValue<DateTime?>(Columns.EventDate); }
			set {
				SetColumnValue(Columns.EventDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventDate));
			}
		}
		[DataMember]
		public string ZoneId {
			get { return GetColumnValue<string>(Columns.ZoneId); }
			set {
				SetColumnValue(Columns.ZoneId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZoneId));
			}
		}
		[DataMember]
		public string Area {
			get { return GetColumnValue<string>(Columns.Area); }
			set {
				SetColumnValue(Columns.Area, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Area));
			}
		}
		[DataMember]
		public string EventId {
			get { return GetColumnValue<string>(Columns.EventId); }
			set {
				SetColumnValue(Columns.EventId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventId));
			}
		}
		[DataMember]
		public string UserName {
			get { return GetColumnValue<string>(Columns.UserName); }
			set {
				SetColumnValue(Columns.UserName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserName));
			}
		}
		[DataMember]
		public string ZoneStateId {
			get { return GetColumnValue<string>(Columns.ZoneStateId); }
			set {
				SetColumnValue(Columns.ZoneStateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZoneStateId));
			}
		}
		[DataMember]
		public string match {
			get { return GetColumnValue<string>(Columns.match); }
			set {
				SetColumnValue(Columns.match, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.match));
			}
		}
		[DataMember]
		public string computed {
			get { return GetColumnValue<string>(Columns.computed); }
			set {
				SetColumnValue(Columns.computed, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.computed));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_MonitronicsSubmitsGetData _SubmitsGetData;
		//Relationship: FK_MS_MonitronicsEventHistories_MS_MonitronicsSubmitsGetDatas
		public MS_MonitronicsSubmitsGetData SubmitsGetData
		{
			get
			{
				if(_SubmitsGetData == null) {
					_SubmitsGetData = MS_MonitronicsSubmitsGetData.FetchByID(this.SubmitsGetDataId);
				}
				return _SubmitsGetData;
			}
			set
			{
				SetColumnValue("SubmitsGetDataId", value.SubmitsGetDataID);
				_SubmitsGetData = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EventHistoryID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn EventHistoryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SubmitsGetDataIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IndustryAccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CsNoColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn EventDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ZoneIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AreaColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn EventIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn UserNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ZoneStateIdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn matchColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn computedColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EventHistoryID = @"EventHistoryID";
			public static readonly string SubmitsGetDataId = @"SubmitsGetDataId";
			public static readonly string IndustryAccountId = @"IndustryAccountId";
			public static readonly string CsNo = @"CsNo";
			public static readonly string EventDate = @"EventDate";
			public static readonly string ZoneId = @"ZoneId";
			public static readonly string Area = @"Area";
			public static readonly string EventId = @"EventId";
			public static readonly string UserName = @"UserName";
			public static readonly string ZoneStateId = @"ZoneStateId";
			public static readonly string match = @"match";
			public static readonly string computed = @"computed";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EventHistoryID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityEvent class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEventCollection : ActiveList<MS_MonitronicsEntityEvent, MS_MonitronicsEntityEventCollection>
	{
		public static MS_MonitronicsEntityEventCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityEventCollection result = new MS_MonitronicsEntityEventCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityEvent item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityEvents table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityEvent : ActiveRecord<MS_MonitronicsEntityEvent>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityEvent()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityEvents", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEventID = new TableSchema.TableColumn(schema);
				colvarEventID.ColumnName = "EventID";
				colvarEventID.DataType = DbType.AnsiString;
				colvarEventID.MaxLength = 30;
				colvarEventID.AutoIncrement = false;
				colvarEventID.IsNullable = false;
				colvarEventID.IsPrimaryKey = true;
				colvarEventID.IsForeignKey = false;
				colvarEventID.IsReadOnly = false;
				colvarEventID.DefaultSetting = @"";
				colvarEventID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityEvents",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityEvent LoadFrom(MS_MonitronicsEntityEvent item)
		{
			MS_MonitronicsEntityEvent result = new MS_MonitronicsEntityEvent();
			if (item.EventID != default(string)) {
				result.LoadByKey(item.EventID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string EventID {
			get { return GetColumnValue<string>(Columns.EventID); }
			set {
				SetColumnValue(Columns.EventID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EventIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EventID = @"EventID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EventID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityLanguage class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityLanguageCollection : ActiveList<MS_MonitronicsEntityLanguage, MS_MonitronicsEntityLanguageCollection>
	{
		public static MS_MonitronicsEntityLanguageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityLanguageCollection result = new MS_MonitronicsEntityLanguageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityLanguage item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityLanguages table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityLanguage : ActiveRecord<MS_MonitronicsEntityLanguage>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityLanguage()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityLanguages", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLanguageID = new TableSchema.TableColumn(schema);
				colvarLanguageID.ColumnName = "LanguageID";
				colvarLanguageID.DataType = DbType.AnsiString;
				colvarLanguageID.MaxLength = 50;
				colvarLanguageID.AutoIncrement = false;
				colvarLanguageID.IsNullable = false;
				colvarLanguageID.IsPrimaryKey = true;
				colvarLanguageID.IsForeignKey = false;
				colvarLanguageID.IsReadOnly = false;
				colvarLanguageID.DefaultSetting = @"";
				colvarLanguageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLanguageID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityLanguages",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityLanguage LoadFrom(MS_MonitronicsEntityLanguage item)
		{
			MS_MonitronicsEntityLanguage result = new MS_MonitronicsEntityLanguage();
			if (item.LanguageID != default(string)) {
				result.LoadByKey(item.LanguageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string LanguageID {
			get { return GetColumnValue<string>(Columns.LanguageID); }
			set {
				SetColumnValue(Columns.LanguageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LanguageID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn LanguageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LanguageID = @"LanguageID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LanguageID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityNamePrefix class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityNamePrefixCollection : ActiveList<MS_MonitronicsEntityNamePrefix, MS_MonitronicsEntityNamePrefixCollection>
	{
		public static MS_MonitronicsEntityNamePrefixCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityNamePrefixCollection result = new MS_MonitronicsEntityNamePrefixCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityNamePrefix item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityNamePrefixes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityNamePrefix : ActiveRecord<MS_MonitronicsEntityNamePrefix>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityNamePrefix()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityNamePrefixes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.AnsiString;
				colvarPrefix.MaxLength = 50;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = false;
				colvarPrefix.IsPrimaryKey = true;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityNamePrefixes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityNamePrefix LoadFrom(MS_MonitronicsEntityNamePrefix item)
		{
			MS_MonitronicsEntityNamePrefix result = new MS_MonitronicsEntityNamePrefix();
			if (item.Prefix != default(string)) {
				result.LoadByKey(item.Prefix);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set {
				SetColumnValue(Columns.Prefix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Prefix));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Prefix;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string Prefix = @"Prefix";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return Prefix; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityNameSuffix class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityNameSuffixCollection : ActiveList<MS_MonitronicsEntityNameSuffix, MS_MonitronicsEntityNameSuffixCollection>
	{
		public static MS_MonitronicsEntityNameSuffixCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityNameSuffixCollection result = new MS_MonitronicsEntityNameSuffixCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityNameSuffix item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityNameSuffixes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityNameSuffix : ActiveRecord<MS_MonitronicsEntityNameSuffix>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityNameSuffix()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityNameSuffixes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSuffix = new TableSchema.TableColumn(schema);
				colvarSuffix.ColumnName = "Suffix";
				colvarSuffix.DataType = DbType.AnsiString;
				colvarSuffix.MaxLength = 50;
				colvarSuffix.AutoIncrement = false;
				colvarSuffix.IsNullable = false;
				colvarSuffix.IsPrimaryKey = true;
				colvarSuffix.IsForeignKey = false;
				colvarSuffix.IsReadOnly = false;
				colvarSuffix.DefaultSetting = @"";
				colvarSuffix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuffix);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityNameSuffixes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityNameSuffix LoadFrom(MS_MonitronicsEntityNameSuffix item)
		{
			MS_MonitronicsEntityNameSuffix result = new MS_MonitronicsEntityNameSuffix();
			if (item.Suffix != default(string)) {
				result.LoadByKey(item.Suffix);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string Suffix {
			get { return GetColumnValue<string>(Columns.Suffix); }
			set {
				SetColumnValue(Columns.Suffix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Suffix));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Suffix;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SuffixColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string Suffix = @"Suffix";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return Suffix; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityOosCat class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityOosCatCollection : ActiveList<MS_MonitronicsEntityOosCat, MS_MonitronicsEntityOosCatCollection>
	{
		public static MS_MonitronicsEntityOosCatCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityOosCatCollection result = new MS_MonitronicsEntityOosCatCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityOosCat item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityOosCats table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityOosCat : ActiveRecord<MS_MonitronicsEntityOosCat>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityOosCat()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityOosCats", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarOosCatsID = new TableSchema.TableColumn(schema);
				colvarOosCatsID.ColumnName = "OosCatsID";
				colvarOosCatsID.DataType = DbType.AnsiString;
				colvarOosCatsID.MaxLength = 50;
				colvarOosCatsID.AutoIncrement = false;
				colvarOosCatsID.IsNullable = false;
				colvarOosCatsID.IsPrimaryKey = true;
				colvarOosCatsID.IsForeignKey = false;
				colvarOosCatsID.IsReadOnly = false;
				colvarOosCatsID.DefaultSetting = @"";
				colvarOosCatsID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOosCatsID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityOosCats",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityOosCat LoadFrom(MS_MonitronicsEntityOosCat item)
		{
			MS_MonitronicsEntityOosCat result = new MS_MonitronicsEntityOosCat();
			if (item.OosCatsID != default(string)) {
				result.LoadByKey(item.OosCatsID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string OosCatsID {
			get { return GetColumnValue<string>(Columns.OosCatsID); }
			set {
				SetColumnValue(Columns.OosCatsID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OosCatsID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn OosCatsIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string OosCatsID = @"OosCatsID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return OosCatsID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityOption class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityOptionCollection : ActiveList<MS_MonitronicsEntityOption, MS_MonitronicsEntityOptionCollection>
	{
		public static MS_MonitronicsEntityOptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityOptionCollection result = new MS_MonitronicsEntityOptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityOption item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityOptions table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityOption : ActiveRecord<MS_MonitronicsEntityOption>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityOption()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityOptions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEntityOptionID = new TableSchema.TableColumn(schema);
				colvarEntityOptionID.ColumnName = "EntityOptionID";
				colvarEntityOptionID.DataType = DbType.Int32;
				colvarEntityOptionID.MaxLength = 0;
				colvarEntityOptionID.AutoIncrement = true;
				colvarEntityOptionID.IsNullable = false;
				colvarEntityOptionID.IsPrimaryKey = true;
				colvarEntityOptionID.IsForeignKey = false;
				colvarEntityOptionID.IsReadOnly = false;
				colvarEntityOptionID.DefaultSetting = @"";
				colvarEntityOptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntityOptionID);

				TableSchema.TableColumn colvarOptionID = new TableSchema.TableColumn(schema);
				colvarOptionID.ColumnName = "OptionID";
				colvarOptionID.DataType = DbType.AnsiString;
				colvarOptionID.MaxLength = 50;
				colvarOptionID.AutoIncrement = false;
				colvarOptionID.IsNullable = false;
				colvarOptionID.IsPrimaryKey = false;
				colvarOptionID.IsForeignKey = false;
				colvarOptionID.IsReadOnly = false;
				colvarOptionID.DefaultSetting = @"";
				colvarOptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOptionID);

				TableSchema.TableColumn colvarUsageId = new TableSchema.TableColumn(schema);
				colvarUsageId.ColumnName = "UsageId";
				colvarUsageId.DataType = DbType.AnsiString;
				colvarUsageId.MaxLength = 50;
				colvarUsageId.AutoIncrement = false;
				colvarUsageId.IsNullable = false;
				colvarUsageId.IsPrimaryKey = false;
				colvarUsageId.IsForeignKey = false;
				colvarUsageId.IsReadOnly = false;
				colvarUsageId.DefaultSetting = @"";
				colvarUsageId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsageId);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarValidValue = new TableSchema.TableColumn(schema);
				colvarValidValue.ColumnName = "ValidValue";
				colvarValidValue.DataType = DbType.AnsiString;
				colvarValidValue.MaxLength = 50;
				colvarValidValue.AutoIncrement = false;
				colvarValidValue.IsNullable = false;
				colvarValidValue.IsPrimaryKey = false;
				colvarValidValue.IsForeignKey = false;
				colvarValidValue.IsReadOnly = false;
				colvarValidValue.DefaultSetting = @"";
				colvarValidValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValidValue);

				TableSchema.TableColumn colvarValueDescription = new TableSchema.TableColumn(schema);
				colvarValueDescription.ColumnName = "ValueDescription";
				colvarValueDescription.DataType = DbType.AnsiString;
				colvarValueDescription.MaxLength = 50;
				colvarValueDescription.AutoIncrement = false;
				colvarValueDescription.IsNullable = true;
				colvarValueDescription.IsPrimaryKey = false;
				colvarValueDescription.IsForeignKey = false;
				colvarValueDescription.IsReadOnly = false;
				colvarValueDescription.DefaultSetting = @"";
				colvarValueDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueDescription);

				TableSchema.TableColumn colvarValueRequired = new TableSchema.TableColumn(schema);
				colvarValueRequired.ColumnName = "ValueRequired";
				colvarValueRequired.DataType = DbType.AnsiString;
				colvarValueRequired.MaxLength = 50;
				colvarValueRequired.AutoIncrement = false;
				colvarValueRequired.IsNullable = true;
				colvarValueRequired.IsPrimaryKey = false;
				colvarValueRequired.IsForeignKey = false;
				colvarValueRequired.IsReadOnly = false;
				colvarValueRequired.DefaultSetting = @"";
				colvarValueRequired.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueRequired);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityOptions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityOption LoadFrom(MS_MonitronicsEntityOption item)
		{
			MS_MonitronicsEntityOption result = new MS_MonitronicsEntityOption();
			if (item.EntityOptionID != default(int)) {
				result.LoadByKey(item.EntityOptionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EntityOptionID {
			get { return GetColumnValue<int>(Columns.EntityOptionID); }
			set {
				SetColumnValue(Columns.EntityOptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EntityOptionID));
			}
		}
		[DataMember]
		public string OptionID {
			get { return GetColumnValue<string>(Columns.OptionID); }
			set {
				SetColumnValue(Columns.OptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OptionID));
			}
		}
		[DataMember]
		public string UsageId {
			get { return GetColumnValue<string>(Columns.UsageId); }
			set {
				SetColumnValue(Columns.UsageId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UsageId));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string ValidValue {
			get { return GetColumnValue<string>(Columns.ValidValue); }
			set {
				SetColumnValue(Columns.ValidValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ValidValue));
			}
		}
		[DataMember]
		public string ValueDescription {
			get { return GetColumnValue<string>(Columns.ValueDescription); }
			set {
				SetColumnValue(Columns.ValueDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ValueDescription));
			}
		}
		[DataMember]
		public string ValueRequired {
			get { return GetColumnValue<string>(Columns.ValueRequired); }
			set {
				SetColumnValue(Columns.ValueRequired, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ValueRequired));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return OptionID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EntityOptionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn OptionIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UsageIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ValidValueColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ValueDescriptionColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ValueRequiredColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EntityOptionID = @"EntityOptionID";
			public static readonly string OptionID = @"OptionID";
			public static readonly string UsageId = @"UsageId";
			public static readonly string Description = @"Description";
			public static readonly string ValidValue = @"ValidValue";
			public static readonly string ValueDescription = @"ValueDescription";
			public static readonly string ValueRequired = @"ValueRequired";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EntityOptionID; }
		}
		*/

		#region Foreign Collections

		private MS_EquipmentMonitronicsCellProviderCollection _MS_EquipmentMonitronicsCellProvidersCol;
		//Relationship: FK_MS_EquipmentMonitronicsCellProviders_MS_MonitronicsEntityOptions
		public MS_EquipmentMonitronicsCellProviderCollection MS_EquipmentMonitronicsCellProvidersCol
		{
			get
			{
				if(_MS_EquipmentMonitronicsCellProvidersCol == null) {
					_MS_EquipmentMonitronicsCellProvidersCol = new MS_EquipmentMonitronicsCellProviderCollection();
					_MS_EquipmentMonitronicsCellProvidersCol.LoadAndCloseReader(MS_EquipmentMonitronicsCellProvider.Query()
						.WHERE(MS_EquipmentMonitronicsCellProvider.Columns.EntityOptionId, EntityOptionID).ExecuteReader());
				}
				return _MS_EquipmentMonitronicsCellProvidersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityPartialBatch class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityPartialBatchCollection : ActiveList<MS_MonitronicsEntityPartialBatch, MS_MonitronicsEntityPartialBatchCollection>
	{
		public static MS_MonitronicsEntityPartialBatchCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityPartialBatchCollection result = new MS_MonitronicsEntityPartialBatchCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityPartialBatch item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityPartialBatches table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityPartialBatch : ActiveRecord<MS_MonitronicsEntityPartialBatch>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityPartialBatch()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityPartialBatches", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarWsiBatchNoID = new TableSchema.TableColumn(schema);
				colvarWsiBatchNoID.ColumnName = "WsiBatchNoID";
				colvarWsiBatchNoID.DataType = DbType.AnsiString;
				colvarWsiBatchNoID.MaxLength = 50;
				colvarWsiBatchNoID.AutoIncrement = false;
				colvarWsiBatchNoID.IsNullable = false;
				colvarWsiBatchNoID.IsPrimaryKey = true;
				colvarWsiBatchNoID.IsForeignKey = false;
				colvarWsiBatchNoID.IsReadOnly = false;
				colvarWsiBatchNoID.DefaultSetting = @"";
				colvarWsiBatchNoID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWsiBatchNoID);

				TableSchema.TableColumn colvarCustServNo = new TableSchema.TableColumn(schema);
				colvarCustServNo.ColumnName = "CustServNo";
				colvarCustServNo.DataType = DbType.AnsiString;
				colvarCustServNo.MaxLength = 50;
				colvarCustServNo.AutoIncrement = false;
				colvarCustServNo.IsNullable = false;
				colvarCustServNo.IsPrimaryKey = false;
				colvarCustServNo.IsForeignKey = false;
				colvarCustServNo.IsReadOnly = false;
				colvarCustServNo.DefaultSetting = @"";
				colvarCustServNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustServNo);

				TableSchema.TableColumn colvarSiteName = new TableSchema.TableColumn(schema);
				colvarSiteName.ColumnName = "SiteName";
				colvarSiteName.DataType = DbType.AnsiString;
				colvarSiteName.MaxLength = 50;
				colvarSiteName.AutoIncrement = false;
				colvarSiteName.IsNullable = false;
				colvarSiteName.IsPrimaryKey = false;
				colvarSiteName.IsForeignKey = false;
				colvarSiteName.IsReadOnly = false;
				colvarSiteName.DefaultSetting = @"";
				colvarSiteName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteName);

				TableSchema.TableColumn colvarServcoNo = new TableSchema.TableColumn(schema);
				colvarServcoNo.ColumnName = "ServcoNo";
				colvarServcoNo.DataType = DbType.Int32;
				colvarServcoNo.MaxLength = 0;
				colvarServcoNo.AutoIncrement = false;
				colvarServcoNo.IsNullable = false;
				colvarServcoNo.IsPrimaryKey = false;
				colvarServcoNo.IsForeignKey = false;
				colvarServcoNo.IsReadOnly = false;
				colvarServcoNo.DefaultSetting = @"";
				colvarServcoNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServcoNo);

				TableSchema.TableColumn colvarMmChangeDate = new TableSchema.TableColumn(schema);
				colvarMmChangeDate.ColumnName = "MmChangeDate";
				colvarMmChangeDate.DataType = DbType.DateTime;
				colvarMmChangeDate.MaxLength = 0;
				colvarMmChangeDate.AutoIncrement = false;
				colvarMmChangeDate.IsNullable = false;
				colvarMmChangeDate.IsPrimaryKey = false;
				colvarMmChangeDate.IsForeignKey = false;
				colvarMmChangeDate.IsReadOnly = false;
				colvarMmChangeDate.DefaultSetting = @"";
				colvarMmChangeDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMmChangeDate);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityPartialBatches",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityPartialBatch LoadFrom(MS_MonitronicsEntityPartialBatch item)
		{
			MS_MonitronicsEntityPartialBatch result = new MS_MonitronicsEntityPartialBatch();
			if (item.WsiBatchNoID != default(string)) {
				result.LoadByKey(item.WsiBatchNoID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string WsiBatchNoID {
			get { return GetColumnValue<string>(Columns.WsiBatchNoID); }
			set {
				SetColumnValue(Columns.WsiBatchNoID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WsiBatchNoID));
			}
		}
		[DataMember]
		public string CustServNo {
			get { return GetColumnValue<string>(Columns.CustServNo); }
			set {
				SetColumnValue(Columns.CustServNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustServNo));
			}
		}
		[DataMember]
		public string SiteName {
			get { return GetColumnValue<string>(Columns.SiteName); }
			set {
				SetColumnValue(Columns.SiteName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteName));
			}
		}
		[DataMember]
		public int ServcoNo {
			get { return GetColumnValue<int>(Columns.ServcoNo); }
			set {
				SetColumnValue(Columns.ServcoNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServcoNo));
			}
		}
		[DataMember]
		public DateTime MmChangeDate {
			get { return GetColumnValue<DateTime>(Columns.MmChangeDate); }
			set {
				SetColumnValue(Columns.MmChangeDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MmChangeDate));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CustServNo;
		}

		#region Typed Columns

		public static TableSchema.TableColumn WsiBatchNoIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustServNoColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SiteNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ServcoNoColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MmChangeDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string WsiBatchNoID = @"WsiBatchNoID";
			public static readonly string CustServNo = @"CustServNo";
			public static readonly string SiteName = @"SiteName";
			public static readonly string ServcoNo = @"ServcoNo";
			public static readonly string MmChangeDate = @"MmChangeDate";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return WsiBatchNoID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityPermitType class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityPermitTypeCollection : ActiveList<MS_MonitronicsEntityPermitType, MS_MonitronicsEntityPermitTypeCollection>
	{
		public static MS_MonitronicsEntityPermitTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityPermitTypeCollection result = new MS_MonitronicsEntityPermitTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityPermitType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityPermitTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityPermitType : ActiveRecord<MS_MonitronicsEntityPermitType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityPermitType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityPermitTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPermitTypeID = new TableSchema.TableColumn(schema);
				colvarPermitTypeID.ColumnName = "PermitTypeID";
				colvarPermitTypeID.DataType = DbType.AnsiString;
				colvarPermitTypeID.MaxLength = 50;
				colvarPermitTypeID.AutoIncrement = false;
				colvarPermitTypeID.IsNullable = false;
				colvarPermitTypeID.IsPrimaryKey = true;
				colvarPermitTypeID.IsForeignKey = false;
				colvarPermitTypeID.IsReadOnly = false;
				colvarPermitTypeID.DefaultSetting = @"";
				colvarPermitTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermitTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityPermitTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityPermitType LoadFrom(MS_MonitronicsEntityPermitType item)
		{
			MS_MonitronicsEntityPermitType result = new MS_MonitronicsEntityPermitType();
			if (item.PermitTypeID != default(string)) {
				result.LoadByKey(item.PermitTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string PermitTypeID {
			get { return GetColumnValue<string>(Columns.PermitTypeID); }
			set {
				SetColumnValue(Columns.PermitTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PermitTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PermitTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PermitTypeID = @"PermitTypeID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PermitTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityPhoneType class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityPhoneTypeCollection : ActiveList<MS_MonitronicsEntityPhoneType, MS_MonitronicsEntityPhoneTypeCollection>
	{
		public static MS_MonitronicsEntityPhoneTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityPhoneTypeCollection result = new MS_MonitronicsEntityPhoneTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityPhoneType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityPhoneTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityPhoneType : ActiveRecord<MS_MonitronicsEntityPhoneType>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string Cellular_PhoneID = "CL";
			[EnumMember()] public const string EmailID = "EM";
			[EnumMember()] public const string FaxID = "FX";
			[EnumMember()] public const string HomeID = "HM";
			[EnumMember()] public const string PagerID = "PG";
			[EnumMember()] public const string WorkID = "WK";
			[EnumMember()] public const string MyMoni_Email_do_Not_USEID = "YM";
			[EnumMember()] public const string MyMoni_Text_do_Not_USEID = "YX";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityPhoneType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityPhoneTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPhoneTypeID = new TableSchema.TableColumn(schema);
				colvarPhoneTypeID.ColumnName = "PhoneTypeID";
				colvarPhoneTypeID.DataType = DbType.AnsiString;
				colvarPhoneTypeID.MaxLength = 50;
				colvarPhoneTypeID.AutoIncrement = false;
				colvarPhoneTypeID.IsNullable = false;
				colvarPhoneTypeID.IsPrimaryKey = true;
				colvarPhoneTypeID.IsForeignKey = false;
				colvarPhoneTypeID.IsReadOnly = false;
				colvarPhoneTypeID.DefaultSetting = @"";
				colvarPhoneTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarMethod = new TableSchema.TableColumn(schema);
				colvarMethod.ColumnName = "Method";
				colvarMethod.DataType = DbType.AnsiString;
				colvarMethod.MaxLength = 50;
				colvarMethod.AutoIncrement = false;
				colvarMethod.IsNullable = false;
				colvarMethod.IsPrimaryKey = false;
				colvarMethod.IsForeignKey = false;
				colvarMethod.IsReadOnly = false;
				colvarMethod.DefaultSetting = @"";
				colvarMethod.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMethod);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityPhoneTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityPhoneType LoadFrom(MS_MonitronicsEntityPhoneType item)
		{
			MS_MonitronicsEntityPhoneType result = new MS_MonitronicsEntityPhoneType();
			if (item.PhoneTypeID != default(string)) {
				result.LoadByKey(item.PhoneTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string PhoneTypeID {
			get { return GetColumnValue<string>(Columns.PhoneTypeID); }
			set {
				SetColumnValue(Columns.PhoneTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string Method {
			get { return GetColumnValue<string>(Columns.Method); }
			set {
				SetColumnValue(Columns.Method, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Method));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PhoneTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MethodColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PhoneTypeID = @"PhoneTypeID";
			public static readonly string Description = @"Description";
			public static readonly string Method = @"Method";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PhoneTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityPrefix class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityPrefixCollection : ActiveList<MS_MonitronicsEntityPrefix, MS_MonitronicsEntityPrefixCollection>
	{
		public static MS_MonitronicsEntityPrefixCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityPrefixCollection result = new MS_MonitronicsEntityPrefixCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityPrefix item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityPrefixes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityPrefix : ActiveRecord<MS_MonitronicsEntityPrefix>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityPrefix()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityPrefixes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCellFlagID = new TableSchema.TableColumn(schema);
				colvarCellFlagID.ColumnName = "CellFlagID";
				colvarCellFlagID.DataType = DbType.AnsiString;
				colvarCellFlagID.MaxLength = 50;
				colvarCellFlagID.AutoIncrement = false;
				colvarCellFlagID.IsNullable = false;
				colvarCellFlagID.IsPrimaryKey = true;
				colvarCellFlagID.IsForeignKey = false;
				colvarCellFlagID.IsReadOnly = false;
				colvarCellFlagID.DefaultSetting = @"";
				colvarCellFlagID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellFlagID);

				TableSchema.TableColumn colvarCsNoLength = new TableSchema.TableColumn(schema);
				colvarCsNoLength.ColumnName = "CsNoLength";
				colvarCsNoLength.DataType = DbType.Byte;
				colvarCsNoLength.MaxLength = 0;
				colvarCsNoLength.AutoIncrement = false;
				colvarCsNoLength.IsNullable = true;
				colvarCsNoLength.IsPrimaryKey = false;
				colvarCsNoLength.IsForeignKey = false;
				colvarCsNoLength.IsReadOnly = false;
				colvarCsNoLength.DefaultSetting = @"";
				colvarCsNoLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsNoLength);

				TableSchema.TableColumn colvarCmPurchase = new TableSchema.TableColumn(schema);
				colvarCmPurchase.ColumnName = "CmPurchase";
				colvarCmPurchase.DataType = DbType.AnsiString;
				colvarCmPurchase.MaxLength = 50;
				colvarCmPurchase.AutoIncrement = false;
				colvarCmPurchase.IsNullable = true;
				colvarCmPurchase.IsPrimaryKey = false;
				colvarCmPurchase.IsForeignKey = false;
				colvarCmPurchase.IsReadOnly = false;
				colvarCmPurchase.DefaultSetting = @"";
				colvarCmPurchase.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCmPurchase);

				TableSchema.TableColumn colvarServCoNO = new TableSchema.TableColumn(schema);
				colvarServCoNO.ColumnName = "ServCoNO";
				colvarServCoNO.DataType = DbType.Int32;
				colvarServCoNO.MaxLength = 0;
				colvarServCoNO.AutoIncrement = false;
				colvarServCoNO.IsNullable = true;
				colvarServCoNO.IsPrimaryKey = false;
				colvarServCoNO.IsForeignKey = false;
				colvarServCoNO.IsReadOnly = false;
				colvarServCoNO.DefaultSetting = @"";
				colvarServCoNO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServCoNO);

				TableSchema.TableColumn colvarCellProvider = new TableSchema.TableColumn(schema);
				colvarCellProvider.ColumnName = "CellProvider";
				colvarCellProvider.DataType = DbType.AnsiString;
				colvarCellProvider.MaxLength = 50;
				colvarCellProvider.AutoIncrement = false;
				colvarCellProvider.IsNullable = true;
				colvarCellProvider.IsPrimaryKey = false;
				colvarCellProvider.IsForeignKey = false;
				colvarCellProvider.IsReadOnly = false;
				colvarCellProvider.DefaultSetting = @"";
				colvarCellProvider.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellProvider);

				TableSchema.TableColumn colvarSystemTypeId = new TableSchema.TableColumn(schema);
				colvarSystemTypeId.ColumnName = "SystemTypeId";
				colvarSystemTypeId.DataType = DbType.AnsiString;
				colvarSystemTypeId.MaxLength = 50;
				colvarSystemTypeId.AutoIncrement = false;
				colvarSystemTypeId.IsNullable = true;
				colvarSystemTypeId.IsPrimaryKey = false;
				colvarSystemTypeId.IsForeignKey = false;
				colvarSystemTypeId.IsReadOnly = false;
				colvarSystemTypeId.DefaultSetting = @"";
				colvarSystemTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeId);

				TableSchema.TableColumn colvarCoNo = new TableSchema.TableColumn(schema);
				colvarCoNo.ColumnName = "CoNo";
				colvarCoNo.DataType = DbType.Int16;
				colvarCoNo.MaxLength = 0;
				colvarCoNo.AutoIncrement = false;
				colvarCoNo.IsNullable = true;
				colvarCoNo.IsPrimaryKey = false;
				colvarCoNo.IsForeignKey = false;
				colvarCoNo.IsReadOnly = false;
				colvarCoNo.DefaultSetting = @"";
				colvarCoNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCoNo);

				TableSchema.TableColumn colvarBrandedFlag = new TableSchema.TableColumn(schema);
				colvarBrandedFlag.ColumnName = "BrandedFlag";
				colvarBrandedFlag.DataType = DbType.AnsiString;
				colvarBrandedFlag.MaxLength = 50;
				colvarBrandedFlag.AutoIncrement = false;
				colvarBrandedFlag.IsNullable = true;
				colvarBrandedFlag.IsPrimaryKey = false;
				colvarBrandedFlag.IsForeignKey = false;
				colvarBrandedFlag.IsReadOnly = false;
				colvarBrandedFlag.DefaultSetting = @"";
				colvarBrandedFlag.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBrandedFlag);

				TableSchema.TableColumn colvarReceiverPhone = new TableSchema.TableColumn(schema);
				colvarReceiverPhone.ColumnName = "ReceiverPhone";
				colvarReceiverPhone.DataType = DbType.AnsiString;
				colvarReceiverPhone.MaxLength = 50;
				colvarReceiverPhone.AutoIncrement = false;
				colvarReceiverPhone.IsNullable = true;
				colvarReceiverPhone.IsPrimaryKey = false;
				colvarReceiverPhone.IsForeignKey = false;
				colvarReceiverPhone.IsReadOnly = false;
				colvarReceiverPhone.DefaultSetting = @"";
				colvarReceiverPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverPhone);

				TableSchema.TableColumn colvarAlarmNetCityCs = new TableSchema.TableColumn(schema);
				colvarAlarmNetCityCs.ColumnName = "AlarmNetCityCs";
				colvarAlarmNetCityCs.DataType = DbType.AnsiString;
				colvarAlarmNetCityCs.MaxLength = 50;
				colvarAlarmNetCityCs.AutoIncrement = false;
				colvarAlarmNetCityCs.IsNullable = true;
				colvarAlarmNetCityCs.IsPrimaryKey = false;
				colvarAlarmNetCityCs.IsForeignKey = false;
				colvarAlarmNetCityCs.IsReadOnly = false;
				colvarAlarmNetCityCs.DefaultSetting = @"";
				colvarAlarmNetCityCs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlarmNetCityCs);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = true;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityPrefixes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityPrefix LoadFrom(MS_MonitronicsEntityPrefix item)
		{
			MS_MonitronicsEntityPrefix result = new MS_MonitronicsEntityPrefix();
			if (item.CellFlagID != default(string)) {
				result.LoadByKey(item.CellFlagID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CellFlagID {
			get { return GetColumnValue<string>(Columns.CellFlagID); }
			set {
				SetColumnValue(Columns.CellFlagID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellFlagID));
			}
		}
		[DataMember]
		public byte? CsNoLength {
			get { return GetColumnValue<byte?>(Columns.CsNoLength); }
			set {
				SetColumnValue(Columns.CsNoLength, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CsNoLength));
			}
		}
		[DataMember]
		public string CmPurchase {
			get { return GetColumnValue<string>(Columns.CmPurchase); }
			set {
				SetColumnValue(Columns.CmPurchase, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CmPurchase));
			}
		}
		[DataMember]
		public int? ServCoNO {
			get { return GetColumnValue<int?>(Columns.ServCoNO); }
			set {
				SetColumnValue(Columns.ServCoNO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServCoNO));
			}
		}
		[DataMember]
		public string CellProvider {
			get { return GetColumnValue<string>(Columns.CellProvider); }
			set {
				SetColumnValue(Columns.CellProvider, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellProvider));
			}
		}
		[DataMember]
		public string SystemTypeId {
			get { return GetColumnValue<string>(Columns.SystemTypeId); }
			set {
				SetColumnValue(Columns.SystemTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemTypeId));
			}
		}
		[DataMember]
		public short? CoNo {
			get { return GetColumnValue<short?>(Columns.CoNo); }
			set {
				SetColumnValue(Columns.CoNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CoNo));
			}
		}
		[DataMember]
		public string BrandedFlag {
			get { return GetColumnValue<string>(Columns.BrandedFlag); }
			set {
				SetColumnValue(Columns.BrandedFlag, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BrandedFlag));
			}
		}
		[DataMember]
		public string ReceiverPhone {
			get { return GetColumnValue<string>(Columns.ReceiverPhone); }
			set {
				SetColumnValue(Columns.ReceiverPhone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverPhone));
			}
		}
		[DataMember]
		public string AlarmNetCityCs {
			get { return GetColumnValue<string>(Columns.AlarmNetCityCs); }
			set {
				SetColumnValue(Columns.AlarmNetCityCs, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AlarmNetCityCs));
			}
		}
		[DataMember]
		public bool? IsActive {
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool? IsDeleted {
			get { return GetColumnValue<bool?>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime? CreatedOn {
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime? ModifiedOn {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CellFlagID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CellFlagIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CsNoLengthColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CmPurchaseColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ServCoNOColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CellProviderColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SystemTypeIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CoNoColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn BrandedFlagColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ReceiverPhoneColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AlarmNetCityCsColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CellFlagID = @"CellFlagID";
			public static readonly string CsNoLength = @"CsNoLength";
			public static readonly string CmPurchase = @"CmPurchase";
			public static readonly string ServCoNO = @"ServCoNO";
			public static readonly string CellProvider = @"CellProvider";
			public static readonly string SystemTypeId = @"SystemTypeId";
			public static readonly string CoNo = @"CoNo";
			public static readonly string BrandedFlag = @"BrandedFlag";
			public static readonly string ReceiverPhone = @"ReceiverPhone";
			public static readonly string AlarmNetCityCs = @"AlarmNetCityCs";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CellFlagID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityRelation class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityRelationCollection : ActiveList<MS_MonitronicsEntityRelation, MS_MonitronicsEntityRelationCollection>
	{
		public static MS_MonitronicsEntityRelationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityRelationCollection result = new MS_MonitronicsEntityRelationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityRelation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityRelations table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityRelation : ActiveRecord<MS_MonitronicsEntityRelation>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string DealerID = "DLR ";
			[EnumMember()] public const string EmployeeID = "EMP ";
			[EnumMember()] public const string FriendXID = "FRND";
			[EnumMember()] public const string Janitorial__HousekeepingID = "JAN ";
			[EnumMember()] public const string ManagerID = "MGR ";
			[EnumMember()] public const string MaintenanceID = "MNT ";
			[EnumMember()] public const string NeighborID = "NGH ";
			[EnumMember()] public const string OwnerID = "OWN ";
			[EnumMember()] public const string RelativeID = "REL ";
			[EnumMember()] public const string ResidentID = "RES ";
			[EnumMember()] public const string On_Site_SecurityID = "SEC ";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityRelation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityRelations", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRelationID = new TableSchema.TableColumn(schema);
				colvarRelationID.ColumnName = "RelationID";
				colvarRelationID.DataType = DbType.AnsiString;
				colvarRelationID.MaxLength = 50;
				colvarRelationID.AutoIncrement = false;
				colvarRelationID.IsNullable = false;
				colvarRelationID.IsPrimaryKey = true;
				colvarRelationID.IsForeignKey = false;
				colvarRelationID.IsReadOnly = false;
				colvarRelationID.DefaultSetting = @"";
				colvarRelationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRelationID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityRelations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityRelation LoadFrom(MS_MonitronicsEntityRelation item)
		{
			MS_MonitronicsEntityRelation result = new MS_MonitronicsEntityRelation();
			if (item.RelationID != default(string)) {
				result.LoadByKey(item.RelationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string RelationID {
			get { return GetColumnValue<string>(Columns.RelationID); }
			set {
				SetColumnValue(Columns.RelationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RelationID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn RelationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RelationID = @"RelationID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RelationID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntitySecGroup class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySecGroupCollection : ActiveList<MS_MonitronicsEntitySecGroup, MS_MonitronicsEntitySecGroupCollection>
	{
		public static MS_MonitronicsEntitySecGroupCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntitySecGroupCollection result = new MS_MonitronicsEntitySecGroupCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntitySecGroup item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntitySecGroups table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySecGroup : ActiveRecord<MS_MonitronicsEntitySecGroup>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntitySecGroup()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntitySecGroups", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSecurityGroupID = new TableSchema.TableColumn(schema);
				colvarSecurityGroupID.ColumnName = "SecurityGroupID";
				colvarSecurityGroupID.DataType = DbType.AnsiString;
				colvarSecurityGroupID.MaxLength = 50;
				colvarSecurityGroupID.AutoIncrement = false;
				colvarSecurityGroupID.IsNullable = false;
				colvarSecurityGroupID.IsPrimaryKey = true;
				colvarSecurityGroupID.IsForeignKey = false;
				colvarSecurityGroupID.IsReadOnly = false;
				colvarSecurityGroupID.DefaultSetting = @"";
				colvarSecurityGroupID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSecurityGroupID);

				TableSchema.TableColumn colvarSecurityLevel = new TableSchema.TableColumn(schema);
				colvarSecurityLevel.ColumnName = "SecurityLevel";
				colvarSecurityLevel.DataType = DbType.AnsiString;
				colvarSecurityLevel.MaxLength = 50;
				colvarSecurityLevel.AutoIncrement = false;
				colvarSecurityLevel.IsNullable = false;
				colvarSecurityLevel.IsPrimaryKey = false;
				colvarSecurityLevel.IsForeignKey = false;
				colvarSecurityLevel.IsReadOnly = false;
				colvarSecurityLevel.DefaultSetting = @"";
				colvarSecurityLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSecurityLevel);

				TableSchema.TableColumn colvarAllUsers = new TableSchema.TableColumn(schema);
				colvarAllUsers.ColumnName = "AllUsers";
				colvarAllUsers.DataType = DbType.AnsiString;
				colvarAllUsers.MaxLength = 50;
				colvarAllUsers.AutoIncrement = false;
				colvarAllUsers.IsNullable = false;
				colvarAllUsers.IsPrimaryKey = false;
				colvarAllUsers.IsForeignKey = false;
				colvarAllUsers.IsReadOnly = false;
				colvarAllUsers.DefaultSetting = @"";
				colvarAllUsers.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllUsers);

				TableSchema.TableColumn colvarAllAccounts = new TableSchema.TableColumn(schema);
				colvarAllAccounts.ColumnName = "AllAccounts";
				colvarAllAccounts.DataType = DbType.AnsiString;
				colvarAllAccounts.MaxLength = 50;
				colvarAllAccounts.AutoIncrement = false;
				colvarAllAccounts.IsNullable = false;
				colvarAllAccounts.IsPrimaryKey = false;
				colvarAllAccounts.IsForeignKey = false;
				colvarAllAccounts.IsReadOnly = false;
				colvarAllAccounts.DefaultSetting = @"";
				colvarAllAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllAccounts);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntitySecGroups",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntitySecGroup LoadFrom(MS_MonitronicsEntitySecGroup item)
		{
			MS_MonitronicsEntitySecGroup result = new MS_MonitronicsEntitySecGroup();
			if (item.SecurityGroupID != default(string)) {
				result.LoadByKey(item.SecurityGroupID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string SecurityGroupID {
			get { return GetColumnValue<string>(Columns.SecurityGroupID); }
			set {
				SetColumnValue(Columns.SecurityGroupID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SecurityGroupID));
			}
		}
		[DataMember]
		public string SecurityLevel {
			get { return GetColumnValue<string>(Columns.SecurityLevel); }
			set {
				SetColumnValue(Columns.SecurityLevel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SecurityLevel));
			}
		}
		[DataMember]
		public string AllUsers {
			get { return GetColumnValue<string>(Columns.AllUsers); }
			set {
				SetColumnValue(Columns.AllUsers, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AllUsers));
			}
		}
		[DataMember]
		public string AllAccounts {
			get { return GetColumnValue<string>(Columns.AllAccounts); }
			set {
				SetColumnValue(Columns.AllAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AllAccounts));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return SecurityLevel;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SecurityGroupIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SecurityLevelColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AllUsersColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AllAccountsColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SecurityGroupID = @"SecurityGroupID";
			public static readonly string SecurityLevel = @"SecurityLevel";
			public static readonly string AllUsers = @"AllUsers";
			public static readonly string AllAccounts = @"AllAccounts";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SecurityGroupID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityServiceCompany class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityServiceCompanyCollection : ActiveList<MS_MonitronicsEntityServiceCompany, MS_MonitronicsEntityServiceCompanyCollection>
	{
		public static MS_MonitronicsEntityServiceCompanyCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityServiceCompanyCollection result = new MS_MonitronicsEntityServiceCompanyCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityServiceCompany item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityServiceCompanies table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityServiceCompany : ActiveRecord<MS_MonitronicsEntityServiceCompany>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityServiceCompany()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityServiceCompanies", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarServCoNumberID = new TableSchema.TableColumn(schema);
				colvarServCoNumberID.ColumnName = "ServCoNumberID";
				colvarServCoNumberID.DataType = DbType.AnsiString;
				colvarServCoNumberID.MaxLength = 50;
				colvarServCoNumberID.AutoIncrement = false;
				colvarServCoNumberID.IsNullable = false;
				colvarServCoNumberID.IsPrimaryKey = true;
				colvarServCoNumberID.IsForeignKey = false;
				colvarServCoNumberID.IsReadOnly = false;
				colvarServCoNumberID.DefaultSetting = @"";
				colvarServCoNumberID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServCoNumberID);

				TableSchema.TableColumn colvarServCoName = new TableSchema.TableColumn(schema);
				colvarServCoName.ColumnName = "ServCoName";
				colvarServCoName.DataType = DbType.AnsiString;
				colvarServCoName.MaxLength = 50;
				colvarServCoName.AutoIncrement = false;
				colvarServCoName.IsNullable = false;
				colvarServCoName.IsPrimaryKey = false;
				colvarServCoName.IsForeignKey = false;
				colvarServCoName.IsReadOnly = false;
				colvarServCoName.DefaultSetting = @"";
				colvarServCoName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServCoName);

				TableSchema.TableColumn colvarServCoAddress1 = new TableSchema.TableColumn(schema);
				colvarServCoAddress1.ColumnName = "ServCoAddress1";
				colvarServCoAddress1.DataType = DbType.AnsiString;
				colvarServCoAddress1.MaxLength = 50;
				colvarServCoAddress1.AutoIncrement = false;
				colvarServCoAddress1.IsNullable = false;
				colvarServCoAddress1.IsPrimaryKey = false;
				colvarServCoAddress1.IsForeignKey = false;
				colvarServCoAddress1.IsReadOnly = false;
				colvarServCoAddress1.DefaultSetting = @"";
				colvarServCoAddress1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServCoAddress1);

				TableSchema.TableColumn colvarServCoAddress2 = new TableSchema.TableColumn(schema);
				colvarServCoAddress2.ColumnName = "ServCoAddress2";
				colvarServCoAddress2.DataType = DbType.AnsiString;
				colvarServCoAddress2.MaxLength = 50;
				colvarServCoAddress2.AutoIncrement = false;
				colvarServCoAddress2.IsNullable = false;
				colvarServCoAddress2.IsPrimaryKey = false;
				colvarServCoAddress2.IsForeignKey = false;
				colvarServCoAddress2.IsReadOnly = false;
				colvarServCoAddress2.DefaultSetting = @"";
				colvarServCoAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServCoAddress2);

				TableSchema.TableColumn colvarCityName = new TableSchema.TableColumn(schema);
				colvarCityName.ColumnName = "CityName";
				colvarCityName.DataType = DbType.AnsiString;
				colvarCityName.MaxLength = 50;
				colvarCityName.AutoIncrement = false;
				colvarCityName.IsNullable = false;
				colvarCityName.IsPrimaryKey = false;
				colvarCityName.IsForeignKey = false;
				colvarCityName.IsReadOnly = false;
				colvarCityName.DefaultSetting = @"";
				colvarCityName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCityName);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 50;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = false;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.AnsiString;
				colvarZipCode.MaxLength = 50;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = false;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarPhone1 = new TableSchema.TableColumn(schema);
				colvarPhone1.ColumnName = "Phone1";
				colvarPhone1.DataType = DbType.AnsiString;
				colvarPhone1.MaxLength = 50;
				colvarPhone1.AutoIncrement = false;
				colvarPhone1.IsNullable = false;
				colvarPhone1.IsPrimaryKey = false;
				colvarPhone1.IsForeignKey = false;
				colvarPhone1.IsReadOnly = false;
				colvarPhone1.DefaultSetting = @"";
				colvarPhone1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone1);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityServiceCompanies",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityServiceCompany LoadFrom(MS_MonitronicsEntityServiceCompany item)
		{
			MS_MonitronicsEntityServiceCompany result = new MS_MonitronicsEntityServiceCompany();
			if (item.ServCoNumberID != default(string)) {
				result.LoadByKey(item.ServCoNumberID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ServCoNumberID {
			get { return GetColumnValue<string>(Columns.ServCoNumberID); }
			set {
				SetColumnValue(Columns.ServCoNumberID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServCoNumberID));
			}
		}
		[DataMember]
		public string ServCoName {
			get { return GetColumnValue<string>(Columns.ServCoName); }
			set {
				SetColumnValue(Columns.ServCoName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServCoName));
			}
		}
		[DataMember]
		public string ServCoAddress1 {
			get { return GetColumnValue<string>(Columns.ServCoAddress1); }
			set {
				SetColumnValue(Columns.ServCoAddress1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServCoAddress1));
			}
		}
		[DataMember]
		public string ServCoAddress2 {
			get { return GetColumnValue<string>(Columns.ServCoAddress2); }
			set {
				SetColumnValue(Columns.ServCoAddress2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServCoAddress2));
			}
		}
		[DataMember]
		public string CityName {
			get { return GetColumnValue<string>(Columns.CityName); }
			set {
				SetColumnValue(Columns.CityName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CityName));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set {
				SetColumnValue(Columns.ZipCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZipCode));
			}
		}
		[DataMember]
		public string Phone1 {
			get { return GetColumnValue<string>(Columns.Phone1); }
			set {
				SetColumnValue(Columns.Phone1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone1));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ServCoName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ServCoNumberIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ServCoNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ServCoAddress1Column
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ServCoAddress2Column
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CityNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn Phone1Column
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ServCoNumberID = @"ServCoNumberID";
			public static readonly string ServCoName = @"ServCoName";
			public static readonly string ServCoAddress1 = @"ServCoAddress1";
			public static readonly string ServCoAddress2 = @"ServCoAddress2";
			public static readonly string CityName = @"CityName";
			public static readonly string StateId = @"StateId";
			public static readonly string ZipCode = @"ZipCode";
			public static readonly string Phone1 = @"Phone1";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ServCoNumberID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntitySiteOption class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySiteOptionCollection : ActiveList<MS_MonitronicsEntitySiteOption, MS_MonitronicsEntitySiteOptionCollection>
	{
		public static MS_MonitronicsEntitySiteOptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntitySiteOptionCollection result = new MS_MonitronicsEntitySiteOptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntitySiteOption item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntitySiteOptions table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySiteOption : ActiveRecord<MS_MonitronicsEntitySiteOption>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntitySiteOption()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntitySiteOptions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCsNumber = new TableSchema.TableColumn(schema);
				colvarCsNumber.ColumnName = "CsNumber";
				colvarCsNumber.DataType = DbType.AnsiString;
				colvarCsNumber.MaxLength = 50;
				colvarCsNumber.AutoIncrement = false;
				colvarCsNumber.IsNullable = false;
				colvarCsNumber.IsPrimaryKey = true;
				colvarCsNumber.IsForeignKey = false;
				colvarCsNumber.IsReadOnly = false;
				colvarCsNumber.DefaultSetting = @"";
				colvarCsNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsNumber);

				TableSchema.TableColumn colvarOptionId = new TableSchema.TableColumn(schema);
				colvarOptionId.ColumnName = "OptionId";
				colvarOptionId.DataType = DbType.AnsiString;
				colvarOptionId.MaxLength = 50;
				colvarOptionId.AutoIncrement = false;
				colvarOptionId.IsNullable = false;
				colvarOptionId.IsPrimaryKey = false;
				colvarOptionId.IsForeignKey = false;
				colvarOptionId.IsReadOnly = false;
				colvarOptionId.DefaultSetting = @"";
				colvarOptionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOptionId);

				TableSchema.TableColumn colvarOptionValue = new TableSchema.TableColumn(schema);
				colvarOptionValue.ColumnName = "OptionValue";
				colvarOptionValue.DataType = DbType.AnsiString;
				colvarOptionValue.MaxLength = 50;
				colvarOptionValue.AutoIncrement = false;
				colvarOptionValue.IsNullable = false;
				colvarOptionValue.IsPrimaryKey = false;
				colvarOptionValue.IsForeignKey = false;
				colvarOptionValue.IsReadOnly = false;
				colvarOptionValue.DefaultSetting = @"";
				colvarOptionValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOptionValue);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntitySiteOptions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntitySiteOption LoadFrom(MS_MonitronicsEntitySiteOption item)
		{
			MS_MonitronicsEntitySiteOption result = new MS_MonitronicsEntitySiteOption();
			if (item.CsNumber != default(string)) {
				result.LoadByKey(item.CsNumber);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CsNumber {
			get { return GetColumnValue<string>(Columns.CsNumber); }
			set {
				SetColumnValue(Columns.CsNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CsNumber));
			}
		}
		[DataMember]
		public string OptionId {
			get { return GetColumnValue<string>(Columns.OptionId); }
			set {
				SetColumnValue(Columns.OptionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OptionId));
			}
		}
		[DataMember]
		public string OptionValue {
			get { return GetColumnValue<string>(Columns.OptionValue); }
			set {
				SetColumnValue(Columns.OptionValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OptionValue));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return OptionId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CsNumberColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn OptionIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn OptionValueColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CsNumber = @"CsNumber";
			public static readonly string OptionId = @"OptionId";
			public static readonly string OptionValue = @"OptionValue";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CsNumber; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntitySiteStat class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySiteStatCollection : ActiveList<MS_MonitronicsEntitySiteStat, MS_MonitronicsEntitySiteStatCollection>
	{
		public static MS_MonitronicsEntitySiteStatCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntitySiteStatCollection result = new MS_MonitronicsEntitySiteStatCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntitySiteStat item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntitySiteStats table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySiteStat : ActiveRecord<MS_MonitronicsEntitySiteStat>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntitySiteStat()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntitySiteStats", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSiteStatID = new TableSchema.TableColumn(schema);
				colvarSiteStatID.ColumnName = "SiteStatID";
				colvarSiteStatID.DataType = DbType.AnsiString;
				colvarSiteStatID.MaxLength = 5;
				colvarSiteStatID.AutoIncrement = false;
				colvarSiteStatID.IsNullable = false;
				colvarSiteStatID.IsPrimaryKey = true;
				colvarSiteStatID.IsForeignKey = false;
				colvarSiteStatID.IsReadOnly = false;
				colvarSiteStatID.DefaultSetting = @"";
				colvarSiteStatID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteStatID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntitySiteStats",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntitySiteStat LoadFrom(MS_MonitronicsEntitySiteStat item)
		{
			MS_MonitronicsEntitySiteStat result = new MS_MonitronicsEntitySiteStat();
			if (item.SiteStatID != default(string)) {
				result.LoadByKey(item.SiteStatID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string SiteStatID {
			get { return GetColumnValue<string>(Columns.SiteStatID); }
			set {
				SetColumnValue(Columns.SiteStatID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteStatID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SiteStatIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SiteStatID = @"SiteStatID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SiteStatID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntitySiteSystemOption class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySiteSystemOptionCollection : ActiveList<MS_MonitronicsEntitySiteSystemOption, MS_MonitronicsEntitySiteSystemOptionCollection>
	{
		public static MS_MonitronicsEntitySiteSystemOptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntitySiteSystemOptionCollection result = new MS_MonitronicsEntitySiteSystemOptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntitySiteSystemOption item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntitySiteSystemOptions table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySiteSystemOption : ActiveRecord<MS_MonitronicsEntitySiteSystemOption>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntitySiteSystemOption()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntitySiteSystemOptions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCsNumberID = new TableSchema.TableColumn(schema);
				colvarCsNumberID.ColumnName = "CsNumberID";
				colvarCsNumberID.DataType = DbType.AnsiString;
				colvarCsNumberID.MaxLength = 50;
				colvarCsNumberID.AutoIncrement = false;
				colvarCsNumberID.IsNullable = false;
				colvarCsNumberID.IsPrimaryKey = true;
				colvarCsNumberID.IsForeignKey = false;
				colvarCsNumberID.IsReadOnly = false;
				colvarCsNumberID.DefaultSetting = @"";
				colvarCsNumberID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsNumberID);

				TableSchema.TableColumn colvarOptionId = new TableSchema.TableColumn(schema);
				colvarOptionId.ColumnName = "OptionId";
				colvarOptionId.DataType = DbType.AnsiString;
				colvarOptionId.MaxLength = 50;
				colvarOptionId.AutoIncrement = false;
				colvarOptionId.IsNullable = false;
				colvarOptionId.IsPrimaryKey = false;
				colvarOptionId.IsForeignKey = false;
				colvarOptionId.IsReadOnly = false;
				colvarOptionId.DefaultSetting = @"";
				colvarOptionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOptionId);

				TableSchema.TableColumn colvarOptionValue = new TableSchema.TableColumn(schema);
				colvarOptionValue.ColumnName = "OptionValue";
				colvarOptionValue.DataType = DbType.AnsiString;
				colvarOptionValue.MaxLength = 50;
				colvarOptionValue.AutoIncrement = false;
				colvarOptionValue.IsNullable = false;
				colvarOptionValue.IsPrimaryKey = false;
				colvarOptionValue.IsForeignKey = false;
				colvarOptionValue.IsReadOnly = false;
				colvarOptionValue.DefaultSetting = @"";
				colvarOptionValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOptionValue);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntitySiteSystemOptions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntitySiteSystemOption LoadFrom(MS_MonitronicsEntitySiteSystemOption item)
		{
			MS_MonitronicsEntitySiteSystemOption result = new MS_MonitronicsEntitySiteSystemOption();
			if (item.CsNumberID != default(string)) {
				result.LoadByKey(item.CsNumberID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CsNumberID {
			get { return GetColumnValue<string>(Columns.CsNumberID); }
			set {
				SetColumnValue(Columns.CsNumberID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CsNumberID));
			}
		}
		[DataMember]
		public string OptionId {
			get { return GetColumnValue<string>(Columns.OptionId); }
			set {
				SetColumnValue(Columns.OptionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OptionId));
			}
		}
		[DataMember]
		public string OptionValue {
			get { return GetColumnValue<string>(Columns.OptionValue); }
			set {
				SetColumnValue(Columns.OptionValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OptionValue));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return OptionId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CsNumberIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn OptionIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn OptionValueColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CsNumberID = @"CsNumberID";
			public static readonly string OptionId = @"OptionId";
			public static readonly string OptionValue = @"OptionValue";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CsNumberID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntitySiteType class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySiteTypeCollection : ActiveList<MS_MonitronicsEntitySiteType, MS_MonitronicsEntitySiteTypeCollection>
	{
		public static MS_MonitronicsEntitySiteTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntitySiteTypeCollection result = new MS_MonitronicsEntitySiteTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntitySiteType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntitySiteTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySiteType : ActiveRecord<MS_MonitronicsEntitySiteType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntitySiteType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntitySiteTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSiteTypeID = new TableSchema.TableColumn(schema);
				colvarSiteTypeID.ColumnName = "SiteTypeID";
				colvarSiteTypeID.DataType = DbType.AnsiString;
				colvarSiteTypeID.MaxLength = 50;
				colvarSiteTypeID.AutoIncrement = false;
				colvarSiteTypeID.IsNullable = false;
				colvarSiteTypeID.IsPrimaryKey = true;
				colvarSiteTypeID.IsForeignKey = false;
				colvarSiteTypeID.IsReadOnly = false;
				colvarSiteTypeID.DefaultSetting = @"";
				colvarSiteTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarSiteKind = new TableSchema.TableColumn(schema);
				colvarSiteKind.ColumnName = "SiteKind";
				colvarSiteKind.DataType = DbType.AnsiString;
				colvarSiteKind.MaxLength = 50;
				colvarSiteKind.AutoIncrement = false;
				colvarSiteKind.IsNullable = true;
				colvarSiteKind.IsPrimaryKey = false;
				colvarSiteKind.IsForeignKey = false;
				colvarSiteKind.IsReadOnly = false;
				colvarSiteKind.DefaultSetting = @"";
				colvarSiteKind.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteKind);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = true;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = true;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntitySiteTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntitySiteType LoadFrom(MS_MonitronicsEntitySiteType item)
		{
			MS_MonitronicsEntitySiteType result = new MS_MonitronicsEntitySiteType();
			if (item.SiteTypeID != default(string)) {
				result.LoadByKey(item.SiteTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string SiteTypeID {
			get { return GetColumnValue<string>(Columns.SiteTypeID); }
			set {
				SetColumnValue(Columns.SiteTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string SiteKind {
			get { return GetColumnValue<string>(Columns.SiteKind); }
			set {
				SetColumnValue(Columns.SiteKind, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteKind));
			}
		}
		[DataMember]
		public bool? IsActive {
			get { return GetColumnValue<bool?>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool? IsDeleted {
			get { return GetColumnValue<bool?>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime? CreatedOn {
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime? ModifiedOn {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SiteTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SiteKindColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SiteTypeID = @"SiteTypeID";
			public static readonly string Description = @"Description";
			public static readonly string SiteKind = @"SiteKind";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SiteTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityState class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityStateCollection : ActiveList<MS_MonitronicsEntityState, MS_MonitronicsEntityStateCollection>
	{
		public static MS_MonitronicsEntityStateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityStateCollection result = new MS_MonitronicsEntityStateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityState item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityStates table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityState : ActiveRecord<MS_MonitronicsEntityState>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityState()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityStates", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarStateID = new TableSchema.TableColumn(schema);
				colvarStateID.ColumnName = "StateID";
				colvarStateID.DataType = DbType.AnsiString;
				colvarStateID.MaxLength = 50;
				colvarStateID.AutoIncrement = false;
				colvarStateID.IsNullable = false;
				colvarStateID.IsPrimaryKey = true;
				colvarStateID.IsForeignKey = false;
				colvarStateID.IsReadOnly = false;
				colvarStateID.DefaultSetting = @"";
				colvarStateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateID);

				TableSchema.TableColumn colvarStateName = new TableSchema.TableColumn(schema);
				colvarStateName.ColumnName = "StateName";
				colvarStateName.DataType = DbType.AnsiString;
				colvarStateName.MaxLength = 50;
				colvarStateName.AutoIncrement = false;
				colvarStateName.IsNullable = false;
				colvarStateName.IsPrimaryKey = false;
				colvarStateName.IsForeignKey = false;
				colvarStateName.IsReadOnly = false;
				colvarStateName.DefaultSetting = @"";
				colvarStateName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityStates",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityState LoadFrom(MS_MonitronicsEntityState item)
		{
			MS_MonitronicsEntityState result = new MS_MonitronicsEntityState();
			if (item.StateID != default(string)) {
				result.LoadByKey(item.StateID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string StateID {
			get { return GetColumnValue<string>(Columns.StateID); }
			set {
				SetColumnValue(Columns.StateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateID));
			}
		}
		[DataMember]
		public string StateName {
			get { return GetColumnValue<string>(Columns.StateName); }
			set {
				SetColumnValue(Columns.StateName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return StateName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn StateIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StateNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string StateID = @"StateID";
			public static readonly string StateName = @"StateName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return StateID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntitySystemType class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySystemTypeCollection : ActiveList<MS_MonitronicsEntitySystemType, MS_MonitronicsEntitySystemTypeCollection>
	{
		public static MS_MonitronicsEntitySystemTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntitySystemTypeCollection result = new MS_MonitronicsEntitySystemTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntitySystemType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntitySystemTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySystemType : ActiveRecord<MS_MonitronicsEntitySystemType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntitySystemType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntitySystemTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSystemTypeID = new TableSchema.TableColumn(schema);
				colvarSystemTypeID.ColumnName = "SystemTypeID";
				colvarSystemTypeID.DataType = DbType.AnsiString;
				colvarSystemTypeID.MaxLength = 50;
				colvarSystemTypeID.AutoIncrement = false;
				colvarSystemTypeID.IsNullable = false;
				colvarSystemTypeID.IsPrimaryKey = true;
				colvarSystemTypeID.IsForeignKey = false;
				colvarSystemTypeID.IsReadOnly = false;
				colvarSystemTypeID.DefaultSetting = @"";
				colvarSystemTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntitySystemTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntitySystemType LoadFrom(MS_MonitronicsEntitySystemType item)
		{
			MS_MonitronicsEntitySystemType result = new MS_MonitronicsEntitySystemType();
			if (item.SystemTypeID != default(string)) {
				result.LoadByKey(item.SystemTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string SystemTypeID {
			get { return GetColumnValue<string>(Columns.SystemTypeID); }
			set {
				SetColumnValue(Columns.SystemTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SystemTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SystemTypeID = @"SystemTypeID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SystemTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntitySystemTypeXRef class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySystemTypeXRefCollection : ActiveList<MS_MonitronicsEntitySystemTypeXRef, MS_MonitronicsEntitySystemTypeXRefCollection>
	{
		public static MS_MonitronicsEntitySystemTypeXRefCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntitySystemTypeXRefCollection result = new MS_MonitronicsEntitySystemTypeXRefCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntitySystemTypeXRef item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntitySystemTypeXRef table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntitySystemTypeXRef : ActiveRecord<MS_MonitronicsEntitySystemTypeXRef>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntitySystemTypeXRef()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntitySystemTypeXRef", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSystemTypeXRefID = new TableSchema.TableColumn(schema);
				colvarSystemTypeXRefID.ColumnName = "SystemTypeXRefID";
				colvarSystemTypeXRefID.DataType = DbType.Int32;
				colvarSystemTypeXRefID.MaxLength = 0;
				colvarSystemTypeXRefID.AutoIncrement = true;
				colvarSystemTypeXRefID.IsNullable = false;
				colvarSystemTypeXRefID.IsPrimaryKey = true;
				colvarSystemTypeXRefID.IsForeignKey = false;
				colvarSystemTypeXRefID.IsReadOnly = false;
				colvarSystemTypeXRefID.DefaultSetting = @"";
				colvarSystemTypeXRefID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSystemTypeXRefID);

				TableSchema.TableColumn colvarDigitalSystemTypeId = new TableSchema.TableColumn(schema);
				colvarDigitalSystemTypeId.ColumnName = "DigitalSystemTypeId";
				colvarDigitalSystemTypeId.DataType = DbType.AnsiString;
				colvarDigitalSystemTypeId.MaxLength = 50;
				colvarDigitalSystemTypeId.AutoIncrement = false;
				colvarDigitalSystemTypeId.IsNullable = false;
				colvarDigitalSystemTypeId.IsPrimaryKey = false;
				colvarDigitalSystemTypeId.IsForeignKey = false;
				colvarDigitalSystemTypeId.IsReadOnly = false;
				colvarDigitalSystemTypeId.DefaultSetting = @"";
				colvarDigitalSystemTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDigitalSystemTypeId);

				TableSchema.TableColumn colvarTwoWayDeviceId = new TableSchema.TableColumn(schema);
				colvarTwoWayDeviceId.ColumnName = "TwoWayDeviceId";
				colvarTwoWayDeviceId.DataType = DbType.AnsiString;
				colvarTwoWayDeviceId.MaxLength = 50;
				colvarTwoWayDeviceId.AutoIncrement = false;
				colvarTwoWayDeviceId.IsNullable = true;
				colvarTwoWayDeviceId.IsPrimaryKey = false;
				colvarTwoWayDeviceId.IsForeignKey = false;
				colvarTwoWayDeviceId.IsReadOnly = false;
				colvarTwoWayDeviceId.DefaultSetting = @"";
				colvarTwoWayDeviceId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTwoWayDeviceId);

				TableSchema.TableColumn colvarCellSystemTypeId = new TableSchema.TableColumn(schema);
				colvarCellSystemTypeId.ColumnName = "CellSystemTypeId";
				colvarCellSystemTypeId.DataType = DbType.AnsiString;
				colvarCellSystemTypeId.MaxLength = 50;
				colvarCellSystemTypeId.AutoIncrement = false;
				colvarCellSystemTypeId.IsNullable = false;
				colvarCellSystemTypeId.IsPrimaryKey = false;
				colvarCellSystemTypeId.IsForeignKey = false;
				colvarCellSystemTypeId.IsReadOnly = false;
				colvarCellSystemTypeId.DefaultSetting = @"";
				colvarCellSystemTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellSystemTypeId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntitySystemTypeXRef",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntitySystemTypeXRef LoadFrom(MS_MonitronicsEntitySystemTypeXRef item)
		{
			MS_MonitronicsEntitySystemTypeXRef result = new MS_MonitronicsEntitySystemTypeXRef();
			if (item.SystemTypeXRefID != default(int)) {
				result.LoadByKey(item.SystemTypeXRefID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SystemTypeXRefID {
			get { return GetColumnValue<int>(Columns.SystemTypeXRefID); }
			set {
				SetColumnValue(Columns.SystemTypeXRefID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SystemTypeXRefID));
			}
		}
		[DataMember]
		public string DigitalSystemTypeId {
			get { return GetColumnValue<string>(Columns.DigitalSystemTypeId); }
			set {
				SetColumnValue(Columns.DigitalSystemTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DigitalSystemTypeId));
			}
		}
		[DataMember]
		public string TwoWayDeviceId {
			get { return GetColumnValue<string>(Columns.TwoWayDeviceId); }
			set {
				SetColumnValue(Columns.TwoWayDeviceId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TwoWayDeviceId));
			}
		}
		[DataMember]
		public string CellSystemTypeId {
			get { return GetColumnValue<string>(Columns.CellSystemTypeId); }
			set {
				SetColumnValue(Columns.CellSystemTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellSystemTypeId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return DigitalSystemTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SystemTypeXRefIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DigitalSystemTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TwoWayDeviceIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CellSystemTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SystemTypeXRefID = @"SystemTypeXRefID";
			public static readonly string DigitalSystemTypeId = @"DigitalSystemTypeId";
			public static readonly string TwoWayDeviceId = @"TwoWayDeviceId";
			public static readonly string CellSystemTypeId = @"CellSystemTypeId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SystemTypeXRefID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityTestCat class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityTestCatCollection : ActiveList<MS_MonitronicsEntityTestCat, MS_MonitronicsEntityTestCatCollection>
	{
		public static MS_MonitronicsEntityTestCatCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityTestCatCollection result = new MS_MonitronicsEntityTestCatCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityTestCat item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityTestCats table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityTestCat : ActiveRecord<MS_MonitronicsEntityTestCat>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityTestCat()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityTestCats", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTestCatID = new TableSchema.TableColumn(schema);
				colvarTestCatID.ColumnName = "TestCatID";
				colvarTestCatID.DataType = DbType.AnsiString;
				colvarTestCatID.MaxLength = 50;
				colvarTestCatID.AutoIncrement = false;
				colvarTestCatID.IsNullable = false;
				colvarTestCatID.IsPrimaryKey = true;
				colvarTestCatID.IsForeignKey = false;
				colvarTestCatID.IsReadOnly = false;
				colvarTestCatID.DefaultSetting = @"";
				colvarTestCatID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTestCatID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarDefaultHours = new TableSchema.TableColumn(schema);
				colvarDefaultHours.ColumnName = "DefaultHours";
				colvarDefaultHours.DataType = DbType.Int16;
				colvarDefaultHours.MaxLength = 0;
				colvarDefaultHours.AutoIncrement = false;
				colvarDefaultHours.IsNullable = false;
				colvarDefaultHours.IsPrimaryKey = false;
				colvarDefaultHours.IsForeignKey = false;
				colvarDefaultHours.IsReadOnly = false;
				colvarDefaultHours.DefaultSetting = @"";
				colvarDefaultHours.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultHours);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarisDeleted = new TableSchema.TableColumn(schema);
				colvarisDeleted.ColumnName = "isDeleted";
				colvarisDeleted.DataType = DbType.Boolean;
				colvarisDeleted.MaxLength = 0;
				colvarisDeleted.AutoIncrement = false;
				colvarisDeleted.IsNullable = false;
				colvarisDeleted.IsPrimaryKey = false;
				colvarisDeleted.IsForeignKey = false;
				colvarisDeleted.IsReadOnly = false;
				colvarisDeleted.DefaultSetting = @"((0))";
				colvarisDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarisDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityTestCats",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityTestCat LoadFrom(MS_MonitronicsEntityTestCat item)
		{
			MS_MonitronicsEntityTestCat result = new MS_MonitronicsEntityTestCat();
			if (item.TestCatID != default(string)) {
				result.LoadByKey(item.TestCatID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string TestCatID {
			get { return GetColumnValue<string>(Columns.TestCatID); }
			set {
				SetColumnValue(Columns.TestCatID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TestCatID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public short DefaultHours {
			get { return GetColumnValue<short>(Columns.DefaultHours); }
			set {
				SetColumnValue(Columns.DefaultHours, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultHours));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool isDeleted {
			get { return GetColumnValue<bool>(Columns.isDeleted); }
			set {
				SetColumnValue(Columns.isDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.isDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TestCatIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DefaultHoursColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn isDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TestCatID = @"TestCatID";
			public static readonly string Description = @"Description";
			public static readonly string DefaultHours = @"DefaultHours";
			public static readonly string IsActive = @"IsActive";
			public static readonly string isDeleted = @"isDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TestCatID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityTwoWay class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityTwoWayCollection : ActiveList<MS_MonitronicsEntityTwoWay, MS_MonitronicsEntityTwoWayCollection>
	{
		public static MS_MonitronicsEntityTwoWayCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityTwoWayCollection result = new MS_MonitronicsEntityTwoWayCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityTwoWay item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityTwoWays table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityTwoWay : ActiveRecord<MS_MonitronicsEntityTwoWay>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityTwoWay()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityTwoWays", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTwoWayDeviceID = new TableSchema.TableColumn(schema);
				colvarTwoWayDeviceID.ColumnName = "TwoWayDeviceID";
				colvarTwoWayDeviceID.DataType = DbType.AnsiString;
				colvarTwoWayDeviceID.MaxLength = 50;
				colvarTwoWayDeviceID.AutoIncrement = false;
				colvarTwoWayDeviceID.IsNullable = false;
				colvarTwoWayDeviceID.IsPrimaryKey = true;
				colvarTwoWayDeviceID.IsForeignKey = false;
				colvarTwoWayDeviceID.IsReadOnly = false;
				colvarTwoWayDeviceID.DefaultSetting = @"";
				colvarTwoWayDeviceID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTwoWayDeviceID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarisDeleted = new TableSchema.TableColumn(schema);
				colvarisDeleted.ColumnName = "isDeleted";
				colvarisDeleted.DataType = DbType.Boolean;
				colvarisDeleted.MaxLength = 0;
				colvarisDeleted.AutoIncrement = false;
				colvarisDeleted.IsNullable = false;
				colvarisDeleted.IsPrimaryKey = false;
				colvarisDeleted.IsForeignKey = false;
				colvarisDeleted.IsReadOnly = false;
				colvarisDeleted.DefaultSetting = @"((0))";
				colvarisDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarisDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityTwoWays",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityTwoWay LoadFrom(MS_MonitronicsEntityTwoWay item)
		{
			MS_MonitronicsEntityTwoWay result = new MS_MonitronicsEntityTwoWay();
			if (item.TwoWayDeviceID != default(string)) {
				result.LoadByKey(item.TwoWayDeviceID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string TwoWayDeviceID {
			get { return GetColumnValue<string>(Columns.TwoWayDeviceID); }
			set {
				SetColumnValue(Columns.TwoWayDeviceID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TwoWayDeviceID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool isDeleted {
			get { return GetColumnValue<bool>(Columns.isDeleted); }
			set {
				SetColumnValue(Columns.isDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.isDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TwoWayDeviceIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn isDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TwoWayDeviceID = @"TwoWayDeviceID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string isDeleted = @"isDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TwoWayDeviceID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityZip class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityZipCollection : ActiveList<MS_MonitronicsEntityZip, MS_MonitronicsEntityZipCollection>
	{
		public static MS_MonitronicsEntityZipCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityZipCollection result = new MS_MonitronicsEntityZipCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityZip item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityZips table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityZip : ActiveRecord<MS_MonitronicsEntityZip>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityZip()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityZips", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEntityZipsID = new TableSchema.TableColumn(schema);
				colvarEntityZipsID.ColumnName = "EntityZipsID";
				colvarEntityZipsID.DataType = DbType.Int32;
				colvarEntityZipsID.MaxLength = 0;
				colvarEntityZipsID.AutoIncrement = true;
				colvarEntityZipsID.IsNullable = false;
				colvarEntityZipsID.IsPrimaryKey = true;
				colvarEntityZipsID.IsForeignKey = false;
				colvarEntityZipsID.IsReadOnly = false;
				colvarEntityZipsID.DefaultSetting = @"";
				colvarEntityZipsID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntityZipsID);

				TableSchema.TableColumn colvarCityNameID = new TableSchema.TableColumn(schema);
				colvarCityNameID.ColumnName = "CityNameID";
				colvarCityNameID.DataType = DbType.AnsiString;
				colvarCityNameID.MaxLength = 50;
				colvarCityNameID.AutoIncrement = false;
				colvarCityNameID.IsNullable = false;
				colvarCityNameID.IsPrimaryKey = false;
				colvarCityNameID.IsForeignKey = false;
				colvarCityNameID.IsReadOnly = false;
				colvarCityNameID.DefaultSetting = @"";
				colvarCityNameID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCityNameID);

				TableSchema.TableColumn colvarCountyName = new TableSchema.TableColumn(schema);
				colvarCountyName.ColumnName = "CountyName";
				colvarCountyName.DataType = DbType.AnsiString;
				colvarCountyName.MaxLength = 50;
				colvarCountyName.AutoIncrement = false;
				colvarCountyName.IsNullable = false;
				colvarCountyName.IsPrimaryKey = false;
				colvarCountyName.IsForeignKey = false;
				colvarCountyName.IsReadOnly = false;
				colvarCountyName.DefaultSetting = @"";
				colvarCountyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountyName);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 50;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = false;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.AnsiString;
				colvarZipCode.MaxLength = 10;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = false;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityZips",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityZip LoadFrom(MS_MonitronicsEntityZip item)
		{
			MS_MonitronicsEntityZip result = new MS_MonitronicsEntityZip();
			if (item.EntityZipsID != default(int)) {
				result.LoadByKey(item.EntityZipsID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EntityZipsID {
			get { return GetColumnValue<int>(Columns.EntityZipsID); }
			set {
				SetColumnValue(Columns.EntityZipsID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EntityZipsID));
			}
		}
		[DataMember]
		public string CityNameID {
			get { return GetColumnValue<string>(Columns.CityNameID); }
			set {
				SetColumnValue(Columns.CityNameID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CityNameID));
			}
		}
		[DataMember]
		public string CountyName {
			get { return GetColumnValue<string>(Columns.CountyName); }
			set {
				SetColumnValue(Columns.CountyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountyName));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set {
				SetColumnValue(Columns.ZipCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZipCode));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CityNameID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn EntityZipsIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CityNameIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CountyNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EntityZipsID = @"EntityZipsID";
			public static readonly string CityNameID = @"CityNameID";
			public static readonly string CountyName = @"CountyName";
			public static readonly string StateId = @"StateId";
			public static readonly string ZipCode = @"ZipCode";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EntityZipsID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsEntityZoneState class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityZoneStateCollection : ActiveList<MS_MonitronicsEntityZoneState, MS_MonitronicsEntityZoneStateCollection>
	{
		public static MS_MonitronicsEntityZoneStateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsEntityZoneStateCollection result = new MS_MonitronicsEntityZoneStateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsEntityZoneState item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsEntityZoneStates table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsEntityZoneState : ActiveRecord<MS_MonitronicsEntityZoneState>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsEntityZoneState()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsEntityZoneStates", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarZoneStateID = new TableSchema.TableColumn(schema);
				colvarZoneStateID.ColumnName = "ZoneStateID";
				colvarZoneStateID.DataType = DbType.AnsiString;
				colvarZoneStateID.MaxLength = 50;
				colvarZoneStateID.AutoIncrement = false;
				colvarZoneStateID.IsNullable = false;
				colvarZoneStateID.IsPrimaryKey = true;
				colvarZoneStateID.IsForeignKey = false;
				colvarZoneStateID.IsReadOnly = false;
				colvarZoneStateID.DefaultSetting = @"";
				colvarZoneStateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZoneStateID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsEntityZoneStates",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsEntityZoneState LoadFrom(MS_MonitronicsEntityZoneState item)
		{
			MS_MonitronicsEntityZoneState result = new MS_MonitronicsEntityZoneState();
			if (item.ZoneStateID != default(string)) {
				result.LoadByKey(item.ZoneStateID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ZoneStateID {
			get { return GetColumnValue<string>(Columns.ZoneStateID); }
			set {
				SetColumnValue(Columns.ZoneStateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZoneStateID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ZoneStateIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ZoneStateID = @"ZoneStateID";
			public static readonly string Description = @"Description";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ZoneStateID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsSubmitsGetDataError class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsSubmitsGetDataErrorCollection : ActiveList<MS_MonitronicsSubmitsGetDataError, MS_MonitronicsSubmitsGetDataErrorCollection>
	{
		public static MS_MonitronicsSubmitsGetDataErrorCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsSubmitsGetDataErrorCollection result = new MS_MonitronicsSubmitsGetDataErrorCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsSubmitsGetDataError item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsSubmitsGetDataErrors table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsSubmitsGetDataError : ActiveRecord<MS_MonitronicsSubmitsGetDataError>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsSubmitsGetDataError()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsSubmitsGetDataErrors", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSubmitsGetDataErrorID = new TableSchema.TableColumn(schema);
				colvarSubmitsGetDataErrorID.ColumnName = "SubmitsGetDataErrorID";
				colvarSubmitsGetDataErrorID.DataType = DbType.Int64;
				colvarSubmitsGetDataErrorID.MaxLength = 0;
				colvarSubmitsGetDataErrorID.AutoIncrement = true;
				colvarSubmitsGetDataErrorID.IsNullable = false;
				colvarSubmitsGetDataErrorID.IsPrimaryKey = true;
				colvarSubmitsGetDataErrorID.IsForeignKey = false;
				colvarSubmitsGetDataErrorID.IsReadOnly = false;
				colvarSubmitsGetDataErrorID.DefaultSetting = @"";
				colvarSubmitsGetDataErrorID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubmitsGetDataErrorID);

				TableSchema.TableColumn colvarSubmitsGetDataId = new TableSchema.TableColumn(schema);
				colvarSubmitsGetDataId.ColumnName = "SubmitsGetDataId";
				colvarSubmitsGetDataId.DataType = DbType.Int64;
				colvarSubmitsGetDataId.MaxLength = 0;
				colvarSubmitsGetDataId.AutoIncrement = false;
				colvarSubmitsGetDataId.IsNullable = false;
				colvarSubmitsGetDataId.IsPrimaryKey = false;
				colvarSubmitsGetDataId.IsForeignKey = true;
				colvarSubmitsGetDataId.IsReadOnly = false;
				colvarSubmitsGetDataId.DefaultSetting = @"";
				colvarSubmitsGetDataId.ForeignKeyTableName = "MS_MonitronicsSubmitsGetDatas";
				schema.Columns.Add(colvarSubmitsGetDataId);

				TableSchema.TableColumn colvarErrMsg = new TableSchema.TableColumn(schema);
				colvarErrMsg.ColumnName = "ErrMsg";
				colvarErrMsg.DataType = DbType.AnsiString;
				colvarErrMsg.MaxLength = -1;
				colvarErrMsg.AutoIncrement = false;
				colvarErrMsg.IsNullable = false;
				colvarErrMsg.IsPrimaryKey = false;
				colvarErrMsg.IsForeignKey = false;
				colvarErrMsg.IsReadOnly = false;
				colvarErrMsg.DefaultSetting = @"";
				colvarErrMsg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrMsg);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsSubmitsGetDataErrors",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsSubmitsGetDataError LoadFrom(MS_MonitronicsSubmitsGetDataError item)
		{
			MS_MonitronicsSubmitsGetDataError result = new MS_MonitronicsSubmitsGetDataError();
			if (item.SubmitsGetDataErrorID != default(long)) {
				result.LoadByKey(item.SubmitsGetDataErrorID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long SubmitsGetDataErrorID {
			get { return GetColumnValue<long>(Columns.SubmitsGetDataErrorID); }
			set {
				SetColumnValue(Columns.SubmitsGetDataErrorID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubmitsGetDataErrorID));
			}
		}
		[DataMember]
		public long SubmitsGetDataId {
			get { return GetColumnValue<long>(Columns.SubmitsGetDataId); }
			set {
				SetColumnValue(Columns.SubmitsGetDataId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubmitsGetDataId));
			}
		}
		[DataMember]
		public string ErrMsg {
			get { return GetColumnValue<string>(Columns.ErrMsg); }
			set {
				SetColumnValue(Columns.ErrMsg, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ErrMsg));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_MonitronicsSubmitsGetData _SubmitsGetData;
		//Relationship: FK_MS_MonitronicsSubmitsGetDataErrors_MS_MonitronicsSubmitsGetDatas
		public MS_MonitronicsSubmitsGetData SubmitsGetData
		{
			get
			{
				if(_SubmitsGetData == null) {
					_SubmitsGetData = MS_MonitronicsSubmitsGetData.FetchByID(this.SubmitsGetDataId);
				}
				return _SubmitsGetData;
			}
			set
			{
				SetColumnValue("SubmitsGetDataId", value.SubmitsGetDataID);
				_SubmitsGetData = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SubmitsGetDataErrorID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SubmitsGetDataErrorIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SubmitsGetDataIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ErrMsgColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SubmitsGetDataErrorID = @"SubmitsGetDataErrorID";
			public static readonly string SubmitsGetDataId = @"SubmitsGetDataId";
			public static readonly string ErrMsg = @"ErrMsg";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SubmitsGetDataErrorID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_MonitronicsSubmitsGetData class.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsSubmitsGetDataCollection : ActiveList<MS_MonitronicsSubmitsGetData, MS_MonitronicsSubmitsGetDataCollection>
	{
		public static MS_MonitronicsSubmitsGetDataCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_MonitronicsSubmitsGetDataCollection result = new MS_MonitronicsSubmitsGetDataCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_MonitronicsSubmitsGetData item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_MonitronicsSubmitsGetDatas table.
	/// </summary>
	[DataContract]
	public partial class MS_MonitronicsSubmitsGetData : ActiveRecord<MS_MonitronicsSubmitsGetData>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_MonitronicsSubmitsGetData()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_MonitronicsSubmitsGetDatas", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSubmitsGetDataID = new TableSchema.TableColumn(schema);
				colvarSubmitsGetDataID.ColumnName = "SubmitsGetDataID";
				colvarSubmitsGetDataID.DataType = DbType.Int64;
				colvarSubmitsGetDataID.MaxLength = 0;
				colvarSubmitsGetDataID.AutoIncrement = true;
				colvarSubmitsGetDataID.IsNullable = false;
				colvarSubmitsGetDataID.IsPrimaryKey = true;
				colvarSubmitsGetDataID.IsForeignKey = false;
				colvarSubmitsGetDataID.IsReadOnly = false;
				colvarSubmitsGetDataID.DefaultSetting = @"";
				colvarSubmitsGetDataID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubmitsGetDataID);

				TableSchema.TableColumn colvarEntityId = new TableSchema.TableColumn(schema);
				colvarEntityId.ColumnName = "EntityId";
				colvarEntityId.DataType = DbType.AnsiString;
				colvarEntityId.MaxLength = 22;
				colvarEntityId.AutoIncrement = false;
				colvarEntityId.IsNullable = false;
				colvarEntityId.IsPrimaryKey = false;
				colvarEntityId.IsForeignKey = true;
				colvarEntityId.IsReadOnly = false;
				colvarEntityId.DefaultSetting = @"";
				colvarEntityId.ForeignKeyTableName = "MS_MonitronicsEntities";
				schema.Columns.Add(colvarEntityId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = true;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarIsSuccess = new TableSchema.TableColumn(schema);
				colvarIsSuccess.ColumnName = "IsSuccess";
				colvarIsSuccess.DataType = DbType.Boolean;
				colvarIsSuccess.MaxLength = 0;
				colvarIsSuccess.AutoIncrement = false;
				colvarIsSuccess.IsNullable = false;
				colvarIsSuccess.IsPrimaryKey = false;
				colvarIsSuccess.IsForeignKey = false;
				colvarIsSuccess.IsReadOnly = false;
				colvarIsSuccess.DefaultSetting = @"((1))";
				colvarIsSuccess.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSuccess);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_MonitronicsSubmitsGetDatas",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_MonitronicsSubmitsGetData LoadFrom(MS_MonitronicsSubmitsGetData item)
		{
			MS_MonitronicsSubmitsGetData result = new MS_MonitronicsSubmitsGetData();
			if (item.SubmitsGetDataID != default(long)) {
				result.LoadByKey(item.SubmitsGetDataID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long SubmitsGetDataID {
			get { return GetColumnValue<long>(Columns.SubmitsGetDataID); }
			set {
				SetColumnValue(Columns.SubmitsGetDataID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubmitsGetDataID));
			}
		}
		[DataMember]
		public string EntityId {
			get { return GetColumnValue<string>(Columns.EntityId); }
			set {
				SetColumnValue(Columns.EntityId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EntityId));
			}
		}
		[DataMember]
		public long? AccountId {
			get { return GetColumnValue<long?>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public bool IsSuccess {
			get { return GetColumnValue<bool>(Columns.IsSuccess); }
			set {
				SetColumnValue(Columns.IsSuccess, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSuccess));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_MonitronicsEntity _Entity;
		//Relationship: FK_MS_MonitronicsSubmitsGetDatas_MS_MonitronicsEntities
		public MS_MonitronicsEntity Entity
		{
			get
			{
				if(_Entity == null) {
					_Entity = MS_MonitronicsEntity.FetchByID(this.EntityId);
				}
				return _Entity;
			}
			set
			{
				SetColumnValue("EntityId", value.EntityID);
				_Entity = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EntityId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SubmitsGetDataIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EntityIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsSuccessColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SubmitsGetDataID = @"SubmitsGetDataID";
			public static readonly string EntityId = @"EntityId";
			public static readonly string AccountId = @"AccountId";
			public static readonly string IsSuccess = @"IsSuccess";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SubmitsGetDataID; }
		}
		*/

		#region Foreign Collections

		private MS_MonitronicsEntityEventHistoryCollection _MS_MonitronicsEntityEventHistoriesCol;
		//Relationship: FK_MS_MonitronicsEventHistories_MS_MonitronicsSubmitsGetDatas
		public MS_MonitronicsEntityEventHistoryCollection MS_MonitronicsEntityEventHistoriesCol
		{
			get
			{
				if(_MS_MonitronicsEntityEventHistoriesCol == null) {
					_MS_MonitronicsEntityEventHistoriesCol = new MS_MonitronicsEntityEventHistoryCollection();
					_MS_MonitronicsEntityEventHistoriesCol.LoadAndCloseReader(MS_MonitronicsEntityEventHistory.Query()
						.WHERE(MS_MonitronicsEntityEventHistory.Columns.SubmitsGetDataId, SubmitsGetDataID).ExecuteReader());
				}
				return _MS_MonitronicsEntityEventHistoriesCol;
			}
		}

		private MS_MonitronicsSubmitsGetDataErrorCollection _MS_MonitronicsSubmitsGetDataErrorsCol;
		//Relationship: FK_MS_MonitronicsSubmitsGetDataErrors_MS_MonitronicsSubmitsGetDatas
		public MS_MonitronicsSubmitsGetDataErrorCollection MS_MonitronicsSubmitsGetDataErrorsCol
		{
			get
			{
				if(_MS_MonitronicsSubmitsGetDataErrorsCol == null) {
					_MS_MonitronicsSubmitsGetDataErrorsCol = new MS_MonitronicsSubmitsGetDataErrorCollection();
					_MS_MonitronicsSubmitsGetDataErrorsCol.LoadAndCloseReader(MS_MonitronicsSubmitsGetDataError.Query()
						.WHERE(MS_MonitronicsSubmitsGetDataError.Columns.SubmitsGetDataId, SubmitsGetDataID).ExecuteReader());
				}
				return _MS_MonitronicsSubmitsGetDataErrorsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_ReceiverLineAlarmNet class.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineAlarmNetCollection : ActiveList<MS_ReceiverLineAlarmNet, MS_ReceiverLineAlarmNetCollection>
	{
		public static MS_ReceiverLineAlarmNetCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_ReceiverLineAlarmNetCollection result = new MS_ReceiverLineAlarmNetCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_ReceiverLineAlarmNet item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_ReceiverLineAlarmNets table.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineAlarmNet : ActiveRecord<MS_ReceiverLineAlarmNet>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_ReceiverLineAlarmNet()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_ReceiverLineAlarmNets", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarReceiverLineID = new TableSchema.TableColumn(schema);
				colvarReceiverLineID.ColumnName = "ReceiverLineID";
				colvarReceiverLineID.DataType = DbType.AnsiString;
				colvarReceiverLineID.MaxLength = 30;
				colvarReceiverLineID.AutoIncrement = false;
				colvarReceiverLineID.IsNullable = false;
				colvarReceiverLineID.IsPrimaryKey = true;
				colvarReceiverLineID.IsForeignKey = false;
				colvarReceiverLineID.IsReadOnly = false;
				colvarReceiverLineID.DefaultSetting = @"";
				colvarReceiverLineID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineID);

				TableSchema.TableColumn colvarCityID = new TableSchema.TableColumn(schema);
				colvarCityID.ColumnName = "CityID";
				colvarCityID.DataType = DbType.AnsiStringFixedLength;
				colvarCityID.MaxLength = 2;
				colvarCityID.AutoIncrement = false;
				colvarCityID.IsNullable = false;
				colvarCityID.IsPrimaryKey = false;
				colvarCityID.IsForeignKey = false;
				colvarCityID.IsReadOnly = false;
				colvarCityID.DefaultSetting = @"";
				colvarCityID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCityID);

				TableSchema.TableColumn colvarCSID = new TableSchema.TableColumn(schema);
				colvarCSID.ColumnName = "CSID";
				colvarCSID.DataType = DbType.AnsiStringFixedLength;
				colvarCSID.MaxLength = 2;
				colvarCSID.AutoIncrement = false;
				colvarCSID.IsNullable = false;
				colvarCSID.IsPrimaryKey = false;
				colvarCSID.IsForeignKey = false;
				colvarCSID.IsReadOnly = false;
				colvarCSID.DefaultSetting = @"";
				colvarCSID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCSID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_ReceiverLineAlarmNets",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_ReceiverLineAlarmNet LoadFrom(MS_ReceiverLineAlarmNet item)
		{
			MS_ReceiverLineAlarmNet result = new MS_ReceiverLineAlarmNet();
			if (item.ReceiverLineID != default(string)) {
				result.LoadByKey(item.ReceiverLineID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ReceiverLineID {
			get { return GetColumnValue<string>(Columns.ReceiverLineID); }
			set {
				SetColumnValue(Columns.ReceiverLineID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineID));
			}
		}
		[DataMember]
		public string CityID {
			get { return GetColumnValue<string>(Columns.CityID); }
			set {
				SetColumnValue(Columns.CityID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CityID));
			}
		}
		[DataMember]
		public string CSID {
			get { return GetColumnValue<string>(Columns.CSID); }
			set {
				SetColumnValue(Columns.CSID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CSID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_ReceiverLine _ReceiverLine;
		//Relationship: FK_MS_ReceiverLineAlarmNets_MS_ReceiverLines
		public MS_ReceiverLine ReceiverLine
		{
			get
			{
				if(_ReceiverLine == null) {
					_ReceiverLine = MS_ReceiverLine.FetchByID(this.ReceiverLineID);
				}
				return _ReceiverLine;
			}
			set
			{
				SetColumnValue("ReceiverLineID", value.ReceiverLineID);
				_ReceiverLine = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CityID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ReceiverLineIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CityIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CSIDColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ReceiverLineID = @"ReceiverLineID";
			public static readonly string CityID = @"CityID";
			public static readonly string CSID = @"CSID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ReceiverLineID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_ReceiverLineBlockAlarmCom class.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineBlockAlarmComCollection : ActiveList<MS_ReceiverLineBlockAlarmCom, MS_ReceiverLineBlockAlarmComCollection>
	{
		public static MS_ReceiverLineBlockAlarmComCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_ReceiverLineBlockAlarmComCollection result = new MS_ReceiverLineBlockAlarmComCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_ReceiverLineBlockAlarmCom item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_ReceiverLineBlockAlarmCom table.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineBlockAlarmCom : ActiveRecord<MS_ReceiverLineBlockAlarmCom>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_ReceiverLineBlockAlarmCom()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_ReceiverLineBlockAlarmCom", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarReceiverLineBlockID = new TableSchema.TableColumn(schema);
				colvarReceiverLineBlockID.ColumnName = "ReceiverLineBlockID";
				colvarReceiverLineBlockID.DataType = DbType.AnsiString;
				colvarReceiverLineBlockID.MaxLength = 50;
				colvarReceiverLineBlockID.AutoIncrement = false;
				colvarReceiverLineBlockID.IsNullable = false;
				colvarReceiverLineBlockID.IsPrimaryKey = true;
				colvarReceiverLineBlockID.IsForeignKey = false;
				colvarReceiverLineBlockID.IsReadOnly = false;
				colvarReceiverLineBlockID.DefaultSetting = @"";
				colvarReceiverLineBlockID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineBlockID);

				TableSchema.TableColumn colvarSerialNumber = new TableSchema.TableColumn(schema);
				colvarSerialNumber.ColumnName = "SerialNumber";
				colvarSerialNumber.DataType = DbType.String;
				colvarSerialNumber.MaxLength = 50;
				colvarSerialNumber.AutoIncrement = false;
				colvarSerialNumber.IsNullable = false;
				colvarSerialNumber.IsPrimaryKey = false;
				colvarSerialNumber.IsForeignKey = false;
				colvarSerialNumber.IsReadOnly = false;
				colvarSerialNumber.DefaultSetting = @"";
				colvarSerialNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSerialNumber);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int32;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = true;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = false;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarIsTwoWay = new TableSchema.TableColumn(schema);
				colvarIsTwoWay.ColumnName = "IsTwoWay";
				colvarIsTwoWay.DataType = DbType.Boolean;
				colvarIsTwoWay.MaxLength = 0;
				colvarIsTwoWay.AutoIncrement = false;
				colvarIsTwoWay.IsNullable = false;
				colvarIsTwoWay.IsPrimaryKey = false;
				colvarIsTwoWay.IsForeignKey = false;
				colvarIsTwoWay.IsReadOnly = false;
				colvarIsTwoWay.DefaultSetting = @"";
				colvarIsTwoWay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTwoWay);

				TableSchema.TableColumn colvarRegisteredDate = new TableSchema.TableColumn(schema);
				colvarRegisteredDate.ColumnName = "RegisteredDate";
				colvarRegisteredDate.DataType = DbType.DateTime;
				colvarRegisteredDate.MaxLength = 0;
				colvarRegisteredDate.AutoIncrement = false;
				colvarRegisteredDate.IsNullable = true;
				colvarRegisteredDate.IsPrimaryKey = false;
				colvarRegisteredDate.IsForeignKey = false;
				colvarRegisteredDate.IsReadOnly = false;
				colvarRegisteredDate.DefaultSetting = @"";
				colvarRegisteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegisteredDate);

				TableSchema.TableColumn colvarUnRegisteredDate = new TableSchema.TableColumn(schema);
				colvarUnRegisteredDate.ColumnName = "UnRegisteredDate";
				colvarUnRegisteredDate.DataType = DbType.DateTime;
				colvarUnRegisteredDate.MaxLength = 0;
				colvarUnRegisteredDate.AutoIncrement = false;
				colvarUnRegisteredDate.IsNullable = true;
				colvarUnRegisteredDate.IsPrimaryKey = false;
				colvarUnRegisteredDate.IsForeignKey = false;
				colvarUnRegisteredDate.IsReadOnly = false;
				colvarUnRegisteredDate.DefaultSetting = @"";
				colvarUnRegisteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnRegisteredDate);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_ReceiverLineBlockAlarmCom",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_ReceiverLineBlockAlarmCom LoadFrom(MS_ReceiverLineBlockAlarmCom item)
		{
			MS_ReceiverLineBlockAlarmCom result = new MS_ReceiverLineBlockAlarmCom();
			if (item.ReceiverLineBlockID != default(string)) {
				result.LoadByKey(item.ReceiverLineBlockID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ReceiverLineBlockID {
			get { return GetColumnValue<string>(Columns.ReceiverLineBlockID); }
			set {
				SetColumnValue(Columns.ReceiverLineBlockID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineBlockID));
			}
		}
		[DataMember]
		public string SerialNumber {
			get { return GetColumnValue<string>(Columns.SerialNumber); }
			set {
				SetColumnValue(Columns.SerialNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SerialNumber));
			}
		}
		[DataMember]
		public int? CustomerId {
			get { return GetColumnValue<int?>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public bool IsTwoWay {
			get { return GetColumnValue<bool>(Columns.IsTwoWay); }
			set {
				SetColumnValue(Columns.IsTwoWay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTwoWay));
			}
		}
		[DataMember]
		public DateTime? RegisteredDate {
			get { return GetColumnValue<DateTime?>(Columns.RegisteredDate); }
			set {
				SetColumnValue(Columns.RegisteredDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegisteredDate));
			}
		}
		[DataMember]
		public DateTime? UnRegisteredDate {
			get { return GetColumnValue<DateTime?>(Columns.UnRegisteredDate); }
			set {
				SetColumnValue(Columns.UnRegisteredDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnRegisteredDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_ReceiverLineBlock _ReceiverLineBlock;
		//Relationship: FK_MS_ReceiverLineBlockAlarmCom_MS_ReceiverLineBlocks
		public MS_ReceiverLineBlock ReceiverLineBlock
		{
			get
			{
				if(_ReceiverLineBlock == null) {
					_ReceiverLineBlock = MS_ReceiverLineBlock.FetchByID(this.ReceiverLineBlockID);
				}
				return _ReceiverLineBlock;
			}
			set
			{
				SetColumnValue("ReceiverLineBlockID", value.ReceiverLineBlockID);
				_ReceiverLineBlock = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SerialNumber;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ReceiverLineBlockIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SerialNumberColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsTwoWayColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RegisteredDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn UnRegisteredDateColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ReceiverLineBlockID = @"ReceiverLineBlockID";
			public static readonly string SerialNumber = @"SerialNumber";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string IsTwoWay = @"IsTwoWay";
			public static readonly string RegisteredDate = @"RegisteredDate";
			public static readonly string UnRegisteredDate = @"UnRegisteredDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ReceiverLineBlockID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_ReceiverLineBlockAlarmComHistory class.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineBlockAlarmComHistoryCollection : ActiveList<MS_ReceiverLineBlockAlarmComHistory, MS_ReceiverLineBlockAlarmComHistoryCollection>
	{
		public static MS_ReceiverLineBlockAlarmComHistoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_ReceiverLineBlockAlarmComHistoryCollection result = new MS_ReceiverLineBlockAlarmComHistoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_ReceiverLineBlockAlarmComHistory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_ReceiverLineBlockAlarmComHistory table.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineBlockAlarmComHistory : ActiveRecord<MS_ReceiverLineBlockAlarmComHistory>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_ReceiverLineBlockAlarmComHistory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_ReceiverLineBlockAlarmComHistory", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarReceiverLineBlockHstID = new TableSchema.TableColumn(schema);
				colvarReceiverLineBlockHstID.ColumnName = "ReceiverLineBlockHstID";
				colvarReceiverLineBlockHstID.DataType = DbType.Int64;
				colvarReceiverLineBlockHstID.MaxLength = 0;
				colvarReceiverLineBlockHstID.AutoIncrement = true;
				colvarReceiverLineBlockHstID.IsNullable = false;
				colvarReceiverLineBlockHstID.IsPrimaryKey = false;
				colvarReceiverLineBlockHstID.IsForeignKey = false;
				colvarReceiverLineBlockHstID.IsReadOnly = false;
				colvarReceiverLineBlockHstID.DefaultSetting = @"";
				colvarReceiverLineBlockHstID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineBlockHstID);

				TableSchema.TableColumn colvarReceiverLineBlockID = new TableSchema.TableColumn(schema);
				colvarReceiverLineBlockID.ColumnName = "ReceiverLineBlockID";
				colvarReceiverLineBlockID.DataType = DbType.AnsiString;
				colvarReceiverLineBlockID.MaxLength = 50;
				colvarReceiverLineBlockID.AutoIncrement = false;
				colvarReceiverLineBlockID.IsNullable = false;
				colvarReceiverLineBlockID.IsPrimaryKey = false;
				colvarReceiverLineBlockID.IsForeignKey = false;
				colvarReceiverLineBlockID.IsReadOnly = false;
				colvarReceiverLineBlockID.DefaultSetting = @"";
				colvarReceiverLineBlockID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineBlockID);

				TableSchema.TableColumn colvarSerialNumber = new TableSchema.TableColumn(schema);
				colvarSerialNumber.ColumnName = "SerialNumber";
				colvarSerialNumber.DataType = DbType.String;
				colvarSerialNumber.MaxLength = 50;
				colvarSerialNumber.AutoIncrement = false;
				colvarSerialNumber.IsNullable = false;
				colvarSerialNumber.IsPrimaryKey = false;
				colvarSerialNumber.IsForeignKey = false;
				colvarSerialNumber.IsReadOnly = false;
				colvarSerialNumber.DefaultSetting = @"";
				colvarSerialNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSerialNumber);

				TableSchema.TableColumn colvarCustomerId = new TableSchema.TableColumn(schema);
				colvarCustomerId.ColumnName = "CustomerId";
				colvarCustomerId.DataType = DbType.Int32;
				colvarCustomerId.MaxLength = 0;
				colvarCustomerId.AutoIncrement = false;
				colvarCustomerId.IsNullable = true;
				colvarCustomerId.IsPrimaryKey = false;
				colvarCustomerId.IsForeignKey = false;
				colvarCustomerId.IsReadOnly = false;
				colvarCustomerId.DefaultSetting = @"";
				colvarCustomerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerId);

				TableSchema.TableColumn colvarIsTwoWay = new TableSchema.TableColumn(schema);
				colvarIsTwoWay.ColumnName = "IsTwoWay";
				colvarIsTwoWay.DataType = DbType.Boolean;
				colvarIsTwoWay.MaxLength = 0;
				colvarIsTwoWay.AutoIncrement = false;
				colvarIsTwoWay.IsNullable = false;
				colvarIsTwoWay.IsPrimaryKey = false;
				colvarIsTwoWay.IsForeignKey = false;
				colvarIsTwoWay.IsReadOnly = false;
				colvarIsTwoWay.DefaultSetting = @"";
				colvarIsTwoWay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTwoWay);

				TableSchema.TableColumn colvarRegisteredDate = new TableSchema.TableColumn(schema);
				colvarRegisteredDate.ColumnName = "RegisteredDate";
				colvarRegisteredDate.DataType = DbType.DateTime;
				colvarRegisteredDate.MaxLength = 0;
				colvarRegisteredDate.AutoIncrement = false;
				colvarRegisteredDate.IsNullable = true;
				colvarRegisteredDate.IsPrimaryKey = false;
				colvarRegisteredDate.IsForeignKey = false;
				colvarRegisteredDate.IsReadOnly = false;
				colvarRegisteredDate.DefaultSetting = @"";
				colvarRegisteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegisteredDate);

				TableSchema.TableColumn colvarUnRegisteredDate = new TableSchema.TableColumn(schema);
				colvarUnRegisteredDate.ColumnName = "UnRegisteredDate";
				colvarUnRegisteredDate.DataType = DbType.DateTime;
				colvarUnRegisteredDate.MaxLength = 0;
				colvarUnRegisteredDate.AutoIncrement = false;
				colvarUnRegisteredDate.IsNullable = true;
				colvarUnRegisteredDate.IsPrimaryKey = false;
				colvarUnRegisteredDate.IsForeignKey = false;
				colvarUnRegisteredDate.IsReadOnly = false;
				colvarUnRegisteredDate.DefaultSetting = @"";
				colvarUnRegisteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnRegisteredDate);

				TableSchema.TableColumn colvarChangeDateTime = new TableSchema.TableColumn(schema);
				colvarChangeDateTime.ColumnName = "ChangeDateTime";
				colvarChangeDateTime.DataType = DbType.DateTime;
				colvarChangeDateTime.MaxLength = 0;
				colvarChangeDateTime.AutoIncrement = false;
				colvarChangeDateTime.IsNullable = false;
				colvarChangeDateTime.IsPrimaryKey = false;
				colvarChangeDateTime.IsForeignKey = false;
				colvarChangeDateTime.IsReadOnly = false;
				colvarChangeDateTime.DefaultSetting = @"(getutcdate())";
				colvarChangeDateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChangeDateTime);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_ReceiverLineBlockAlarmComHistory",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public long ReceiverLineBlockHstID {
			get { return GetColumnValue<long>(Columns.ReceiverLineBlockHstID); }
			set {
				SetColumnValue(Columns.ReceiverLineBlockHstID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineBlockHstID));
			}
		}
		[DataMember]
		public string ReceiverLineBlockID {
			get { return GetColumnValue<string>(Columns.ReceiverLineBlockID); }
			set {
				SetColumnValue(Columns.ReceiverLineBlockID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineBlockID));
			}
		}
		[DataMember]
		public string SerialNumber {
			get { return GetColumnValue<string>(Columns.SerialNumber); }
			set {
				SetColumnValue(Columns.SerialNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SerialNumber));
			}
		}
		[DataMember]
		public int? CustomerId {
			get { return GetColumnValue<int?>(Columns.CustomerId); }
			set {
				SetColumnValue(Columns.CustomerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerId));
			}
		}
		[DataMember]
		public bool IsTwoWay {
			get { return GetColumnValue<bool>(Columns.IsTwoWay); }
			set {
				SetColumnValue(Columns.IsTwoWay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTwoWay));
			}
		}
		[DataMember]
		public DateTime? RegisteredDate {
			get { return GetColumnValue<DateTime?>(Columns.RegisteredDate); }
			set {
				SetColumnValue(Columns.RegisteredDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegisteredDate));
			}
		}
		[DataMember]
		public DateTime? UnRegisteredDate {
			get { return GetColumnValue<DateTime?>(Columns.UnRegisteredDate); }
			set {
				SetColumnValue(Columns.UnRegisteredDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnRegisteredDate));
			}
		}
		[DataMember]
		public DateTime ChangeDateTime {
			get { return GetColumnValue<DateTime>(Columns.ChangeDateTime); }
			set {
				SetColumnValue(Columns.ChangeDateTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ChangeDateTime));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ReceiverLineBlockID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ReceiverLineBlockHstIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ReceiverLineBlockIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SerialNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsTwoWayColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RegisteredDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn UnRegisteredDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ChangeDateTimeColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ReceiverLineBlockHstID = @"ReceiverLineBlockHstID";
			public static readonly string ReceiverLineBlockID = @"ReceiverLineBlockID";
			public static readonly string SerialNumber = @"SerialNumber";
			public static readonly string CustomerId = @"CustomerId";
			public static readonly string IsTwoWay = @"IsTwoWay";
			public static readonly string RegisteredDate = @"RegisteredDate";
			public static readonly string UnRegisteredDate = @"UnRegisteredDate";
			public static readonly string ChangeDateTime = @"ChangeDateTime";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_ReceiverLineBlockAlarmnet class.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineBlockAlarmnetCollection : ActiveList<MS_ReceiverLineBlockAlarmnet, MS_ReceiverLineBlockAlarmnetCollection>
	{
		public static MS_ReceiverLineBlockAlarmnetCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_ReceiverLineBlockAlarmnetCollection result = new MS_ReceiverLineBlockAlarmnetCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_ReceiverLineBlockAlarmnet item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_ReceiverLineBlockAlarmnet table.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineBlockAlarmnet : ActiveRecord<MS_ReceiverLineBlockAlarmnet>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_ReceiverLineBlockAlarmnet()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_ReceiverLineBlockAlarmnet", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarReceiverLineBlockID = new TableSchema.TableColumn(schema);
				colvarReceiverLineBlockID.ColumnName = "ReceiverLineBlockID";
				colvarReceiverLineBlockID.DataType = DbType.AnsiString;
				colvarReceiverLineBlockID.MaxLength = 50;
				colvarReceiverLineBlockID.AutoIncrement = false;
				colvarReceiverLineBlockID.IsNullable = false;
				colvarReceiverLineBlockID.IsPrimaryKey = true;
				colvarReceiverLineBlockID.IsForeignKey = false;
				colvarReceiverLineBlockID.IsReadOnly = false;
				colvarReceiverLineBlockID.DefaultSetting = @"";
				colvarReceiverLineBlockID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineBlockID);

				TableSchema.TableColumn colvarMACAddress = new TableSchema.TableColumn(schema);
				colvarMACAddress.ColumnName = "MACAddress";
				colvarMACAddress.DataType = DbType.String;
				colvarMACAddress.MaxLength = 50;
				colvarMACAddress.AutoIncrement = false;
				colvarMACAddress.IsNullable = false;
				colvarMACAddress.IsPrimaryKey = false;
				colvarMACAddress.IsForeignKey = false;
				colvarMACAddress.IsReadOnly = false;
				colvarMACAddress.DefaultSetting = @"";
				colvarMACAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMACAddress);

				TableSchema.TableColumn colvarCRCNumber = new TableSchema.TableColumn(schema);
				colvarCRCNumber.ColumnName = "CRCNumber";
				colvarCRCNumber.DataType = DbType.AnsiString;
				colvarCRCNumber.MaxLength = 10;
				colvarCRCNumber.AutoIncrement = false;
				colvarCRCNumber.IsNullable = false;
				colvarCRCNumber.IsPrimaryKey = false;
				colvarCRCNumber.IsForeignKey = false;
				colvarCRCNumber.IsReadOnly = false;
				colvarCRCNumber.DefaultSetting = @"";
				colvarCRCNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRCNumber);

				TableSchema.TableColumn colvarRegisteredDate = new TableSchema.TableColumn(schema);
				colvarRegisteredDate.ColumnName = "RegisteredDate";
				colvarRegisteredDate.DataType = DbType.DateTime;
				colvarRegisteredDate.MaxLength = 0;
				colvarRegisteredDate.AutoIncrement = false;
				colvarRegisteredDate.IsNullable = true;
				colvarRegisteredDate.IsPrimaryKey = false;
				colvarRegisteredDate.IsForeignKey = false;
				colvarRegisteredDate.IsReadOnly = false;
				colvarRegisteredDate.DefaultSetting = @"";
				colvarRegisteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegisteredDate);

				TableSchema.TableColumn colvarUnRegisteredDate = new TableSchema.TableColumn(schema);
				colvarUnRegisteredDate.ColumnName = "UnRegisteredDate";
				colvarUnRegisteredDate.DataType = DbType.DateTime;
				colvarUnRegisteredDate.MaxLength = 0;
				colvarUnRegisteredDate.AutoIncrement = false;
				colvarUnRegisteredDate.IsNullable = true;
				colvarUnRegisteredDate.IsPrimaryKey = false;
				colvarUnRegisteredDate.IsForeignKey = false;
				colvarUnRegisteredDate.IsReadOnly = false;
				colvarUnRegisteredDate.DefaultSetting = @"";
				colvarUnRegisteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnRegisteredDate);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_ReceiverLineBlockAlarmnet",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_ReceiverLineBlockAlarmnet LoadFrom(MS_ReceiverLineBlockAlarmnet item)
		{
			MS_ReceiverLineBlockAlarmnet result = new MS_ReceiverLineBlockAlarmnet();
			if (item.ReceiverLineBlockID != default(string)) {
				result.LoadByKey(item.ReceiverLineBlockID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ReceiverLineBlockID {
			get { return GetColumnValue<string>(Columns.ReceiverLineBlockID); }
			set {
				SetColumnValue(Columns.ReceiverLineBlockID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineBlockID));
			}
		}
		[DataMember]
		public string MACAddress {
			get { return GetColumnValue<string>(Columns.MACAddress); }
			set {
				SetColumnValue(Columns.MACAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MACAddress));
			}
		}
		[DataMember]
		public string CRCNumber {
			get { return GetColumnValue<string>(Columns.CRCNumber); }
			set {
				SetColumnValue(Columns.CRCNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CRCNumber));
			}
		}
		[DataMember]
		public DateTime? RegisteredDate {
			get { return GetColumnValue<DateTime?>(Columns.RegisteredDate); }
			set {
				SetColumnValue(Columns.RegisteredDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegisteredDate));
			}
		}
		[DataMember]
		public DateTime? UnRegisteredDate {
			get { return GetColumnValue<DateTime?>(Columns.UnRegisteredDate); }
			set {
				SetColumnValue(Columns.UnRegisteredDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnRegisteredDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_ReceiverLineBlock _ReceiverLineBlock;
		//Relationship: FK_MS_ReceiverLineBlockAlarmnet_MS_ReceiverLineBlocks
		public MS_ReceiverLineBlock ReceiverLineBlock
		{
			get
			{
				if(_ReceiverLineBlock == null) {
					_ReceiverLineBlock = MS_ReceiverLineBlock.FetchByID(this.ReceiverLineBlockID);
				}
				return _ReceiverLineBlock;
			}
			set
			{
				SetColumnValue("ReceiverLineBlockID", value.ReceiverLineBlockID);
				_ReceiverLineBlock = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MACAddress;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ReceiverLineBlockIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MACAddressColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CRCNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RegisteredDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn UnRegisteredDateColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ReceiverLineBlockID = @"ReceiverLineBlockID";
			public static readonly string MACAddress = @"MACAddress";
			public static readonly string CRCNumber = @"CRCNumber";
			public static readonly string RegisteredDate = @"RegisteredDate";
			public static readonly string UnRegisteredDate = @"UnRegisteredDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ReceiverLineBlockID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_ReceiverLineBlock class.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineBlockCollection : ActiveList<MS_ReceiverLineBlock, MS_ReceiverLineBlockCollection>
	{
		public static MS_ReceiverLineBlockCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_ReceiverLineBlockCollection result = new MS_ReceiverLineBlockCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_ReceiverLineBlock item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_ReceiverLineBlocks table.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineBlock : ActiveRecord<MS_ReceiverLineBlock>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_ReceiverLineBlock()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_ReceiverLineBlocks", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarReceiverLineBlockID = new TableSchema.TableColumn(schema);
				colvarReceiverLineBlockID.ColumnName = "ReceiverLineBlockID";
				colvarReceiverLineBlockID.DataType = DbType.AnsiString;
				colvarReceiverLineBlockID.MaxLength = 50;
				colvarReceiverLineBlockID.AutoIncrement = false;
				colvarReceiverLineBlockID.IsNullable = false;
				colvarReceiverLineBlockID.IsPrimaryKey = true;
				colvarReceiverLineBlockID.IsForeignKey = false;
				colvarReceiverLineBlockID.IsReadOnly = false;
				colvarReceiverLineBlockID.DefaultSetting = @"";
				colvarReceiverLineBlockID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineBlockID);

				TableSchema.TableColumn colvarReceiverLineId = new TableSchema.TableColumn(schema);
				colvarReceiverLineId.ColumnName = "ReceiverLineId";
				colvarReceiverLineId.DataType = DbType.AnsiString;
				colvarReceiverLineId.MaxLength = 30;
				colvarReceiverLineId.AutoIncrement = false;
				colvarReceiverLineId.IsNullable = false;
				colvarReceiverLineId.IsPrimaryKey = false;
				colvarReceiverLineId.IsForeignKey = true;
				colvarReceiverLineId.IsReadOnly = false;
				colvarReceiverLineId.DefaultSetting = @"";
				colvarReceiverLineId.ForeignKeyTableName = "MS_ReceiverLines";
				schema.Columns.Add(colvarReceiverLineId);

				TableSchema.TableColumn colvarCSID = new TableSchema.TableColumn(schema);
				colvarCSID.ColumnName = "CSID";
				colvarCSID.DataType = DbType.AnsiString;
				colvarCSID.MaxLength = 11;
				colvarCSID.AutoIncrement = false;
				colvarCSID.IsNullable = true;
				colvarCSID.IsPrimaryKey = false;
				colvarCSID.IsForeignKey = false;
				colvarCSID.IsReadOnly = false;
				colvarCSID.DefaultSetting = @"";
				colvarCSID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCSID);

				TableSchema.TableColumn colvarSubscriberNumber = new TableSchema.TableColumn(schema);
				colvarSubscriberNumber.ColumnName = "SubscriberNumber";
				colvarSubscriberNumber.DataType = DbType.AnsiString;
				colvarSubscriberNumber.MaxLength = 6;
				colvarSubscriberNumber.AutoIncrement = false;
				colvarSubscriberNumber.IsNullable = false;
				colvarSubscriberNumber.IsPrimaryKey = false;
				colvarSubscriberNumber.IsForeignKey = false;
				colvarSubscriberNumber.IsReadOnly = false;
				colvarSubscriberNumber.DefaultSetting = @"";
				colvarSubscriberNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubscriberNumber);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = true;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarIsAssigned = new TableSchema.TableColumn(schema);
				colvarIsAssigned.ColumnName = "IsAssigned";
				colvarIsAssigned.DataType = DbType.Boolean;
				colvarIsAssigned.MaxLength = 0;
				colvarIsAssigned.AutoIncrement = false;
				colvarIsAssigned.IsNullable = false;
				colvarIsAssigned.IsPrimaryKey = false;
				colvarIsAssigned.IsForeignKey = false;
				colvarIsAssigned.IsReadOnly = false;
				colvarIsAssigned.DefaultSetting = @"((0))";
				colvarIsAssigned.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAssigned);

				TableSchema.TableColumn colvarAssignedDate = new TableSchema.TableColumn(schema);
				colvarAssignedDate.ColumnName = "AssignedDate";
				colvarAssignedDate.DataType = DbType.DateTime;
				colvarAssignedDate.MaxLength = 0;
				colvarAssignedDate.AutoIncrement = false;
				colvarAssignedDate.IsNullable = true;
				colvarAssignedDate.IsPrimaryKey = false;
				colvarAssignedDate.IsForeignKey = false;
				colvarAssignedDate.IsReadOnly = false;
				colvarAssignedDate.DefaultSetting = @"";
				colvarAssignedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignedDate);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_ReceiverLineBlocks",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_ReceiverLineBlock LoadFrom(MS_ReceiverLineBlock item)
		{
			MS_ReceiverLineBlock result = new MS_ReceiverLineBlock();
			if (item.ReceiverLineBlockID != default(string)) {
				result.LoadByKey(item.ReceiverLineBlockID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ReceiverLineBlockID {
			get { return GetColumnValue<string>(Columns.ReceiverLineBlockID); }
			set {
				SetColumnValue(Columns.ReceiverLineBlockID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineBlockID));
			}
		}
		[DataMember]
		public string ReceiverLineId {
			get { return GetColumnValue<string>(Columns.ReceiverLineId); }
			set {
				SetColumnValue(Columns.ReceiverLineId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineId));
			}
		}
		[DataMember]
		public string CSID {
			get { return GetColumnValue<string>(Columns.CSID); }
			set {
				SetColumnValue(Columns.CSID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CSID));
			}
		}
		[DataMember]
		public string SubscriberNumber {
			get { return GetColumnValue<string>(Columns.SubscriberNumber); }
			set {
				SetColumnValue(Columns.SubscriberNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubscriberNumber));
			}
		}
		[DataMember]
		public long? AccountId {
			get { return GetColumnValue<long?>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public bool IsAssigned {
			get { return GetColumnValue<bool>(Columns.IsAssigned); }
			set {
				SetColumnValue(Columns.IsAssigned, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAssigned));
			}
		}
		[DataMember]
		public DateTime? AssignedDate {
			get { return GetColumnValue<DateTime?>(Columns.AssignedDate); }
			set {
				SetColumnValue(Columns.AssignedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AssignedDate));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_ReceiverLine _ReceiverLine;
		//Relationship: FK_MS_ReceiverLineBlocks_MS_ReceiverLines
		public MS_ReceiverLine ReceiverLine
		{
			get
			{
				if(_ReceiverLine == null) {
					_ReceiverLine = MS_ReceiverLine.FetchByID(this.ReceiverLineId);
				}
				return _ReceiverLine;
			}
			set
			{
				SetColumnValue("ReceiverLineId", value.ReceiverLineID);
				_ReceiverLine = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ReceiverLineId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ReceiverLineBlockIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ReceiverLineIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CSIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SubscriberNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsAssignedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AssignedDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[14]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ReceiverLineBlockID = @"ReceiverLineBlockID";
			public static readonly string ReceiverLineId = @"ReceiverLineId";
			public static readonly string CSID = @"CSID";
			public static readonly string SubscriberNumber = @"SubscriberNumber";
			public static readonly string AccountId = @"AccountId";
			public static readonly string IsAssigned = @"IsAssigned";
			public static readonly string AssignedDate = @"AssignedDate";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ReceiverLineBlockID; }
		}
		*/

		#region Foreign Collections

		private MS_IndustryAccountCollection _MS_IndustryAccountsCol;
		//Relationship: FK_MS_IndustryAccounts_MS_ReceiverLineBlocks
		public MS_IndustryAccountCollection MS_IndustryAccountsCol
		{
			get
			{
				if(_MS_IndustryAccountsCol == null) {
					_MS_IndustryAccountsCol = new MS_IndustryAccountCollection();
					_MS_IndustryAccountsCol.LoadAndCloseReader(MS_IndustryAccount.Query()
						.WHERE(MS_IndustryAccount.Columns.ReceiverLineBlockId, ReceiverLineBlockID).ExecuteReader());
				}
				return _MS_IndustryAccountsCol;
			}
		}

		private MS_ReceiverLineBlockAlarmComCollection _MS_ReceiverLineBlockAlarmComsCol;
		//Relationship: FK_MS_ReceiverLineBlockAlarmCom_MS_ReceiverLineBlocks
		public MS_ReceiverLineBlockAlarmComCollection MS_ReceiverLineBlockAlarmComsCol
		{
			get
			{
				if(_MS_ReceiverLineBlockAlarmComsCol == null) {
					_MS_ReceiverLineBlockAlarmComsCol = new MS_ReceiverLineBlockAlarmComCollection();
					_MS_ReceiverLineBlockAlarmComsCol.LoadAndCloseReader(MS_ReceiverLineBlockAlarmCom.Query()
						.WHERE(MS_ReceiverLineBlockAlarmCom.Columns.ReceiverLineBlockID, ReceiverLineBlockID).ExecuteReader());
				}
				return _MS_ReceiverLineBlockAlarmComsCol;
			}
		}

		private MS_ReceiverLineBlockAlarmnetCollection _MS_ReceiverLineBlockAlarmnetsCol;
		//Relationship: FK_MS_ReceiverLineBlockAlarmnet_MS_ReceiverLineBlocks
		public MS_ReceiverLineBlockAlarmnetCollection MS_ReceiverLineBlockAlarmnetsCol
		{
			get
			{
				if(_MS_ReceiverLineBlockAlarmnetsCol == null) {
					_MS_ReceiverLineBlockAlarmnetsCol = new MS_ReceiverLineBlockAlarmnetCollection();
					_MS_ReceiverLineBlockAlarmnetsCol.LoadAndCloseReader(MS_ReceiverLineBlockAlarmnet.Query()
						.WHERE(MS_ReceiverLineBlockAlarmnet.Columns.ReceiverLineBlockID, ReceiverLineBlockID).ExecuteReader());
				}
				return _MS_ReceiverLineBlockAlarmnetsCol;
			}
		}

		private MS_ReceiverLineBlockTelguardCollection _MS_ReceiverLineBlockTelguardsCol;
		//Relationship: FK_MS_ReceiverLineBlockTelguard_MS_ReceiverLineBlocks
		public MS_ReceiverLineBlockTelguardCollection MS_ReceiverLineBlockTelguardsCol
		{
			get
			{
				if(_MS_ReceiverLineBlockTelguardsCol == null) {
					_MS_ReceiverLineBlockTelguardsCol = new MS_ReceiverLineBlockTelguardCollection();
					_MS_ReceiverLineBlockTelguardsCol.LoadAndCloseReader(MS_ReceiverLineBlockTelguard.Query()
						.WHERE(MS_ReceiverLineBlockTelguard.Columns.ReceiverLineBlockID, ReceiverLineBlockID).ExecuteReader());
				}
				return _MS_ReceiverLineBlockTelguardsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_ReceiverLineBlockTelguard class.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineBlockTelguardCollection : ActiveList<MS_ReceiverLineBlockTelguard, MS_ReceiverLineBlockTelguardCollection>
	{
		public static MS_ReceiverLineBlockTelguardCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_ReceiverLineBlockTelguardCollection result = new MS_ReceiverLineBlockTelguardCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_ReceiverLineBlockTelguard item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_ReceiverLineBlockTelguard table.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineBlockTelguard : ActiveRecord<MS_ReceiverLineBlockTelguard>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_ReceiverLineBlockTelguard()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_ReceiverLineBlockTelguard", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarReceiverLineBlockID = new TableSchema.TableColumn(schema);
				colvarReceiverLineBlockID.ColumnName = "ReceiverLineBlockID";
				colvarReceiverLineBlockID.DataType = DbType.AnsiString;
				colvarReceiverLineBlockID.MaxLength = 50;
				colvarReceiverLineBlockID.AutoIncrement = false;
				colvarReceiverLineBlockID.IsNullable = false;
				colvarReceiverLineBlockID.IsPrimaryKey = true;
				colvarReceiverLineBlockID.IsForeignKey = false;
				colvarReceiverLineBlockID.IsReadOnly = false;
				colvarReceiverLineBlockID.DefaultSetting = @"";
				colvarReceiverLineBlockID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineBlockID);

				TableSchema.TableColumn colvarUnitNumber = new TableSchema.TableColumn(schema);
				colvarUnitNumber.ColumnName = "UnitNumber";
				colvarUnitNumber.DataType = DbType.String;
				colvarUnitNumber.MaxLength = 50;
				colvarUnitNumber.AutoIncrement = false;
				colvarUnitNumber.IsNullable = false;
				colvarUnitNumber.IsPrimaryKey = false;
				colvarUnitNumber.IsForeignKey = false;
				colvarUnitNumber.IsReadOnly = false;
				colvarUnitNumber.DefaultSetting = @"";
				colvarUnitNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitNumber);

				TableSchema.TableColumn colvarSubcriberNumber = new TableSchema.TableColumn(schema);
				colvarSubcriberNumber.ColumnName = "SubcriberNumber";
				colvarSubcriberNumber.DataType = DbType.String;
				colvarSubcriberNumber.MaxLength = 50;
				colvarSubcriberNumber.AutoIncrement = false;
				colvarSubcriberNumber.IsNullable = false;
				colvarSubcriberNumber.IsPrimaryKey = false;
				colvarSubcriberNumber.IsForeignKey = false;
				colvarSubcriberNumber.IsReadOnly = false;
				colvarSubcriberNumber.DefaultSetting = @"";
				colvarSubcriberNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubcriberNumber);

				TableSchema.TableColumn colvarRegisteredDate = new TableSchema.TableColumn(schema);
				colvarRegisteredDate.ColumnName = "RegisteredDate";
				colvarRegisteredDate.DataType = DbType.DateTime;
				colvarRegisteredDate.MaxLength = 0;
				colvarRegisteredDate.AutoIncrement = false;
				colvarRegisteredDate.IsNullable = true;
				colvarRegisteredDate.IsPrimaryKey = false;
				colvarRegisteredDate.IsForeignKey = false;
				colvarRegisteredDate.IsReadOnly = false;
				colvarRegisteredDate.DefaultSetting = @"";
				colvarRegisteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegisteredDate);

				TableSchema.TableColumn colvarUnRegisteredDate = new TableSchema.TableColumn(schema);
				colvarUnRegisteredDate.ColumnName = "UnRegisteredDate";
				colvarUnRegisteredDate.DataType = DbType.DateTime;
				colvarUnRegisteredDate.MaxLength = 0;
				colvarUnRegisteredDate.AutoIncrement = false;
				colvarUnRegisteredDate.IsNullable = true;
				colvarUnRegisteredDate.IsPrimaryKey = false;
				colvarUnRegisteredDate.IsForeignKey = false;
				colvarUnRegisteredDate.IsReadOnly = false;
				colvarUnRegisteredDate.DefaultSetting = @"";
				colvarUnRegisteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnRegisteredDate);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_ReceiverLineBlockTelguard",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_ReceiverLineBlockTelguard LoadFrom(MS_ReceiverLineBlockTelguard item)
		{
			MS_ReceiverLineBlockTelguard result = new MS_ReceiverLineBlockTelguard();
			if (item.ReceiverLineBlockID != default(string)) {
				result.LoadByKey(item.ReceiverLineBlockID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ReceiverLineBlockID {
			get { return GetColumnValue<string>(Columns.ReceiverLineBlockID); }
			set {
				SetColumnValue(Columns.ReceiverLineBlockID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineBlockID));
			}
		}
		[DataMember]
		public string UnitNumber {
			get { return GetColumnValue<string>(Columns.UnitNumber); }
			set {
				SetColumnValue(Columns.UnitNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitNumber));
			}
		}
		[DataMember]
		public string SubcriberNumber {
			get { return GetColumnValue<string>(Columns.SubcriberNumber); }
			set {
				SetColumnValue(Columns.SubcriberNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubcriberNumber));
			}
		}
		[DataMember]
		public DateTime? RegisteredDate {
			get { return GetColumnValue<DateTime?>(Columns.RegisteredDate); }
			set {
				SetColumnValue(Columns.RegisteredDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegisteredDate));
			}
		}
		[DataMember]
		public DateTime? UnRegisteredDate {
			get { return GetColumnValue<DateTime?>(Columns.UnRegisteredDate); }
			set {
				SetColumnValue(Columns.UnRegisteredDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnRegisteredDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_ReceiverLineBlock _ReceiverLineBlock;
		//Relationship: FK_MS_ReceiverLineBlockTelguard_MS_ReceiverLineBlocks
		public MS_ReceiverLineBlock ReceiverLineBlock
		{
			get
			{
				if(_ReceiverLineBlock == null) {
					_ReceiverLineBlock = MS_ReceiverLineBlock.FetchByID(this.ReceiverLineBlockID);
				}
				return _ReceiverLineBlock;
			}
			set
			{
				SetColumnValue("ReceiverLineBlockID", value.ReceiverLineBlockID);
				_ReceiverLineBlock = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return UnitNumber;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ReceiverLineBlockIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UnitNumberColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SubcriberNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RegisteredDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn UnRegisteredDateColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ReceiverLineBlockID = @"ReceiverLineBlockID";
			public static readonly string UnitNumber = @"UnitNumber";
			public static readonly string SubcriberNumber = @"SubcriberNumber";
			public static readonly string RegisteredDate = @"RegisteredDate";
			public static readonly string UnRegisteredDate = @"UnRegisteredDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ReceiverLineBlockID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_ReceiverLine class.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineCollection : ActiveList<MS_ReceiverLine, MS_ReceiverLineCollection>
	{
		public static MS_ReceiverLineCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_ReceiverLineCollection result = new MS_ReceiverLineCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_ReceiverLine item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_ReceiverLines table.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLine : ActiveRecord<MS_ReceiverLine>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_ReceiverLine()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_ReceiverLines", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarReceiverLineID = new TableSchema.TableColumn(schema);
				colvarReceiverLineID.ColumnName = "ReceiverLineID";
				colvarReceiverLineID.DataType = DbType.AnsiString;
				colvarReceiverLineID.MaxLength = 30;
				colvarReceiverLineID.AutoIncrement = false;
				colvarReceiverLineID.IsNullable = false;
				colvarReceiverLineID.IsPrimaryKey = true;
				colvarReceiverLineID.IsForeignKey = false;
				colvarReceiverLineID.IsReadOnly = false;
				colvarReceiverLineID.DefaultSetting = @"";
				colvarReceiverLineID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineID);

				TableSchema.TableColumn colvarReceiverLineTypeId = new TableSchema.TableColumn(schema);
				colvarReceiverLineTypeId.ColumnName = "ReceiverLineTypeId";
				colvarReceiverLineTypeId.DataType = DbType.AnsiString;
				colvarReceiverLineTypeId.MaxLength = 15;
				colvarReceiverLineTypeId.AutoIncrement = false;
				colvarReceiverLineTypeId.IsNullable = false;
				colvarReceiverLineTypeId.IsPrimaryKey = false;
				colvarReceiverLineTypeId.IsForeignKey = true;
				colvarReceiverLineTypeId.IsReadOnly = false;
				colvarReceiverLineTypeId.DefaultSetting = @"";
				colvarReceiverLineTypeId.ForeignKeyTableName = "MS_ReceiverLineTypes";
				schema.Columns.Add(colvarReceiverLineTypeId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"((5000))";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarMonitoringStationOSId = new TableSchema.TableColumn(schema);
				colvarMonitoringStationOSId.ColumnName = "MonitoringStationOSId";
				colvarMonitoringStationOSId.DataType = DbType.AnsiString;
				colvarMonitoringStationOSId.MaxLength = 50;
				colvarMonitoringStationOSId.AutoIncrement = false;
				colvarMonitoringStationOSId.IsNullable = false;
				colvarMonitoringStationOSId.IsPrimaryKey = false;
				colvarMonitoringStationOSId.IsForeignKey = true;
				colvarMonitoringStationOSId.IsReadOnly = false;
				colvarMonitoringStationOSId.DefaultSetting = @"('AG_GPSTRACK')";
				colvarMonitoringStationOSId.ForeignKeyTableName = "MS_MonitoringStationOSs";
				schema.Columns.Add(colvarMonitoringStationOSId);

				TableSchema.TableColumn colvarReceiverNumber = new TableSchema.TableColumn(schema);
				colvarReceiverNumber.ColumnName = "ReceiverNumber";
				colvarReceiverNumber.DataType = DbType.AnsiString;
				colvarReceiverNumber.MaxLength = 50;
				colvarReceiverNumber.AutoIncrement = false;
				colvarReceiverNumber.IsNullable = false;
				colvarReceiverNumber.IsPrimaryKey = false;
				colvarReceiverNumber.IsForeignKey = false;
				colvarReceiverNumber.IsReadOnly = false;
				colvarReceiverNumber.DefaultSetting = @"";
				colvarReceiverNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverNumber);

				TableSchema.TableColumn colvarDesignator = new TableSchema.TableColumn(schema);
				colvarDesignator.ColumnName = "Designator";
				colvarDesignator.DataType = DbType.AnsiString;
				colvarDesignator.MaxLength = 6;
				colvarDesignator.AutoIncrement = false;
				colvarDesignator.IsNullable = false;
				colvarDesignator.IsPrimaryKey = false;
				colvarDesignator.IsForeignKey = false;
				colvarDesignator.IsReadOnly = false;
				colvarDesignator.DefaultSetting = @"";
				colvarDesignator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesignator);

				TableSchema.TableColumn colvarSubscriberLength = new TableSchema.TableColumn(schema);
				colvarSubscriberLength.ColumnName = "SubscriberLength";
				colvarSubscriberLength.DataType = DbType.Int16;
				colvarSubscriberLength.MaxLength = 0;
				colvarSubscriberLength.AutoIncrement = false;
				colvarSubscriberLength.IsNullable = false;
				colvarSubscriberLength.IsPrimaryKey = false;
				colvarSubscriberLength.IsForeignKey = false;
				colvarSubscriberLength.IsReadOnly = false;
				colvarSubscriberLength.DefaultSetting = @"((4))";
				colvarSubscriberLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubscriberLength);

				TableSchema.TableColumn colvarStartNumber = new TableSchema.TableColumn(schema);
				colvarStartNumber.ColumnName = "StartNumber";
				colvarStartNumber.DataType = DbType.Int32;
				colvarStartNumber.MaxLength = 0;
				colvarStartNumber.AutoIncrement = false;
				colvarStartNumber.IsNullable = false;
				colvarStartNumber.IsPrimaryKey = false;
				colvarStartNumber.IsForeignKey = false;
				colvarStartNumber.IsReadOnly = false;
				colvarStartNumber.DefaultSetting = @"((11))";
				colvarStartNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartNumber);

				TableSchema.TableColumn colvarEndNumber = new TableSchema.TableColumn(schema);
				colvarEndNumber.ColumnName = "EndNumber";
				colvarEndNumber.DataType = DbType.Int32;
				colvarEndNumber.MaxLength = 0;
				colvarEndNumber.AutoIncrement = false;
				colvarEndNumber.IsNullable = false;
				colvarEndNumber.IsPrimaryKey = false;
				colvarEndNumber.IsForeignKey = false;
				colvarEndNumber.IsReadOnly = false;
				colvarEndNumber.DefaultSetting = @"((210))";
				colvarEndNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndNumber);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_ReceiverLines",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_ReceiverLine LoadFrom(MS_ReceiverLine item)
		{
			MS_ReceiverLine result = new MS_ReceiverLine();
			if (item.ReceiverLineID != default(string)) {
				result.LoadByKey(item.ReceiverLineID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ReceiverLineID {
			get { return GetColumnValue<string>(Columns.ReceiverLineID); }
			set {
				SetColumnValue(Columns.ReceiverLineID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineID));
			}
		}
		[DataMember]
		public string ReceiverLineTypeId {
			get { return GetColumnValue<string>(Columns.ReceiverLineTypeId); }
			set {
				SetColumnValue(Columns.ReceiverLineTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineTypeId));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string MonitoringStationOSId {
			get { return GetColumnValue<string>(Columns.MonitoringStationOSId); }
			set {
				SetColumnValue(Columns.MonitoringStationOSId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationOSId));
			}
		}
		[DataMember]
		public string ReceiverNumber {
			get { return GetColumnValue<string>(Columns.ReceiverNumber); }
			set {
				SetColumnValue(Columns.ReceiverNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverNumber));
			}
		}
		[DataMember]
		public string Designator {
			get { return GetColumnValue<string>(Columns.Designator); }
			set {
				SetColumnValue(Columns.Designator, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Designator));
			}
		}
		[DataMember]
		public short SubscriberLength {
			get { return GetColumnValue<short>(Columns.SubscriberLength); }
			set {
				SetColumnValue(Columns.SubscriberLength, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubscriberLength));
			}
		}
		[DataMember]
		public int StartNumber {
			get { return GetColumnValue<int>(Columns.StartNumber); }
			set {
				SetColumnValue(Columns.StartNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartNumber));
			}
		}
		[DataMember]
		public int EndNumber {
			get { return GetColumnValue<int>(Columns.EndNumber); }
			set {
				SetColumnValue(Columns.EndNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EndNumber));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Dealer _Dealer;
		//Relationship: FK_MS_ReceiverLines_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		private MS_MonitoringStationOss _MonitoringStationOS;
		//Relationship: FK_MS_ReceiverLines_MS_MonitoringStationOSs
		public MS_MonitoringStationOss MonitoringStationOS
		{
			get
			{
				if(_MonitoringStationOS == null) {
					_MonitoringStationOS = MS_MonitoringStationOss.FetchByID(this.MonitoringStationOSId);
				}
				return _MonitoringStationOS;
			}
			set
			{
				SetColumnValue("MonitoringStationOSId", value.MonitoringStationOSID);
				_MonitoringStationOS = value;
			}
		}

		private MS_ReceiverLineType _ReceiverLineType;
		//Relationship: FK_MS_ReceiverLines_MS_ReceiverLineTypes
		public MS_ReceiverLineType ReceiverLineType
		{
			get
			{
				if(_ReceiverLineType == null) {
					_ReceiverLineType = MS_ReceiverLineType.FetchByID(this.ReceiverLineTypeId);
				}
				return _ReceiverLineType;
			}
			set
			{
				SetColumnValue("ReceiverLineTypeId", value.ReceiverLineTypeID);
				_ReceiverLineType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ReceiverLineTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ReceiverLineIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ReceiverLineTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MonitoringStationOSIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ReceiverNumberColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DesignatorColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SubscriberLengthColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn StartNumberColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn EndNumberColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[16]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ReceiverLineID = @"ReceiverLineID";
			public static readonly string ReceiverLineTypeId = @"ReceiverLineTypeId";
			public static readonly string DealerId = @"DealerId";
			public static readonly string MonitoringStationOSId = @"MonitoringStationOSId";
			public static readonly string ReceiverNumber = @"ReceiverNumber";
			public static readonly string Designator = @"Designator";
			public static readonly string SubscriberLength = @"SubscriberLength";
			public static readonly string StartNumber = @"StartNumber";
			public static readonly string EndNumber = @"EndNumber";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ReceiverLineID; }
		}
		*/

		#region Foreign Collections

		private MS_IndustryAccountCollection _MS_IndustryAccountsCol;
		//Relationship: FK_MS_IndustryAccounts_MS_ReceiverLines
		public MS_IndustryAccountCollection MS_IndustryAccountsCol
		{
			get
			{
				if(_MS_IndustryAccountsCol == null) {
					_MS_IndustryAccountsCol = new MS_IndustryAccountCollection();
					_MS_IndustryAccountsCol.LoadAndCloseReader(MS_IndustryAccount.Query()
						.WHERE(MS_IndustryAccount.Columns.ReceiverLineId, ReceiverLineID).ExecuteReader());
				}
				return _MS_IndustryAccountsCol;
			}
		}

		private MS_ReceiverLineAlarmNetCollection _MS_ReceiverLineAlarmNetsCol;
		//Relationship: FK_MS_ReceiverLineAlarmNets_MS_ReceiverLines
		public MS_ReceiverLineAlarmNetCollection MS_ReceiverLineAlarmNetsCol
		{
			get
			{
				if(_MS_ReceiverLineAlarmNetsCol == null) {
					_MS_ReceiverLineAlarmNetsCol = new MS_ReceiverLineAlarmNetCollection();
					_MS_ReceiverLineAlarmNetsCol.LoadAndCloseReader(MS_ReceiverLineAlarmNet.Query()
						.WHERE(MS_ReceiverLineAlarmNet.Columns.ReceiverLineID, ReceiverLineID).ExecuteReader());
				}
				return _MS_ReceiverLineAlarmNetsCol;
			}
		}

		private MS_ReceiverLineBlockCollection _MS_ReceiverLineBlocksCol;
		//Relationship: FK_MS_ReceiverLineBlocks_MS_ReceiverLines
		public MS_ReceiverLineBlockCollection MS_ReceiverLineBlocksCol
		{
			get
			{
				if(_MS_ReceiverLineBlocksCol == null) {
					_MS_ReceiverLineBlocksCol = new MS_ReceiverLineBlockCollection();
					_MS_ReceiverLineBlocksCol.LoadAndCloseReader(MS_ReceiverLineBlock.Query()
						.WHERE(MS_ReceiverLineBlock.Columns.ReceiverLineId, ReceiverLineID).ExecuteReader());
				}
				return _MS_ReceiverLineBlocksCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_ReceiverLineType class.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineTypeCollection : ActiveList<MS_ReceiverLineType, MS_ReceiverLineTypeCollection>
	{
		public static MS_ReceiverLineTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_ReceiverLineTypeCollection result = new MS_ReceiverLineTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_ReceiverLineType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_ReceiverLineTypes table.
	/// </summary>
	[DataContract]
	public partial class MS_ReceiverLineType : ActiveRecord<MS_ReceiverLineType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_ReceiverLineType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_ReceiverLineTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarReceiverLineTypeID = new TableSchema.TableColumn(schema);
				colvarReceiverLineTypeID.ColumnName = "ReceiverLineTypeID";
				colvarReceiverLineTypeID.DataType = DbType.AnsiString;
				colvarReceiverLineTypeID.MaxLength = 15;
				colvarReceiverLineTypeID.AutoIncrement = false;
				colvarReceiverLineTypeID.IsNullable = false;
				colvarReceiverLineTypeID.IsPrimaryKey = true;
				colvarReceiverLineTypeID.IsForeignKey = false;
				colvarReceiverLineTypeID.IsReadOnly = false;
				colvarReceiverLineTypeID.DefaultSetting = @"";
				colvarReceiverLineTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineTypeID);

				TableSchema.TableColumn colvarReceiverLineType = new TableSchema.TableColumn(schema);
				colvarReceiverLineType.ColumnName = "ReceiverLineType";
				colvarReceiverLineType.DataType = DbType.String;
				colvarReceiverLineType.MaxLength = 50;
				colvarReceiverLineType.AutoIncrement = false;
				colvarReceiverLineType.IsNullable = false;
				colvarReceiverLineType.IsPrimaryKey = false;
				colvarReceiverLineType.IsForeignKey = false;
				colvarReceiverLineType.IsReadOnly = false;
				colvarReceiverLineType.DefaultSetting = @"";
				colvarReceiverLineType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiverLineType);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_ReceiverLineTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_ReceiverLineType LoadFrom(MS_ReceiverLineType item)
		{
			MS_ReceiverLineType result = new MS_ReceiverLineType();
			if (item.ReceiverLineTypeID != default(string)) {
				result.LoadByKey(item.ReceiverLineTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ReceiverLineTypeID {
			get { return GetColumnValue<string>(Columns.ReceiverLineTypeID); }
			set {
				SetColumnValue(Columns.ReceiverLineTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineTypeID));
			}
		}
		[DataMember]
		public string ReceiverLineType {
			get { return GetColumnValue<string>(Columns.ReceiverLineType); }
			set {
				SetColumnValue(Columns.ReceiverLineType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReceiverLineType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ReceiverLineType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ReceiverLineTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ReceiverLineTypeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ReceiverLineTypeID = @"ReceiverLineTypeID";
			public static readonly string ReceiverLineType = @"ReceiverLineType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ReceiverLineTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_ReceiverLineCollection _MS_ReceiverLinesCol;
		//Relationship: FK_MS_ReceiverLines_MS_ReceiverLineTypes
		public MS_ReceiverLineCollection MS_ReceiverLinesCol
		{
			get
			{
				if(_MS_ReceiverLinesCol == null) {
					_MS_ReceiverLinesCol = new MS_ReceiverLineCollection();
					_MS_ReceiverLinesCol.LoadAndCloseReader(MS_ReceiverLine.Query()
						.WHERE(MS_ReceiverLine.Columns.ReceiverLineTypeId, ReceiverLineTypeID).ExecuteReader());
				}
				return _MS_ReceiverLinesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_TimeZoneLookup class.
	/// </summary>
	[DataContract]
	public partial class MS_TimeZoneLookupCollection : ActiveList<MS_TimeZoneLookup, MS_TimeZoneLookupCollection>
	{
		public static MS_TimeZoneLookupCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_TimeZoneLookupCollection result = new MS_TimeZoneLookupCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_TimeZoneLookup item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_TimeZoneLookup table.
	/// </summary>
	[DataContract]
	public partial class MS_TimeZoneLookup : ActiveRecord<MS_TimeZoneLookup>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_TimeZoneLookup()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_TimeZoneLookup", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTimeZoneLookUpId = new TableSchema.TableColumn(schema);
				colvarTimeZoneLookUpId.ColumnName = "TimeZoneLookUpId";
				colvarTimeZoneLookUpId.DataType = DbType.Int32;
				colvarTimeZoneLookUpId.MaxLength = 0;
				colvarTimeZoneLookUpId.AutoIncrement = true;
				colvarTimeZoneLookUpId.IsNullable = false;
				colvarTimeZoneLookUpId.IsPrimaryKey = true;
				colvarTimeZoneLookUpId.IsForeignKey = false;
				colvarTimeZoneLookUpId.IsReadOnly = false;
				colvarTimeZoneLookUpId.DefaultSetting = @"";
				colvarTimeZoneLookUpId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneLookUpId);

				TableSchema.TableColumn colvarAreaCode = new TableSchema.TableColumn(schema);
				colvarAreaCode.ColumnName = "AreaCode";
				colvarAreaCode.DataType = DbType.String;
				colvarAreaCode.MaxLength = 3;
				colvarAreaCode.AutoIncrement = false;
				colvarAreaCode.IsNullable = false;
				colvarAreaCode.IsPrimaryKey = false;
				colvarAreaCode.IsForeignKey = false;
				colvarAreaCode.IsReadOnly = false;
				colvarAreaCode.DefaultSetting = @"";
				colvarAreaCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAreaCode);

				TableSchema.TableColumn colvarStateAB = new TableSchema.TableColumn(schema);
				colvarStateAB.ColumnName = "StateAB";
				colvarStateAB.DataType = DbType.AnsiStringFixedLength;
				colvarStateAB.MaxLength = 2;
				colvarStateAB.AutoIncrement = false;
				colvarStateAB.IsNullable = false;
				colvarStateAB.IsPrimaryKey = false;
				colvarStateAB.IsForeignKey = false;
				colvarStateAB.IsReadOnly = false;
				colvarStateAB.DefaultSetting = @"";
				colvarStateAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateAB);

				TableSchema.TableColumn colvarGreenwichOffset = new TableSchema.TableColumn(schema);
				colvarGreenwichOffset.ColumnName = "GreenwichOffset";
				colvarGreenwichOffset.DataType = DbType.Int16;
				colvarGreenwichOffset.MaxLength = 0;
				colvarGreenwichOffset.AutoIncrement = false;
				colvarGreenwichOffset.IsNullable = false;
				colvarGreenwichOffset.IsPrimaryKey = false;
				colvarGreenwichOffset.IsForeignKey = false;
				colvarGreenwichOffset.IsReadOnly = false;
				colvarGreenwichOffset.DefaultSetting = @"";
				colvarGreenwichOffset.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGreenwichOffset);

				TableSchema.TableColumn colvarTimeZoneDesc = new TableSchema.TableColumn(schema);
				colvarTimeZoneDesc.ColumnName = "TimeZoneDesc";
				colvarTimeZoneDesc.DataType = DbType.String;
				colvarTimeZoneDesc.MaxLength = 500;
				colvarTimeZoneDesc.AutoIncrement = false;
				colvarTimeZoneDesc.IsNullable = false;
				colvarTimeZoneDesc.IsPrimaryKey = false;
				colvarTimeZoneDesc.IsForeignKey = false;
				colvarTimeZoneDesc.IsReadOnly = false;
				colvarTimeZoneDesc.DefaultSetting = @"";
				colvarTimeZoneDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneDesc);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_TimeZoneLookup",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_TimeZoneLookup LoadFrom(MS_TimeZoneLookup item)
		{
			MS_TimeZoneLookup result = new MS_TimeZoneLookup();
			if (item.TimeZoneLookUpId != default(int)) {
				result.LoadByKey(item.TimeZoneLookUpId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TimeZoneLookUpId {
			get { return GetColumnValue<int>(Columns.TimeZoneLookUpId); }
			set {
				SetColumnValue(Columns.TimeZoneLookUpId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneLookUpId));
			}
		}
		[DataMember]
		public string AreaCode {
			get { return GetColumnValue<string>(Columns.AreaCode); }
			set {
				SetColumnValue(Columns.AreaCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AreaCode));
			}
		}
		[DataMember]
		public string StateAB {
			get { return GetColumnValue<string>(Columns.StateAB); }
			set {
				SetColumnValue(Columns.StateAB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateAB));
			}
		}
		[DataMember]
		public short GreenwichOffset {
			get { return GetColumnValue<short>(Columns.GreenwichOffset); }
			set {
				SetColumnValue(Columns.GreenwichOffset, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GreenwichOffset));
			}
		}
		[DataMember]
		public string TimeZoneDesc {
			get { return GetColumnValue<string>(Columns.TimeZoneDesc); }
			set {
				SetColumnValue(Columns.TimeZoneDesc, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneDesc));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AreaCode;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TimeZoneLookUpIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AreaCodeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn StateABColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GreenwichOffsetColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TimeZoneDescColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TimeZoneLookUpId = @"TimeZoneLookUpId";
			public static readonly string AreaCode = @"AreaCode";
			public static readonly string StateAB = @"StateAB";
			public static readonly string GreenwichOffset = @"GreenwichOffset";
			public static readonly string TimeZoneDesc = @"TimeZoneDesc";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TimeZoneLookUpId; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_VendorAlarmComAccount class.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComAccountCollection : ActiveList<MS_VendorAlarmComAccount, MS_VendorAlarmComAccountCollection>
	{
		public static MS_VendorAlarmComAccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_VendorAlarmComAccountCollection result = new MS_VendorAlarmComAccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_VendorAlarmComAccount item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_VendorAlarmComAccounts table.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComAccount : ActiveRecord<MS_VendorAlarmComAccount>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_VendorAlarmComAccount()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_VendorAlarmComAccounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAlarmComAccountID = new TableSchema.TableColumn(schema);
				colvarAlarmComAccountID.ColumnName = "AlarmComAccountID";
				colvarAlarmComAccountID.DataType = DbType.Int32;
				colvarAlarmComAccountID.MaxLength = 0;
				colvarAlarmComAccountID.AutoIncrement = true;
				colvarAlarmComAccountID.IsNullable = false;
				colvarAlarmComAccountID.IsPrimaryKey = true;
				colvarAlarmComAccountID.IsForeignKey = false;
				colvarAlarmComAccountID.IsReadOnly = false;
				colvarAlarmComAccountID.DefaultSetting = @"";
				colvarAlarmComAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlarmComAccountID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"((5000))";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarAccountName = new TableSchema.TableColumn(schema);
				colvarAccountName.ColumnName = "AccountName";
				colvarAccountName.DataType = DbType.String;
				colvarAccountName.MaxLength = 50;
				colvarAccountName.AutoIncrement = false;
				colvarAccountName.IsNullable = false;
				colvarAccountName.IsPrimaryKey = false;
				colvarAccountName.IsForeignKey = false;
				colvarAccountName.IsReadOnly = false;
				colvarAccountName.DefaultSetting = @"";
				colvarAccountName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountName);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.AnsiString;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = false;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.AnsiString;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = false;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_VendorAlarmComAccounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_VendorAlarmComAccount LoadFrom(MS_VendorAlarmComAccount item)
		{
			MS_VendorAlarmComAccount result = new MS_VendorAlarmComAccount();
			if (item.AlarmComAccountID != default(int)) {
				result.LoadByKey(item.AlarmComAccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AlarmComAccountID {
			get { return GetColumnValue<int>(Columns.AlarmComAccountID); }
			set {
				SetColumnValue(Columns.AlarmComAccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AlarmComAccountID));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string AccountName {
			get { return GetColumnValue<string>(Columns.AccountName); }
			set {
				SetColumnValue(Columns.AccountName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountName));
			}
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set {
				SetColumnValue(Columns.Username, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Username));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AlarmComAccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AlarmComAccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AlarmComAccountID = @"AlarmComAccountID";
			public static readonly string DealerId = @"DealerId";
			public static readonly string AccountName = @"AccountName";
			public static readonly string Username = @"Username";
			public static readonly string Password = @"Password";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AlarmComAccountID; }
		}
		*/

		#region Foreign Collections

		private MS_VendorAlarmComPackageCollection _MS_VendorAlarmComPackagesCol;
		//Relationship: FK_MS_VendorAlarmComPackages_MS_VendorAlarmComAccounts
		public MS_VendorAlarmComPackageCollection MS_VendorAlarmComPackagesCol
		{
			get
			{
				if(_MS_VendorAlarmComPackagesCol == null) {
					_MS_VendorAlarmComPackagesCol = new MS_VendorAlarmComPackageCollection();
					_MS_VendorAlarmComPackagesCol.LoadAndCloseReader(MS_VendorAlarmComPackage.Query()
						.WHERE(MS_VendorAlarmComPackage.Columns.AlarmComAccountId, AlarmComAccountID).ExecuteReader());
				}
				return _MS_VendorAlarmComPackagesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_VendorAlarmComAddOnFeature class.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComAddOnFeatureCollection : ActiveList<MS_VendorAlarmComAddOnFeature, MS_VendorAlarmComAddOnFeatureCollection>
	{
		public static MS_VendorAlarmComAddOnFeatureCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_VendorAlarmComAddOnFeatureCollection result = new MS_VendorAlarmComAddOnFeatureCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_VendorAlarmComAddOnFeature item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_VendorAlarmComAddOnFeatures table.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComAddOnFeature : ActiveRecord<MS_VendorAlarmComAddOnFeature>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_VendorAlarmComAddOnFeature()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_VendorAlarmComAddOnFeatures", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddOnFeaturesID = new TableSchema.TableColumn(schema);
				colvarAddOnFeaturesID.ColumnName = "AddOnFeaturesID";
				colvarAddOnFeaturesID.DataType = DbType.AnsiString;
				colvarAddOnFeaturesID.MaxLength = 20;
				colvarAddOnFeaturesID.AutoIncrement = false;
				colvarAddOnFeaturesID.IsNullable = false;
				colvarAddOnFeaturesID.IsPrimaryKey = true;
				colvarAddOnFeaturesID.IsForeignKey = false;
				colvarAddOnFeaturesID.IsReadOnly = false;
				colvarAddOnFeaturesID.DefaultSetting = @"";
				colvarAddOnFeaturesID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddOnFeaturesID);

				TableSchema.TableColumn colvarAddOnFeaturesName = new TableSchema.TableColumn(schema);
				colvarAddOnFeaturesName.ColumnName = "AddOnFeaturesName";
				colvarAddOnFeaturesName.DataType = DbType.String;
				colvarAddOnFeaturesName.MaxLength = 50;
				colvarAddOnFeaturesName.AutoIncrement = false;
				colvarAddOnFeaturesName.IsNullable = false;
				colvarAddOnFeaturesName.IsPrimaryKey = false;
				colvarAddOnFeaturesName.IsForeignKey = false;
				colvarAddOnFeaturesName.IsReadOnly = false;
				colvarAddOnFeaturesName.DefaultSetting = @"";
				colvarAddOnFeaturesName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddOnFeaturesName);

				TableSchema.TableColumn colvarAddOnFeaturesValue = new TableSchema.TableColumn(schema);
				colvarAddOnFeaturesValue.ColumnName = "AddOnFeaturesValue";
				colvarAddOnFeaturesValue.DataType = DbType.String;
				colvarAddOnFeaturesValue.MaxLength = 50;
				colvarAddOnFeaturesValue.AutoIncrement = false;
				colvarAddOnFeaturesValue.IsNullable = false;
				colvarAddOnFeaturesValue.IsPrimaryKey = false;
				colvarAddOnFeaturesValue.IsForeignKey = false;
				colvarAddOnFeaturesValue.IsReadOnly = false;
				colvarAddOnFeaturesValue.DefaultSetting = @"";
				colvarAddOnFeaturesValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddOnFeaturesValue);

				TableSchema.TableColumn colvarAddOnFeaturesDescription = new TableSchema.TableColumn(schema);
				colvarAddOnFeaturesDescription.ColumnName = "AddOnFeaturesDescription";
				colvarAddOnFeaturesDescription.DataType = DbType.String;
				colvarAddOnFeaturesDescription.MaxLength = 50;
				colvarAddOnFeaturesDescription.AutoIncrement = false;
				colvarAddOnFeaturesDescription.IsNullable = false;
				colvarAddOnFeaturesDescription.IsPrimaryKey = false;
				colvarAddOnFeaturesDescription.IsForeignKey = false;
				colvarAddOnFeaturesDescription.IsReadOnly = false;
				colvarAddOnFeaturesDescription.DefaultSetting = @"";
				colvarAddOnFeaturesDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddOnFeaturesDescription);

				TableSchema.TableColumn colvarDefaultValue = new TableSchema.TableColumn(schema);
				colvarDefaultValue.ColumnName = "DefaultValue";
				colvarDefaultValue.DataType = DbType.Boolean;
				colvarDefaultValue.MaxLength = 0;
				colvarDefaultValue.AutoIncrement = false;
				colvarDefaultValue.IsNullable = false;
				colvarDefaultValue.IsPrimaryKey = false;
				colvarDefaultValue.IsForeignKey = false;
				colvarDefaultValue.IsReadOnly = false;
				colvarDefaultValue.DefaultSetting = @"((1))";
				colvarDefaultValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultValue);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Guid;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Guid;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_VendorAlarmComAddOnFeatures",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_VendorAlarmComAddOnFeature LoadFrom(MS_VendorAlarmComAddOnFeature item)
		{
			MS_VendorAlarmComAddOnFeature result = new MS_VendorAlarmComAddOnFeature();
			if (item.AddOnFeaturesID != default(string)) {
				result.LoadByKey(item.AddOnFeaturesID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AddOnFeaturesID {
			get { return GetColumnValue<string>(Columns.AddOnFeaturesID); }
			set {
				SetColumnValue(Columns.AddOnFeaturesID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddOnFeaturesID));
			}
		}
		[DataMember]
		public string AddOnFeaturesName {
			get { return GetColumnValue<string>(Columns.AddOnFeaturesName); }
			set {
				SetColumnValue(Columns.AddOnFeaturesName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddOnFeaturesName));
			}
		}
		[DataMember]
		public string AddOnFeaturesValue {
			get { return GetColumnValue<string>(Columns.AddOnFeaturesValue); }
			set {
				SetColumnValue(Columns.AddOnFeaturesValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddOnFeaturesValue));
			}
		}
		[DataMember]
		public string AddOnFeaturesDescription {
			get { return GetColumnValue<string>(Columns.AddOnFeaturesDescription); }
			set {
				SetColumnValue(Columns.AddOnFeaturesDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddOnFeaturesDescription));
			}
		}
		[DataMember]
		public bool DefaultValue {
			get { return GetColumnValue<bool>(Columns.DefaultValue); }
			set {
				SetColumnValue(Columns.DefaultValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultValue));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public Guid ModifiedBy {
			get { return GetColumnValue<Guid>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public Guid CreatedBy {
			get { return GetColumnValue<Guid>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AddOnFeaturesName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddOnFeaturesIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AddOnFeaturesNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AddOnFeaturesValueColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AddOnFeaturesDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DefaultValueColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddOnFeaturesID = @"AddOnFeaturesID";
			public static readonly string AddOnFeaturesName = @"AddOnFeaturesName";
			public static readonly string AddOnFeaturesValue = @"AddOnFeaturesValue";
			public static readonly string AddOnFeaturesDescription = @"AddOnFeaturesDescription";
			public static readonly string DefaultValue = @"DefaultValue";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddOnFeaturesID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_VendorAlarmComCentralStationForwardingOption class.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComCentralStationForwardingOptionCollection : ActiveList<MS_VendorAlarmComCentralStationForwardingOption, MS_VendorAlarmComCentralStationForwardingOptionCollection>
	{
		public static MS_VendorAlarmComCentralStationForwardingOptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_VendorAlarmComCentralStationForwardingOptionCollection result = new MS_VendorAlarmComCentralStationForwardingOptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_VendorAlarmComCentralStationForwardingOption item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_VendorAlarmComCentralStationForwardingOption table.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComCentralStationForwardingOption : ActiveRecord<MS_VendorAlarmComCentralStationForwardingOption>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_VendorAlarmComCentralStationForwardingOption()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_VendorAlarmComCentralStationForwardingOption", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCentralStationForwardingOptionID = new TableSchema.TableColumn(schema);
				colvarCentralStationForwardingOptionID.ColumnName = "CentralStationForwardingOptionID";
				colvarCentralStationForwardingOptionID.DataType = DbType.AnsiString;
				colvarCentralStationForwardingOptionID.MaxLength = 20;
				colvarCentralStationForwardingOptionID.AutoIncrement = false;
				colvarCentralStationForwardingOptionID.IsNullable = false;
				colvarCentralStationForwardingOptionID.IsPrimaryKey = true;
				colvarCentralStationForwardingOptionID.IsForeignKey = false;
				colvarCentralStationForwardingOptionID.IsReadOnly = false;
				colvarCentralStationForwardingOptionID.DefaultSetting = @"";
				colvarCentralStationForwardingOptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCentralStationForwardingOptionID);

				TableSchema.TableColumn colvarCentralStationForwardingOptionName = new TableSchema.TableColumn(schema);
				colvarCentralStationForwardingOptionName.ColumnName = "CentralStationForwardingOptionName";
				colvarCentralStationForwardingOptionName.DataType = DbType.String;
				colvarCentralStationForwardingOptionName.MaxLength = 50;
				colvarCentralStationForwardingOptionName.AutoIncrement = false;
				colvarCentralStationForwardingOptionName.IsNullable = false;
				colvarCentralStationForwardingOptionName.IsPrimaryKey = false;
				colvarCentralStationForwardingOptionName.IsForeignKey = false;
				colvarCentralStationForwardingOptionName.IsReadOnly = false;
				colvarCentralStationForwardingOptionName.DefaultSetting = @"";
				colvarCentralStationForwardingOptionName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCentralStationForwardingOptionName);

				TableSchema.TableColumn colvarCentralStationForwardingOptionValue = new TableSchema.TableColumn(schema);
				colvarCentralStationForwardingOptionValue.ColumnName = "CentralStationForwardingOptionValue";
				colvarCentralStationForwardingOptionValue.DataType = DbType.String;
				colvarCentralStationForwardingOptionValue.MaxLength = 50;
				colvarCentralStationForwardingOptionValue.AutoIncrement = false;
				colvarCentralStationForwardingOptionValue.IsNullable = false;
				colvarCentralStationForwardingOptionValue.IsPrimaryKey = false;
				colvarCentralStationForwardingOptionValue.IsForeignKey = false;
				colvarCentralStationForwardingOptionValue.IsReadOnly = false;
				colvarCentralStationForwardingOptionValue.DefaultSetting = @"";
				colvarCentralStationForwardingOptionValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCentralStationForwardingOptionValue);

				TableSchema.TableColumn colvarCentralStationForwardingOptionDescription = new TableSchema.TableColumn(schema);
				colvarCentralStationForwardingOptionDescription.ColumnName = "CentralStationForwardingOptionDescription";
				colvarCentralStationForwardingOptionDescription.DataType = DbType.String;
				colvarCentralStationForwardingOptionDescription.MaxLength = 50;
				colvarCentralStationForwardingOptionDescription.AutoIncrement = false;
				colvarCentralStationForwardingOptionDescription.IsNullable = false;
				colvarCentralStationForwardingOptionDescription.IsPrimaryKey = false;
				colvarCentralStationForwardingOptionDescription.IsForeignKey = false;
				colvarCentralStationForwardingOptionDescription.IsReadOnly = false;
				colvarCentralStationForwardingOptionDescription.DefaultSetting = @"";
				colvarCentralStationForwardingOptionDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCentralStationForwardingOptionDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Guid;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Guid;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_VendorAlarmComCentralStationForwardingOption",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_VendorAlarmComCentralStationForwardingOption LoadFrom(MS_VendorAlarmComCentralStationForwardingOption item)
		{
			MS_VendorAlarmComCentralStationForwardingOption result = new MS_VendorAlarmComCentralStationForwardingOption();
			if (item.CentralStationForwardingOptionID != default(string)) {
				result.LoadByKey(item.CentralStationForwardingOptionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CentralStationForwardingOptionID {
			get { return GetColumnValue<string>(Columns.CentralStationForwardingOptionID); }
			set {
				SetColumnValue(Columns.CentralStationForwardingOptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CentralStationForwardingOptionID));
			}
		}
		[DataMember]
		public string CentralStationForwardingOptionName {
			get { return GetColumnValue<string>(Columns.CentralStationForwardingOptionName); }
			set {
				SetColumnValue(Columns.CentralStationForwardingOptionName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CentralStationForwardingOptionName));
			}
		}
		[DataMember]
		public string CentralStationForwardingOptionValue {
			get { return GetColumnValue<string>(Columns.CentralStationForwardingOptionValue); }
			set {
				SetColumnValue(Columns.CentralStationForwardingOptionValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CentralStationForwardingOptionValue));
			}
		}
		[DataMember]
		public string CentralStationForwardingOptionDescription {
			get { return GetColumnValue<string>(Columns.CentralStationForwardingOptionDescription); }
			set {
				SetColumnValue(Columns.CentralStationForwardingOptionDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CentralStationForwardingOptionDescription));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public Guid ModifiedBy {
			get { return GetColumnValue<Guid>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public Guid CreatedBy {
			get { return GetColumnValue<Guid>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CentralStationForwardingOptionName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CentralStationForwardingOptionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CentralStationForwardingOptionNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CentralStationForwardingOptionValueColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CentralStationForwardingOptionDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CentralStationForwardingOptionID = @"CentralStationForwardingOptionID";
			public static readonly string CentralStationForwardingOptionName = @"CentralStationForwardingOptionName";
			public static readonly string CentralStationForwardingOptionValue = @"CentralStationForwardingOptionValue";
			public static readonly string CentralStationForwardingOptionDescription = @"CentralStationForwardingOptionDescription";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CentralStationForwardingOptionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_VendorAlarmComCheckCoverage class.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComCheckCoverageCollection : ActiveList<MS_VendorAlarmComCheckCoverage, MS_VendorAlarmComCheckCoverageCollection>
	{
		public static MS_VendorAlarmComCheckCoverageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_VendorAlarmComCheckCoverageCollection result = new MS_VendorAlarmComCheckCoverageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_VendorAlarmComCheckCoverage item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_VendorAlarmComCheckCoverage table.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComCheckCoverage : ActiveRecord<MS_VendorAlarmComCheckCoverage>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_VendorAlarmComCheckCoverage()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_VendorAlarmComCheckCoverage", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCheckCoverageID = new TableSchema.TableColumn(schema);
				colvarCheckCoverageID.ColumnName = "CheckCoverageID";
				colvarCheckCoverageID.DataType = DbType.AnsiString;
				colvarCheckCoverageID.MaxLength = 20;
				colvarCheckCoverageID.AutoIncrement = false;
				colvarCheckCoverageID.IsNullable = false;
				colvarCheckCoverageID.IsPrimaryKey = true;
				colvarCheckCoverageID.IsForeignKey = false;
				colvarCheckCoverageID.IsReadOnly = false;
				colvarCheckCoverageID.DefaultSetting = @"";
				colvarCheckCoverageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCheckCoverageID);

				TableSchema.TableColumn colvarCheckCoverageName = new TableSchema.TableColumn(schema);
				colvarCheckCoverageName.ColumnName = "CheckCoverageName";
				colvarCheckCoverageName.DataType = DbType.AnsiString;
				colvarCheckCoverageName.MaxLength = 50;
				colvarCheckCoverageName.AutoIncrement = false;
				colvarCheckCoverageName.IsNullable = false;
				colvarCheckCoverageName.IsPrimaryKey = false;
				colvarCheckCoverageName.IsForeignKey = false;
				colvarCheckCoverageName.IsReadOnly = false;
				colvarCheckCoverageName.DefaultSetting = @"";
				colvarCheckCoverageName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCheckCoverageName);

				TableSchema.TableColumn colvarCheckCoverageValue = new TableSchema.TableColumn(schema);
				colvarCheckCoverageValue.ColumnName = "CheckCoverageValue";
				colvarCheckCoverageValue.DataType = DbType.AnsiString;
				colvarCheckCoverageValue.MaxLength = 50;
				colvarCheckCoverageValue.AutoIncrement = false;
				colvarCheckCoverageValue.IsNullable = false;
				colvarCheckCoverageValue.IsPrimaryKey = false;
				colvarCheckCoverageValue.IsForeignKey = false;
				colvarCheckCoverageValue.IsReadOnly = false;
				colvarCheckCoverageValue.DefaultSetting = @"";
				colvarCheckCoverageValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCheckCoverageValue);

				TableSchema.TableColumn colvarCheckCoverageDescription = new TableSchema.TableColumn(schema);
				colvarCheckCoverageDescription.ColumnName = "CheckCoverageDescription";
				colvarCheckCoverageDescription.DataType = DbType.AnsiString;
				colvarCheckCoverageDescription.MaxLength = 50;
				colvarCheckCoverageDescription.AutoIncrement = false;
				colvarCheckCoverageDescription.IsNullable = true;
				colvarCheckCoverageDescription.IsPrimaryKey = false;
				colvarCheckCoverageDescription.IsForeignKey = false;
				colvarCheckCoverageDescription.IsReadOnly = false;
				colvarCheckCoverageDescription.DefaultSetting = @"";
				colvarCheckCoverageDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCheckCoverageDescription);

				TableSchema.TableColumn colvarDefaultValue = new TableSchema.TableColumn(schema);
				colvarDefaultValue.ColumnName = "DefaultValue";
				colvarDefaultValue.DataType = DbType.Boolean;
				colvarDefaultValue.MaxLength = 0;
				colvarDefaultValue.AutoIncrement = false;
				colvarDefaultValue.IsNullable = false;
				colvarDefaultValue.IsPrimaryKey = false;
				colvarDefaultValue.IsForeignKey = false;
				colvarDefaultValue.IsReadOnly = false;
				colvarDefaultValue.DefaultSetting = @"((0))";
				colvarDefaultValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultValue);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_VendorAlarmComCheckCoverage",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_VendorAlarmComCheckCoverage LoadFrom(MS_VendorAlarmComCheckCoverage item)
		{
			MS_VendorAlarmComCheckCoverage result = new MS_VendorAlarmComCheckCoverage();
			if (item.CheckCoverageID != default(string)) {
				result.LoadByKey(item.CheckCoverageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CheckCoverageID {
			get { return GetColumnValue<string>(Columns.CheckCoverageID); }
			set {
				SetColumnValue(Columns.CheckCoverageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CheckCoverageID));
			}
		}
		[DataMember]
		public string CheckCoverageName {
			get { return GetColumnValue<string>(Columns.CheckCoverageName); }
			set {
				SetColumnValue(Columns.CheckCoverageName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CheckCoverageName));
			}
		}
		[DataMember]
		public string CheckCoverageValue {
			get { return GetColumnValue<string>(Columns.CheckCoverageValue); }
			set {
				SetColumnValue(Columns.CheckCoverageValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CheckCoverageValue));
			}
		}
		[DataMember]
		public string CheckCoverageDescription {
			get { return GetColumnValue<string>(Columns.CheckCoverageDescription); }
			set {
				SetColumnValue(Columns.CheckCoverageDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CheckCoverageDescription));
			}
		}
		[DataMember]
		public bool DefaultValue {
			get { return GetColumnValue<bool>(Columns.DefaultValue); }
			set {
				SetColumnValue(Columns.DefaultValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultValue));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime? CreatedOn {
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime? ModifiedOn {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CheckCoverageName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CheckCoverageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CheckCoverageNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CheckCoverageValueColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CheckCoverageDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DefaultValueColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CheckCoverageID = @"CheckCoverageID";
			public static readonly string CheckCoverageName = @"CheckCoverageName";
			public static readonly string CheckCoverageValue = @"CheckCoverageValue";
			public static readonly string CheckCoverageDescription = @"CheckCoverageDescription";
			public static readonly string DefaultValue = @"DefaultValue";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CheckCoverageID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_VendorAlarmComCsEventGroupsToForward class.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComCsEventGroupsToForwardCollection : ActiveList<MS_VendorAlarmComCsEventGroupsToForward, MS_VendorAlarmComCsEventGroupsToForwardCollection>
	{
		public static MS_VendorAlarmComCsEventGroupsToForwardCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_VendorAlarmComCsEventGroupsToForwardCollection result = new MS_VendorAlarmComCsEventGroupsToForwardCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_VendorAlarmComCsEventGroupsToForward item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_VendorAlarmComCsEventGroupsToForward table.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComCsEventGroupsToForward : ActiveRecord<MS_VendorAlarmComCsEventGroupsToForward>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_VendorAlarmComCsEventGroupsToForward()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_VendorAlarmComCsEventGroupsToForward", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCsEventGroupsToForwardID = new TableSchema.TableColumn(schema);
				colvarCsEventGroupsToForwardID.ColumnName = "CsEventGroupsToForwardID";
				colvarCsEventGroupsToForwardID.DataType = DbType.AnsiString;
				colvarCsEventGroupsToForwardID.MaxLength = 20;
				colvarCsEventGroupsToForwardID.AutoIncrement = false;
				colvarCsEventGroupsToForwardID.IsNullable = false;
				colvarCsEventGroupsToForwardID.IsPrimaryKey = true;
				colvarCsEventGroupsToForwardID.IsForeignKey = false;
				colvarCsEventGroupsToForwardID.IsReadOnly = false;
				colvarCsEventGroupsToForwardID.DefaultSetting = @"";
				colvarCsEventGroupsToForwardID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsEventGroupsToForwardID);

				TableSchema.TableColumn colvarCsEventGroupsToForwardName = new TableSchema.TableColumn(schema);
				colvarCsEventGroupsToForwardName.ColumnName = "CsEventGroupsToForwardName";
				colvarCsEventGroupsToForwardName.DataType = DbType.String;
				colvarCsEventGroupsToForwardName.MaxLength = 50;
				colvarCsEventGroupsToForwardName.AutoIncrement = false;
				colvarCsEventGroupsToForwardName.IsNullable = false;
				colvarCsEventGroupsToForwardName.IsPrimaryKey = false;
				colvarCsEventGroupsToForwardName.IsForeignKey = false;
				colvarCsEventGroupsToForwardName.IsReadOnly = false;
				colvarCsEventGroupsToForwardName.DefaultSetting = @"";
				colvarCsEventGroupsToForwardName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsEventGroupsToForwardName);

				TableSchema.TableColumn colvarCsEventGroupsToForwardValue = new TableSchema.TableColumn(schema);
				colvarCsEventGroupsToForwardValue.ColumnName = "CsEventGroupsToForwardValue";
				colvarCsEventGroupsToForwardValue.DataType = DbType.String;
				colvarCsEventGroupsToForwardValue.MaxLength = 50;
				colvarCsEventGroupsToForwardValue.AutoIncrement = false;
				colvarCsEventGroupsToForwardValue.IsNullable = false;
				colvarCsEventGroupsToForwardValue.IsPrimaryKey = false;
				colvarCsEventGroupsToForwardValue.IsForeignKey = false;
				colvarCsEventGroupsToForwardValue.IsReadOnly = false;
				colvarCsEventGroupsToForwardValue.DefaultSetting = @"";
				colvarCsEventGroupsToForwardValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsEventGroupsToForwardValue);

				TableSchema.TableColumn colvarCsEventGroupsToForwardDescription = new TableSchema.TableColumn(schema);
				colvarCsEventGroupsToForwardDescription.ColumnName = "CsEventGroupsToForwardDescription";
				colvarCsEventGroupsToForwardDescription.DataType = DbType.String;
				colvarCsEventGroupsToForwardDescription.MaxLength = 50;
				colvarCsEventGroupsToForwardDescription.AutoIncrement = false;
				colvarCsEventGroupsToForwardDescription.IsNullable = false;
				colvarCsEventGroupsToForwardDescription.IsPrimaryKey = false;
				colvarCsEventGroupsToForwardDescription.IsForeignKey = false;
				colvarCsEventGroupsToForwardDescription.IsReadOnly = false;
				colvarCsEventGroupsToForwardDescription.DefaultSetting = @"";
				colvarCsEventGroupsToForwardDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCsEventGroupsToForwardDescription);

				TableSchema.TableColumn colvarDefaultValue = new TableSchema.TableColumn(schema);
				colvarDefaultValue.ColumnName = "DefaultValue";
				colvarDefaultValue.DataType = DbType.Boolean;
				colvarDefaultValue.MaxLength = 0;
				colvarDefaultValue.AutoIncrement = false;
				colvarDefaultValue.IsNullable = false;
				colvarDefaultValue.IsPrimaryKey = false;
				colvarDefaultValue.IsForeignKey = false;
				colvarDefaultValue.IsReadOnly = false;
				colvarDefaultValue.DefaultSetting = @"((1))";
				colvarDefaultValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultValue);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Guid;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Guid;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_VendorAlarmComCsEventGroupsToForward",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_VendorAlarmComCsEventGroupsToForward LoadFrom(MS_VendorAlarmComCsEventGroupsToForward item)
		{
			MS_VendorAlarmComCsEventGroupsToForward result = new MS_VendorAlarmComCsEventGroupsToForward();
			if (item.CsEventGroupsToForwardID != default(string)) {
				result.LoadByKey(item.CsEventGroupsToForwardID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CsEventGroupsToForwardID {
			get { return GetColumnValue<string>(Columns.CsEventGroupsToForwardID); }
			set {
				SetColumnValue(Columns.CsEventGroupsToForwardID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CsEventGroupsToForwardID));
			}
		}
		[DataMember]
		public string CsEventGroupsToForwardName {
			get { return GetColumnValue<string>(Columns.CsEventGroupsToForwardName); }
			set {
				SetColumnValue(Columns.CsEventGroupsToForwardName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CsEventGroupsToForwardName));
			}
		}
		[DataMember]
		public string CsEventGroupsToForwardValue {
			get { return GetColumnValue<string>(Columns.CsEventGroupsToForwardValue); }
			set {
				SetColumnValue(Columns.CsEventGroupsToForwardValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CsEventGroupsToForwardValue));
			}
		}
		[DataMember]
		public string CsEventGroupsToForwardDescription {
			get { return GetColumnValue<string>(Columns.CsEventGroupsToForwardDescription); }
			set {
				SetColumnValue(Columns.CsEventGroupsToForwardDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CsEventGroupsToForwardDescription));
			}
		}
		[DataMember]
		public bool DefaultValue {
			get { return GetColumnValue<bool>(Columns.DefaultValue); }
			set {
				SetColumnValue(Columns.DefaultValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultValue));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public Guid ModifiedBy {
			get { return GetColumnValue<Guid>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public Guid CreatedBy {
			get { return GetColumnValue<Guid>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CsEventGroupsToForwardName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CsEventGroupsToForwardIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CsEventGroupsToForwardNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CsEventGroupsToForwardValueColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CsEventGroupsToForwardDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DefaultValueColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CsEventGroupsToForwardID = @"CsEventGroupsToForwardID";
			public static readonly string CsEventGroupsToForwardName = @"CsEventGroupsToForwardName";
			public static readonly string CsEventGroupsToForwardValue = @"CsEventGroupsToForwardValue";
			public static readonly string CsEventGroupsToForwardDescription = @"CsEventGroupsToForwardDescription";
			public static readonly string DefaultValue = @"DefaultValue";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CsEventGroupsToForwardID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_VendorAlarmComCustomerNotification class.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComCustomerNotificationCollection : ActiveList<MS_VendorAlarmComCustomerNotification, MS_VendorAlarmComCustomerNotificationCollection>
	{
		public static MS_VendorAlarmComCustomerNotificationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_VendorAlarmComCustomerNotificationCollection result = new MS_VendorAlarmComCustomerNotificationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_VendorAlarmComCustomerNotification item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_VendorAlarmComCustomerNotifications table.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComCustomerNotification : ActiveRecord<MS_VendorAlarmComCustomerNotification>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_VendorAlarmComCustomerNotification()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_VendorAlarmComCustomerNotifications", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerNotificationsID = new TableSchema.TableColumn(schema);
				colvarCustomerNotificationsID.ColumnName = "CustomerNotificationsID";
				colvarCustomerNotificationsID.DataType = DbType.AnsiString;
				colvarCustomerNotificationsID.MaxLength = 20;
				colvarCustomerNotificationsID.AutoIncrement = false;
				colvarCustomerNotificationsID.IsNullable = false;
				colvarCustomerNotificationsID.IsPrimaryKey = true;
				colvarCustomerNotificationsID.IsForeignKey = false;
				colvarCustomerNotificationsID.IsReadOnly = false;
				colvarCustomerNotificationsID.DefaultSetting = @"";
				colvarCustomerNotificationsID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerNotificationsID);

				TableSchema.TableColumn colvarCustomerNotificationsName = new TableSchema.TableColumn(schema);
				colvarCustomerNotificationsName.ColumnName = "CustomerNotificationsName";
				colvarCustomerNotificationsName.DataType = DbType.String;
				colvarCustomerNotificationsName.MaxLength = 50;
				colvarCustomerNotificationsName.AutoIncrement = false;
				colvarCustomerNotificationsName.IsNullable = false;
				colvarCustomerNotificationsName.IsPrimaryKey = false;
				colvarCustomerNotificationsName.IsForeignKey = false;
				colvarCustomerNotificationsName.IsReadOnly = false;
				colvarCustomerNotificationsName.DefaultSetting = @"";
				colvarCustomerNotificationsName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerNotificationsName);

				TableSchema.TableColumn colvarCustomerNotificationsValue = new TableSchema.TableColumn(schema);
				colvarCustomerNotificationsValue.ColumnName = "CustomerNotificationsValue";
				colvarCustomerNotificationsValue.DataType = DbType.String;
				colvarCustomerNotificationsValue.MaxLength = 50;
				colvarCustomerNotificationsValue.AutoIncrement = false;
				colvarCustomerNotificationsValue.IsNullable = false;
				colvarCustomerNotificationsValue.IsPrimaryKey = false;
				colvarCustomerNotificationsValue.IsForeignKey = false;
				colvarCustomerNotificationsValue.IsReadOnly = false;
				colvarCustomerNotificationsValue.DefaultSetting = @"";
				colvarCustomerNotificationsValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerNotificationsValue);

				TableSchema.TableColumn colvarCustomerNotificationsDescription = new TableSchema.TableColumn(schema);
				colvarCustomerNotificationsDescription.ColumnName = "CustomerNotificationsDescription";
				colvarCustomerNotificationsDescription.DataType = DbType.String;
				colvarCustomerNotificationsDescription.MaxLength = 50;
				colvarCustomerNotificationsDescription.AutoIncrement = false;
				colvarCustomerNotificationsDescription.IsNullable = false;
				colvarCustomerNotificationsDescription.IsPrimaryKey = false;
				colvarCustomerNotificationsDescription.IsForeignKey = false;
				colvarCustomerNotificationsDescription.IsReadOnly = false;
				colvarCustomerNotificationsDescription.DefaultSetting = @"";
				colvarCustomerNotificationsDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerNotificationsDescription);

				TableSchema.TableColumn colvarDefaultValue = new TableSchema.TableColumn(schema);
				colvarDefaultValue.ColumnName = "DefaultValue";
				colvarDefaultValue.DataType = DbType.Boolean;
				colvarDefaultValue.MaxLength = 0;
				colvarDefaultValue.AutoIncrement = false;
				colvarDefaultValue.IsNullable = false;
				colvarDefaultValue.IsPrimaryKey = false;
				colvarDefaultValue.IsForeignKey = false;
				colvarDefaultValue.IsReadOnly = false;
				colvarDefaultValue.DefaultSetting = @"((1))";
				colvarDefaultValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultValue);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Guid;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Guid;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_VendorAlarmComCustomerNotifications",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_VendorAlarmComCustomerNotification LoadFrom(MS_VendorAlarmComCustomerNotification item)
		{
			MS_VendorAlarmComCustomerNotification result = new MS_VendorAlarmComCustomerNotification();
			if (item.CustomerNotificationsID != default(string)) {
				result.LoadByKey(item.CustomerNotificationsID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CustomerNotificationsID {
			get { return GetColumnValue<string>(Columns.CustomerNotificationsID); }
			set {
				SetColumnValue(Columns.CustomerNotificationsID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerNotificationsID));
			}
		}
		[DataMember]
		public string CustomerNotificationsName {
			get { return GetColumnValue<string>(Columns.CustomerNotificationsName); }
			set {
				SetColumnValue(Columns.CustomerNotificationsName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerNotificationsName));
			}
		}
		[DataMember]
		public string CustomerNotificationsValue {
			get { return GetColumnValue<string>(Columns.CustomerNotificationsValue); }
			set {
				SetColumnValue(Columns.CustomerNotificationsValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerNotificationsValue));
			}
		}
		[DataMember]
		public string CustomerNotificationsDescription {
			get { return GetColumnValue<string>(Columns.CustomerNotificationsDescription); }
			set {
				SetColumnValue(Columns.CustomerNotificationsDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerNotificationsDescription));
			}
		}
		[DataMember]
		public bool DefaultValue {
			get { return GetColumnValue<bool>(Columns.DefaultValue); }
			set {
				SetColumnValue(Columns.DefaultValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultValue));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public Guid ModifiedBy {
			get { return GetColumnValue<Guid>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public Guid CreatedBy {
			get { return GetColumnValue<Guid>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CustomerNotificationsName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerNotificationsIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerNotificationsNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerNotificationsValueColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerNotificationsDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DefaultValueColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerNotificationsID = @"CustomerNotificationsID";
			public static readonly string CustomerNotificationsName = @"CustomerNotificationsName";
			public static readonly string CustomerNotificationsValue = @"CustomerNotificationsValue";
			public static readonly string CustomerNotificationsDescription = @"CustomerNotificationsDescription";
			public static readonly string DefaultValue = @"DefaultValue";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerNotificationsID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_VendorAlarmComPackage class.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComPackageCollection : ActiveList<MS_VendorAlarmComPackage, MS_VendorAlarmComPackageCollection>
	{
		public static MS_VendorAlarmComPackageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_VendorAlarmComPackageCollection result = new MS_VendorAlarmComPackageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_VendorAlarmComPackage item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_VendorAlarmComPackages table.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComPackage : ActiveRecord<MS_VendorAlarmComPackage>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_VendorAlarmComPackage()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_VendorAlarmComPackages", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAlarmComPackageID = new TableSchema.TableColumn(schema);
				colvarAlarmComPackageID.ColumnName = "AlarmComPackageID";
				colvarAlarmComPackageID.DataType = DbType.AnsiString;
				colvarAlarmComPackageID.MaxLength = 20;
				colvarAlarmComPackageID.AutoIncrement = false;
				colvarAlarmComPackageID.IsNullable = false;
				colvarAlarmComPackageID.IsPrimaryKey = true;
				colvarAlarmComPackageID.IsForeignKey = false;
				colvarAlarmComPackageID.IsReadOnly = false;
				colvarAlarmComPackageID.DefaultSetting = @"";
				colvarAlarmComPackageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlarmComPackageID);

				TableSchema.TableColumn colvarAlarmComAccountId = new TableSchema.TableColumn(schema);
				colvarAlarmComAccountId.ColumnName = "AlarmComAccountId";
				colvarAlarmComAccountId.DataType = DbType.Int32;
				colvarAlarmComAccountId.MaxLength = 0;
				colvarAlarmComAccountId.AutoIncrement = false;
				colvarAlarmComAccountId.IsNullable = false;
				colvarAlarmComAccountId.IsPrimaryKey = false;
				colvarAlarmComAccountId.IsForeignKey = true;
				colvarAlarmComAccountId.IsReadOnly = false;
				colvarAlarmComAccountId.DefaultSetting = @"((1))";
				colvarAlarmComAccountId.ForeignKeyTableName = "MS_VendorAlarmComAccounts";
				schema.Columns.Add(colvarAlarmComAccountId);

				TableSchema.TableColumn colvarItemId = new TableSchema.TableColumn(schema);
				colvarItemId.ColumnName = "ItemId";
				colvarItemId.DataType = DbType.AnsiString;
				colvarItemId.MaxLength = 50;
				colvarItemId.AutoIncrement = false;
				colvarItemId.IsNullable = true;
				colvarItemId.IsPrimaryKey = false;
				colvarItemId.IsForeignKey = true;
				colvarItemId.IsReadOnly = false;
				colvarItemId.DefaultSetting = @"";
				colvarItemId.ForeignKeyTableName = "AE_Items";
				schema.Columns.Add(colvarItemId);

				TableSchema.TableColumn colvarPackageName = new TableSchema.TableColumn(schema);
				colvarPackageName.ColumnName = "PackageName";
				colvarPackageName.DataType = DbType.String;
				colvarPackageName.MaxLength = 50;
				colvarPackageName.AutoIncrement = false;
				colvarPackageName.IsNullable = false;
				colvarPackageName.IsPrimaryKey = false;
				colvarPackageName.IsForeignKey = false;
				colvarPackageName.IsReadOnly = false;
				colvarPackageName.DefaultSetting = @"";
				colvarPackageName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackageName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarDefaultValue = new TableSchema.TableColumn(schema);
				colvarDefaultValue.ColumnName = "DefaultValue";
				colvarDefaultValue.DataType = DbType.Boolean;
				colvarDefaultValue.MaxLength = 0;
				colvarDefaultValue.AutoIncrement = false;
				colvarDefaultValue.IsNullable = false;
				colvarDefaultValue.IsPrimaryKey = false;
				colvarDefaultValue.IsForeignKey = false;
				colvarDefaultValue.IsReadOnly = false;
				colvarDefaultValue.DefaultSetting = @"((0))";
				colvarDefaultValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultValue);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_VendorAlarmComPackages",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_VendorAlarmComPackage LoadFrom(MS_VendorAlarmComPackage item)
		{
			MS_VendorAlarmComPackage result = new MS_VendorAlarmComPackage();
			if (item.AlarmComPackageID != default(string)) {
				result.LoadByKey(item.AlarmComPackageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string AlarmComPackageID {
			get { return GetColumnValue<string>(Columns.AlarmComPackageID); }
			set {
				SetColumnValue(Columns.AlarmComPackageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AlarmComPackageID));
			}
		}
		[DataMember]
		public int AlarmComAccountId {
			get { return GetColumnValue<int>(Columns.AlarmComAccountId); }
			set {
				SetColumnValue(Columns.AlarmComAccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AlarmComAccountId));
			}
		}
		[DataMember]
		public string ItemId {
			get { return GetColumnValue<string>(Columns.ItemId); }
			set {
				SetColumnValue(Columns.ItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemId));
			}
		}
		[DataMember]
		public string PackageName {
			get { return GetColumnValue<string>(Columns.PackageName); }
			set {
				SetColumnValue(Columns.PackageName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PackageName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public bool DefaultValue {
			get { return GetColumnValue<bool>(Columns.DefaultValue); }
			set {
				SetColumnValue(Columns.DefaultValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultValue));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Item _Item;
		//Relationship: FK_MS_VendorAlarmComPackages_AE_Items
		public AE_Item Item
		{
			get
			{
				if(_Item == null) {
					_Item = AE_Item.FetchByID(this.ItemId);
				}
				return _Item;
			}
			set
			{
				SetColumnValue("ItemId", value.ItemID);
				_Item = value;
			}
		}

		private MS_VendorAlarmComAccount _AlarmComAccount;
		//Relationship: FK_MS_VendorAlarmComPackages_MS_VendorAlarmComAccounts
		public MS_VendorAlarmComAccount AlarmComAccount
		{
			get
			{
				if(_AlarmComAccount == null) {
					_AlarmComAccount = MS_VendorAlarmComAccount.FetchByID(this.AlarmComAccountId);
				}
				return _AlarmComAccount;
			}
			set
			{
				SetColumnValue("AlarmComAccountId", value.AlarmComAccountID);
				_AlarmComAccount = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AlarmComPackageID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AlarmComPackageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AlarmComAccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ItemIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PackageNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DefaultValueColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AlarmComPackageID = @"AlarmComPackageID";
			public static readonly string AlarmComAccountId = @"AlarmComAccountId";
			public static readonly string ItemId = @"ItemId";
			public static readonly string PackageName = @"PackageName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string DefaultValue = @"DefaultValue";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AlarmComPackageID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the MS_VendorAlarmComPanelType class.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComPanelTypeCollection : ActiveList<MS_VendorAlarmComPanelType, MS_VendorAlarmComPanelTypeCollection>
	{
		public static MS_VendorAlarmComPanelTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_VendorAlarmComPanelTypeCollection result = new MS_VendorAlarmComPanelTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_VendorAlarmComPanelType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_VendorAlarmComPanelType table.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComPanelType : ActiveRecord<MS_VendorAlarmComPanelType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_VendorAlarmComPanelType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_VendorAlarmComPanelType", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPanelTypeID = new TableSchema.TableColumn(schema);
				colvarPanelTypeID.ColumnName = "PanelTypeID";
				colvarPanelTypeID.DataType = DbType.AnsiString;
				colvarPanelTypeID.MaxLength = 20;
				colvarPanelTypeID.AutoIncrement = false;
				colvarPanelTypeID.IsNullable = false;
				colvarPanelTypeID.IsPrimaryKey = true;
				colvarPanelTypeID.IsForeignKey = false;
				colvarPanelTypeID.IsReadOnly = false;
				colvarPanelTypeID.DefaultSetting = @"";
				colvarPanelTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeID);

				TableSchema.TableColumn colvarPanelTypeName = new TableSchema.TableColumn(schema);
				colvarPanelTypeName.ColumnName = "PanelTypeName";
				colvarPanelTypeName.DataType = DbType.String;
				colvarPanelTypeName.MaxLength = 50;
				colvarPanelTypeName.AutoIncrement = false;
				colvarPanelTypeName.IsNullable = false;
				colvarPanelTypeName.IsPrimaryKey = false;
				colvarPanelTypeName.IsForeignKey = false;
				colvarPanelTypeName.IsReadOnly = false;
				colvarPanelTypeName.DefaultSetting = @"";
				colvarPanelTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeName);

				TableSchema.TableColumn colvarPanelTypeValue = new TableSchema.TableColumn(schema);
				colvarPanelTypeValue.ColumnName = "PanelTypeValue";
				colvarPanelTypeValue.DataType = DbType.String;
				colvarPanelTypeValue.MaxLength = 50;
				colvarPanelTypeValue.AutoIncrement = false;
				colvarPanelTypeValue.IsNullable = false;
				colvarPanelTypeValue.IsPrimaryKey = false;
				colvarPanelTypeValue.IsForeignKey = false;
				colvarPanelTypeValue.IsReadOnly = false;
				colvarPanelTypeValue.DefaultSetting = @"";
				colvarPanelTypeValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeValue);

				TableSchema.TableColumn colvarPanelTypeDescription = new TableSchema.TableColumn(schema);
				colvarPanelTypeDescription.ColumnName = "PanelTypeDescription";
				colvarPanelTypeDescription.DataType = DbType.String;
				colvarPanelTypeDescription.MaxLength = 50;
				colvarPanelTypeDescription.AutoIncrement = false;
				colvarPanelTypeDescription.IsNullable = false;
				colvarPanelTypeDescription.IsPrimaryKey = false;
				colvarPanelTypeDescription.IsForeignKey = false;
				colvarPanelTypeDescription.IsReadOnly = false;
				colvarPanelTypeDescription.DefaultSetting = @"";
				colvarPanelTypeDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Guid;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarDefaultValue = new TableSchema.TableColumn(schema);
				colvarDefaultValue.ColumnName = "DefaultValue";
				colvarDefaultValue.DataType = DbType.Boolean;
				colvarDefaultValue.MaxLength = 0;
				colvarDefaultValue.AutoIncrement = false;
				colvarDefaultValue.IsNullable = false;
				colvarDefaultValue.IsPrimaryKey = false;
				colvarDefaultValue.IsForeignKey = false;
				colvarDefaultValue.IsReadOnly = false;
				colvarDefaultValue.DefaultSetting = @"((0))";
				colvarDefaultValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultValue);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Guid;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_VendorAlarmComPanelType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_VendorAlarmComPanelType LoadFrom(MS_VendorAlarmComPanelType item)
		{
			MS_VendorAlarmComPanelType result = new MS_VendorAlarmComPanelType();
			if (item.PanelTypeID != default(string)) {
				result.LoadByKey(item.PanelTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string PanelTypeID {
			get { return GetColumnValue<string>(Columns.PanelTypeID); }
			set {
				SetColumnValue(Columns.PanelTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeID));
			}
		}
		[DataMember]
		public string PanelTypeName {
			get { return GetColumnValue<string>(Columns.PanelTypeName); }
			set {
				SetColumnValue(Columns.PanelTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeName));
			}
		}
		[DataMember]
		public string PanelTypeValue {
			get { return GetColumnValue<string>(Columns.PanelTypeValue); }
			set {
				SetColumnValue(Columns.PanelTypeValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeValue));
			}
		}
		[DataMember]
		public string PanelTypeDescription {
			get { return GetColumnValue<string>(Columns.PanelTypeDescription); }
			set {
				SetColumnValue(Columns.PanelTypeDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeDescription));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public Guid ModifiedBy {
			get { return GetColumnValue<Guid>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public bool DefaultValue {
			get { return GetColumnValue<bool>(Columns.DefaultValue); }
			set {
				SetColumnValue(Columns.DefaultValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultValue));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public Guid CreatedBy {
			get { return GetColumnValue<Guid>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return PanelTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PanelTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PanelTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PanelTypeValueColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PanelTypeDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DefaultValueColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PanelTypeID = @"PanelTypeID";
			public static readonly string PanelTypeName = @"PanelTypeName";
			public static readonly string PanelTypeValue = @"PanelTypeValue";
			public static readonly string PanelTypeDescription = @"PanelTypeDescription";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string DefaultValue = @"DefaultValue";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PanelTypeID; }
		}
		*/

		#region Foreign Collections

		private MS_VendorAlarmComPanelVersionCollection _MS_VendorAlarmComPanelVersionsCol;
		//Relationship: FK_MS_VendorAlarmComPanelVersion_MS_VendorAlarmComPanelType
		public MS_VendorAlarmComPanelVersionCollection MS_VendorAlarmComPanelVersionsCol
		{
			get
			{
				if(_MS_VendorAlarmComPanelVersionsCol == null) {
					_MS_VendorAlarmComPanelVersionsCol = new MS_VendorAlarmComPanelVersionCollection();
					_MS_VendorAlarmComPanelVersionsCol.LoadAndCloseReader(MS_VendorAlarmComPanelVersion.Query()
						.WHERE(MS_VendorAlarmComPanelVersion.Columns.PanelTypeId, PanelTypeID).ExecuteReader());
				}
				return _MS_VendorAlarmComPanelVersionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MS_VendorAlarmComPanelVersion class.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComPanelVersionCollection : ActiveList<MS_VendorAlarmComPanelVersion, MS_VendorAlarmComPanelVersionCollection>
	{
		public static MS_VendorAlarmComPanelVersionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MS_VendorAlarmComPanelVersionCollection result = new MS_VendorAlarmComPanelVersionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MS_VendorAlarmComPanelVersion item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MS_VendorAlarmComPanelVersion table.
	/// </summary>
	[DataContract]
	public partial class MS_VendorAlarmComPanelVersion : ActiveRecord<MS_VendorAlarmComPanelVersion>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MS_VendorAlarmComPanelVersion()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MS_VendorAlarmComPanelVersion", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPanelVersionID = new TableSchema.TableColumn(schema);
				colvarPanelVersionID.ColumnName = "PanelVersionID";
				colvarPanelVersionID.DataType = DbType.Int64;
				colvarPanelVersionID.MaxLength = 0;
				colvarPanelVersionID.AutoIncrement = true;
				colvarPanelVersionID.IsNullable = false;
				colvarPanelVersionID.IsPrimaryKey = true;
				colvarPanelVersionID.IsForeignKey = false;
				colvarPanelVersionID.IsReadOnly = false;
				colvarPanelVersionID.DefaultSetting = @"";
				colvarPanelVersionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelVersionID);

				TableSchema.TableColumn colvarPanelTypeId = new TableSchema.TableColumn(schema);
				colvarPanelTypeId.ColumnName = "PanelTypeId";
				colvarPanelTypeId.DataType = DbType.AnsiString;
				colvarPanelTypeId.MaxLength = 20;
				colvarPanelTypeId.AutoIncrement = false;
				colvarPanelTypeId.IsNullable = false;
				colvarPanelTypeId.IsPrimaryKey = false;
				colvarPanelTypeId.IsForeignKey = true;
				colvarPanelTypeId.IsReadOnly = false;
				colvarPanelTypeId.DefaultSetting = @"";
				colvarPanelTypeId.ForeignKeyTableName = "MS_VendorAlarmComPanelType";
				schema.Columns.Add(colvarPanelTypeId);

				TableSchema.TableColumn colvarPanelVersionName = new TableSchema.TableColumn(schema);
				colvarPanelVersionName.ColumnName = "PanelVersionName";
				colvarPanelVersionName.DataType = DbType.String;
				colvarPanelVersionName.MaxLength = 50;
				colvarPanelVersionName.AutoIncrement = false;
				colvarPanelVersionName.IsNullable = false;
				colvarPanelVersionName.IsPrimaryKey = false;
				colvarPanelVersionName.IsForeignKey = false;
				colvarPanelVersionName.IsReadOnly = false;
				colvarPanelVersionName.DefaultSetting = @"";
				colvarPanelVersionName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelVersionName);

				TableSchema.TableColumn colvarPanelVersionValue = new TableSchema.TableColumn(schema);
				colvarPanelVersionValue.ColumnName = "PanelVersionValue";
				colvarPanelVersionValue.DataType = DbType.String;
				colvarPanelVersionValue.MaxLength = 50;
				colvarPanelVersionValue.AutoIncrement = false;
				colvarPanelVersionValue.IsNullable = false;
				colvarPanelVersionValue.IsPrimaryKey = false;
				colvarPanelVersionValue.IsForeignKey = false;
				colvarPanelVersionValue.IsReadOnly = false;
				colvarPanelVersionValue.DefaultSetting = @"";
				colvarPanelVersionValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelVersionValue);

				TableSchema.TableColumn colvarPanelVersionDescription = new TableSchema.TableColumn(schema);
				colvarPanelVersionDescription.ColumnName = "PanelVersionDescription";
				colvarPanelVersionDescription.DataType = DbType.String;
				colvarPanelVersionDescription.MaxLength = 50;
				colvarPanelVersionDescription.AutoIncrement = false;
				colvarPanelVersionDescription.IsNullable = false;
				colvarPanelVersionDescription.IsPrimaryKey = false;
				colvarPanelVersionDescription.IsForeignKey = false;
				colvarPanelVersionDescription.IsReadOnly = false;
				colvarPanelVersionDescription.DefaultSetting = @"";
				colvarPanelVersionDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelVersionDescription);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarDefaultValue = new TableSchema.TableColumn(schema);
				colvarDefaultValue.ColumnName = "DefaultValue";
				colvarDefaultValue.DataType = DbType.Boolean;
				colvarDefaultValue.MaxLength = 0;
				colvarDefaultValue.AutoIncrement = false;
				colvarDefaultValue.IsNullable = false;
				colvarDefaultValue.IsPrimaryKey = false;
				colvarDefaultValue.IsForeignKey = false;
				colvarDefaultValue.IsReadOnly = false;
				colvarDefaultValue.DefaultSetting = @"((0))";
				colvarDefaultValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultValue);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Guid;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Guid;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('10000000-1000-1000-1000-100000000001')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("MS_VendorAlarmComPanelVersion",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MS_VendorAlarmComPanelVersion LoadFrom(MS_VendorAlarmComPanelVersion item)
		{
			MS_VendorAlarmComPanelVersion result = new MS_VendorAlarmComPanelVersion();
			if (item.PanelVersionID != default(long)) {
				result.LoadByKey(item.PanelVersionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long PanelVersionID {
			get { return GetColumnValue<long>(Columns.PanelVersionID); }
			set {
				SetColumnValue(Columns.PanelVersionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelVersionID));
			}
		}
		[DataMember]
		public string PanelTypeId {
			get { return GetColumnValue<string>(Columns.PanelTypeId); }
			set {
				SetColumnValue(Columns.PanelTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeId));
			}
		}
		[DataMember]
		public string PanelVersionName {
			get { return GetColumnValue<string>(Columns.PanelVersionName); }
			set {
				SetColumnValue(Columns.PanelVersionName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelVersionName));
			}
		}
		[DataMember]
		public string PanelVersionValue {
			get { return GetColumnValue<string>(Columns.PanelVersionValue); }
			set {
				SetColumnValue(Columns.PanelVersionValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelVersionValue));
			}
		}
		[DataMember]
		public string PanelVersionDescription {
			get { return GetColumnValue<string>(Columns.PanelVersionDescription); }
			set {
				SetColumnValue(Columns.PanelVersionDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelVersionDescription));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public bool DefaultValue {
			get { return GetColumnValue<bool>(Columns.DefaultValue); }
			set {
				SetColumnValue(Columns.DefaultValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultValue));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public Guid ModifiedBy {
			get { return GetColumnValue<Guid>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public Guid CreatedBy {
			get { return GetColumnValue<Guid>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_VendorAlarmComPanelType _PanelType;
		//Relationship: FK_MS_VendorAlarmComPanelVersion_MS_VendorAlarmComPanelType
		public MS_VendorAlarmComPanelType PanelType
		{
			get
			{
				if(_PanelType == null) {
					_PanelType = MS_VendorAlarmComPanelType.FetchByID(this.PanelTypeId);
				}
				return _PanelType;
			}
			set
			{
				SetColumnValue("PanelTypeId", value.PanelTypeID);
				_PanelType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PanelTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PanelVersionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PanelTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PanelVersionNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PanelVersionValueColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PanelVersionDescriptionColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DefaultValueColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PanelVersionID = @"PanelVersionID";
			public static readonly string PanelTypeId = @"PanelTypeId";
			public static readonly string PanelVersionName = @"PanelVersionName";
			public static readonly string PanelVersionValue = @"PanelVersionValue";
			public static readonly string PanelVersionDescription = @"PanelVersionDescription";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string DefaultValue = @"DefaultValue";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PanelVersionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the NM_Account class.
	/// </summary>
	[DataContract]
	public partial class NM_AccountCollection : ActiveList<NM_Account, NM_AccountCollection>
	{
		public static NM_AccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			NM_AccountCollection result = new NM_AccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (NM_Account item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the NM_Accounts table.
	/// </summary>
	[DataContract]
	public partial class NM_Account : ActiveRecord<NM_Account>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public NM_Account()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("NM_Accounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("NM_Accounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static NM_Account LoadFrom(NM_Account item)
		{
			NM_Account result = new NM_Account();
			if (item.AccountID != default(long)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_Account _Account;
		//Relationship: FK_NM_Accounts_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountID);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountID", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PD_Item class.
	/// </summary>
	[DataContract]
	public partial class PD_ItemCollection : ActiveList<PD_Item, PD_ItemCollection>
	{
		public static PD_ItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PD_ItemCollection result = new PD_ItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PD_Item item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PD_Items table.
	/// </summary>
	[DataContract]
	public partial class PD_Item : ActiveRecord<PD_Item>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PD_Item()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PD_Items", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarItemID = new TableSchema.TableColumn(schema);
				colvarItemID.ColumnName = "ItemID";
				colvarItemID.DataType = DbType.AnsiString;
				colvarItemID.MaxLength = 20;
				colvarItemID.AutoIncrement = false;
				colvarItemID.IsNullable = false;
				colvarItemID.IsPrimaryKey = true;
				colvarItemID.IsForeignKey = false;
				colvarItemID.IsReadOnly = false;
				colvarItemID.DefaultSetting = @"";
				colvarItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemID);

				TableSchema.TableColumn colvarItemName = new TableSchema.TableColumn(schema);
				colvarItemName.ColumnName = "ItemName";
				colvarItemName.DataType = DbType.String;
				colvarItemName.MaxLength = 50;
				colvarItemName.AutoIncrement = false;
				colvarItemName.IsNullable = false;
				colvarItemName.IsPrimaryKey = false;
				colvarItemName.IsForeignKey = false;
				colvarItemName.IsReadOnly = false;
				colvarItemName.DefaultSetting = @"";
				colvarItemName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemName);

				TableSchema.TableColumn colvarItemDesc = new TableSchema.TableColumn(schema);
				colvarItemDesc.ColumnName = "ItemDesc";
				colvarItemDesc.DataType = DbType.String;
				colvarItemDesc.MaxLength = -1;
				colvarItemDesc.AutoIncrement = false;
				colvarItemDesc.IsNullable = true;
				colvarItemDesc.IsPrimaryKey = false;
				colvarItemDesc.IsForeignKey = false;
				colvarItemDesc.IsReadOnly = false;
				colvarItemDesc.DefaultSetting = @"";
				colvarItemDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemDesc);

				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "StartDate";
				colvarStartDate.DataType = DbType.DateTime;
				colvarStartDate.MaxLength = 0;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = true;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);

				TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
				colvarEndDate.ColumnName = "EndDate";
				colvarEndDate.DataType = DbType.DateTime;
				colvarEndDate.MaxLength = 0;
				colvarEndDate.AutoIncrement = false;
				colvarEndDate.IsNullable = true;
				colvarEndDate.IsPrimaryKey = false;
				colvarEndDate.IsForeignKey = false;
				colvarEndDate.IsReadOnly = false;
				colvarEndDate.DefaultSetting = @"";
				colvarEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDate);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("PD_Items",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PD_Item LoadFrom(PD_Item item)
		{
			PD_Item result = new PD_Item();
			if (item.ItemID != default(string)) {
				result.LoadByKey(item.ItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ItemID {
			get { return GetColumnValue<string>(Columns.ItemID); }
			set {
				SetColumnValue(Columns.ItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemID));
			}
		}
		[DataMember]
		public string ItemName {
			get { return GetColumnValue<string>(Columns.ItemName); }
			set {
				SetColumnValue(Columns.ItemName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemName));
			}
		}
		[DataMember]
		public string ItemDesc {
			get { return GetColumnValue<string>(Columns.ItemDesc); }
			set {
				SetColumnValue(Columns.ItemDesc, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ItemDesc));
			}
		}
		[DataMember]
		public DateTime? StartDate {
			get { return GetColumnValue<DateTime?>(Columns.StartDate); }
			set {
				SetColumnValue(Columns.StartDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartDate));
			}
		}
		[DataMember]
		public DateTime? EndDate {
			get { return GetColumnValue<DateTime?>(Columns.EndDate); }
			set {
				SetColumnValue(Columns.EndDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EndDate));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ItemName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ItemNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ItemDescColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn StartDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn EndDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ItemID = @"ItemID";
			public static readonly string ItemName = @"ItemName";
			public static readonly string ItemDesc = @"ItemDesc";
			public static readonly string StartDate = @"StartDate";
			public static readonly string EndDate = @"EndDate";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ItemID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the QL_Address class.
	/// </summary>
	[DataContract]
	public partial class QL_AddressCollection : ActiveList<QL_Address, QL_AddressCollection>
	{
		public static QL_AddressCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_AddressCollection result = new QL_AddressCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_Address item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_Address table.
	/// </summary>
	[DataContract]
	public partial class QL_Address : ActiveRecord<QL_Address>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_Address()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_Address", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressID = new TableSchema.TableColumn(schema);
				colvarAddressID.ColumnName = "AddressID";
				colvarAddressID.DataType = DbType.Int64;
				colvarAddressID.MaxLength = 0;
				colvarAddressID.AutoIncrement = true;
				colvarAddressID.IsNullable = false;
				colvarAddressID.IsPrimaryKey = true;
				colvarAddressID.IsForeignKey = false;
				colvarAddressID.IsReadOnly = false;
				colvarAddressID.DefaultSetting = @"";
				colvarAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"((5000))";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarValidationVendorId = new TableSchema.TableColumn(schema);
				colvarValidationVendorId.ColumnName = "ValidationVendorId";
				colvarValidationVendorId.DataType = DbType.AnsiString;
				colvarValidationVendorId.MaxLength = 20;
				colvarValidationVendorId.AutoIncrement = false;
				colvarValidationVendorId.IsNullable = false;
				colvarValidationVendorId.IsPrimaryKey = false;
				colvarValidationVendorId.IsForeignKey = true;
				colvarValidationVendorId.IsReadOnly = false;
				colvarValidationVendorId.DefaultSetting = @"('NOVENDOR')";
				colvarValidationVendorId.ForeignKeyTableName = "MC_AddressValidationVendors";
				schema.Columns.Add(colvarValidationVendorId);

				TableSchema.TableColumn colvarAddressValidationStateId = new TableSchema.TableColumn(schema);
				colvarAddressValidationStateId.ColumnName = "AddressValidationStateId";
				colvarAddressValidationStateId.DataType = DbType.AnsiString;
				colvarAddressValidationStateId.MaxLength = 5;
				colvarAddressValidationStateId.AutoIncrement = false;
				colvarAddressValidationStateId.IsNullable = false;
				colvarAddressValidationStateId.IsPrimaryKey = false;
				colvarAddressValidationStateId.IsForeignKey = true;
				colvarAddressValidationStateId.IsReadOnly = false;
				colvarAddressValidationStateId.DefaultSetting = @"('UNV')";
				colvarAddressValidationStateId.ForeignKeyTableName = "MC_AddressValidationStates";
				schema.Columns.Add(colvarAddressValidationStateId);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = true;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "MC_PoliticalStates";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = false;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = true;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"(N'USA')";
				colvarCountryId.ForeignKeyTableName = "MC_PoliticalCountrys";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarTimeZoneId = new TableSchema.TableColumn(schema);
				colvarTimeZoneId.ColumnName = "TimeZoneId";
				colvarTimeZoneId.DataType = DbType.Int32;
				colvarTimeZoneId.MaxLength = 0;
				colvarTimeZoneId.AutoIncrement = false;
				colvarTimeZoneId.IsNullable = false;
				colvarTimeZoneId.IsPrimaryKey = false;
				colvarTimeZoneId.IsForeignKey = true;
				colvarTimeZoneId.IsReadOnly = false;
				colvarTimeZoneId.DefaultSetting = @"((7))";
				colvarTimeZoneId.ForeignKeyTableName = "MC_PoliticalTimeZones";
				schema.Columns.Add(colvarTimeZoneId);

				TableSchema.TableColumn colvarAddressTypeId = new TableSchema.TableColumn(schema);
				colvarAddressTypeId.ColumnName = "AddressTypeId";
				colvarAddressTypeId.DataType = DbType.AnsiString;
				colvarAddressTypeId.MaxLength = 10;
				colvarAddressTypeId.AutoIncrement = false;
				colvarAddressTypeId.IsNullable = false;
				colvarAddressTypeId.IsPrimaryKey = false;
				colvarAddressTypeId.IsForeignKey = true;
				colvarAddressTypeId.IsReadOnly = false;
				colvarAddressTypeId.DefaultSetting = @"('N')";
				colvarAddressTypeId.ForeignKeyTableName = "MC_AddressTypes";
				schema.Columns.Add(colvarAddressTypeId);

				TableSchema.TableColumn colvarSeasonId = new TableSchema.TableColumn(schema);
				colvarSeasonId.ColumnName = "SeasonId";
				colvarSeasonId.DataType = DbType.Int32;
				colvarSeasonId.MaxLength = 0;
				colvarSeasonId.AutoIncrement = false;
				colvarSeasonId.IsNullable = false;
				colvarSeasonId.IsPrimaryKey = false;
				colvarSeasonId.IsForeignKey = false;
				colvarSeasonId.IsReadOnly = false;
				colvarSeasonId.DefaultSetting = @"((1))";
				colvarSeasonId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonId);

				TableSchema.TableColumn colvarTeamLocationId = new TableSchema.TableColumn(schema);
				colvarTeamLocationId.ColumnName = "TeamLocationId";
				colvarTeamLocationId.DataType = DbType.Int32;
				colvarTeamLocationId.MaxLength = 0;
				colvarTeamLocationId.AutoIncrement = false;
				colvarTeamLocationId.IsNullable = false;
				colvarTeamLocationId.IsPrimaryKey = false;
				colvarTeamLocationId.IsForeignKey = false;
				colvarTeamLocationId.IsReadOnly = false;
				colvarTeamLocationId.DefaultSetting = @"((1))";
				colvarTeamLocationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationId);

				TableSchema.TableColumn colvarSalesRepId = new TableSchema.TableColumn(schema);
				colvarSalesRepId.ColumnName = "SalesRepId";
				colvarSalesRepId.DataType = DbType.String;
				colvarSalesRepId.MaxLength = 25;
				colvarSalesRepId.AutoIncrement = false;
				colvarSalesRepId.IsNullable = false;
				colvarSalesRepId.IsPrimaryKey = false;
				colvarSalesRepId.IsForeignKey = false;
				colvarSalesRepId.IsReadOnly = false;
				colvarSalesRepId.DefaultSetting = @"(N'SOSA001')";
				colvarSalesRepId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepId);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = false;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarStreetNumber = new TableSchema.TableColumn(schema);
				colvarStreetNumber.ColumnName = "StreetNumber";
				colvarStreetNumber.DataType = DbType.String;
				colvarStreetNumber.MaxLength = 40;
				colvarStreetNumber.AutoIncrement = false;
				colvarStreetNumber.IsNullable = true;
				colvarStreetNumber.IsPrimaryKey = false;
				colvarStreetNumber.IsForeignKey = false;
				colvarStreetNumber.IsReadOnly = false;
				colvarStreetNumber.DefaultSetting = @"";
				colvarStreetNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetNumber);

				TableSchema.TableColumn colvarStreetName = new TableSchema.TableColumn(schema);
				colvarStreetName.ColumnName = "StreetName";
				colvarStreetName.DataType = DbType.String;
				colvarStreetName.MaxLength = 50;
				colvarStreetName.AutoIncrement = false;
				colvarStreetName.IsNullable = true;
				colvarStreetName.IsPrimaryKey = false;
				colvarStreetName.IsForeignKey = false;
				colvarStreetName.IsReadOnly = false;
				colvarStreetName.DefaultSetting = @"";
				colvarStreetName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetName);

				TableSchema.TableColumn colvarStreetType = new TableSchema.TableColumn(schema);
				colvarStreetType.ColumnName = "StreetType";
				colvarStreetType.DataType = DbType.String;
				colvarStreetType.MaxLength = 20;
				colvarStreetType.AutoIncrement = false;
				colvarStreetType.IsNullable = true;
				colvarStreetType.IsPrimaryKey = false;
				colvarStreetType.IsForeignKey = false;
				colvarStreetType.IsReadOnly = false;
				colvarStreetType.DefaultSetting = @"";
				colvarStreetType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetType);

				TableSchema.TableColumn colvarPreDirectional = new TableSchema.TableColumn(schema);
				colvarPreDirectional.ColumnName = "PreDirectional";
				colvarPreDirectional.DataType = DbType.String;
				colvarPreDirectional.MaxLength = 20;
				colvarPreDirectional.AutoIncrement = false;
				colvarPreDirectional.IsNullable = true;
				colvarPreDirectional.IsPrimaryKey = false;
				colvarPreDirectional.IsForeignKey = false;
				colvarPreDirectional.IsReadOnly = false;
				colvarPreDirectional.DefaultSetting = @"";
				colvarPreDirectional.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreDirectional);

				TableSchema.TableColumn colvarPostDirectional = new TableSchema.TableColumn(schema);
				colvarPostDirectional.ColumnName = "PostDirectional";
				colvarPostDirectional.DataType = DbType.String;
				colvarPostDirectional.MaxLength = 20;
				colvarPostDirectional.AutoIncrement = false;
				colvarPostDirectional.IsNullable = true;
				colvarPostDirectional.IsPrimaryKey = false;
				colvarPostDirectional.IsForeignKey = false;
				colvarPostDirectional.IsReadOnly = false;
				colvarPostDirectional.DefaultSetting = @"";
				colvarPostDirectional.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostDirectional);

				TableSchema.TableColumn colvarExtension = new TableSchema.TableColumn(schema);
				colvarExtension.ColumnName = "Extension";
				colvarExtension.DataType = DbType.String;
				colvarExtension.MaxLength = 50;
				colvarExtension.AutoIncrement = false;
				colvarExtension.IsNullable = true;
				colvarExtension.IsPrimaryKey = false;
				colvarExtension.IsForeignKey = false;
				colvarExtension.IsReadOnly = false;
				colvarExtension.DefaultSetting = @"";
				colvarExtension.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtension);

				TableSchema.TableColumn colvarExtensionNumber = new TableSchema.TableColumn(schema);
				colvarExtensionNumber.ColumnName = "ExtensionNumber";
				colvarExtensionNumber.DataType = DbType.String;
				colvarExtensionNumber.MaxLength = 50;
				colvarExtensionNumber.AutoIncrement = false;
				colvarExtensionNumber.IsNullable = true;
				colvarExtensionNumber.IsPrimaryKey = false;
				colvarExtensionNumber.IsForeignKey = false;
				colvarExtensionNumber.IsReadOnly = false;
				colvarExtensionNumber.DefaultSetting = @"";
				colvarExtensionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtensionNumber);

				TableSchema.TableColumn colvarCounty = new TableSchema.TableColumn(schema);
				colvarCounty.ColumnName = "County";
				colvarCounty.DataType = DbType.String;
				colvarCounty.MaxLength = 50;
				colvarCounty.AutoIncrement = false;
				colvarCounty.IsNullable = true;
				colvarCounty.IsPrimaryKey = false;
				colvarCounty.IsForeignKey = false;
				colvarCounty.IsReadOnly = false;
				colvarCounty.DefaultSetting = @"";
				colvarCounty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCounty);

				TableSchema.TableColumn colvarCountyCode = new TableSchema.TableColumn(schema);
				colvarCountyCode.ColumnName = "CountyCode";
				colvarCountyCode.DataType = DbType.String;
				colvarCountyCode.MaxLength = 6;
				colvarCountyCode.AutoIncrement = false;
				colvarCountyCode.IsNullable = true;
				colvarCountyCode.IsPrimaryKey = false;
				colvarCountyCode.IsForeignKey = false;
				colvarCountyCode.IsReadOnly = false;
				colvarCountyCode.DefaultSetting = @"";
				colvarCountyCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountyCode);

				TableSchema.TableColumn colvarUrbanization = new TableSchema.TableColumn(schema);
				colvarUrbanization.ColumnName = "Urbanization";
				colvarUrbanization.DataType = DbType.String;
				colvarUrbanization.MaxLength = 50;
				colvarUrbanization.AutoIncrement = false;
				colvarUrbanization.IsNullable = true;
				colvarUrbanization.IsPrimaryKey = false;
				colvarUrbanization.IsForeignKey = false;
				colvarUrbanization.IsReadOnly = false;
				colvarUrbanization.DefaultSetting = @"";
				colvarUrbanization.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUrbanization);

				TableSchema.TableColumn colvarUrbanizationCode = new TableSchema.TableColumn(schema);
				colvarUrbanizationCode.ColumnName = "UrbanizationCode";
				colvarUrbanizationCode.DataType = DbType.String;
				colvarUrbanizationCode.MaxLength = 3;
				colvarUrbanizationCode.AutoIncrement = false;
				colvarUrbanizationCode.IsNullable = true;
				colvarUrbanizationCode.IsPrimaryKey = false;
				colvarUrbanizationCode.IsForeignKey = false;
				colvarUrbanizationCode.IsReadOnly = false;
				colvarUrbanizationCode.DefaultSetting = @"";
				colvarUrbanizationCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUrbanizationCode);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.String;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarPlusFour = new TableSchema.TableColumn(schema);
				colvarPlusFour.ColumnName = "PlusFour";
				colvarPlusFour.DataType = DbType.String;
				colvarPlusFour.MaxLength = 4;
				colvarPlusFour.AutoIncrement = false;
				colvarPlusFour.IsNullable = true;
				colvarPlusFour.IsPrimaryKey = false;
				colvarPlusFour.IsForeignKey = false;
				colvarPlusFour.IsReadOnly = false;
				colvarPlusFour.DefaultSetting = @"";
				colvarPlusFour.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlusFour);

				TableSchema.TableColumn colvarPostalCodeFull = new TableSchema.TableColumn(schema);
				colvarPostalCodeFull.ColumnName = "PostalCodeFull";
				colvarPostalCodeFull.DataType = DbType.AnsiString;
				colvarPostalCodeFull.MaxLength = 15;
				colvarPostalCodeFull.AutoIncrement = false;
				colvarPostalCodeFull.IsNullable = true;
				colvarPostalCodeFull.IsPrimaryKey = false;
				colvarPostalCodeFull.IsForeignKey = false;
				colvarPostalCodeFull.IsReadOnly = false;
				colvarPostalCodeFull.DefaultSetting = @"";
				colvarPostalCodeFull.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCodeFull);

				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "Phone";
				colvarPhone.DataType = DbType.AnsiString;
				colvarPhone.MaxLength = 20;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = true;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				colvarPhone.DefaultSetting = @"";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);

				TableSchema.TableColumn colvarDeliveryPoint = new TableSchema.TableColumn(schema);
				colvarDeliveryPoint.ColumnName = "DeliveryPoint";
				colvarDeliveryPoint.DataType = DbType.String;
				colvarDeliveryPoint.MaxLength = 2;
				colvarDeliveryPoint.AutoIncrement = false;
				colvarDeliveryPoint.IsNullable = true;
				colvarDeliveryPoint.IsPrimaryKey = false;
				colvarDeliveryPoint.IsForeignKey = false;
				colvarDeliveryPoint.IsReadOnly = false;
				colvarDeliveryPoint.DefaultSetting = @"";
				colvarDeliveryPoint.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryPoint);

				TableSchema.TableColumn colvarCrossStreet = new TableSchema.TableColumn(schema);
				colvarCrossStreet.ColumnName = "CrossStreet";
				colvarCrossStreet.DataType = DbType.AnsiString;
				colvarCrossStreet.MaxLength = 50;
				colvarCrossStreet.AutoIncrement = false;
				colvarCrossStreet.IsNullable = true;
				colvarCrossStreet.IsPrimaryKey = false;
				colvarCrossStreet.IsForeignKey = false;
				colvarCrossStreet.IsReadOnly = false;
				colvarCrossStreet.DefaultSetting = @"";
				colvarCrossStreet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCrossStreet);

				TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
				colvarLatitude.ColumnName = "Latitude";
				colvarLatitude.DataType = DbType.Double;
				colvarLatitude.MaxLength = 0;
				colvarLatitude.AutoIncrement = false;
				colvarLatitude.IsNullable = false;
				colvarLatitude.IsPrimaryKey = false;
				colvarLatitude.IsForeignKey = false;
				colvarLatitude.IsReadOnly = false;
				colvarLatitude.DefaultSetting = @"((0))";
				colvarLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitude);

				TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
				colvarLongitude.ColumnName = "Longitude";
				colvarLongitude.DataType = DbType.Double;
				colvarLongitude.MaxLength = 0;
				colvarLongitude.AutoIncrement = false;
				colvarLongitude.IsNullable = false;
				colvarLongitude.IsPrimaryKey = false;
				colvarLongitude.IsForeignKey = false;
				colvarLongitude.IsReadOnly = false;
				colvarLongitude.DefaultSetting = @"((0))";
				colvarLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitude);

				TableSchema.TableColumn colvarCongressionalDistric = new TableSchema.TableColumn(schema);
				colvarCongressionalDistric.ColumnName = "CongressionalDistric";
				colvarCongressionalDistric.DataType = DbType.Int32;
				colvarCongressionalDistric.MaxLength = 0;
				colvarCongressionalDistric.AutoIncrement = false;
				colvarCongressionalDistric.IsNullable = true;
				colvarCongressionalDistric.IsPrimaryKey = false;
				colvarCongressionalDistric.IsForeignKey = false;
				colvarCongressionalDistric.IsReadOnly = false;
				colvarCongressionalDistric.DefaultSetting = @"";
				colvarCongressionalDistric.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCongressionalDistric);

				TableSchema.TableColumn colvarDPV = new TableSchema.TableColumn(schema);
				colvarDPV.ColumnName = "DPV";
				colvarDPV.DataType = DbType.Boolean;
				colvarDPV.MaxLength = 0;
				colvarDPV.AutoIncrement = false;
				colvarDPV.IsNullable = false;
				colvarDPV.IsPrimaryKey = false;
				colvarDPV.IsForeignKey = false;
				colvarDPV.IsReadOnly = false;
				colvarDPV.DefaultSetting = @"((0))";
				colvarDPV.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDPV);

				TableSchema.TableColumn colvarDPVResponse = new TableSchema.TableColumn(schema);
				colvarDPVResponse.ColumnName = "DPVResponse";
				colvarDPVResponse.DataType = DbType.AnsiStringFixedLength;
				colvarDPVResponse.MaxLength = 10;
				colvarDPVResponse.AutoIncrement = false;
				colvarDPVResponse.IsNullable = true;
				colvarDPVResponse.IsPrimaryKey = false;
				colvarDPVResponse.IsForeignKey = false;
				colvarDPVResponse.IsReadOnly = false;
				colvarDPVResponse.DefaultSetting = @"";
				colvarDPVResponse.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDPVResponse);

				TableSchema.TableColumn colvarDPVFootnote = new TableSchema.TableColumn(schema);
				colvarDPVFootnote.ColumnName = "DPVFootnote";
				colvarDPVFootnote.DataType = DbType.AnsiString;
				colvarDPVFootnote.MaxLength = 50;
				colvarDPVFootnote.AutoIncrement = false;
				colvarDPVFootnote.IsNullable = true;
				colvarDPVFootnote.IsPrimaryKey = false;
				colvarDPVFootnote.IsForeignKey = false;
				colvarDPVFootnote.IsReadOnly = false;
				colvarDPVFootnote.DefaultSetting = @"";
				colvarDPVFootnote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDPVFootnote);

				TableSchema.TableColumn colvarCarrierRoute = new TableSchema.TableColumn(schema);
				colvarCarrierRoute.ColumnName = "CarrierRoute";
				colvarCarrierRoute.DataType = DbType.AnsiString;
				colvarCarrierRoute.MaxLength = 50;
				colvarCarrierRoute.AutoIncrement = false;
				colvarCarrierRoute.IsNullable = true;
				colvarCarrierRoute.IsPrimaryKey = false;
				colvarCarrierRoute.IsForeignKey = false;
				colvarCarrierRoute.IsReadOnly = false;
				colvarCarrierRoute.DefaultSetting = @"";
				colvarCarrierRoute.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCarrierRoute);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_Address",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_Address LoadFrom(QL_Address item)
		{
			QL_Address result = new QL_Address();
			if (item.AddressID != default(long)) {
				result.LoadByKey(item.AddressID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AddressID {
			get { return GetColumnValue<long>(Columns.AddressID); }
			set {
				SetColumnValue(Columns.AddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressID));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string ValidationVendorId {
			get { return GetColumnValue<string>(Columns.ValidationVendorId); }
			set {
				SetColumnValue(Columns.ValidationVendorId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ValidationVendorId));
			}
		}
		[DataMember]
		public string AddressValidationStateId {
			get { return GetColumnValue<string>(Columns.AddressValidationStateId); }
			set {
				SetColumnValue(Columns.AddressValidationStateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressValidationStateId));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set {
				SetColumnValue(Columns.CountryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryId));
			}
		}
		[DataMember]
		public int TimeZoneId {
			get { return GetColumnValue<int>(Columns.TimeZoneId); }
			set {
				SetColumnValue(Columns.TimeZoneId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneId));
			}
		}
		[DataMember]
		public string AddressTypeId {
			get { return GetColumnValue<string>(Columns.AddressTypeId); }
			set {
				SetColumnValue(Columns.AddressTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressTypeId));
			}
		}
		[DataMember]
		public int SeasonId {
			get { return GetColumnValue<int>(Columns.SeasonId); }
			set {
				SetColumnValue(Columns.SeasonId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonId));
			}
		}
		[DataMember]
		public int TeamLocationId {
			get { return GetColumnValue<int>(Columns.TeamLocationId); }
			set {
				SetColumnValue(Columns.TeamLocationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationId));
			}
		}
		[DataMember]
		public string SalesRepId {
			get { return GetColumnValue<string>(Columns.SalesRepId); }
			set {
				SetColumnValue(Columns.SalesRepId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesRepId));
			}
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set {
				SetColumnValue(Columns.StreetAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress));
			}
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set {
				SetColumnValue(Columns.StreetAddress2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress2));
			}
		}
		[DataMember]
		public string StreetNumber {
			get { return GetColumnValue<string>(Columns.StreetNumber); }
			set {
				SetColumnValue(Columns.StreetNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetNumber));
			}
		}
		[DataMember]
		public string StreetName {
			get { return GetColumnValue<string>(Columns.StreetName); }
			set {
				SetColumnValue(Columns.StreetName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetName));
			}
		}
		[DataMember]
		public string StreetType {
			get { return GetColumnValue<string>(Columns.StreetType); }
			set {
				SetColumnValue(Columns.StreetType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetType));
			}
		}
		[DataMember]
		public string PreDirectional {
			get { return GetColumnValue<string>(Columns.PreDirectional); }
			set {
				SetColumnValue(Columns.PreDirectional, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreDirectional));
			}
		}
		[DataMember]
		public string PostDirectional {
			get { return GetColumnValue<string>(Columns.PostDirectional); }
			set {
				SetColumnValue(Columns.PostDirectional, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostDirectional));
			}
		}
		[DataMember]
		public string Extension {
			get { return GetColumnValue<string>(Columns.Extension); }
			set {
				SetColumnValue(Columns.Extension, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Extension));
			}
		}
		[DataMember]
		public string ExtensionNumber {
			get { return GetColumnValue<string>(Columns.ExtensionNumber); }
			set {
				SetColumnValue(Columns.ExtensionNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExtensionNumber));
			}
		}
		[DataMember]
		public string County {
			get { return GetColumnValue<string>(Columns.County); }
			set {
				SetColumnValue(Columns.County, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.County));
			}
		}
		[DataMember]
		public string CountyCode {
			get { return GetColumnValue<string>(Columns.CountyCode); }
			set {
				SetColumnValue(Columns.CountyCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountyCode));
			}
		}
		[DataMember]
		public string Urbanization {
			get { return GetColumnValue<string>(Columns.Urbanization); }
			set {
				SetColumnValue(Columns.Urbanization, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Urbanization));
			}
		}
		[DataMember]
		public string UrbanizationCode {
			get { return GetColumnValue<string>(Columns.UrbanizationCode); }
			set {
				SetColumnValue(Columns.UrbanizationCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UrbanizationCode));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set {
				SetColumnValue(Columns.PostalCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostalCode));
			}
		}
		[DataMember]
		public string PlusFour {
			get { return GetColumnValue<string>(Columns.PlusFour); }
			set {
				SetColumnValue(Columns.PlusFour, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PlusFour));
			}
		}
		[DataMember]
		public string PostalCodeFull {
			get { return GetColumnValue<string>(Columns.PostalCodeFull); }
			set {
				SetColumnValue(Columns.PostalCodeFull, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostalCodeFull));
			}
		}
		[DataMember]
		public string Phone {
			get { return GetColumnValue<string>(Columns.Phone); }
			set {
				SetColumnValue(Columns.Phone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone));
			}
		}
		[DataMember]
		public string DeliveryPoint {
			get { return GetColumnValue<string>(Columns.DeliveryPoint); }
			set {
				SetColumnValue(Columns.DeliveryPoint, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DeliveryPoint));
			}
		}
		[DataMember]
		public string CrossStreet {
			get { return GetColumnValue<string>(Columns.CrossStreet); }
			set {
				SetColumnValue(Columns.CrossStreet, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CrossStreet));
			}
		}
		[DataMember]
		public double Latitude {
			get { return GetColumnValue<double>(Columns.Latitude); }
			set {
				SetColumnValue(Columns.Latitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Latitude));
			}
		}
		[DataMember]
		public double Longitude {
			get { return GetColumnValue<double>(Columns.Longitude); }
			set {
				SetColumnValue(Columns.Longitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Longitude));
			}
		}
		[DataMember]
		public int? CongressionalDistric {
			get { return GetColumnValue<int?>(Columns.CongressionalDistric); }
			set {
				SetColumnValue(Columns.CongressionalDistric, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CongressionalDistric));
			}
		}
		[DataMember]
		public bool DPV {
			get { return GetColumnValue<bool>(Columns.DPV); }
			set {
				SetColumnValue(Columns.DPV, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DPV));
			}
		}
		[DataMember]
		public string DPVResponse {
			get { return GetColumnValue<string>(Columns.DPVResponse); }
			set {
				SetColumnValue(Columns.DPVResponse, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DPVResponse));
			}
		}
		[DataMember]
		public string DPVFootnote {
			get { return GetColumnValue<string>(Columns.DPVFootnote); }
			set {
				SetColumnValue(Columns.DPVFootnote, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DPVFootnote));
			}
		}
		[DataMember]
		public string CarrierRoute {
			get { return GetColumnValue<string>(Columns.CarrierRoute); }
			set {
				SetColumnValue(Columns.CarrierRoute, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CarrierRoute));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Dealer _Dealer;
		//Relationship: FK_QL_Address_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		private MC_AddressType _AddressType;
		//Relationship: FK_QL_Address_MC_AddressTypes
		public MC_AddressType AddressType
		{
			get
			{
				if(_AddressType == null) {
					_AddressType = MC_AddressType.FetchByID(this.AddressTypeId);
				}
				return _AddressType;
			}
			set
			{
				SetColumnValue("AddressTypeId", value.AddressTypeID);
				_AddressType = value;
			}
		}

		private MC_AddressValidationState _AddressValidationState;
		//Relationship: FK_QL_Address_MC_AddressValidationStates
		public MC_AddressValidationState AddressValidationState
		{
			get
			{
				if(_AddressValidationState == null) {
					_AddressValidationState = MC_AddressValidationState.FetchByID(this.AddressValidationStateId);
				}
				return _AddressValidationState;
			}
			set
			{
				SetColumnValue("AddressValidationStateId", value.AddressValidationStateID);
				_AddressValidationState = value;
			}
		}

		private MC_AddressValidationVendor _ValidationVendor;
		//Relationship: FK_QL_Address_MC_AddressValidationVendors
		public MC_AddressValidationVendor ValidationVendor
		{
			get
			{
				if(_ValidationVendor == null) {
					_ValidationVendor = MC_AddressValidationVendor.FetchByID(this.ValidationVendorId);
				}
				return _ValidationVendor;
			}
			set
			{
				SetColumnValue("ValidationVendorId", value.ValidationVendorID);
				_ValidationVendor = value;
			}
		}

		private MC_PoliticalCountry _Country;
		//Relationship: FK_QL_Address_MC_PoliticalCountrys
		public MC_PoliticalCountry Country
		{
			get
			{
				if(_Country == null) {
					_Country = MC_PoliticalCountry.FetchByID(this.CountryId);
				}
				return _Country;
			}
			set
			{
				SetColumnValue("CountryId", value.CountryID);
				_Country = value;
			}
		}

		private MC_PoliticalState _State;
		//Relationship: FK_QL_Address_MC_PoliticalStates
		public MC_PoliticalState State
		{
			get
			{
				if(_State == null) {
					_State = MC_PoliticalState.FetchByID(this.StateId);
				}
				return _State;
			}
			set
			{
				SetColumnValue("StateId", value.StateID);
				_State = value;
			}
		}

		private MC_PoliticalTimeZone _TimeZone;
		//Relationship: FK_QL_Address_MC_PoliticalTimeZones
		public MC_PoliticalTimeZone TimeZone
		{
			get
			{
				if(_TimeZone == null) {
					_TimeZone = MC_PoliticalTimeZone.FetchByID(this.TimeZoneId);
				}
				return _TimeZone;
			}
			set
			{
				SetColumnValue("TimeZoneId", value.TimeZoneID);
				_TimeZone = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AddressID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ValidationVendorIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AddressValidationStateIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TimeZoneIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AddressTypeIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn SeasonIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn TeamLocationIdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn SalesRepIdColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn StreetNumberColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn StreetNameColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn StreetTypeColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn PreDirectionalColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn PostDirectionalColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ExtensionColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn ExtensionNumberColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn CountyColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CountyCodeColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn UrbanizationColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn UrbanizationCodeColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn PlusFourColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn PostalCodeFullColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn PhoneColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn DeliveryPointColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn CrossStreetColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn LatitudeColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn LongitudeColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn CongressionalDistricColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn DPVColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn DPVResponseColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn DPVFootnoteColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn CarrierRouteColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[41]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddressID = @"AddressID";
			public static readonly string DealerId = @"DealerId";
			public static readonly string ValidationVendorId = @"ValidationVendorId";
			public static readonly string AddressValidationStateId = @"AddressValidationStateId";
			public static readonly string StateId = @"StateId";
			public static readonly string CountryId = @"CountryId";
			public static readonly string TimeZoneId = @"TimeZoneId";
			public static readonly string AddressTypeId = @"AddressTypeId";
			public static readonly string SeasonId = @"SeasonId";
			public static readonly string TeamLocationId = @"TeamLocationId";
			public static readonly string SalesRepId = @"SalesRepId";
			public static readonly string StreetAddress = @"StreetAddress";
			public static readonly string StreetAddress2 = @"StreetAddress2";
			public static readonly string StreetNumber = @"StreetNumber";
			public static readonly string StreetName = @"StreetName";
			public static readonly string StreetType = @"StreetType";
			public static readonly string PreDirectional = @"PreDirectional";
			public static readonly string PostDirectional = @"PostDirectional";
			public static readonly string Extension = @"Extension";
			public static readonly string ExtensionNumber = @"ExtensionNumber";
			public static readonly string County = @"County";
			public static readonly string CountyCode = @"CountyCode";
			public static readonly string Urbanization = @"Urbanization";
			public static readonly string UrbanizationCode = @"UrbanizationCode";
			public static readonly string City = @"City";
			public static readonly string PostalCode = @"PostalCode";
			public static readonly string PlusFour = @"PlusFour";
			public static readonly string PostalCodeFull = @"PostalCodeFull";
			public static readonly string Phone = @"Phone";
			public static readonly string DeliveryPoint = @"DeliveryPoint";
			public static readonly string CrossStreet = @"CrossStreet";
			public static readonly string Latitude = @"Latitude";
			public static readonly string Longitude = @"Longitude";
			public static readonly string CongressionalDistric = @"CongressionalDistric";
			public static readonly string DPV = @"DPV";
			public static readonly string DPVResponse = @"DPVResponse";
			public static readonly string DPVFootnote = @"DPVFootnote";
			public static readonly string CarrierRoute = @"CarrierRoute";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddressID; }
		}
		*/

		#region Foreign Collections

		private MC_AddressCollection _MC_AddressesCol;
		//Relationship: FK_MC_Addresses_QL_Address
		public MC_AddressCollection MC_AddressesCol
		{
			get
			{
				if(_MC_AddressesCol == null) {
					_MC_AddressesCol = new MC_AddressCollection();
					_MC_AddressesCol.LoadAndCloseReader(MC_Address.Query()
						.WHERE(MC_Address.Columns.QlAddressId, AddressID).ExecuteReader());
				}
				return _MC_AddressesCol;
			}
		}

		private QL_AddressCoordCollection _QL_AddressCoordsCol;
		//Relationship: FK_QL_AddressCoords_QL_Address
		public QL_AddressCoordCollection QL_AddressCoordsCol
		{
			get
			{
				if(_QL_AddressCoordsCol == null) {
					_QL_AddressCoordsCol = new QL_AddressCoordCollection();
					_QL_AddressCoordsCol.LoadAndCloseReader(QL_AddressCoord.Query()
						.WHERE(QL_AddressCoord.Columns.AddressID, AddressID).ExecuteReader());
				}
				return _QL_AddressCoordsCol;
			}
		}

		private QL_CreditReportCollection _QL_CreditReportsCol;
		//Relationship: FK_QL_CreditReports_QL_Address
		public QL_CreditReportCollection QL_CreditReportsCol
		{
			get
			{
				if(_QL_CreditReportsCol == null) {
					_QL_CreditReportsCol = new QL_CreditReportCollection();
					_QL_CreditReportsCol.LoadAndCloseReader(QL_CreditReport.Query()
						.WHERE(QL_CreditReport.Columns.AddressId, AddressID).ExecuteReader());
				}
				return _QL_CreditReportsCol;
			}
		}

		private QL_LeadAddressCollection _QL_LeadAddressesCol;
		//Relationship: FK_QL_LeadAddress_QL_Address
		public QL_LeadAddressCollection QL_LeadAddressesCol
		{
			get
			{
				if(_QL_LeadAddressesCol == null) {
					_QL_LeadAddressesCol = new QL_LeadAddressCollection();
					_QL_LeadAddressesCol.LoadAndCloseReader(QL_LeadAddress.Query()
						.WHERE(QL_LeadAddress.Columns.AddressId, AddressID).ExecuteReader());
				}
				return _QL_LeadAddressesCol;
			}
		}

		private QL_LeadCollection _QL_LeadsCol;
		//Relationship: FK_QL_Leads_QL_Address
		public QL_LeadCollection QL_LeadsCol
		{
			get
			{
				if(_QL_LeadsCol == null) {
					_QL_LeadsCol = new QL_LeadCollection();
					_QL_LeadsCol.LoadAndCloseReader(QL_Lead.Query()
						.WHERE(QL_Lead.Columns.AddressId, AddressID).ExecuteReader());
				}
				return _QL_LeadsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QL_AddressCoord class.
	/// </summary>
	[DataContract]
	public partial class QL_AddressCoordCollection : ActiveList<QL_AddressCoord, QL_AddressCoordCollection>
	{
		public static QL_AddressCoordCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_AddressCoordCollection result = new QL_AddressCoordCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_AddressCoord item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_AddressCoords table.
	/// </summary>
	[DataContract]
	public partial class QL_AddressCoord : ActiveRecord<QL_AddressCoord>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_AddressCoord()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_AddressCoords", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressID = new TableSchema.TableColumn(schema);
				colvarAddressID.ColumnName = "AddressID";
				colvarAddressID.DataType = DbType.Int64;
				colvarAddressID.MaxLength = 0;
				colvarAddressID.AutoIncrement = false;
				colvarAddressID.IsNullable = false;
				colvarAddressID.IsPrimaryKey = true;
				colvarAddressID.IsForeignKey = false;
				colvarAddressID.IsReadOnly = false;
				colvarAddressID.DefaultSetting = @"";
				colvarAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressID);

				TableSchema.TableColumn colvarStatusCode = new TableSchema.TableColumn(schema);
				colvarStatusCode.ColumnName = "StatusCode";
				colvarStatusCode.DataType = DbType.Int32;
				colvarStatusCode.MaxLength = 0;
				colvarStatusCode.AutoIncrement = false;
				colvarStatusCode.IsNullable = false;
				colvarStatusCode.IsPrimaryKey = false;
				colvarStatusCode.IsForeignKey = false;
				colvarStatusCode.IsReadOnly = false;
				colvarStatusCode.DefaultSetting = @"";
				colvarStatusCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusCode);

				TableSchema.TableColumn colvarOurAddress = new TableSchema.TableColumn(schema);
				colvarOurAddress.ColumnName = "OurAddress";
				colvarOurAddress.DataType = DbType.String;
				colvarOurAddress.MaxLength = 500;
				colvarOurAddress.AutoIncrement = false;
				colvarOurAddress.IsNullable = true;
				colvarOurAddress.IsPrimaryKey = false;
				colvarOurAddress.IsForeignKey = false;
				colvarOurAddress.IsReadOnly = false;
				colvarOurAddress.DefaultSetting = @"";
				colvarOurAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOurAddress);

				TableSchema.TableColumn colvarFullAddress = new TableSchema.TableColumn(schema);
				colvarFullAddress.ColumnName = "FullAddress";
				colvarFullAddress.DataType = DbType.String;
				colvarFullAddress.MaxLength = 500;
				colvarFullAddress.AutoIncrement = false;
				colvarFullAddress.IsNullable = true;
				colvarFullAddress.IsPrimaryKey = false;
				colvarFullAddress.IsForeignKey = false;
				colvarFullAddress.IsReadOnly = false;
				colvarFullAddress.DefaultSetting = @"";
				colvarFullAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullAddress);

				TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
				colvarLatitude.ColumnName = "Latitude";
				colvarLatitude.DataType = DbType.Double;
				colvarLatitude.MaxLength = 0;
				colvarLatitude.AutoIncrement = false;
				colvarLatitude.IsNullable = true;
				colvarLatitude.IsPrimaryKey = false;
				colvarLatitude.IsForeignKey = false;
				colvarLatitude.IsReadOnly = false;
				colvarLatitude.DefaultSetting = @"";
				colvarLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitude);

				TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
				colvarLongitude.ColumnName = "Longitude";
				colvarLongitude.DataType = DbType.Double;
				colvarLongitude.MaxLength = 0;
				colvarLongitude.AutoIncrement = false;
				colvarLongitude.IsNullable = true;
				colvarLongitude.IsPrimaryKey = false;
				colvarLongitude.IsForeignKey = false;
				colvarLongitude.IsReadOnly = false;
				colvarLongitude.DefaultSetting = @"";
				colvarLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitude);

				TableSchema.TableColumn colvarAccuracy = new TableSchema.TableColumn(schema);
				colvarAccuracy.ColumnName = "Accuracy";
				colvarAccuracy.DataType = DbType.Int32;
				colvarAccuracy.MaxLength = 0;
				colvarAccuracy.AutoIncrement = false;
				colvarAccuracy.IsNullable = true;
				colvarAccuracy.IsPrimaryKey = false;
				colvarAccuracy.IsForeignKey = false;
				colvarAccuracy.IsReadOnly = false;
				colvarAccuracy.DefaultSetting = @"";
				colvarAccuracy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccuracy);

				TableSchema.TableColumn colvarAddressWordDistance = new TableSchema.TableColumn(schema);
				colvarAddressWordDistance.ColumnName = "AddressWordDistance";
				colvarAddressWordDistance.DataType = DbType.Int32;
				colvarAddressWordDistance.MaxLength = 0;
				colvarAddressWordDistance.AutoIncrement = false;
				colvarAddressWordDistance.IsNullable = true;
				colvarAddressWordDistance.IsPrimaryKey = false;
				colvarAddressWordDistance.IsForeignKey = false;
				colvarAddressWordDistance.IsReadOnly = false;
				colvarAddressWordDistance.DefaultSetting = @"";
				colvarAddressWordDistance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressWordDistance);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_AddressCoords",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_AddressCoord LoadFrom(QL_AddressCoord item)
		{
			QL_AddressCoord result = new QL_AddressCoord();
			if (item.AddressID != default(long)) {
				result.LoadByKey(item.AddressID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AddressID {
			get { return GetColumnValue<long>(Columns.AddressID); }
			set {
				SetColumnValue(Columns.AddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressID));
			}
		}
		[DataMember]
		public int StatusCode {
			get { return GetColumnValue<int>(Columns.StatusCode); }
			set {
				SetColumnValue(Columns.StatusCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StatusCode));
			}
		}
		[DataMember]
		public string OurAddress {
			get { return GetColumnValue<string>(Columns.OurAddress); }
			set {
				SetColumnValue(Columns.OurAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OurAddress));
			}
		}
		[DataMember]
		public string FullAddress {
			get { return GetColumnValue<string>(Columns.FullAddress); }
			set {
				SetColumnValue(Columns.FullAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullAddress));
			}
		}
		[DataMember]
		public double? Latitude {
			get { return GetColumnValue<double?>(Columns.Latitude); }
			set {
				SetColumnValue(Columns.Latitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Latitude));
			}
		}
		[DataMember]
		public double? Longitude {
			get { return GetColumnValue<double?>(Columns.Longitude); }
			set {
				SetColumnValue(Columns.Longitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Longitude));
			}
		}
		[DataMember]
		public int? Accuracy {
			get { return GetColumnValue<int?>(Columns.Accuracy); }
			set {
				SetColumnValue(Columns.Accuracy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Accuracy));
			}
		}
		[DataMember]
		public int? AddressWordDistance {
			get { return GetColumnValue<int?>(Columns.AddressWordDistance); }
			set {
				SetColumnValue(Columns.AddressWordDistance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressWordDistance));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private QL_Address _Address;
		//Relationship: FK_QL_AddressCoords_QL_Address
		public QL_Address Address
		{
			get
			{
				if(_Address == null) {
					_Address = QL_Address.FetchByID(this.AddressID);
				}
				return _Address;
			}
			set
			{
				SetColumnValue("AddressID", value.AddressID);
				_Address = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AddressID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StatusCodeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn OurAddressColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn FullAddressColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LatitudeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn LongitudeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AccuracyColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AddressWordDistanceColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddressID = @"AddressID";
			public static readonly string StatusCode = @"StatusCode";
			public static readonly string OurAddress = @"OurAddress";
			public static readonly string FullAddress = @"FullAddress";
			public static readonly string Latitude = @"Latitude";
			public static readonly string Longitude = @"Longitude";
			public static readonly string Accuracy = @"Accuracy";
			public static readonly string AddressWordDistance = @"AddressWordDistance";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddressID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the QL_CreditReportBureau class.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportBureauCollection : ActiveList<QL_CreditReportBureau, QL_CreditReportBureauCollection>
	{
		public static QL_CreditReportBureauCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_CreditReportBureauCollection result = new QL_CreditReportBureauCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_CreditReportBureau item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_CreditReportBureaus table.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportBureau : ActiveRecord<QL_CreditReportBureau>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string EquafaxID = "EQ";
			[EnumMember()] public const string ExperianID = "EX";
			[EnumMember()] public const string ManualID = "MN";
			[EnumMember()] public const string TransUnionID = "TU";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_CreditReportBureau()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_CreditReportBureaus", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBureauID = new TableSchema.TableColumn(schema);
				colvarBureauID.ColumnName = "BureauID";
				colvarBureauID.DataType = DbType.AnsiStringFixedLength;
				colvarBureauID.MaxLength = 2;
				colvarBureauID.AutoIncrement = false;
				colvarBureauID.IsNullable = false;
				colvarBureauID.IsPrimaryKey = true;
				colvarBureauID.IsForeignKey = false;
				colvarBureauID.IsReadOnly = false;
				colvarBureauID.DefaultSetting = @"";
				colvarBureauID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBureauID);

				TableSchema.TableColumn colvarBureauName = new TableSchema.TableColumn(schema);
				colvarBureauName.ColumnName = "BureauName";
				colvarBureauName.DataType = DbType.String;
				colvarBureauName.MaxLength = 50;
				colvarBureauName.AutoIncrement = false;
				colvarBureauName.IsNullable = false;
				colvarBureauName.IsPrimaryKey = false;
				colvarBureauName.IsForeignKey = false;
				colvarBureauName.IsReadOnly = false;
				colvarBureauName.DefaultSetting = @"";
				colvarBureauName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBureauName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_CreditReportBureaus",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_CreditReportBureau LoadFrom(QL_CreditReportBureau item)
		{
			QL_CreditReportBureau result = new QL_CreditReportBureau();
			if (item.BureauID != default(string)) {
				result.LoadByKey(item.BureauID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string BureauID {
			get { return GetColumnValue<string>(Columns.BureauID); }
			set {
				SetColumnValue(Columns.BureauID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BureauID));
			}
		}
		[DataMember]
		public string BureauName {
			get { return GetColumnValue<string>(Columns.BureauName); }
			set {
				SetColumnValue(Columns.BureauName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BureauName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return BureauName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BureauIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BureauNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BureauID = @"BureauID";
			public static readonly string BureauName = @"BureauName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BureauID; }
		}
		*/

		#region Foreign Collections

		private QL_CreditReportCollection _QL_CreditReportsCol;
		//Relationship: FK_QL_CreditReports_QL_CreditReportBureaus
		public QL_CreditReportCollection QL_CreditReportsCol
		{
			get
			{
				if(_QL_CreditReportsCol == null) {
					_QL_CreditReportsCol = new QL_CreditReportCollection();
					_QL_CreditReportsCol.LoadAndCloseReader(QL_CreditReport.Query()
						.WHERE(QL_CreditReport.Columns.BureauId, BureauID).ExecuteReader());
				}
				return _QL_CreditReportsCol;
			}
		}

		private QL_CreditReportVendorAbaraCollection _QL_CreditReportVendorAbarasCol;
		//Relationship: FK_QL_CreditReportVendorAbara_QL_CreditReportBureaus
		public QL_CreditReportVendorAbaraCollection QL_CreditReportVendorAbarasCol
		{
			get
			{
				if(_QL_CreditReportVendorAbarasCol == null) {
					_QL_CreditReportVendorAbarasCol = new QL_CreditReportVendorAbaraCollection();
					_QL_CreditReportVendorAbarasCol.LoadAndCloseReader(QL_CreditReportVendorAbara.Query()
						.WHERE(QL_CreditReportVendorAbara.Columns.BureauId, BureauID).ExecuteReader());
				}
				return _QL_CreditReportVendorAbarasCol;
			}
		}

		private QL_CreditReportVendorEasyAccessCollection _QL_CreditReportVendorEasyAccessesCol;
		//Relationship: FK_QL_CreditReportVendorEasyAccess_QL_CreditReportBureaus
		public QL_CreditReportVendorEasyAccessCollection QL_CreditReportVendorEasyAccessesCol
		{
			get
			{
				if(_QL_CreditReportVendorEasyAccessesCol == null) {
					_QL_CreditReportVendorEasyAccessesCol = new QL_CreditReportVendorEasyAccessCollection();
					_QL_CreditReportVendorEasyAccessesCol.LoadAndCloseReader(QL_CreditReportVendorEasyAccess.Query()
						.WHERE(QL_CreditReportVendorEasyAccess.Columns.BureauId, BureauID).ExecuteReader());
				}
				return _QL_CreditReportVendorEasyAccessesCol;
			}
		}

		private QL_CreditReportVendorManualCollection _QL_CreditReportVendorManualsCol;
		//Relationship: FK_QL_CreditReportVendorManual_QL_CreditReportBureaus
		public QL_CreditReportVendorManualCollection QL_CreditReportVendorManualsCol
		{
			get
			{
				if(_QL_CreditReportVendorManualsCol == null) {
					_QL_CreditReportVendorManualsCol = new QL_CreditReportVendorManualCollection();
					_QL_CreditReportVendorManualsCol.LoadAndCloseReader(QL_CreditReportVendorManual.Query()
						.WHERE(QL_CreditReportVendorManual.Columns.BureauId, BureauID).ExecuteReader());
				}
				return _QL_CreditReportVendorManualsCol;
			}
		}

		private QL_CreditReportVendorMicrobiltCollection _QL_CreditReportVendorMicrobiltsCol;
		//Relationship: FK_QL_CreditReportVendorMicrobilt_QL_CreditReportBureaus
		public QL_CreditReportVendorMicrobiltCollection QL_CreditReportVendorMicrobiltsCol
		{
			get
			{
				if(_QL_CreditReportVendorMicrobiltsCol == null) {
					_QL_CreditReportVendorMicrobiltsCol = new QL_CreditReportVendorMicrobiltCollection();
					_QL_CreditReportVendorMicrobiltsCol.LoadAndCloseReader(QL_CreditReportVendorMicrobilt.Query()
						.WHERE(QL_CreditReportVendorMicrobilt.Columns.BureauId, BureauID).ExecuteReader());
				}
				return _QL_CreditReportVendorMicrobiltsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QL_CreditReport class.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportCollection : ActiveList<QL_CreditReport, QL_CreditReportCollection>
	{
		public static QL_CreditReportCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_CreditReportCollection result = new QL_CreditReportCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_CreditReport item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_CreditReports table.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReport : ActiveRecord<QL_CreditReport>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_CreditReport()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_CreditReports", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditReportID = new TableSchema.TableColumn(schema);
				colvarCreditReportID.ColumnName = "CreditReportID";
				colvarCreditReportID.DataType = DbType.Int64;
				colvarCreditReportID.MaxLength = 0;
				colvarCreditReportID.AutoIncrement = true;
				colvarCreditReportID.IsNullable = false;
				colvarCreditReportID.IsPrimaryKey = true;
				colvarCreditReportID.IsForeignKey = false;
				colvarCreditReportID.IsReadOnly = false;
				colvarCreditReportID.DefaultSetting = @"";
				colvarCreditReportID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReportID);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = true;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "QL_Leads";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = true;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "QL_Address";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarBureauId = new TableSchema.TableColumn(schema);
				colvarBureauId.ColumnName = "BureauId";
				colvarBureauId.DataType = DbType.AnsiStringFixedLength;
				colvarBureauId.MaxLength = 2;
				colvarBureauId.AutoIncrement = false;
				colvarBureauId.IsNullable = false;
				colvarBureauId.IsPrimaryKey = false;
				colvarBureauId.IsForeignKey = true;
				colvarBureauId.IsReadOnly = false;
				colvarBureauId.DefaultSetting = @"";
				colvarBureauId.ForeignKeyTableName = "QL_CreditReportBureaus";
				schema.Columns.Add(colvarBureauId);

				TableSchema.TableColumn colvarSeasonId = new TableSchema.TableColumn(schema);
				colvarSeasonId.ColumnName = "SeasonId";
				colvarSeasonId.DataType = DbType.Int32;
				colvarSeasonId.MaxLength = 0;
				colvarSeasonId.AutoIncrement = false;
				colvarSeasonId.IsNullable = false;
				colvarSeasonId.IsPrimaryKey = false;
				colvarSeasonId.IsForeignKey = false;
				colvarSeasonId.IsReadOnly = false;
				colvarSeasonId.DefaultSetting = @"";
				colvarSeasonId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonId);

				TableSchema.TableColumn colvarCreditReportVendorId = new TableSchema.TableColumn(schema);
				colvarCreditReportVendorId.ColumnName = "CreditReportVendorId";
				colvarCreditReportVendorId.DataType = DbType.AnsiStringFixedLength;
				colvarCreditReportVendorId.MaxLength = 4;
				colvarCreditReportVendorId.AutoIncrement = false;
				colvarCreditReportVendorId.IsNullable = false;
				colvarCreditReportVendorId.IsPrimaryKey = false;
				colvarCreditReportVendorId.IsForeignKey = true;
				colvarCreditReportVendorId.IsReadOnly = false;
				colvarCreditReportVendorId.DefaultSetting = @"";
				colvarCreditReportVendorId.ForeignKeyTableName = "QL_CreditReportVendors";
				schema.Columns.Add(colvarCreditReportVendorId);

				TableSchema.TableColumn colvarCreditReportVendorAbaraId = new TableSchema.TableColumn(schema);
				colvarCreditReportVendorAbaraId.ColumnName = "CreditReportVendorAbaraId";
				colvarCreditReportVendorAbaraId.DataType = DbType.Int64;
				colvarCreditReportVendorAbaraId.MaxLength = 0;
				colvarCreditReportVendorAbaraId.AutoIncrement = false;
				colvarCreditReportVendorAbaraId.IsNullable = true;
				colvarCreditReportVendorAbaraId.IsPrimaryKey = false;
				colvarCreditReportVendorAbaraId.IsForeignKey = true;
				colvarCreditReportVendorAbaraId.IsReadOnly = false;
				colvarCreditReportVendorAbaraId.DefaultSetting = @"";
				colvarCreditReportVendorAbaraId.ForeignKeyTableName = "QL_CreditReportVendorAbara";
				schema.Columns.Add(colvarCreditReportVendorAbaraId);

				TableSchema.TableColumn colvarCreditReportVendorMicrobiltId = new TableSchema.TableColumn(schema);
				colvarCreditReportVendorMicrobiltId.ColumnName = "CreditReportVendorMicrobiltId";
				colvarCreditReportVendorMicrobiltId.DataType = DbType.Int64;
				colvarCreditReportVendorMicrobiltId.MaxLength = 0;
				colvarCreditReportVendorMicrobiltId.AutoIncrement = false;
				colvarCreditReportVendorMicrobiltId.IsNullable = true;
				colvarCreditReportVendorMicrobiltId.IsPrimaryKey = false;
				colvarCreditReportVendorMicrobiltId.IsForeignKey = true;
				colvarCreditReportVendorMicrobiltId.IsReadOnly = false;
				colvarCreditReportVendorMicrobiltId.DefaultSetting = @"";
				colvarCreditReportVendorMicrobiltId.ForeignKeyTableName = "QL_CreditReportVendorMicrobilt";
				schema.Columns.Add(colvarCreditReportVendorMicrobiltId);

				TableSchema.TableColumn colvarCreditReportVendorEasyAccessId = new TableSchema.TableColumn(schema);
				colvarCreditReportVendorEasyAccessId.ColumnName = "CreditReportVendorEasyAccessId";
				colvarCreditReportVendorEasyAccessId.DataType = DbType.Int64;
				colvarCreditReportVendorEasyAccessId.MaxLength = 0;
				colvarCreditReportVendorEasyAccessId.AutoIncrement = false;
				colvarCreditReportVendorEasyAccessId.IsNullable = true;
				colvarCreditReportVendorEasyAccessId.IsPrimaryKey = false;
				colvarCreditReportVendorEasyAccessId.IsForeignKey = true;
				colvarCreditReportVendorEasyAccessId.IsReadOnly = false;
				colvarCreditReportVendorEasyAccessId.DefaultSetting = @"";
				colvarCreditReportVendorEasyAccessId.ForeignKeyTableName = "QL_CreditReportVendorEasyAccess";
				schema.Columns.Add(colvarCreditReportVendorEasyAccessId);

				TableSchema.TableColumn colvarCreditReportVendorManualId = new TableSchema.TableColumn(schema);
				colvarCreditReportVendorManualId.ColumnName = "CreditReportVendorManualId";
				colvarCreditReportVendorManualId.DataType = DbType.Int64;
				colvarCreditReportVendorManualId.MaxLength = 0;
				colvarCreditReportVendorManualId.AutoIncrement = false;
				colvarCreditReportVendorManualId.IsNullable = true;
				colvarCreditReportVendorManualId.IsPrimaryKey = false;
				colvarCreditReportVendorManualId.IsForeignKey = true;
				colvarCreditReportVendorManualId.IsReadOnly = false;
				colvarCreditReportVendorManualId.DefaultSetting = @"";
				colvarCreditReportVendorManualId.ForeignKeyTableName = "QL_CreditReportVendorManual";
				schema.Columns.Add(colvarCreditReportVendorManualId);

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.String;
				colvarPrefix.MaxLength = 50;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = true;
				colvarPrefix.IsPrimaryKey = false;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarSuffix = new TableSchema.TableColumn(schema);
				colvarSuffix.ColumnName = "Suffix";
				colvarSuffix.DataType = DbType.String;
				colvarSuffix.MaxLength = 50;
				colvarSuffix.AutoIncrement = false;
				colvarSuffix.IsNullable = true;
				colvarSuffix.IsPrimaryKey = false;
				colvarSuffix.IsForeignKey = false;
				colvarSuffix.IsReadOnly = false;
				colvarSuffix.DefaultSetting = @"";
				colvarSuffix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuffix);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarScore = new TableSchema.TableColumn(schema);
				colvarScore.ColumnName = "Score";
				colvarScore.DataType = DbType.Int32;
				colvarScore.MaxLength = 0;
				colvarScore.AutoIncrement = false;
				colvarScore.IsNullable = false;
				colvarScore.IsPrimaryKey = false;
				colvarScore.IsForeignKey = false;
				colvarScore.IsReadOnly = false;
				colvarScore.DefaultSetting = @"";
				colvarScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScore);

				TableSchema.TableColumn colvarIsSelected = new TableSchema.TableColumn(schema);
				colvarIsSelected.ColumnName = "IsSelected";
				colvarIsSelected.DataType = DbType.Boolean;
				colvarIsSelected.MaxLength = 0;
				colvarIsSelected.AutoIncrement = false;
				colvarIsSelected.IsNullable = false;
				colvarIsSelected.IsPrimaryKey = false;
				colvarIsSelected.IsForeignKey = false;
				colvarIsSelected.IsReadOnly = false;
				colvarIsSelected.DefaultSetting = @"((0))";
				colvarIsSelected.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSelected);

				TableSchema.TableColumn colvarIsScored = new TableSchema.TableColumn(schema);
				colvarIsScored.ColumnName = "IsScored";
				colvarIsScored.DataType = DbType.Boolean;
				colvarIsScored.MaxLength = 0;
				colvarIsScored.AutoIncrement = false;
				colvarIsScored.IsNullable = false;
				colvarIsScored.IsPrimaryKey = false;
				colvarIsScored.IsForeignKey = false;
				colvarIsScored.IsReadOnly = false;
				colvarIsScored.DefaultSetting = @"";
				colvarIsScored.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsScored);

				TableSchema.TableColumn colvarIsHit = new TableSchema.TableColumn(schema);
				colvarIsHit.ColumnName = "IsHit";
				colvarIsHit.DataType = DbType.Boolean;
				colvarIsHit.MaxLength = 0;
				colvarIsHit.AutoIncrement = false;
				colvarIsHit.IsNullable = false;
				colvarIsHit.IsPrimaryKey = false;
				colvarIsHit.IsForeignKey = false;
				colvarIsHit.IsReadOnly = false;
				colvarIsHit.DefaultSetting = @"";
				colvarIsHit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHit);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_CreditReports",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_CreditReport LoadFrom(QL_CreditReport item)
		{
			QL_CreditReport result = new QL_CreditReport();
			if (item.CreditReportID != default(long)) {
				result.LoadByKey(item.CreditReportID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CreditReportID {
			get { return GetColumnValue<long>(Columns.CreditReportID); }
			set {
				SetColumnValue(Columns.CreditReportID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportID));
			}
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set {
				SetColumnValue(Columns.LeadId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadId));
			}
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set {
				SetColumnValue(Columns.AddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressId));
			}
		}
		[DataMember]
		public string BureauId {
			get { return GetColumnValue<string>(Columns.BureauId); }
			set {
				SetColumnValue(Columns.BureauId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BureauId));
			}
		}
		[DataMember]
		public int SeasonId {
			get { return GetColumnValue<int>(Columns.SeasonId); }
			set {
				SetColumnValue(Columns.SeasonId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonId));
			}
		}
		[DataMember]
		public string CreditReportVendorId {
			get { return GetColumnValue<string>(Columns.CreditReportVendorId); }
			set {
				SetColumnValue(Columns.CreditReportVendorId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportVendorId));
			}
		}
		[DataMember]
		public long? CreditReportVendorAbaraId {
			get { return GetColumnValue<long?>(Columns.CreditReportVendorAbaraId); }
			set {
				SetColumnValue(Columns.CreditReportVendorAbaraId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportVendorAbaraId));
			}
		}
		[DataMember]
		public long? CreditReportVendorMicrobiltId {
			get { return GetColumnValue<long?>(Columns.CreditReportVendorMicrobiltId); }
			set {
				SetColumnValue(Columns.CreditReportVendorMicrobiltId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportVendorMicrobiltId));
			}
		}
		[DataMember]
		public long? CreditReportVendorEasyAccessId {
			get { return GetColumnValue<long?>(Columns.CreditReportVendorEasyAccessId); }
			set {
				SetColumnValue(Columns.CreditReportVendorEasyAccessId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportVendorEasyAccessId));
			}
		}
		[DataMember]
		public long? CreditReportVendorManualId {
			get { return GetColumnValue<long?>(Columns.CreditReportVendorManualId); }
			set {
				SetColumnValue(Columns.CreditReportVendorManualId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportVendorManualId));
			}
		}
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set {
				SetColumnValue(Columns.Prefix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Prefix));
			}
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set {
				SetColumnValue(Columns.FirstName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FirstName));
			}
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set {
				SetColumnValue(Columns.MiddleName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiddleName));
			}
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set {
				SetColumnValue(Columns.LastName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastName));
			}
		}
		[DataMember]
		public string Suffix {
			get { return GetColumnValue<string>(Columns.Suffix); }
			set {
				SetColumnValue(Columns.Suffix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Suffix));
			}
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set {
				SetColumnValue(Columns.SSN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SSN));
			}
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set {
				SetColumnValue(Columns.DOB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DOB));
			}
		}
		[DataMember]
		public int Score {
			get { return GetColumnValue<int>(Columns.Score); }
			set {
				SetColumnValue(Columns.Score, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Score));
			}
		}
		[DataMember]
		public bool IsSelected {
			get { return GetColumnValue<bool>(Columns.IsSelected); }
			set {
				SetColumnValue(Columns.IsSelected, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSelected));
			}
		}
		[DataMember]
		public bool IsScored {
			get { return GetColumnValue<bool>(Columns.IsScored); }
			set {
				SetColumnValue(Columns.IsScored, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsScored));
			}
		}
		[DataMember]
		public bool IsHit {
			get { return GetColumnValue<bool>(Columns.IsHit); }
			set {
				SetColumnValue(Columns.IsHit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsHit));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private QL_Address _Address;
		//Relationship: FK_QL_CreditReports_QL_Address
		public QL_Address Address
		{
			get
			{
				if(_Address == null) {
					_Address = QL_Address.FetchByID(this.AddressId);
				}
				return _Address;
			}
			set
			{
				SetColumnValue("AddressId", value.AddressID);
				_Address = value;
			}
		}

		private QL_CreditReportBureau _Bureau;
		//Relationship: FK_QL_CreditReports_QL_CreditReportBureaus
		public QL_CreditReportBureau Bureau
		{
			get
			{
				if(_Bureau == null) {
					_Bureau = QL_CreditReportBureau.FetchByID(this.BureauId);
				}
				return _Bureau;
			}
			set
			{
				SetColumnValue("BureauId", value.BureauID);
				_Bureau = value;
			}
		}

		private QL_CreditReportVendorAbara _CreditReportVendorAbara;
		//Relationship: FK_QL_CreditReports_QL_CreditReportVendorAbara
		public QL_CreditReportVendorAbara CreditReportVendorAbara
		{
			get
			{
				if(_CreditReportVendorAbara == null) {
					_CreditReportVendorAbara = QL_CreditReportVendorAbara.FetchByID(this.CreditReportVendorAbaraId);
				}
				return _CreditReportVendorAbara;
			}
			set
			{
				SetColumnValue("CreditReportVendorAbaraId", value.CreditReportVendorAbaraID);
				_CreditReportVendorAbara = value;
			}
		}

		private QL_CreditReportVendorEasyAccess _CreditReportVendorEasyAccess;
		//Relationship: FK_QL_CreditReports_QL_CreditReportVendorEasyAccess
		public QL_CreditReportVendorEasyAccess CreditReportVendorEasyAccess
		{
			get
			{
				if(_CreditReportVendorEasyAccess == null) {
					_CreditReportVendorEasyAccess = QL_CreditReportVendorEasyAccess.FetchByID(this.CreditReportVendorEasyAccessId);
				}
				return _CreditReportVendorEasyAccess;
			}
			set
			{
				SetColumnValue("CreditReportVendorEasyAccessId", value.CreditReportVendorEasyAccessID);
				_CreditReportVendorEasyAccess = value;
			}
		}

		private QL_CreditReportVendorManual _CreditReportVendorManual;
		//Relationship: FK_QL_CreditReports_QL_CreditReportVendorManual
		public QL_CreditReportVendorManual CreditReportVendorManual
		{
			get
			{
				if(_CreditReportVendorManual == null) {
					_CreditReportVendorManual = QL_CreditReportVendorManual.FetchByID(this.CreditReportVendorManualId);
				}
				return _CreditReportVendorManual;
			}
			set
			{
				SetColumnValue("CreditReportVendorManualId", value.CreditReportVendorManualID);
				_CreditReportVendorManual = value;
			}
		}

		private QL_CreditReportVendorMicrobilt _CreditReportVendorMicrobilt;
		//Relationship: FK_QL_CreditReports_QL_CreditReportVendorMicrobilt
		public QL_CreditReportVendorMicrobilt CreditReportVendorMicrobilt
		{
			get
			{
				if(_CreditReportVendorMicrobilt == null) {
					_CreditReportVendorMicrobilt = QL_CreditReportVendorMicrobilt.FetchByID(this.CreditReportVendorMicrobiltId);
				}
				return _CreditReportVendorMicrobilt;
			}
			set
			{
				SetColumnValue("CreditReportVendorMicrobiltId", value.CreditReportVendorMicrobiltID);
				_CreditReportVendorMicrobilt = value;
			}
		}

		private QL_CreditReportVendor _CreditReportVendor;
		//Relationship: FK_QL_CreditReports_QL_CreditReportVendors
		public QL_CreditReportVendor CreditReportVendor
		{
			get
			{
				if(_CreditReportVendor == null) {
					_CreditReportVendor = QL_CreditReportVendor.FetchByID(this.CreditReportVendorId);
				}
				return _CreditReportVendor;
			}
			set
			{
				SetColumnValue("CreditReportVendorId", value.CreditReportVendorID);
				_CreditReportVendor = value;
			}
		}

		private QL_Lead _Lead;
		//Relationship: FK_QL_CreditReports_QL_Leads
		public QL_Lead Lead
		{
			get
			{
				if(_Lead == null) {
					_Lead = QL_Lead.FetchByID(this.LeadId);
				}
				return _Lead;
			}
			set
			{
				SetColumnValue("LeadId", value.LeadID);
				_Lead = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CreditReportID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditReportIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BureauIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SeasonIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreditReportVendorIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreditReportVendorAbaraIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreditReportVendorMicrobiltIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreditReportVendorEasyAccessIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreditReportVendorManualIdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn SuffixColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ScoreColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn IsSelectedColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsScoredColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsHitColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[24]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditReportID = @"CreditReportID";
			public static readonly string LeadId = @"LeadId";
			public static readonly string AddressId = @"AddressId";
			public static readonly string BureauId = @"BureauId";
			public static readonly string SeasonId = @"SeasonId";
			public static readonly string CreditReportVendorId = @"CreditReportVendorId";
			public static readonly string CreditReportVendorAbaraId = @"CreditReportVendorAbaraId";
			public static readonly string CreditReportVendorMicrobiltId = @"CreditReportVendorMicrobiltId";
			public static readonly string CreditReportVendorEasyAccessId = @"CreditReportVendorEasyAccessId";
			public static readonly string CreditReportVendorManualId = @"CreditReportVendorManualId";
			public static readonly string Prefix = @"Prefix";
			public static readonly string FirstName = @"FirstName";
			public static readonly string MiddleName = @"MiddleName";
			public static readonly string LastName = @"LastName";
			public static readonly string Suffix = @"Suffix";
			public static readonly string SSN = @"SSN";
			public static readonly string DOB = @"DOB";
			public static readonly string Score = @"Score";
			public static readonly string IsSelected = @"IsSelected";
			public static readonly string IsScored = @"IsScored";
			public static readonly string IsHit = @"IsHit";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditReportID; }
		}
		*/

		#region Foreign Collections

		private QL_CreditReportVendorAbaraCollection _QL_CreditReportVendorAbarasCol;
		//Relationship: FK_QL_CreditReportVendorAbara_QL_CreditReports
		public QL_CreditReportVendorAbaraCollection QL_CreditReportVendorAbarasCol
		{
			get
			{
				if(_QL_CreditReportVendorAbarasCol == null) {
					_QL_CreditReportVendorAbarasCol = new QL_CreditReportVendorAbaraCollection();
					_QL_CreditReportVendorAbarasCol.LoadAndCloseReader(QL_CreditReportVendorAbara.Query()
						.WHERE(QL_CreditReportVendorAbara.Columns.CreditReportId, CreditReportID).ExecuteReader());
				}
				return _QL_CreditReportVendorAbarasCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QL_CreditReportVendorAbara class.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportVendorAbaraCollection : ActiveList<QL_CreditReportVendorAbara, QL_CreditReportVendorAbaraCollection>
	{
		public static QL_CreditReportVendorAbaraCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_CreditReportVendorAbaraCollection result = new QL_CreditReportVendorAbaraCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_CreditReportVendorAbara item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_CreditReportVendorAbara table.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportVendorAbara : ActiveRecord<QL_CreditReportVendorAbara>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_CreditReportVendorAbara()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_CreditReportVendorAbara", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditReportVendorAbaraID = new TableSchema.TableColumn(schema);
				colvarCreditReportVendorAbaraID.ColumnName = "CreditReportVendorAbaraID";
				colvarCreditReportVendorAbaraID.DataType = DbType.Int64;
				colvarCreditReportVendorAbaraID.MaxLength = 0;
				colvarCreditReportVendorAbaraID.AutoIncrement = true;
				colvarCreditReportVendorAbaraID.IsNullable = false;
				colvarCreditReportVendorAbaraID.IsPrimaryKey = true;
				colvarCreditReportVendorAbaraID.IsForeignKey = false;
				colvarCreditReportVendorAbaraID.IsReadOnly = false;
				colvarCreditReportVendorAbaraID.DefaultSetting = @"";
				colvarCreditReportVendorAbaraID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReportVendorAbaraID);

				TableSchema.TableColumn colvarCreditReportId = new TableSchema.TableColumn(schema);
				colvarCreditReportId.ColumnName = "CreditReportId";
				colvarCreditReportId.DataType = DbType.Int64;
				colvarCreditReportId.MaxLength = 0;
				colvarCreditReportId.AutoIncrement = false;
				colvarCreditReportId.IsNullable = true;
				colvarCreditReportId.IsPrimaryKey = false;
				colvarCreditReportId.IsForeignKey = true;
				colvarCreditReportId.IsReadOnly = false;
				colvarCreditReportId.DefaultSetting = @"";
				colvarCreditReportId.ForeignKeyTableName = "QL_CreditReports";
				schema.Columns.Add(colvarCreditReportId);

				TableSchema.TableColumn colvarBureauId = new TableSchema.TableColumn(schema);
				colvarBureauId.ColumnName = "BureauId";
				colvarBureauId.DataType = DbType.AnsiStringFixedLength;
				colvarBureauId.MaxLength = 2;
				colvarBureauId.AutoIncrement = false;
				colvarBureauId.IsNullable = false;
				colvarBureauId.IsPrimaryKey = false;
				colvarBureauId.IsForeignKey = true;
				colvarBureauId.IsReadOnly = false;
				colvarBureauId.DefaultSetting = @"";
				colvarBureauId.ForeignKeyTableName = "QL_CreditReportBureaus";
				schema.Columns.Add(colvarBureauId);

				TableSchema.TableColumn colvarReportID = new TableSchema.TableColumn(schema);
				colvarReportID.ColumnName = "ReportID";
				colvarReportID.DataType = DbType.Int32;
				colvarReportID.MaxLength = 0;
				colvarReportID.AutoIncrement = false;
				colvarReportID.IsNullable = true;
				colvarReportID.IsPrimaryKey = false;
				colvarReportID.IsForeignKey = false;
				colvarReportID.IsReadOnly = false;
				colvarReportID.DefaultSetting = @"";
				colvarReportID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportID);

				TableSchema.TableColumn colvarReportGuid = new TableSchema.TableColumn(schema);
				colvarReportGuid.ColumnName = "ReportGuid";
				colvarReportGuid.DataType = DbType.Guid;
				colvarReportGuid.MaxLength = 0;
				colvarReportGuid.AutoIncrement = false;
				colvarReportGuid.IsNullable = true;
				colvarReportGuid.IsPrimaryKey = false;
				colvarReportGuid.IsForeignKey = false;
				colvarReportGuid.IsReadOnly = false;
				colvarReportGuid.DefaultSetting = @"";
				colvarReportGuid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportGuid);

				TableSchema.TableColumn colvarResult = new TableSchema.TableColumn(schema);
				colvarResult.ColumnName = "Result";
				colvarResult.DataType = DbType.AnsiString;
				colvarResult.MaxLength = 20;
				colvarResult.AutoIncrement = false;
				colvarResult.IsNullable = false;
				colvarResult.IsPrimaryKey = false;
				colvarResult.IsForeignKey = false;
				colvarResult.IsReadOnly = false;
				colvarResult.DefaultSetting = @"";
				colvarResult.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResult);

				TableSchema.TableColumn colvarScore = new TableSchema.TableColumn(schema);
				colvarScore.ColumnName = "Score";
				colvarScore.DataType = DbType.Int32;
				colvarScore.MaxLength = 0;
				colvarScore.AutoIncrement = false;
				colvarScore.IsNullable = false;
				colvarScore.IsPrimaryKey = false;
				colvarScore.IsForeignKey = false;
				colvarScore.IsReadOnly = false;
				colvarScore.DefaultSetting = @"";
				colvarScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScore);

				TableSchema.TableColumn colvarIsScored = new TableSchema.TableColumn(schema);
				colvarIsScored.ColumnName = "IsScored";
				colvarIsScored.DataType = DbType.Boolean;
				colvarIsScored.MaxLength = 0;
				colvarIsScored.AutoIncrement = false;
				colvarIsScored.IsNullable = false;
				colvarIsScored.IsPrimaryKey = false;
				colvarIsScored.IsForeignKey = false;
				colvarIsScored.IsReadOnly = false;
				colvarIsScored.DefaultSetting = @"";
				colvarIsScored.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsScored);

				TableSchema.TableColumn colvarIsHit = new TableSchema.TableColumn(schema);
				colvarIsHit.ColumnName = "IsHit";
				colvarIsHit.DataType = DbType.Boolean;
				colvarIsHit.MaxLength = 0;
				colvarIsHit.AutoIncrement = false;
				colvarIsHit.IsNullable = false;
				colvarIsHit.IsPrimaryKey = false;
				colvarIsHit.IsForeignKey = false;
				colvarIsHit.IsReadOnly = false;
				colvarIsHit.DefaultSetting = @"";
				colvarIsHit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHit);

				TableSchema.TableColumn colvarReportHtml = new TableSchema.TableColumn(schema);
				colvarReportHtml.ColumnName = "ReportHtml";
				colvarReportHtml.DataType = DbType.String;
				colvarReportHtml.MaxLength = -1;
				colvarReportHtml.AutoIncrement = false;
				colvarReportHtml.IsNullable = true;
				colvarReportHtml.IsPrimaryKey = false;
				colvarReportHtml.IsForeignKey = false;
				colvarReportHtml.IsReadOnly = false;
				colvarReportHtml.DefaultSetting = @"";
				colvarReportHtml.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportHtml);

				TableSchema.TableColumn colvarReportXML = new TableSchema.TableColumn(schema);
				colvarReportXML.ColumnName = "ReportXML";
				colvarReportXML.DataType = DbType.String;
				colvarReportXML.MaxLength = -1;
				colvarReportXML.AutoIncrement = false;
				colvarReportXML.IsNullable = true;
				colvarReportXML.IsPrimaryKey = false;
				colvarReportXML.IsForeignKey = false;
				colvarReportXML.IsReadOnly = false;
				colvarReportXML.DefaultSetting = @"";
				colvarReportXML.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportXML);

				TableSchema.TableColumn colvarErrorMessage = new TableSchema.TableColumn(schema);
				colvarErrorMessage.ColumnName = "ErrorMessage";
				colvarErrorMessage.DataType = DbType.String;
				colvarErrorMessage.MaxLength = -1;
				colvarErrorMessage.AutoIncrement = false;
				colvarErrorMessage.IsNullable = true;
				colvarErrorMessage.IsPrimaryKey = false;
				colvarErrorMessage.IsForeignKey = false;
				colvarErrorMessage.IsReadOnly = false;
				colvarErrorMessage.DefaultSetting = @"";
				colvarErrorMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrorMessage);

				TableSchema.TableColumn colvarHitStatus = new TableSchema.TableColumn(schema);
				colvarHitStatus.ColumnName = "HitStatus";
				colvarHitStatus.DataType = DbType.AnsiString;
				colvarHitStatus.MaxLength = 50;
				colvarHitStatus.AutoIncrement = false;
				colvarHitStatus.IsNullable = true;
				colvarHitStatus.IsPrimaryKey = false;
				colvarHitStatus.IsForeignKey = false;
				colvarHitStatus.IsReadOnly = false;
				colvarHitStatus.DefaultSetting = @"";
				colvarHitStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHitStatus);

				TableSchema.TableColumn colvarDecisionCode = new TableSchema.TableColumn(schema);
				colvarDecisionCode.ColumnName = "DecisionCode";
				colvarDecisionCode.DataType = DbType.AnsiString;
				colvarDecisionCode.MaxLength = 3;
				colvarDecisionCode.AutoIncrement = false;
				colvarDecisionCode.IsNullable = true;
				colvarDecisionCode.IsPrimaryKey = false;
				colvarDecisionCode.IsForeignKey = false;
				colvarDecisionCode.IsReadOnly = false;
				colvarDecisionCode.DefaultSetting = @"";
				colvarDecisionCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDecisionCode);

				TableSchema.TableColumn colvarDecisionText = new TableSchema.TableColumn(schema);
				colvarDecisionText.ColumnName = "DecisionText";
				colvarDecisionText.DataType = DbType.AnsiString;
				colvarDecisionText.MaxLength = 500;
				colvarDecisionText.AutoIncrement = false;
				colvarDecisionText.IsNullable = true;
				colvarDecisionText.IsPrimaryKey = false;
				colvarDecisionText.IsForeignKey = false;
				colvarDecisionText.IsReadOnly = false;
				colvarDecisionText.DefaultSetting = @"";
				colvarDecisionText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDecisionText);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_CreditReportVendorAbara",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_CreditReportVendorAbara LoadFrom(QL_CreditReportVendorAbara item)
		{
			QL_CreditReportVendorAbara result = new QL_CreditReportVendorAbara();
			if (item.CreditReportVendorAbaraID != default(long)) {
				result.LoadByKey(item.CreditReportVendorAbaraID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CreditReportVendorAbaraID {
			get { return GetColumnValue<long>(Columns.CreditReportVendorAbaraID); }
			set {
				SetColumnValue(Columns.CreditReportVendorAbaraID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportVendorAbaraID));
			}
		}
		[DataMember]
		public long? CreditReportId {
			get { return GetColumnValue<long?>(Columns.CreditReportId); }
			set {
				SetColumnValue(Columns.CreditReportId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportId));
			}
		}
		[DataMember]
		public string BureauId {
			get { return GetColumnValue<string>(Columns.BureauId); }
			set {
				SetColumnValue(Columns.BureauId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BureauId));
			}
		}
		[DataMember]
		public int? ReportID {
			get { return GetColumnValue<int?>(Columns.ReportID); }
			set {
				SetColumnValue(Columns.ReportID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportID));
			}
		}
		[DataMember]
		public Guid? ReportGuid {
			get { return GetColumnValue<Guid?>(Columns.ReportGuid); }
			set {
				SetColumnValue(Columns.ReportGuid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportGuid));
			}
		}
		[DataMember]
		public string Result {
			get { return GetColumnValue<string>(Columns.Result); }
			set {
				SetColumnValue(Columns.Result, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Result));
			}
		}
		[DataMember]
		public int Score {
			get { return GetColumnValue<int>(Columns.Score); }
			set {
				SetColumnValue(Columns.Score, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Score));
			}
		}
		[DataMember]
		public bool IsScored {
			get { return GetColumnValue<bool>(Columns.IsScored); }
			set {
				SetColumnValue(Columns.IsScored, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsScored));
			}
		}
		[DataMember]
		public bool IsHit {
			get { return GetColumnValue<bool>(Columns.IsHit); }
			set {
				SetColumnValue(Columns.IsHit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsHit));
			}
		}
		[DataMember]
		public string ReportHtml {
			get { return GetColumnValue<string>(Columns.ReportHtml); }
			set {
				SetColumnValue(Columns.ReportHtml, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportHtml));
			}
		}
		[DataMember]
		public string ReportXML {
			get { return GetColumnValue<string>(Columns.ReportXML); }
			set {
				SetColumnValue(Columns.ReportXML, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportXML));
			}
		}
		[DataMember]
		public string ErrorMessage {
			get { return GetColumnValue<string>(Columns.ErrorMessage); }
			set {
				SetColumnValue(Columns.ErrorMessage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ErrorMessage));
			}
		}
		[DataMember]
		public string HitStatus {
			get { return GetColumnValue<string>(Columns.HitStatus); }
			set {
				SetColumnValue(Columns.HitStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HitStatus));
			}
		}
		[DataMember]
		public string DecisionCode {
			get { return GetColumnValue<string>(Columns.DecisionCode); }
			set {
				SetColumnValue(Columns.DecisionCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DecisionCode));
			}
		}
		[DataMember]
		public string DecisionText {
			get { return GetColumnValue<string>(Columns.DecisionText); }
			set {
				SetColumnValue(Columns.DecisionText, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DecisionText));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private QL_CreditReportBureau _Bureau;
		//Relationship: FK_QL_CreditReportVendorAbara_QL_CreditReportBureaus
		public QL_CreditReportBureau Bureau
		{
			get
			{
				if(_Bureau == null) {
					_Bureau = QL_CreditReportBureau.FetchByID(this.BureauId);
				}
				return _Bureau;
			}
			set
			{
				SetColumnValue("BureauId", value.BureauID);
				_Bureau = value;
			}
		}

		private QL_CreditReport _CreditReport;
		//Relationship: FK_QL_CreditReportVendorAbara_QL_CreditReports
		public QL_CreditReport CreditReport
		{
			get
			{
				if(_CreditReport == null) {
					_CreditReport = QL_CreditReport.FetchByID(this.CreditReportId);
				}
				return _CreditReport;
			}
			set
			{
				SetColumnValue("CreditReportId", value.CreditReportID);
				_CreditReport = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CreditReportVendorAbaraID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditReportVendorAbaraIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CreditReportIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BureauIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ReportIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ReportGuidColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ResultColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ScoreColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsScoredColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsHitColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ReportHtmlColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ReportXMLColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ErrorMessageColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn HitStatusColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn DecisionCodeColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn DecisionTextColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[16]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditReportVendorAbaraID = @"CreditReportVendorAbaraID";
			public static readonly string CreditReportId = @"CreditReportId";
			public static readonly string BureauId = @"BureauId";
			public static readonly string ReportID = @"ReportID";
			public static readonly string ReportGuid = @"ReportGuid";
			public static readonly string Result = @"Result";
			public static readonly string Score = @"Score";
			public static readonly string IsScored = @"IsScored";
			public static readonly string IsHit = @"IsHit";
			public static readonly string ReportHtml = @"ReportHtml";
			public static readonly string ReportXML = @"ReportXML";
			public static readonly string ErrorMessage = @"ErrorMessage";
			public static readonly string HitStatus = @"HitStatus";
			public static readonly string DecisionCode = @"DecisionCode";
			public static readonly string DecisionText = @"DecisionText";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditReportVendorAbaraID; }
		}
		*/

		#region Foreign Collections

		private QL_CreditReportCollection _QL_CreditReportsCol;
		//Relationship: FK_QL_CreditReports_QL_CreditReportVendorAbara
		public QL_CreditReportCollection QL_CreditReportsCol
		{
			get
			{
				if(_QL_CreditReportsCol == null) {
					_QL_CreditReportsCol = new QL_CreditReportCollection();
					_QL_CreditReportsCol.LoadAndCloseReader(QL_CreditReport.Query()
						.WHERE(QL_CreditReport.Columns.CreditReportVendorAbaraId, CreditReportVendorAbaraID).ExecuteReader());
				}
				return _QL_CreditReportsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QL_CreditReportVendorEasyAccess class.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportVendorEasyAccessCollection : ActiveList<QL_CreditReportVendorEasyAccess, QL_CreditReportVendorEasyAccessCollection>
	{
		public static QL_CreditReportVendorEasyAccessCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_CreditReportVendorEasyAccessCollection result = new QL_CreditReportVendorEasyAccessCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_CreditReportVendorEasyAccess item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_CreditReportVendorEasyAccess table.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportVendorEasyAccess : ActiveRecord<QL_CreditReportVendorEasyAccess>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_CreditReportVendorEasyAccess()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_CreditReportVendorEasyAccess", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditReportVendorEasyAccessID = new TableSchema.TableColumn(schema);
				colvarCreditReportVendorEasyAccessID.ColumnName = "CreditReportVendorEasyAccessID";
				colvarCreditReportVendorEasyAccessID.DataType = DbType.Int64;
				colvarCreditReportVendorEasyAccessID.MaxLength = 0;
				colvarCreditReportVendorEasyAccessID.AutoIncrement = true;
				colvarCreditReportVendorEasyAccessID.IsNullable = false;
				colvarCreditReportVendorEasyAccessID.IsPrimaryKey = true;
				colvarCreditReportVendorEasyAccessID.IsForeignKey = false;
				colvarCreditReportVendorEasyAccessID.IsReadOnly = false;
				colvarCreditReportVendorEasyAccessID.DefaultSetting = @"";
				colvarCreditReportVendorEasyAccessID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReportVendorEasyAccessID);

				TableSchema.TableColumn colvarBureauId = new TableSchema.TableColumn(schema);
				colvarBureauId.ColumnName = "BureauId";
				colvarBureauId.DataType = DbType.AnsiStringFixedLength;
				colvarBureauId.MaxLength = 2;
				colvarBureauId.AutoIncrement = false;
				colvarBureauId.IsNullable = false;
				colvarBureauId.IsPrimaryKey = false;
				colvarBureauId.IsForeignKey = true;
				colvarBureauId.IsReadOnly = false;
				colvarBureauId.DefaultSetting = @"";
				colvarBureauId.ForeignKeyTableName = "QL_CreditReportBureaus";
				schema.Columns.Add(colvarBureauId);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.AnsiString;
				colvarDOB.MaxLength = 50;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "Phone";
				colvarPhone.DataType = DbType.AnsiString;
				colvarPhone.MaxLength = 50;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = true;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				colvarPhone.DefaultSetting = @"";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);

				TableSchema.TableColumn colvarPhoneStatus = new TableSchema.TableColumn(schema);
				colvarPhoneStatus.ColumnName = "PhoneStatus";
				colvarPhoneStatus.DataType = DbType.Int32;
				colvarPhoneStatus.MaxLength = 0;
				colvarPhoneStatus.AutoIncrement = false;
				colvarPhoneStatus.IsNullable = true;
				colvarPhoneStatus.IsPrimaryKey = false;
				colvarPhoneStatus.IsForeignKey = false;
				colvarPhoneStatus.IsReadOnly = false;
				colvarPhoneStatus.DefaultSetting = @"";
				colvarPhoneStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneStatus);

				TableSchema.TableColumn colvarScore = new TableSchema.TableColumn(schema);
				colvarScore.ColumnName = "Score";
				colvarScore.DataType = DbType.Int32;
				colvarScore.MaxLength = 0;
				colvarScore.AutoIncrement = false;
				colvarScore.IsNullable = false;
				colvarScore.IsPrimaryKey = false;
				colvarScore.IsForeignKey = false;
				colvarScore.IsReadOnly = false;
				colvarScore.DefaultSetting = @"";
				colvarScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScore);

				TableSchema.TableColumn colvarIsScored = new TableSchema.TableColumn(schema);
				colvarIsScored.ColumnName = "IsScored";
				colvarIsScored.DataType = DbType.Boolean;
				colvarIsScored.MaxLength = 0;
				colvarIsScored.AutoIncrement = false;
				colvarIsScored.IsNullable = false;
				colvarIsScored.IsPrimaryKey = false;
				colvarIsScored.IsForeignKey = false;
				colvarIsScored.IsReadOnly = false;
				colvarIsScored.DefaultSetting = @"";
				colvarIsScored.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsScored);

				TableSchema.TableColumn colvarIsHit = new TableSchema.TableColumn(schema);
				colvarIsHit.ColumnName = "IsHit";
				colvarIsHit.DataType = DbType.Boolean;
				colvarIsHit.MaxLength = 0;
				colvarIsHit.AutoIncrement = false;
				colvarIsHit.IsNullable = false;
				colvarIsHit.IsPrimaryKey = false;
				colvarIsHit.IsForeignKey = false;
				colvarIsHit.IsReadOnly = false;
				colvarIsHit.DefaultSetting = @"";
				colvarIsHit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHit);

				TableSchema.TableColumn colvarReportReadable = new TableSchema.TableColumn(schema);
				colvarReportReadable.ColumnName = "ReportReadable";
				colvarReportReadable.DataType = DbType.String;
				colvarReportReadable.MaxLength = -1;
				colvarReportReadable.AutoIncrement = false;
				colvarReportReadable.IsNullable = true;
				colvarReportReadable.IsPrimaryKey = false;
				colvarReportReadable.IsForeignKey = false;
				colvarReportReadable.IsReadOnly = false;
				colvarReportReadable.DefaultSetting = @"";
				colvarReportReadable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportReadable);

				TableSchema.TableColumn colvarReportXML = new TableSchema.TableColumn(schema);
				colvarReportXML.ColumnName = "ReportXML";
				colvarReportXML.DataType = DbType.String;
				colvarReportXML.MaxLength = -1;
				colvarReportXML.AutoIncrement = false;
				colvarReportXML.IsNullable = true;
				colvarReportXML.IsPrimaryKey = false;
				colvarReportXML.IsForeignKey = false;
				colvarReportXML.IsReadOnly = false;
				colvarReportXML.DefaultSetting = @"";
				colvarReportXML.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportXML);

				TableSchema.TableColumn colvarErrorMessage = new TableSchema.TableColumn(schema);
				colvarErrorMessage.ColumnName = "ErrorMessage";
				colvarErrorMessage.DataType = DbType.String;
				colvarErrorMessage.MaxLength = -1;
				colvarErrorMessage.AutoIncrement = false;
				colvarErrorMessage.IsNullable = true;
				colvarErrorMessage.IsPrimaryKey = false;
				colvarErrorMessage.IsForeignKey = false;
				colvarErrorMessage.IsReadOnly = false;
				colvarErrorMessage.DefaultSetting = @"";
				colvarErrorMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrorMessage);

				TableSchema.TableColumn colvarHitStatus = new TableSchema.TableColumn(schema);
				colvarHitStatus.ColumnName = "HitStatus";
				colvarHitStatus.DataType = DbType.AnsiString;
				colvarHitStatus.MaxLength = 50;
				colvarHitStatus.AutoIncrement = false;
				colvarHitStatus.IsNullable = true;
				colvarHitStatus.IsPrimaryKey = false;
				colvarHitStatus.IsForeignKey = false;
				colvarHitStatus.IsReadOnly = false;
				colvarHitStatus.DefaultSetting = @"";
				colvarHitStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHitStatus);

				TableSchema.TableColumn colvarDecisionCode = new TableSchema.TableColumn(schema);
				colvarDecisionCode.ColumnName = "DecisionCode";
				colvarDecisionCode.DataType = DbType.AnsiString;
				colvarDecisionCode.MaxLength = 3;
				colvarDecisionCode.AutoIncrement = false;
				colvarDecisionCode.IsNullable = true;
				colvarDecisionCode.IsPrimaryKey = false;
				colvarDecisionCode.IsForeignKey = false;
				colvarDecisionCode.IsReadOnly = false;
				colvarDecisionCode.DefaultSetting = @"";
				colvarDecisionCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDecisionCode);

				TableSchema.TableColumn colvarDecisionText = new TableSchema.TableColumn(schema);
				colvarDecisionText.ColumnName = "DecisionText";
				colvarDecisionText.DataType = DbType.AnsiString;
				colvarDecisionText.MaxLength = 500;
				colvarDecisionText.AutoIncrement = false;
				colvarDecisionText.IsNullable = true;
				colvarDecisionText.IsPrimaryKey = false;
				colvarDecisionText.IsForeignKey = false;
				colvarDecisionText.IsReadOnly = false;
				colvarDecisionText.DefaultSetting = @"";
				colvarDecisionText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDecisionText);

				TableSchema.TableColumn colvarReportRAW = new TableSchema.TableColumn(schema);
				colvarReportRAW.ColumnName = "ReportRAW";
				colvarReportRAW.DataType = DbType.String;
				colvarReportRAW.MaxLength = -1;
				colvarReportRAW.AutoIncrement = false;
				colvarReportRAW.IsNullable = true;
				colvarReportRAW.IsPrimaryKey = false;
				colvarReportRAW.IsForeignKey = false;
				colvarReportRAW.IsReadOnly = false;
				colvarReportRAW.DefaultSetting = @"";
				colvarReportRAW.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportRAW);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_CreditReportVendorEasyAccess",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_CreditReportVendorEasyAccess LoadFrom(QL_CreditReportVendorEasyAccess item)
		{
			QL_CreditReportVendorEasyAccess result = new QL_CreditReportVendorEasyAccess();
			if (item.CreditReportVendorEasyAccessID != default(long)) {
				result.LoadByKey(item.CreditReportVendorEasyAccessID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CreditReportVendorEasyAccessID {
			get { return GetColumnValue<long>(Columns.CreditReportVendorEasyAccessID); }
			set {
				SetColumnValue(Columns.CreditReportVendorEasyAccessID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportVendorEasyAccessID));
			}
		}
		[DataMember]
		public string BureauId {
			get { return GetColumnValue<string>(Columns.BureauId); }
			set {
				SetColumnValue(Columns.BureauId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BureauId));
			}
		}
		[DataMember]
		public string DOB {
			get { return GetColumnValue<string>(Columns.DOB); }
			set {
				SetColumnValue(Columns.DOB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DOB));
			}
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set {
				SetColumnValue(Columns.SSN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SSN));
			}
		}
		[DataMember]
		public string Phone {
			get { return GetColumnValue<string>(Columns.Phone); }
			set {
				SetColumnValue(Columns.Phone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Phone));
			}
		}
		[DataMember]
		public int? PhoneStatus {
			get { return GetColumnValue<int?>(Columns.PhoneStatus); }
			set {
				SetColumnValue(Columns.PhoneStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneStatus));
			}
		}
		[DataMember]
		public int Score {
			get { return GetColumnValue<int>(Columns.Score); }
			set {
				SetColumnValue(Columns.Score, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Score));
			}
		}
		[DataMember]
		public bool IsScored {
			get { return GetColumnValue<bool>(Columns.IsScored); }
			set {
				SetColumnValue(Columns.IsScored, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsScored));
			}
		}
		[DataMember]
		public bool IsHit {
			get { return GetColumnValue<bool>(Columns.IsHit); }
			set {
				SetColumnValue(Columns.IsHit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsHit));
			}
		}
		[DataMember]
		public string ReportReadable {
			get { return GetColumnValue<string>(Columns.ReportReadable); }
			set {
				SetColumnValue(Columns.ReportReadable, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportReadable));
			}
		}
		[DataMember]
		public string ReportXML {
			get { return GetColumnValue<string>(Columns.ReportXML); }
			set {
				SetColumnValue(Columns.ReportXML, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportXML));
			}
		}
		[DataMember]
		public string ErrorMessage {
			get { return GetColumnValue<string>(Columns.ErrorMessage); }
			set {
				SetColumnValue(Columns.ErrorMessage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ErrorMessage));
			}
		}
		[DataMember]
		public string HitStatus {
			get { return GetColumnValue<string>(Columns.HitStatus); }
			set {
				SetColumnValue(Columns.HitStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HitStatus));
			}
		}
		[DataMember]
		public string DecisionCode {
			get { return GetColumnValue<string>(Columns.DecisionCode); }
			set {
				SetColumnValue(Columns.DecisionCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DecisionCode));
			}
		}
		[DataMember]
		public string DecisionText {
			get { return GetColumnValue<string>(Columns.DecisionText); }
			set {
				SetColumnValue(Columns.DecisionText, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DecisionText));
			}
		}
		[DataMember]
		public string ReportRAW {
			get { return GetColumnValue<string>(Columns.ReportRAW); }
			set {
				SetColumnValue(Columns.ReportRAW, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportRAW));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private QL_CreditReportBureau _Bureau;
		//Relationship: FK_QL_CreditReportVendorEasyAccess_QL_CreditReportBureaus
		public QL_CreditReportBureau Bureau
		{
			get
			{
				if(_Bureau == null) {
					_Bureau = QL_CreditReportBureau.FetchByID(this.BureauId);
				}
				return _Bureau;
			}
			set
			{
				SetColumnValue("BureauId", value.BureauID);
				_Bureau = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BureauId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditReportVendorEasyAccessIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BureauIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PhoneColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn PhoneStatusColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ScoreColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsScoredColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsHitColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ReportReadableColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ReportXMLColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ErrorMessageColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn HitStatusColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn DecisionCodeColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn DecisionTextColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ReportRAWColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[17]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditReportVendorEasyAccessID = @"CreditReportVendorEasyAccessID";
			public static readonly string BureauId = @"BureauId";
			public static readonly string DOB = @"DOB";
			public static readonly string SSN = @"SSN";
			public static readonly string Phone = @"Phone";
			public static readonly string PhoneStatus = @"PhoneStatus";
			public static readonly string Score = @"Score";
			public static readonly string IsScored = @"IsScored";
			public static readonly string IsHit = @"IsHit";
			public static readonly string ReportReadable = @"ReportReadable";
			public static readonly string ReportXML = @"ReportXML";
			public static readonly string ErrorMessage = @"ErrorMessage";
			public static readonly string HitStatus = @"HitStatus";
			public static readonly string DecisionCode = @"DecisionCode";
			public static readonly string DecisionText = @"DecisionText";
			public static readonly string ReportRAW = @"ReportRAW";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditReportVendorEasyAccessID; }
		}
		*/

		#region Foreign Collections

		private QL_CreditReportCollection _QL_CreditReportsCol;
		//Relationship: FK_QL_CreditReports_QL_CreditReportVendorEasyAccess
		public QL_CreditReportCollection QL_CreditReportsCol
		{
			get
			{
				if(_QL_CreditReportsCol == null) {
					_QL_CreditReportsCol = new QL_CreditReportCollection();
					_QL_CreditReportsCol.LoadAndCloseReader(QL_CreditReport.Query()
						.WHERE(QL_CreditReport.Columns.CreditReportVendorEasyAccessId, CreditReportVendorEasyAccessID).ExecuteReader());
				}
				return _QL_CreditReportsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QL_CreditReportVendorManual class.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportVendorManualCollection : ActiveList<QL_CreditReportVendorManual, QL_CreditReportVendorManualCollection>
	{
		public static QL_CreditReportVendorManualCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_CreditReportVendorManualCollection result = new QL_CreditReportVendorManualCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_CreditReportVendorManual item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_CreditReportVendorManual table.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportVendorManual : ActiveRecord<QL_CreditReportVendorManual>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_CreditReportVendorManual()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_CreditReportVendorManual", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditReportVendorManualID = new TableSchema.TableColumn(schema);
				colvarCreditReportVendorManualID.ColumnName = "CreditReportVendorManualID";
				colvarCreditReportVendorManualID.DataType = DbType.Int64;
				colvarCreditReportVendorManualID.MaxLength = 0;
				colvarCreditReportVendorManualID.AutoIncrement = true;
				colvarCreditReportVendorManualID.IsNullable = false;
				colvarCreditReportVendorManualID.IsPrimaryKey = true;
				colvarCreditReportVendorManualID.IsForeignKey = false;
				colvarCreditReportVendorManualID.IsReadOnly = false;
				colvarCreditReportVendorManualID.DefaultSetting = @"";
				colvarCreditReportVendorManualID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReportVendorManualID);

				TableSchema.TableColumn colvarBureauId = new TableSchema.TableColumn(schema);
				colvarBureauId.ColumnName = "BureauId";
				colvarBureauId.DataType = DbType.AnsiStringFixedLength;
				colvarBureauId.MaxLength = 2;
				colvarBureauId.AutoIncrement = false;
				colvarBureauId.IsNullable = false;
				colvarBureauId.IsPrimaryKey = false;
				colvarBureauId.IsForeignKey = true;
				colvarBureauId.IsReadOnly = false;
				colvarBureauId.DefaultSetting = @"";
				colvarBureauId.ForeignKeyTableName = "QL_CreditReportBureaus";
				schema.Columns.Add(colvarBureauId);

				TableSchema.TableColumn colvarScore = new TableSchema.TableColumn(schema);
				colvarScore.ColumnName = "Score";
				colvarScore.DataType = DbType.Int16;
				colvarScore.MaxLength = 0;
				colvarScore.AutoIncrement = false;
				colvarScore.IsNullable = false;
				colvarScore.IsPrimaryKey = false;
				colvarScore.IsForeignKey = false;
				colvarScore.IsReadOnly = false;
				colvarScore.DefaultSetting = @"";
				colvarScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScore);

				TableSchema.TableColumn colvarIsScored = new TableSchema.TableColumn(schema);
				colvarIsScored.ColumnName = "IsScored";
				colvarIsScored.DataType = DbType.Boolean;
				colvarIsScored.MaxLength = 0;
				colvarIsScored.AutoIncrement = false;
				colvarIsScored.IsNullable = false;
				colvarIsScored.IsPrimaryKey = false;
				colvarIsScored.IsForeignKey = false;
				colvarIsScored.IsReadOnly = false;
				colvarIsScored.DefaultSetting = @"";
				colvarIsScored.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsScored);

				TableSchema.TableColumn colvarIsHit = new TableSchema.TableColumn(schema);
				colvarIsHit.ColumnName = "IsHit";
				colvarIsHit.DataType = DbType.Boolean;
				colvarIsHit.MaxLength = 0;
				colvarIsHit.AutoIncrement = false;
				colvarIsHit.IsNullable = false;
				colvarIsHit.IsPrimaryKey = false;
				colvarIsHit.IsForeignKey = false;
				colvarIsHit.IsReadOnly = false;
				colvarIsHit.DefaultSetting = @"";
				colvarIsHit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHit);

				TableSchema.TableColumn colvarReport = new TableSchema.TableColumn(schema);
				colvarReport.ColumnName = "Report";
				colvarReport.DataType = DbType.String;
				colvarReport.MaxLength = -1;
				colvarReport.AutoIncrement = false;
				colvarReport.IsNullable = false;
				colvarReport.IsPrimaryKey = false;
				colvarReport.IsForeignKey = false;
				colvarReport.IsReadOnly = false;
				colvarReport.DefaultSetting = @"";
				colvarReport.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReport);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_CreditReportVendorManual",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_CreditReportVendorManual LoadFrom(QL_CreditReportVendorManual item)
		{
			QL_CreditReportVendorManual result = new QL_CreditReportVendorManual();
			if (item.CreditReportVendorManualID != default(long)) {
				result.LoadByKey(item.CreditReportVendorManualID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CreditReportVendorManualID {
			get { return GetColumnValue<long>(Columns.CreditReportVendorManualID); }
			set {
				SetColumnValue(Columns.CreditReportVendorManualID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportVendorManualID));
			}
		}
		[DataMember]
		public string BureauId {
			get { return GetColumnValue<string>(Columns.BureauId); }
			set {
				SetColumnValue(Columns.BureauId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BureauId));
			}
		}
		[DataMember]
		public short Score {
			get { return GetColumnValue<short>(Columns.Score); }
			set {
				SetColumnValue(Columns.Score, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Score));
			}
		}
		[DataMember]
		public bool IsScored {
			get { return GetColumnValue<bool>(Columns.IsScored); }
			set {
				SetColumnValue(Columns.IsScored, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsScored));
			}
		}
		[DataMember]
		public bool IsHit {
			get { return GetColumnValue<bool>(Columns.IsHit); }
			set {
				SetColumnValue(Columns.IsHit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsHit));
			}
		}
		[DataMember]
		public string Report {
			get { return GetColumnValue<string>(Columns.Report); }
			set {
				SetColumnValue(Columns.Report, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Report));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private QL_CreditReportBureau _Bureau;
		//Relationship: FK_QL_CreditReportVendorManual_QL_CreditReportBureaus
		public QL_CreditReportBureau Bureau
		{
			get
			{
				if(_Bureau == null) {
					_Bureau = QL_CreditReportBureau.FetchByID(this.BureauId);
				}
				return _Bureau;
			}
			set
			{
				SetColumnValue("BureauId", value.BureauID);
				_Bureau = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BureauId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditReportVendorManualIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BureauIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ScoreColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsScoredColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsHitColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ReportColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditReportVendorManualID = @"CreditReportVendorManualID";
			public static readonly string BureauId = @"BureauId";
			public static readonly string Score = @"Score";
			public static readonly string IsScored = @"IsScored";
			public static readonly string IsHit = @"IsHit";
			public static readonly string Report = @"Report";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditReportVendorManualID; }
		}
		*/

		#region Foreign Collections

		private QL_CreditReportCollection _QL_CreditReportsCol;
		//Relationship: FK_QL_CreditReports_QL_CreditReportVendorManual
		public QL_CreditReportCollection QL_CreditReportsCol
		{
			get
			{
				if(_QL_CreditReportsCol == null) {
					_QL_CreditReportsCol = new QL_CreditReportCollection();
					_QL_CreditReportsCol.LoadAndCloseReader(QL_CreditReport.Query()
						.WHERE(QL_CreditReport.Columns.CreditReportVendorManualId, CreditReportVendorManualID).ExecuteReader());
				}
				return _QL_CreditReportsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QL_CreditReportVendorMicrobilt class.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportVendorMicrobiltCollection : ActiveList<QL_CreditReportVendorMicrobilt, QL_CreditReportVendorMicrobiltCollection>
	{
		public static QL_CreditReportVendorMicrobiltCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_CreditReportVendorMicrobiltCollection result = new QL_CreditReportVendorMicrobiltCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_CreditReportVendorMicrobilt item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_CreditReportVendorMicrobilt table.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportVendorMicrobilt : ActiveRecord<QL_CreditReportVendorMicrobilt>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_CreditReportVendorMicrobilt()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_CreditReportVendorMicrobilt", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditReportVendorMicrobiltID = new TableSchema.TableColumn(schema);
				colvarCreditReportVendorMicrobiltID.ColumnName = "CreditReportVendorMicrobiltID";
				colvarCreditReportVendorMicrobiltID.DataType = DbType.Int64;
				colvarCreditReportVendorMicrobiltID.MaxLength = 0;
				colvarCreditReportVendorMicrobiltID.AutoIncrement = true;
				colvarCreditReportVendorMicrobiltID.IsNullable = false;
				colvarCreditReportVendorMicrobiltID.IsPrimaryKey = true;
				colvarCreditReportVendorMicrobiltID.IsForeignKey = false;
				colvarCreditReportVendorMicrobiltID.IsReadOnly = false;
				colvarCreditReportVendorMicrobiltID.DefaultSetting = @"";
				colvarCreditReportVendorMicrobiltID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReportVendorMicrobiltID);

				TableSchema.TableColumn colvarBureauId = new TableSchema.TableColumn(schema);
				colvarBureauId.ColumnName = "BureauId";
				colvarBureauId.DataType = DbType.AnsiStringFixedLength;
				colvarBureauId.MaxLength = 2;
				colvarBureauId.AutoIncrement = false;
				colvarBureauId.IsNullable = false;
				colvarBureauId.IsPrimaryKey = false;
				colvarBureauId.IsForeignKey = true;
				colvarBureauId.IsReadOnly = false;
				colvarBureauId.DefaultSetting = @"";
				colvarBureauId.ForeignKeyTableName = "QL_CreditReportBureaus";
				schema.Columns.Add(colvarBureauId);

				TableSchema.TableColumn colvarScore = new TableSchema.TableColumn(schema);
				colvarScore.ColumnName = "Score";
				colvarScore.DataType = DbType.Int32;
				colvarScore.MaxLength = 0;
				colvarScore.AutoIncrement = false;
				colvarScore.IsNullable = false;
				colvarScore.IsPrimaryKey = false;
				colvarScore.IsForeignKey = false;
				colvarScore.IsReadOnly = false;
				colvarScore.DefaultSetting = @"";
				colvarScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScore);

				TableSchema.TableColumn colvarIsScored = new TableSchema.TableColumn(schema);
				colvarIsScored.ColumnName = "IsScored";
				colvarIsScored.DataType = DbType.Boolean;
				colvarIsScored.MaxLength = 0;
				colvarIsScored.AutoIncrement = false;
				colvarIsScored.IsNullable = false;
				colvarIsScored.IsPrimaryKey = false;
				colvarIsScored.IsForeignKey = false;
				colvarIsScored.IsReadOnly = false;
				colvarIsScored.DefaultSetting = @"";
				colvarIsScored.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsScored);

				TableSchema.TableColumn colvarIsHit = new TableSchema.TableColumn(schema);
				colvarIsHit.ColumnName = "IsHit";
				colvarIsHit.DataType = DbType.Boolean;
				colvarIsHit.MaxLength = 0;
				colvarIsHit.AutoIncrement = false;
				colvarIsHit.IsNullable = false;
				colvarIsHit.IsPrimaryKey = false;
				colvarIsHit.IsForeignKey = false;
				colvarIsHit.IsReadOnly = false;
				colvarIsHit.DefaultSetting = @"";
				colvarIsHit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHit);

				TableSchema.TableColumn colvarCreditReport = new TableSchema.TableColumn(schema);
				colvarCreditReport.ColumnName = "CreditReport";
				colvarCreditReport.DataType = DbType.String;
				colvarCreditReport.MaxLength = -1;
				colvarCreditReport.AutoIncrement = false;
				colvarCreditReport.IsNullable = true;
				colvarCreditReport.IsPrimaryKey = false;
				colvarCreditReport.IsForeignKey = false;
				colvarCreditReport.IsReadOnly = false;
				colvarCreditReport.DefaultSetting = @"";
				colvarCreditReport.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReport);

				TableSchema.TableColumn colvarMicroBiltGUID = new TableSchema.TableColumn(schema);
				colvarMicroBiltGUID.ColumnName = "MicroBiltGUID";
				colvarMicroBiltGUID.DataType = DbType.String;
				colvarMicroBiltGUID.MaxLength = 50;
				colvarMicroBiltGUID.AutoIncrement = false;
				colvarMicroBiltGUID.IsNullable = false;
				colvarMicroBiltGUID.IsPrimaryKey = false;
				colvarMicroBiltGUID.IsForeignKey = false;
				colvarMicroBiltGUID.IsReadOnly = false;
				colvarMicroBiltGUID.DefaultSetting = @"";
				colvarMicroBiltGUID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMicroBiltGUID);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_CreditReportVendorMicrobilt",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_CreditReportVendorMicrobilt LoadFrom(QL_CreditReportVendorMicrobilt item)
		{
			QL_CreditReportVendorMicrobilt result = new QL_CreditReportVendorMicrobilt();
			if (item.CreditReportVendorMicrobiltID != default(long)) {
				result.LoadByKey(item.CreditReportVendorMicrobiltID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CreditReportVendorMicrobiltID {
			get { return GetColumnValue<long>(Columns.CreditReportVendorMicrobiltID); }
			set {
				SetColumnValue(Columns.CreditReportVendorMicrobiltID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportVendorMicrobiltID));
			}
		}
		[DataMember]
		public string BureauId {
			get { return GetColumnValue<string>(Columns.BureauId); }
			set {
				SetColumnValue(Columns.BureauId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BureauId));
			}
		}
		[DataMember]
		public int Score {
			get { return GetColumnValue<int>(Columns.Score); }
			set {
				SetColumnValue(Columns.Score, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Score));
			}
		}
		[DataMember]
		public bool IsScored {
			get { return GetColumnValue<bool>(Columns.IsScored); }
			set {
				SetColumnValue(Columns.IsScored, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsScored));
			}
		}
		[DataMember]
		public bool IsHit {
			get { return GetColumnValue<bool>(Columns.IsHit); }
			set {
				SetColumnValue(Columns.IsHit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsHit));
			}
		}
		[DataMember]
		public string CreditReport {
			get { return GetColumnValue<string>(Columns.CreditReport); }
			set {
				SetColumnValue(Columns.CreditReport, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReport));
			}
		}
		[DataMember]
		public string MicroBiltGUID {
			get { return GetColumnValue<string>(Columns.MicroBiltGUID); }
			set {
				SetColumnValue(Columns.MicroBiltGUID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MicroBiltGUID));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private QL_CreditReportBureau _Bureau;
		//Relationship: FK_QL_CreditReportVendorMicrobilt_QL_CreditReportBureaus
		public QL_CreditReportBureau Bureau
		{
			get
			{
				if(_Bureau == null) {
					_Bureau = QL_CreditReportBureau.FetchByID(this.BureauId);
				}
				return _Bureau;
			}
			set
			{
				SetColumnValue("BureauId", value.BureauID);
				_Bureau = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BureauId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditReportVendorMicrobiltIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BureauIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ScoreColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsScoredColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsHitColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreditReportColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MicroBiltGUIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditReportVendorMicrobiltID = @"CreditReportVendorMicrobiltID";
			public static readonly string BureauId = @"BureauId";
			public static readonly string Score = @"Score";
			public static readonly string IsScored = @"IsScored";
			public static readonly string IsHit = @"IsHit";
			public static readonly string CreditReport = @"CreditReport";
			public static readonly string MicroBiltGUID = @"MicroBiltGUID";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditReportVendorMicrobiltID; }
		}
		*/

		#region Foreign Collections

		private QL_CreditReportCollection _QL_CreditReportsCol;
		//Relationship: FK_QL_CreditReports_QL_CreditReportVendorMicrobilt
		public QL_CreditReportCollection QL_CreditReportsCol
		{
			get
			{
				if(_QL_CreditReportsCol == null) {
					_QL_CreditReportsCol = new QL_CreditReportCollection();
					_QL_CreditReportsCol.LoadAndCloseReader(QL_CreditReport.Query()
						.WHERE(QL_CreditReport.Columns.CreditReportVendorMicrobiltId, CreditReportVendorMicrobiltID).ExecuteReader());
				}
				return _QL_CreditReportsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QL_CreditReportVendor class.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportVendorCollection : ActiveList<QL_CreditReportVendor, QL_CreditReportVendorCollection>
	{
		public static QL_CreditReportVendorCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_CreditReportVendorCollection result = new QL_CreditReportVendorCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_CreditReportVendor item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_CreditReportVendors table.
	/// </summary>
	[DataContract]
	public partial class QL_CreditReportVendor : ActiveRecord<QL_CreditReportVendor>, INotifyPropertyChanged
	{

		#region MetaData
		[DataContract]
		public static class MetaData
		{
			[EnumMember()] public const string ManualID = "0   ";
			[EnumMember()] public const string MicrobiltID = "1   ";
			[EnumMember()] public const string AbaraID = "2   ";
			[EnumMember()] public const string EasyAccessID = "3   ";
		}
		#endregion MetaData

		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_CreditReportVendor()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_CreditReportVendors", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditReportVendorID = new TableSchema.TableColumn(schema);
				colvarCreditReportVendorID.ColumnName = "CreditReportVendorID";
				colvarCreditReportVendorID.DataType = DbType.AnsiStringFixedLength;
				colvarCreditReportVendorID.MaxLength = 4;
				colvarCreditReportVendorID.AutoIncrement = false;
				colvarCreditReportVendorID.IsNullable = false;
				colvarCreditReportVendorID.IsPrimaryKey = true;
				colvarCreditReportVendorID.IsForeignKey = false;
				colvarCreditReportVendorID.IsReadOnly = false;
				colvarCreditReportVendorID.DefaultSetting = @"";
				colvarCreditReportVendorID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReportVendorID);

				TableSchema.TableColumn colvarVendorName = new TableSchema.TableColumn(schema);
				colvarVendorName.ColumnName = "VendorName";
				colvarVendorName.DataType = DbType.String;
				colvarVendorName.MaxLength = 50;
				colvarVendorName.AutoIncrement = false;
				colvarVendorName.IsNullable = false;
				colvarVendorName.IsPrimaryKey = false;
				colvarVendorName.IsForeignKey = false;
				colvarVendorName.IsReadOnly = false;
				colvarVendorName.DefaultSetting = @"";
				colvarVendorName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVendorName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_CreditReportVendors",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_CreditReportVendor LoadFrom(QL_CreditReportVendor item)
		{
			QL_CreditReportVendor result = new QL_CreditReportVendor();
			if (item.CreditReportVendorID != default(string)) {
				result.LoadByKey(item.CreditReportVendorID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CreditReportVendorID {
			get { return GetColumnValue<string>(Columns.CreditReportVendorID); }
			set {
				SetColumnValue(Columns.CreditReportVendorID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportVendorID));
			}
		}
		[DataMember]
		public string VendorName {
			get { return GetColumnValue<string>(Columns.VendorName); }
			set {
				SetColumnValue(Columns.VendorName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VendorName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return VendorName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditReportVendorIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn VendorNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditReportVendorID = @"CreditReportVendorID";
			public static readonly string VendorName = @"VendorName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditReportVendorID; }
		}
		*/

		#region Foreign Collections

		private QL_CreditReportCollection _QL_CreditReportsCol;
		//Relationship: FK_QL_CreditReports_QL_CreditReportVendors
		public QL_CreditReportCollection QL_CreditReportsCol
		{
			get
			{
				if(_QL_CreditReportsCol == null) {
					_QL_CreditReportsCol = new QL_CreditReportCollection();
					_QL_CreditReportsCol.LoadAndCloseReader(QL_CreditReport.Query()
						.WHERE(QL_CreditReport.Columns.CreditReportVendorId, CreditReportVendorID).ExecuteReader());
				}
				return _QL_CreditReportsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QL_CreditScoreGroup class.
	/// </summary>
	[DataContract]
	public partial class QL_CreditScoreGroupCollection : ActiveList<QL_CreditScoreGroup, QL_CreditScoreGroupCollection>
	{
		public static QL_CreditScoreGroupCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_CreditScoreGroupCollection result = new QL_CreditScoreGroupCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_CreditScoreGroup item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_CreditScoreGroups table.
	/// </summary>
	[DataContract]
	public partial class QL_CreditScoreGroup : ActiveRecord<QL_CreditScoreGroup>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_CreditScoreGroup()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_CreditScoreGroups", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditScoreGroupID = new TableSchema.TableColumn(schema);
				colvarCreditScoreGroupID.ColumnName = "CreditScoreGroupID";
				colvarCreditScoreGroupID.DataType = DbType.AnsiString;
				colvarCreditScoreGroupID.MaxLength = 10;
				colvarCreditScoreGroupID.AutoIncrement = false;
				colvarCreditScoreGroupID.IsNullable = false;
				colvarCreditScoreGroupID.IsPrimaryKey = true;
				colvarCreditScoreGroupID.IsForeignKey = false;
				colvarCreditScoreGroupID.IsReadOnly = false;
				colvarCreditScoreGroupID.DefaultSetting = @"";
				colvarCreditScoreGroupID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScoreGroupID);

				TableSchema.TableColumn colvarShortName = new TableSchema.TableColumn(schema);
				colvarShortName.ColumnName = "ShortName";
				colvarShortName.DataType = DbType.AnsiString;
				colvarShortName.MaxLength = 20;
				colvarShortName.AutoIncrement = false;
				colvarShortName.IsNullable = false;
				colvarShortName.IsPrimaryKey = false;
				colvarShortName.IsForeignKey = false;
				colvarShortName.IsReadOnly = false;
				colvarShortName.DefaultSetting = @"";
				colvarShortName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortName);

				TableSchema.TableColumn colvarLongName = new TableSchema.TableColumn(schema);
				colvarLongName.ColumnName = "LongName";
				colvarLongName.DataType = DbType.AnsiString;
				colvarLongName.MaxLength = 50;
				colvarLongName.AutoIncrement = false;
				colvarLongName.IsNullable = false;
				colvarLongName.IsPrimaryKey = false;
				colvarLongName.IsForeignKey = false;
				colvarLongName.IsReadOnly = false;
				colvarLongName.DefaultSetting = @"";
				colvarLongName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_CreditScoreGroups",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_CreditScoreGroup LoadFrom(QL_CreditScoreGroup item)
		{
			QL_CreditScoreGroup result = new QL_CreditScoreGroup();
			if (item.CreditScoreGroupID != default(string)) {
				result.LoadByKey(item.CreditScoreGroupID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CreditScoreGroupID {
			get { return GetColumnValue<string>(Columns.CreditScoreGroupID); }
			set {
				SetColumnValue(Columns.CreditScoreGroupID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScoreGroupID));
			}
		}
		[DataMember]
		public string ShortName {
			get { return GetColumnValue<string>(Columns.ShortName); }
			set {
				SetColumnValue(Columns.ShortName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortName));
			}
		}
		[DataMember]
		public string LongName {
			get { return GetColumnValue<string>(Columns.LongName); }
			set {
				SetColumnValue(Columns.LongName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LongName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ShortName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditScoreGroupIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ShortNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LongNameColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditScoreGroupID = @"CreditScoreGroupID";
			public static readonly string ShortName = @"ShortName";
			public static readonly string LongName = @"LongName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditScoreGroupID; }
		}
		*/

		#region Foreign Collections

		private QL_CreditScoreGroupsByDealersAndSeasonCollection _QL_CreditScoreGroupsByDealersAndSeasonsCol;
		//Relationship: FK_QL_CreditScoreGroupsByDealersAndSeasons_QL_CreditScoreGroups
		public QL_CreditScoreGroupsByDealersAndSeasonCollection QL_CreditScoreGroupsByDealersAndSeasonsCol
		{
			get
			{
				if(_QL_CreditScoreGroupsByDealersAndSeasonsCol == null) {
					_QL_CreditScoreGroupsByDealersAndSeasonsCol = new QL_CreditScoreGroupsByDealersAndSeasonCollection();
					_QL_CreditScoreGroupsByDealersAndSeasonsCol.LoadAndCloseReader(QL_CreditScoreGroupsByDealersAndSeason.Query()
						.WHERE(QL_CreditScoreGroupsByDealersAndSeason.Columns.CreditScoreGroupId, CreditScoreGroupID).ExecuteReader());
				}
				return _QL_CreditScoreGroupsByDealersAndSeasonsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QL_CreditScoreGroupsByDealersAndSeason class.
	/// </summary>
	[DataContract]
	public partial class QL_CreditScoreGroupsByDealersAndSeasonCollection : ActiveList<QL_CreditScoreGroupsByDealersAndSeason, QL_CreditScoreGroupsByDealersAndSeasonCollection>
	{
		public static QL_CreditScoreGroupsByDealersAndSeasonCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_CreditScoreGroupsByDealersAndSeasonCollection result = new QL_CreditScoreGroupsByDealersAndSeasonCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_CreditScoreGroupsByDealersAndSeason item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_CreditScoreGroupsByDealersAndSeasons table.
	/// </summary>
	[DataContract]
	public partial class QL_CreditScoreGroupsByDealersAndSeason : ActiveRecord<QL_CreditScoreGroupsByDealersAndSeason>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_CreditScoreGroupsByDealersAndSeason()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_CreditScoreGroupsByDealersAndSeasons", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditScoreGroupByDaSID = new TableSchema.TableColumn(schema);
				colvarCreditScoreGroupByDaSID.ColumnName = "CreditScoreGroupByDaSID";
				colvarCreditScoreGroupByDaSID.DataType = DbType.Int32;
				colvarCreditScoreGroupByDaSID.MaxLength = 0;
				colvarCreditScoreGroupByDaSID.AutoIncrement = false;
				colvarCreditScoreGroupByDaSID.IsNullable = false;
				colvarCreditScoreGroupByDaSID.IsPrimaryKey = true;
				colvarCreditScoreGroupByDaSID.IsForeignKey = false;
				colvarCreditScoreGroupByDaSID.IsReadOnly = false;
				colvarCreditScoreGroupByDaSID.DefaultSetting = @"";
				colvarCreditScoreGroupByDaSID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScoreGroupByDaSID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarSeasonId = new TableSchema.TableColumn(schema);
				colvarSeasonId.ColumnName = "SeasonId";
				colvarSeasonId.DataType = DbType.Int32;
				colvarSeasonId.MaxLength = 0;
				colvarSeasonId.AutoIncrement = false;
				colvarSeasonId.IsNullable = false;
				colvarSeasonId.IsPrimaryKey = false;
				colvarSeasonId.IsForeignKey = false;
				colvarSeasonId.IsReadOnly = false;
				colvarSeasonId.DefaultSetting = @"";
				colvarSeasonId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonId);

				TableSchema.TableColumn colvarCreditScoreGroupId = new TableSchema.TableColumn(schema);
				colvarCreditScoreGroupId.ColumnName = "CreditScoreGroupId";
				colvarCreditScoreGroupId.DataType = DbType.AnsiString;
				colvarCreditScoreGroupId.MaxLength = 10;
				colvarCreditScoreGroupId.AutoIncrement = false;
				colvarCreditScoreGroupId.IsNullable = false;
				colvarCreditScoreGroupId.IsPrimaryKey = false;
				colvarCreditScoreGroupId.IsForeignKey = true;
				colvarCreditScoreGroupId.IsReadOnly = false;
				colvarCreditScoreGroupId.DefaultSetting = @"";
				colvarCreditScoreGroupId.ForeignKeyTableName = "QL_CreditScoreGroups";
				schema.Columns.Add(colvarCreditScoreGroupId);

				TableSchema.TableColumn colvarTopRange = new TableSchema.TableColumn(schema);
				colvarTopRange.ColumnName = "TopRange";
				colvarTopRange.DataType = DbType.Int16;
				colvarTopRange.MaxLength = 0;
				colvarTopRange.AutoIncrement = false;
				colvarTopRange.IsNullable = false;
				colvarTopRange.IsPrimaryKey = false;
				colvarTopRange.IsForeignKey = false;
				colvarTopRange.IsReadOnly = false;
				colvarTopRange.DefaultSetting = @"";
				colvarTopRange.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTopRange);

				TableSchema.TableColumn colvarBottomRange = new TableSchema.TableColumn(schema);
				colvarBottomRange.ColumnName = "BottomRange";
				colvarBottomRange.DataType = DbType.Int16;
				colvarBottomRange.MaxLength = 0;
				colvarBottomRange.AutoIncrement = false;
				colvarBottomRange.IsNullable = false;
				colvarBottomRange.IsPrimaryKey = false;
				colvarBottomRange.IsForeignKey = false;
				colvarBottomRange.IsReadOnly = false;
				colvarBottomRange.DefaultSetting = @"";
				colvarBottomRange.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBottomRange);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"('SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_CreditScoreGroupsByDealersAndSeasons",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_CreditScoreGroupsByDealersAndSeason LoadFrom(QL_CreditScoreGroupsByDealersAndSeason item)
		{
			QL_CreditScoreGroupsByDealersAndSeason result = new QL_CreditScoreGroupsByDealersAndSeason();
			if (item.CreditScoreGroupByDaSID != default(int)) {
				result.LoadByKey(item.CreditScoreGroupByDaSID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CreditScoreGroupByDaSID {
			get { return GetColumnValue<int>(Columns.CreditScoreGroupByDaSID); }
			set {
				SetColumnValue(Columns.CreditScoreGroupByDaSID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScoreGroupByDaSID));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public int SeasonId {
			get { return GetColumnValue<int>(Columns.SeasonId); }
			set {
				SetColumnValue(Columns.SeasonId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonId));
			}
		}
		[DataMember]
		public string CreditScoreGroupId {
			get { return GetColumnValue<string>(Columns.CreditScoreGroupId); }
			set {
				SetColumnValue(Columns.CreditScoreGroupId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScoreGroupId));
			}
		}
		[DataMember]
		public short TopRange {
			get { return GetColumnValue<short>(Columns.TopRange); }
			set {
				SetColumnValue(Columns.TopRange, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TopRange));
			}
		}
		[DataMember]
		public short BottomRange {
			get { return GetColumnValue<short>(Columns.BottomRange); }
			set {
				SetColumnValue(Columns.BottomRange, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BottomRange));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Dealer _Dealer;
		//Relationship: FK_QL_CreditScoreGroupsByDealersAndSeasons_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		private QL_CreditScoreGroup _CreditScoreGroup;
		//Relationship: FK_QL_CreditScoreGroupsByDealersAndSeasons_QL_CreditScoreGroups
		public QL_CreditScoreGroup CreditScoreGroup
		{
			get
			{
				if(_CreditScoreGroup == null) {
					_CreditScoreGroup = QL_CreditScoreGroup.FetchByID(this.CreditScoreGroupId);
				}
				return _CreditScoreGroup;
			}
			set
			{
				SetColumnValue("CreditScoreGroupId", value.CreditScoreGroupID);
				_CreditScoreGroup = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CreditScoreGroupByDaSID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditScoreGroupByDaSIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SeasonIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreditScoreGroupIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TopRangeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn BottomRangeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditScoreGroupByDaSID = @"CreditScoreGroupByDaSID";
			public static readonly string DealerId = @"DealerId";
			public static readonly string SeasonId = @"SeasonId";
			public static readonly string CreditScoreGroupId = @"CreditScoreGroupId";
			public static readonly string TopRange = @"TopRange";
			public static readonly string BottomRange = @"BottomRange";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditScoreGroupByDaSID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the QL_CustomerMasterLead class.
	/// </summary>
	[DataContract]
	public partial class QL_CustomerMasterLeadCollection : ActiveList<QL_CustomerMasterLead, QL_CustomerMasterLeadCollection>
	{
		public static QL_CustomerMasterLeadCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_CustomerMasterLeadCollection result = new QL_CustomerMasterLeadCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_CustomerMasterLead item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_CustomerMasterLeads table.
	/// </summary>
	[DataContract]
	public partial class QL_CustomerMasterLead : ActiveRecord<QL_CustomerMasterLead>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_CustomerMasterLead()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_CustomerMasterLeads", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterLeadID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterLeadID.ColumnName = "CustomerMasterLeadID";
				colvarCustomerMasterLeadID.DataType = DbType.Guid;
				colvarCustomerMasterLeadID.MaxLength = 0;
				colvarCustomerMasterLeadID.AutoIncrement = false;
				colvarCustomerMasterLeadID.IsNullable = false;
				colvarCustomerMasterLeadID.IsPrimaryKey = true;
				colvarCustomerMasterLeadID.IsForeignKey = false;
				colvarCustomerMasterLeadID.IsReadOnly = false;
				colvarCustomerMasterLeadID.DefaultSetting = @"(newid())";
				colvarCustomerMasterLeadID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterLeadID);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = true;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "AE_CustomerMasterFiles";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = true;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "QL_Leads";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = true;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"('LEAD')";
				colvarCustomerTypeId.ForeignKeyTableName = "AE_CustomerTypes";
				schema.Columns.Add(colvarCustomerTypeId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_CustomerMasterLeads",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_CustomerMasterLead LoadFrom(QL_CustomerMasterLead item)
		{
			QL_CustomerMasterLead result = new QL_CustomerMasterLead();
			if (item.CustomerMasterLeadID != default(Guid)) {
				result.LoadByKey(item.CustomerMasterLeadID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public Guid CustomerMasterLeadID {
			get { return GetColumnValue<Guid>(Columns.CustomerMasterLeadID); }
			set {
				SetColumnValue(Columns.CustomerMasterLeadID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterLeadID));
			}
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set {
				SetColumnValue(Columns.CustomerMasterFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileId));
			}
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set {
				SetColumnValue(Columns.LeadId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadId));
			}
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set {
				SetColumnValue(Columns.CustomerTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerTypeId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_CustomerMasterFile _CustomerMasterFile;
		//Relationship: FK_QL_CustomerMasterLeads_AE_CustomerMasterFiles
		public AE_CustomerMasterFile CustomerMasterFile
		{
			get
			{
				if(_CustomerMasterFile == null) {
					_CustomerMasterFile = AE_CustomerMasterFile.FetchByID(this.CustomerMasterFileId);
				}
				return _CustomerMasterFile;
			}
			set
			{
				SetColumnValue("CustomerMasterFileId", value.CustomerMasterFileID);
				_CustomerMasterFile = value;
			}
		}

		private AE_CustomerType _CustomerType;
		//Relationship: FK_QL_CustomerMasterLeads_AE_CustomerTypes
		public AE_CustomerType CustomerType
		{
			get
			{
				if(_CustomerType == null) {
					_CustomerType = AE_CustomerType.FetchByID(this.CustomerTypeId);
				}
				return _CustomerType;
			}
			set
			{
				SetColumnValue("CustomerTypeId", value.CustomerTypeID);
				_CustomerType = value;
			}
		}

		private QL_Lead _Lead;
		//Relationship: FK_QL_CustomerMasterLeads_QL_Leads
		public QL_Lead Lead
		{
			get
			{
				if(_Lead == null) {
					_Lead = QL_Lead.FetchByID(this.LeadId);
				}
				return _Lead;
			}
			set
			{
				SetColumnValue("LeadId", value.LeadID);
				_Lead = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CustomerMasterLeadID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterLeadIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerMasterLeadID = @"CustomerMasterLeadID";
			public static readonly string CustomerMasterFileId = @"CustomerMasterFileId";
			public static readonly string LeadId = @"LeadId";
			public static readonly string CustomerTypeId = @"CustomerTypeId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerMasterLeadID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the QL_DealerLead class.
	/// </summary>
	[DataContract]
	public partial class QL_DealerLeadCollection : ActiveList<QL_DealerLead, QL_DealerLeadCollection>
	{
		public static QL_DealerLeadCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_DealerLeadCollection result = new QL_DealerLeadCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_DealerLead item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_DealerLeads table.
	/// </summary>
	[DataContract]
	public partial class QL_DealerLead : ActiveRecord<QL_DealerLead>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_DealerLead()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_DealerLeads", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDealerLeadID = new TableSchema.TableColumn(schema);
				colvarDealerLeadID.ColumnName = "DealerLeadID";
				colvarDealerLeadID.DataType = DbType.Int32;
				colvarDealerLeadID.MaxLength = 0;
				colvarDealerLeadID.AutoIncrement = true;
				colvarDealerLeadID.IsNullable = false;
				colvarDealerLeadID.IsPrimaryKey = true;
				colvarDealerLeadID.IsForeignKey = false;
				colvarDealerLeadID.IsReadOnly = false;
				colvarDealerLeadID.DefaultSetting = @"";
				colvarDealerLeadID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerLeadID);

				TableSchema.TableColumn colvarDealerLeadTypeId = new TableSchema.TableColumn(schema);
				colvarDealerLeadTypeId.ColumnName = "DealerLeadTypeId";
				colvarDealerLeadTypeId.DataType = DbType.AnsiString;
				colvarDealerLeadTypeId.MaxLength = 50;
				colvarDealerLeadTypeId.AutoIncrement = false;
				colvarDealerLeadTypeId.IsNullable = false;
				colvarDealerLeadTypeId.IsPrimaryKey = false;
				colvarDealerLeadTypeId.IsForeignKey = false;
				colvarDealerLeadTypeId.IsReadOnly = false;
				colvarDealerLeadTypeId.DefaultSetting = @"('dealer')";
				colvarDealerLeadTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerLeadTypeId);

				TableSchema.TableColumn colvarDealerName = new TableSchema.TableColumn(schema);
				colvarDealerName.ColumnName = "DealerName";
				colvarDealerName.DataType = DbType.String;
				colvarDealerName.MaxLength = 150;
				colvarDealerName.AutoIncrement = false;
				colvarDealerName.IsNullable = false;
				colvarDealerName.IsPrimaryKey = false;
				colvarDealerName.IsForeignKey = false;
				colvarDealerName.IsReadOnly = false;
				colvarDealerName.DefaultSetting = @"";
				colvarDealerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerName);

				TableSchema.TableColumn colvarContactFirstName = new TableSchema.TableColumn(schema);
				colvarContactFirstName.ColumnName = "ContactFirstName";
				colvarContactFirstName.DataType = DbType.String;
				colvarContactFirstName.MaxLength = 50;
				colvarContactFirstName.AutoIncrement = false;
				colvarContactFirstName.IsNullable = false;
				colvarContactFirstName.IsPrimaryKey = false;
				colvarContactFirstName.IsForeignKey = false;
				colvarContactFirstName.IsReadOnly = false;
				colvarContactFirstName.DefaultSetting = @"";
				colvarContactFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactFirstName);

				TableSchema.TableColumn colvarContactLastName = new TableSchema.TableColumn(schema);
				colvarContactLastName.ColumnName = "ContactLastName";
				colvarContactLastName.DataType = DbType.String;
				colvarContactLastName.MaxLength = 50;
				colvarContactLastName.AutoIncrement = false;
				colvarContactLastName.IsNullable = false;
				colvarContactLastName.IsPrimaryKey = false;
				colvarContactLastName.IsForeignKey = false;
				colvarContactLastName.IsReadOnly = false;
				colvarContactLastName.DefaultSetting = @"";
				colvarContactLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactLastName);

				TableSchema.TableColumn colvarContactEmail = new TableSchema.TableColumn(schema);
				colvarContactEmail.ColumnName = "ContactEmail";
				colvarContactEmail.DataType = DbType.String;
				colvarContactEmail.MaxLength = 500;
				colvarContactEmail.AutoIncrement = false;
				colvarContactEmail.IsNullable = false;
				colvarContactEmail.IsPrimaryKey = false;
				colvarContactEmail.IsForeignKey = false;
				colvarContactEmail.IsReadOnly = false;
				colvarContactEmail.DefaultSetting = @"";
				colvarContactEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactEmail);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.AnsiStringFixedLength;
				colvarPhoneWork.MaxLength = 20;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = false;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.AnsiStringFixedLength;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarPhoneFax = new TableSchema.TableColumn(schema);
				colvarPhoneFax.ColumnName = "PhoneFax";
				colvarPhoneFax.DataType = DbType.AnsiStringFixedLength;
				colvarPhoneFax.MaxLength = 20;
				colvarPhoneFax.AutoIncrement = false;
				colvarPhoneFax.IsNullable = true;
				colvarPhoneFax.IsPrimaryKey = false;
				colvarPhoneFax.IsForeignKey = false;
				colvarPhoneFax.IsReadOnly = false;
				colvarPhoneFax.DefaultSetting = @"";
				colvarPhoneFax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneFax);

				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.String;
				colvarAddress.MaxLength = 50;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = false;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);

				TableSchema.TableColumn colvarAddress2 = new TableSchema.TableColumn(schema);
				colvarAddress2.ColumnName = "Address2";
				colvarAddress2.DataType = DbType.String;
				colvarAddress2.MaxLength = 50;
				colvarAddress2.AutoIncrement = false;
				colvarAddress2.IsNullable = true;
				colvarAddress2.IsPrimaryKey = false;
				colvarAddress2.IsForeignKey = false;
				colvarAddress2.IsReadOnly = false;
				colvarAddress2.DefaultSetting = @"";
				colvarAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarStateAB = new TableSchema.TableColumn(schema);
				colvarStateAB.ColumnName = "StateAB";
				colvarStateAB.DataType = DbType.AnsiStringFixedLength;
				colvarStateAB.MaxLength = 2;
				colvarStateAB.AutoIncrement = false;
				colvarStateAB.IsNullable = false;
				colvarStateAB.IsPrimaryKey = false;
				colvarStateAB.IsForeignKey = false;
				colvarStateAB.IsReadOnly = false;
				colvarStateAB.DefaultSetting = @"";
				colvarStateAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateAB);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.AnsiStringFixedLength;
				colvarPostalCode.MaxLength = 5;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarPlusFour = new TableSchema.TableColumn(schema);
				colvarPlusFour.ColumnName = "PlusFour";
				colvarPlusFour.DataType = DbType.AnsiStringFixedLength;
				colvarPlusFour.MaxLength = 4;
				colvarPlusFour.AutoIncrement = false;
				colvarPlusFour.IsNullable = true;
				colvarPlusFour.IsPrimaryKey = false;
				colvarPlusFour.IsForeignKey = false;
				colvarPlusFour.IsReadOnly = false;
				colvarPlusFour.DefaultSetting = @"";
				colvarPlusFour.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlusFour);

				TableSchema.TableColumn colvarMemo = new TableSchema.TableColumn(schema);
				colvarMemo.ColumnName = "Memo";
				colvarMemo.DataType = DbType.String;
				colvarMemo.MaxLength = -1;
				colvarMemo.AutoIncrement = false;
				colvarMemo.IsNullable = true;
				colvarMemo.IsPrimaryKey = false;
				colvarMemo.IsForeignKey = false;
				colvarMemo.IsReadOnly = false;
				colvarMemo.DefaultSetting = @"";
				colvarMemo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMemo);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 500;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = false;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 20;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = false;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_DealerLeads",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_DealerLead LoadFrom(QL_DealerLead item)
		{
			QL_DealerLead result = new QL_DealerLead();
			if (item.DealerLeadID != default(int)) {
				result.LoadByKey(item.DealerLeadID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DealerLeadID {
			get { return GetColumnValue<int>(Columns.DealerLeadID); }
			set {
				SetColumnValue(Columns.DealerLeadID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerLeadID));
			}
		}
		[DataMember]
		public string DealerLeadTypeId {
			get { return GetColumnValue<string>(Columns.DealerLeadTypeId); }
			set {
				SetColumnValue(Columns.DealerLeadTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerLeadTypeId));
			}
		}
		[DataMember]
		public string DealerName {
			get { return GetColumnValue<string>(Columns.DealerName); }
			set {
				SetColumnValue(Columns.DealerName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerName));
			}
		}
		[DataMember]
		public string ContactFirstName {
			get { return GetColumnValue<string>(Columns.ContactFirstName); }
			set {
				SetColumnValue(Columns.ContactFirstName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactFirstName));
			}
		}
		[DataMember]
		public string ContactLastName {
			get { return GetColumnValue<string>(Columns.ContactLastName); }
			set {
				SetColumnValue(Columns.ContactLastName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactLastName));
			}
		}
		[DataMember]
		public string ContactEmail {
			get { return GetColumnValue<string>(Columns.ContactEmail); }
			set {
				SetColumnValue(Columns.ContactEmail, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactEmail));
			}
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set {
				SetColumnValue(Columns.PhoneWork, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneWork));
			}
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set {
				SetColumnValue(Columns.PhoneMobile, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneMobile));
			}
		}
		[DataMember]
		public string PhoneFax {
			get { return GetColumnValue<string>(Columns.PhoneFax); }
			set {
				SetColumnValue(Columns.PhoneFax, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneFax));
			}
		}
		[DataMember]
		public string Address {
			get { return GetColumnValue<string>(Columns.Address); }
			set {
				SetColumnValue(Columns.Address, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Address));
			}
		}
		[DataMember]
		public string Address2 {
			get { return GetColumnValue<string>(Columns.Address2); }
			set {
				SetColumnValue(Columns.Address2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Address2));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string StateAB {
			get { return GetColumnValue<string>(Columns.StateAB); }
			set {
				SetColumnValue(Columns.StateAB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateAB));
			}
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set {
				SetColumnValue(Columns.PostalCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostalCode));
			}
		}
		[DataMember]
		public string PlusFour {
			get { return GetColumnValue<string>(Columns.PlusFour); }
			set {
				SetColumnValue(Columns.PlusFour, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PlusFour));
			}
		}
		[DataMember]
		public string Memo {
			get { return GetColumnValue<string>(Columns.Memo); }
			set {
				SetColumnValue(Columns.Memo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Memo));
			}
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set {
				SetColumnValue(Columns.Username, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Username));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return DealerLeadTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DealerLeadIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerLeadTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DealerNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ContactFirstNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ContactLastNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ContactEmailColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PhoneFaxColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AddressColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn Address2Column
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn StateABColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PlusFourColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn MemoColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[24]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DealerLeadID = @"DealerLeadID";
			public static readonly string DealerLeadTypeId = @"DealerLeadTypeId";
			public static readonly string DealerName = @"DealerName";
			public static readonly string ContactFirstName = @"ContactFirstName";
			public static readonly string ContactLastName = @"ContactLastName";
			public static readonly string ContactEmail = @"ContactEmail";
			public static readonly string PhoneWork = @"PhoneWork";
			public static readonly string PhoneMobile = @"PhoneMobile";
			public static readonly string PhoneFax = @"PhoneFax";
			public static readonly string Address = @"Address";
			public static readonly string Address2 = @"Address2";
			public static readonly string City = @"City";
			public static readonly string StateAB = @"StateAB";
			public static readonly string PostalCode = @"PostalCode";
			public static readonly string PlusFour = @"PlusFour";
			public static readonly string Memo = @"Memo";
			public static readonly string Username = @"Username";
			public static readonly string Password = @"Password";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DealerLeadID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the QL_LeadAddress class.
	/// </summary>
	[DataContract]
	public partial class QL_LeadAddressCollection : ActiveList<QL_LeadAddress, QL_LeadAddressCollection>
	{
		public static QL_LeadAddressCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_LeadAddressCollection result = new QL_LeadAddressCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_LeadAddress item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_LeadAddress table.
	/// </summary>
	[DataContract]
	public partial class QL_LeadAddress : ActiveRecord<QL_LeadAddress>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_LeadAddress()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_LeadAddress", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLeadAddressID = new TableSchema.TableColumn(schema);
				colvarLeadAddressID.ColumnName = "LeadAddressID";
				colvarLeadAddressID.DataType = DbType.Int64;
				colvarLeadAddressID.MaxLength = 0;
				colvarLeadAddressID.AutoIncrement = true;
				colvarLeadAddressID.IsNullable = false;
				colvarLeadAddressID.IsPrimaryKey = true;
				colvarLeadAddressID.IsForeignKey = false;
				colvarLeadAddressID.IsReadOnly = false;
				colvarLeadAddressID.DefaultSetting = @"";
				colvarLeadAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadAddressID);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = true;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "QL_Leads";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = true;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "QL_Address";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_LeadAddress",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_LeadAddress LoadFrom(QL_LeadAddress item)
		{
			QL_LeadAddress result = new QL_LeadAddress();
			if (item.LeadAddressID != default(long)) {
				result.LoadByKey(item.LeadAddressID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long LeadAddressID {
			get { return GetColumnValue<long>(Columns.LeadAddressID); }
			set {
				SetColumnValue(Columns.LeadAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadAddressID));
			}
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set {
				SetColumnValue(Columns.LeadId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadId));
			}
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set {
				SetColumnValue(Columns.AddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressId));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private QL_Address _Address;
		//Relationship: FK_QL_LeadAddress_QL_Address
		public QL_Address Address
		{
			get
			{
				if(_Address == null) {
					_Address = QL_Address.FetchByID(this.AddressId);
				}
				return _Address;
			}
			set
			{
				SetColumnValue("AddressId", value.AddressID);
				_Address = value;
			}
		}

		private QL_Lead _Lead;
		//Relationship: FK_QL_LeadAddress_QL_Leads
		public QL_Lead Lead
		{
			get
			{
				if(_Lead == null) {
					_Lead = QL_Lead.FetchByID(this.LeadId);
				}
				return _Lead;
			}
			set
			{
				SetColumnValue("LeadId", value.LeadID);
				_Lead = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return LeadAddressID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LeadAddressIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LeadAddressID = @"LeadAddressID";
			public static readonly string LeadId = @"LeadId";
			public static readonly string AddressId = @"AddressId";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LeadAddressID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the QL_LeadDisposition class.
	/// </summary>
	[DataContract]
	public partial class QL_LeadDispositionCollection : ActiveList<QL_LeadDisposition, QL_LeadDispositionCollection>
	{
		public static QL_LeadDispositionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_LeadDispositionCollection result = new QL_LeadDispositionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_LeadDisposition item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_LeadDispositions table.
	/// </summary>
	[DataContract]
	public partial class QL_LeadDisposition : ActiveRecord<QL_LeadDisposition>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_LeadDisposition()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_LeadDispositions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLeadDispositionID = new TableSchema.TableColumn(schema);
				colvarLeadDispositionID.ColumnName = "LeadDispositionID";
				colvarLeadDispositionID.DataType = DbType.Int32;
				colvarLeadDispositionID.MaxLength = 0;
				colvarLeadDispositionID.AutoIncrement = true;
				colvarLeadDispositionID.IsNullable = false;
				colvarLeadDispositionID.IsPrimaryKey = true;
				colvarLeadDispositionID.IsForeignKey = false;
				colvarLeadDispositionID.IsReadOnly = false;
				colvarLeadDispositionID.DefaultSetting = @"";
				colvarLeadDispositionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadDispositionID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = true;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarLeadDisposition = new TableSchema.TableColumn(schema);
				colvarLeadDisposition.ColumnName = "LeadDisposition";
				colvarLeadDisposition.DataType = DbType.String;
				colvarLeadDisposition.MaxLength = 50;
				colvarLeadDisposition.AutoIncrement = false;
				colvarLeadDisposition.IsNullable = false;
				colvarLeadDisposition.IsPrimaryKey = false;
				colvarLeadDisposition.IsForeignKey = false;
				colvarLeadDisposition.IsReadOnly = false;
				colvarLeadDisposition.DefaultSetting = @"";
				colvarLeadDisposition.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadDisposition);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_LeadDispositions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_LeadDisposition LoadFrom(QL_LeadDisposition item)
		{
			QL_LeadDisposition result = new QL_LeadDisposition();
			if (item.LeadDispositionID != default(int)) {
				result.LoadByKey(item.LeadDispositionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int LeadDispositionID {
			get { return GetColumnValue<int>(Columns.LeadDispositionID); }
			set {
				SetColumnValue(Columns.LeadDispositionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadDispositionID));
			}
		}
		[DataMember]
		public int? DealerId {
			get { return GetColumnValue<int?>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string LeadDisposition {
			get { return GetColumnValue<string>(Columns.LeadDisposition); }
			set {
				SetColumnValue(Columns.LeadDisposition, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadDisposition));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Dealer _Dealer;
		//Relationship: FK_QL_LeadDispositions_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return LeadDispositionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LeadDispositionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LeadDispositionColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LeadDispositionID = @"LeadDispositionID";
			public static readonly string DealerId = @"DealerId";
			public static readonly string LeadDisposition = @"LeadDisposition";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LeadDispositionID; }
		}
		*/

		#region Foreign Collections

		private QL_LeadCollection _QL_LeadsCol;
		//Relationship: FK_QL_Leads_QL_LeadDispositions
		public QL_LeadCollection QL_LeadsCol
		{
			get
			{
				if(_QL_LeadsCol == null) {
					_QL_LeadsCol = new QL_LeadCollection();
					_QL_LeadsCol.LoadAndCloseReader(QL_Lead.Query()
						.WHERE(QL_Lead.Columns.LeadDispositionId, LeadDispositionID).ExecuteReader());
				}
				return _QL_LeadsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QL_LeadProductOffer class.
	/// </summary>
	[DataContract]
	public partial class QL_LeadProductOfferCollection : ActiveList<QL_LeadProductOffer, QL_LeadProductOfferCollection>
	{
		public static QL_LeadProductOfferCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_LeadProductOfferCollection result = new QL_LeadProductOfferCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_LeadProductOffer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_LeadProductOffers table.
	/// </summary>
	[DataContract]
	public partial class QL_LeadProductOffer : ActiveRecord<QL_LeadProductOffer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_LeadProductOffer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_LeadProductOffers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLeadProductOfferedId = new TableSchema.TableColumn(schema);
				colvarLeadProductOfferedId.ColumnName = "LeadProductOfferedId";
				colvarLeadProductOfferedId.DataType = DbType.Int64;
				colvarLeadProductOfferedId.MaxLength = 0;
				colvarLeadProductOfferedId.AutoIncrement = true;
				colvarLeadProductOfferedId.IsNullable = false;
				colvarLeadProductOfferedId.IsPrimaryKey = true;
				colvarLeadProductOfferedId.IsForeignKey = false;
				colvarLeadProductOfferedId.IsReadOnly = false;
				colvarLeadProductOfferedId.DefaultSetting = @"";
				colvarLeadProductOfferedId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadProductOfferedId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int64;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = true;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "QL_Leads";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarProductSkwId = new TableSchema.TableColumn(schema);
				colvarProductSkwId.ColumnName = "ProductSkwId";
				colvarProductSkwId.DataType = DbType.AnsiString;
				colvarProductSkwId.MaxLength = 50;
				colvarProductSkwId.AutoIncrement = false;
				colvarProductSkwId.IsNullable = false;
				colvarProductSkwId.IsPrimaryKey = false;
				colvarProductSkwId.IsForeignKey = true;
				colvarProductSkwId.IsReadOnly = false;
				colvarProductSkwId.DefaultSetting = @"";
				colvarProductSkwId.ForeignKeyTableName = "AE_Products";
				schema.Columns.Add(colvarProductSkwId);

				TableSchema.TableColumn colvarSalesRepId = new TableSchema.TableColumn(schema);
				colvarSalesRepId.ColumnName = "SalesRepId";
				colvarSalesRepId.DataType = DbType.AnsiString;
				colvarSalesRepId.MaxLength = 10;
				colvarSalesRepId.AutoIncrement = false;
				colvarSalesRepId.IsNullable = false;
				colvarSalesRepId.IsPrimaryKey = false;
				colvarSalesRepId.IsForeignKey = false;
				colvarSalesRepId.IsReadOnly = false;
				colvarSalesRepId.DefaultSetting = @"";
				colvarSalesRepId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepId);

				TableSchema.TableColumn colvarOfferDate = new TableSchema.TableColumn(schema);
				colvarOfferDate.ColumnName = "OfferDate";
				colvarOfferDate.DataType = DbType.DateTime;
				colvarOfferDate.MaxLength = 0;
				colvarOfferDate.AutoIncrement = false;
				colvarOfferDate.IsNullable = false;
				colvarOfferDate.IsPrimaryKey = false;
				colvarOfferDate.IsForeignKey = false;
				colvarOfferDate.IsReadOnly = false;
				colvarOfferDate.DefaultSetting = @"";
				colvarOfferDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfferDate);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_LeadProductOffers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_LeadProductOffer LoadFrom(QL_LeadProductOffer item)
		{
			QL_LeadProductOffer result = new QL_LeadProductOffer();
			if (item.LeadProductOfferedId != default(long)) {
				result.LoadByKey(item.LeadProductOfferedId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long LeadProductOfferedId {
			get { return GetColumnValue<long>(Columns.LeadProductOfferedId); }
			set {
				SetColumnValue(Columns.LeadProductOfferedId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadProductOfferedId));
			}
		}
		[DataMember]
		public long LeadId {
			get { return GetColumnValue<long>(Columns.LeadId); }
			set {
				SetColumnValue(Columns.LeadId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadId));
			}
		}
		[DataMember]
		public string ProductSkwId {
			get { return GetColumnValue<string>(Columns.ProductSkwId); }
			set {
				SetColumnValue(Columns.ProductSkwId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProductSkwId));
			}
		}
		[DataMember]
		public string SalesRepId {
			get { return GetColumnValue<string>(Columns.SalesRepId); }
			set {
				SetColumnValue(Columns.SalesRepId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesRepId));
			}
		}
		[DataMember]
		public DateTime OfferDate {
			get { return GetColumnValue<DateTime>(Columns.OfferDate); }
			set {
				SetColumnValue(Columns.OfferDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfferDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Product _ProductSkw;
		//Relationship: FK_QL_LeadProductOffers_AE_Products
		public AE_Product ProductSkw
		{
			get
			{
				if(_ProductSkw == null) {
					_ProductSkw = AE_Product.FetchByID(this.ProductSkwId);
				}
				return _ProductSkw;
			}
			set
			{
				SetColumnValue("ProductSkwId", value.ProductSkwID);
				_ProductSkw = value;
			}
		}

		private QL_Lead _Lead;
		//Relationship: FK_QL_LeadProductOffers_QL_Leads
		public QL_Lead Lead
		{
			get
			{
				if(_Lead == null) {
					_Lead = QL_Lead.FetchByID(this.LeadId);
				}
				return _Lead;
			}
			set
			{
				SetColumnValue("LeadId", value.LeadID);
				_Lead = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return LeadProductOfferedId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LeadProductOfferedIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ProductSkwIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SalesRepIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn OfferDateColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LeadProductOfferedId = @"LeadProductOfferedId";
			public static readonly string LeadId = @"LeadId";
			public static readonly string ProductSkwId = @"ProductSkwId";
			public static readonly string SalesRepId = @"SalesRepId";
			public static readonly string OfferDate = @"OfferDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LeadProductOfferedId; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the QL_Lead class.
	/// </summary>
	[DataContract]
	public partial class QL_LeadCollection : ActiveList<QL_Lead, QL_LeadCollection>
	{
		public static QL_LeadCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_LeadCollection result = new QL_LeadCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_Lead item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_Leads table.
	/// </summary>
	[DataContract]
	public partial class QL_Lead : ActiveRecord<QL_Lead>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_Lead()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_Leads", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLeadID = new TableSchema.TableColumn(schema);
				colvarLeadID.ColumnName = "LeadID";
				colvarLeadID.DataType = DbType.Int64;
				colvarLeadID.MaxLength = 0;
				colvarLeadID.AutoIncrement = true;
				colvarLeadID.IsNullable = false;
				colvarLeadID.IsPrimaryKey = true;
				colvarLeadID.IsForeignKey = false;
				colvarLeadID.IsReadOnly = false;
				colvarLeadID.DefaultSetting = @"";
				colvarLeadID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadID);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int64;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = true;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "QL_Address";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarCustomerTypeId = new TableSchema.TableColumn(schema);
				colvarCustomerTypeId.ColumnName = "CustomerTypeId";
				colvarCustomerTypeId.DataType = DbType.AnsiString;
				colvarCustomerTypeId.MaxLength = 20;
				colvarCustomerTypeId.AutoIncrement = false;
				colvarCustomerTypeId.IsNullable = false;
				colvarCustomerTypeId.IsPrimaryKey = false;
				colvarCustomerTypeId.IsForeignKey = true;
				colvarCustomerTypeId.IsReadOnly = false;
				colvarCustomerTypeId.DefaultSetting = @"('LEAD')";
				colvarCustomerTypeId.ForeignKeyTableName = "AE_CustomerTypes";
				schema.Columns.Add(colvarCustomerTypeId);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = true;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "AE_CustomerMasterFiles";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"((5000))";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarLocalizationId = new TableSchema.TableColumn(schema);
				colvarLocalizationId.ColumnName = "LocalizationId";
				colvarLocalizationId.DataType = DbType.AnsiString;
				colvarLocalizationId.MaxLength = 20;
				colvarLocalizationId.AutoIncrement = false;
				colvarLocalizationId.IsNullable = false;
				colvarLocalizationId.IsPrimaryKey = false;
				colvarLocalizationId.IsForeignKey = true;
				colvarLocalizationId.IsReadOnly = false;
				colvarLocalizationId.DefaultSetting = @"((1033))";
				colvarLocalizationId.ForeignKeyTableName = "MC_Localization";
				schema.Columns.Add(colvarLocalizationId);

				TableSchema.TableColumn colvarTeamLocationId = new TableSchema.TableColumn(schema);
				colvarTeamLocationId.ColumnName = "TeamLocationId";
				colvarTeamLocationId.DataType = DbType.Int32;
				colvarTeamLocationId.MaxLength = 0;
				colvarTeamLocationId.AutoIncrement = false;
				colvarTeamLocationId.IsNullable = false;
				colvarTeamLocationId.IsPrimaryKey = false;
				colvarTeamLocationId.IsForeignKey = false;
				colvarTeamLocationId.IsReadOnly = false;
				colvarTeamLocationId.DefaultSetting = @"((0))";
				colvarTeamLocationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationId);

				TableSchema.TableColumn colvarSeasonId = new TableSchema.TableColumn(schema);
				colvarSeasonId.ColumnName = "SeasonId";
				colvarSeasonId.DataType = DbType.Int32;
				colvarSeasonId.MaxLength = 0;
				colvarSeasonId.AutoIncrement = false;
				colvarSeasonId.IsNullable = false;
				colvarSeasonId.IsPrimaryKey = false;
				colvarSeasonId.IsForeignKey = false;
				colvarSeasonId.IsReadOnly = false;
				colvarSeasonId.DefaultSetting = @"((0))";
				colvarSeasonId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonId);

				TableSchema.TableColumn colvarSalesRepId = new TableSchema.TableColumn(schema);
				colvarSalesRepId.ColumnName = "SalesRepId";
				colvarSalesRepId.DataType = DbType.AnsiString;
				colvarSalesRepId.MaxLength = 10;
				colvarSalesRepId.AutoIncrement = false;
				colvarSalesRepId.IsNullable = false;
				colvarSalesRepId.IsPrimaryKey = false;
				colvarSalesRepId.IsForeignKey = false;
				colvarSalesRepId.IsReadOnly = false;
				colvarSalesRepId.DefaultSetting = @"('WEBS001')";
				colvarSalesRepId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepId);

				TableSchema.TableColumn colvarLeadSourceId = new TableSchema.TableColumn(schema);
				colvarLeadSourceId.ColumnName = "LeadSourceId";
				colvarLeadSourceId.DataType = DbType.Int32;
				colvarLeadSourceId.MaxLength = 0;
				colvarLeadSourceId.AutoIncrement = false;
				colvarLeadSourceId.IsNullable = false;
				colvarLeadSourceId.IsPrimaryKey = false;
				colvarLeadSourceId.IsForeignKey = true;
				colvarLeadSourceId.IsReadOnly = false;
				colvarLeadSourceId.DefaultSetting = @"((1))";
				colvarLeadSourceId.ForeignKeyTableName = "QL_LeadSources";
				schema.Columns.Add(colvarLeadSourceId);

				TableSchema.TableColumn colvarLeadDispositionId = new TableSchema.TableColumn(schema);
				colvarLeadDispositionId.ColumnName = "LeadDispositionId";
				colvarLeadDispositionId.DataType = DbType.Int32;
				colvarLeadDispositionId.MaxLength = 0;
				colvarLeadDispositionId.AutoIncrement = false;
				colvarLeadDispositionId.IsNullable = false;
				colvarLeadDispositionId.IsPrimaryKey = false;
				colvarLeadDispositionId.IsForeignKey = true;
				colvarLeadDispositionId.IsReadOnly = false;
				colvarLeadDispositionId.DefaultSetting = @"((1))";
				colvarLeadDispositionId.ForeignKeyTableName = "QL_LeadDispositions";
				schema.Columns.Add(colvarLeadDispositionId);

				TableSchema.TableColumn colvarLeadDispositionDateChange = new TableSchema.TableColumn(schema);
				colvarLeadDispositionDateChange.ColumnName = "LeadDispositionDateChange";
				colvarLeadDispositionDateChange.DataType = DbType.DateTime;
				colvarLeadDispositionDateChange.MaxLength = 0;
				colvarLeadDispositionDateChange.AutoIncrement = false;
				colvarLeadDispositionDateChange.IsNullable = true;
				colvarLeadDispositionDateChange.IsPrimaryKey = false;
				colvarLeadDispositionDateChange.IsForeignKey = false;
				colvarLeadDispositionDateChange.IsReadOnly = false;
				colvarLeadDispositionDateChange.DefaultSetting = @"";
				colvarLeadDispositionDateChange.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadDispositionDateChange);

				TableSchema.TableColumn colvarSalutation = new TableSchema.TableColumn(schema);
				colvarSalutation.ColumnName = "Salutation";
				colvarSalutation.DataType = DbType.String;
				colvarSalutation.MaxLength = 50;
				colvarSalutation.AutoIncrement = false;
				colvarSalutation.IsNullable = true;
				colvarSalutation.IsPrimaryKey = false;
				colvarSalutation.IsForeignKey = false;
				colvarSalutation.IsReadOnly = false;
				colvarSalutation.DefaultSetting = @"";
				colvarSalutation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalutation);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarSuffix = new TableSchema.TableColumn(schema);
				colvarSuffix.ColumnName = "Suffix";
				colvarSuffix.DataType = DbType.String;
				colvarSuffix.MaxLength = 50;
				colvarSuffix.AutoIncrement = false;
				colvarSuffix.IsNullable = true;
				colvarSuffix.IsPrimaryKey = false;
				colvarSuffix.IsForeignKey = false;
				colvarSuffix.IsReadOnly = false;
				colvarSuffix.DefaultSetting = @"";
				colvarSuffix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuffix);

				TableSchema.TableColumn colvarGender = new TableSchema.TableColumn(schema);
				colvarGender.ColumnName = "Gender";
				colvarGender.DataType = DbType.String;
				colvarGender.MaxLength = 10;
				colvarGender.AutoIncrement = false;
				colvarGender.IsNullable = false;
				colvarGender.IsPrimaryKey = false;
				colvarGender.IsForeignKey = false;
				colvarGender.IsReadOnly = false;
				colvarGender.DefaultSetting = @"(N'Male')";
				colvarGender.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGender);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.AnsiString;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarDL = new TableSchema.TableColumn(schema);
				colvarDL.ColumnName = "DL";
				colvarDL.DataType = DbType.String;
				colvarDL.MaxLength = 30;
				colvarDL.AutoIncrement = false;
				colvarDL.IsNullable = true;
				colvarDL.IsPrimaryKey = false;
				colvarDL.IsForeignKey = false;
				colvarDL.IsReadOnly = false;
				colvarDL.DefaultSetting = @"";
				colvarDL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDL);

				TableSchema.TableColumn colvarDLStateID = new TableSchema.TableColumn(schema);
				colvarDLStateID.ColumnName = "DLStateID";
				colvarDLStateID.DataType = DbType.AnsiString;
				colvarDLStateID.MaxLength = 4;
				colvarDLStateID.AutoIncrement = false;
				colvarDLStateID.IsNullable = true;
				colvarDLStateID.IsPrimaryKey = false;
				colvarDLStateID.IsForeignKey = false;
				colvarDLStateID.IsReadOnly = false;
				colvarDLStateID.DefaultSetting = @"";
				colvarDLStateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLStateID);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 256;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.String;
				colvarPhoneHome.MaxLength = 20;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneWork = new TableSchema.TableColumn(schema);
				colvarPhoneWork.ColumnName = "PhoneWork";
				colvarPhoneWork.DataType = DbType.String;
				colvarPhoneWork.MaxLength = 30;
				colvarPhoneWork.AutoIncrement = false;
				colvarPhoneWork.IsNullable = true;
				colvarPhoneWork.IsPrimaryKey = false;
				colvarPhoneWork.IsForeignKey = false;
				colvarPhoneWork.IsReadOnly = false;
				colvarPhoneWork.DefaultSetting = @"";
				colvarPhoneWork.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneWork);

				TableSchema.TableColumn colvarPhoneMobile = new TableSchema.TableColumn(schema);
				colvarPhoneMobile.ColumnName = "PhoneMobile";
				colvarPhoneMobile.DataType = DbType.String;
				colvarPhoneMobile.MaxLength = 20;
				colvarPhoneMobile.AutoIncrement = false;
				colvarPhoneMobile.IsNullable = true;
				colvarPhoneMobile.IsPrimaryKey = false;
				colvarPhoneMobile.IsForeignKey = false;
				colvarPhoneMobile.IsReadOnly = false;
				colvarPhoneMobile.DefaultSetting = @"";
				colvarPhoneMobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneMobile);

				TableSchema.TableColumn colvarInsideSalesId = new TableSchema.TableColumn(schema);
				colvarInsideSalesId.ColumnName = "InsideSalesId";
				colvarInsideSalesId.DataType = DbType.Int32;
				colvarInsideSalesId.MaxLength = 0;
				colvarInsideSalesId.AutoIncrement = false;
				colvarInsideSalesId.IsNullable = true;
				colvarInsideSalesId.IsPrimaryKey = false;
				colvarInsideSalesId.IsForeignKey = false;
				colvarInsideSalesId.IsReadOnly = false;
				colvarInsideSalesId.DefaultSetting = @"";
				colvarInsideSalesId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsideSalesId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_Leads",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_Lead LoadFrom(QL_Lead item)
		{
			QL_Lead result = new QL_Lead();
			if (item.LeadID != default(long)) {
				result.LoadByKey(item.LeadID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long LeadID {
			get { return GetColumnValue<long>(Columns.LeadID); }
			set {
				SetColumnValue(Columns.LeadID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadID));
			}
		}
		[DataMember]
		public long AddressId {
			get { return GetColumnValue<long>(Columns.AddressId); }
			set {
				SetColumnValue(Columns.AddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressId));
			}
		}
		[DataMember]
		public string CustomerTypeId {
			get { return GetColumnValue<string>(Columns.CustomerTypeId); }
			set {
				SetColumnValue(Columns.CustomerTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerTypeId));
			}
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set {
				SetColumnValue(Columns.CustomerMasterFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileId));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string LocalizationId {
			get { return GetColumnValue<string>(Columns.LocalizationId); }
			set {
				SetColumnValue(Columns.LocalizationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LocalizationId));
			}
		}
		[DataMember]
		public int TeamLocationId {
			get { return GetColumnValue<int>(Columns.TeamLocationId); }
			set {
				SetColumnValue(Columns.TeamLocationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationId));
			}
		}
		[DataMember]
		public int SeasonId {
			get { return GetColumnValue<int>(Columns.SeasonId); }
			set {
				SetColumnValue(Columns.SeasonId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonId));
			}
		}
		[DataMember]
		public string SalesRepId {
			get { return GetColumnValue<string>(Columns.SalesRepId); }
			set {
				SetColumnValue(Columns.SalesRepId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesRepId));
			}
		}
		[DataMember]
		public int LeadSourceId {
			get { return GetColumnValue<int>(Columns.LeadSourceId); }
			set {
				SetColumnValue(Columns.LeadSourceId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadSourceId));
			}
		}
		[DataMember]
		public int LeadDispositionId {
			get { return GetColumnValue<int>(Columns.LeadDispositionId); }
			set {
				SetColumnValue(Columns.LeadDispositionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadDispositionId));
			}
		}
		[DataMember]
		public DateTime? LeadDispositionDateChange {
			get { return GetColumnValue<DateTime?>(Columns.LeadDispositionDateChange); }
			set {
				SetColumnValue(Columns.LeadDispositionDateChange, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadDispositionDateChange));
			}
		}
		[DataMember]
		public string Salutation {
			get { return GetColumnValue<string>(Columns.Salutation); }
			set {
				SetColumnValue(Columns.Salutation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Salutation));
			}
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set {
				SetColumnValue(Columns.FirstName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FirstName));
			}
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set {
				SetColumnValue(Columns.MiddleName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiddleName));
			}
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set {
				SetColumnValue(Columns.LastName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastName));
			}
		}
		[DataMember]
		public string Suffix {
			get { return GetColumnValue<string>(Columns.Suffix); }
			set {
				SetColumnValue(Columns.Suffix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Suffix));
			}
		}
		[DataMember]
		public string Gender {
			get { return GetColumnValue<string>(Columns.Gender); }
			set {
				SetColumnValue(Columns.Gender, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Gender));
			}
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set {
				SetColumnValue(Columns.SSN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SSN));
			}
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set {
				SetColumnValue(Columns.DOB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DOB));
			}
		}
		[DataMember]
		public string DL {
			get { return GetColumnValue<string>(Columns.DL); }
			set {
				SetColumnValue(Columns.DL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DL));
			}
		}
		[DataMember]
		public string DLStateID {
			get { return GetColumnValue<string>(Columns.DLStateID); }
			set {
				SetColumnValue(Columns.DLStateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLStateID));
			}
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set {
				SetColumnValue(Columns.Email, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Email));
			}
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set {
				SetColumnValue(Columns.PhoneHome, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneHome));
			}
		}
		[DataMember]
		public string PhoneWork {
			get { return GetColumnValue<string>(Columns.PhoneWork); }
			set {
				SetColumnValue(Columns.PhoneWork, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneWork));
			}
		}
		[DataMember]
		public string PhoneMobile {
			get { return GetColumnValue<string>(Columns.PhoneMobile); }
			set {
				SetColumnValue(Columns.PhoneMobile, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneMobile));
			}
		}
		[DataMember]
		public int? InsideSalesId {
			get { return GetColumnValue<int?>(Columns.InsideSalesId); }
			set {
				SetColumnValue(Columns.InsideSalesId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InsideSalesId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_CustomerMasterFile _CustomerMasterFile;
		//Relationship: FK_QL_Leads_AE_CustomerMasterFiles
		public AE_CustomerMasterFile CustomerMasterFile
		{
			get
			{
				if(_CustomerMasterFile == null) {
					_CustomerMasterFile = AE_CustomerMasterFile.FetchByID(this.CustomerMasterFileId);
				}
				return _CustomerMasterFile;
			}
			set
			{
				SetColumnValue("CustomerMasterFileId", value.CustomerMasterFileID);
				_CustomerMasterFile = value;
			}
		}

		private AE_CustomerType _CustomerType;
		//Relationship: FK_QL_Leads_AE_CustomerTypes
		public AE_CustomerType CustomerType
		{
			get
			{
				if(_CustomerType == null) {
					_CustomerType = AE_CustomerType.FetchByID(this.CustomerTypeId);
				}
				return _CustomerType;
			}
			set
			{
				SetColumnValue("CustomerTypeId", value.CustomerTypeID);
				_CustomerType = value;
			}
		}

		private AE_Dealer _Dealer;
		//Relationship: FK_QL_Leads_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		private MC_Localization _Localization;
		//Relationship: FK_QL_Leads_MC_Localization
		public MC_Localization Localization
		{
			get
			{
				if(_Localization == null) {
					_Localization = MC_Localization.FetchByID(this.LocalizationId);
				}
				return _Localization;
			}
			set
			{
				SetColumnValue("LocalizationId", value.LocalizationID);
				_Localization = value;
			}
		}

		private QL_Address _Address;
		//Relationship: FK_QL_Leads_QL_Address
		public QL_Address Address
		{
			get
			{
				if(_Address == null) {
					_Address = QL_Address.FetchByID(this.AddressId);
				}
				return _Address;
			}
			set
			{
				SetColumnValue("AddressId", value.AddressID);
				_Address = value;
			}
		}

		private QL_LeadDisposition _LeadDisposition;
		//Relationship: FK_QL_Leads_QL_LeadDispositions
		public QL_LeadDisposition LeadDisposition
		{
			get
			{
				if(_LeadDisposition == null) {
					_LeadDisposition = QL_LeadDisposition.FetchByID(this.LeadDispositionId);
				}
				return _LeadDisposition;
			}
			set
			{
				SetColumnValue("LeadDispositionId", value.LeadDispositionID);
				_LeadDisposition = value;
			}
		}

		private QL_LeadSource _LeadSource;
		//Relationship: FK_QL_Leads_QL_LeadSources
		public QL_LeadSource LeadSource
		{
			get
			{
				if(_LeadSource == null) {
					_LeadSource = QL_LeadSource.FetchByID(this.LeadSourceId);
				}
				return _LeadSource;
			}
			set
			{
				SetColumnValue("LeadSourceId", value.LeadSourceID);
				_LeadSource = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return LeadID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LeadIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn LocalizationIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TeamLocationIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn SeasonIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn SalesRepIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn LeadSourceIdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn LeadDispositionIdColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn LeadDispositionDateChangeColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn SalutationColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn SuffixColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn GenderColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn DLColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn DLStateIDColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn PhoneWorkColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn PhoneMobileColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn InsideSalesIdColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[31]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LeadID = @"LeadID";
			public static readonly string AddressId = @"AddressId";
			public static readonly string CustomerTypeId = @"CustomerTypeId";
			public static readonly string CustomerMasterFileId = @"CustomerMasterFileId";
			public static readonly string DealerId = @"DealerId";
			public static readonly string LocalizationId = @"LocalizationId";
			public static readonly string TeamLocationId = @"TeamLocationId";
			public static readonly string SeasonId = @"SeasonId";
			public static readonly string SalesRepId = @"SalesRepId";
			public static readonly string LeadSourceId = @"LeadSourceId";
			public static readonly string LeadDispositionId = @"LeadDispositionId";
			public static readonly string LeadDispositionDateChange = @"LeadDispositionDateChange";
			public static readonly string Salutation = @"Salutation";
			public static readonly string FirstName = @"FirstName";
			public static readonly string MiddleName = @"MiddleName";
			public static readonly string LastName = @"LastName";
			public static readonly string Suffix = @"Suffix";
			public static readonly string Gender = @"Gender";
			public static readonly string SSN = @"SSN";
			public static readonly string DOB = @"DOB";
			public static readonly string DL = @"DL";
			public static readonly string DLStateID = @"DLStateID";
			public static readonly string Email = @"Email";
			public static readonly string PhoneHome = @"PhoneHome";
			public static readonly string PhoneWork = @"PhoneWork";
			public static readonly string PhoneMobile = @"PhoneMobile";
			public static readonly string InsideSalesId = @"InsideSalesId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LeadID; }
		}
		*/

		#region Foreign Collections

		private AE_CustomerAccountCollection _AE_CustomerAccountsCol;
		//Relationship: FK_AE_CustomerAccounts_QL_Leads
		public AE_CustomerAccountCollection AE_CustomerAccountsCol
		{
			get
			{
				if(_AE_CustomerAccountsCol == null) {
					_AE_CustomerAccountsCol = new AE_CustomerAccountCollection();
					_AE_CustomerAccountsCol.LoadAndCloseReader(AE_CustomerAccount.Query()
						.WHERE(AE_CustomerAccount.Columns.LeadId, LeadID).ExecuteReader());
				}
				return _AE_CustomerAccountsCol;
			}
		}

		private AE_CustomerCollection _AE_CustomersCol;
		//Relationship: FK_AE_Customers_QL_Leads
		public AE_CustomerCollection AE_CustomersCol
		{
			get
			{
				if(_AE_CustomersCol == null) {
					_AE_CustomersCol = new AE_CustomerCollection();
					_AE_CustomersCol.LoadAndCloseReader(AE_Customer.Query()
						.WHERE(AE_Customer.Columns.LeadId, LeadID).ExecuteReader());
				}
				return _AE_CustomersCol;
			}
		}

		private CA_AppointmentCollection _CA_AppointmentsCol;
		//Relationship: FK_CA_Appointments_QL_Leads
		public CA_AppointmentCollection CA_AppointmentsCol
		{
			get
			{
				if(_CA_AppointmentsCol == null) {
					_CA_AppointmentsCol = new CA_AppointmentCollection();
					_CA_AppointmentsCol.LoadAndCloseReader(CA_Appointment.Query()
						.WHERE(CA_Appointment.Columns.LeadId, LeadID).ExecuteReader());
				}
				return _CA_AppointmentsCol;
			}
		}

		private MC_AccountNoteCollection _MC_AccountNotesCol;
		//Relationship: FK_MC_AccountNotes_QL_Leads
		public MC_AccountNoteCollection MC_AccountNotesCol
		{
			get
			{
				if(_MC_AccountNotesCol == null) {
					_MC_AccountNotesCol = new MC_AccountNoteCollection();
					_MC_AccountNotesCol.LoadAndCloseReader(MC_AccountNote.Query()
						.WHERE(MC_AccountNote.Columns.LeadId, LeadID).ExecuteReader());
				}
				return _MC_AccountNotesCol;
			}
		}

		private MS_AccountCustomerCollection _MS_AccountCustomersCol;
		//Relationship: FK_MS_AccountCustomers_QL_Leads
		public MS_AccountCustomerCollection MS_AccountCustomersCol
		{
			get
			{
				if(_MS_AccountCustomersCol == null) {
					_MS_AccountCustomersCol = new MS_AccountCustomerCollection();
					_MS_AccountCustomersCol.LoadAndCloseReader(MS_AccountCustomer.Query()
						.WHERE(MS_AccountCustomer.Columns.LeadId, LeadID).ExecuteReader());
				}
				return _MS_AccountCustomersCol;
			}
		}

		private QL_CreditReportCollection _QL_CreditReportsCol;
		//Relationship: FK_QL_CreditReports_QL_Leads
		public QL_CreditReportCollection QL_CreditReportsCol
		{
			get
			{
				if(_QL_CreditReportsCol == null) {
					_QL_CreditReportsCol = new QL_CreditReportCollection();
					_QL_CreditReportsCol.LoadAndCloseReader(QL_CreditReport.Query()
						.WHERE(QL_CreditReport.Columns.LeadId, LeadID).ExecuteReader());
				}
				return _QL_CreditReportsCol;
			}
		}

		private QL_CustomerMasterLeadCollection _QL_CustomerMasterLeadsCol;
		//Relationship: FK_QL_CustomerMasterLeads_QL_Leads
		public QL_CustomerMasterLeadCollection QL_CustomerMasterLeadsCol
		{
			get
			{
				if(_QL_CustomerMasterLeadsCol == null) {
					_QL_CustomerMasterLeadsCol = new QL_CustomerMasterLeadCollection();
					_QL_CustomerMasterLeadsCol.LoadAndCloseReader(QL_CustomerMasterLead.Query()
						.WHERE(QL_CustomerMasterLead.Columns.LeadId, LeadID).ExecuteReader());
				}
				return _QL_CustomerMasterLeadsCol;
			}
		}

		private QL_LeadAddressCollection _QL_LeadAddressesCol;
		//Relationship: FK_QL_LeadAddress_QL_Leads
		public QL_LeadAddressCollection QL_LeadAddressesCol
		{
			get
			{
				if(_QL_LeadAddressesCol == null) {
					_QL_LeadAddressesCol = new QL_LeadAddressCollection();
					_QL_LeadAddressesCol.LoadAndCloseReader(QL_LeadAddress.Query()
						.WHERE(QL_LeadAddress.Columns.LeadId, LeadID).ExecuteReader());
				}
				return _QL_LeadAddressesCol;
			}
		}

		private QL_LeadProductOfferCollection _QL_LeadProductOffersCol;
		//Relationship: FK_QL_LeadProductOffers_QL_Leads
		public QL_LeadProductOfferCollection QL_LeadProductOffersCol
		{
			get
			{
				if(_QL_LeadProductOffersCol == null) {
					_QL_LeadProductOffersCol = new QL_LeadProductOfferCollection();
					_QL_LeadProductOffersCol.LoadAndCloseReader(QL_LeadProductOffer.Query()
						.WHERE(QL_LeadProductOffer.Columns.LeadId, LeadID).ExecuteReader());
				}
				return _QL_LeadProductOffersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QL_LeadSource class.
	/// </summary>
	[DataContract]
	public partial class QL_LeadSourceCollection : ActiveList<QL_LeadSource, QL_LeadSourceCollection>
	{
		public static QL_LeadSourceCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QL_LeadSourceCollection result = new QL_LeadSourceCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QL_LeadSource item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QL_LeadSources table.
	/// </summary>
	[DataContract]
	public partial class QL_LeadSource : ActiveRecord<QL_LeadSource>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QL_LeadSource()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QL_LeadSources", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLeadSourceID = new TableSchema.TableColumn(schema);
				colvarLeadSourceID.ColumnName = "LeadSourceID";
				colvarLeadSourceID.DataType = DbType.Int32;
				colvarLeadSourceID.MaxLength = 0;
				colvarLeadSourceID.AutoIncrement = true;
				colvarLeadSourceID.IsNullable = false;
				colvarLeadSourceID.IsPrimaryKey = true;
				colvarLeadSourceID.IsForeignKey = false;
				colvarLeadSourceID.IsReadOnly = false;
				colvarLeadSourceID.DefaultSetting = @"";
				colvarLeadSourceID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadSourceID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = true;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = true;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"";
				colvarDealerId.ForeignKeyTableName = "AE_Dealers";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarLeadSource = new TableSchema.TableColumn(schema);
				colvarLeadSource.ColumnName = "LeadSource";
				colvarLeadSource.DataType = DbType.String;
				colvarLeadSource.MaxLength = 50;
				colvarLeadSource.AutoIncrement = false;
				colvarLeadSource.IsNullable = false;
				colvarLeadSource.IsPrimaryKey = false;
				colvarLeadSource.IsForeignKey = false;
				colvarLeadSource.IsReadOnly = false;
				colvarLeadSource.DefaultSetting = @"";
				colvarLeadSource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadSource);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"('SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("QL_LeadSources",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QL_LeadSource LoadFrom(QL_LeadSource item)
		{
			QL_LeadSource result = new QL_LeadSource();
			if (item.LeadSourceID != default(int)) {
				result.LoadByKey(item.LeadSourceID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int LeadSourceID {
			get { return GetColumnValue<int>(Columns.LeadSourceID); }
			set {
				SetColumnValue(Columns.LeadSourceID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadSourceID));
			}
		}
		[DataMember]
		public int? DealerId {
			get { return GetColumnValue<int?>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string LeadSource {
			get { return GetColumnValue<string>(Columns.LeadSource); }
			set {
				SetColumnValue(Columns.LeadSource, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadSource));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_Dealer _Dealer;
		//Relationship: FK_QL_LeadSources_AE_Dealers
		public AE_Dealer Dealer
		{
			get
			{
				if(_Dealer == null) {
					_Dealer = AE_Dealer.FetchByID(this.DealerId);
				}
				return _Dealer;
			}
			set
			{
				SetColumnValue("DealerId", value.DealerID);
				_Dealer = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return LeadSourceID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LeadSourceIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LeadSourceColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LeadSourceID = @"LeadSourceID";
			public static readonly string DealerId = @"DealerId";
			public static readonly string LeadSource = @"LeadSource";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LeadSourceID; }
		}
		*/

		#region Foreign Collections

		private QL_LeadCollection _QL_LeadsCol;
		//Relationship: FK_QL_Leads_QL_LeadSources
		public QL_LeadCollection QL_LeadsCol
		{
			get
			{
				if(_QL_LeadsCol == null) {
					_QL_LeadsCol = new QL_LeadCollection();
					_QL_LeadsCol.LoadAndCloseReader(QL_Lead.Query()
						.WHERE(QL_Lead.Columns.LeadSourceId, LeadSourceID).ExecuteReader());
				}
				return _QL_LeadsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the SAE_Aging class.
	/// </summary>
	[DataContract]
	public partial class SAE_AgingCollection : ActiveList<SAE_Aging, SAE_AgingCollection>
	{
		public static SAE_AgingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_AgingCollection result = new SAE_AgingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_Aging item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_Aging table.
	/// </summary>
	[DataContract]
	public partial class SAE_Aging : ActiveRecord<SAE_Aging>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_Aging()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_Aging", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustomerMasterFileID = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileID.ColumnName = "CustomerMasterFileID";
				colvarCustomerMasterFileID.DataType = DbType.Int64;
				colvarCustomerMasterFileID.MaxLength = 0;
				colvarCustomerMasterFileID.AutoIncrement = false;
				colvarCustomerMasterFileID.IsNullable = false;
				colvarCustomerMasterFileID.IsPrimaryKey = true;
				colvarCustomerMasterFileID.IsForeignKey = false;
				colvarCustomerMasterFileID.IsReadOnly = false;
				colvarCustomerMasterFileID.DefaultSetting = @"";
				colvarCustomerMasterFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerMasterFileID);

				TableSchema.TableColumn colvarAgingStepId = new TableSchema.TableColumn(schema);
				colvarAgingStepId.ColumnName = "AgingStepId";
				colvarAgingStepId.DataType = DbType.AnsiString;
				colvarAgingStepId.MaxLength = 10;
				colvarAgingStepId.AutoIncrement = false;
				colvarAgingStepId.IsNullable = false;
				colvarAgingStepId.IsPrimaryKey = false;
				colvarAgingStepId.IsForeignKey = true;
				colvarAgingStepId.IsReadOnly = false;
				colvarAgingStepId.DefaultSetting = @"";
				colvarAgingStepId.ForeignKeyTableName = "AE_AgingSteps";
				schema.Columns.Add(colvarAgingStepId);

				TableSchema.TableColumn colvarValueDue = new TableSchema.TableColumn(schema);
				colvarValueDue.ColumnName = "ValueDue";
				colvarValueDue.DataType = DbType.Currency;
				colvarValueDue.MaxLength = 0;
				colvarValueDue.AutoIncrement = false;
				colvarValueDue.IsNullable = false;
				colvarValueDue.IsPrimaryKey = false;
				colvarValueDue.IsForeignKey = false;
				colvarValueDue.IsReadOnly = false;
				colvarValueDue.DefaultSetting = @"((0))";
				colvarValueDue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueDue);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SAE_Aging",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_Aging LoadFrom(SAE_Aging item)
		{
			SAE_Aging result = new SAE_Aging();
			if (item.CustomerMasterFileID != default(long)) {
				result.LoadByKey(item.CustomerMasterFileID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CustomerMasterFileID {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileID); }
			set {
				SetColumnValue(Columns.CustomerMasterFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileID));
			}
		}
		[DataMember]
		public string AgingStepId {
			get { return GetColumnValue<string>(Columns.AgingStepId); }
			set {
				SetColumnValue(Columns.AgingStepId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgingStepId));
			}
		}
		[DataMember]
		public decimal ValueDue {
			get { return GetColumnValue<decimal>(Columns.ValueDue); }
			set {
				SetColumnValue(Columns.ValueDue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ValueDue));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_AgingStep _AgingStep;
		//Relationship: FK_SAE_Aging_AE_AgingSteps
		public AE_AgingStep AgingStep
		{
			get
			{
				if(_AgingStep == null) {
					_AgingStep = AE_AgingStep.FetchByID(this.AgingStepId);
				}
				return _AgingStep;
			}
			set
			{
				SetColumnValue("AgingStepId", value.AgingStepID);
				_AgingStep = value;
			}
		}

		private AE_CustomerMasterFile _CustomerMasterFile;
		//Relationship: FK_SAE_Aging_AE_CustomerMasterFiles
		public AE_CustomerMasterFile CustomerMasterFile
		{
			get
			{
				if(_CustomerMasterFile == null) {
					_CustomerMasterFile = AE_CustomerMasterFile.FetchByID(this.CustomerMasterFileID);
				}
				return _CustomerMasterFile;
			}
			set
			{
				SetColumnValue("CustomerMasterFileID", value.CustomerMasterFileID);
				_CustomerMasterFile = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AgingStepId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustomerMasterFileIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AgingStepIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ValueDueColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustomerMasterFileID = @"CustomerMasterFileID";
			public static readonly string AgingStepId = @"AgingStepId";
			public static readonly string ValueDue = @"ValueDue";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustomerMasterFileID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_BillingHistory class.
	/// </summary>
	[DataContract]
	public partial class SAE_BillingHistoryCollection : ActiveList<SAE_BillingHistory, SAE_BillingHistoryCollection>
	{
		public static SAE_BillingHistoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_BillingHistoryCollection result = new SAE_BillingHistoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_BillingHistory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_BillingHistory table.
	/// </summary>
	[DataContract]
	public partial class SAE_BillingHistory : ActiveRecord<SAE_BillingHistory>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_BillingHistory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_BillingHistory", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBillingHistoryID = new TableSchema.TableColumn(schema);
				colvarBillingHistoryID.ColumnName = "BillingHistoryID";
				colvarBillingHistoryID.DataType = DbType.Int64;
				colvarBillingHistoryID.MaxLength = 0;
				colvarBillingHistoryID.AutoIncrement = true;
				colvarBillingHistoryID.IsNullable = false;
				colvarBillingHistoryID.IsPrimaryKey = true;
				colvarBillingHistoryID.IsForeignKey = false;
				colvarBillingHistoryID.IsReadOnly = false;
				colvarBillingHistoryID.DefaultSetting = @"";
				colvarBillingHistoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingHistoryID);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = true;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "AE_CustomerMasterFiles";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = true;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MC_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarBillingDate = new TableSchema.TableColumn(schema);
				colvarBillingDate.ColumnName = "BillingDate";
				colvarBillingDate.DataType = DbType.DateTime;
				colvarBillingDate.MaxLength = 0;
				colvarBillingDate.AutoIncrement = false;
				colvarBillingDate.IsNullable = false;
				colvarBillingDate.IsPrimaryKey = false;
				colvarBillingDate.IsForeignKey = false;
				colvarBillingDate.IsReadOnly = false;
				colvarBillingDate.DefaultSetting = @"";
				colvarBillingDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingDate);

				TableSchema.TableColumn colvarInvoiceNumber = new TableSchema.TableColumn(schema);
				colvarInvoiceNumber.ColumnName = "InvoiceNumber";
				colvarInvoiceNumber.DataType = DbType.AnsiString;
				colvarInvoiceNumber.MaxLength = 50;
				colvarInvoiceNumber.AutoIncrement = false;
				colvarInvoiceNumber.IsNullable = false;
				colvarInvoiceNumber.IsPrimaryKey = false;
				colvarInvoiceNumber.IsForeignKey = false;
				colvarInvoiceNumber.IsReadOnly = false;
				colvarInvoiceNumber.DefaultSetting = @"";
				colvarInvoiceNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceNumber);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarPaymentDate = new TableSchema.TableColumn(schema);
				colvarPaymentDate.ColumnName = "PaymentDate";
				colvarPaymentDate.DataType = DbType.DateTime;
				colvarPaymentDate.MaxLength = 0;
				colvarPaymentDate.AutoIncrement = false;
				colvarPaymentDate.IsNullable = true;
				colvarPaymentDate.IsPrimaryKey = false;
				colvarPaymentDate.IsForeignKey = false;
				colvarPaymentDate.IsReadOnly = false;
				colvarPaymentDate.DefaultSetting = @"";
				colvarPaymentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentDate);

				TableSchema.TableColumn colvarPaymentNumber = new TableSchema.TableColumn(schema);
				colvarPaymentNumber.ColumnName = "PaymentNumber";
				colvarPaymentNumber.DataType = DbType.AnsiString;
				colvarPaymentNumber.MaxLength = 50;
				colvarPaymentNumber.AutoIncrement = false;
				colvarPaymentNumber.IsNullable = true;
				colvarPaymentNumber.IsPrimaryKey = false;
				colvarPaymentNumber.IsForeignKey = false;
				colvarPaymentNumber.IsReadOnly = false;
				colvarPaymentNumber.DefaultSetting = @"";
				colvarPaymentNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentNumber);

				TableSchema.TableColumn colvarPaymentAmount = new TableSchema.TableColumn(schema);
				colvarPaymentAmount.ColumnName = "PaymentAmount";
				colvarPaymentAmount.DataType = DbType.Currency;
				colvarPaymentAmount.MaxLength = 0;
				colvarPaymentAmount.AutoIncrement = false;
				colvarPaymentAmount.IsNullable = true;
				colvarPaymentAmount.IsPrimaryKey = false;
				colvarPaymentAmount.IsForeignKey = false;
				colvarPaymentAmount.IsReadOnly = false;
				colvarPaymentAmount.DefaultSetting = @"";
				colvarPaymentAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentAmount);

				TableSchema.TableColumn colvarAmountRemain = new TableSchema.TableColumn(schema);
				colvarAmountRemain.ColumnName = "AmountRemain";
				colvarAmountRemain.DataType = DbType.Currency;
				colvarAmountRemain.MaxLength = 0;
				colvarAmountRemain.AutoIncrement = false;
				colvarAmountRemain.IsNullable = true;
				colvarAmountRemain.IsPrimaryKey = false;
				colvarAmountRemain.IsForeignKey = false;
				colvarAmountRemain.IsReadOnly = false;
				colvarAmountRemain.DefaultSetting = @"";
				colvarAmountRemain.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmountRemain);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SAE_BillingHistory",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_BillingHistory LoadFrom(SAE_BillingHistory item)
		{
			SAE_BillingHistory result = new SAE_BillingHistory();
			if (item.BillingHistoryID != default(long)) {
				result.LoadByKey(item.BillingHistoryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long BillingHistoryID {
			get { return GetColumnValue<long>(Columns.BillingHistoryID); }
			set {
				SetColumnValue(Columns.BillingHistoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BillingHistoryID));
			}
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set {
				SetColumnValue(Columns.CustomerMasterFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileId));
			}
		}
		[DataMember]
		public long? AccountId {
			get { return GetColumnValue<long?>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public DateTime BillingDate {
			get { return GetColumnValue<DateTime>(Columns.BillingDate); }
			set {
				SetColumnValue(Columns.BillingDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BillingDate));
			}
		}
		[DataMember]
		public string InvoiceNumber {
			get { return GetColumnValue<string>(Columns.InvoiceNumber); }
			set {
				SetColumnValue(Columns.InvoiceNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceNumber));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public DateTime? PaymentDate {
			get { return GetColumnValue<DateTime?>(Columns.PaymentDate); }
			set {
				SetColumnValue(Columns.PaymentDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaymentDate));
			}
		}
		[DataMember]
		public string PaymentNumber {
			get { return GetColumnValue<string>(Columns.PaymentNumber); }
			set {
				SetColumnValue(Columns.PaymentNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaymentNumber));
			}
		}
		[DataMember]
		public decimal? PaymentAmount {
			get { return GetColumnValue<decimal?>(Columns.PaymentAmount); }
			set {
				SetColumnValue(Columns.PaymentAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaymentAmount));
			}
		}
		[DataMember]
		public decimal? AmountRemain {
			get { return GetColumnValue<decimal?>(Columns.AmountRemain); }
			set {
				SetColumnValue(Columns.AmountRemain, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AmountRemain));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_CustomerMasterFile _CustomerMasterFile;
		//Relationship: FK_SAE_BillingHistory_AE_CustomerMasterFiles
		public AE_CustomerMasterFile CustomerMasterFile
		{
			get
			{
				if(_CustomerMasterFile == null) {
					_CustomerMasterFile = AE_CustomerMasterFile.FetchByID(this.CustomerMasterFileId);
				}
				return _CustomerMasterFile;
			}
			set
			{
				SetColumnValue("CustomerMasterFileId", value.CustomerMasterFileID);
				_CustomerMasterFile = value;
			}
		}

		private MC_Account _Account;
		//Relationship: FK_SAE_BillingHistory_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BillingHistoryID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BillingHistoryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BillingDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn InvoiceNumberColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn PaymentDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PaymentNumberColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PaymentAmountColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AmountRemainColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BillingHistoryID = @"BillingHistoryID";
			public static readonly string CustomerMasterFileId = @"CustomerMasterFileId";
			public static readonly string AccountId = @"AccountId";
			public static readonly string BillingDate = @"BillingDate";
			public static readonly string InvoiceNumber = @"InvoiceNumber";
			public static readonly string Amount = @"Amount";
			public static readonly string PaymentDate = @"PaymentDate";
			public static readonly string PaymentNumber = @"PaymentNumber";
			public static readonly string PaymentAmount = @"PaymentAmount";
			public static readonly string AmountRemain = @"AmountRemain";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BillingHistoryID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_BillingInfoSummary class.
	/// </summary>
	[DataContract]
	public partial class SAE_BillingInfoSummaryCollection : ActiveList<SAE_BillingInfoSummary, SAE_BillingInfoSummaryCollection>
	{
		public static SAE_BillingInfoSummaryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_BillingInfoSummaryCollection result = new SAE_BillingInfoSummaryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_BillingInfoSummary item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_BillingInfoSummary table.
	/// </summary>
	[DataContract]
	public partial class SAE_BillingInfoSummary : ActiveRecord<SAE_BillingInfoSummary>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_BillingInfoSummary()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_BillingInfoSummary", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSummaryID = new TableSchema.TableColumn(schema);
				colvarSummaryID.ColumnName = "SummaryID";
				colvarSummaryID.DataType = DbType.Int64;
				colvarSummaryID.MaxLength = 0;
				colvarSummaryID.AutoIncrement = true;
				colvarSummaryID.IsNullable = false;
				colvarSummaryID.IsPrimaryKey = true;
				colvarSummaryID.IsForeignKey = false;
				colvarSummaryID.IsReadOnly = false;
				colvarSummaryID.DefaultSetting = @"";
				colvarSummaryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSummaryID);

				TableSchema.TableColumn colvarCustomerMasterFileId = new TableSchema.TableColumn(schema);
				colvarCustomerMasterFileId.ColumnName = "CustomerMasterFileId";
				colvarCustomerMasterFileId.DataType = DbType.Int64;
				colvarCustomerMasterFileId.MaxLength = 0;
				colvarCustomerMasterFileId.AutoIncrement = false;
				colvarCustomerMasterFileId.IsNullable = false;
				colvarCustomerMasterFileId.IsPrimaryKey = false;
				colvarCustomerMasterFileId.IsForeignKey = true;
				colvarCustomerMasterFileId.IsReadOnly = false;
				colvarCustomerMasterFileId.DefaultSetting = @"";
				colvarCustomerMasterFileId.ForeignKeyTableName = "AE_CustomerMasterFiles";
				schema.Columns.Add(colvarCustomerMasterFileId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MC_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarAmountDue = new TableSchema.TableColumn(schema);
				colvarAmountDue.ColumnName = "AmountDue";
				colvarAmountDue.DataType = DbType.Currency;
				colvarAmountDue.MaxLength = 0;
				colvarAmountDue.AutoIncrement = false;
				colvarAmountDue.IsNullable = true;
				colvarAmountDue.IsPrimaryKey = false;
				colvarAmountDue.IsForeignKey = false;
				colvarAmountDue.IsReadOnly = false;
				colvarAmountDue.DefaultSetting = @"((0))";
				colvarAmountDue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmountDue);

				TableSchema.TableColumn colvarDueDate = new TableSchema.TableColumn(schema);
				colvarDueDate.ColumnName = "DueDate";
				colvarDueDate.DataType = DbType.DateTime;
				colvarDueDate.MaxLength = 0;
				colvarDueDate.AutoIncrement = false;
				colvarDueDate.IsNullable = true;
				colvarDueDate.IsPrimaryKey = false;
				colvarDueDate.IsForeignKey = false;
				colvarDueDate.IsReadOnly = false;
				colvarDueDate.DefaultSetting = @"";
				colvarDueDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDueDate);

				TableSchema.TableColumn colvarNumberOfUnites = new TableSchema.TableColumn(schema);
				colvarNumberOfUnites.ColumnName = "NumberOfUnites";
				colvarNumberOfUnites.DataType = DbType.Int16;
				colvarNumberOfUnites.MaxLength = 0;
				colvarNumberOfUnites.AutoIncrement = false;
				colvarNumberOfUnites.IsNullable = true;
				colvarNumberOfUnites.IsPrimaryKey = false;
				colvarNumberOfUnites.IsForeignKey = false;
				colvarNumberOfUnites.IsReadOnly = false;
				colvarNumberOfUnites.DefaultSetting = @"";
				colvarNumberOfUnites.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumberOfUnites);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SAE_BillingInfoSummary",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_BillingInfoSummary LoadFrom(SAE_BillingInfoSummary item)
		{
			SAE_BillingInfoSummary result = new SAE_BillingInfoSummary();
			if (item.SummaryID != default(long)) {
				result.LoadByKey(item.SummaryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long SummaryID {
			get { return GetColumnValue<long>(Columns.SummaryID); }
			set {
				SetColumnValue(Columns.SummaryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SummaryID));
			}
		}
		[DataMember]
		public long CustomerMasterFileId {
			get { return GetColumnValue<long>(Columns.CustomerMasterFileId); }
			set {
				SetColumnValue(Columns.CustomerMasterFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerMasterFileId));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public decimal? AmountDue {
			get { return GetColumnValue<decimal?>(Columns.AmountDue); }
			set {
				SetColumnValue(Columns.AmountDue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AmountDue));
			}
		}
		[DataMember]
		public DateTime? DueDate {
			get { return GetColumnValue<DateTime?>(Columns.DueDate); }
			set {
				SetColumnValue(Columns.DueDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DueDate));
			}
		}
		[DataMember]
		public short? NumberOfUnites {
			get { return GetColumnValue<short?>(Columns.NumberOfUnites); }
			set {
				SetColumnValue(Columns.NumberOfUnites, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NumberOfUnites));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private AE_CustomerMasterFile _CustomerMasterFile;
		//Relationship: FK_SAE_CustomerMasterFileBillingInfoSummary_AE_CustomerMasterFiles
		public AE_CustomerMasterFile CustomerMasterFile
		{
			get
			{
				if(_CustomerMasterFile == null) {
					_CustomerMasterFile = AE_CustomerMasterFile.FetchByID(this.CustomerMasterFileId);
				}
				return _CustomerMasterFile;
			}
			set
			{
				SetColumnValue("CustomerMasterFileId", value.CustomerMasterFileID);
				_CustomerMasterFile = value;
			}
		}

		private MC_Account _Account;
		//Relationship: FK_SAE_CustomerMasterFileBillingInfoSummary_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SummaryID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SummaryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerMasterFileIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AmountDueColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DueDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn NumberOfUnitesColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SummaryID = @"SummaryID";
			public static readonly string CustomerMasterFileId = @"CustomerMasterFileId";
			public static readonly string AccountId = @"AccountId";
			public static readonly string AmountDue = @"AmountDue";
			public static readonly string DueDate = @"DueDate";
			public static readonly string NumberOfUnites = @"NumberOfUnites";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SummaryID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_CreditReportAbara class.
	/// </summary>
	[DataContract]
	public partial class SAE_CreditReportAbaraCollection : ActiveList<SAE_CreditReportAbara, SAE_CreditReportAbaraCollection>
	{
		public static SAE_CreditReportAbaraCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_CreditReportAbaraCollection result = new SAE_CreditReportAbaraCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_CreditReportAbara item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_CreditReportAbara table.
	/// </summary>
	[DataContract]
	public partial class SAE_CreditReportAbara : ActiveRecord<SAE_CreditReportAbara>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_CreditReportAbara()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_CreditReportAbara", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditReportAbaraID = new TableSchema.TableColumn(schema);
				colvarCreditReportAbaraID.ColumnName = "CreditReportAbaraID";
				colvarCreditReportAbaraID.DataType = DbType.Int64;
				colvarCreditReportAbaraID.MaxLength = 0;
				colvarCreditReportAbaraID.AutoIncrement = false;
				colvarCreditReportAbaraID.IsNullable = false;
				colvarCreditReportAbaraID.IsPrimaryKey = true;
				colvarCreditReportAbaraID.IsForeignKey = false;
				colvarCreditReportAbaraID.IsReadOnly = false;
				colvarCreditReportAbaraID.DefaultSetting = @"";
				colvarCreditReportAbaraID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReportAbaraID);

				TableSchema.TableColumn colvarCreditReportId = new TableSchema.TableColumn(schema);
				colvarCreditReportId.ColumnName = "CreditReportId";
				colvarCreditReportId.DataType = DbType.Int32;
				colvarCreditReportId.MaxLength = 0;
				colvarCreditReportId.AutoIncrement = false;
				colvarCreditReportId.IsNullable = false;
				colvarCreditReportId.IsPrimaryKey = false;
				colvarCreditReportId.IsForeignKey = true;
				colvarCreditReportId.IsReadOnly = false;
				colvarCreditReportId.DefaultSetting = @"";
				colvarCreditReportId.ForeignKeyTableName = "SAE_CreditRports";
				schema.Columns.Add(colvarCreditReportId);

				TableSchema.TableColumn colvarLeadId = new TableSchema.TableColumn(schema);
				colvarLeadId.ColumnName = "LeadId";
				colvarLeadId.DataType = DbType.Int32;
				colvarLeadId.MaxLength = 0;
				colvarLeadId.AutoIncrement = false;
				colvarLeadId.IsNullable = false;
				colvarLeadId.IsPrimaryKey = false;
				colvarLeadId.IsForeignKey = false;
				colvarLeadId.IsReadOnly = false;
				colvarLeadId.DefaultSetting = @"";
				colvarLeadId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadId);

				TableSchema.TableColumn colvarBureauId = new TableSchema.TableColumn(schema);
				colvarBureauId.ColumnName = "BureauId";
				colvarBureauId.DataType = DbType.Int32;
				colvarBureauId.MaxLength = 0;
				colvarBureauId.AutoIncrement = false;
				colvarBureauId.IsNullable = false;
				colvarBureauId.IsPrimaryKey = false;
				colvarBureauId.IsForeignKey = false;
				colvarBureauId.IsReadOnly = false;
				colvarBureauId.DefaultSetting = @"";
				colvarBureauId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBureauId);

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int32;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = false;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = false;
				colvarAddressId.IsForeignKey = false;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarReportID = new TableSchema.TableColumn(schema);
				colvarReportID.ColumnName = "ReportID";
				colvarReportID.DataType = DbType.Int32;
				colvarReportID.MaxLength = 0;
				colvarReportID.AutoIncrement = false;
				colvarReportID.IsNullable = true;
				colvarReportID.IsPrimaryKey = false;
				colvarReportID.IsForeignKey = false;
				colvarReportID.IsReadOnly = false;
				colvarReportID.DefaultSetting = @"";
				colvarReportID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportID);

				TableSchema.TableColumn colvarReportGuid = new TableSchema.TableColumn(schema);
				colvarReportGuid.ColumnName = "ReportGuid";
				colvarReportGuid.DataType = DbType.Guid;
				colvarReportGuid.MaxLength = 0;
				colvarReportGuid.AutoIncrement = false;
				colvarReportGuid.IsNullable = true;
				colvarReportGuid.IsPrimaryKey = false;
				colvarReportGuid.IsForeignKey = false;
				colvarReportGuid.IsReadOnly = false;
				colvarReportGuid.DefaultSetting = @"";
				colvarReportGuid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportGuid);

				TableSchema.TableColumn colvarResult = new TableSchema.TableColumn(schema);
				colvarResult.ColumnName = "Result";
				colvarResult.DataType = DbType.AnsiString;
				colvarResult.MaxLength = 20;
				colvarResult.AutoIncrement = false;
				colvarResult.IsNullable = false;
				colvarResult.IsPrimaryKey = false;
				colvarResult.IsForeignKey = false;
				colvarResult.IsReadOnly = false;
				colvarResult.DefaultSetting = @"";
				colvarResult.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResult);

				TableSchema.TableColumn colvarScore = new TableSchema.TableColumn(schema);
				colvarScore.ColumnName = "Score";
				colvarScore.DataType = DbType.Int32;
				colvarScore.MaxLength = 0;
				colvarScore.AutoIncrement = false;
				colvarScore.IsNullable = false;
				colvarScore.IsPrimaryKey = false;
				colvarScore.IsForeignKey = false;
				colvarScore.IsReadOnly = false;
				colvarScore.DefaultSetting = @"";
				colvarScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScore);

				TableSchema.TableColumn colvarIsScored = new TableSchema.TableColumn(schema);
				colvarIsScored.ColumnName = "IsScored";
				colvarIsScored.DataType = DbType.Boolean;
				colvarIsScored.MaxLength = 0;
				colvarIsScored.AutoIncrement = false;
				colvarIsScored.IsNullable = false;
				colvarIsScored.IsPrimaryKey = false;
				colvarIsScored.IsForeignKey = false;
				colvarIsScored.IsReadOnly = false;
				colvarIsScored.DefaultSetting = @"";
				colvarIsScored.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsScored);

				TableSchema.TableColumn colvarIsHit = new TableSchema.TableColumn(schema);
				colvarIsHit.ColumnName = "IsHit";
				colvarIsHit.DataType = DbType.Boolean;
				colvarIsHit.MaxLength = 0;
				colvarIsHit.AutoIncrement = false;
				colvarIsHit.IsNullable = false;
				colvarIsHit.IsPrimaryKey = false;
				colvarIsHit.IsForeignKey = false;
				colvarIsHit.IsReadOnly = false;
				colvarIsHit.DefaultSetting = @"";
				colvarIsHit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHit);

				TableSchema.TableColumn colvarReportHtml = new TableSchema.TableColumn(schema);
				colvarReportHtml.ColumnName = "ReportHtml";
				colvarReportHtml.DataType = DbType.String;
				colvarReportHtml.MaxLength = -1;
				colvarReportHtml.AutoIncrement = false;
				colvarReportHtml.IsNullable = true;
				colvarReportHtml.IsPrimaryKey = false;
				colvarReportHtml.IsForeignKey = false;
				colvarReportHtml.IsReadOnly = false;
				colvarReportHtml.DefaultSetting = @"";
				colvarReportHtml.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportHtml);

				TableSchema.TableColumn colvarReportXML = new TableSchema.TableColumn(schema);
				colvarReportXML.ColumnName = "ReportXML";
				colvarReportXML.DataType = DbType.String;
				colvarReportXML.MaxLength = -1;
				colvarReportXML.AutoIncrement = false;
				colvarReportXML.IsNullable = true;
				colvarReportXML.IsPrimaryKey = false;
				colvarReportXML.IsForeignKey = false;
				colvarReportXML.IsReadOnly = false;
				colvarReportXML.DefaultSetting = @"";
				colvarReportXML.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportXML);

				TableSchema.TableColumn colvarErrorMessage = new TableSchema.TableColumn(schema);
				colvarErrorMessage.ColumnName = "ErrorMessage";
				colvarErrorMessage.DataType = DbType.String;
				colvarErrorMessage.MaxLength = -1;
				colvarErrorMessage.AutoIncrement = false;
				colvarErrorMessage.IsNullable = true;
				colvarErrorMessage.IsPrimaryKey = false;
				colvarErrorMessage.IsForeignKey = false;
				colvarErrorMessage.IsReadOnly = false;
				colvarErrorMessage.DefaultSetting = @"";
				colvarErrorMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrorMessage);

				TableSchema.TableColumn colvarHitStatus = new TableSchema.TableColumn(schema);
				colvarHitStatus.ColumnName = "HitStatus";
				colvarHitStatus.DataType = DbType.AnsiString;
				colvarHitStatus.MaxLength = 50;
				colvarHitStatus.AutoIncrement = false;
				colvarHitStatus.IsNullable = true;
				colvarHitStatus.IsPrimaryKey = false;
				colvarHitStatus.IsForeignKey = false;
				colvarHitStatus.IsReadOnly = false;
				colvarHitStatus.DefaultSetting = @"";
				colvarHitStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHitStatus);

				TableSchema.TableColumn colvarDecisionCode = new TableSchema.TableColumn(schema);
				colvarDecisionCode.ColumnName = "DecisionCode";
				colvarDecisionCode.DataType = DbType.AnsiString;
				colvarDecisionCode.MaxLength = 3;
				colvarDecisionCode.AutoIncrement = false;
				colvarDecisionCode.IsNullable = true;
				colvarDecisionCode.IsPrimaryKey = false;
				colvarDecisionCode.IsForeignKey = false;
				colvarDecisionCode.IsReadOnly = false;
				colvarDecisionCode.DefaultSetting = @"";
				colvarDecisionCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDecisionCode);

				TableSchema.TableColumn colvarDecisionText = new TableSchema.TableColumn(schema);
				colvarDecisionText.ColumnName = "DecisionText";
				colvarDecisionText.DataType = DbType.AnsiString;
				colvarDecisionText.MaxLength = 500;
				colvarDecisionText.AutoIncrement = false;
				colvarDecisionText.IsNullable = true;
				colvarDecisionText.IsPrimaryKey = false;
				colvarDecisionText.IsForeignKey = false;
				colvarDecisionText.IsReadOnly = false;
				colvarDecisionText.DefaultSetting = @"";
				colvarDecisionText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDecisionText);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SAE_CreditReportAbara",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_CreditReportAbara LoadFrom(SAE_CreditReportAbara item)
		{
			SAE_CreditReportAbara result = new SAE_CreditReportAbara();
			if (item.CreditReportAbaraID != default(long)) {
				result.LoadByKey(item.CreditReportAbaraID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CreditReportAbaraID {
			get { return GetColumnValue<long>(Columns.CreditReportAbaraID); }
			set {
				SetColumnValue(Columns.CreditReportAbaraID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportAbaraID));
			}
		}
		[DataMember]
		public int CreditReportId {
			get { return GetColumnValue<int>(Columns.CreditReportId); }
			set {
				SetColumnValue(Columns.CreditReportId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportId));
			}
		}
		[DataMember]
		public int LeadId {
			get { return GetColumnValue<int>(Columns.LeadId); }
			set {
				SetColumnValue(Columns.LeadId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadId));
			}
		}
		[DataMember]
		public int BureauId {
			get { return GetColumnValue<int>(Columns.BureauId); }
			set {
				SetColumnValue(Columns.BureauId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BureauId));
			}
		}
		[DataMember]
		public int AddressId {
			get { return GetColumnValue<int>(Columns.AddressId); }
			set {
				SetColumnValue(Columns.AddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressId));
			}
		}
		[DataMember]
		public int? ReportID {
			get { return GetColumnValue<int?>(Columns.ReportID); }
			set {
				SetColumnValue(Columns.ReportID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportID));
			}
		}
		[DataMember]
		public Guid? ReportGuid {
			get { return GetColumnValue<Guid?>(Columns.ReportGuid); }
			set {
				SetColumnValue(Columns.ReportGuid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportGuid));
			}
		}
		[DataMember]
		public string Result {
			get { return GetColumnValue<string>(Columns.Result); }
			set {
				SetColumnValue(Columns.Result, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Result));
			}
		}
		[DataMember]
		public int Score {
			get { return GetColumnValue<int>(Columns.Score); }
			set {
				SetColumnValue(Columns.Score, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Score));
			}
		}
		[DataMember]
		public bool IsScored {
			get { return GetColumnValue<bool>(Columns.IsScored); }
			set {
				SetColumnValue(Columns.IsScored, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsScored));
			}
		}
		[DataMember]
		public bool IsHit {
			get { return GetColumnValue<bool>(Columns.IsHit); }
			set {
				SetColumnValue(Columns.IsHit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsHit));
			}
		}
		[DataMember]
		public string ReportHtml {
			get { return GetColumnValue<string>(Columns.ReportHtml); }
			set {
				SetColumnValue(Columns.ReportHtml, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportHtml));
			}
		}
		[DataMember]
		public string ReportXML {
			get { return GetColumnValue<string>(Columns.ReportXML); }
			set {
				SetColumnValue(Columns.ReportXML, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportXML));
			}
		}
		[DataMember]
		public string ErrorMessage {
			get { return GetColumnValue<string>(Columns.ErrorMessage); }
			set {
				SetColumnValue(Columns.ErrorMessage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ErrorMessage));
			}
		}
		[DataMember]
		public string HitStatus {
			get { return GetColumnValue<string>(Columns.HitStatus); }
			set {
				SetColumnValue(Columns.HitStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HitStatus));
			}
		}
		[DataMember]
		public string DecisionCode {
			get { return GetColumnValue<string>(Columns.DecisionCode); }
			set {
				SetColumnValue(Columns.DecisionCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DecisionCode));
			}
		}
		[DataMember]
		public string DecisionText {
			get { return GetColumnValue<string>(Columns.DecisionText); }
			set {
				SetColumnValue(Columns.DecisionText, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DecisionText));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private SAE_CreditRport _CreditReport;
		//Relationship: FK_SAE_CreditReportAbara_SAE_CreditRports
		public SAE_CreditRport CreditReport
		{
			get
			{
				if(_CreditReport == null) {
					_CreditReport = SAE_CreditRport.FetchByID(this.CreditReportId);
				}
				return _CreditReport;
			}
			set
			{
				SetColumnValue("CreditReportId", value.CreditReportID);
				_CreditReport = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CreditReportAbaraID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditReportAbaraIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CreditReportIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LeadIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BureauIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ReportIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ReportGuidColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ResultColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ScoreColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsScoredColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsHitColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ReportHtmlColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ReportXMLColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ErrorMessageColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn HitStatusColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DecisionCodeColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn DecisionTextColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[18]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditReportAbaraID = @"CreditReportAbaraID";
			public static readonly string CreditReportId = @"CreditReportId";
			public static readonly string LeadId = @"LeadId";
			public static readonly string BureauId = @"BureauId";
			public static readonly string AddressId = @"AddressId";
			public static readonly string ReportID = @"ReportID";
			public static readonly string ReportGuid = @"ReportGuid";
			public static readonly string Result = @"Result";
			public static readonly string Score = @"Score";
			public static readonly string IsScored = @"IsScored";
			public static readonly string IsHit = @"IsHit";
			public static readonly string ReportHtml = @"ReportHtml";
			public static readonly string ReportXML = @"ReportXML";
			public static readonly string ErrorMessage = @"ErrorMessage";
			public static readonly string HitStatus = @"HitStatus";
			public static readonly string DecisionCode = @"DecisionCode";
			public static readonly string DecisionText = @"DecisionText";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditReportAbaraID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_CreditRport class.
	/// </summary>
	[DataContract]
	public partial class SAE_CreditRportCollection : ActiveList<SAE_CreditRport, SAE_CreditRportCollection>
	{
		public static SAE_CreditRportCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_CreditRportCollection result = new SAE_CreditRportCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_CreditRport item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_CreditRports table.
	/// </summary>
	[DataContract]
	public partial class SAE_CreditRport : ActiveRecord<SAE_CreditRport>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_CreditRport()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_CreditRports", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCreditReportID = new TableSchema.TableColumn(schema);
				colvarCreditReportID.ColumnName = "CreditReportID";
				colvarCreditReportID.DataType = DbType.Int32;
				colvarCreditReportID.MaxLength = 0;
				colvarCreditReportID.AutoIncrement = true;
				colvarCreditReportID.IsNullable = false;
				colvarCreditReportID.IsPrimaryKey = true;
				colvarCreditReportID.IsForeignKey = false;
				colvarCreditReportID.IsReadOnly = false;
				colvarCreditReportID.DefaultSetting = @"";
				colvarCreditReportID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReportID);

				TableSchema.TableColumn colvarLeadID = new TableSchema.TableColumn(schema);
				colvarLeadID.ColumnName = "LeadID";
				colvarLeadID.DataType = DbType.Int32;
				colvarLeadID.MaxLength = 0;
				colvarLeadID.AutoIncrement = false;
				colvarLeadID.IsNullable = false;
				colvarLeadID.IsPrimaryKey = false;
				colvarLeadID.IsForeignKey = false;
				colvarLeadID.IsReadOnly = false;
				colvarLeadID.DefaultSetting = @"";
				colvarLeadID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadID);

				TableSchema.TableColumn colvarBureauID = new TableSchema.TableColumn(schema);
				colvarBureauID.ColumnName = "BureauID";
				colvarBureauID.DataType = DbType.Int32;
				colvarBureauID.MaxLength = 0;
				colvarBureauID.AutoIncrement = false;
				colvarBureauID.IsNullable = false;
				colvarBureauID.IsPrimaryKey = false;
				colvarBureauID.IsForeignKey = false;
				colvarBureauID.IsReadOnly = false;
				colvarBureauID.DefaultSetting = @"";
				colvarBureauID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBureauID);

				TableSchema.TableColumn colvarCreditReportVendorId = new TableSchema.TableColumn(schema);
				colvarCreditReportVendorId.ColumnName = "CreditReportVendorId";
				colvarCreditReportVendorId.DataType = DbType.Int32;
				colvarCreditReportVendorId.MaxLength = 0;
				colvarCreditReportVendorId.AutoIncrement = false;
				colvarCreditReportVendorId.IsNullable = false;
				colvarCreditReportVendorId.IsPrimaryKey = false;
				colvarCreditReportVendorId.IsForeignKey = false;
				colvarCreditReportVendorId.IsReadOnly = false;
				colvarCreditReportVendorId.DefaultSetting = @"";
				colvarCreditReportVendorId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReportVendorId);

				TableSchema.TableColumn colvarPrefix = new TableSchema.TableColumn(schema);
				colvarPrefix.ColumnName = "Prefix";
				colvarPrefix.DataType = DbType.String;
				colvarPrefix.MaxLength = 50;
				colvarPrefix.AutoIncrement = false;
				colvarPrefix.IsNullable = true;
				colvarPrefix.IsPrimaryKey = false;
				colvarPrefix.IsForeignKey = false;
				colvarPrefix.IsReadOnly = false;
				colvarPrefix.DefaultSetting = @"";
				colvarPrefix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrefix);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = false;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = false;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarSuffix = new TableSchema.TableColumn(schema);
				colvarSuffix.ColumnName = "Suffix";
				colvarSuffix.DataType = DbType.String;
				colvarSuffix.MaxLength = 50;
				colvarSuffix.AutoIncrement = false;
				colvarSuffix.IsNullable = true;
				colvarSuffix.IsPrimaryKey = false;
				colvarSuffix.IsForeignKey = false;
				colvarSuffix.IsReadOnly = false;
				colvarSuffix.DefaultSetting = @"";
				colvarSuffix.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuffix);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.String;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarDOB = new TableSchema.TableColumn(schema);
				colvarDOB.ColumnName = "DOB";
				colvarDOB.DataType = DbType.DateTime;
				colvarDOB.MaxLength = 0;
				colvarDOB.AutoIncrement = false;
				colvarDOB.IsNullable = true;
				colvarDOB.IsPrimaryKey = false;
				colvarDOB.IsForeignKey = false;
				colvarDOB.IsReadOnly = false;
				colvarDOB.DefaultSetting = @"";
				colvarDOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOB);

				TableSchema.TableColumn colvarScore = new TableSchema.TableColumn(schema);
				colvarScore.ColumnName = "Score";
				colvarScore.DataType = DbType.Int16;
				colvarScore.MaxLength = 0;
				colvarScore.AutoIncrement = false;
				colvarScore.IsNullable = false;
				colvarScore.IsPrimaryKey = false;
				colvarScore.IsForeignKey = false;
				colvarScore.IsReadOnly = false;
				colvarScore.DefaultSetting = @"";
				colvarScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScore);

				TableSchema.TableColumn colvarCreditReport = new TableSchema.TableColumn(schema);
				colvarCreditReport.ColumnName = "CreditReport";
				colvarCreditReport.DataType = DbType.String;
				colvarCreditReport.MaxLength = -1;
				colvarCreditReport.AutoIncrement = false;
				colvarCreditReport.IsNullable = true;
				colvarCreditReport.IsPrimaryKey = false;
				colvarCreditReport.IsForeignKey = false;
				colvarCreditReport.IsReadOnly = false;
				colvarCreditReport.DefaultSetting = @"";
				colvarCreditReport.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditReport);

				TableSchema.TableColumn colvarMicroBiltGUID = new TableSchema.TableColumn(schema);
				colvarMicroBiltGUID.ColumnName = "MicroBiltGUID";
				colvarMicroBiltGUID.DataType = DbType.String;
				colvarMicroBiltGUID.MaxLength = 50;
				colvarMicroBiltGUID.AutoIncrement = false;
				colvarMicroBiltGUID.IsNullable = false;
				colvarMicroBiltGUID.IsPrimaryKey = false;
				colvarMicroBiltGUID.IsForeignKey = false;
				colvarMicroBiltGUID.IsReadOnly = false;
				colvarMicroBiltGUID.DefaultSetting = @"";
				colvarMicroBiltGUID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMicroBiltGUID);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.String;
				colvarModifiedByID.MaxLength = 50;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = false;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedByDate = new TableSchema.TableColumn(schema);
				colvarModifiedByDate.ColumnName = "ModifiedByDate";
				colvarModifiedByDate.DataType = DbType.DateTime;
				colvarModifiedByDate.MaxLength = 0;
				colvarModifiedByDate.AutoIncrement = false;
				colvarModifiedByDate.IsNullable = false;
				colvarModifiedByDate.IsPrimaryKey = false;
				colvarModifiedByDate.IsForeignKey = false;
				colvarModifiedByDate.IsReadOnly = false;
				colvarModifiedByDate.DefaultSetting = @"";
				colvarModifiedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByDate);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SAE_CreditRports",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_CreditRport LoadFrom(SAE_CreditRport item)
		{
			SAE_CreditRport result = new SAE_CreditRport();
			if (item.CreditReportID != default(int)) {
				result.LoadByKey(item.CreditReportID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CreditReportID {
			get { return GetColumnValue<int>(Columns.CreditReportID); }
			set {
				SetColumnValue(Columns.CreditReportID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportID));
			}
		}
		[DataMember]
		public int LeadID {
			get { return GetColumnValue<int>(Columns.LeadID); }
			set {
				SetColumnValue(Columns.LeadID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadID));
			}
		}
		[DataMember]
		public int BureauID {
			get { return GetColumnValue<int>(Columns.BureauID); }
			set {
				SetColumnValue(Columns.BureauID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BureauID));
			}
		}
		[DataMember]
		public int CreditReportVendorId {
			get { return GetColumnValue<int>(Columns.CreditReportVendorId); }
			set {
				SetColumnValue(Columns.CreditReportVendorId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReportVendorId));
			}
		}
		[DataMember]
		public string Prefix {
			get { return GetColumnValue<string>(Columns.Prefix); }
			set {
				SetColumnValue(Columns.Prefix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Prefix));
			}
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set {
				SetColumnValue(Columns.FirstName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FirstName));
			}
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set {
				SetColumnValue(Columns.MiddleName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiddleName));
			}
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set {
				SetColumnValue(Columns.LastName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastName));
			}
		}
		[DataMember]
		public string Suffix {
			get { return GetColumnValue<string>(Columns.Suffix); }
			set {
				SetColumnValue(Columns.Suffix, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Suffix));
			}
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set {
				SetColumnValue(Columns.SSN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SSN));
			}
		}
		[DataMember]
		public DateTime? DOB {
			get { return GetColumnValue<DateTime?>(Columns.DOB); }
			set {
				SetColumnValue(Columns.DOB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DOB));
			}
		}
		[DataMember]
		public short Score {
			get { return GetColumnValue<short>(Columns.Score); }
			set {
				SetColumnValue(Columns.Score, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Score));
			}
		}
		[DataMember]
		public string CreditReport {
			get { return GetColumnValue<string>(Columns.CreditReport); }
			set {
				SetColumnValue(Columns.CreditReport, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditReport));
			}
		}
		[DataMember]
		public string MicroBiltGUID {
			get { return GetColumnValue<string>(Columns.MicroBiltGUID); }
			set {
				SetColumnValue(Columns.MicroBiltGUID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MicroBiltGUID));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string ModifiedByID {
			get { return GetColumnValue<string>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime ModifiedByDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedByDate); }
			set {
				SetColumnValue(Columns.ModifiedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByDate));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CreditReportID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CreditReportIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LeadIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BureauIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreditReportVendorIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PrefixColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn SuffixColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DOBColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ScoreColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreditReportColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn MicroBiltGUIDColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ModifiedByDateColumn
		{
			get { return Schema.Columns[18]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CreditReportID = @"CreditReportID";
			public static readonly string LeadID = @"LeadID";
			public static readonly string BureauID = @"BureauID";
			public static readonly string CreditReportVendorId = @"CreditReportVendorId";
			public static readonly string Prefix = @"Prefix";
			public static readonly string FirstName = @"FirstName";
			public static readonly string MiddleName = @"MiddleName";
			public static readonly string LastName = @"LastName";
			public static readonly string Suffix = @"Suffix";
			public static readonly string SSN = @"SSN";
			public static readonly string DOB = @"DOB";
			public static readonly string Score = @"Score";
			public static readonly string CreditReport = @"CreditReport";
			public static readonly string MicroBiltGUID = @"MicroBiltGUID";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedByDate = @"ModifiedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CreditReportID; }
		}
		*/

		#region Foreign Collections

		private SAE_CreditReportAbaraCollection _SAE_CreditReportAbarasCol;
		//Relationship: FK_SAE_CreditReportAbara_SAE_CreditRports
		public SAE_CreditReportAbaraCollection SAE_CreditReportAbarasCol
		{
			get
			{
				if(_SAE_CreditReportAbarasCol == null) {
					_SAE_CreditReportAbarasCol = new SAE_CreditReportAbaraCollection();
					_SAE_CreditReportAbarasCol.LoadAndCloseReader(SAE_CreditReportAbara.Query()
						.WHERE(SAE_CreditReportAbara.Columns.CreditReportId, CreditReportID).ExecuteReader());
				}
				return _SAE_CreditReportAbarasCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the SAE_InterimPanelTypeMap class.
	/// </summary>
	[DataContract]
	public partial class SAE_InterimPanelTypeMapCollection : ActiveList<SAE_InterimPanelTypeMap, SAE_InterimPanelTypeMapCollection>
	{
		public static SAE_InterimPanelTypeMapCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_InterimPanelTypeMapCollection result = new SAE_InterimPanelTypeMapCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_InterimPanelTypeMap item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_InterimPanelTypeMap table.
	/// </summary>
	[DataContract]
	public partial class SAE_InterimPanelTypeMap : ActiveRecord<SAE_InterimPanelTypeMap>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_InterimPanelTypeMap()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_InterimPanelTypeMap", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarInterimPanelTypeID = new TableSchema.TableColumn(schema);
				colvarInterimPanelTypeID.ColumnName = "InterimPanelTypeID";
				colvarInterimPanelTypeID.DataType = DbType.String;
				colvarInterimPanelTypeID.MaxLength = 10;
				colvarInterimPanelTypeID.AutoIncrement = false;
				colvarInterimPanelTypeID.IsNullable = false;
				colvarInterimPanelTypeID.IsPrimaryKey = true;
				colvarInterimPanelTypeID.IsForeignKey = false;
				colvarInterimPanelTypeID.IsReadOnly = false;
				colvarInterimPanelTypeID.DefaultSetting = @"";
				colvarInterimPanelTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInterimPanelTypeID);

				TableSchema.TableColumn colvarPanelTypeId = new TableSchema.TableColumn(schema);
				colvarPanelTypeId.ColumnName = "PanelTypeId";
				colvarPanelTypeId.DataType = DbType.AnsiString;
				colvarPanelTypeId.MaxLength = 20;
				colvarPanelTypeId.AutoIncrement = false;
				colvarPanelTypeId.IsNullable = true;
				colvarPanelTypeId.IsPrimaryKey = false;
				colvarPanelTypeId.IsForeignKey = true;
				colvarPanelTypeId.IsReadOnly = false;
				colvarPanelTypeId.DefaultSetting = @"";
				colvarPanelTypeId.ForeignKeyTableName = "MS_AccountPanelTypes";
				schema.Columns.Add(colvarPanelTypeId);

				TableSchema.TableColumn colvarCount = new TableSchema.TableColumn(schema);
				colvarCount.ColumnName = "Count";
				colvarCount.DataType = DbType.Int32;
				colvarCount.MaxLength = 0;
				colvarCount.AutoIncrement = false;
				colvarCount.IsNullable = true;
				colvarCount.IsPrimaryKey = false;
				colvarCount.IsForeignKey = false;
				colvarCount.IsReadOnly = false;
				colvarCount.DefaultSetting = @"";
				colvarCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCount);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SAE_InterimPanelTypeMap",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_InterimPanelTypeMap LoadFrom(SAE_InterimPanelTypeMap item)
		{
			SAE_InterimPanelTypeMap result = new SAE_InterimPanelTypeMap();
			if (item.InterimPanelTypeID != default(string)) {
				result.LoadByKey(item.InterimPanelTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string InterimPanelTypeID {
			get { return GetColumnValue<string>(Columns.InterimPanelTypeID); }
			set {
				SetColumnValue(Columns.InterimPanelTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InterimPanelTypeID));
			}
		}
		[DataMember]
		public string PanelTypeId {
			get { return GetColumnValue<string>(Columns.PanelTypeId); }
			set {
				SetColumnValue(Columns.PanelTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeId));
			}
		}
		[DataMember]
		public int? Count {
			get { return GetColumnValue<int?>(Columns.Count); }
			set {
				SetColumnValue(Columns.Count, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Count));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_AccountPanelType _PanelType;
		//Relationship: FK_SAE_InterimPanelTypeMap_MS_AccountPanelTypes
		public MS_AccountPanelType PanelType
		{
			get
			{
				if(_PanelType == null) {
					_PanelType = MS_AccountPanelType.FetchByID(this.PanelTypeId);
				}
				return _PanelType;
			}
			set
			{
				SetColumnValue("PanelTypeId", value.PanelTypeID);
				_PanelType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PanelTypeId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn InterimPanelTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PanelTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CountColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string InterimPanelTypeID = @"InterimPanelTypeID";
			public static readonly string PanelTypeId = @"PanelTypeId";
			public static readonly string Count = @"Count";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return InterimPanelTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_TestNumber class.
	/// </summary>
	[DataContract]
	public partial class SAE_TestNumberCollection : ActiveList<SAE_TestNumber, SAE_TestNumberCollection>
	{
		public static SAE_TestNumberCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_TestNumberCollection result = new SAE_TestNumberCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_TestNumber item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_TestNumbers table.
	/// </summary>
	[DataContract]
	public partial class SAE_TestNumber : ActiveRecord<SAE_TestNumber>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_TestNumber()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_TestNumbers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int32;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = true;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = true;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarTaxPercentage = new TableSchema.TableColumn(schema);
				colvarTaxPercentage.ColumnName = "TaxPercentage";
				colvarTaxPercentage.DataType = DbType.Decimal;
				colvarTaxPercentage.MaxLength = 0;
				colvarTaxPercentage.AutoIncrement = false;
				colvarTaxPercentage.IsNullable = false;
				colvarTaxPercentage.IsPrimaryKey = false;
				colvarTaxPercentage.IsForeignKey = false;
				colvarTaxPercentage.IsReadOnly = false;
				colvarTaxPercentage.DefaultSetting = @"";
				colvarTaxPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxPercentage);

				TableSchema.TableColumn colvarCalculated = new TableSchema.TableColumn(schema);
				colvarCalculated.ColumnName = "Calculated";
				colvarCalculated.DataType = DbType.Decimal;
				colvarCalculated.MaxLength = 0;
				colvarCalculated.AutoIncrement = false;
				colvarCalculated.IsNullable = true;
				colvarCalculated.IsPrimaryKey = false;
				colvarCalculated.IsForeignKey = false;
				colvarCalculated.IsReadOnly = true;
				colvarCalculated.DefaultSetting = @"";
				colvarCalculated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCalculated);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SAE_TestNumbers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_TestNumber LoadFrom(SAE_TestNumber item)
		{
			SAE_TestNumber result = new SAE_TestNumber();
			if (item.ID != default(int)) {
				result.LoadByKey(item.ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ID {
			get { return GetColumnValue<int>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public decimal TaxPercentage {
			get { return GetColumnValue<decimal>(Columns.TaxPercentage); }
			set {
				SetColumnValue(Columns.TaxPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TaxPercentage));
			}
		}
		[DataMember]
		public decimal? Calculated {
			get { return GetColumnValue<decimal?>(Columns.Calculated); }
			set {
				SetColumnValue(Columns.Calculated, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Calculated));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TaxPercentageColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CalculatedColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ID = @"ID";
			public static readonly string Amount = @"Amount";
			public static readonly string TaxPercentage = @"TaxPercentage";
			public static readonly string Calculated = @"Calculated";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SE_ScheduleBlock class.
	/// </summary>
	[DataContract]
	public partial class SE_ScheduleBlockCollection : ActiveList<SE_ScheduleBlock, SE_ScheduleBlockCollection>
	{
		public static SE_ScheduleBlockCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_ScheduleBlockCollection result = new SE_ScheduleBlockCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SE_ScheduleBlock item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SE_ScheduleBlocks table.
	/// </summary>
	[DataContract]
	public partial class SE_ScheduleBlock : ActiveRecord<SE_ScheduleBlock>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SE_ScheduleBlock()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SE_ScheduleBlocks", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBlockID = new TableSchema.TableColumn(schema);
				colvarBlockID.ColumnName = "BlockID";
				colvarBlockID.DataType = DbType.Int64;
				colvarBlockID.MaxLength = 0;
				colvarBlockID.AutoIncrement = true;
				colvarBlockID.IsNullable = false;
				colvarBlockID.IsPrimaryKey = true;
				colvarBlockID.IsForeignKey = false;
				colvarBlockID.IsReadOnly = false;
				colvarBlockID.DefaultSetting = @"";
				colvarBlockID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBlockID);

				TableSchema.TableColumn colvarBlock = new TableSchema.TableColumn(schema);
				colvarBlock.ColumnName = "Block";
				colvarBlock.DataType = DbType.String;
				colvarBlock.MaxLength = 2;
				colvarBlock.AutoIncrement = false;
				colvarBlock.IsNullable = false;
				colvarBlock.IsPrimaryKey = false;
				colvarBlock.IsForeignKey = false;
				colvarBlock.IsReadOnly = false;
				colvarBlock.DefaultSetting = @"";
				colvarBlock.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBlock);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.String;
				colvarZipCode.MaxLength = 5;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = true;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarMaxRadius = new TableSchema.TableColumn(schema);
				colvarMaxRadius.ColumnName = "MaxRadius";
				colvarMaxRadius.DataType = DbType.Double;
				colvarMaxRadius.MaxLength = 0;
				colvarMaxRadius.AutoIncrement = false;
				colvarMaxRadius.IsNullable = true;
				colvarMaxRadius.IsPrimaryKey = false;
				colvarMaxRadius.IsForeignKey = false;
				colvarMaxRadius.IsReadOnly = false;
				colvarMaxRadius.DefaultSetting = @"";
				colvarMaxRadius.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxRadius);

				TableSchema.TableColumn colvarDistance = new TableSchema.TableColumn(schema);
				colvarDistance.ColumnName = "Distance";
				colvarDistance.DataType = DbType.Double;
				colvarDistance.MaxLength = 0;
				colvarDistance.AutoIncrement = false;
				colvarDistance.IsNullable = true;
				colvarDistance.IsPrimaryKey = false;
				colvarDistance.IsForeignKey = false;
				colvarDistance.IsReadOnly = false;
				colvarDistance.DefaultSetting = @"";
				colvarDistance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDistance);

				TableSchema.TableColumn colvarStartTime = new TableSchema.TableColumn(schema);
				colvarStartTime.ColumnName = "StartTime";
				colvarStartTime.DataType = DbType.DateTime;
				colvarStartTime.MaxLength = 0;
				colvarStartTime.AutoIncrement = false;
				colvarStartTime.IsNullable = true;
				colvarStartTime.IsPrimaryKey = false;
				colvarStartTime.IsForeignKey = false;
				colvarStartTime.IsReadOnly = false;
				colvarStartTime.DefaultSetting = @"";
				colvarStartTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartTime);

				TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
				colvarEndTime.ColumnName = "EndTime";
				colvarEndTime.DataType = DbType.DateTime;
				colvarEndTime.MaxLength = 0;
				colvarEndTime.AutoIncrement = false;
				colvarEndTime.IsNullable = true;
				colvarEndTime.IsPrimaryKey = false;
				colvarEndTime.IsForeignKey = false;
				colvarEndTime.IsReadOnly = false;
				colvarEndTime.DefaultSetting = @"";
				colvarEndTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndTime);

				TableSchema.TableColumn colvarAvailableSlots = new TableSchema.TableColumn(schema);
				colvarAvailableSlots.ColumnName = "AvailableSlots";
				colvarAvailableSlots.DataType = DbType.Int32;
				colvarAvailableSlots.MaxLength = 0;
				colvarAvailableSlots.AutoIncrement = false;
				colvarAvailableSlots.IsNullable = true;
				colvarAvailableSlots.IsPrimaryKey = false;
				colvarAvailableSlots.IsForeignKey = false;
				colvarAvailableSlots.IsReadOnly = false;
				colvarAvailableSlots.DefaultSetting = @"";
				colvarAvailableSlots.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAvailableSlots);

				TableSchema.TableColumn colvarTechnicianId = new TableSchema.TableColumn(schema);
				colvarTechnicianId.ColumnName = "TechnicianId";
				colvarTechnicianId.DataType = DbType.AnsiString;
				colvarTechnicianId.MaxLength = 20;
				colvarTechnicianId.AutoIncrement = false;
				colvarTechnicianId.IsNullable = true;
				colvarTechnicianId.IsPrimaryKey = false;
				colvarTechnicianId.IsForeignKey = false;
				colvarTechnicianId.IsReadOnly = false;
				colvarTechnicianId.DefaultSetting = @"";
				colvarTechnicianId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianId);

				TableSchema.TableColumn colvarIsTechConfirmed = new TableSchema.TableColumn(schema);
				colvarIsTechConfirmed.ColumnName = "IsTechConfirmed";
				colvarIsTechConfirmed.DataType = DbType.Boolean;
				colvarIsTechConfirmed.MaxLength = 0;
				colvarIsTechConfirmed.AutoIncrement = false;
				colvarIsTechConfirmed.IsNullable = true;
				colvarIsTechConfirmed.IsPrimaryKey = false;
				colvarIsTechConfirmed.IsForeignKey = false;
				colvarIsTechConfirmed.IsReadOnly = false;
				colvarIsTechConfirmed.DefaultSetting = @"((0))";
				colvarIsTechConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechConfirmed);

				TableSchema.TableColumn colvarDateTechConfirmed = new TableSchema.TableColumn(schema);
				colvarDateTechConfirmed.ColumnName = "DateTechConfirmed";
				colvarDateTechConfirmed.DataType = DbType.DateTime;
				colvarDateTechConfirmed.MaxLength = 0;
				colvarDateTechConfirmed.AutoIncrement = false;
				colvarDateTechConfirmed.IsNullable = true;
				colvarDateTechConfirmed.IsPrimaryKey = false;
				colvarDateTechConfirmed.IsForeignKey = false;
				colvarDateTechConfirmed.IsReadOnly = false;
				colvarDateTechConfirmed.DefaultSetting = @"";
				colvarDateTechConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateTechConfirmed);

				TableSchema.TableColumn colvarIsRed = new TableSchema.TableColumn(schema);
				colvarIsRed.ColumnName = "IsRed";
				colvarIsRed.DataType = DbType.Boolean;
				colvarIsRed.MaxLength = 0;
				colvarIsRed.AutoIncrement = false;
				colvarIsRed.IsNullable = true;
				colvarIsRed.IsPrimaryKey = false;
				colvarIsRed.IsForeignKey = false;
				colvarIsRed.IsReadOnly = false;
				colvarIsRed.DefaultSetting = @"((1))";
				colvarIsRed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsRed);

				TableSchema.TableColumn colvarCurrentTicketId = new TableSchema.TableColumn(schema);
				colvarCurrentTicketId.ColumnName = "CurrentTicketId";
				colvarCurrentTicketId.DataType = DbType.Int64;
				colvarCurrentTicketId.MaxLength = 0;
				colvarCurrentTicketId.AutoIncrement = false;
				colvarCurrentTicketId.IsNullable = true;
				colvarCurrentTicketId.IsPrimaryKey = false;
				colvarCurrentTicketId.IsForeignKey = false;
				colvarCurrentTicketId.IsReadOnly = false;
				colvarCurrentTicketId.DefaultSetting = @"";
				colvarCurrentTicketId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentTicketId);

				TableSchema.TableColumn colvarColor = new TableSchema.TableColumn(schema);
				colvarColor.ColumnName = "Color";
				colvarColor.DataType = DbType.AnsiString;
				colvarColor.MaxLength = 50;
				colvarColor.AutoIncrement = false;
				colvarColor.IsNullable = true;
				colvarColor.IsPrimaryKey = false;
				colvarColor.IsForeignKey = false;
				colvarColor.IsReadOnly = false;
				colvarColor.DefaultSetting = @"('White')";
				colvarColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColor);

				TableSchema.TableColumn colvarIsBlocked = new TableSchema.TableColumn(schema);
				colvarIsBlocked.ColumnName = "IsBlocked";
				colvarIsBlocked.DataType = DbType.Boolean;
				colvarIsBlocked.MaxLength = 0;
				colvarIsBlocked.AutoIncrement = false;
				colvarIsBlocked.IsNullable = false;
				colvarIsBlocked.IsPrimaryKey = false;
				colvarIsBlocked.IsForeignKey = false;
				colvarIsBlocked.IsReadOnly = false;
				colvarIsBlocked.DefaultSetting = @"((0))";
				colvarIsBlocked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsBlocked);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SE_ScheduleBlocks",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SE_ScheduleBlock LoadFrom(SE_ScheduleBlock item)
		{
			SE_ScheduleBlock result = new SE_ScheduleBlock();
			if (item.BlockID != default(long)) {
				result.LoadByKey(item.BlockID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long BlockID {
			get { return GetColumnValue<long>(Columns.BlockID); }
			set {
				SetColumnValue(Columns.BlockID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BlockID));
			}
		}
		[DataMember]
		public string Block {
			get { return GetColumnValue<string>(Columns.Block); }
			set {
				SetColumnValue(Columns.Block, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Block));
			}
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set {
				SetColumnValue(Columns.ZipCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZipCode));
			}
		}
		[DataMember]
		public double? MaxRadius {
			get { return GetColumnValue<double?>(Columns.MaxRadius); }
			set {
				SetColumnValue(Columns.MaxRadius, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxRadius));
			}
		}
		[DataMember]
		public double? Distance {
			get { return GetColumnValue<double?>(Columns.Distance); }
			set {
				SetColumnValue(Columns.Distance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Distance));
			}
		}
		[DataMember]
		public DateTime? StartTime {
			get { return GetColumnValue<DateTime?>(Columns.StartTime); }
			set {
				SetColumnValue(Columns.StartTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartTime));
			}
		}
		[DataMember]
		public DateTime? EndTime {
			get { return GetColumnValue<DateTime?>(Columns.EndTime); }
			set {
				SetColumnValue(Columns.EndTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EndTime));
			}
		}
		[DataMember]
		public int? AvailableSlots {
			get { return GetColumnValue<int?>(Columns.AvailableSlots); }
			set {
				SetColumnValue(Columns.AvailableSlots, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AvailableSlots));
			}
		}
		[DataMember]
		public string TechnicianId {
			get { return GetColumnValue<string>(Columns.TechnicianId); }
			set {
				SetColumnValue(Columns.TechnicianId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechnicianId));
			}
		}
		[DataMember]
		public bool? IsTechConfirmed {
			get { return GetColumnValue<bool?>(Columns.IsTechConfirmed); }
			set {
				SetColumnValue(Columns.IsTechConfirmed, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTechConfirmed));
			}
		}
		[DataMember]
		public DateTime? DateTechConfirmed {
			get { return GetColumnValue<DateTime?>(Columns.DateTechConfirmed); }
			set {
				SetColumnValue(Columns.DateTechConfirmed, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DateTechConfirmed));
			}
		}
		[DataMember]
		public bool? IsRed {
			get { return GetColumnValue<bool?>(Columns.IsRed); }
			set {
				SetColumnValue(Columns.IsRed, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsRed));
			}
		}
		[DataMember]
		public long? CurrentTicketId {
			get { return GetColumnValue<long?>(Columns.CurrentTicketId); }
			set {
				SetColumnValue(Columns.CurrentTicketId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CurrentTicketId));
			}
		}
		[DataMember]
		public string Color {
			get { return GetColumnValue<string>(Columns.Color); }
			set {
				SetColumnValue(Columns.Color, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Color));
			}
		}
		[DataMember]
		public bool IsBlocked {
			get { return GetColumnValue<bool>(Columns.IsBlocked); }
			set {
				SetColumnValue(Columns.IsBlocked, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsBlocked));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Block;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BlockIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BlockColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MaxRadiusColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DistanceColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StartTimeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn EndTimeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AvailableSlotsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn TechnicianIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsTechConfirmedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DateTechConfirmedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsRedColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CurrentTicketIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ColorColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsBlockedColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[20]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BlockID = @"BlockID";
			public static readonly string Block = @"Block";
			public static readonly string ZipCode = @"ZipCode";
			public static readonly string MaxRadius = @"MaxRadius";
			public static readonly string Distance = @"Distance";
			public static readonly string StartTime = @"StartTime";
			public static readonly string EndTime = @"EndTime";
			public static readonly string AvailableSlots = @"AvailableSlots";
			public static readonly string TechnicianId = @"TechnicianId";
			public static readonly string IsTechConfirmed = @"IsTechConfirmed";
			public static readonly string DateTechConfirmed = @"DateTechConfirmed";
			public static readonly string IsRed = @"IsRed";
			public static readonly string CurrentTicketId = @"CurrentTicketId";
			public static readonly string Color = @"Color";
			public static readonly string IsBlocked = @"IsBlocked";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BlockID; }
		}
		*/

		#region Foreign Collections

		private SE_ScheduleTicketCollection _SE_ScheduleTicketsCol;
		//Relationship: FK_SE_ScheduleTickets_SE_ScheduleBlocks
		public SE_ScheduleTicketCollection SE_ScheduleTicketsCol
		{
			get
			{
				if(_SE_ScheduleTicketsCol == null) {
					_SE_ScheduleTicketsCol = new SE_ScheduleTicketCollection();
					_SE_ScheduleTicketsCol.LoadAndCloseReader(SE_ScheduleTicket.Query()
						.WHERE(SE_ScheduleTicket.Columns.BlockId, BlockID).ExecuteReader());
				}
				return _SE_ScheduleTicketsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the SE_ScheduleColorIndicator class.
	/// </summary>
	[DataContract]
	public partial class SE_ScheduleColorIndicatorCollection : ActiveList<SE_ScheduleColorIndicator, SE_ScheduleColorIndicatorCollection>
	{
		public static SE_ScheduleColorIndicatorCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_ScheduleColorIndicatorCollection result = new SE_ScheduleColorIndicatorCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SE_ScheduleColorIndicator item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SE_ScheduleColorIndicators table.
	/// </summary>
	[DataContract]
	public partial class SE_ScheduleColorIndicator : ActiveRecord<SE_ScheduleColorIndicator>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SE_ScheduleColorIndicator()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SE_ScheduleColorIndicators", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarColorID = new TableSchema.TableColumn(schema);
				colvarColorID.ColumnName = "ColorID";
				colvarColorID.DataType = DbType.Int32;
				colvarColorID.MaxLength = 0;
				colvarColorID.AutoIncrement = true;
				colvarColorID.IsNullable = false;
				colvarColorID.IsPrimaryKey = true;
				colvarColorID.IsForeignKey = false;
				colvarColorID.IsReadOnly = false;
				colvarColorID.DefaultSetting = @"";
				colvarColorID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColorID);

				TableSchema.TableColumn colvarColorName = new TableSchema.TableColumn(schema);
				colvarColorName.ColumnName = "ColorName";
				colvarColorName.DataType = DbType.String;
				colvarColorName.MaxLength = 50;
				colvarColorName.AutoIncrement = false;
				colvarColorName.IsNullable = false;
				colvarColorName.IsPrimaryKey = false;
				colvarColorName.IsForeignKey = false;
				colvarColorName.IsReadOnly = false;
				colvarColorName.DefaultSetting = @"";
				colvarColorName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColorName);

				TableSchema.TableColumn colvarRGB = new TableSchema.TableColumn(schema);
				colvarRGB.ColumnName = "RGB";
				colvarRGB.DataType = DbType.Int32;
				colvarRGB.MaxLength = 0;
				colvarRGB.AutoIncrement = false;
				colvarRGB.IsNullable = false;
				colvarRGB.IsPrimaryKey = false;
				colvarRGB.IsForeignKey = false;
				colvarRGB.IsReadOnly = false;
				colvarRGB.DefaultSetting = @"";
				colvarRGB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRGB);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = false;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SE_ScheduleColorIndicators",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SE_ScheduleColorIndicator LoadFrom(SE_ScheduleColorIndicator item)
		{
			SE_ScheduleColorIndicator result = new SE_ScheduleColorIndicator();
			if (item.ColorID != default(int)) {
				result.LoadByKey(item.ColorID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ColorID {
			get { return GetColumnValue<int>(Columns.ColorID); }
			set {
				SetColumnValue(Columns.ColorID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ColorID));
			}
		}
		[DataMember]
		public string ColorName {
			get { return GetColumnValue<string>(Columns.ColorName); }
			set {
				SetColumnValue(Columns.ColorName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ColorName));
			}
		}
		[DataMember]
		public int RGB {
			get { return GetColumnValue<int>(Columns.RGB); }
			set {
				SetColumnValue(Columns.RGB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RGB));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ColorName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ColorIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ColorNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RGBColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ColorID = @"ColorID";
			public static readonly string ColorName = @"ColorName";
			public static readonly string RGB = @"RGB";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ColorID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SE_ScheduleTicket class.
	/// </summary>
	[DataContract]
	public partial class SE_ScheduleTicketCollection : ActiveList<SE_ScheduleTicket, SE_ScheduleTicketCollection>
	{
		public static SE_ScheduleTicketCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_ScheduleTicketCollection result = new SE_ScheduleTicketCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SE_ScheduleTicket item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SE_ScheduleTickets table.
	/// </summary>
	[DataContract]
	public partial class SE_ScheduleTicket : ActiveRecord<SE_ScheduleTicket>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SE_ScheduleTicket()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SE_ScheduleTickets", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarScheduleTicketID = new TableSchema.TableColumn(schema);
				colvarScheduleTicketID.ColumnName = "ScheduleTicketID";
				colvarScheduleTicketID.DataType = DbType.Int64;
				colvarScheduleTicketID.MaxLength = 0;
				colvarScheduleTicketID.AutoIncrement = true;
				colvarScheduleTicketID.IsNullable = false;
				colvarScheduleTicketID.IsPrimaryKey = true;
				colvarScheduleTicketID.IsForeignKey = false;
				colvarScheduleTicketID.IsReadOnly = false;
				colvarScheduleTicketID.DefaultSetting = @"";
				colvarScheduleTicketID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScheduleTicketID);

				TableSchema.TableColumn colvarTicketId = new TableSchema.TableColumn(schema);
				colvarTicketId.ColumnName = "TicketId";
				colvarTicketId.DataType = DbType.Int64;
				colvarTicketId.MaxLength = 0;
				colvarTicketId.AutoIncrement = false;
				colvarTicketId.IsNullable = false;
				colvarTicketId.IsPrimaryKey = false;
				colvarTicketId.IsForeignKey = true;
				colvarTicketId.IsReadOnly = false;
				colvarTicketId.DefaultSetting = @"";
				colvarTicketId.ForeignKeyTableName = "SE_Tickets";
				schema.Columns.Add(colvarTicketId);

				TableSchema.TableColumn colvarBlockId = new TableSchema.TableColumn(schema);
				colvarBlockId.ColumnName = "BlockId";
				colvarBlockId.DataType = DbType.Int64;
				colvarBlockId.MaxLength = 0;
				colvarBlockId.AutoIncrement = false;
				colvarBlockId.IsNullable = false;
				colvarBlockId.IsPrimaryKey = false;
				colvarBlockId.IsForeignKey = true;
				colvarBlockId.IsReadOnly = false;
				colvarBlockId.DefaultSetting = @"";
				colvarBlockId.ForeignKeyTableName = "SE_ScheduleBlocks";
				schema.Columns.Add(colvarBlockId);

				TableSchema.TableColumn colvarAppointmentDate = new TableSchema.TableColumn(schema);
				colvarAppointmentDate.ColumnName = "AppointmentDate";
				colvarAppointmentDate.DataType = DbType.DateTime;
				colvarAppointmentDate.MaxLength = 0;
				colvarAppointmentDate.AutoIncrement = false;
				colvarAppointmentDate.IsNullable = false;
				colvarAppointmentDate.IsPrimaryKey = false;
				colvarAppointmentDate.IsForeignKey = false;
				colvarAppointmentDate.IsReadOnly = false;
				colvarAppointmentDate.DefaultSetting = @"";
				colvarAppointmentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppointmentDate);

				TableSchema.TableColumn colvarTravelTime = new TableSchema.TableColumn(schema);
				colvarTravelTime.ColumnName = "TravelTime";
				colvarTravelTime.DataType = DbType.Int32;
				colvarTravelTime.MaxLength = 0;
				colvarTravelTime.AutoIncrement = false;
				colvarTravelTime.IsNullable = false;
				colvarTravelTime.IsPrimaryKey = false;
				colvarTravelTime.IsForeignKey = false;
				colvarTravelTime.IsReadOnly = false;
				colvarTravelTime.DefaultSetting = @"";
				colvarTravelTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTravelTime);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SE_ScheduleTickets",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SE_ScheduleTicket LoadFrom(SE_ScheduleTicket item)
		{
			SE_ScheduleTicket result = new SE_ScheduleTicket();
			if (item.ScheduleTicketID != default(long)) {
				result.LoadByKey(item.ScheduleTicketID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long ScheduleTicketID {
			get { return GetColumnValue<long>(Columns.ScheduleTicketID); }
			set {
				SetColumnValue(Columns.ScheduleTicketID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ScheduleTicketID));
			}
		}
		[DataMember]
		public long TicketId {
			get { return GetColumnValue<long>(Columns.TicketId); }
			set {
				SetColumnValue(Columns.TicketId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TicketId));
			}
		}
		[DataMember]
		public long BlockId {
			get { return GetColumnValue<long>(Columns.BlockId); }
			set {
				SetColumnValue(Columns.BlockId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BlockId));
			}
		}
		[DataMember]
		public DateTime AppointmentDate {
			get { return GetColumnValue<DateTime>(Columns.AppointmentDate); }
			set {
				SetColumnValue(Columns.AppointmentDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AppointmentDate));
			}
		}
		[DataMember]
		public int TravelTime {
			get { return GetColumnValue<int>(Columns.TravelTime); }
			set {
				SetColumnValue(Columns.TravelTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TravelTime));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private SE_ScheduleBlock _Block;
		//Relationship: FK_SE_ScheduleTickets_SE_ScheduleBlocks
		public SE_ScheduleBlock Block
		{
			get
			{
				if(_Block == null) {
					_Block = SE_ScheduleBlock.FetchByID(this.BlockId);
				}
				return _Block;
			}
			set
			{
				SetColumnValue("BlockId", value.BlockID);
				_Block = value;
			}
		}

		private SE_Ticket _Ticket;
		//Relationship: FK_SE_ScheduleTickets_SE_Tickets
		public SE_Ticket Ticket
		{
			get
			{
				if(_Ticket == null) {
					_Ticket = SE_Ticket.FetchByID(this.TicketId);
				}
				return _Ticket;
			}
			set
			{
				SetColumnValue("TicketId", value.TicketID);
				_Ticket = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ScheduleTicketID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ScheduleTicketIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TicketIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BlockIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AppointmentDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TravelTimeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ScheduleTicketID = @"ScheduleTicketID";
			public static readonly string TicketId = @"TicketId";
			public static readonly string BlockId = @"BlockId";
			public static readonly string AppointmentDate = @"AppointmentDate";
			public static readonly string TravelTime = @"TravelTime";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ScheduleTicketID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SE_TechnicianAvailability class.
	/// </summary>
	[DataContract]
	public partial class SE_TechnicianAvailabilityCollection : ActiveList<SE_TechnicianAvailability, SE_TechnicianAvailabilityCollection>
	{
		public static SE_TechnicianAvailabilityCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_TechnicianAvailabilityCollection result = new SE_TechnicianAvailabilityCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SE_TechnicianAvailability item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SE_TechnicianAvailability table.
	/// </summary>
	[DataContract]
	public partial class SE_TechnicianAvailability : ActiveRecord<SE_TechnicianAvailability>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SE_TechnicianAvailability()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SE_TechnicianAvailability", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTechnicianAvailabilityID = new TableSchema.TableColumn(schema);
				colvarTechnicianAvailabilityID.ColumnName = "TechnicianAvailabilityID";
				colvarTechnicianAvailabilityID.DataType = DbType.Int32;
				colvarTechnicianAvailabilityID.MaxLength = 0;
				colvarTechnicianAvailabilityID.AutoIncrement = true;
				colvarTechnicianAvailabilityID.IsNullable = false;
				colvarTechnicianAvailabilityID.IsPrimaryKey = true;
				colvarTechnicianAvailabilityID.IsForeignKey = false;
				colvarTechnicianAvailabilityID.IsReadOnly = false;
				colvarTechnicianAvailabilityID.DefaultSetting = @"";
				colvarTechnicianAvailabilityID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianAvailabilityID);

				TableSchema.TableColumn colvarTechnicianId = new TableSchema.TableColumn(schema);
				colvarTechnicianId.ColumnName = "TechnicianId";
				colvarTechnicianId.DataType = DbType.AnsiString;
				colvarTechnicianId.MaxLength = 20;
				colvarTechnicianId.AutoIncrement = false;
				colvarTechnicianId.IsNullable = false;
				colvarTechnicianId.IsPrimaryKey = false;
				colvarTechnicianId.IsForeignKey = false;
				colvarTechnicianId.IsReadOnly = false;
				colvarTechnicianId.DefaultSetting = @"";
				colvarTechnicianId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianId);

				TableSchema.TableColumn colvarIsTechConfirmed = new TableSchema.TableColumn(schema);
				colvarIsTechConfirmed.ColumnName = "IsTechConfirmed";
				colvarIsTechConfirmed.DataType = DbType.Boolean;
				colvarIsTechConfirmed.MaxLength = 0;
				colvarIsTechConfirmed.AutoIncrement = false;
				colvarIsTechConfirmed.IsNullable = true;
				colvarIsTechConfirmed.IsPrimaryKey = false;
				colvarIsTechConfirmed.IsForeignKey = false;
				colvarIsTechConfirmed.IsReadOnly = false;
				colvarIsTechConfirmed.DefaultSetting = @"";
				colvarIsTechConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechConfirmed);

				TableSchema.TableColumn colvarDateTechConfirmed = new TableSchema.TableColumn(schema);
				colvarDateTechConfirmed.ColumnName = "DateTechConfirmed";
				colvarDateTechConfirmed.DataType = DbType.DateTime;
				colvarDateTechConfirmed.MaxLength = 0;
				colvarDateTechConfirmed.AutoIncrement = false;
				colvarDateTechConfirmed.IsNullable = true;
				colvarDateTechConfirmed.IsPrimaryKey = false;
				colvarDateTechConfirmed.IsForeignKey = false;
				colvarDateTechConfirmed.IsReadOnly = false;
				colvarDateTechConfirmed.DefaultSetting = @"";
				colvarDateTechConfirmed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateTechConfirmed);

				TableSchema.TableColumn colvarStartDateTime = new TableSchema.TableColumn(schema);
				colvarStartDateTime.ColumnName = "StartDateTime";
				colvarStartDateTime.DataType = DbType.DateTime;
				colvarStartDateTime.MaxLength = 0;
				colvarStartDateTime.AutoIncrement = false;
				colvarStartDateTime.IsNullable = false;
				colvarStartDateTime.IsPrimaryKey = false;
				colvarStartDateTime.IsForeignKey = false;
				colvarStartDateTime.IsReadOnly = false;
				colvarStartDateTime.DefaultSetting = @"";
				colvarStartDateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDateTime);

				TableSchema.TableColumn colvarEndDateTime = new TableSchema.TableColumn(schema);
				colvarEndDateTime.ColumnName = "EndDateTime";
				colvarEndDateTime.DataType = DbType.DateTime;
				colvarEndDateTime.MaxLength = 0;
				colvarEndDateTime.AutoIncrement = false;
				colvarEndDateTime.IsNullable = false;
				colvarEndDateTime.IsPrimaryKey = false;
				colvarEndDateTime.IsForeignKey = false;
				colvarEndDateTime.IsReadOnly = false;
				colvarEndDateTime.DefaultSetting = @"";
				colvarEndDateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDateTime);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SE_TechnicianAvailability",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SE_TechnicianAvailability LoadFrom(SE_TechnicianAvailability item)
		{
			SE_TechnicianAvailability result = new SE_TechnicianAvailability();
			if (item.TechnicianAvailabilityID != default(int)) {
				result.LoadByKey(item.TechnicianAvailabilityID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TechnicianAvailabilityID {
			get { return GetColumnValue<int>(Columns.TechnicianAvailabilityID); }
			set {
				SetColumnValue(Columns.TechnicianAvailabilityID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechnicianAvailabilityID));
			}
		}
		[DataMember]
		public string TechnicianId {
			get { return GetColumnValue<string>(Columns.TechnicianId); }
			set {
				SetColumnValue(Columns.TechnicianId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechnicianId));
			}
		}
		[DataMember]
		public bool? IsTechConfirmed {
			get { return GetColumnValue<bool?>(Columns.IsTechConfirmed); }
			set {
				SetColumnValue(Columns.IsTechConfirmed, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTechConfirmed));
			}
		}
		[DataMember]
		public DateTime? DateTechConfirmed {
			get { return GetColumnValue<DateTime?>(Columns.DateTechConfirmed); }
			set {
				SetColumnValue(Columns.DateTechConfirmed, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DateTechConfirmed));
			}
		}
		[DataMember]
		public DateTime StartDateTime {
			get { return GetColumnValue<DateTime>(Columns.StartDateTime); }
			set {
				SetColumnValue(Columns.StartDateTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartDateTime));
			}
		}
		[DataMember]
		public DateTime EndDateTime {
			get { return GetColumnValue<DateTime>(Columns.EndDateTime); }
			set {
				SetColumnValue(Columns.EndDateTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EndDateTime));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return TechnicianId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TechnicianAvailabilityIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TechnicianIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsTechConfirmedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DateTechConfirmedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn StartDateTimeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn EndDateTimeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TechnicianAvailabilityID = @"TechnicianAvailabilityID";
			public static readonly string TechnicianId = @"TechnicianId";
			public static readonly string IsTechConfirmed = @"IsTechConfirmed";
			public static readonly string DateTechConfirmed = @"DateTechConfirmed";
			public static readonly string StartDateTime = @"StartDateTime";
			public static readonly string EndDateTime = @"EndDateTime";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TechnicianAvailabilityID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SE_Ticket class.
	/// </summary>
	[DataContract]
	public partial class SE_TicketCollection : ActiveList<SE_Ticket, SE_TicketCollection>
	{
		public static SE_TicketCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_TicketCollection result = new SE_TicketCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SE_Ticket item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SE_Tickets table.
	/// </summary>
	[DataContract]
	public partial class SE_Ticket : ActiveRecord<SE_Ticket>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SE_Ticket()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SE_Tickets", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTicketID = new TableSchema.TableColumn(schema);
				colvarTicketID.ColumnName = "TicketID";
				colvarTicketID.DataType = DbType.Int64;
				colvarTicketID.MaxLength = 0;
				colvarTicketID.AutoIncrement = true;
				colvarTicketID.IsNullable = false;
				colvarTicketID.IsPrimaryKey = true;
				colvarTicketID.IsForeignKey = false;
				colvarTicketID.IsReadOnly = false;
				colvarTicketID.DefaultSetting = @"";
				colvarTicketID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketID);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = false;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarMonitoringStationNo = new TableSchema.TableColumn(schema);
				colvarMonitoringStationNo.ColumnName = "MonitoringStationNo";
				colvarMonitoringStationNo.DataType = DbType.Int64;
				colvarMonitoringStationNo.MaxLength = 0;
				colvarMonitoringStationNo.AutoIncrement = false;
				colvarMonitoringStationNo.IsNullable = true;
				colvarMonitoringStationNo.IsPrimaryKey = false;
				colvarMonitoringStationNo.IsForeignKey = false;
				colvarMonitoringStationNo.IsReadOnly = false;
				colvarMonitoringStationNo.DefaultSetting = @"";
				colvarMonitoringStationNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitoringStationNo);

				TableSchema.TableColumn colvarTicketTypeId = new TableSchema.TableColumn(schema);
				colvarTicketTypeId.ColumnName = "TicketTypeId";
				colvarTicketTypeId.DataType = DbType.Int32;
				colvarTicketTypeId.MaxLength = 0;
				colvarTicketTypeId.AutoIncrement = false;
				colvarTicketTypeId.IsNullable = false;
				colvarTicketTypeId.IsPrimaryKey = false;
				colvarTicketTypeId.IsForeignKey = true;
				colvarTicketTypeId.IsReadOnly = false;
				colvarTicketTypeId.DefaultSetting = @"";
				colvarTicketTypeId.ForeignKeyTableName = "SE_TicketTypes";
				schema.Columns.Add(colvarTicketTypeId);

				TableSchema.TableColumn colvarStatusCodeId = new TableSchema.TableColumn(schema);
				colvarStatusCodeId.ColumnName = "StatusCodeId";
				colvarStatusCodeId.DataType = DbType.Int32;
				colvarStatusCodeId.MaxLength = 0;
				colvarStatusCodeId.AutoIncrement = false;
				colvarStatusCodeId.IsNullable = false;
				colvarStatusCodeId.IsPrimaryKey = false;
				colvarStatusCodeId.IsForeignKey = true;
				colvarStatusCodeId.IsReadOnly = false;
				colvarStatusCodeId.DefaultSetting = @"";
				colvarStatusCodeId.ForeignKeyTableName = "SE_TicketStatusCodes";
				schema.Columns.Add(colvarStatusCodeId);

				TableSchema.TableColumn colvarMoniConfirmation = new TableSchema.TableColumn(schema);
				colvarMoniConfirmation.ColumnName = "MoniConfirmation";
				colvarMoniConfirmation.DataType = DbType.String;
				colvarMoniConfirmation.MaxLength = 50;
				colvarMoniConfirmation.AutoIncrement = false;
				colvarMoniConfirmation.IsNullable = true;
				colvarMoniConfirmation.IsPrimaryKey = false;
				colvarMoniConfirmation.IsForeignKey = false;
				colvarMoniConfirmation.IsReadOnly = false;
				colvarMoniConfirmation.DefaultSetting = @"";
				colvarMoniConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoniConfirmation);

				TableSchema.TableColumn colvarTechnicianId = new TableSchema.TableColumn(schema);
				colvarTechnicianId.ColumnName = "TechnicianId";
				colvarTechnicianId.DataType = DbType.AnsiString;
				colvarTechnicianId.MaxLength = 20;
				colvarTechnicianId.AutoIncrement = false;
				colvarTechnicianId.IsNullable = true;
				colvarTechnicianId.IsPrimaryKey = false;
				colvarTechnicianId.IsForeignKey = false;
				colvarTechnicianId.IsReadOnly = false;
				colvarTechnicianId.DefaultSetting = @"";
				colvarTechnicianId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianId);

				TableSchema.TableColumn colvarTripCharges = new TableSchema.TableColumn(schema);
				colvarTripCharges.ColumnName = "TripCharges";
				colvarTripCharges.DataType = DbType.Currency;
				colvarTripCharges.MaxLength = 0;
				colvarTripCharges.AutoIncrement = false;
				colvarTripCharges.IsNullable = true;
				colvarTripCharges.IsPrimaryKey = false;
				colvarTripCharges.IsForeignKey = false;
				colvarTripCharges.IsReadOnly = false;
				colvarTripCharges.DefaultSetting = @"";
				colvarTripCharges.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTripCharges);

				TableSchema.TableColumn colvarAppointment = new TableSchema.TableColumn(schema);
				colvarAppointment.ColumnName = "Appointment";
				colvarAppointment.DataType = DbType.String;
				colvarAppointment.MaxLength = 50;
				colvarAppointment.AutoIncrement = false;
				colvarAppointment.IsNullable = true;
				colvarAppointment.IsPrimaryKey = false;
				colvarAppointment.IsForeignKey = false;
				colvarAppointment.IsReadOnly = false;
				colvarAppointment.DefaultSetting = @"";
				colvarAppointment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAppointment);

				TableSchema.TableColumn colvarAgentConfirmation = new TableSchema.TableColumn(schema);
				colvarAgentConfirmation.ColumnName = "AgentConfirmation";
				colvarAgentConfirmation.DataType = DbType.String;
				colvarAgentConfirmation.MaxLength = 50;
				colvarAgentConfirmation.AutoIncrement = false;
				colvarAgentConfirmation.IsNullable = true;
				colvarAgentConfirmation.IsPrimaryKey = false;
				colvarAgentConfirmation.IsForeignKey = false;
				colvarAgentConfirmation.IsReadOnly = false;
				colvarAgentConfirmation.DefaultSetting = @"";
				colvarAgentConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgentConfirmation);

				TableSchema.TableColumn colvarExpirationDate = new TableSchema.TableColumn(schema);
				colvarExpirationDate.ColumnName = "ExpirationDate";
				colvarExpirationDate.DataType = DbType.DateTime;
				colvarExpirationDate.MaxLength = 0;
				colvarExpirationDate.AutoIncrement = false;
				colvarExpirationDate.IsNullable = true;
				colvarExpirationDate.IsPrimaryKey = false;
				colvarExpirationDate.IsForeignKey = false;
				colvarExpirationDate.IsReadOnly = false;
				colvarExpirationDate.DefaultSetting = @"";
				colvarExpirationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpirationDate);

				TableSchema.TableColumn colvarNotes = new TableSchema.TableColumn(schema);
				colvarNotes.ColumnName = "Notes";
				colvarNotes.DataType = DbType.String;
				colvarNotes.MaxLength = 1000;
				colvarNotes.AutoIncrement = false;
				colvarNotes.IsNullable = true;
				colvarNotes.IsPrimaryKey = false;
				colvarNotes.IsForeignKey = false;
				colvarNotes.IsReadOnly = false;
				colvarNotes.DefaultSetting = @"";
				colvarNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotes);

				TableSchema.TableColumn colvarClosingNote = new TableSchema.TableColumn(schema);
				colvarClosingNote.ColumnName = "ClosingNote";
				colvarClosingNote.DataType = DbType.String;
				colvarClosingNote.MaxLength = 1000;
				colvarClosingNote.AutoIncrement = false;
				colvarClosingNote.IsNullable = true;
				colvarClosingNote.IsPrimaryKey = false;
				colvarClosingNote.IsForeignKey = false;
				colvarClosingNote.IsReadOnly = false;
				colvarClosingNote.DefaultSetting = @"";
				colvarClosingNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClosingNote);

				TableSchema.TableColumn colvarConfirmationNo = new TableSchema.TableColumn(schema);
				colvarConfirmationNo.ColumnName = "ConfirmationNo";
				colvarConfirmationNo.DataType = DbType.String;
				colvarConfirmationNo.MaxLength = 50;
				colvarConfirmationNo.AutoIncrement = false;
				colvarConfirmationNo.IsNullable = true;
				colvarConfirmationNo.IsPrimaryKey = false;
				colvarConfirmationNo.IsForeignKey = false;
				colvarConfirmationNo.IsReadOnly = false;
				colvarConfirmationNo.DefaultSetting = @"";
				colvarConfirmationNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConfirmationNo);

				TableSchema.TableColumn colvarIsTechEnRoute = new TableSchema.TableColumn(schema);
				colvarIsTechEnRoute.ColumnName = "IsTechEnRoute";
				colvarIsTechEnRoute.DataType = DbType.Boolean;
				colvarIsTechEnRoute.MaxLength = 0;
				colvarIsTechEnRoute.AutoIncrement = false;
				colvarIsTechEnRoute.IsNullable = false;
				colvarIsTechEnRoute.IsPrimaryKey = false;
				colvarIsTechEnRoute.IsForeignKey = false;
				colvarIsTechEnRoute.IsReadOnly = false;
				colvarIsTechEnRoute.DefaultSetting = @"((0))";
				colvarIsTechEnRoute.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechEnRoute);

				TableSchema.TableColumn colvarIsTechDelayed = new TableSchema.TableColumn(schema);
				colvarIsTechDelayed.ColumnName = "IsTechDelayed";
				colvarIsTechDelayed.DataType = DbType.Boolean;
				colvarIsTechDelayed.MaxLength = 0;
				colvarIsTechDelayed.AutoIncrement = false;
				colvarIsTechDelayed.IsNullable = false;
				colvarIsTechDelayed.IsPrimaryKey = false;
				colvarIsTechDelayed.IsForeignKey = false;
				colvarIsTechDelayed.IsReadOnly = false;
				colvarIsTechDelayed.DefaultSetting = @"((0))";
				colvarIsTechDelayed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechDelayed);

				TableSchema.TableColumn colvarIsTechCompleted = new TableSchema.TableColumn(schema);
				colvarIsTechCompleted.ColumnName = "IsTechCompleted";
				colvarIsTechCompleted.DataType = DbType.Boolean;
				colvarIsTechCompleted.MaxLength = 0;
				colvarIsTechCompleted.AutoIncrement = false;
				colvarIsTechCompleted.IsNullable = false;
				colvarIsTechCompleted.IsPrimaryKey = false;
				colvarIsTechCompleted.IsForeignKey = false;
				colvarIsTechCompleted.IsReadOnly = false;
				colvarIsTechCompleted.DefaultSetting = @"((0))";
				colvarIsTechCompleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTechCompleted);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SE_Tickets",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SE_Ticket LoadFrom(SE_Ticket item)
		{
			SE_Ticket result = new SE_Ticket();
			if (item.TicketID != default(long)) {
				result.LoadByKey(item.TicketID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long TicketID {
			get { return GetColumnValue<long>(Columns.TicketID); }
			set {
				SetColumnValue(Columns.TicketID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TicketID));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public long? MonitoringStationNo {
			get { return GetColumnValue<long?>(Columns.MonitoringStationNo); }
			set {
				SetColumnValue(Columns.MonitoringStationNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitoringStationNo));
			}
		}
		[DataMember]
		public int TicketTypeId {
			get { return GetColumnValue<int>(Columns.TicketTypeId); }
			set {
				SetColumnValue(Columns.TicketTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TicketTypeId));
			}
		}
		[DataMember]
		public int StatusCodeId {
			get { return GetColumnValue<int>(Columns.StatusCodeId); }
			set {
				SetColumnValue(Columns.StatusCodeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StatusCodeId));
			}
		}
		[DataMember]
		public string MoniConfirmation {
			get { return GetColumnValue<string>(Columns.MoniConfirmation); }
			set {
				SetColumnValue(Columns.MoniConfirmation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MoniConfirmation));
			}
		}
		[DataMember]
		public string TechnicianId {
			get { return GetColumnValue<string>(Columns.TechnicianId); }
			set {
				SetColumnValue(Columns.TechnicianId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechnicianId));
			}
		}
		[DataMember]
		public decimal? TripCharges {
			get { return GetColumnValue<decimal?>(Columns.TripCharges); }
			set {
				SetColumnValue(Columns.TripCharges, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TripCharges));
			}
		}
		[DataMember]
		public string Appointment {
			get { return GetColumnValue<string>(Columns.Appointment); }
			set {
				SetColumnValue(Columns.Appointment, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Appointment));
			}
		}
		[DataMember]
		public string AgentConfirmation {
			get { return GetColumnValue<string>(Columns.AgentConfirmation); }
			set {
				SetColumnValue(Columns.AgentConfirmation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgentConfirmation));
			}
		}
		[DataMember]
		public DateTime? ExpirationDate {
			get { return GetColumnValue<DateTime?>(Columns.ExpirationDate); }
			set {
				SetColumnValue(Columns.ExpirationDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExpirationDate));
			}
		}
		[DataMember]
		public string Notes {
			get { return GetColumnValue<string>(Columns.Notes); }
			set {
				SetColumnValue(Columns.Notes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Notes));
			}
		}
		[DataMember]
		public string ClosingNote {
			get { return GetColumnValue<string>(Columns.ClosingNote); }
			set {
				SetColumnValue(Columns.ClosingNote, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ClosingNote));
			}
		}
		[DataMember]
		public string ConfirmationNo {
			get { return GetColumnValue<string>(Columns.ConfirmationNo); }
			set {
				SetColumnValue(Columns.ConfirmationNo, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ConfirmationNo));
			}
		}
		[DataMember]
		public bool IsTechEnRoute {
			get { return GetColumnValue<bool>(Columns.IsTechEnRoute); }
			set {
				SetColumnValue(Columns.IsTechEnRoute, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTechEnRoute));
			}
		}
		[DataMember]
		public bool IsTechDelayed {
			get { return GetColumnValue<bool>(Columns.IsTechDelayed); }
			set {
				SetColumnValue(Columns.IsTechDelayed, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTechDelayed));
			}
		}
		[DataMember]
		public bool IsTechCompleted {
			get { return GetColumnValue<bool>(Columns.IsTechCompleted); }
			set {
				SetColumnValue(Columns.IsTechCompleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTechCompleted));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private SE_TicketStatusCode _StatusCode;
		//Relationship: FK_SE_Tickets_SE_TicketStatusCodes
		public SE_TicketStatusCode StatusCode
		{
			get
			{
				if(_StatusCode == null) {
					_StatusCode = SE_TicketStatusCode.FetchByID(this.StatusCodeId);
				}
				return _StatusCode;
			}
			set
			{
				SetColumnValue("StatusCodeId", value.StatusCodeID);
				_StatusCode = value;
			}
		}

		private SE_TicketType _TicketType;
		//Relationship: FK_SE_Tickets_SE_TicketTypes
		public SE_TicketType TicketType
		{
			get
			{
				if(_TicketType == null) {
					_TicketType = SE_TicketType.FetchByID(this.TicketTypeId);
				}
				return _TicketType;
			}
			set
			{
				SetColumnValue("TicketTypeId", value.TicketTypeID);
				_TicketType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TicketID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TicketIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MonitoringStationNoColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TicketTypeIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn StatusCodeIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MoniConfirmationColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TechnicianIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn TripChargesColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn AppointmentColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AgentConfirmationColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ExpirationDateColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn NotesColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ClosingNoteColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ConfirmationNoColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsTechEnRouteColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsTechDelayedColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsTechCompletedColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[22]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TicketID = @"TicketID";
			public static readonly string AccountId = @"AccountId";
			public static readonly string MonitoringStationNo = @"MonitoringStationNo";
			public static readonly string TicketTypeId = @"TicketTypeId";
			public static readonly string StatusCodeId = @"StatusCodeId";
			public static readonly string MoniConfirmation = @"MoniConfirmation";
			public static readonly string TechnicianId = @"TechnicianId";
			public static readonly string TripCharges = @"TripCharges";
			public static readonly string Appointment = @"Appointment";
			public static readonly string AgentConfirmation = @"AgentConfirmation";
			public static readonly string ExpirationDate = @"ExpirationDate";
			public static readonly string Notes = @"Notes";
			public static readonly string ClosingNote = @"ClosingNote";
			public static readonly string ConfirmationNo = @"ConfirmationNo";
			public static readonly string IsTechEnRoute = @"IsTechEnRoute";
			public static readonly string IsTechDelayed = @"IsTechDelayed";
			public static readonly string IsTechCompleted = @"IsTechCompleted";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TicketID; }
		}
		*/

		#region Foreign Collections

		private SE_ScheduleTicketCollection _SE_ScheduleTicketsCol;
		//Relationship: FK_SE_ScheduleTickets_SE_Tickets
		public SE_ScheduleTicketCollection SE_ScheduleTicketsCol
		{
			get
			{
				if(_SE_ScheduleTicketsCol == null) {
					_SE_ScheduleTicketsCol = new SE_ScheduleTicketCollection();
					_SE_ScheduleTicketsCol.LoadAndCloseReader(SE_ScheduleTicket.Query()
						.WHERE(SE_ScheduleTicket.Columns.TicketId, TicketID).ExecuteReader());
				}
				return _SE_ScheduleTicketsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the SE_TicketStatusCode class.
	/// </summary>
	[DataContract]
	public partial class SE_TicketStatusCodeCollection : ActiveList<SE_TicketStatusCode, SE_TicketStatusCodeCollection>
	{
		public static SE_TicketStatusCodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_TicketStatusCodeCollection result = new SE_TicketStatusCodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SE_TicketStatusCode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SE_TicketStatusCodes table.
	/// </summary>
	[DataContract]
	public partial class SE_TicketStatusCode : ActiveRecord<SE_TicketStatusCode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SE_TicketStatusCode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SE_TicketStatusCodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarStatusCodeID = new TableSchema.TableColumn(schema);
				colvarStatusCodeID.ColumnName = "StatusCodeID";
				colvarStatusCodeID.DataType = DbType.Int32;
				colvarStatusCodeID.MaxLength = 0;
				colvarStatusCodeID.AutoIncrement = true;
				colvarStatusCodeID.IsNullable = false;
				colvarStatusCodeID.IsPrimaryKey = true;
				colvarStatusCodeID.IsForeignKey = false;
				colvarStatusCodeID.IsReadOnly = false;
				colvarStatusCodeID.DefaultSetting = @"";
				colvarStatusCodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusCodeID);

				TableSchema.TableColumn colvarStatusCode = new TableSchema.TableColumn(schema);
				colvarStatusCode.ColumnName = "StatusCode";
				colvarStatusCode.DataType = DbType.String;
				colvarStatusCode.MaxLength = 50;
				colvarStatusCode.AutoIncrement = false;
				colvarStatusCode.IsNullable = false;
				colvarStatusCode.IsPrimaryKey = false;
				colvarStatusCode.IsForeignKey = false;
				colvarStatusCode.IsReadOnly = false;
				colvarStatusCode.DefaultSetting = @"";
				colvarStatusCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusCode);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SE_TicketStatusCodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SE_TicketStatusCode LoadFrom(SE_TicketStatusCode item)
		{
			SE_TicketStatusCode result = new SE_TicketStatusCode();
			if (item.StatusCodeID != default(int)) {
				result.LoadByKey(item.StatusCodeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int StatusCodeID {
			get { return GetColumnValue<int>(Columns.StatusCodeID); }
			set {
				SetColumnValue(Columns.StatusCodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StatusCodeID));
			}
		}
		[DataMember]
		public string StatusCode {
			get { return GetColumnValue<string>(Columns.StatusCode); }
			set {
				SetColumnValue(Columns.StatusCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StatusCode));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return StatusCode;
		}

		#region Typed Columns

		public static TableSchema.TableColumn StatusCodeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StatusCodeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string StatusCodeID = @"StatusCodeID";
			public static readonly string StatusCode = @"StatusCode";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return StatusCodeID; }
		}
		*/

		#region Foreign Collections

		private SE_TicketCollection _SE_TicketsCol;
		//Relationship: FK_SE_Tickets_SE_TicketStatusCodes
		public SE_TicketCollection SE_TicketsCol
		{
			get
			{
				if(_SE_TicketsCol == null) {
					_SE_TicketsCol = new SE_TicketCollection();
					_SE_TicketsCol.LoadAndCloseReader(SE_Ticket.Query()
						.WHERE(SE_Ticket.Columns.StatusCodeId, StatusCodeID).ExecuteReader());
				}
				return _SE_TicketsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the SE_TicketType class.
	/// </summary>
	[DataContract]
	public partial class SE_TicketTypeCollection : ActiveList<SE_TicketType, SE_TicketTypeCollection>
	{
		public static SE_TicketTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_TicketTypeCollection result = new SE_TicketTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SE_TicketType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SE_TicketTypes table.
	/// </summary>
	[DataContract]
	public partial class SE_TicketType : ActiveRecord<SE_TicketType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SE_TicketType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SE_TicketTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTicketTypeID = new TableSchema.TableColumn(schema);
				colvarTicketTypeID.ColumnName = "TicketTypeID";
				colvarTicketTypeID.DataType = DbType.Int32;
				colvarTicketTypeID.MaxLength = 0;
				colvarTicketTypeID.AutoIncrement = true;
				colvarTicketTypeID.IsNullable = false;
				colvarTicketTypeID.IsPrimaryKey = true;
				colvarTicketTypeID.IsForeignKey = false;
				colvarTicketTypeID.IsReadOnly = false;
				colvarTicketTypeID.DefaultSetting = @"";
				colvarTicketTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketTypeID);

				TableSchema.TableColumn colvarTicketTypeName = new TableSchema.TableColumn(schema);
				colvarTicketTypeName.ColumnName = "TicketTypeName";
				colvarTicketTypeName.DataType = DbType.String;
				colvarTicketTypeName.MaxLength = 50;
				colvarTicketTypeName.AutoIncrement = false;
				colvarTicketTypeName.IsNullable = false;
				colvarTicketTypeName.IsPrimaryKey = false;
				colvarTicketTypeName.IsForeignKey = false;
				colvarTicketTypeName.IsReadOnly = false;
				colvarTicketTypeName.DefaultSetting = @"";
				colvarTicketTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketTypeName);

				TableSchema.TableColumn colvarWeight = new TableSchema.TableColumn(schema);
				colvarWeight.ColumnName = "Weight";
				colvarWeight.DataType = DbType.Double;
				colvarWeight.MaxLength = 0;
				colvarWeight.AutoIncrement = false;
				colvarWeight.IsNullable = true;
				colvarWeight.IsPrimaryKey = false;
				colvarWeight.IsForeignKey = false;
				colvarWeight.IsReadOnly = false;
				colvarWeight.DefaultSetting = @"";
				colvarWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeight);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SE_TicketTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SE_TicketType LoadFrom(SE_TicketType item)
		{
			SE_TicketType result = new SE_TicketType();
			if (item.TicketTypeID != default(int)) {
				result.LoadByKey(item.TicketTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TicketTypeID {
			get { return GetColumnValue<int>(Columns.TicketTypeID); }
			set {
				SetColumnValue(Columns.TicketTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TicketTypeID));
			}
		}
		[DataMember]
		public string TicketTypeName {
			get { return GetColumnValue<string>(Columns.TicketTypeName); }
			set {
				SetColumnValue(Columns.TicketTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TicketTypeName));
			}
		}
		[DataMember]
		public double? Weight {
			get { return GetColumnValue<double?>(Columns.Weight); }
			set {
				SetColumnValue(Columns.Weight, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Weight));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return TicketTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TicketTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TicketTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn WeightColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TicketTypeID = @"TicketTypeID";
			public static readonly string TicketTypeName = @"TicketTypeName";
			public static readonly string Weight = @"Weight";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TicketTypeID; }
		}
		*/

		#region Foreign Collections

		private SE_TicketCollection _SE_TicketsCol;
		//Relationship: FK_SE_Tickets_SE_TicketTypes
		public SE_TicketCollection SE_TicketsCol
		{
			get
			{
				if(_SE_TicketsCol == null) {
					_SE_TicketsCol = new SE_TicketCollection();
					_SE_TicketsCol.LoadAndCloseReader(SE_Ticket.Query()
						.WHERE(SE_Ticket.Columns.TicketTypeId, TicketTypeID).ExecuteReader());
				}
				return _SE_TicketsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the SE_ZipCode class.
	/// </summary>
	[DataContract]
	public partial class SE_ZipCodeCollection : ActiveList<SE_ZipCode, SE_ZipCodeCollection>
	{
		public static SE_ZipCodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_ZipCodeCollection result = new SE_ZipCodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SE_ZipCode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SE_ZipCodes table.
	/// </summary>
	[DataContract]
	public partial class SE_ZipCode : ActiveRecord<SE_ZipCode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SE_ZipCode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SE_ZipCodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.String;
				colvarZipCode.MaxLength = 5;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = false;
				colvarZipCode.IsPrimaryKey = true;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarLatitude = new TableSchema.TableColumn(schema);
				colvarLatitude.ColumnName = "Latitude";
				colvarLatitude.DataType = DbType.Double;
				colvarLatitude.MaxLength = 0;
				colvarLatitude.AutoIncrement = false;
				colvarLatitude.IsNullable = false;
				colvarLatitude.IsPrimaryKey = false;
				colvarLatitude.IsForeignKey = false;
				colvarLatitude.IsReadOnly = false;
				colvarLatitude.DefaultSetting = @"";
				colvarLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLatitude);

				TableSchema.TableColumn colvarLongitude = new TableSchema.TableColumn(schema);
				colvarLongitude.ColumnName = "Longitude";
				colvarLongitude.DataType = DbType.Double;
				colvarLongitude.MaxLength = 0;
				colvarLongitude.AutoIncrement = false;
				colvarLongitude.IsNullable = false;
				colvarLongitude.IsPrimaryKey = false;
				colvarLongitude.IsForeignKey = false;
				colvarLongitude.IsReadOnly = false;
				colvarLongitude.DefaultSetting = @"";
				colvarLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLongitude);

				TableSchema.TableColumn colvarPrimaryCity = new TableSchema.TableColumn(schema);
				colvarPrimaryCity.ColumnName = "PrimaryCity";
				colvarPrimaryCity.DataType = DbType.String;
				colvarPrimaryCity.MaxLength = 50;
				colvarPrimaryCity.AutoIncrement = false;
				colvarPrimaryCity.IsNullable = true;
				colvarPrimaryCity.IsPrimaryKey = false;
				colvarPrimaryCity.IsForeignKey = false;
				colvarPrimaryCity.IsReadOnly = false;
				colvarPrimaryCity.DefaultSetting = @"";
				colvarPrimaryCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrimaryCity);

				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "State";
				colvarState.DataType = DbType.String;
				colvarState.MaxLength = 2;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = true;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				colvarState.DefaultSetting = @"";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);

				TableSchema.TableColumn colvarTimeZone = new TableSchema.TableColumn(schema);
				colvarTimeZone.ColumnName = "TimeZone";
				colvarTimeZone.DataType = DbType.Int32;
				colvarTimeZone.MaxLength = 0;
				colvarTimeZone.AutoIncrement = false;
				colvarTimeZone.IsNullable = true;
				colvarTimeZone.IsPrimaryKey = false;
				colvarTimeZone.IsForeignKey = false;
				colvarTimeZone.IsReadOnly = false;
				colvarTimeZone.DefaultSetting = @"";
				colvarTimeZone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZone);

				TableSchema.TableColumn colvarDst = new TableSchema.TableColumn(schema);
				colvarDst.ColumnName = "Dst";
				colvarDst.DataType = DbType.Boolean;
				colvarDst.MaxLength = 0;
				colvarDst.AutoIncrement = false;
				colvarDst.IsNullable = true;
				colvarDst.IsPrimaryKey = false;
				colvarDst.IsForeignKey = false;
				colvarDst.IsReadOnly = false;
				colvarDst.DefaultSetting = @"";
				colvarDst.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDst);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SE_ZipCodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SE_ZipCode LoadFrom(SE_ZipCode item)
		{
			SE_ZipCode result = new SE_ZipCode();
			if (item.ZipCode != default(string)) {
				result.LoadByKey(item.ZipCode);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set {
				SetColumnValue(Columns.ZipCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZipCode));
			}
		}
		[DataMember]
		public double Latitude {
			get { return GetColumnValue<double>(Columns.Latitude); }
			set {
				SetColumnValue(Columns.Latitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Latitude));
			}
		}
		[DataMember]
		public double Longitude {
			get { return GetColumnValue<double>(Columns.Longitude); }
			set {
				SetColumnValue(Columns.Longitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Longitude));
			}
		}
		[DataMember]
		public string PrimaryCity {
			get { return GetColumnValue<string>(Columns.PrimaryCity); }
			set {
				SetColumnValue(Columns.PrimaryCity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrimaryCity));
			}
		}
		[DataMember]
		public string State {
			get { return GetColumnValue<string>(Columns.State); }
			set {
				SetColumnValue(Columns.State, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.State));
			}
		}
		[DataMember]
		public int? TimeZone {
			get { return GetColumnValue<int?>(Columns.TimeZone); }
			set {
				SetColumnValue(Columns.TimeZone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZone));
			}
		}
		[DataMember]
		public bool? Dst {
			get { return GetColumnValue<bool?>(Columns.Dst); }
			set {
				SetColumnValue(Columns.Dst, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Dst));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ZipCode;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LatitudeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LongitudeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PrimaryCityColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn StateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TimeZoneColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DstColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ZipCode = @"ZipCode";
			public static readonly string Latitude = @"Latitude";
			public static readonly string Longitude = @"Longitude";
			public static readonly string PrimaryCity = @"PrimaryCity";
			public static readonly string State = @"State";
			public static readonly string TimeZone = @"TimeZone";
			public static readonly string Dst = @"Dst";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ZipCode; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SE_zipSheet1DELETEME class.
	/// </summary>
	[DataContract]
	public partial class SE_zipSheet1DELETEMECollection : ActiveList<SE_zipSheet1DELETEME, SE_zipSheet1DELETEMECollection>
	{
		public static SE_zipSheet1DELETEMECollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SE_zipSheet1DELETEMECollection result = new SE_zipSheet1DELETEMECollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SE_zipSheet1DELETEME item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SE_zipSheet1$DELETEME table.
	/// </summary>
	[DataContract]
	public partial class SE_zipSheet1DELETEME : ActiveRecord<SE_zipSheet1DELETEME>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SE_zipSheet1DELETEME()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SE_zipSheet1$DELETEME", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarzip = new TableSchema.TableColumn(schema);
				colvarzip.ColumnName = "zip";
				colvarzip.DataType = DbType.Double;
				colvarzip.MaxLength = 0;
				colvarzip.AutoIncrement = false;
				colvarzip.IsNullable = true;
				colvarzip.IsPrimaryKey = false;
				colvarzip.IsForeignKey = false;
				colvarzip.IsReadOnly = false;
				colvarzip.DefaultSetting = @"";
				colvarzip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarzip);

				TableSchema.TableColumn colvarlatitude = new TableSchema.TableColumn(schema);
				colvarlatitude.ColumnName = "latitude";
				colvarlatitude.DataType = DbType.Double;
				colvarlatitude.MaxLength = 0;
				colvarlatitude.AutoIncrement = false;
				colvarlatitude.IsNullable = true;
				colvarlatitude.IsPrimaryKey = false;
				colvarlatitude.IsForeignKey = false;
				colvarlatitude.IsReadOnly = false;
				colvarlatitude.DefaultSetting = @"";
				colvarlatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarlatitude);

				TableSchema.TableColumn colvarlongitude = new TableSchema.TableColumn(schema);
				colvarlongitude.ColumnName = "longitude";
				colvarlongitude.DataType = DbType.Double;
				colvarlongitude.MaxLength = 0;
				colvarlongitude.AutoIncrement = false;
				colvarlongitude.IsNullable = true;
				colvarlongitude.IsPrimaryKey = false;
				colvarlongitude.IsForeignKey = false;
				colvarlongitude.IsReadOnly = false;
				colvarlongitude.DefaultSetting = @"";
				colvarlongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarlongitude);

				TableSchema.TableColumn colvartimezone = new TableSchema.TableColumn(schema);
				colvartimezone.ColumnName = "timezone";
				colvartimezone.DataType = DbType.Double;
				colvartimezone.MaxLength = 0;
				colvartimezone.AutoIncrement = false;
				colvartimezone.IsNullable = true;
				colvartimezone.IsPrimaryKey = false;
				colvartimezone.IsForeignKey = false;
				colvartimezone.IsReadOnly = false;
				colvartimezone.DefaultSetting = @"";
				colvartimezone.ForeignKeyTableName = "";
				schema.Columns.Add(colvartimezone);

				TableSchema.TableColumn colvardst = new TableSchema.TableColumn(schema);
				colvardst.ColumnName = "dst";
				colvardst.DataType = DbType.Double;
				colvardst.MaxLength = 0;
				colvardst.AutoIncrement = false;
				colvardst.IsNullable = true;
				colvardst.IsPrimaryKey = false;
				colvardst.IsForeignKey = false;
				colvardst.IsReadOnly = false;
				colvardst.DefaultSetting = @"";
				colvardst.ForeignKeyTableName = "";
				schema.Columns.Add(colvardst);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SE_zipSheet1$DELETEME",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public double? zip {
			get { return GetColumnValue<double?>(Columns.zip); }
			set {
				SetColumnValue(Columns.zip, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.zip));
			}
		}
		[DataMember]
		public double? latitude {
			get { return GetColumnValue<double?>(Columns.latitude); }
			set {
				SetColumnValue(Columns.latitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.latitude));
			}
		}
		[DataMember]
		public double? longitude {
			get { return GetColumnValue<double?>(Columns.longitude); }
			set {
				SetColumnValue(Columns.longitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.longitude));
			}
		}
		[DataMember]
		public double? timezone {
			get { return GetColumnValue<double?>(Columns.timezone); }
			set {
				SetColumnValue(Columns.timezone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.timezone));
			}
		}
		[DataMember]
		public double? dst {
			get { return GetColumnValue<double?>(Columns.dst); }
			set {
				SetColumnValue(Columns.dst, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.dst));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return zip.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn zipColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn latitudeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn longitudeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn timezoneColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn dstColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string zip = @"zip";
			public static readonly string latitude = @"latitude";
			public static readonly string longitude = @"longitude";
			public static readonly string timezone = @"timezone";
			public static readonly string dst = @"dst";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SP_Account class.
	/// </summary>
	[DataContract]
	public partial class SP_AccountCollection : ActiveList<SP_Account, SP_AccountCollection>
	{
		public static SP_AccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SP_AccountCollection result = new SP_AccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SP_Account item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SP_Accounts table.
	/// </summary>
	[DataContract]
	public partial class SP_Account : ActiveRecord<SP_Account>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SP_Account()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SP_Accounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("SP_Accounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SP_Account LoadFrom(SP_Account item)
		{
			SP_Account result = new SP_Account();
			if (item.AccountID != default(long)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_Account _Account;
		//Relationship: FK_SP_Accounts_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountID);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountID", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the TS_Appointment class.
	/// </summary>
	[DataContract]
	public partial class TS_AppointmentCollection : ActiveList<TS_Appointment, TS_AppointmentCollection>
	{
		public static TS_AppointmentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TS_AppointmentCollection result = new TS_AppointmentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (TS_Appointment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the TS_Appointments table.
	/// </summary>
	[DataContract]
	public partial class TS_Appointment : ActiveRecord<TS_Appointment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public TS_Appointment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TS_Appointments", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int64;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = true;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = true;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarServiceTicketId = new TableSchema.TableColumn(schema);
				colvarServiceTicketId.ColumnName = "ServiceTicketId";
				colvarServiceTicketId.DataType = DbType.Int64;
				colvarServiceTicketId.MaxLength = 0;
				colvarServiceTicketId.AutoIncrement = false;
				colvarServiceTicketId.IsNullable = false;
				colvarServiceTicketId.IsPrimaryKey = false;
				colvarServiceTicketId.IsForeignKey = true;
				colvarServiceTicketId.IsReadOnly = false;
				colvarServiceTicketId.DefaultSetting = @"";
				colvarServiceTicketId.ForeignKeyTableName = "TS_ServiceTickets";
				schema.Columns.Add(colvarServiceTicketId);

				TableSchema.TableColumn colvarTechId = new TableSchema.TableColumn(schema);
				colvarTechId.ColumnName = "TechId";
				colvarTechId.DataType = DbType.Int32;
				colvarTechId.MaxLength = 0;
				colvarTechId.AutoIncrement = false;
				colvarTechId.IsNullable = false;
				colvarTechId.IsPrimaryKey = false;
				colvarTechId.IsForeignKey = true;
				colvarTechId.IsReadOnly = false;
				colvarTechId.DefaultSetting = @"";
				colvarTechId.ForeignKeyTableName = "TS_Techs";
				schema.Columns.Add(colvarTechId);

				TableSchema.TableColumn colvarStartOn = new TableSchema.TableColumn(schema);
				colvarStartOn.ColumnName = "StartOn";
				colvarStartOn.DataType = DbType.DateTime;
				colvarStartOn.MaxLength = 0;
				colvarStartOn.AutoIncrement = false;
				colvarStartOn.IsNullable = false;
				colvarStartOn.IsPrimaryKey = false;
				colvarStartOn.IsForeignKey = false;
				colvarStartOn.IsReadOnly = false;
				colvarStartOn.DefaultSetting = @"";
				colvarStartOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartOn);

				TableSchema.TableColumn colvarEndOn = new TableSchema.TableColumn(schema);
				colvarEndOn.ColumnName = "EndOn";
				colvarEndOn.DataType = DbType.DateTime;
				colvarEndOn.MaxLength = 0;
				colvarEndOn.AutoIncrement = false;
				colvarEndOn.IsNullable = false;
				colvarEndOn.IsPrimaryKey = false;
				colvarEndOn.IsForeignKey = false;
				colvarEndOn.IsReadOnly = false;
				colvarEndOn.DefaultSetting = @"";
				colvarEndOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndOn);

				TableSchema.TableColumn colvarTravelTime = new TableSchema.TableColumn(schema);
				colvarTravelTime.ColumnName = "TravelTime";
				colvarTravelTime.DataType = DbType.Int32;
				colvarTravelTime.MaxLength = 0;
				colvarTravelTime.AutoIncrement = false;
				colvarTravelTime.IsNullable = false;
				colvarTravelTime.IsPrimaryKey = false;
				colvarTravelTime.IsForeignKey = false;
				colvarTravelTime.IsReadOnly = false;
				colvarTravelTime.DefaultSetting = @"";
				colvarTravelTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTravelTime);

				TableSchema.TableColumn colvarTechEnRouteOn = new TableSchema.TableColumn(schema);
				colvarTechEnRouteOn.ColumnName = "TechEnRouteOn";
				colvarTechEnRouteOn.DataType = DbType.DateTime;
				colvarTechEnRouteOn.MaxLength = 0;
				colvarTechEnRouteOn.AutoIncrement = false;
				colvarTechEnRouteOn.IsNullable = true;
				colvarTechEnRouteOn.IsPrimaryKey = false;
				colvarTechEnRouteOn.IsForeignKey = false;
				colvarTechEnRouteOn.IsReadOnly = false;
				colvarTechEnRouteOn.DefaultSetting = @"";
				colvarTechEnRouteOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechEnRouteOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("TS_Appointments",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static TS_Appointment LoadFrom(TS_Appointment item)
		{
			TS_Appointment result = new TS_Appointment();
			if (item.ID != default(long)) {
				result.LoadByKey(item.ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long ID {
			get { return GetColumnValue<long>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public long ServiceTicketId {
			get { return GetColumnValue<long>(Columns.ServiceTicketId); }
			set {
				SetColumnValue(Columns.ServiceTicketId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServiceTicketId));
			}
		}
		[DataMember]
		public int TechId {
			get { return GetColumnValue<int>(Columns.TechId); }
			set {
				SetColumnValue(Columns.TechId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechId));
			}
		}
		[DataMember]
		public DateTime StartOn {
			get { return GetColumnValue<DateTime>(Columns.StartOn); }
			set {
				SetColumnValue(Columns.StartOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartOn));
			}
		}
		[DataMember]
		public DateTime EndOn {
			get { return GetColumnValue<DateTime>(Columns.EndOn); }
			set {
				SetColumnValue(Columns.EndOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EndOn));
			}
		}
		[DataMember]
		public int TravelTime {
			get { return GetColumnValue<int>(Columns.TravelTime); }
			set {
				SetColumnValue(Columns.TravelTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TravelTime));
			}
		}
		[DataMember]
		public DateTime? TechEnRouteOn {
			get { return GetColumnValue<DateTime?>(Columns.TechEnRouteOn); }
			set {
				SetColumnValue(Columns.TechEnRouteOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechEnRouteOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private TS_ServiceTicket _ServiceTicket;
		//Relationship: FK_TS_Appointments_TS_ServiceTickets
		public TS_ServiceTicket ServiceTicket
		{
			get
			{
				if(_ServiceTicket == null) {
					_ServiceTicket = TS_ServiceTicket.FetchByID(this.ServiceTicketId);
				}
				return _ServiceTicket;
			}
			set
			{
				SetColumnValue("ServiceTicketId", value.ID);
				_ServiceTicket = value;
			}
		}

		private TS_Tech _Tech;
		//Relationship: FK_TS_Appointments_TS_Techs
		public TS_Tech Tech
		{
			get
			{
				if(_Tech == null) {
					_Tech = TS_Tech.FetchByID(this.TechId);
				}
				return _Tech;
			}
			set
			{
				SetColumnValue("TechId", value.ID);
				_Tech = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ServiceTicketIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn TechIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn StartOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn EndOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn TravelTimeColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn TechEnRouteOnColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ID = @"ID";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ServiceTicketId = @"ServiceTicketId";
			public static readonly string TechId = @"TechId";
			public static readonly string StartOn = @"StartOn";
			public static readonly string EndOn = @"EndOn";
			public static readonly string TravelTime = @"TravelTime";
			public static readonly string TechEnRouteOn = @"TechEnRouteOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ID; }
		}
		*/

		#region Foreign Collections

		private TS_ServiceTicketCollection _TS_ServiceTicketsCol;
		//Relationship: FK_TS_ServiceTickets_TS_Appointments
		public TS_ServiceTicketCollection TS_ServiceTicketsCol
		{
			get
			{
				if(_TS_ServiceTicketsCol == null) {
					_TS_ServiceTicketsCol = new TS_ServiceTicketCollection();
					_TS_ServiceTicketsCol.LoadAndCloseReader(TS_ServiceTicket.Query()
						.WHERE(TS_ServiceTicket.Columns.CurrentAppointmentId, ID).ExecuteReader());
				}
				return _TS_ServiceTicketsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the TS_ServiceTicket class.
	/// </summary>
	[DataContract]
	public partial class TS_ServiceTicketCollection : ActiveList<TS_ServiceTicket, TS_ServiceTicketCollection>
	{
		public static TS_ServiceTicketCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TS_ServiceTicketCollection result = new TS_ServiceTicketCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (TS_ServiceTicket item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the TS_ServiceTickets table.
	/// </summary>
	[DataContract]
	public partial class TS_ServiceTicket : ActiveRecord<TS_ServiceTicket>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public TS_ServiceTicket()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TS_ServiceTickets", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int64;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = true;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = true;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarVersion = new TableSchema.TableColumn(schema);
				colvarVersion.ColumnName = "Version";
				colvarVersion.DataType = DbType.Int32;
				colvarVersion.MaxLength = 0;
				colvarVersion.AutoIncrement = false;
				colvarVersion.IsNullable = false;
				colvarVersion.IsPrimaryKey = false;
				colvarVersion.IsForeignKey = false;
				colvarVersion.IsReadOnly = false;
				colvarVersion.DefaultSetting = @"";
				colvarVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersion);

				TableSchema.TableColumn colvarServiceTypeId = new TableSchema.TableColumn(schema);
				colvarServiceTypeId.ColumnName = "ServiceTypeId";
				colvarServiceTypeId.DataType = DbType.Int32;
				colvarServiceTypeId.MaxLength = 0;
				colvarServiceTypeId.AutoIncrement = false;
				colvarServiceTypeId.IsNullable = false;
				colvarServiceTypeId.IsPrimaryKey = false;
				colvarServiceTypeId.IsForeignKey = true;
				colvarServiceTypeId.IsReadOnly = false;
				colvarServiceTypeId.DefaultSetting = @"";
				colvarServiceTypeId.ForeignKeyTableName = "TS_ServiceTypes";
				schema.Columns.Add(colvarServiceTypeId);

				TableSchema.TableColumn colvarAccountId = new TableSchema.TableColumn(schema);
				colvarAccountId.ColumnName = "AccountId";
				colvarAccountId.DataType = DbType.Int64;
				colvarAccountId.MaxLength = 0;
				colvarAccountId.AutoIncrement = false;
				colvarAccountId.IsNullable = false;
				colvarAccountId.IsPrimaryKey = false;
				colvarAccountId.IsForeignKey = true;
				colvarAccountId.IsReadOnly = false;
				colvarAccountId.DefaultSetting = @"";
				colvarAccountId.ForeignKeyTableName = "MS_Accounts";
				schema.Columns.Add(colvarAccountId);

				TableSchema.TableColumn colvarCurrentAppointmentId = new TableSchema.TableColumn(schema);
				colvarCurrentAppointmentId.ColumnName = "CurrentAppointmentId";
				colvarCurrentAppointmentId.DataType = DbType.Int64;
				colvarCurrentAppointmentId.MaxLength = 0;
				colvarCurrentAppointmentId.AutoIncrement = false;
				colvarCurrentAppointmentId.IsNullable = true;
				colvarCurrentAppointmentId.IsPrimaryKey = false;
				colvarCurrentAppointmentId.IsForeignKey = true;
				colvarCurrentAppointmentId.IsReadOnly = false;
				colvarCurrentAppointmentId.DefaultSetting = @"";
				colvarCurrentAppointmentId.ForeignKeyTableName = "TS_Appointments";
				schema.Columns.Add(colvarCurrentAppointmentId);

				TableSchema.TableColumn colvarNotes = new TableSchema.TableColumn(schema);
				colvarNotes.ColumnName = "Notes";
				colvarNotes.DataType = DbType.String;
				colvarNotes.MaxLength = 1000;
				colvarNotes.AutoIncrement = false;
				colvarNotes.IsNullable = true;
				colvarNotes.IsPrimaryKey = false;
				colvarNotes.IsForeignKey = false;
				colvarNotes.IsReadOnly = false;
				colvarNotes.DefaultSetting = @"";
				colvarNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotes);

				TableSchema.TableColumn colvarCompletedNote = new TableSchema.TableColumn(schema);
				colvarCompletedNote.ColumnName = "CompletedNote";
				colvarCompletedNote.DataType = DbType.String;
				colvarCompletedNote.MaxLength = 1000;
				colvarCompletedNote.AutoIncrement = false;
				colvarCompletedNote.IsNullable = true;
				colvarCompletedNote.IsPrimaryKey = false;
				colvarCompletedNote.IsForeignKey = false;
				colvarCompletedNote.IsReadOnly = false;
				colvarCompletedNote.DefaultSetting = @"";
				colvarCompletedNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompletedNote);

				TableSchema.TableColumn colvarCompletedOn = new TableSchema.TableColumn(schema);
				colvarCompletedOn.ColumnName = "CompletedOn";
				colvarCompletedOn.DataType = DbType.DateTime;
				colvarCompletedOn.MaxLength = 0;
				colvarCompletedOn.AutoIncrement = false;
				colvarCompletedOn.IsNullable = true;
				colvarCompletedOn.IsPrimaryKey = false;
				colvarCompletedOn.IsForeignKey = false;
				colvarCompletedOn.IsReadOnly = false;
				colvarCompletedOn.DefaultSetting = @"";
				colvarCompletedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompletedOn);

				TableSchema.TableColumn colvarMSTicketNum = new TableSchema.TableColumn(schema);
				colvarMSTicketNum.ColumnName = "MSTicketNum";
				colvarMSTicketNum.DataType = DbType.Int64;
				colvarMSTicketNum.MaxLength = 0;
				colvarMSTicketNum.AutoIncrement = false;
				colvarMSTicketNum.IsNullable = true;
				colvarMSTicketNum.IsPrimaryKey = false;
				colvarMSTicketNum.IsForeignKey = false;
				colvarMSTicketNum.IsReadOnly = false;
				colvarMSTicketNum.DefaultSetting = @"";
				colvarMSTicketNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMSTicketNum);

				TableSchema.TableColumn colvarMSConfirmation = new TableSchema.TableColumn(schema);
				colvarMSConfirmation.ColumnName = "MSConfirmation";
				colvarMSConfirmation.DataType = DbType.String;
				colvarMSConfirmation.MaxLength = 50;
				colvarMSConfirmation.AutoIncrement = false;
				colvarMSConfirmation.IsNullable = true;
				colvarMSConfirmation.IsPrimaryKey = false;
				colvarMSConfirmation.IsForeignKey = false;
				colvarMSConfirmation.IsReadOnly = false;
				colvarMSConfirmation.DefaultSetting = @"";
				colvarMSConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMSConfirmation);

				TableSchema.TableColumn colvarDealerConfirmation = new TableSchema.TableColumn(schema);
				colvarDealerConfirmation.ColumnName = "DealerConfirmation";
				colvarDealerConfirmation.DataType = DbType.String;
				colvarDealerConfirmation.MaxLength = 50;
				colvarDealerConfirmation.AutoIncrement = false;
				colvarDealerConfirmation.IsNullable = true;
				colvarDealerConfirmation.IsPrimaryKey = false;
				colvarDealerConfirmation.IsForeignKey = false;
				colvarDealerConfirmation.IsReadOnly = false;
				colvarDealerConfirmation.DefaultSetting = @"";
				colvarDealerConfirmation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerConfirmation);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("TS_ServiceTickets",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static TS_ServiceTicket LoadFrom(TS_ServiceTicket item)
		{
			TS_ServiceTicket result = new TS_ServiceTicket();
			if (item.ID != default(long)) {
				result.LoadByKey(item.ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long ID {
			get { return GetColumnValue<long>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public int Version {
			get { return GetColumnValue<int>(Columns.Version); }
			set {
				SetColumnValue(Columns.Version, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Version));
			}
		}
		[DataMember]
		public int ServiceTypeId {
			get { return GetColumnValue<int>(Columns.ServiceTypeId); }
			set {
				SetColumnValue(Columns.ServiceTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServiceTypeId));
			}
		}
		[DataMember]
		public long AccountId {
			get { return GetColumnValue<long>(Columns.AccountId); }
			set {
				SetColumnValue(Columns.AccountId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountId));
			}
		}
		[DataMember]
		public long? CurrentAppointmentId {
			get { return GetColumnValue<long?>(Columns.CurrentAppointmentId); }
			set {
				SetColumnValue(Columns.CurrentAppointmentId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CurrentAppointmentId));
			}
		}
		[DataMember]
		public string Notes {
			get { return GetColumnValue<string>(Columns.Notes); }
			set {
				SetColumnValue(Columns.Notes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Notes));
			}
		}
		[DataMember]
		public string CompletedNote {
			get { return GetColumnValue<string>(Columns.CompletedNote); }
			set {
				SetColumnValue(Columns.CompletedNote, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CompletedNote));
			}
		}
		[DataMember]
		public DateTime? CompletedOn {
			get { return GetColumnValue<DateTime?>(Columns.CompletedOn); }
			set {
				SetColumnValue(Columns.CompletedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CompletedOn));
			}
		}
		[DataMember]
		public long? MSTicketNum {
			get { return GetColumnValue<long?>(Columns.MSTicketNum); }
			set {
				SetColumnValue(Columns.MSTicketNum, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MSTicketNum));
			}
		}
		[DataMember]
		public string MSConfirmation {
			get { return GetColumnValue<string>(Columns.MSConfirmation); }
			set {
				SetColumnValue(Columns.MSConfirmation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MSConfirmation));
			}
		}
		[DataMember]
		public string DealerConfirmation {
			get { return GetColumnValue<string>(Columns.DealerConfirmation); }
			set {
				SetColumnValue(Columns.DealerConfirmation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerConfirmation));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MS_Account _Account;
		//Relationship: FK_TS_ServiceTickets_MS_Accounts
		public MS_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MS_Account.FetchByID(this.AccountId);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountId", value.AccountID);
				_Account = value;
			}
		}

		private TS_Appointment _CurrentAppointment;
		//Relationship: FK_TS_ServiceTickets_TS_Appointments
		public TS_Appointment CurrentAppointment
		{
			get
			{
				if(_CurrentAppointment == null) {
					_CurrentAppointment = TS_Appointment.FetchByID(this.CurrentAppointmentId);
				}
				return _CurrentAppointment;
			}
			set
			{
				SetColumnValue("CurrentAppointmentId", value.ID);
				_CurrentAppointment = value;
			}
		}

		private TS_ServiceType _ServiceType;
		//Relationship: FK_TS_ServiceTickets_TS_ServiceTypes
		public TS_ServiceType ServiceType
		{
			get
			{
				if(_ServiceType == null) {
					_ServiceType = TS_ServiceType.FetchByID(this.ServiceTypeId);
				}
				return _ServiceType;
			}
			set
			{
				SetColumnValue("ServiceTypeId", value.ID);
				_ServiceType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn VersionColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ServiceTypeIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn AccountIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CurrentAppointmentIdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn NotesColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CompletedNoteColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CompletedOnColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn MSTicketNumColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn MSConfirmationColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DealerConfirmationColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ID = @"ID";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string Version = @"Version";
			public static readonly string ServiceTypeId = @"ServiceTypeId";
			public static readonly string AccountId = @"AccountId";
			public static readonly string CurrentAppointmentId = @"CurrentAppointmentId";
			public static readonly string Notes = @"Notes";
			public static readonly string CompletedNote = @"CompletedNote";
			public static readonly string CompletedOn = @"CompletedOn";
			public static readonly string MSTicketNum = @"MSTicketNum";
			public static readonly string MSConfirmation = @"MSConfirmation";
			public static readonly string DealerConfirmation = @"DealerConfirmation";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ID; }
		}
		*/

		#region Foreign Collections

		private TS_AppointmentCollection _TS_AppointmentsCol;
		//Relationship: FK_TS_Appointments_TS_ServiceTickets
		public TS_AppointmentCollection TS_AppointmentsCol
		{
			get
			{
				if(_TS_AppointmentsCol == null) {
					_TS_AppointmentsCol = new TS_AppointmentCollection();
					_TS_AppointmentsCol.LoadAndCloseReader(TS_Appointment.Query()
						.WHERE(TS_Appointment.Columns.ServiceTicketId, ID).ExecuteReader());
				}
				return _TS_AppointmentsCol;
			}
		}

		private TS_ServiceTicketSkills_MapCollection _TS_ServiceTicketSkills_MapsCol;
		//Relationship: FK_TS_ServiceTicketSkills_Map_TS_ServiceTickets
		public TS_ServiceTicketSkills_MapCollection TS_ServiceTicketSkills_MapsCol
		{
			get
			{
				if(_TS_ServiceTicketSkills_MapsCol == null) {
					_TS_ServiceTicketSkills_MapsCol = new TS_ServiceTicketSkills_MapCollection();
					_TS_ServiceTicketSkills_MapsCol.LoadAndCloseReader(TS_ServiceTicketSkills_Map.Query()
						.WHERE(TS_ServiceTicketSkills_Map.Columns.ServiceTicketId, ID).ExecuteReader());
				}
				return _TS_ServiceTicketSkills_MapsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the TS_ServiceTicketSkills_Map class.
	/// </summary>
	[DataContract]
	public partial class TS_ServiceTicketSkills_MapCollection : ActiveList<TS_ServiceTicketSkills_Map, TS_ServiceTicketSkills_MapCollection>
	{
		public static TS_ServiceTicketSkills_MapCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TS_ServiceTicketSkills_MapCollection result = new TS_ServiceTicketSkills_MapCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (TS_ServiceTicketSkills_Map item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the TS_ServiceTicketSkills_Map table.
	/// </summary>
	[DataContract]
	public partial class TS_ServiceTicketSkills_Map : ActiveRecord<TS_ServiceTicketSkills_Map>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public TS_ServiceTicketSkills_Map()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TS_ServiceTicketSkills_Map", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSkillId = new TableSchema.TableColumn(schema);
				colvarSkillId.ColumnName = "SkillId";
				colvarSkillId.DataType = DbType.Int32;
				colvarSkillId.MaxLength = 0;
				colvarSkillId.AutoIncrement = false;
				colvarSkillId.IsNullable = false;
				colvarSkillId.IsPrimaryKey = true;
				colvarSkillId.IsForeignKey = false;
				colvarSkillId.IsReadOnly = false;
				colvarSkillId.DefaultSetting = @"";
				colvarSkillId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSkillId);

				TableSchema.TableColumn colvarServiceTicketId = new TableSchema.TableColumn(schema);
				colvarServiceTicketId.ColumnName = "ServiceTicketId";
				colvarServiceTicketId.DataType = DbType.Int64;
				colvarServiceTicketId.MaxLength = 0;
				colvarServiceTicketId.AutoIncrement = false;
				colvarServiceTicketId.IsNullable = false;
				colvarServiceTicketId.IsPrimaryKey = false;
				colvarServiceTicketId.IsForeignKey = true;
				colvarServiceTicketId.IsReadOnly = false;
				colvarServiceTicketId.DefaultSetting = @"";
				colvarServiceTicketId.ForeignKeyTableName = "TS_ServiceTickets";
				schema.Columns.Add(colvarServiceTicketId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("TS_ServiceTicketSkills_Map",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static TS_ServiceTicketSkills_Map LoadFrom(TS_ServiceTicketSkills_Map item)
		{
			TS_ServiceTicketSkills_Map result = new TS_ServiceTicketSkills_Map();
			if (item.SkillId != default(int)) {
				result.LoadByKey(item.SkillId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SkillId {
			get { return GetColumnValue<int>(Columns.SkillId); }
			set {
				SetColumnValue(Columns.SkillId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SkillId));
			}
		}
		[DataMember]
		public long ServiceTicketId {
			get { return GetColumnValue<long>(Columns.ServiceTicketId); }
			set {
				SetColumnValue(Columns.ServiceTicketId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServiceTicketId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private TS_ServiceTicket _ServiceTicket;
		//Relationship: FK_TS_ServiceTicketSkills_Map_TS_ServiceTickets
		public TS_ServiceTicket ServiceTicket
		{
			get
			{
				if(_ServiceTicket == null) {
					_ServiceTicket = TS_ServiceTicket.FetchByID(this.ServiceTicketId);
				}
				return _ServiceTicket;
			}
			set
			{
				SetColumnValue("ServiceTicketId", value.ID);
				_ServiceTicket = value;
			}
		}

		private TS_Skill _Skill;
		//Relationship: FK_TS_ServiceTicketSkills_Map_TS_Skills
		public TS_Skill Skill
		{
			get
			{
				if(_Skill == null) {
					_Skill = TS_Skill.FetchByID(this.SkillId);
				}
				return _Skill;
			}
			set
			{
				SetColumnValue("SkillId", value.ID);
				_Skill = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SkillId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SkillIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ServiceTicketIdColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SkillId = @"SkillId";
			public static readonly string ServiceTicketId = @"ServiceTicketId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SkillId; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the TS_ServiceType class.
	/// </summary>
	[DataContract]
	public partial class TS_ServiceTypeCollection : ActiveList<TS_ServiceType, TS_ServiceTypeCollection>
	{
		public static TS_ServiceTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TS_ServiceTypeCollection result = new TS_ServiceTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (TS_ServiceType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the TS_ServiceTypes table.
	/// </summary>
	[DataContract]
	public partial class TS_ServiceType : ActiveRecord<TS_ServiceType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum Enum : int
		{
			[EnumMember()] Service = 1,
			[EnumMember()] Pull = 2,
			[EnumMember()] System_Move = 3,
			[EnumMember()] Upgrade = 4,
			[EnumMember()] Offline = 5,
			[EnumMember()] Property_Damage = 6,
			[EnumMember()] New_Install = 7,
			[EnumMember()] Phone_Line = 8,
			[EnumMember()] Comm_Failure = 9,
			[EnumMember()] Automation_Trouble = 10,
			[EnumMember()] Service_Level_1 = 11,
			[EnumMember()] Service_Level_2 = 12,
			[EnumMember()] Service_Level_3 = 14,
			[EnumMember()] Service_Level_4 = 15,
		}

		//[DataMember]
		//public Enum Code
		//{
		//	get { return (Enum)ID; }
		//	set { ID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public TS_ServiceType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TS_ServiceTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int32;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = false;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = true;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarWeight = new TableSchema.TableColumn(schema);
				colvarWeight.ColumnName = "Weight";
				colvarWeight.DataType = DbType.Int32;
				colvarWeight.MaxLength = 0;
				colvarWeight.AutoIncrement = false;
				colvarWeight.IsNullable = false;
				colvarWeight.IsPrimaryKey = false;
				colvarWeight.IsForeignKey = false;
				colvarWeight.IsReadOnly = false;
				colvarWeight.DefaultSetting = @"";
				colvarWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeight);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("TS_ServiceTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static TS_ServiceType LoadFrom(TS_ServiceType item)
		{
			TS_ServiceType result = new TS_ServiceType();
			if (item.ID != default(int)) {
				result.LoadByKey(item.ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ID {
			get { return GetColumnValue<int>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public int Weight {
			get { return GetColumnValue<int>(Columns.Weight); }
			set {
				SetColumnValue(Columns.Weight, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Weight));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn WeightColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ID = @"ID";
			public static readonly string Name = @"Name";
			public static readonly string Weight = @"Weight";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ID; }
		}
		*/

		#region Foreign Collections

		private TS_ServiceTicketCollection _TS_ServiceTicketsCol;
		//Relationship: FK_TS_ServiceTickets_TS_ServiceTypes
		public TS_ServiceTicketCollection TS_ServiceTicketsCol
		{
			get
			{
				if(_TS_ServiceTicketsCol == null) {
					_TS_ServiceTicketsCol = new TS_ServiceTicketCollection();
					_TS_ServiceTicketsCol.LoadAndCloseReader(TS_ServiceTicket.Query()
						.WHERE(TS_ServiceTicket.Columns.ServiceTypeId, ID).ExecuteReader());
				}
				return _TS_ServiceTicketsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the TS_Skill class.
	/// </summary>
	[DataContract]
	public partial class TS_SkillCollection : ActiveList<TS_Skill, TS_SkillCollection>
	{
		public static TS_SkillCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TS_SkillCollection result = new TS_SkillCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (TS_Skill item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the TS_Skills table.
	/// </summary>
	[DataContract]
	public partial class TS_Skill : ActiveRecord<TS_Skill>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public TS_Skill()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TS_Skills", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int32;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = false;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = true;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarPanelTypeId = new TableSchema.TableColumn(schema);
				colvarPanelTypeId.ColumnName = "PanelTypeId";
				colvarPanelTypeId.DataType = DbType.AnsiString;
				colvarPanelTypeId.MaxLength = 20;
				colvarPanelTypeId.AutoIncrement = false;
				colvarPanelTypeId.IsNullable = true;
				colvarPanelTypeId.IsPrimaryKey = false;
				colvarPanelTypeId.IsForeignKey = false;
				colvarPanelTypeId.IsReadOnly = false;
				colvarPanelTypeId.DefaultSetting = @"";
				colvarPanelTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPanelTypeId);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("TS_Skills",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static TS_Skill LoadFrom(TS_Skill item)
		{
			TS_Skill result = new TS_Skill();
			if (item.ID != default(int)) {
				result.LoadByKey(item.ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ID {
			get { return GetColumnValue<int>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public string PanelTypeId {
			get { return GetColumnValue<string>(Columns.PanelTypeId); }
			set {
				SetColumnValue(Columns.PanelTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PanelTypeId));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PanelTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ID = @"ID";
			public static readonly string Name = @"Name";
			public static readonly string PanelTypeId = @"PanelTypeId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ID; }
		}
		*/

		#region Foreign Collections

		private TS_ServiceTicketSkills_MapCollection _TS_ServiceTicketSkills_MapsCol;
		//Relationship: FK_TS_ServiceTicketSkills_Map_TS_Skills
		public TS_ServiceTicketSkills_MapCollection TS_ServiceTicketSkills_MapsCol
		{
			get
			{
				if(_TS_ServiceTicketSkills_MapsCol == null) {
					_TS_ServiceTicketSkills_MapsCol = new TS_ServiceTicketSkills_MapCollection();
					_TS_ServiceTicketSkills_MapsCol.LoadAndCloseReader(TS_ServiceTicketSkills_Map.Query()
						.WHERE(TS_ServiceTicketSkills_Map.Columns.SkillId, ID).ExecuteReader());
				}
				return _TS_ServiceTicketSkills_MapsCol;
			}
		}

		private TS_TechSkills_MapCollection _TS_TechSkills_MapsCol;
		//Relationship: FK_TS_TechSkills_Map_TS_Skills
		public TS_TechSkills_MapCollection TS_TechSkills_MapsCol
		{
			get
			{
				if(_TS_TechSkills_MapsCol == null) {
					_TS_TechSkills_MapsCol = new TS_TechSkills_MapCollection();
					_TS_TechSkills_MapsCol.LoadAndCloseReader(TS_TechSkills_Map.Query()
						.WHERE(TS_TechSkills_Map.Columns.SkillId, ID).ExecuteReader());
				}
				return _TS_TechSkills_MapsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the TS_StatusCode class.
	/// </summary>
	[DataContract]
	public partial class TS_StatusCodeCollection : ActiveList<TS_StatusCode, TS_StatusCodeCollection>
	{
		public static TS_StatusCodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TS_StatusCodeCollection result = new TS_StatusCodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (TS_StatusCode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the TS_StatusCodes table.
	/// </summary>
	[DataContract]
	public partial class TS_StatusCode : ActiveRecord<TS_StatusCode>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum Enum : int
		{
			[EnumMember()] Open = 1,
			[EnumMember()] Scheduled = 2,
			[EnumMember()] Over_Due = 3,
			[EnumMember()] Tech_Confirmed = 4,
			[EnumMember()] Completed = 5,
			[EnumMember()] Pending_Contractor_ = 6,
			[EnumMember()] Waiting_Change_FormSIF_ = 7,
		}

		//[DataMember]
		//public Enum Code
		//{
		//	get { return (Enum)ID; }
		//	set { ID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public TS_StatusCode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TS_StatusCodes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int32;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = false;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = true;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("TS_StatusCodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static TS_StatusCode LoadFrom(TS_StatusCode item)
		{
			TS_StatusCode result = new TS_StatusCode();
			if (item.ID != default(int)) {
				result.LoadByKey(item.ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ID {
			get { return GetColumnValue<int>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ID = @"ID";
			public static readonly string Name = @"Name";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the TS_Tech class.
	/// </summary>
	[DataContract]
	public partial class TS_TechCollection : ActiveList<TS_Tech, TS_TechCollection>
	{
		public static TS_TechCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TS_TechCollection result = new TS_TechCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (TS_Tech item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the TS_Techs table.
	/// </summary>
	[DataContract]
	public partial class TS_Tech : ActiveRecord<TS_Tech>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public TS_Tech()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TS_Techs", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int32;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = true;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = true;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarVersion = new TableSchema.TableColumn(schema);
				colvarVersion.ColumnName = "Version";
				colvarVersion.DataType = DbType.Int32;
				colvarVersion.MaxLength = 0;
				colvarVersion.AutoIncrement = false;
				colvarVersion.IsNullable = false;
				colvarVersion.IsPrimaryKey = false;
				colvarVersion.IsForeignKey = false;
				colvarVersion.IsReadOnly = false;
				colvarVersion.DefaultSetting = @"";
				colvarVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersion);

				TableSchema.TableColumn colvarRecruitId = new TableSchema.TableColumn(schema);
				colvarRecruitId.ColumnName = "RecruitId";
				colvarRecruitId.DataType = DbType.Int32;
				colvarRecruitId.MaxLength = 0;
				colvarRecruitId.AutoIncrement = false;
				colvarRecruitId.IsNullable = false;
				colvarRecruitId.IsPrimaryKey = false;
				colvarRecruitId.IsForeignKey = false;
				colvarRecruitId.IsReadOnly = false;
				colvarRecruitId.DefaultSetting = @"";
				colvarRecruitId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitId);

				TableSchema.TableColumn colvarStartLocation = new TableSchema.TableColumn(schema);
				colvarStartLocation.ColumnName = "StartLocation";
				colvarStartLocation.DataType = DbType.String;
				colvarStartLocation.MaxLength = 512;
				colvarStartLocation.AutoIncrement = false;
				colvarStartLocation.IsNullable = true;
				colvarStartLocation.IsPrimaryKey = false;
				colvarStartLocation.IsForeignKey = false;
				colvarStartLocation.IsReadOnly = false;
				colvarStartLocation.DefaultSetting = @"";
				colvarStartLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartLocation);

				TableSchema.TableColumn colvarStartLocLatitude = new TableSchema.TableColumn(schema);
				colvarStartLocLatitude.ColumnName = "StartLocLatitude";
				colvarStartLocLatitude.DataType = DbType.Double;
				colvarStartLocLatitude.MaxLength = 0;
				colvarStartLocLatitude.AutoIncrement = false;
				colvarStartLocLatitude.IsNullable = true;
				colvarStartLocLatitude.IsPrimaryKey = false;
				colvarStartLocLatitude.IsForeignKey = false;
				colvarStartLocLatitude.IsReadOnly = false;
				colvarStartLocLatitude.DefaultSetting = @"";
				colvarStartLocLatitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartLocLatitude);

				TableSchema.TableColumn colvarStartLocLongitude = new TableSchema.TableColumn(schema);
				colvarStartLocLongitude.ColumnName = "StartLocLongitude";
				colvarStartLocLongitude.DataType = DbType.Double;
				colvarStartLocLongitude.MaxLength = 0;
				colvarStartLocLongitude.AutoIncrement = false;
				colvarStartLocLongitude.IsNullable = true;
				colvarStartLocLongitude.IsPrimaryKey = false;
				colvarStartLocLongitude.IsForeignKey = false;
				colvarStartLocLongitude.IsReadOnly = false;
				colvarStartLocLongitude.DefaultSetting = @"";
				colvarStartLocLongitude.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartLocLongitude);

				TableSchema.TableColumn colvarMaxRadius = new TableSchema.TableColumn(schema);
				colvarMaxRadius.ColumnName = "MaxRadius";
				colvarMaxRadius.DataType = DbType.Int32;
				colvarMaxRadius.MaxLength = 0;
				colvarMaxRadius.AutoIncrement = false;
				colvarMaxRadius.IsNullable = false;
				colvarMaxRadius.IsPrimaryKey = false;
				colvarMaxRadius.IsForeignKey = false;
				colvarMaxRadius.IsReadOnly = false;
				colvarMaxRadius.DefaultSetting = @"";
				colvarMaxRadius.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxRadius);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("TS_Techs",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static TS_Tech LoadFrom(TS_Tech item)
		{
			TS_Tech result = new TS_Tech();
			if (item.ID != default(int)) {
				result.LoadByKey(item.ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ID {
			get { return GetColumnValue<int>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public int Version {
			get { return GetColumnValue<int>(Columns.Version); }
			set {
				SetColumnValue(Columns.Version, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Version));
			}
		}
		[DataMember]
		public int RecruitId {
			get { return GetColumnValue<int>(Columns.RecruitId); }
			set {
				SetColumnValue(Columns.RecruitId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitId));
			}
		}
		[DataMember]
		public string StartLocation {
			get { return GetColumnValue<string>(Columns.StartLocation); }
			set {
				SetColumnValue(Columns.StartLocation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartLocation));
			}
		}
		[DataMember]
		public double? StartLocLatitude {
			get { return GetColumnValue<double?>(Columns.StartLocLatitude); }
			set {
				SetColumnValue(Columns.StartLocLatitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartLocLatitude));
			}
		}
		[DataMember]
		public double? StartLocLongitude {
			get { return GetColumnValue<double?>(Columns.StartLocLongitude); }
			set {
				SetColumnValue(Columns.StartLocLongitude, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartLocLongitude));
			}
		}
		[DataMember]
		public int MaxRadius {
			get { return GetColumnValue<int>(Columns.MaxRadius); }
			set {
				SetColumnValue(Columns.MaxRadius, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxRadius));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn VersionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RecruitIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn StartLocationColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn StartLocLatitudeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StartLocLongitudeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MaxRadiusColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ID = @"ID";
			public static readonly string Version = @"Version";
			public static readonly string RecruitId = @"RecruitId";
			public static readonly string StartLocation = @"StartLocation";
			public static readonly string StartLocLatitude = @"StartLocLatitude";
			public static readonly string StartLocLongitude = @"StartLocLongitude";
			public static readonly string MaxRadius = @"MaxRadius";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ID; }
		}
		*/

		#region Foreign Collections

		private TS_AppointmentCollection _TS_AppointmentsCol;
		//Relationship: FK_TS_Appointments_TS_Techs
		public TS_AppointmentCollection TS_AppointmentsCol
		{
			get
			{
				if(_TS_AppointmentsCol == null) {
					_TS_AppointmentsCol = new TS_AppointmentCollection();
					_TS_AppointmentsCol.LoadAndCloseReader(TS_Appointment.Query()
						.WHERE(TS_Appointment.Columns.TechId, ID).ExecuteReader());
				}
				return _TS_AppointmentsCol;
			}
		}

		private TS_TechSkills_MapCollection _TS_TechSkills_MapsCol;
		//Relationship: FK_TS_TechSkills_Map_TS_Techs
		public TS_TechSkills_MapCollection TS_TechSkills_MapsCol
		{
			get
			{
				if(_TS_TechSkills_MapsCol == null) {
					_TS_TechSkills_MapsCol = new TS_TechSkills_MapCollection();
					_TS_TechSkills_MapsCol.LoadAndCloseReader(TS_TechSkills_Map.Query()
						.WHERE(TS_TechSkills_Map.Columns.TechId, ID).ExecuteReader());
				}
				return _TS_TechSkills_MapsCol;
			}
		}

		private TS_TechWeekDayCollection _TS_TechWeekDaysCol;
		//Relationship: FK_TS_TechWeekDays_TS_Techs
		public TS_TechWeekDayCollection TS_TechWeekDaysCol
		{
			get
			{
				if(_TS_TechWeekDaysCol == null) {
					_TS_TechWeekDaysCol = new TS_TechWeekDayCollection();
					_TS_TechWeekDaysCol.LoadAndCloseReader(TS_TechWeekDay.Query()
						.WHERE(TS_TechWeekDay.Columns.TechId, ID).ExecuteReader());
				}
				return _TS_TechWeekDaysCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the TS_TechSkills_Map class.
	/// </summary>
	[DataContract]
	public partial class TS_TechSkills_MapCollection : ActiveList<TS_TechSkills_Map, TS_TechSkills_MapCollection>
	{
		public static TS_TechSkills_MapCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TS_TechSkills_MapCollection result = new TS_TechSkills_MapCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (TS_TechSkills_Map item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the TS_TechSkills_Map table.
	/// </summary>
	[DataContract]
	public partial class TS_TechSkills_Map : ActiveRecord<TS_TechSkills_Map>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public TS_TechSkills_Map()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TS_TechSkills_Map", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSkillId = new TableSchema.TableColumn(schema);
				colvarSkillId.ColumnName = "SkillId";
				colvarSkillId.DataType = DbType.Int32;
				colvarSkillId.MaxLength = 0;
				colvarSkillId.AutoIncrement = false;
				colvarSkillId.IsNullable = false;
				colvarSkillId.IsPrimaryKey = true;
				colvarSkillId.IsForeignKey = false;
				colvarSkillId.IsReadOnly = false;
				colvarSkillId.DefaultSetting = @"";
				colvarSkillId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSkillId);

				TableSchema.TableColumn colvarTechId = new TableSchema.TableColumn(schema);
				colvarTechId.ColumnName = "TechId";
				colvarTechId.DataType = DbType.Int32;
				colvarTechId.MaxLength = 0;
				colvarTechId.AutoIncrement = false;
				colvarTechId.IsNullable = false;
				colvarTechId.IsPrimaryKey = false;
				colvarTechId.IsForeignKey = true;
				colvarTechId.IsReadOnly = false;
				colvarTechId.DefaultSetting = @"";
				colvarTechId.ForeignKeyTableName = "TS_Techs";
				schema.Columns.Add(colvarTechId);

				TableSchema.TableColumn colvarOther = new TableSchema.TableColumn(schema);
				colvarOther.ColumnName = "Other";
				colvarOther.DataType = DbType.String;
				colvarOther.MaxLength = 50;
				colvarOther.AutoIncrement = false;
				colvarOther.IsNullable = true;
				colvarOther.IsPrimaryKey = false;
				colvarOther.IsForeignKey = false;
				colvarOther.IsReadOnly = false;
				colvarOther.DefaultSetting = @"";
				colvarOther.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOther);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("TS_TechSkills_Map",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static TS_TechSkills_Map LoadFrom(TS_TechSkills_Map item)
		{
			TS_TechSkills_Map result = new TS_TechSkills_Map();
			if (item.SkillId != default(int)) {
				result.LoadByKey(item.SkillId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SkillId {
			get { return GetColumnValue<int>(Columns.SkillId); }
			set {
				SetColumnValue(Columns.SkillId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SkillId));
			}
		}
		[DataMember]
		public int TechId {
			get { return GetColumnValue<int>(Columns.TechId); }
			set {
				SetColumnValue(Columns.TechId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechId));
			}
		}
		[DataMember]
		public string Other {
			get { return GetColumnValue<string>(Columns.Other); }
			set {
				SetColumnValue(Columns.Other, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Other));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private TS_Skill _Skill;
		//Relationship: FK_TS_TechSkills_Map_TS_Skills
		public TS_Skill Skill
		{
			get
			{
				if(_Skill == null) {
					_Skill = TS_Skill.FetchByID(this.SkillId);
				}
				return _Skill;
			}
			set
			{
				SetColumnValue("SkillId", value.ID);
				_Skill = value;
			}
		}

		private TS_Tech _Tech;
		//Relationship: FK_TS_TechSkills_Map_TS_Techs
		public TS_Tech Tech
		{
			get
			{
				if(_Tech == null) {
					_Tech = TS_Tech.FetchByID(this.TechId);
				}
				return _Tech;
			}
			set
			{
				SetColumnValue("TechId", value.ID);
				_Tech = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SkillId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SkillIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TechIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn OtherColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SkillId = @"SkillId";
			public static readonly string TechId = @"TechId";
			public static readonly string Other = @"Other";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SkillId; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the TS_TechWeekDay class.
	/// </summary>
	[DataContract]
	public partial class TS_TechWeekDayCollection : ActiveList<TS_TechWeekDay, TS_TechWeekDayCollection>
	{
		public static TS_TechWeekDayCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TS_TechWeekDayCollection result = new TS_TechWeekDayCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (TS_TechWeekDay item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the TS_TechWeekDays table.
	/// </summary>
	[DataContract]
	public partial class TS_TechWeekDay : ActiveRecord<TS_TechWeekDay>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public TS_TechWeekDay()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TS_TechWeekDays", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int32;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = true;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = true;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarTechId = new TableSchema.TableColumn(schema);
				colvarTechId.ColumnName = "TechId";
				colvarTechId.DataType = DbType.Int32;
				colvarTechId.MaxLength = 0;
				colvarTechId.AutoIncrement = false;
				colvarTechId.IsNullable = false;
				colvarTechId.IsPrimaryKey = false;
				colvarTechId.IsForeignKey = true;
				colvarTechId.IsReadOnly = false;
				colvarTechId.DefaultSetting = @"";
				colvarTechId.ForeignKeyTableName = "TS_Techs";
				schema.Columns.Add(colvarTechId);

				TableSchema.TableColumn colvarVersion = new TableSchema.TableColumn(schema);
				colvarVersion.ColumnName = "Version";
				colvarVersion.DataType = DbType.Int32;
				colvarVersion.MaxLength = 0;
				colvarVersion.AutoIncrement = false;
				colvarVersion.IsNullable = false;
				colvarVersion.IsPrimaryKey = false;
				colvarVersion.IsForeignKey = false;
				colvarVersion.IsReadOnly = false;
				colvarVersion.DefaultSetting = @"";
				colvarVersion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersion);

				TableSchema.TableColumn colvarWeekDay = new TableSchema.TableColumn(schema);
				colvarWeekDay.ColumnName = "WeekDay";
				colvarWeekDay.DataType = DbType.Int32;
				colvarWeekDay.MaxLength = 0;
				colvarWeekDay.AutoIncrement = false;
				colvarWeekDay.IsNullable = false;
				colvarWeekDay.IsPrimaryKey = false;
				colvarWeekDay.IsForeignKey = false;
				colvarWeekDay.IsReadOnly = false;
				colvarWeekDay.DefaultSetting = @"";
				colvarWeekDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeekDay);

				TableSchema.TableColumn colvarStartTime = new TableSchema.TableColumn(schema);
				colvarStartTime.ColumnName = "StartTime";
				colvarStartTime.DataType = DbType.DateTime;
				colvarStartTime.MaxLength = 0;
				colvarStartTime.AutoIncrement = false;
				colvarStartTime.IsNullable = true;
				colvarStartTime.IsPrimaryKey = false;
				colvarStartTime.IsForeignKey = false;
				colvarStartTime.IsReadOnly = false;
				colvarStartTime.DefaultSetting = @"";
				colvarStartTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartTime);

				TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
				colvarEndTime.ColumnName = "EndTime";
				colvarEndTime.DataType = DbType.DateTime;
				colvarEndTime.MaxLength = 0;
				colvarEndTime.AutoIncrement = false;
				colvarEndTime.IsNullable = true;
				colvarEndTime.IsPrimaryKey = false;
				colvarEndTime.IsForeignKey = false;
				colvarEndTime.IsReadOnly = false;
				colvarEndTime.DefaultSetting = @"";
				colvarEndTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndTime);

				TableSchema.TableColumn colvarSameDayReserved = new TableSchema.TableColumn(schema);
				colvarSameDayReserved.ColumnName = "SameDayReserved";
				colvarSameDayReserved.DataType = DbType.Boolean;
				colvarSameDayReserved.MaxLength = 0;
				colvarSameDayReserved.AutoIncrement = false;
				colvarSameDayReserved.IsNullable = false;
				colvarSameDayReserved.IsPrimaryKey = false;
				colvarSameDayReserved.IsForeignKey = false;
				colvarSameDayReserved.IsReadOnly = false;
				colvarSameDayReserved.DefaultSetting = @"";
				colvarSameDayReserved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSameDayReserved);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("TS_TechWeekDays",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static TS_TechWeekDay LoadFrom(TS_TechWeekDay item)
		{
			TS_TechWeekDay result = new TS_TechWeekDay();
			if (item.ID != default(int)) {
				result.LoadByKey(item.ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ID {
			get { return GetColumnValue<int>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public int TechId {
			get { return GetColumnValue<int>(Columns.TechId); }
			set {
				SetColumnValue(Columns.TechId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechId));
			}
		}
		[DataMember]
		public int Version {
			get { return GetColumnValue<int>(Columns.Version); }
			set {
				SetColumnValue(Columns.Version, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Version));
			}
		}
		[DataMember]
		public int WeekDay {
			get { return GetColumnValue<int>(Columns.WeekDay); }
			set {
				SetColumnValue(Columns.WeekDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WeekDay));
			}
		}
		[DataMember]
		public DateTime? StartTime {
			get { return GetColumnValue<DateTime?>(Columns.StartTime); }
			set {
				SetColumnValue(Columns.StartTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartTime));
			}
		}
		[DataMember]
		public DateTime? EndTime {
			get { return GetColumnValue<DateTime?>(Columns.EndTime); }
			set {
				SetColumnValue(Columns.EndTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EndTime));
			}
		}
		[DataMember]
		public bool SameDayReserved {
			get { return GetColumnValue<bool>(Columns.SameDayReserved); }
			set {
				SetColumnValue(Columns.SameDayReserved, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SameDayReserved));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private TS_Tech _Tech;
		//Relationship: FK_TS_TechWeekDays_TS_Techs
		public TS_Tech Tech
		{
			get
			{
				if(_Tech == null) {
					_Tech = TS_Tech.FetchByID(this.TechId);
				}
				return _Tech;
			}
			set
			{
				SetColumnValue("TechId", value.ID);
				_Tech = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TechIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn VersionColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn WeekDayColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn StartTimeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn EndTimeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SameDayReservedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ID = @"ID";
			public static readonly string TechId = @"TechId";
			public static readonly string Version = @"Version";
			public static readonly string WeekDay = @"WeekDay";
			public static readonly string StartTime = @"StartTime";
			public static readonly string EndTime = @"EndTime";
			public static readonly string SameDayReserved = @"SameDayReserved";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the UI_Action class.
	/// </summary>
	[DataContract]
	public partial class UI_ActionCollection : ActiveList<UI_Action, UI_ActionCollection>
	{
		public static UI_ActionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_ActionCollection result = new UI_ActionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_Action item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_Actions table.
	/// </summary>
	[DataContract]
	public partial class UI_Action : ActiveRecord<UI_Action>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_Action()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_Actions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarActionID = new TableSchema.TableColumn(schema);
				colvarActionID.ColumnName = "ActionID";
				colvarActionID.DataType = DbType.Int32;
				colvarActionID.MaxLength = 0;
				colvarActionID.AutoIncrement = true;
				colvarActionID.IsNullable = false;
				colvarActionID.IsPrimaryKey = true;
				colvarActionID.IsForeignKey = false;
				colvarActionID.IsReadOnly = false;
				colvarActionID.DefaultSetting = @"";
				colvarActionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActionID);

				TableSchema.TableColumn colvarActionName = new TableSchema.TableColumn(schema);
				colvarActionName.ColumnName = "ActionName";
				colvarActionName.DataType = DbType.String;
				colvarActionName.MaxLength = 50;
				colvarActionName.AutoIncrement = false;
				colvarActionName.IsNullable = false;
				colvarActionName.IsPrimaryKey = false;
				colvarActionName.IsForeignKey = false;
				colvarActionName.IsReadOnly = false;
				colvarActionName.DefaultSetting = @"";
				colvarActionName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActionName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_Actions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_Action LoadFrom(UI_Action item)
		{
			UI_Action result = new UI_Action();
			if (item.ActionID != default(int)) {
				result.LoadByKey(item.ActionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ActionID {
			get { return GetColumnValue<int>(Columns.ActionID); }
			set {
				SetColumnValue(Columns.ActionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActionID));
			}
		}
		[DataMember]
		public string ActionName {
			get { return GetColumnValue<string>(Columns.ActionName); }
			set {
				SetColumnValue(Columns.ActionName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActionName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ActionName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ActionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ActionNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ActionID = @"ActionID";
			public static readonly string ActionName = @"ActionName";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ActionID; }
		}
		*/

		#region Foreign Collections

		private UI_MenuItemCollection _UI_MenuItemsCol;
		//Relationship: FK_UI_MenuItems_UI_Actions
		public UI_MenuItemCollection UI_MenuItemsCol
		{
			get
			{
				if(_UI_MenuItemsCol == null) {
					_UI_MenuItemsCol = new UI_MenuItemCollection();
					_UI_MenuItemsCol.LoadAndCloseReader(UI_MenuItem.Query()
						.WHERE(UI_MenuItem.Columns.ActionId, ActionID).ExecuteReader());
				}
				return _UI_MenuItemsCol;
			}
		}

		private UI_MessageActionCollection _UI_MessageActionsCol;
		//Relationship: FK_UI_MessageActions_UI_Actions
		public UI_MessageActionCollection UI_MessageActionsCol
		{
			get
			{
				if(_UI_MessageActionsCol == null) {
					_UI_MessageActionsCol = new UI_MessageActionCollection();
					_UI_MessageActionsCol.LoadAndCloseReader(UI_MessageAction.Query()
						.WHERE(UI_MessageAction.Columns.ActionID, ActionID).ExecuteReader());
				}
				return _UI_MessageActionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the UI_ApplicationPermission class.
	/// </summary>
	[DataContract]
	public partial class UI_ApplicationPermissionCollection : ActiveList<UI_ApplicationPermission, UI_ApplicationPermissionCollection>
	{
		public static UI_ApplicationPermissionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_ApplicationPermissionCollection result = new UI_ApplicationPermissionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_ApplicationPermission item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_ApplicationPermissions table.
	/// </summary>
	[DataContract]
	public partial class UI_ApplicationPermission : ActiveRecord<UI_ApplicationPermission>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_ApplicationPermission()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_ApplicationPermissions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarApplicationPermissionID = new TableSchema.TableColumn(schema);
				colvarApplicationPermissionID.ColumnName = "ApplicationPermissionID";
				colvarApplicationPermissionID.DataType = DbType.Int32;
				colvarApplicationPermissionID.MaxLength = 0;
				colvarApplicationPermissionID.AutoIncrement = true;
				colvarApplicationPermissionID.IsNullable = false;
				colvarApplicationPermissionID.IsPrimaryKey = true;
				colvarApplicationPermissionID.IsForeignKey = false;
				colvarApplicationPermissionID.IsReadOnly = false;
				colvarApplicationPermissionID.DefaultSetting = @"";
				colvarApplicationPermissionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationPermissionID);

				TableSchema.TableColumn colvarApplicationId = new TableSchema.TableColumn(schema);
				colvarApplicationId.ColumnName = "ApplicationId";
				colvarApplicationId.DataType = DbType.Int32;
				colvarApplicationId.MaxLength = 0;
				colvarApplicationId.AutoIncrement = false;
				colvarApplicationId.IsNullable = false;
				colvarApplicationId.IsPrimaryKey = false;
				colvarApplicationId.IsForeignKey = true;
				colvarApplicationId.IsReadOnly = false;
				colvarApplicationId.DefaultSetting = @"";
				colvarApplicationId.ForeignKeyTableName = "UI_Applications";
				schema.Columns.Add(colvarApplicationId);

				TableSchema.TableColumn colvarPermissionTypeId = new TableSchema.TableColumn(schema);
				colvarPermissionTypeId.ColumnName = "PermissionTypeId";
				colvarPermissionTypeId.DataType = DbType.Int32;
				colvarPermissionTypeId.MaxLength = 0;
				colvarPermissionTypeId.AutoIncrement = false;
				colvarPermissionTypeId.IsNullable = true;
				colvarPermissionTypeId.IsPrimaryKey = false;
				colvarPermissionTypeId.IsForeignKey = true;
				colvarPermissionTypeId.IsReadOnly = false;
				colvarPermissionTypeId.DefaultSetting = @"";
				colvarPermissionTypeId.ForeignKeyTableName = "UI_PermissionTypes";
				schema.Columns.Add(colvarPermissionTypeId);

				TableSchema.TableColumn colvarPrincipalName = new TableSchema.TableColumn(schema);
				colvarPrincipalName.ColumnName = "PrincipalName";
				colvarPrincipalName.DataType = DbType.String;
				colvarPrincipalName.MaxLength = 100;
				colvarPrincipalName.AutoIncrement = false;
				colvarPrincipalName.IsNullable = false;
				colvarPrincipalName.IsPrimaryKey = false;
				colvarPrincipalName.IsForeignKey = false;
				colvarPrincipalName.IsReadOnly = false;
				colvarPrincipalName.DefaultSetting = @"";
				colvarPrincipalName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrincipalName);

				TableSchema.TableColumn colvarAllowAccess = new TableSchema.TableColumn(schema);
				colvarAllowAccess.ColumnName = "AllowAccess";
				colvarAllowAccess.DataType = DbType.Boolean;
				colvarAllowAccess.MaxLength = 0;
				colvarAllowAccess.AutoIncrement = false;
				colvarAllowAccess.IsNullable = false;
				colvarAllowAccess.IsPrimaryKey = false;
				colvarAllowAccess.IsForeignKey = false;
				colvarAllowAccess.IsReadOnly = false;
				colvarAllowAccess.DefaultSetting = @"";
				colvarAllowAccess.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowAccess);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_ApplicationPermissions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_ApplicationPermission LoadFrom(UI_ApplicationPermission item)
		{
			UI_ApplicationPermission result = new UI_ApplicationPermission();
			if (item.ApplicationPermissionID != default(int)) {
				result.LoadByKey(item.ApplicationPermissionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ApplicationPermissionID {
			get { return GetColumnValue<int>(Columns.ApplicationPermissionID); }
			set {
				SetColumnValue(Columns.ApplicationPermissionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApplicationPermissionID));
			}
		}
		[DataMember]
		public int ApplicationId {
			get { return GetColumnValue<int>(Columns.ApplicationId); }
			set {
				SetColumnValue(Columns.ApplicationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApplicationId));
			}
		}
		[DataMember]
		public int? PermissionTypeId {
			get { return GetColumnValue<int?>(Columns.PermissionTypeId); }
			set {
				SetColumnValue(Columns.PermissionTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PermissionTypeId));
			}
		}
		[DataMember]
		public string PrincipalName {
			get { return GetColumnValue<string>(Columns.PrincipalName); }
			set {
				SetColumnValue(Columns.PrincipalName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrincipalName));
			}
		}
		[DataMember]
		public bool AllowAccess {
			get { return GetColumnValue<bool>(Columns.AllowAccess); }
			set {
				SetColumnValue(Columns.AllowAccess, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AllowAccess));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private UI_Application _Application;
		//Relationship: FK_UI_ApplicationPermissions_UI_Applications
		public UI_Application Application
		{
			get
			{
				if(_Application == null) {
					_Application = UI_Application.FetchByID(this.ApplicationId);
				}
				return _Application;
			}
			set
			{
				SetColumnValue("ApplicationId", value.ApplicationID);
				_Application = value;
			}
		}

		private UI_PermissionType _PermissionType;
		//Relationship: FK_UI_ApplicationPermissions_UI_PermissionTypes
		public UI_PermissionType PermissionType
		{
			get
			{
				if(_PermissionType == null) {
					_PermissionType = UI_PermissionType.FetchByID(this.PermissionTypeId);
				}
				return _PermissionType;
			}
			set
			{
				SetColumnValue("PermissionTypeId", value.PermissionTypeID);
				_PermissionType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ApplicationPermissionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ApplicationPermissionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApplicationIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PermissionTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PrincipalNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AllowAccessColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ApplicationPermissionID = @"ApplicationPermissionID";
			public static readonly string ApplicationId = @"ApplicationId";
			public static readonly string PermissionTypeId = @"PermissionTypeId";
			public static readonly string PrincipalName = @"PrincipalName";
			public static readonly string AllowAccess = @"AllowAccess";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ApplicationPermissionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the UI_Application class.
	/// </summary>
	[DataContract]
	public partial class UI_ApplicationCollection : ActiveList<UI_Application, UI_ApplicationCollection>
	{
		public static UI_ApplicationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_ApplicationCollection result = new UI_ApplicationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_Application item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_Applications table.
	/// </summary>
	[DataContract]
	public partial class UI_Application : ActiveRecord<UI_Application>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_Application()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_Applications", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarApplicationID = new TableSchema.TableColumn(schema);
				colvarApplicationID.ColumnName = "ApplicationID";
				colvarApplicationID.DataType = DbType.Int32;
				colvarApplicationID.MaxLength = 0;
				colvarApplicationID.AutoIncrement = true;
				colvarApplicationID.IsNullable = false;
				colvarApplicationID.IsPrimaryKey = true;
				colvarApplicationID.IsForeignKey = false;
				colvarApplicationID.IsReadOnly = false;
				colvarApplicationID.DefaultSetting = @"";
				colvarApplicationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationID);

				TableSchema.TableColumn colvarIconFileId = new TableSchema.TableColumn(schema);
				colvarIconFileId.ColumnName = "IconFileId";
				colvarIconFileId.DataType = DbType.Int32;
				colvarIconFileId.MaxLength = 0;
				colvarIconFileId.AutoIncrement = false;
				colvarIconFileId.IsNullable = true;
				colvarIconFileId.IsPrimaryKey = false;
				colvarIconFileId.IsForeignKey = false;
				colvarIconFileId.IsReadOnly = false;
				colvarIconFileId.DefaultSetting = @"";
				colvarIconFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIconFileId);

				TableSchema.TableColumn colvarSmallIconFileId = new TableSchema.TableColumn(schema);
				colvarSmallIconFileId.ColumnName = "SmallIconFileId";
				colvarSmallIconFileId.DataType = DbType.Int32;
				colvarSmallIconFileId.MaxLength = 0;
				colvarSmallIconFileId.AutoIncrement = false;
				colvarSmallIconFileId.IsNullable = true;
				colvarSmallIconFileId.IsPrimaryKey = false;
				colvarSmallIconFileId.IsForeignKey = false;
				colvarSmallIconFileId.IsReadOnly = false;
				colvarSmallIconFileId.DefaultSetting = @"";
				colvarSmallIconFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSmallIconFileId);

				TableSchema.TableColumn colvarApplicationName = new TableSchema.TableColumn(schema);
				colvarApplicationName.ColumnName = "ApplicationName";
				colvarApplicationName.DataType = DbType.String;
				colvarApplicationName.MaxLength = 255;
				colvarApplicationName.AutoIncrement = false;
				colvarApplicationName.IsNullable = false;
				colvarApplicationName.IsPrimaryKey = false;
				colvarApplicationName.IsForeignKey = false;
				colvarApplicationName.IsReadOnly = false;
				colvarApplicationName.DefaultSetting = @"";
				colvarApplicationName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationName);

				TableSchema.TableColumn colvarFriendlyName = new TableSchema.TableColumn(schema);
				colvarFriendlyName.ColumnName = "FriendlyName";
				colvarFriendlyName.DataType = DbType.String;
				colvarFriendlyName.MaxLength = 100;
				colvarFriendlyName.AutoIncrement = false;
				colvarFriendlyName.IsNullable = false;
				colvarFriendlyName.IsPrimaryKey = false;
				colvarFriendlyName.IsForeignKey = false;
				colvarFriendlyName.IsReadOnly = false;
				colvarFriendlyName.DefaultSetting = @"";
				colvarFriendlyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFriendlyName);

				TableSchema.TableColumn colvarExecutableFileName = new TableSchema.TableColumn(schema);
				colvarExecutableFileName.ColumnName = "ExecutableFileName";
				colvarExecutableFileName.DataType = DbType.String;
				colvarExecutableFileName.MaxLength = 255;
				colvarExecutableFileName.AutoIncrement = false;
				colvarExecutableFileName.IsNullable = false;
				colvarExecutableFileName.IsPrimaryKey = false;
				colvarExecutableFileName.IsForeignKey = false;
				colvarExecutableFileName.IsReadOnly = false;
				colvarExecutableFileName.DefaultSetting = @"";
				colvarExecutableFileName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExecutableFileName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_Applications",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_Application LoadFrom(UI_Application item)
		{
			UI_Application result = new UI_Application();
			if (item.ApplicationID != default(int)) {
				result.LoadByKey(item.ApplicationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ApplicationID {
			get { return GetColumnValue<int>(Columns.ApplicationID); }
			set {
				SetColumnValue(Columns.ApplicationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApplicationID));
			}
		}
		[DataMember]
		public int? IconFileId {
			get { return GetColumnValue<int?>(Columns.IconFileId); }
			set {
				SetColumnValue(Columns.IconFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IconFileId));
			}
		}
		[DataMember]
		public int? SmallIconFileId {
			get { return GetColumnValue<int?>(Columns.SmallIconFileId); }
			set {
				SetColumnValue(Columns.SmallIconFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SmallIconFileId));
			}
		}
		[DataMember]
		public string ApplicationName {
			get { return GetColumnValue<string>(Columns.ApplicationName); }
			set {
				SetColumnValue(Columns.ApplicationName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApplicationName));
			}
		}
		[DataMember]
		public string FriendlyName {
			get { return GetColumnValue<string>(Columns.FriendlyName); }
			set {
				SetColumnValue(Columns.FriendlyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FriendlyName));
			}
		}
		[DataMember]
		public string ExecutableFileName {
			get { return GetColumnValue<string>(Columns.ExecutableFileName); }
			set {
				SetColumnValue(Columns.ExecutableFileName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExecutableFileName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ApplicationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ApplicationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IconFileIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SmallIconFileIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ApplicationNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn FriendlyNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ExecutableFileNameColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ApplicationID = @"ApplicationID";
			public static readonly string IconFileId = @"IconFileId";
			public static readonly string SmallIconFileId = @"SmallIconFileId";
			public static readonly string ApplicationName = @"ApplicationName";
			public static readonly string FriendlyName = @"FriendlyName";
			public static readonly string ExecutableFileName = @"ExecutableFileName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ApplicationID; }
		}
		*/

		#region Foreign Collections

		private UI_ApplicationPermissionCollection _UI_ApplicationPermissionsCol;
		//Relationship: FK_UI_ApplicationPermissions_UI_Applications
		public UI_ApplicationPermissionCollection UI_ApplicationPermissionsCol
		{
			get
			{
				if(_UI_ApplicationPermissionsCol == null) {
					_UI_ApplicationPermissionsCol = new UI_ApplicationPermissionCollection();
					_UI_ApplicationPermissionsCol.LoadAndCloseReader(UI_ApplicationPermission.Query()
						.WHERE(UI_ApplicationPermission.Columns.ApplicationId, ApplicationID).ExecuteReader());
				}
				return _UI_ApplicationPermissionsCol;
			}
		}

		private UI_ApplicationVersionCollection _UI_ApplicationVersionsCol;
		//Relationship: FK_UI_ApplicationVersions_UI_Applications
		public UI_ApplicationVersionCollection UI_ApplicationVersionsCol
		{
			get
			{
				if(_UI_ApplicationVersionsCol == null) {
					_UI_ApplicationVersionsCol = new UI_ApplicationVersionCollection();
					_UI_ApplicationVersionsCol.LoadAndCloseReader(UI_ApplicationVersion.Query()
						.WHERE(UI_ApplicationVersion.Columns.ApplicationId, ApplicationID).ExecuteReader());
				}
				return _UI_ApplicationVersionsCol;
			}
		}

		private UI_UserSettingsContainerCollection _UI_UserSettingsContainersCol;
		//Relationship: FK_UI_UserSettingsContainers_UI_Applications
		public UI_UserSettingsContainerCollection UI_UserSettingsContainersCol
		{
			get
			{
				if(_UI_UserSettingsContainersCol == null) {
					_UI_UserSettingsContainersCol = new UI_UserSettingsContainerCollection();
					_UI_UserSettingsContainersCol.LoadAndCloseReader(UI_UserSettingsContainer.Query()
						.WHERE(UI_UserSettingsContainer.Columns.ApplicationID, ApplicationID).ExecuteReader());
				}
				return _UI_UserSettingsContainersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the UI_ApplicationVersion class.
	/// </summary>
	[DataContract]
	public partial class UI_ApplicationVersionCollection : ActiveList<UI_ApplicationVersion, UI_ApplicationVersionCollection>
	{
		public static UI_ApplicationVersionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_ApplicationVersionCollection result = new UI_ApplicationVersionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_ApplicationVersion item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_ApplicationVersions table.
	/// </summary>
	[DataContract]
	public partial class UI_ApplicationVersion : ActiveRecord<UI_ApplicationVersion>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_ApplicationVersion()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_ApplicationVersions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarApplicationVersionID = new TableSchema.TableColumn(schema);
				colvarApplicationVersionID.ColumnName = "ApplicationVersionID";
				colvarApplicationVersionID.DataType = DbType.Int32;
				colvarApplicationVersionID.MaxLength = 0;
				colvarApplicationVersionID.AutoIncrement = true;
				colvarApplicationVersionID.IsNullable = false;
				colvarApplicationVersionID.IsPrimaryKey = true;
				colvarApplicationVersionID.IsForeignKey = false;
				colvarApplicationVersionID.IsReadOnly = false;
				colvarApplicationVersionID.DefaultSetting = @"";
				colvarApplicationVersionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationVersionID);

				TableSchema.TableColumn colvarApplicationId = new TableSchema.TableColumn(schema);
				colvarApplicationId.ColumnName = "ApplicationId";
				colvarApplicationId.DataType = DbType.Int32;
				colvarApplicationId.MaxLength = 0;
				colvarApplicationId.AutoIncrement = false;
				colvarApplicationId.IsNullable = false;
				colvarApplicationId.IsPrimaryKey = false;
				colvarApplicationId.IsForeignKey = true;
				colvarApplicationId.IsReadOnly = false;
				colvarApplicationId.DefaultSetting = @"";
				colvarApplicationId.ForeignKeyTableName = "UI_Applications";
				schema.Columns.Add(colvarApplicationId);

				TableSchema.TableColumn colvarDeployedFileId = new TableSchema.TableColumn(schema);
				colvarDeployedFileId.ColumnName = "DeployedFileId";
				colvarDeployedFileId.DataType = DbType.Int32;
				colvarDeployedFileId.MaxLength = 0;
				colvarDeployedFileId.AutoIncrement = false;
				colvarDeployedFileId.IsNullable = false;
				colvarDeployedFileId.IsPrimaryKey = false;
				colvarDeployedFileId.IsForeignKey = false;
				colvarDeployedFileId.IsReadOnly = false;
				colvarDeployedFileId.DefaultSetting = @"";
				colvarDeployedFileId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeployedFileId);

				TableSchema.TableColumn colvarMajorVersionNumber = new TableSchema.TableColumn(schema);
				colvarMajorVersionNumber.ColumnName = "MajorVersionNumber";
				colvarMajorVersionNumber.DataType = DbType.Int32;
				colvarMajorVersionNumber.MaxLength = 0;
				colvarMajorVersionNumber.AutoIncrement = false;
				colvarMajorVersionNumber.IsNullable = false;
				colvarMajorVersionNumber.IsPrimaryKey = false;
				colvarMajorVersionNumber.IsForeignKey = false;
				colvarMajorVersionNumber.IsReadOnly = false;
				colvarMajorVersionNumber.DefaultSetting = @"";
				colvarMajorVersionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMajorVersionNumber);

				TableSchema.TableColumn colvarMinorVersionNumber = new TableSchema.TableColumn(schema);
				colvarMinorVersionNumber.ColumnName = "MinorVersionNumber";
				colvarMinorVersionNumber.DataType = DbType.Int32;
				colvarMinorVersionNumber.MaxLength = 0;
				colvarMinorVersionNumber.AutoIncrement = false;
				colvarMinorVersionNumber.IsNullable = false;
				colvarMinorVersionNumber.IsPrimaryKey = false;
				colvarMinorVersionNumber.IsForeignKey = false;
				colvarMinorVersionNumber.IsReadOnly = false;
				colvarMinorVersionNumber.DefaultSetting = @"";
				colvarMinorVersionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinorVersionNumber);

				TableSchema.TableColumn colvarBuildNumber = new TableSchema.TableColumn(schema);
				colvarBuildNumber.ColumnName = "BuildNumber";
				colvarBuildNumber.DataType = DbType.Int32;
				colvarBuildNumber.MaxLength = 0;
				colvarBuildNumber.AutoIncrement = false;
				colvarBuildNumber.IsNullable = false;
				colvarBuildNumber.IsPrimaryKey = false;
				colvarBuildNumber.IsForeignKey = false;
				colvarBuildNumber.IsReadOnly = false;
				colvarBuildNumber.DefaultSetting = @"";
				colvarBuildNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBuildNumber);

				TableSchema.TableColumn colvarRevisionNumber = new TableSchema.TableColumn(schema);
				colvarRevisionNumber.ColumnName = "RevisionNumber";
				colvarRevisionNumber.DataType = DbType.AnsiString;
				colvarRevisionNumber.MaxLength = 43;
				colvarRevisionNumber.AutoIncrement = false;
				colvarRevisionNumber.IsNullable = true;
				colvarRevisionNumber.IsPrimaryKey = false;
				colvarRevisionNumber.IsForeignKey = false;
				colvarRevisionNumber.IsReadOnly = false;
				colvarRevisionNumber.DefaultSetting = @"";
				colvarRevisionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRevisionNumber);

				TableSchema.TableColumn colvarVersionNumber = new TableSchema.TableColumn(schema);
				colvarVersionNumber.ColumnName = "VersionNumber";
				colvarVersionNumber.DataType = DbType.AnsiString;
				colvarVersionNumber.MaxLength = 43;
				colvarVersionNumber.AutoIncrement = false;
				colvarVersionNumber.IsNullable = true;
				colvarVersionNumber.IsPrimaryKey = false;
				colvarVersionNumber.IsForeignKey = false;
				colvarVersionNumber.IsReadOnly = true;
				colvarVersionNumber.DefaultSetting = @"";
				colvarVersionNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersionNumber);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_ApplicationVersions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_ApplicationVersion LoadFrom(UI_ApplicationVersion item)
		{
			UI_ApplicationVersion result = new UI_ApplicationVersion();
			if (item.ApplicationVersionID != default(int)) {
				result.LoadByKey(item.ApplicationVersionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ApplicationVersionID {
			get { return GetColumnValue<int>(Columns.ApplicationVersionID); }
			set {
				SetColumnValue(Columns.ApplicationVersionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApplicationVersionID));
			}
		}
		[DataMember]
		public int ApplicationId {
			get { return GetColumnValue<int>(Columns.ApplicationId); }
			set {
				SetColumnValue(Columns.ApplicationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApplicationId));
			}
		}
		[DataMember]
		public int DeployedFileId {
			get { return GetColumnValue<int>(Columns.DeployedFileId); }
			set {
				SetColumnValue(Columns.DeployedFileId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DeployedFileId));
			}
		}
		[DataMember]
		public int MajorVersionNumber {
			get { return GetColumnValue<int>(Columns.MajorVersionNumber); }
			set {
				SetColumnValue(Columns.MajorVersionNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MajorVersionNumber));
			}
		}
		[DataMember]
		public int MinorVersionNumber {
			get { return GetColumnValue<int>(Columns.MinorVersionNumber); }
			set {
				SetColumnValue(Columns.MinorVersionNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinorVersionNumber));
			}
		}
		[DataMember]
		public int BuildNumber {
			get { return GetColumnValue<int>(Columns.BuildNumber); }
			set {
				SetColumnValue(Columns.BuildNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BuildNumber));
			}
		}
		[DataMember]
		public string RevisionNumber {
			get { return GetColumnValue<string>(Columns.RevisionNumber); }
			set {
				SetColumnValue(Columns.RevisionNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RevisionNumber));
			}
		}
		[DataMember]
		public string VersionNumber {
			get { return GetColumnValue<string>(Columns.VersionNumber); }
			set {
				SetColumnValue(Columns.VersionNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VersionNumber));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private UI_Application _Application;
		//Relationship: FK_UI_ApplicationVersions_UI_Applications
		public UI_Application Application
		{
			get
			{
				if(_Application == null) {
					_Application = UI_Application.FetchByID(this.ApplicationId);
				}
				return _Application;
			}
			set
			{
				SetColumnValue("ApplicationId", value.ApplicationID);
				_Application = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ApplicationVersionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ApplicationVersionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApplicationIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DeployedFileIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MajorVersionNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MinorVersionNumberColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn BuildNumberColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RevisionNumberColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn VersionNumberColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ApplicationVersionID = @"ApplicationVersionID";
			public static readonly string ApplicationId = @"ApplicationId";
			public static readonly string DeployedFileId = @"DeployedFileId";
			public static readonly string MajorVersionNumber = @"MajorVersionNumber";
			public static readonly string MinorVersionNumber = @"MinorVersionNumber";
			public static readonly string BuildNumber = @"BuildNumber";
			public static readonly string RevisionNumber = @"RevisionNumber";
			public static readonly string VersionNumber = @"VersionNumber";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ApplicationVersionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the UI_MenuItemPermission class.
	/// </summary>
	[DataContract]
	public partial class UI_MenuItemPermissionCollection : ActiveList<UI_MenuItemPermission, UI_MenuItemPermissionCollection>
	{
		public static UI_MenuItemPermissionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_MenuItemPermissionCollection result = new UI_MenuItemPermissionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_MenuItemPermission item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_MenuItemPermissions table.
	/// </summary>
	[DataContract]
	public partial class UI_MenuItemPermission : ActiveRecord<UI_MenuItemPermission>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_MenuItemPermission()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_MenuItemPermissions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMenuItemPermissionID = new TableSchema.TableColumn(schema);
				colvarMenuItemPermissionID.ColumnName = "MenuItemPermissionID";
				colvarMenuItemPermissionID.DataType = DbType.Int32;
				colvarMenuItemPermissionID.MaxLength = 0;
				colvarMenuItemPermissionID.AutoIncrement = true;
				colvarMenuItemPermissionID.IsNullable = false;
				colvarMenuItemPermissionID.IsPrimaryKey = true;
				colvarMenuItemPermissionID.IsForeignKey = false;
				colvarMenuItemPermissionID.IsReadOnly = false;
				colvarMenuItemPermissionID.DefaultSetting = @"";
				colvarMenuItemPermissionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMenuItemPermissionID);

				TableSchema.TableColumn colvarMenuItemId = new TableSchema.TableColumn(schema);
				colvarMenuItemId.ColumnName = "MenuItemId";
				colvarMenuItemId.DataType = DbType.Int32;
				colvarMenuItemId.MaxLength = 0;
				colvarMenuItemId.AutoIncrement = false;
				colvarMenuItemId.IsNullable = false;
				colvarMenuItemId.IsPrimaryKey = false;
				colvarMenuItemId.IsForeignKey = true;
				colvarMenuItemId.IsReadOnly = false;
				colvarMenuItemId.DefaultSetting = @"";
				colvarMenuItemId.ForeignKeyTableName = "UI_MenuItems";
				schema.Columns.Add(colvarMenuItemId);

				TableSchema.TableColumn colvarPermissionTypeId = new TableSchema.TableColumn(schema);
				colvarPermissionTypeId.ColumnName = "PermissionTypeId";
				colvarPermissionTypeId.DataType = DbType.Int32;
				colvarPermissionTypeId.MaxLength = 0;
				colvarPermissionTypeId.AutoIncrement = false;
				colvarPermissionTypeId.IsNullable = false;
				colvarPermissionTypeId.IsPrimaryKey = false;
				colvarPermissionTypeId.IsForeignKey = false;
				colvarPermissionTypeId.IsReadOnly = false;
				colvarPermissionTypeId.DefaultSetting = @"";
				colvarPermissionTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermissionTypeId);

				TableSchema.TableColumn colvarPrincipalName = new TableSchema.TableColumn(schema);
				colvarPrincipalName.ColumnName = "PrincipalName";
				colvarPrincipalName.DataType = DbType.String;
				colvarPrincipalName.MaxLength = 100;
				colvarPrincipalName.AutoIncrement = false;
				colvarPrincipalName.IsNullable = false;
				colvarPrincipalName.IsPrimaryKey = false;
				colvarPrincipalName.IsForeignKey = false;
				colvarPrincipalName.IsReadOnly = false;
				colvarPrincipalName.DefaultSetting = @"";
				colvarPrincipalName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrincipalName);

				TableSchema.TableColumn colvarAllowAccess = new TableSchema.TableColumn(schema);
				colvarAllowAccess.ColumnName = "AllowAccess";
				colvarAllowAccess.DataType = DbType.Boolean;
				colvarAllowAccess.MaxLength = 0;
				colvarAllowAccess.AutoIncrement = false;
				colvarAllowAccess.IsNullable = false;
				colvarAllowAccess.IsPrimaryKey = false;
				colvarAllowAccess.IsForeignKey = false;
				colvarAllowAccess.IsReadOnly = false;
				colvarAllowAccess.DefaultSetting = @"";
				colvarAllowAccess.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowAccess);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_MenuItemPermissions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_MenuItemPermission LoadFrom(UI_MenuItemPermission item)
		{
			UI_MenuItemPermission result = new UI_MenuItemPermission();
			if (item.MenuItemPermissionID != default(int)) {
				result.LoadByKey(item.MenuItemPermissionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MenuItemPermissionID {
			get { return GetColumnValue<int>(Columns.MenuItemPermissionID); }
			set {
				SetColumnValue(Columns.MenuItemPermissionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MenuItemPermissionID));
			}
		}
		[DataMember]
		public int MenuItemId {
			get { return GetColumnValue<int>(Columns.MenuItemId); }
			set {
				SetColumnValue(Columns.MenuItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MenuItemId));
			}
		}
		[DataMember]
		public int PermissionTypeId {
			get { return GetColumnValue<int>(Columns.PermissionTypeId); }
			set {
				SetColumnValue(Columns.PermissionTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PermissionTypeId));
			}
		}
		[DataMember]
		public string PrincipalName {
			get { return GetColumnValue<string>(Columns.PrincipalName); }
			set {
				SetColumnValue(Columns.PrincipalName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrincipalName));
			}
		}
		[DataMember]
		public bool AllowAccess {
			get { return GetColumnValue<bool>(Columns.AllowAccess); }
			set {
				SetColumnValue(Columns.AllowAccess, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AllowAccess));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private UI_MenuItem _MenuItem;
		//Relationship: FK_UI_MenuItemPermissions_UI_MenuItems
		public UI_MenuItem MenuItem
		{
			get
			{
				if(_MenuItem == null) {
					_MenuItem = UI_MenuItem.FetchByID(this.MenuItemId);
				}
				return _MenuItem;
			}
			set
			{
				SetColumnValue("MenuItemId", value.MenuItemID);
				_MenuItem = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MenuItemPermissionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MenuItemPermissionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MenuItemIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PermissionTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PrincipalNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AllowAccessColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MenuItemPermissionID = @"MenuItemPermissionID";
			public static readonly string MenuItemId = @"MenuItemId";
			public static readonly string PermissionTypeId = @"PermissionTypeId";
			public static readonly string PrincipalName = @"PrincipalName";
			public static readonly string AllowAccess = @"AllowAccess";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MenuItemPermissionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the UI_MenuItem class.
	/// </summary>
	[DataContract]
	public partial class UI_MenuItemCollection : ActiveList<UI_MenuItem, UI_MenuItemCollection>
	{
		public static UI_MenuItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_MenuItemCollection result = new UI_MenuItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_MenuItem item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_MenuItems table.
	/// </summary>
	[DataContract]
	public partial class UI_MenuItem : ActiveRecord<UI_MenuItem>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_MenuItem()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_MenuItems", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMenuItemID = new TableSchema.TableColumn(schema);
				colvarMenuItemID.ColumnName = "MenuItemID";
				colvarMenuItemID.DataType = DbType.Int32;
				colvarMenuItemID.MaxLength = 0;
				colvarMenuItemID.AutoIncrement = true;
				colvarMenuItemID.IsNullable = false;
				colvarMenuItemID.IsPrimaryKey = true;
				colvarMenuItemID.IsForeignKey = false;
				colvarMenuItemID.IsReadOnly = false;
				colvarMenuItemID.DefaultSetting = @"";
				colvarMenuItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMenuItemID);

				TableSchema.TableColumn colvarMenuId = new TableSchema.TableColumn(schema);
				colvarMenuId.ColumnName = "MenuId";
				colvarMenuId.DataType = DbType.Int32;
				colvarMenuId.MaxLength = 0;
				colvarMenuId.AutoIncrement = false;
				colvarMenuId.IsNullable = false;
				colvarMenuId.IsPrimaryKey = false;
				colvarMenuId.IsForeignKey = true;
				colvarMenuId.IsReadOnly = false;
				colvarMenuId.DefaultSetting = @"";
				colvarMenuId.ForeignKeyTableName = "UI_Menus";
				schema.Columns.Add(colvarMenuId);

				TableSchema.TableColumn colvarActionId = new TableSchema.TableColumn(schema);
				colvarActionId.ColumnName = "ActionId";
				colvarActionId.DataType = DbType.Int32;
				colvarActionId.MaxLength = 0;
				colvarActionId.AutoIncrement = false;
				colvarActionId.IsNullable = true;
				colvarActionId.IsPrimaryKey = false;
				colvarActionId.IsForeignKey = true;
				colvarActionId.IsReadOnly = false;
				colvarActionId.DefaultSetting = @"";
				colvarActionId.ForeignKeyTableName = "UI_Actions";
				schema.Columns.Add(colvarActionId);

				TableSchema.TableColumn colvarParentItemId = new TableSchema.TableColumn(schema);
				colvarParentItemId.ColumnName = "ParentItemId";
				colvarParentItemId.DataType = DbType.Int32;
				colvarParentItemId.MaxLength = 0;
				colvarParentItemId.AutoIncrement = false;
				colvarParentItemId.IsNullable = true;
				colvarParentItemId.IsPrimaryKey = false;
				colvarParentItemId.IsForeignKey = true;
				colvarParentItemId.IsReadOnly = false;
				colvarParentItemId.DefaultSetting = @"";
				colvarParentItemId.ForeignKeyTableName = "UI_MenuItems";
				schema.Columns.Add(colvarParentItemId);

				TableSchema.TableColumn colvarSourceMenuItemId = new TableSchema.TableColumn(schema);
				colvarSourceMenuItemId.ColumnName = "SourceMenuItemId";
				colvarSourceMenuItemId.DataType = DbType.Int32;
				colvarSourceMenuItemId.MaxLength = 0;
				colvarSourceMenuItemId.AutoIncrement = false;
				colvarSourceMenuItemId.IsNullable = true;
				colvarSourceMenuItemId.IsPrimaryKey = false;
				colvarSourceMenuItemId.IsForeignKey = true;
				colvarSourceMenuItemId.IsReadOnly = false;
				colvarSourceMenuItemId.DefaultSetting = @"";
				colvarSourceMenuItemId.ForeignKeyTableName = "UI_MenuItems";
				schema.Columns.Add(colvarSourceMenuItemId);

				TableSchema.TableColumn colvarLabel = new TableSchema.TableColumn(schema);
				colvarLabel.ColumnName = "Label";
				colvarLabel.DataType = DbType.String;
				colvarLabel.MaxLength = 255;
				colvarLabel.AutoIncrement = false;
				colvarLabel.IsNullable = false;
				colvarLabel.IsPrimaryKey = false;
				colvarLabel.IsForeignKey = false;
				colvarLabel.IsReadOnly = false;
				colvarLabel.DefaultSetting = @"";
				colvarLabel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLabel);

				TableSchema.TableColumn colvarToolTip = new TableSchema.TableColumn(schema);
				colvarToolTip.ColumnName = "ToolTip";
				colvarToolTip.DataType = DbType.String;
				colvarToolTip.MaxLength = 255;
				colvarToolTip.AutoIncrement = false;
				colvarToolTip.IsNullable = true;
				colvarToolTip.IsPrimaryKey = false;
				colvarToolTip.IsForeignKey = false;
				colvarToolTip.IsReadOnly = false;
				colvarToolTip.DefaultSetting = @"";
				colvarToolTip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarToolTip);

				TableSchema.TableColumn colvarIsVisible = new TableSchema.TableColumn(schema);
				colvarIsVisible.ColumnName = "IsVisible";
				colvarIsVisible.DataType = DbType.Boolean;
				colvarIsVisible.MaxLength = 0;
				colvarIsVisible.AutoIncrement = false;
				colvarIsVisible.IsNullable = false;
				colvarIsVisible.IsPrimaryKey = false;
				colvarIsVisible.IsForeignKey = false;
				colvarIsVisible.IsReadOnly = false;
				colvarIsVisible.DefaultSetting = @"";
				colvarIsVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVisible);

				TableSchema.TableColumn colvarShowInDashboard = new TableSchema.TableColumn(schema);
				colvarShowInDashboard.ColumnName = "ShowInDashboard";
				colvarShowInDashboard.DataType = DbType.Boolean;
				colvarShowInDashboard.MaxLength = 0;
				colvarShowInDashboard.AutoIncrement = false;
				colvarShowInDashboard.IsNullable = false;
				colvarShowInDashboard.IsPrimaryKey = false;
				colvarShowInDashboard.IsForeignKey = false;
				colvarShowInDashboard.IsReadOnly = false;
				colvarShowInDashboard.DefaultSetting = @"";
				colvarShowInDashboard.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShowInDashboard);

				TableSchema.TableColumn colvarActionPriority = new TableSchema.TableColumn(schema);
				colvarActionPriority.ColumnName = "ActionPriority";
				colvarActionPriority.DataType = DbType.Int32;
				colvarActionPriority.MaxLength = 0;
				colvarActionPriority.AutoIncrement = false;
				colvarActionPriority.IsNullable = false;
				colvarActionPriority.IsPrimaryKey = false;
				colvarActionPriority.IsForeignKey = false;
				colvarActionPriority.IsReadOnly = false;
				colvarActionPriority.DefaultSetting = @"";
				colvarActionPriority.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActionPriority);

				TableSchema.TableColumn colvarIsOverrideable = new TableSchema.TableColumn(schema);
				colvarIsOverrideable.ColumnName = "IsOverrideable";
				colvarIsOverrideable.DataType = DbType.Boolean;
				colvarIsOverrideable.MaxLength = 0;
				colvarIsOverrideable.AutoIncrement = false;
				colvarIsOverrideable.IsNullable = false;
				colvarIsOverrideable.IsPrimaryKey = false;
				colvarIsOverrideable.IsForeignKey = false;
				colvarIsOverrideable.IsReadOnly = false;
				colvarIsOverrideable.DefaultSetting = @"";
				colvarIsOverrideable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsOverrideable);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_MenuItems",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_MenuItem LoadFrom(UI_MenuItem item)
		{
			UI_MenuItem result = new UI_MenuItem();
			if (item.MenuItemID != default(int)) {
				result.LoadByKey(item.MenuItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MenuItemID {
			get { return GetColumnValue<int>(Columns.MenuItemID); }
			set {
				SetColumnValue(Columns.MenuItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MenuItemID));
			}
		}
		[DataMember]
		public int MenuId {
			get { return GetColumnValue<int>(Columns.MenuId); }
			set {
				SetColumnValue(Columns.MenuId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MenuId));
			}
		}
		[DataMember]
		public int? ActionId {
			get { return GetColumnValue<int?>(Columns.ActionId); }
			set {
				SetColumnValue(Columns.ActionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActionId));
			}
		}
		[DataMember]
		public int? ParentItemId {
			get { return GetColumnValue<int?>(Columns.ParentItemId); }
			set {
				SetColumnValue(Columns.ParentItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ParentItemId));
			}
		}
		[DataMember]
		public int? SourceMenuItemId {
			get { return GetColumnValue<int?>(Columns.SourceMenuItemId); }
			set {
				SetColumnValue(Columns.SourceMenuItemId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SourceMenuItemId));
			}
		}
		[DataMember]
		public string Label {
			get { return GetColumnValue<string>(Columns.Label); }
			set {
				SetColumnValue(Columns.Label, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Label));
			}
		}
		[DataMember]
		public string ToolTip {
			get { return GetColumnValue<string>(Columns.ToolTip); }
			set {
				SetColumnValue(Columns.ToolTip, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ToolTip));
			}
		}
		[DataMember]
		public bool IsVisible {
			get { return GetColumnValue<bool>(Columns.IsVisible); }
			set {
				SetColumnValue(Columns.IsVisible, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsVisible));
			}
		}
		[DataMember]
		public bool ShowInDashboard {
			get { return GetColumnValue<bool>(Columns.ShowInDashboard); }
			set {
				SetColumnValue(Columns.ShowInDashboard, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShowInDashboard));
			}
		}
		[DataMember]
		public int ActionPriority {
			get { return GetColumnValue<int>(Columns.ActionPriority); }
			set {
				SetColumnValue(Columns.ActionPriority, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActionPriority));
			}
		}
		[DataMember]
		public bool IsOverrideable {
			get { return GetColumnValue<bool>(Columns.IsOverrideable); }
			set {
				SetColumnValue(Columns.IsOverrideable, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsOverrideable));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private UI_Action _Action;
		//Relationship: FK_UI_MenuItems_UI_Actions
		public UI_Action Action
		{
			get
			{
				if(_Action == null) {
					_Action = UI_Action.FetchByID(this.ActionId);
				}
				return _Action;
			}
			set
			{
				SetColumnValue("ActionId", value.ActionID);
				_Action = value;
			}
		}

		private UI_MenuItem _ParentItem;
		//Relationship: FK_UI_MenuItems_UI_MenuItems
		public UI_MenuItem ParentItem
		{
			get
			{
				if(_ParentItem == null) {
					_ParentItem = UI_MenuItem.FetchByID(this.ParentItemId);
				}
				return _ParentItem;
			}
			set
			{
				SetColumnValue("ParentItemId", value.MenuItemID);
				_ParentItem = value;
			}
		}

		private UI_MenuItem _SourceMenuItem;
		//Relationship: FK_UI_MenuItems_UI_MenuItems1
		public UI_MenuItem SourceMenuItem
		{
			get
			{
				if(_SourceMenuItem == null) {
					_SourceMenuItem = UI_MenuItem.FetchByID(this.SourceMenuItemId);
				}
				return _SourceMenuItem;
			}
			set
			{
				SetColumnValue("SourceMenuItemId", value.MenuItemID);
				_SourceMenuItem = value;
			}
		}

		private UI_Menu _Menu;
		//Relationship: FK_UI_MenuItems_UI_Menus
		public UI_Menu Menu
		{
			get
			{
				if(_Menu == null) {
					_Menu = UI_Menu.FetchByID(this.MenuId);
				}
				return _Menu;
			}
			set
			{
				SetColumnValue("MenuId", value.MenuID);
				_Menu = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MenuItemID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MenuItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MenuIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ActionIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ParentItemIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SourceMenuItemIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn LabelColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ToolTipColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsVisibleColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ShowInDashboardColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ActionPriorityColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsOverrideableColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MenuItemID = @"MenuItemID";
			public static readonly string MenuId = @"MenuId";
			public static readonly string ActionId = @"ActionId";
			public static readonly string ParentItemId = @"ParentItemId";
			public static readonly string SourceMenuItemId = @"SourceMenuItemId";
			public static readonly string Label = @"Label";
			public static readonly string ToolTip = @"ToolTip";
			public static readonly string IsVisible = @"IsVisible";
			public static readonly string ShowInDashboard = @"ShowInDashboard";
			public static readonly string ActionPriority = @"ActionPriority";
			public static readonly string IsOverrideable = @"IsOverrideable";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MenuItemID; }
		}
		*/

		#region Foreign Collections

		private UI_MenuItemPermissionCollection _UI_MenuItemPermissionsCol;
		//Relationship: FK_UI_MenuItemPermissions_UI_MenuItems
		public UI_MenuItemPermissionCollection UI_MenuItemPermissionsCol
		{
			get
			{
				if(_UI_MenuItemPermissionsCol == null) {
					_UI_MenuItemPermissionsCol = new UI_MenuItemPermissionCollection();
					_UI_MenuItemPermissionsCol.LoadAndCloseReader(UI_MenuItemPermission.Query()
						.WHERE(UI_MenuItemPermission.Columns.MenuItemId, MenuItemID).ExecuteReader());
				}
				return _UI_MenuItemPermissionsCol;
			}
		}

		private UI_MenuItemCollection _ChildUI_MenuItemsCol;
		//Relationship: FK_UI_MenuItems_UI_MenuItems
		public UI_MenuItemCollection ChildUI_MenuItemsCol
		{
			get
			{
				if(_ChildUI_MenuItemsCol == null) {
					_ChildUI_MenuItemsCol = new UI_MenuItemCollection();
					_ChildUI_MenuItemsCol.LoadAndCloseReader(UI_MenuItem.Query()
						.WHERE(UI_MenuItem.Columns.ParentItemId, MenuItemID).ExecuteReader());
				}
				return _ChildUI_MenuItemsCol;
			}
		}

		private UI_MenuItemCollection _ChildUI_MenuItems02Col;
		//Relationship: FK_UI_MenuItems_UI_MenuItems1
		public UI_MenuItemCollection ChildUI_MenuItems02Col
		{
			get
			{
				if(_ChildUI_MenuItems02Col == null) {
					_ChildUI_MenuItems02Col = new UI_MenuItemCollection();
					_ChildUI_MenuItems02Col.LoadAndCloseReader(UI_MenuItem.Query()
						.WHERE(UI_MenuItem.Columns.SourceMenuItemId, MenuItemID).ExecuteReader());
				}
				return _ChildUI_MenuItems02Col;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the UI_Menu class.
	/// </summary>
	[DataContract]
	public partial class UI_MenuCollection : ActiveList<UI_Menu, UI_MenuCollection>
	{
		public static UI_MenuCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_MenuCollection result = new UI_MenuCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_Menu item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_Menus table.
	/// </summary>
	[DataContract]
	public partial class UI_Menu : ActiveRecord<UI_Menu>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_Menu()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_Menus", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMenuID = new TableSchema.TableColumn(schema);
				colvarMenuID.ColumnName = "MenuID";
				colvarMenuID.DataType = DbType.Int32;
				colvarMenuID.MaxLength = 0;
				colvarMenuID.AutoIncrement = true;
				colvarMenuID.IsNullable = false;
				colvarMenuID.IsPrimaryKey = true;
				colvarMenuID.IsForeignKey = false;
				colvarMenuID.IsReadOnly = false;
				colvarMenuID.DefaultSetting = @"";
				colvarMenuID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMenuID);

				TableSchema.TableColumn colvarApplicationVersionId = new TableSchema.TableColumn(schema);
				colvarApplicationVersionId.ColumnName = "ApplicationVersionId";
				colvarApplicationVersionId.DataType = DbType.Int32;
				colvarApplicationVersionId.MaxLength = 0;
				colvarApplicationVersionId.AutoIncrement = false;
				colvarApplicationVersionId.IsNullable = false;
				colvarApplicationVersionId.IsPrimaryKey = false;
				colvarApplicationVersionId.IsForeignKey = false;
				colvarApplicationVersionId.IsReadOnly = false;
				colvarApplicationVersionId.DefaultSetting = @"";
				colvarApplicationVersionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationVersionId);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((1))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_Menus",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_Menu LoadFrom(UI_Menu item)
		{
			UI_Menu result = new UI_Menu();
			if (item.MenuID != default(int)) {
				result.LoadByKey(item.MenuID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MenuID {
			get { return GetColumnValue<int>(Columns.MenuID); }
			set {
				SetColumnValue(Columns.MenuID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MenuID));
			}
		}
		[DataMember]
		public int ApplicationVersionId {
			get { return GetColumnValue<int>(Columns.ApplicationVersionId); }
			set {
				SetColumnValue(Columns.ApplicationVersionId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApplicationVersionId));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return MenuID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MenuIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApplicationVersionIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MenuID = @"MenuID";
			public static readonly string ApplicationVersionId = @"ApplicationVersionId";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MenuID; }
		}
		*/

		#region Foreign Collections

		private UI_MenuItemCollection _UI_MenuItemsCol;
		//Relationship: FK_UI_MenuItems_UI_Menus
		public UI_MenuItemCollection UI_MenuItemsCol
		{
			get
			{
				if(_UI_MenuItemsCol == null) {
					_UI_MenuItemsCol = new UI_MenuItemCollection();
					_UI_MenuItemsCol.LoadAndCloseReader(UI_MenuItem.Query()
						.WHERE(UI_MenuItem.Columns.MenuId, MenuID).ExecuteReader());
				}
				return _UI_MenuItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the UI_MessageActionParameter class.
	/// </summary>
	[DataContract]
	public partial class UI_MessageActionParameterCollection : ActiveList<UI_MessageActionParameter, UI_MessageActionParameterCollection>
	{
		public static UI_MessageActionParameterCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_MessageActionParameterCollection result = new UI_MessageActionParameterCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_MessageActionParameter item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_MessageActionParameters table.
	/// </summary>
	[DataContract]
	public partial class UI_MessageActionParameter : ActiveRecord<UI_MessageActionParameter>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_MessageActionParameter()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_MessageActionParameters", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMessageActionParameterID = new TableSchema.TableColumn(schema);
				colvarMessageActionParameterID.ColumnName = "MessageActionParameterID";
				colvarMessageActionParameterID.DataType = DbType.Int32;
				colvarMessageActionParameterID.MaxLength = 0;
				colvarMessageActionParameterID.AutoIncrement = true;
				colvarMessageActionParameterID.IsNullable = false;
				colvarMessageActionParameterID.IsPrimaryKey = true;
				colvarMessageActionParameterID.IsForeignKey = false;
				colvarMessageActionParameterID.IsReadOnly = false;
				colvarMessageActionParameterID.DefaultSetting = @"";
				colvarMessageActionParameterID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageActionParameterID);

				TableSchema.TableColumn colvarMessageActionID = new TableSchema.TableColumn(schema);
				colvarMessageActionID.ColumnName = "MessageActionID";
				colvarMessageActionID.DataType = DbType.Int32;
				colvarMessageActionID.MaxLength = 0;
				colvarMessageActionID.AutoIncrement = false;
				colvarMessageActionID.IsNullable = false;
				colvarMessageActionID.IsPrimaryKey = false;
				colvarMessageActionID.IsForeignKey = true;
				colvarMessageActionID.IsReadOnly = false;
				colvarMessageActionID.DefaultSetting = @"";
				colvarMessageActionID.ForeignKeyTableName = "UI_MessageActions";
				schema.Columns.Add(colvarMessageActionID);

				TableSchema.TableColumn colvarParameterName = new TableSchema.TableColumn(schema);
				colvarParameterName.ColumnName = "ParameterName";
				colvarParameterName.DataType = DbType.String;
				colvarParameterName.MaxLength = 100;
				colvarParameterName.AutoIncrement = false;
				colvarParameterName.IsNullable = false;
				colvarParameterName.IsPrimaryKey = false;
				colvarParameterName.IsForeignKey = false;
				colvarParameterName.IsReadOnly = false;
				colvarParameterName.DefaultSetting = @"";
				colvarParameterName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParameterName);

				TableSchema.TableColumn colvarParemterValue = new TableSchema.TableColumn(schema);
				colvarParemterValue.ColumnName = "ParemterValue";
				colvarParemterValue.DataType = DbType.String;
				colvarParemterValue.MaxLength = 100;
				colvarParemterValue.AutoIncrement = false;
				colvarParemterValue.IsNullable = false;
				colvarParemterValue.IsPrimaryKey = false;
				colvarParemterValue.IsForeignKey = false;
				colvarParemterValue.IsReadOnly = false;
				colvarParemterValue.DefaultSetting = @"";
				colvarParemterValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParemterValue);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_MessageActionParameters",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_MessageActionParameter LoadFrom(UI_MessageActionParameter item)
		{
			UI_MessageActionParameter result = new UI_MessageActionParameter();
			if (item.MessageActionParameterID != default(int)) {
				result.LoadByKey(item.MessageActionParameterID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MessageActionParameterID {
			get { return GetColumnValue<int>(Columns.MessageActionParameterID); }
			set {
				SetColumnValue(Columns.MessageActionParameterID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageActionParameterID));
			}
		}
		[DataMember]
		public int MessageActionID {
			get { return GetColumnValue<int>(Columns.MessageActionID); }
			set {
				SetColumnValue(Columns.MessageActionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageActionID));
			}
		}
		[DataMember]
		public string ParameterName {
			get { return GetColumnValue<string>(Columns.ParameterName); }
			set {
				SetColumnValue(Columns.ParameterName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ParameterName));
			}
		}
		[DataMember]
		public string ParemterValue {
			get { return GetColumnValue<string>(Columns.ParemterValue); }
			set {
				SetColumnValue(Columns.ParemterValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ParemterValue));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private UI_MessageAction _MessageAction;
		//Relationship: FK_UI_MessageActionParameters_UI_MessageActions
		public UI_MessageAction MessageAction
		{
			get
			{
				if(_MessageAction == null) {
					_MessageAction = UI_MessageAction.FetchByID(this.MessageActionID);
				}
				return _MessageAction;
			}
			set
			{
				SetColumnValue("MessageActionID", value.MessageActionID);
				_MessageAction = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MessageActionParameterID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MessageActionParameterIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MessageActionIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ParameterNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ParemterValueColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MessageActionParameterID = @"MessageActionParameterID";
			public static readonly string MessageActionID = @"MessageActionID";
			public static readonly string ParameterName = @"ParameterName";
			public static readonly string ParemterValue = @"ParemterValue";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MessageActionParameterID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the UI_MessageAction class.
	/// </summary>
	[DataContract]
	public partial class UI_MessageActionCollection : ActiveList<UI_MessageAction, UI_MessageActionCollection>
	{
		public static UI_MessageActionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_MessageActionCollection result = new UI_MessageActionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_MessageAction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_MessageActions table.
	/// </summary>
	[DataContract]
	public partial class UI_MessageAction : ActiveRecord<UI_MessageAction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_MessageAction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_MessageActions", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMessageActionID = new TableSchema.TableColumn(schema);
				colvarMessageActionID.ColumnName = "MessageActionID";
				colvarMessageActionID.DataType = DbType.Int32;
				colvarMessageActionID.MaxLength = 0;
				colvarMessageActionID.AutoIncrement = true;
				colvarMessageActionID.IsNullable = false;
				colvarMessageActionID.IsPrimaryKey = true;
				colvarMessageActionID.IsForeignKey = false;
				colvarMessageActionID.IsReadOnly = false;
				colvarMessageActionID.DefaultSetting = @"";
				colvarMessageActionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageActionID);

				TableSchema.TableColumn colvarMessageID = new TableSchema.TableColumn(schema);
				colvarMessageID.ColumnName = "MessageID";
				colvarMessageID.DataType = DbType.Int32;
				colvarMessageID.MaxLength = 0;
				colvarMessageID.AutoIncrement = false;
				colvarMessageID.IsNullable = false;
				colvarMessageID.IsPrimaryKey = false;
				colvarMessageID.IsForeignKey = true;
				colvarMessageID.IsReadOnly = false;
				colvarMessageID.DefaultSetting = @"";
				colvarMessageID.ForeignKeyTableName = "UI_Messages";
				schema.Columns.Add(colvarMessageID);

				TableSchema.TableColumn colvarActionID = new TableSchema.TableColumn(schema);
				colvarActionID.ColumnName = "ActionID";
				colvarActionID.DataType = DbType.Int32;
				colvarActionID.MaxLength = 0;
				colvarActionID.AutoIncrement = false;
				colvarActionID.IsNullable = false;
				colvarActionID.IsPrimaryKey = false;
				colvarActionID.IsForeignKey = true;
				colvarActionID.IsReadOnly = false;
				colvarActionID.DefaultSetting = @"";
				colvarActionID.ForeignKeyTableName = "UI_Actions";
				schema.Columns.Add(colvarActionID);

				TableSchema.TableColumn colvarLabel = new TableSchema.TableColumn(schema);
				colvarLabel.ColumnName = "Label";
				colvarLabel.DataType = DbType.String;
				colvarLabel.MaxLength = 100;
				colvarLabel.AutoIncrement = false;
				colvarLabel.IsNullable = false;
				colvarLabel.IsPrimaryKey = false;
				colvarLabel.IsForeignKey = false;
				colvarLabel.IsReadOnly = false;
				colvarLabel.DefaultSetting = @"";
				colvarLabel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLabel);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_MessageActions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_MessageAction LoadFrom(UI_MessageAction item)
		{
			UI_MessageAction result = new UI_MessageAction();
			if (item.MessageActionID != default(int)) {
				result.LoadByKey(item.MessageActionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MessageActionID {
			get { return GetColumnValue<int>(Columns.MessageActionID); }
			set {
				SetColumnValue(Columns.MessageActionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageActionID));
			}
		}
		[DataMember]
		public int MessageID {
			get { return GetColumnValue<int>(Columns.MessageID); }
			set {
				SetColumnValue(Columns.MessageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageID));
			}
		}
		[DataMember]
		public int ActionID {
			get { return GetColumnValue<int>(Columns.ActionID); }
			set {
				SetColumnValue(Columns.ActionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActionID));
			}
		}
		[DataMember]
		public string Label {
			get { return GetColumnValue<string>(Columns.Label); }
			set {
				SetColumnValue(Columns.Label, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Label));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private UI_Action _Action;
		//Relationship: FK_UI_MessageActions_UI_Actions
		public UI_Action Action
		{
			get
			{
				if(_Action == null) {
					_Action = UI_Action.FetchByID(this.ActionID);
				}
				return _Action;
			}
			set
			{
				SetColumnValue("ActionID", value.ActionID);
				_Action = value;
			}
		}

		private UI_Message _Message;
		//Relationship: FK_UI_MessageActions_UI_Messages
		public UI_Message Message
		{
			get
			{
				if(_Message == null) {
					_Message = UI_Message.FetchByID(this.MessageID);
				}
				return _Message;
			}
			set
			{
				SetColumnValue("MessageID", value.MessageID);
				_Message = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MessageActionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MessageActionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MessageIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ActionIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn LabelColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MessageActionID = @"MessageActionID";
			public static readonly string MessageID = @"MessageID";
			public static readonly string ActionID = @"ActionID";
			public static readonly string Label = @"Label";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MessageActionID; }
		}
		*/

		#region Foreign Collections

		private UI_MessageActionParameterCollection _UI_MessageActionParametersCol;
		//Relationship: FK_UI_MessageActionParameters_UI_MessageActions
		public UI_MessageActionParameterCollection UI_MessageActionParametersCol
		{
			get
			{
				if(_UI_MessageActionParametersCol == null) {
					_UI_MessageActionParametersCol = new UI_MessageActionParameterCollection();
					_UI_MessageActionParametersCol.LoadAndCloseReader(UI_MessageActionParameter.Query()
						.WHERE(UI_MessageActionParameter.Columns.MessageActionID, MessageActionID).ExecuteReader());
				}
				return _UI_MessageActionParametersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the UI_Message class.
	/// </summary>
	[DataContract]
	public partial class UI_MessageCollection : ActiveList<UI_Message, UI_MessageCollection>
	{
		public static UI_MessageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_MessageCollection result = new UI_MessageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_Message item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_Messages table.
	/// </summary>
	[DataContract]
	public partial class UI_Message : ActiveRecord<UI_Message>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_Message()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_Messages", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMessageID = new TableSchema.TableColumn(schema);
				colvarMessageID.ColumnName = "MessageID";
				colvarMessageID.DataType = DbType.Int32;
				colvarMessageID.MaxLength = 0;
				colvarMessageID.AutoIncrement = true;
				colvarMessageID.IsNullable = false;
				colvarMessageID.IsPrimaryKey = true;
				colvarMessageID.IsForeignKey = false;
				colvarMessageID.IsReadOnly = false;
				colvarMessageID.DefaultSetting = @"";
				colvarMessageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageID);

				TableSchema.TableColumn colvarRecipeintID = new TableSchema.TableColumn(schema);
				colvarRecipeintID.ColumnName = "RecipeintID";
				colvarRecipeintID.DataType = DbType.String;
				colvarRecipeintID.MaxLength = 50;
				colvarRecipeintID.AutoIncrement = false;
				colvarRecipeintID.IsNullable = false;
				colvarRecipeintID.IsPrimaryKey = false;
				colvarRecipeintID.IsForeignKey = false;
				colvarRecipeintID.IsReadOnly = false;
				colvarRecipeintID.DefaultSetting = @"";
				colvarRecipeintID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecipeintID);

				TableSchema.TableColumn colvarSubject = new TableSchema.TableColumn(schema);
				colvarSubject.ColumnName = "Subject";
				colvarSubject.DataType = DbType.String;
				colvarSubject.MaxLength = 500;
				colvarSubject.AutoIncrement = false;
				colvarSubject.IsNullable = false;
				colvarSubject.IsPrimaryKey = false;
				colvarSubject.IsForeignKey = false;
				colvarSubject.IsReadOnly = false;
				colvarSubject.DefaultSetting = @"";
				colvarSubject.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubject);

				TableSchema.TableColumn colvarMessage = new TableSchema.TableColumn(schema);
				colvarMessage.ColumnName = "Message";
				colvarMessage.DataType = DbType.String;
				colvarMessage.MaxLength = 1073741823;
				colvarMessage.AutoIncrement = false;
				colvarMessage.IsNullable = false;
				colvarMessage.IsPrimaryKey = false;
				colvarMessage.IsForeignKey = false;
				colvarMessage.IsReadOnly = false;
				colvarMessage.DefaultSetting = @"";
				colvarMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessage);

				TableSchema.TableColumn colvarReadOn = new TableSchema.TableColumn(schema);
				colvarReadOn.ColumnName = "ReadOn";
				colvarReadOn.DataType = DbType.DateTime;
				colvarReadOn.MaxLength = 0;
				colvarReadOn.AutoIncrement = false;
				colvarReadOn.IsNullable = true;
				colvarReadOn.IsPrimaryKey = false;
				colvarReadOn.IsForeignKey = false;
				colvarReadOn.IsReadOnly = false;
				colvarReadOn.DefaultSetting = @"";
				colvarReadOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReadOn);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_Messages",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_Message LoadFrom(UI_Message item)
		{
			UI_Message result = new UI_Message();
			if (item.MessageID != default(int)) {
				result.LoadByKey(item.MessageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MessageID {
			get { return GetColumnValue<int>(Columns.MessageID); }
			set {
				SetColumnValue(Columns.MessageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageID));
			}
		}
		[DataMember]
		public string RecipeintID {
			get { return GetColumnValue<string>(Columns.RecipeintID); }
			set {
				SetColumnValue(Columns.RecipeintID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecipeintID));
			}
		}
		[DataMember]
		public string Subject {
			get { return GetColumnValue<string>(Columns.Subject); }
			set {
				SetColumnValue(Columns.Subject, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Subject));
			}
		}
		[DataMember]
		public string Message {
			get { return GetColumnValue<string>(Columns.Message); }
			set {
				SetColumnValue(Columns.Message, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Message));
			}
		}
		[DataMember]
		public DateTime? ReadOn {
			get { return GetColumnValue<DateTime?>(Columns.ReadOn); }
			set {
				SetColumnValue(Columns.ReadOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReadOn));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return RecipeintID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MessageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RecipeintIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SubjectColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MessageColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ReadOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MessageID = @"MessageID";
			public static readonly string RecipeintID = @"RecipeintID";
			public static readonly string Subject = @"Subject";
			public static readonly string Message = @"Message";
			public static readonly string ReadOn = @"ReadOn";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MessageID; }
		}
		*/

		#region Foreign Collections

		private UI_MessageActionCollection _UI_MessageActionsCol;
		//Relationship: FK_UI_MessageActions_UI_Messages
		public UI_MessageActionCollection UI_MessageActionsCol
		{
			get
			{
				if(_UI_MessageActionsCol == null) {
					_UI_MessageActionsCol = new UI_MessageActionCollection();
					_UI_MessageActionsCol.LoadAndCloseReader(UI_MessageAction.Query()
						.WHERE(UI_MessageAction.Columns.MessageID, MessageID).ExecuteReader());
				}
				return _UI_MessageActionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the UI_PermissionType class.
	/// </summary>
	[DataContract]
	public partial class UI_PermissionTypeCollection : ActiveList<UI_PermissionType, UI_PermissionTypeCollection>
	{
		public static UI_PermissionTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_PermissionTypeCollection result = new UI_PermissionTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_PermissionType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_PermissionTypes table.
	/// </summary>
	[DataContract]
	public partial class UI_PermissionType : ActiveRecord<UI_PermissionType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum PermissionTypeEnum : int
		{
			[EnumMember()] Ad_Group = 1,
			[EnumMember()] Ad_User = 2,
		}

		//[DataMember]
		//public PermissionTypeEnum PermissionTypeCode
		//{
		//	get { return (PermissionTypeEnum)PermissionTypeID; }
		//	set { PermissionTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_PermissionType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_PermissionTypes", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPermissionTypeID = new TableSchema.TableColumn(schema);
				colvarPermissionTypeID.ColumnName = "PermissionTypeID";
				colvarPermissionTypeID.DataType = DbType.Int32;
				colvarPermissionTypeID.MaxLength = 0;
				colvarPermissionTypeID.AutoIncrement = false;
				colvarPermissionTypeID.IsNullable = false;
				colvarPermissionTypeID.IsPrimaryKey = true;
				colvarPermissionTypeID.IsForeignKey = false;
				colvarPermissionTypeID.IsReadOnly = false;
				colvarPermissionTypeID.DefaultSetting = @"";
				colvarPermissionTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermissionTypeID);

				TableSchema.TableColumn colvarPermissionTypeName = new TableSchema.TableColumn(schema);
				colvarPermissionTypeName.ColumnName = "PermissionTypeName";
				colvarPermissionTypeName.DataType = DbType.String;
				colvarPermissionTypeName.MaxLength = 50;
				colvarPermissionTypeName.AutoIncrement = false;
				colvarPermissionTypeName.IsNullable = false;
				colvarPermissionTypeName.IsPrimaryKey = false;
				colvarPermissionTypeName.IsForeignKey = false;
				colvarPermissionTypeName.IsReadOnly = false;
				colvarPermissionTypeName.DefaultSetting = @"";
				colvarPermissionTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermissionTypeName);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_PermissionTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_PermissionType LoadFrom(UI_PermissionType item)
		{
			UI_PermissionType result = new UI_PermissionType();
			if (item.PermissionTypeID != default(int)) {
				result.LoadByKey(item.PermissionTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PermissionTypeID {
			get { return GetColumnValue<int>(Columns.PermissionTypeID); }
			set {
				SetColumnValue(Columns.PermissionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PermissionTypeID));
			}
		}
		[DataMember]
		public string PermissionTypeName {
			get { return GetColumnValue<string>(Columns.PermissionTypeName); }
			set {
				SetColumnValue(Columns.PermissionTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PermissionTypeName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return PermissionTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PermissionTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PermissionTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PermissionTypeID = @"PermissionTypeID";
			public static readonly string PermissionTypeName = @"PermissionTypeName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PermissionTypeID; }
		}
		*/

		#region Foreign Collections

		private UI_ApplicationPermissionCollection _UI_ApplicationPermissionsCol;
		//Relationship: FK_UI_ApplicationPermissions_UI_PermissionTypes
		public UI_ApplicationPermissionCollection UI_ApplicationPermissionsCol
		{
			get
			{
				if(_UI_ApplicationPermissionsCol == null) {
					_UI_ApplicationPermissionsCol = new UI_ApplicationPermissionCollection();
					_UI_ApplicationPermissionsCol.LoadAndCloseReader(UI_ApplicationPermission.Query()
						.WHERE(UI_ApplicationPermission.Columns.PermissionTypeId, PermissionTypeID).ExecuteReader());
				}
				return _UI_ApplicationPermissionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the UI_UserSettingsContainer class.
	/// </summary>
	[DataContract]
	public partial class UI_UserSettingsContainerCollection : ActiveList<UI_UserSettingsContainer, UI_UserSettingsContainerCollection>
	{
		public static UI_UserSettingsContainerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			UI_UserSettingsContainerCollection result = new UI_UserSettingsContainerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (UI_UserSettingsContainer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the UI_UserSettingsContainers table.
	/// </summary>
	[DataContract]
	public partial class UI_UserSettingsContainer : ActiveRecord<UI_UserSettingsContainer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public UI_UserSettingsContainer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("UI_UserSettingsContainers", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUserSettingsContainerID = new TableSchema.TableColumn(schema);
				colvarUserSettingsContainerID.ColumnName = "UserSettingsContainerID";
				colvarUserSettingsContainerID.DataType = DbType.Int32;
				colvarUserSettingsContainerID.MaxLength = 0;
				colvarUserSettingsContainerID.AutoIncrement = true;
				colvarUserSettingsContainerID.IsNullable = false;
				colvarUserSettingsContainerID.IsPrimaryKey = true;
				colvarUserSettingsContainerID.IsForeignKey = false;
				colvarUserSettingsContainerID.IsReadOnly = false;
				colvarUserSettingsContainerID.DefaultSetting = @"";
				colvarUserSettingsContainerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserSettingsContainerID);

				TableSchema.TableColumn colvarApplicationID = new TableSchema.TableColumn(schema);
				colvarApplicationID.ColumnName = "ApplicationID";
				colvarApplicationID.DataType = DbType.Int32;
				colvarApplicationID.MaxLength = 0;
				colvarApplicationID.AutoIncrement = false;
				colvarApplicationID.IsNullable = false;
				colvarApplicationID.IsPrimaryKey = false;
				colvarApplicationID.IsForeignKey = true;
				colvarApplicationID.IsReadOnly = false;
				colvarApplicationID.DefaultSetting = @"";
				colvarApplicationID.ForeignKeyTableName = "UI_Applications";
				schema.Columns.Add(colvarApplicationID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.String;
				colvarUserID.MaxLength = 50;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarSerialziedValue = new TableSchema.TableColumn(schema);
				colvarSerialziedValue.ColumnName = "SerialziedValue";
				colvarSerialziedValue.DataType = DbType.AnsiString;
				colvarSerialziedValue.MaxLength = -1;
				colvarSerialziedValue.AutoIncrement = false;
				colvarSerialziedValue.IsNullable = false;
				colvarSerialziedValue.IsPrimaryKey = false;
				colvarSerialziedValue.IsForeignKey = false;
				colvarSerialziedValue.IsReadOnly = false;
				colvarSerialziedValue.DefaultSetting = @"";
				colvarSerialziedValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSerialziedValue);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("UI_UserSettingsContainers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static UI_UserSettingsContainer LoadFrom(UI_UserSettingsContainer item)
		{
			UI_UserSettingsContainer result = new UI_UserSettingsContainer();
			if (item.UserSettingsContainerID != default(int)) {
				result.LoadByKey(item.UserSettingsContainerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UserSettingsContainerID {
			get { return GetColumnValue<int>(Columns.UserSettingsContainerID); }
			set {
				SetColumnValue(Columns.UserSettingsContainerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserSettingsContainerID));
			}
		}
		[DataMember]
		public int ApplicationID {
			get { return GetColumnValue<int>(Columns.ApplicationID); }
			set {
				SetColumnValue(Columns.ApplicationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApplicationID));
			}
		}
		[DataMember]
		public string UserID {
			get { return GetColumnValue<string>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public string SerialziedValue {
			get { return GetColumnValue<string>(Columns.SerialziedValue); }
			set {
				SetColumnValue(Columns.SerialziedValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SerialziedValue));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private UI_Application _Application;
		//Relationship: FK_UI_UserSettingsContainers_UI_Applications
		public UI_Application Application
		{
			get
			{
				if(_Application == null) {
					_Application = UI_Application.FetchByID(this.ApplicationID);
				}
				return _Application;
			}
			set
			{
				SetColumnValue("ApplicationID", value.ApplicationID);
				_Application = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return UserSettingsContainerID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn UserSettingsContainerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApplicationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SerialziedValueColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UserSettingsContainerID = @"UserSettingsContainerID";
			public static readonly string ApplicationID = @"ApplicationID";
			public static readonly string UserID = @"UserID";
			public static readonly string SerialziedValue = @"SerialziedValue";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UserSettingsContainerID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the WF_Account class.
	/// </summary>
	[DataContract]
	public partial class WF_AccountCollection : ActiveList<WF_Account, WF_AccountCollection>
	{
		public static WF_AccountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			WF_AccountCollection result = new WF_AccountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (WF_Account item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the WF_Accounts table.
	/// </summary>
	[DataContract]
	public partial class WF_Account : ActiveRecord<WF_Account>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public WF_Account()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("WF_Accounts", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int64;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarDEX_ROW_TS = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_TS.ColumnName = "DEX_ROW_TS";
				colvarDEX_ROW_TS.DataType = DbType.DateTime;
				colvarDEX_ROW_TS.MaxLength = 0;
				colvarDEX_ROW_TS.AutoIncrement = false;
				colvarDEX_ROW_TS.IsNullable = false;
				colvarDEX_ROW_TS.IsPrimaryKey = false;
				colvarDEX_ROW_TS.IsForeignKey = false;
				colvarDEX_ROW_TS.IsReadOnly = false;
				colvarDEX_ROW_TS.DefaultSetting = @"(getutcdate())";
				colvarDEX_ROW_TS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_TS);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int64;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("WF_Accounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static WF_Account LoadFrom(WF_Account item)
		{
			WF_Account result = new WF_Account();
			if (item.AccountID != default(long)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long AccountID {
			get { return GetColumnValue<long>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime DEX_ROW_TS {
			get { return GetColumnValue<DateTime>(Columns.DEX_ROW_TS); }
			set {
				SetColumnValue(Columns.DEX_ROW_TS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_TS));
			}
		}
		[DataMember]
		public long DEX_ROW_ID {
			get { return GetColumnValue<long>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_Account _Account;
		//Relationship: FK_WF_Accounts_MC_Accounts
		public MC_Account Account
		{
			get
			{
				if(_Account == null) {
					_Account = MC_Account.FetchByID(this.AccountID);
				}
				return _Account;
			}
			set
			{
				SetColumnValue("AccountID", value.AccountID);
				_Account = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DEX_ROW_TSColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string DEX_ROW_TS = @"DEX_ROW_TS";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the ZZTestCreate class.
	/// </summary>
	[DataContract]
	public partial class ZZTestCreateCollection : ActiveList<ZZTestCreate, ZZTestCreateCollection>
	{
		public static ZZTestCreateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			ZZTestCreateCollection result = new ZZTestCreateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (ZZTestCreate item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the ZZTestCreate table.
	/// </summary>
	[DataContract]
	public partial class ZZTestCreate : ActiveRecord<ZZTestCreate>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public ZZTestCreate()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ZZTestCreate", TableType.Table, DataService.GetInstance("SosCrmProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int32;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = true;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = true;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarUnitPrice = new TableSchema.TableColumn(schema);
				colvarUnitPrice.ColumnName = "UnitPrice";
				colvarUnitPrice.DataType = DbType.Currency;
				colvarUnitPrice.MaxLength = 0;
				colvarUnitPrice.AutoIncrement = false;
				colvarUnitPrice.IsNullable = false;
				colvarUnitPrice.IsPrimaryKey = false;
				colvarUnitPrice.IsForeignKey = false;
				colvarUnitPrice.IsReadOnly = false;
				colvarUnitPrice.DefaultSetting = @"((10))";
				colvarUnitPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitPrice);

				BaseSchema = schema;
				DataService.Providers["SosCrmProvider"].AddSchema("ZZTestCreate",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static ZZTestCreate LoadFrom(ZZTestCreate item)
		{
			ZZTestCreate result = new ZZTestCreate();
			if (item.ID != default(int)) {
				result.LoadByKey(item.ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ID {
			get { return GetColumnValue<int>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public decimal UnitPrice {
			get { return GetColumnValue<decimal>(Columns.UnitPrice); }
			set {
				SetColumnValue(Columns.UnitPrice, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitPrice));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UnitPriceColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ID = @"ID";
			public static readonly string UnitPrice = @"UnitPrice";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ID; }
		}
		*/


	}
}
