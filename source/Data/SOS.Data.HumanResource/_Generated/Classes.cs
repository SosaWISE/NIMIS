


using System;
using System.ComponentModel;
using System.Linq;
using SubSonic;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;
using System.Data;
using System.Data.SqlClient;
using System.Runtime.Serialization;
using SOS.Data;

namespace SOS.Data.HumanResource
{
	/// <summary>
	/// Strongly-typed collection for the APT_Address class.
	/// </summary>
	[DataContract]
	public partial class APT_AddressCollection : ActiveList<APT_Address, APT_AddressCollection>
	{
		public static APT_AddressCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_AddressCollection result = new APT_AddressCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_Address item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_Address table.
	/// </summary>
	[DataContract]
	public partial class APT_Address : ActiveRecord<APT_Address>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_Address()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_Address", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressID = new TableSchema.TableColumn(schema);
				colvarAddressID.ColumnName = "AddressID";
				colvarAddressID.DataType = DbType.Int32;
				colvarAddressID.MaxLength = 0;
				colvarAddressID.AutoIncrement = true;
				colvarAddressID.IsNullable = false;
				colvarAddressID.IsPrimaryKey = true;
				colvarAddressID.IsForeignKey = false;
				colvarAddressID.IsReadOnly = false;
				colvarAddressID.DefaultSetting = @"";
				colvarAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressID);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = true;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "MC_PoliticalStates";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = false;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = true;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"";
				colvarCountryId.ForeignKeyTableName = "MC_PoliticalCountrys";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarTimeZoneID = new TableSchema.TableColumn(schema);
				colvarTimeZoneID.ColumnName = "TimeZoneID";
				colvarTimeZoneID.DataType = DbType.Int32;
				colvarTimeZoneID.MaxLength = 0;
				colvarTimeZoneID.AutoIncrement = false;
				colvarTimeZoneID.IsNullable = true;
				colvarTimeZoneID.IsPrimaryKey = false;
				colvarTimeZoneID.IsForeignKey = false;
				colvarTimeZoneID.IsReadOnly = false;
				colvarTimeZoneID.DefaultSetting = @"";
				colvarTimeZoneID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneID);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = false;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.String;
				colvarPostalCode.MaxLength = 10;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarPlusFour = new TableSchema.TableColumn(schema);
				colvarPlusFour.ColumnName = "PlusFour";
				colvarPlusFour.DataType = DbType.String;
				colvarPlusFour.MaxLength = 4;
				colvarPlusFour.AutoIncrement = false;
				colvarPlusFour.IsNullable = true;
				colvarPlusFour.IsPrimaryKey = false;
				colvarPlusFour.IsForeignKey = false;
				colvarPlusFour.IsReadOnly = false;
				colvarPlusFour.DefaultSetting = @"";
				colvarPlusFour.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlusFour);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.String;
				colvarModifiedByID.MaxLength = 50;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = false;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_Address",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_Address LoadFrom(APT_Address item)
		{
			APT_Address result = new APT_Address();
			if (item.AddressID != default(int)) {
				result.LoadByKey(item.AddressID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AddressID {
			get { return GetColumnValue<int>(Columns.AddressID); }
			set {
				SetColumnValue(Columns.AddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressID));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set {
				SetColumnValue(Columns.CountryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryId));
			}
		}
		[DataMember]
		public int? TimeZoneID {
			get { return GetColumnValue<int?>(Columns.TimeZoneID); }
			set {
				SetColumnValue(Columns.TimeZoneID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneID));
			}
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set {
				SetColumnValue(Columns.StreetAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress));
			}
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set {
				SetColumnValue(Columns.StreetAddress2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress2));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set {
				SetColumnValue(Columns.PostalCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostalCode));
			}
		}
		[DataMember]
		public string PlusFour {
			get { return GetColumnValue<string>(Columns.PlusFour); }
			set {
				SetColumnValue(Columns.PlusFour, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PlusFour));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string ModifiedByID {
			get { return GetColumnValue<string>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_PoliticalCountry _Country;
		//Relationship: FK_APT_Address_MC_PoliticalCountrys
		public MC_PoliticalCountry Country
		{
			get
			{
				if(_Country == null) {
					_Country = MC_PoliticalCountry.FetchByID(this.CountryId);
				}
				return _Country;
			}
			set
			{
				SetColumnValue("CountryId", value.CountryID);
				_Country = value;
			}
		}

		private MC_PoliticalState _State;
		//Relationship: FK_APT_Address_MC_PoliticalStates
		public MC_PoliticalState State
		{
			get
			{
				if(_State == null) {
					_State = MC_PoliticalState.FetchByID(this.StateId);
				}
				return _State;
			}
			set
			{
				SetColumnValue("StateId", value.StateID);
				_State = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return StateId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TimeZoneIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PlusFourColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[14]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddressID = @"AddressID";
			public static readonly string StateId = @"StateId";
			public static readonly string CountryId = @"CountryId";
			public static readonly string TimeZoneID = @"TimeZoneID";
			public static readonly string StreetAddress = @"StreetAddress";
			public static readonly string StreetAddress2 = @"StreetAddress2";
			public static readonly string City = @"City";
			public static readonly string PostalCode = @"PostalCode";
			public static readonly string PlusFour = @"PlusFour";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddressID; }
		}
		*/

		#region Foreign Collections

		private APT_ApartmentCollection _APT_ApartmentsCol;
		//Relationship: FK_APT_ApartmentAddress_APT_Apartment
		public APT_ApartmentCollection APT_ApartmentsCol
		{
			get
			{
				if(_APT_ApartmentsCol == null) {
					_APT_ApartmentsCol = new APT_ApartmentCollection();
					_APT_ApartmentsCol.LoadAndCloseReader(APT_Apartment.Query()
						.WHERE(APT_Apartment.Columns.LocationAddressID, AddressID).ExecuteReader());
				}
				return _APT_ApartmentsCol;
			}
		}

		private APT_ContactCollection _APT_ContactsCol;
		//Relationship: FK_APT_Contact_APT_Address
		public APT_ContactCollection APT_ContactsCol
		{
			get
			{
				if(_APT_ContactsCol == null) {
					_APT_ContactsCol = new APT_ContactCollection();
					_APT_ContactsCol.LoadAndCloseReader(APT_Contact.Query()
						.WHERE(APT_Contact.Columns.MailingAddressID, AddressID).ExecuteReader());
				}
				return _APT_ContactsCol;
			}
		}

		private APT_ContactCollection _APT_Contacts02Col;
		//Relationship: FK_APT_ContactPhysical_APT_Contact
		public APT_ContactCollection APT_Contacts02Col
		{
			get
			{
				if(_APT_Contacts02Col == null) {
					_APT_Contacts02Col = new APT_ContactCollection();
					_APT_Contacts02Col.LoadAndCloseReader(APT_Contact.Query()
						.WHERE(APT_Contact.Columns.PhysicalAddressID, AddressID).ExecuteReader());
				}
				return _APT_Contacts02Col;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_Apartment class.
	/// </summary>
	[DataContract]
	public partial class APT_ApartmentCollection : ActiveList<APT_Apartment, APT_ApartmentCollection>
	{
		public static APT_ApartmentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ApartmentCollection result = new APT_ApartmentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_Apartment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_Apartment table.
	/// </summary>
	[DataContract]
	public partial class APT_Apartment : ActiveRecord<APT_Apartment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_Apartment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_Apartment", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarApartmentID = new TableSchema.TableColumn(schema);
				colvarApartmentID.ColumnName = "ApartmentID";
				colvarApartmentID.DataType = DbType.Int32;
				colvarApartmentID.MaxLength = 0;
				colvarApartmentID.AutoIncrement = true;
				colvarApartmentID.IsNullable = false;
				colvarApartmentID.IsPrimaryKey = true;
				colvarApartmentID.IsForeignKey = false;
				colvarApartmentID.IsReadOnly = false;
				colvarApartmentID.DefaultSetting = @"";
				colvarApartmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApartmentID);

				TableSchema.TableColumn colvarComplexID = new TableSchema.TableColumn(schema);
				colvarComplexID.ColumnName = "ComplexID";
				colvarComplexID.DataType = DbType.Int32;
				colvarComplexID.MaxLength = 0;
				colvarComplexID.AutoIncrement = false;
				colvarComplexID.IsNullable = false;
				colvarComplexID.IsPrimaryKey = false;
				colvarComplexID.IsForeignKey = true;
				colvarComplexID.IsReadOnly = false;
				colvarComplexID.DefaultSetting = @"";
				colvarComplexID.ForeignKeyTableName = "APT_Complex";
				schema.Columns.Add(colvarComplexID);

				TableSchema.TableColumn colvarApartmentTypeID = new TableSchema.TableColumn(schema);
				colvarApartmentTypeID.ColumnName = "ApartmentTypeID";
				colvarApartmentTypeID.DataType = DbType.Int32;
				colvarApartmentTypeID.MaxLength = 0;
				colvarApartmentTypeID.AutoIncrement = false;
				colvarApartmentTypeID.IsNullable = false;
				colvarApartmentTypeID.IsPrimaryKey = false;
				colvarApartmentTypeID.IsForeignKey = true;
				colvarApartmentTypeID.IsReadOnly = false;
				colvarApartmentTypeID.DefaultSetting = @"";
				colvarApartmentTypeID.ForeignKeyTableName = "APT_ApartmentType";
				schema.Columns.Add(colvarApartmentTypeID);

				TableSchema.TableColumn colvarUnitNumber = new TableSchema.TableColumn(schema);
				colvarUnitNumber.ColumnName = "UnitNumber";
				colvarUnitNumber.DataType = DbType.String;
				colvarUnitNumber.MaxLength = 20;
				colvarUnitNumber.AutoIncrement = false;
				colvarUnitNumber.IsNullable = true;
				colvarUnitNumber.IsPrimaryKey = false;
				colvarUnitNumber.IsForeignKey = false;
				colvarUnitNumber.IsReadOnly = false;
				colvarUnitNumber.DefaultSetting = @"";
				colvarUnitNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitNumber);

				TableSchema.TableColumn colvarActive = new TableSchema.TableColumn(schema);
				colvarActive.ColumnName = "Active";
				colvarActive.DataType = DbType.Boolean;
				colvarActive.MaxLength = 0;
				colvarActive.AutoIncrement = false;
				colvarActive.IsNullable = true;
				colvarActive.IsPrimaryKey = false;
				colvarActive.IsForeignKey = false;
				colvarActive.IsReadOnly = false;
				colvarActive.DefaultSetting = @"";
				colvarActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActive);

				TableSchema.TableColumn colvarRefundableSecDepositAmt = new TableSchema.TableColumn(schema);
				colvarRefundableSecDepositAmt.ColumnName = "RefundableSecDepositAmt";
				colvarRefundableSecDepositAmt.DataType = DbType.Currency;
				colvarRefundableSecDepositAmt.MaxLength = 0;
				colvarRefundableSecDepositAmt.AutoIncrement = false;
				colvarRefundableSecDepositAmt.IsNullable = true;
				colvarRefundableSecDepositAmt.IsPrimaryKey = false;
				colvarRefundableSecDepositAmt.IsForeignKey = false;
				colvarRefundableSecDepositAmt.IsReadOnly = false;
				colvarRefundableSecDepositAmt.DefaultSetting = @"";
				colvarRefundableSecDepositAmt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRefundableSecDepositAmt);

				TableSchema.TableColumn colvarMonthlyRent = new TableSchema.TableColumn(schema);
				colvarMonthlyRent.ColumnName = "MonthlyRent";
				colvarMonthlyRent.DataType = DbType.Currency;
				colvarMonthlyRent.MaxLength = 0;
				colvarMonthlyRent.AutoIncrement = false;
				colvarMonthlyRent.IsNullable = true;
				colvarMonthlyRent.IsPrimaryKey = false;
				colvarMonthlyRent.IsForeignKey = false;
				colvarMonthlyRent.IsReadOnly = false;
				colvarMonthlyRent.DefaultSetting = @"";
				colvarMonthlyRent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthlyRent);

				TableSchema.TableColumn colvarFurniturePackageID = new TableSchema.TableColumn(schema);
				colvarFurniturePackageID.ColumnName = "FurniturePackageID";
				colvarFurniturePackageID.DataType = DbType.Int32;
				colvarFurniturePackageID.MaxLength = 0;
				colvarFurniturePackageID.AutoIncrement = false;
				colvarFurniturePackageID.IsNullable = true;
				colvarFurniturePackageID.IsPrimaryKey = false;
				colvarFurniturePackageID.IsForeignKey = true;
				colvarFurniturePackageID.IsReadOnly = false;
				colvarFurniturePackageID.DefaultSetting = @"";
				colvarFurniturePackageID.ForeignKeyTableName = "APT_DefaultFurniturePackage";
				schema.Columns.Add(colvarFurniturePackageID);

				TableSchema.TableColumn colvarContractStartDate = new TableSchema.TableColumn(schema);
				colvarContractStartDate.ColumnName = "ContractStartDate";
				colvarContractStartDate.DataType = DbType.DateTime;
				colvarContractStartDate.MaxLength = 0;
				colvarContractStartDate.AutoIncrement = false;
				colvarContractStartDate.IsNullable = true;
				colvarContractStartDate.IsPrimaryKey = false;
				colvarContractStartDate.IsForeignKey = false;
				colvarContractStartDate.IsReadOnly = false;
				colvarContractStartDate.DefaultSetting = @"";
				colvarContractStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractStartDate);

				TableSchema.TableColumn colvarContractEndDate = new TableSchema.TableColumn(schema);
				colvarContractEndDate.ColumnName = "ContractEndDate";
				colvarContractEndDate.DataType = DbType.DateTime;
				colvarContractEndDate.MaxLength = 0;
				colvarContractEndDate.AutoIncrement = false;
				colvarContractEndDate.IsNullable = true;
				colvarContractEndDate.IsPrimaryKey = false;
				colvarContractEndDate.IsForeignKey = false;
				colvarContractEndDate.IsReadOnly = false;
				colvarContractEndDate.DefaultSetting = @"";
				colvarContractEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractEndDate);

				TableSchema.TableColumn colvarLocationAddressID = new TableSchema.TableColumn(schema);
				colvarLocationAddressID.ColumnName = "LocationAddressID";
				colvarLocationAddressID.DataType = DbType.Int32;
				colvarLocationAddressID.MaxLength = 0;
				colvarLocationAddressID.AutoIncrement = false;
				colvarLocationAddressID.IsNullable = true;
				colvarLocationAddressID.IsPrimaryKey = false;
				colvarLocationAddressID.IsForeignKey = true;
				colvarLocationAddressID.IsReadOnly = false;
				colvarLocationAddressID.DefaultSetting = @"";
				colvarLocationAddressID.ForeignKeyTableName = "APT_Address";
				schema.Columns.Add(colvarLocationAddressID);

				TableSchema.TableColumn colvarApartmentManagerID = new TableSchema.TableColumn(schema);
				colvarApartmentManagerID.ColumnName = "ApartmentManagerID";
				colvarApartmentManagerID.DataType = DbType.Int32;
				colvarApartmentManagerID.MaxLength = 0;
				colvarApartmentManagerID.AutoIncrement = false;
				colvarApartmentManagerID.IsNullable = true;
				colvarApartmentManagerID.IsPrimaryKey = false;
				colvarApartmentManagerID.IsForeignKey = true;
				colvarApartmentManagerID.IsReadOnly = false;
				colvarApartmentManagerID.DefaultSetting = @"";
				colvarApartmentManagerID.ForeignKeyTableName = "APT_Contact";
				schema.Columns.Add(colvarApartmentManagerID);

				TableSchema.TableColumn colvarManagerOccupantID = new TableSchema.TableColumn(schema);
				colvarManagerOccupantID.ColumnName = "ManagerOccupantID";
				colvarManagerOccupantID.DataType = DbType.Int32;
				colvarManagerOccupantID.MaxLength = 0;
				colvarManagerOccupantID.AutoIncrement = false;
				colvarManagerOccupantID.IsNullable = true;
				colvarManagerOccupantID.IsPrimaryKey = false;
				colvarManagerOccupantID.IsForeignKey = true;
				colvarManagerOccupantID.IsReadOnly = false;
				colvarManagerOccupantID.DefaultSetting = @"";
				colvarManagerOccupantID.ForeignKeyTableName = "APT_Occupant";
				schema.Columns.Add(colvarManagerOccupantID);

				TableSchema.TableColumn colvarGPApartmentID = new TableSchema.TableColumn(schema);
				colvarGPApartmentID.ColumnName = "GPApartmentID";
				colvarGPApartmentID.DataType = DbType.AnsiString;
				colvarGPApartmentID.MaxLength = 15;
				colvarGPApartmentID.AutoIncrement = false;
				colvarGPApartmentID.IsNullable = true;
				colvarGPApartmentID.IsPrimaryKey = false;
				colvarGPApartmentID.IsForeignKey = false;
				colvarGPApartmentID.IsReadOnly = false;
				colvarGPApartmentID.DefaultSetting = @"";
				colvarGPApartmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPApartmentID);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarManagerApartmentID = new TableSchema.TableColumn(schema);
				colvarManagerApartmentID.ColumnName = "ManagerApartmentID";
				colvarManagerApartmentID.DataType = DbType.Int32;
				colvarManagerApartmentID.MaxLength = 0;
				colvarManagerApartmentID.AutoIncrement = false;
				colvarManagerApartmentID.IsNullable = true;
				colvarManagerApartmentID.IsPrimaryKey = false;
				colvarManagerApartmentID.IsForeignKey = true;
				colvarManagerApartmentID.IsReadOnly = false;
				colvarManagerApartmentID.DefaultSetting = @"";
				colvarManagerApartmentID.ForeignKeyTableName = "APT_Apartment";
				schema.Columns.Add(colvarManagerApartmentID);

				TableSchema.TableColumn colvarVacateNoticeDays = new TableSchema.TableColumn(schema);
				colvarVacateNoticeDays.ColumnName = "VacateNoticeDays";
				colvarVacateNoticeDays.DataType = DbType.Int32;
				colvarVacateNoticeDays.MaxLength = 0;
				colvarVacateNoticeDays.AutoIncrement = false;
				colvarVacateNoticeDays.IsNullable = true;
				colvarVacateNoticeDays.IsPrimaryKey = false;
				colvarVacateNoticeDays.IsForeignKey = false;
				colvarVacateNoticeDays.IsReadOnly = false;
				colvarVacateNoticeDays.DefaultSetting = @"";
				colvarVacateNoticeDays.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVacateNoticeDays);

				TableSchema.TableColumn colvarVacateDate = new TableSchema.TableColumn(schema);
				colvarVacateDate.ColumnName = "VacateDate";
				colvarVacateDate.DataType = DbType.DateTime;
				colvarVacateDate.MaxLength = 0;
				colvarVacateDate.AutoIncrement = false;
				colvarVacateDate.IsNullable = true;
				colvarVacateDate.IsPrimaryKey = false;
				colvarVacateDate.IsForeignKey = false;
				colvarVacateDate.IsReadOnly = false;
				colvarVacateDate.DefaultSetting = @"";
				colvarVacateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVacateDate);

				TableSchema.TableColumn colvarVacateOptionID = new TableSchema.TableColumn(schema);
				colvarVacateOptionID.ColumnName = "VacateOptionID";
				colvarVacateOptionID.DataType = DbType.Int32;
				colvarVacateOptionID.MaxLength = 0;
				colvarVacateOptionID.AutoIncrement = false;
				colvarVacateOptionID.IsNullable = true;
				colvarVacateOptionID.IsPrimaryKey = false;
				colvarVacateOptionID.IsForeignKey = false;
				colvarVacateOptionID.IsReadOnly = false;
				colvarVacateOptionID.DefaultSetting = @"";
				colvarVacateOptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVacateOptionID);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.String;
				colvarModifiedByID.MaxLength = 50;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = false;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_Apartment",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_Apartment LoadFrom(APT_Apartment item)
		{
			APT_Apartment result = new APT_Apartment();
			if (item.ApartmentID != default(int)) {
				result.LoadByKey(item.ApartmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ApartmentID {
			get { return GetColumnValue<int>(Columns.ApartmentID); }
			set {
				SetColumnValue(Columns.ApartmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApartmentID));
			}
		}
		[DataMember]
		public int ComplexID {
			get { return GetColumnValue<int>(Columns.ComplexID); }
			set {
				SetColumnValue(Columns.ComplexID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ComplexID));
			}
		}
		[DataMember]
		public int ApartmentTypeID {
			get { return GetColumnValue<int>(Columns.ApartmentTypeID); }
			set {
				SetColumnValue(Columns.ApartmentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApartmentTypeID));
			}
		}
		[DataMember]
		public string UnitNumber {
			get { return GetColumnValue<string>(Columns.UnitNumber); }
			set {
				SetColumnValue(Columns.UnitNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitNumber));
			}
		}
		[DataMember]
		public bool? Active {
			get { return GetColumnValue<bool?>(Columns.Active); }
			set {
				SetColumnValue(Columns.Active, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Active));
			}
		}
		[DataMember]
		public decimal? RefundableSecDepositAmt {
			get { return GetColumnValue<decimal?>(Columns.RefundableSecDepositAmt); }
			set {
				SetColumnValue(Columns.RefundableSecDepositAmt, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RefundableSecDepositAmt));
			}
		}
		[DataMember]
		public decimal? MonthlyRent {
			get { return GetColumnValue<decimal?>(Columns.MonthlyRent); }
			set {
				SetColumnValue(Columns.MonthlyRent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonthlyRent));
			}
		}
		[DataMember]
		public int? FurniturePackageID {
			get { return GetColumnValue<int?>(Columns.FurniturePackageID); }
			set {
				SetColumnValue(Columns.FurniturePackageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurniturePackageID));
			}
		}
		[DataMember]
		public DateTime? ContractStartDate {
			get { return GetColumnValue<DateTime?>(Columns.ContractStartDate); }
			set {
				SetColumnValue(Columns.ContractStartDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractStartDate));
			}
		}
		[DataMember]
		public DateTime? ContractEndDate {
			get { return GetColumnValue<DateTime?>(Columns.ContractEndDate); }
			set {
				SetColumnValue(Columns.ContractEndDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractEndDate));
			}
		}
		[DataMember]
		public int? LocationAddressID {
			get { return GetColumnValue<int?>(Columns.LocationAddressID); }
			set {
				SetColumnValue(Columns.LocationAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LocationAddressID));
			}
		}
		[DataMember]
		public int? ApartmentManagerID {
			get { return GetColumnValue<int?>(Columns.ApartmentManagerID); }
			set {
				SetColumnValue(Columns.ApartmentManagerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApartmentManagerID));
			}
		}
		[DataMember]
		public int? ManagerOccupantID {
			get { return GetColumnValue<int?>(Columns.ManagerOccupantID); }
			set {
				SetColumnValue(Columns.ManagerOccupantID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagerOccupantID));
			}
		}
		[DataMember]
		public string GPApartmentID {
			get { return GetColumnValue<string>(Columns.GPApartmentID); }
			set {
				SetColumnValue(Columns.GPApartmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPApartmentID));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public int? ManagerApartmentID {
			get { return GetColumnValue<int?>(Columns.ManagerApartmentID); }
			set {
				SetColumnValue(Columns.ManagerApartmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagerApartmentID));
			}
		}
		[DataMember]
		public int? VacateNoticeDays {
			get { return GetColumnValue<int?>(Columns.VacateNoticeDays); }
			set {
				SetColumnValue(Columns.VacateNoticeDays, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VacateNoticeDays));
			}
		}
		[DataMember]
		public DateTime? VacateDate {
			get { return GetColumnValue<DateTime?>(Columns.VacateDate); }
			set {
				SetColumnValue(Columns.VacateDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VacateDate));
			}
		}
		[DataMember]
		public int? VacateOptionID {
			get { return GetColumnValue<int?>(Columns.VacateOptionID); }
			set {
				SetColumnValue(Columns.VacateOptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VacateOptionID));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string ModifiedByID {
			get { return GetColumnValue<string>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Apartment _ManagerApartment;
		//Relationship: FK_APT_Apartment_APT_Apartment
		public APT_Apartment ManagerApartment
		{
			get
			{
				if(_ManagerApartment == null) {
					_ManagerApartment = APT_Apartment.FetchByID(this.ManagerApartmentID);
				}
				return _ManagerApartment;
			}
			set
			{
				SetColumnValue("ManagerApartmentID", value.ApartmentID);
				_ManagerApartment = value;
			}
		}

		private APT_Complex _Complex;
		//Relationship: FK_APT_Apartment_APT_Complex
		public APT_Complex Complex
		{
			get
			{
				if(_Complex == null) {
					_Complex = APT_Complex.FetchByID(this.ComplexID);
				}
				return _Complex;
			}
			set
			{
				SetColumnValue("ComplexID", value.ComplexID);
				_Complex = value;
			}
		}

		private APT_DefaultFurniturePackage _FurniturePackage;
		//Relationship: FK_APT_Apartment_APT_DefaultFurniturePackage
		public APT_DefaultFurniturePackage FurniturePackage
		{
			get
			{
				if(_FurniturePackage == null) {
					_FurniturePackage = APT_DefaultFurniturePackage.FetchByID(this.FurniturePackageID);
				}
				return _FurniturePackage;
			}
			set
			{
				SetColumnValue("FurniturePackageID", value.DefaultPackageID);
				_FurniturePackage = value;
			}
		}

		private APT_Address _LocationAddress;
		//Relationship: FK_APT_ApartmentAddress_APT_Apartment
		public APT_Address LocationAddress
		{
			get
			{
				if(_LocationAddress == null) {
					_LocationAddress = APT_Address.FetchByID(this.LocationAddressID);
				}
				return _LocationAddress;
			}
			set
			{
				SetColumnValue("LocationAddressID", value.AddressID);
				_LocationAddress = value;
			}
		}

		private APT_Contact _ApartmentManager;
		//Relationship: FK_APT_ApartmentManager_APT_Contact
		public APT_Contact ApartmentManager
		{
			get
			{
				if(_ApartmentManager == null) {
					_ApartmentManager = APT_Contact.FetchByID(this.ApartmentManagerID);
				}
				return _ApartmentManager;
			}
			set
			{
				SetColumnValue("ApartmentManagerID", value.ContactID);
				_ApartmentManager = value;
			}
		}

		private APT_Occupant _ManagerOccupant;
		//Relationship: FK_APT_ApartmentManOcc_APT_Apartment
		public APT_Occupant ManagerOccupant
		{
			get
			{
				if(_ManagerOccupant == null) {
					_ManagerOccupant = APT_Occupant.FetchByID(this.ManagerOccupantID);
				}
				return _ManagerOccupant;
			}
			set
			{
				SetColumnValue("ManagerOccupantID", value.OccupantID);
				_ManagerOccupant = value;
			}
		}

		private APT_ApartmentType _ApartmentType;
		//Relationship: FK_APT_ApartmentType_APT_ApartmentType
		public APT_ApartmentType ApartmentType
		{
			get
			{
				if(_ApartmentType == null) {
					_ApartmentType = APT_ApartmentType.FetchByID(this.ApartmentTypeID);
				}
				return _ApartmentType;
			}
			set
			{
				SetColumnValue("ApartmentTypeID", value.ApartmentTypeID);
				_ApartmentType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ApartmentID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ApartmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ComplexIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ApartmentTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UnitNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RefundableSecDepositAmtColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MonthlyRentColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn FurniturePackageIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ContractStartDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ContractEndDateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn LocationAddressIDColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ApartmentManagerIDColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ManagerOccupantIDColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn GPApartmentIDColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ManagerApartmentIDColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn VacateNoticeDaysColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn VacateDateColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn VacateOptionIDColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[22]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ApartmentID = @"ApartmentID";
			public static readonly string ComplexID = @"ComplexID";
			public static readonly string ApartmentTypeID = @"ApartmentTypeID";
			public static readonly string UnitNumber = @"UnitNumber";
			public static readonly string Active = @"Active";
			public static readonly string RefundableSecDepositAmt = @"RefundableSecDepositAmt";
			public static readonly string MonthlyRent = @"MonthlyRent";
			public static readonly string FurniturePackageID = @"FurniturePackageID";
			public static readonly string ContractStartDate = @"ContractStartDate";
			public static readonly string ContractEndDate = @"ContractEndDate";
			public static readonly string LocationAddressID = @"LocationAddressID";
			public static readonly string ApartmentManagerID = @"ApartmentManagerID";
			public static readonly string ManagerOccupantID = @"ManagerOccupantID";
			public static readonly string GPApartmentID = @"GPApartmentID";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ManagerApartmentID = @"ManagerApartmentID";
			public static readonly string VacateNoticeDays = @"VacateNoticeDays";
			public static readonly string VacateDate = @"VacateDate";
			public static readonly string VacateOptionID = @"VacateOptionID";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ApartmentID; }
		}
		*/

		#region Foreign Collections

		private APT_ApartmentCollection _ChildAPT_ApartmentsCol;
		//Relationship: FK_APT_Apartment_APT_Apartment
		public APT_ApartmentCollection ChildAPT_ApartmentsCol
		{
			get
			{
				if(_ChildAPT_ApartmentsCol == null) {
					_ChildAPT_ApartmentsCol = new APT_ApartmentCollection();
					_ChildAPT_ApartmentsCol.LoadAndCloseReader(APT_Apartment.Query()
						.WHERE(APT_Apartment.Columns.ManagerApartmentID, ApartmentID).ExecuteReader());
				}
				return _ChildAPT_ApartmentsCol;
			}
		}

		private APT_ApartmentBySeasonCollection _APT_ApartmentBySeasonsCol;
		//Relationship: FK_APT_ApartmentBySeason_APT_Apartment
		public APT_ApartmentBySeasonCollection APT_ApartmentBySeasonsCol
		{
			get
			{
				if(_APT_ApartmentBySeasonsCol == null) {
					_APT_ApartmentBySeasonsCol = new APT_ApartmentBySeasonCollection();
					_APT_ApartmentBySeasonsCol.LoadAndCloseReader(APT_ApartmentBySeason.Query()
						.WHERE(APT_ApartmentBySeason.Columns.ApartmentID, ApartmentID).ExecuteReader());
				}
				return _APT_ApartmentBySeasonsCol;
			}
		}

		private APT_ApartmentNoteCollection _APT_ApartmentNotesCol;
		//Relationship: FK_APT_ApartmentNote_APT_Apartment
		public APT_ApartmentNoteCollection APT_ApartmentNotesCol
		{
			get
			{
				if(_APT_ApartmentNotesCol == null) {
					_APT_ApartmentNotesCol = new APT_ApartmentNoteCollection();
					_APT_ApartmentNotesCol.LoadAndCloseReader(APT_ApartmentNote.Query()
						.WHERE(APT_ApartmentNote.Columns.ApartmentID, ApartmentID).ExecuteReader());
				}
				return _APT_ApartmentNotesCol;
			}
		}

		private APT_BedroomCollection _APT_BedroomsCol;
		//Relationship: FK_APT_Bedroom_APT_Apartment
		public APT_BedroomCollection APT_BedroomsCol
		{
			get
			{
				if(_APT_BedroomsCol == null) {
					_APT_BedroomsCol = new APT_BedroomCollection();
					_APT_BedroomsCol.LoadAndCloseReader(APT_Bedroom.Query()
						.WHERE(APT_Bedroom.Columns.ApartmentID, ApartmentID).ExecuteReader());
				}
				return _APT_BedroomsCol;
			}
		}

		private APT_ExpenseCollection _APT_ExpensesCol;
		//Relationship: FK_APT_Expense_APT_Apartment
		public APT_ExpenseCollection APT_ExpensesCol
		{
			get
			{
				if(_APT_ExpensesCol == null) {
					_APT_ExpensesCol = new APT_ExpenseCollection();
					_APT_ExpensesCol.LoadAndCloseReader(APT_Expense.Query()
						.WHERE(APT_Expense.Columns.ApartmentID, ApartmentID).ExecuteReader());
				}
				return _APT_ExpensesCol;
			}
		}

		private APT_ApartmentFurnitureItemCollection _APT_ApartmentFurnitureItemsCol;
		//Relationship: FK_APT_FurniturePackageContents_APT_Apartment
		public APT_ApartmentFurnitureItemCollection APT_ApartmentFurnitureItemsCol
		{
			get
			{
				if(_APT_ApartmentFurnitureItemsCol == null) {
					_APT_ApartmentFurnitureItemsCol = new APT_ApartmentFurnitureItemCollection();
					_APT_ApartmentFurnitureItemsCol.LoadAndCloseReader(APT_ApartmentFurnitureItem.Query()
						.WHERE(APT_ApartmentFurnitureItem.Columns.ApartmentID, ApartmentID).ExecuteReader());
				}
				return _APT_ApartmentFurnitureItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_ApartmentBySeason class.
	/// </summary>
	[DataContract]
	public partial class APT_ApartmentBySeasonCollection : ActiveList<APT_ApartmentBySeason, APT_ApartmentBySeasonCollection>
	{
		public static APT_ApartmentBySeasonCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ApartmentBySeasonCollection result = new APT_ApartmentBySeasonCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_ApartmentBySeason item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_ApartmentBySeason table.
	/// </summary>
	[DataContract]
	public partial class APT_ApartmentBySeason : ActiveRecord<APT_ApartmentBySeason>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_ApartmentBySeason()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_ApartmentBySeason", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarApartmentID = new TableSchema.TableColumn(schema);
				colvarApartmentID.ColumnName = "ApartmentID";
				colvarApartmentID.DataType = DbType.Int32;
				colvarApartmentID.MaxLength = 0;
				colvarApartmentID.AutoIncrement = false;
				colvarApartmentID.IsNullable = false;
				colvarApartmentID.IsPrimaryKey = true;
				colvarApartmentID.IsForeignKey = false;
				colvarApartmentID.IsReadOnly = false;
				colvarApartmentID.DefaultSetting = @"";
				colvarApartmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApartmentID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_ApartmentBySeason",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_ApartmentBySeason LoadFrom(APT_ApartmentBySeason item)
		{
			APT_ApartmentBySeason result = new APT_ApartmentBySeason();
			if (item.ApartmentID != default(int)) {
				result.LoadByKey(item.ApartmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ApartmentID {
			get { return GetColumnValue<int>(Columns.ApartmentID); }
			set {
				SetColumnValue(Columns.ApartmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApartmentID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Apartment _Apartment;
		//Relationship: FK_APT_ApartmentBySeason_APT_Apartment
		public APT_Apartment Apartment
		{
			get
			{
				if(_Apartment == null) {
					_Apartment = APT_Apartment.FetchByID(this.ApartmentID);
				}
				return _Apartment;
			}
			set
			{
				SetColumnValue("ApartmentID", value.ApartmentID);
				_Apartment = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_APT_ApartmentBySeason_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ApartmentID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ApartmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ApartmentID = @"ApartmentID";
			public static readonly string SeasonID = @"SeasonID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ApartmentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the APT_ApartmentFurnitureItem class.
	/// </summary>
	[DataContract]
	public partial class APT_ApartmentFurnitureItemCollection : ActiveList<APT_ApartmentFurnitureItem, APT_ApartmentFurnitureItemCollection>
	{
		public static APT_ApartmentFurnitureItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ApartmentFurnitureItemCollection result = new APT_ApartmentFurnitureItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_ApartmentFurnitureItem item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_ApartmentFurnitureItems table.
	/// </summary>
	[DataContract]
	public partial class APT_ApartmentFurnitureItem : ActiveRecord<APT_ApartmentFurnitureItem>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_ApartmentFurnitureItem()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_ApartmentFurnitureItems", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarFurnitureItemID = new TableSchema.TableColumn(schema);
				colvarFurnitureItemID.ColumnName = "FurnitureItemID";
				colvarFurnitureItemID.DataType = DbType.Int32;
				colvarFurnitureItemID.MaxLength = 0;
				colvarFurnitureItemID.AutoIncrement = true;
				colvarFurnitureItemID.IsNullable = false;
				colvarFurnitureItemID.IsPrimaryKey = true;
				colvarFurnitureItemID.IsForeignKey = false;
				colvarFurnitureItemID.IsReadOnly = false;
				colvarFurnitureItemID.DefaultSetting = @"";
				colvarFurnitureItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFurnitureItemID);

				TableSchema.TableColumn colvarApartmentID = new TableSchema.TableColumn(schema);
				colvarApartmentID.ColumnName = "ApartmentID";
				colvarApartmentID.DataType = DbType.Int32;
				colvarApartmentID.MaxLength = 0;
				colvarApartmentID.AutoIncrement = false;
				colvarApartmentID.IsNullable = false;
				colvarApartmentID.IsPrimaryKey = false;
				colvarApartmentID.IsForeignKey = true;
				colvarApartmentID.IsReadOnly = false;
				colvarApartmentID.DefaultSetting = @"";
				colvarApartmentID.ForeignKeyTableName = "APT_Apartment";
				schema.Columns.Add(colvarApartmentID);

				TableSchema.TableColumn colvarFurniturePieceID = new TableSchema.TableColumn(schema);
				colvarFurniturePieceID.ColumnName = "FurniturePieceID";
				colvarFurniturePieceID.DataType = DbType.Int32;
				colvarFurniturePieceID.MaxLength = 0;
				colvarFurniturePieceID.AutoIncrement = false;
				colvarFurniturePieceID.IsNullable = false;
				colvarFurniturePieceID.IsPrimaryKey = false;
				colvarFurniturePieceID.IsForeignKey = true;
				colvarFurniturePieceID.IsReadOnly = false;
				colvarFurniturePieceID.DefaultSetting = @"";
				colvarFurniturePieceID.ForeignKeyTableName = "APT_FurniturePiece";
				schema.Columns.Add(colvarFurniturePieceID);

				TableSchema.TableColumn colvarProviderContactID = new TableSchema.TableColumn(schema);
				colvarProviderContactID.ColumnName = "ProviderContactID";
				colvarProviderContactID.DataType = DbType.Int32;
				colvarProviderContactID.MaxLength = 0;
				colvarProviderContactID.AutoIncrement = false;
				colvarProviderContactID.IsNullable = true;
				colvarProviderContactID.IsPrimaryKey = false;
				colvarProviderContactID.IsForeignKey = true;
				colvarProviderContactID.IsReadOnly = false;
				colvarProviderContactID.DefaultSetting = @"";
				colvarProviderContactID.ForeignKeyTableName = "APT_Contact";
				schema.Columns.Add(colvarProviderContactID);

				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "Price";
				colvarPrice.DataType = DbType.Currency;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = true;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);

				TableSchema.TableColumn colvarDateAdded = new TableSchema.TableColumn(schema);
				colvarDateAdded.ColumnName = "DateAdded";
				colvarDateAdded.DataType = DbType.DateTime;
				colvarDateAdded.MaxLength = 0;
				colvarDateAdded.AutoIncrement = false;
				colvarDateAdded.IsNullable = true;
				colvarDateAdded.IsPrimaryKey = false;
				colvarDateAdded.IsForeignKey = false;
				colvarDateAdded.IsReadOnly = false;
				colvarDateAdded.DefaultSetting = @"";
				colvarDateAdded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateAdded);

				TableSchema.TableColumn colvarDateRemoved = new TableSchema.TableColumn(schema);
				colvarDateRemoved.ColumnName = "DateRemoved";
				colvarDateRemoved.DataType = DbType.DateTime;
				colvarDateRemoved.MaxLength = 0;
				colvarDateRemoved.AutoIncrement = false;
				colvarDateRemoved.IsNullable = true;
				colvarDateRemoved.IsPrimaryKey = false;
				colvarDateRemoved.IsForeignKey = false;
				colvarDateRemoved.IsReadOnly = false;
				colvarDateRemoved.DefaultSetting = @"";
				colvarDateRemoved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateRemoved);

				TableSchema.TableColumn colvarOrderDate = new TableSchema.TableColumn(schema);
				colvarOrderDate.ColumnName = "OrderDate";
				colvarOrderDate.DataType = DbType.DateTime;
				colvarOrderDate.MaxLength = 0;
				colvarOrderDate.AutoIncrement = false;
				colvarOrderDate.IsNullable = true;
				colvarOrderDate.IsPrimaryKey = false;
				colvarOrderDate.IsForeignKey = false;
				colvarOrderDate.IsReadOnly = false;
				colvarOrderDate.DefaultSetting = @"";
				colvarOrderDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderDate);

				TableSchema.TableColumn colvarScheduleDeliveryDate = new TableSchema.TableColumn(schema);
				colvarScheduleDeliveryDate.ColumnName = "ScheduleDeliveryDate";
				colvarScheduleDeliveryDate.DataType = DbType.DateTime;
				colvarScheduleDeliveryDate.MaxLength = 0;
				colvarScheduleDeliveryDate.AutoIncrement = false;
				colvarScheduleDeliveryDate.IsNullable = true;
				colvarScheduleDeliveryDate.IsPrimaryKey = false;
				colvarScheduleDeliveryDate.IsForeignKey = false;
				colvarScheduleDeliveryDate.IsReadOnly = false;
				colvarScheduleDeliveryDate.DefaultSetting = @"";
				colvarScheduleDeliveryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarScheduleDeliveryDate);

				TableSchema.TableColumn colvarActualDeliveryDate = new TableSchema.TableColumn(schema);
				colvarActualDeliveryDate.ColumnName = "ActualDeliveryDate";
				colvarActualDeliveryDate.DataType = DbType.DateTime;
				colvarActualDeliveryDate.MaxLength = 0;
				colvarActualDeliveryDate.AutoIncrement = false;
				colvarActualDeliveryDate.IsNullable = true;
				colvarActualDeliveryDate.IsPrimaryKey = false;
				colvarActualDeliveryDate.IsForeignKey = false;
				colvarActualDeliveryDate.IsReadOnly = false;
				colvarActualDeliveryDate.DefaultSetting = @"";
				colvarActualDeliveryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualDeliveryDate);

				TableSchema.TableColumn colvarPickupScheduleDate = new TableSchema.TableColumn(schema);
				colvarPickupScheduleDate.ColumnName = "PickupScheduleDate";
				colvarPickupScheduleDate.DataType = DbType.DateTime;
				colvarPickupScheduleDate.MaxLength = 0;
				colvarPickupScheduleDate.AutoIncrement = false;
				colvarPickupScheduleDate.IsNullable = true;
				colvarPickupScheduleDate.IsPrimaryKey = false;
				colvarPickupScheduleDate.IsForeignKey = false;
				colvarPickupScheduleDate.IsReadOnly = false;
				colvarPickupScheduleDate.DefaultSetting = @"";
				colvarPickupScheduleDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPickupScheduleDate);

				TableSchema.TableColumn colvarActualPickupDate = new TableSchema.TableColumn(schema);
				colvarActualPickupDate.ColumnName = "ActualPickupDate";
				colvarActualPickupDate.DataType = DbType.DateTime;
				colvarActualPickupDate.MaxLength = 0;
				colvarActualPickupDate.AutoIncrement = false;
				colvarActualPickupDate.IsNullable = true;
				colvarActualPickupDate.IsPrimaryKey = false;
				colvarActualPickupDate.IsForeignKey = false;
				colvarActualPickupDate.IsReadOnly = false;
				colvarActualPickupDate.DefaultSetting = @"";
				colvarActualPickupDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActualPickupDate);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.String;
				colvarModifiedByID.MaxLength = 50;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = true;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_ApartmentFurnitureItems",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_ApartmentFurnitureItem LoadFrom(APT_ApartmentFurnitureItem item)
		{
			APT_ApartmentFurnitureItem result = new APT_ApartmentFurnitureItem();
			if (item.FurnitureItemID != default(int)) {
				result.LoadByKey(item.FurnitureItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int FurnitureItemID {
			get { return GetColumnValue<int>(Columns.FurnitureItemID); }
			set {
				SetColumnValue(Columns.FurnitureItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurnitureItemID));
			}
		}
		[DataMember]
		public int ApartmentID {
			get { return GetColumnValue<int>(Columns.ApartmentID); }
			set {
				SetColumnValue(Columns.ApartmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApartmentID));
			}
		}
		[DataMember]
		public int FurniturePieceID {
			get { return GetColumnValue<int>(Columns.FurniturePieceID); }
			set {
				SetColumnValue(Columns.FurniturePieceID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurniturePieceID));
			}
		}
		[DataMember]
		public int? ProviderContactID {
			get { return GetColumnValue<int?>(Columns.ProviderContactID); }
			set {
				SetColumnValue(Columns.ProviderContactID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProviderContactID));
			}
		}
		[DataMember]
		public decimal? Price {
			get { return GetColumnValue<decimal?>(Columns.Price); }
			set {
				SetColumnValue(Columns.Price, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Price));
			}
		}
		[DataMember]
		public DateTime? DateAdded {
			get { return GetColumnValue<DateTime?>(Columns.DateAdded); }
			set {
				SetColumnValue(Columns.DateAdded, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DateAdded));
			}
		}
		[DataMember]
		public DateTime? DateRemoved {
			get { return GetColumnValue<DateTime?>(Columns.DateRemoved); }
			set {
				SetColumnValue(Columns.DateRemoved, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DateRemoved));
			}
		}
		[DataMember]
		public DateTime? OrderDate {
			get { return GetColumnValue<DateTime?>(Columns.OrderDate); }
			set {
				SetColumnValue(Columns.OrderDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OrderDate));
			}
		}
		[DataMember]
		public DateTime? ScheduleDeliveryDate {
			get { return GetColumnValue<DateTime?>(Columns.ScheduleDeliveryDate); }
			set {
				SetColumnValue(Columns.ScheduleDeliveryDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ScheduleDeliveryDate));
			}
		}
		[DataMember]
		public DateTime? ActualDeliveryDate {
			get { return GetColumnValue<DateTime?>(Columns.ActualDeliveryDate); }
			set {
				SetColumnValue(Columns.ActualDeliveryDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActualDeliveryDate));
			}
		}
		[DataMember]
		public DateTime? PickupScheduleDate {
			get { return GetColumnValue<DateTime?>(Columns.PickupScheduleDate); }
			set {
				SetColumnValue(Columns.PickupScheduleDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PickupScheduleDate));
			}
		}
		[DataMember]
		public DateTime? ActualPickupDate {
			get { return GetColumnValue<DateTime?>(Columns.ActualPickupDate); }
			set {
				SetColumnValue(Columns.ActualPickupDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActualPickupDate));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string ModifiedByID {
			get { return GetColumnValue<string>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime? ModifiedDate {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Apartment _Apartment;
		//Relationship: FK_APT_FurniturePackageContents_APT_Apartment
		public APT_Apartment Apartment
		{
			get
			{
				if(_Apartment == null) {
					_Apartment = APT_Apartment.FetchByID(this.ApartmentID);
				}
				return _Apartment;
			}
			set
			{
				SetColumnValue("ApartmentID", value.ApartmentID);
				_Apartment = value;
			}
		}

		private APT_Contact _ProviderContact;
		//Relationship: FK_APT_FurniturePackageContents_APT_Contact
		public APT_Contact ProviderContact
		{
			get
			{
				if(_ProviderContact == null) {
					_ProviderContact = APT_Contact.FetchByID(this.ProviderContactID);
				}
				return _ProviderContact;
			}
			set
			{
				SetColumnValue("ProviderContactID", value.ContactID);
				_ProviderContact = value;
			}
		}

		private APT_FurniturePiece _FurniturePiece;
		//Relationship: FK_APT_FurniturePackageContents_APT_FurniturePiece
		public APT_FurniturePiece FurniturePiece
		{
			get
			{
				if(_FurniturePiece == null) {
					_FurniturePiece = APT_FurniturePiece.FetchByID(this.FurniturePieceID);
				}
				return _FurniturePiece;
			}
			set
			{
				SetColumnValue("FurniturePieceID", value.FurniturePieceID);
				_FurniturePiece = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return FurnitureItemID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn FurnitureItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApartmentIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn FurniturePieceIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ProviderContactIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PriceColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DateAddedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DateRemovedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn OrderDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ScheduleDeliveryDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ActualDeliveryDateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn PickupScheduleDateColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ActualPickupDateColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[16]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string FurnitureItemID = @"FurnitureItemID";
			public static readonly string ApartmentID = @"ApartmentID";
			public static readonly string FurniturePieceID = @"FurniturePieceID";
			public static readonly string ProviderContactID = @"ProviderContactID";
			public static readonly string Price = @"Price";
			public static readonly string DateAdded = @"DateAdded";
			public static readonly string DateRemoved = @"DateRemoved";
			public static readonly string OrderDate = @"OrderDate";
			public static readonly string ScheduleDeliveryDate = @"ScheduleDeliveryDate";
			public static readonly string ActualDeliveryDate = @"ActualDeliveryDate";
			public static readonly string PickupScheduleDate = @"PickupScheduleDate";
			public static readonly string ActualPickupDate = @"ActualPickupDate";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return FurnitureItemID; }
		}
		*/

		#region Foreign Collections

		private APT_BedCollection _APT_BedsCol;
		//Relationship: FK_APT_Bed_APT_ApartmentFurnitureItems
		public APT_BedCollection APT_BedsCol
		{
			get
			{
				if(_APT_BedsCol == null) {
					_APT_BedsCol = new APT_BedCollection();
					_APT_BedsCol.LoadAndCloseReader(APT_Bed.Query()
						.WHERE(APT_Bed.Columns.FurnitureItemID, FurnitureItemID).ExecuteReader());
				}
				return _APT_BedsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_ApartmentNote class.
	/// </summary>
	[DataContract]
	public partial class APT_ApartmentNoteCollection : ActiveList<APT_ApartmentNote, APT_ApartmentNoteCollection>
	{
		public static APT_ApartmentNoteCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ApartmentNoteCollection result = new APT_ApartmentNoteCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_ApartmentNote item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_ApartmentNote table.
	/// </summary>
	[DataContract]
	public partial class APT_ApartmentNote : ActiveRecord<APT_ApartmentNote>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_ApartmentNote()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_ApartmentNote", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarApartmentNoteID = new TableSchema.TableColumn(schema);
				colvarApartmentNoteID.ColumnName = "ApartmentNoteID";
				colvarApartmentNoteID.DataType = DbType.Int32;
				colvarApartmentNoteID.MaxLength = 0;
				colvarApartmentNoteID.AutoIncrement = true;
				colvarApartmentNoteID.IsNullable = false;
				colvarApartmentNoteID.IsPrimaryKey = true;
				colvarApartmentNoteID.IsForeignKey = false;
				colvarApartmentNoteID.IsReadOnly = false;
				colvarApartmentNoteID.DefaultSetting = @"";
				colvarApartmentNoteID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApartmentNoteID);

				TableSchema.TableColumn colvarApartmentID = new TableSchema.TableColumn(schema);
				colvarApartmentID.ColumnName = "ApartmentID";
				colvarApartmentID.DataType = DbType.Int32;
				colvarApartmentID.MaxLength = 0;
				colvarApartmentID.AutoIncrement = false;
				colvarApartmentID.IsNullable = false;
				colvarApartmentID.IsPrimaryKey = false;
				colvarApartmentID.IsForeignKey = true;
				colvarApartmentID.IsReadOnly = false;
				colvarApartmentID.DefaultSetting = @"";
				colvarApartmentID.ForeignKeyTableName = "APT_Apartment";
				schema.Columns.Add(colvarApartmentID);

				TableSchema.TableColumn colvarExpensePaymentID = new TableSchema.TableColumn(schema);
				colvarExpensePaymentID.ColumnName = "ExpensePaymentID";
				colvarExpensePaymentID.DataType = DbType.Int32;
				colvarExpensePaymentID.MaxLength = 0;
				colvarExpensePaymentID.AutoIncrement = false;
				colvarExpensePaymentID.IsNullable = true;
				colvarExpensePaymentID.IsPrimaryKey = false;
				colvarExpensePaymentID.IsForeignKey = true;
				colvarExpensePaymentID.IsReadOnly = false;
				colvarExpensePaymentID.DefaultSetting = @"";
				colvarExpensePaymentID.ForeignKeyTableName = "APT_ExpensePayment";
				schema.Columns.Add(colvarExpensePaymentID);

				TableSchema.TableColumn colvarBody = new TableSchema.TableColumn(schema);
				colvarBody.ColumnName = "Body";
				colvarBody.DataType = DbType.AnsiString;
				colvarBody.MaxLength = 2147483647;
				colvarBody.AutoIncrement = false;
				colvarBody.IsNullable = true;
				colvarBody.IsPrimaryKey = false;
				colvarBody.IsForeignKey = false;
				colvarBody.IsReadOnly = false;
				colvarBody.DefaultSetting = @"";
				colvarBody.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBody);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = true;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_ApartmentNote",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_ApartmentNote LoadFrom(APT_ApartmentNote item)
		{
			APT_ApartmentNote result = new APT_ApartmentNote();
			if (item.ApartmentNoteID != default(int)) {
				result.LoadByKey(item.ApartmentNoteID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ApartmentNoteID {
			get { return GetColumnValue<int>(Columns.ApartmentNoteID); }
			set {
				SetColumnValue(Columns.ApartmentNoteID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApartmentNoteID));
			}
		}
		[DataMember]
		public int ApartmentID {
			get { return GetColumnValue<int>(Columns.ApartmentID); }
			set {
				SetColumnValue(Columns.ApartmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApartmentID));
			}
		}
		[DataMember]
		public int? ExpensePaymentID {
			get { return GetColumnValue<int?>(Columns.ExpensePaymentID); }
			set {
				SetColumnValue(Columns.ExpensePaymentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExpensePaymentID));
			}
		}
		[DataMember]
		public string Body {
			get { return GetColumnValue<string>(Columns.Body); }
			set {
				SetColumnValue(Columns.Body, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Body));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedByDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Apartment _Apartment;
		//Relationship: FK_APT_ApartmentNote_APT_Apartment
		public APT_Apartment Apartment
		{
			get
			{
				if(_Apartment == null) {
					_Apartment = APT_Apartment.FetchByID(this.ApartmentID);
				}
				return _Apartment;
			}
			set
			{
				SetColumnValue("ApartmentID", value.ApartmentID);
				_Apartment = value;
			}
		}

		private APT_ExpensePayment _ExpensePayment;
		//Relationship: FK_APT_ApartmentNote_APT_ExpensePayment
		public APT_ExpensePayment ExpensePayment
		{
			get
			{
				if(_ExpensePayment == null) {
					_ExpensePayment = APT_ExpensePayment.FetchByID(this.ExpensePaymentID);
				}
				return _ExpensePayment;
			}
			set
			{
				SetColumnValue("ExpensePaymentID", value.ExpensePaymentID);
				_ExpensePayment = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ApartmentNoteID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ApartmentNoteIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApartmentIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ExpensePaymentIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BodyColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ApartmentNoteID = @"ApartmentNoteID";
			public static readonly string ApartmentID = @"ApartmentID";
			public static readonly string ExpensePaymentID = @"ExpensePaymentID";
			public static readonly string Body = @"Body";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedByDate = @"CreatedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ApartmentNoteID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the APT_ApartmentType class.
	/// </summary>
	[DataContract]
	public partial class APT_ApartmentTypeCollection : ActiveList<APT_ApartmentType, APT_ApartmentTypeCollection>
	{
		public static APT_ApartmentTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ApartmentTypeCollection result = new APT_ApartmentTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_ApartmentType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_ApartmentType table.
	/// </summary>
	[DataContract]
	public partial class APT_ApartmentType : ActiveRecord<APT_ApartmentType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum ApartmentTypeEnum : int
		{
		}

		//[DataMember]
		//public ApartmentTypeEnum ApartmentTypeCode
		//{
		//	get { return (ApartmentTypeEnum)ApartmentTypeID; }
		//	set { ApartmentTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_ApartmentType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_ApartmentType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarApartmentTypeID = new TableSchema.TableColumn(schema);
				colvarApartmentTypeID.ColumnName = "ApartmentTypeID";
				colvarApartmentTypeID.DataType = DbType.Int32;
				colvarApartmentTypeID.MaxLength = 0;
				colvarApartmentTypeID.AutoIncrement = true;
				colvarApartmentTypeID.IsNullable = false;
				colvarApartmentTypeID.IsPrimaryKey = true;
				colvarApartmentTypeID.IsForeignKey = false;
				colvarApartmentTypeID.IsReadOnly = false;
				colvarApartmentTypeID.DefaultSetting = @"";
				colvarApartmentTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApartmentTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_ApartmentType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_ApartmentType LoadFrom(APT_ApartmentType item)
		{
			APT_ApartmentType result = new APT_ApartmentType();
			if (item.ApartmentTypeID != default(int)) {
				result.LoadByKey(item.ApartmentTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ApartmentTypeID {
			get { return GetColumnValue<int>(Columns.ApartmentTypeID); }
			set {
				SetColumnValue(Columns.ApartmentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApartmentTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ApartmentTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ApartmentTypeID = @"ApartmentTypeID";
			public static readonly string Description = @"Description";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ApartmentTypeID; }
		}
		*/

		#region Foreign Collections

		private APT_ApartmentCollection _APT_ApartmentsCol;
		//Relationship: FK_APT_ApartmentType_APT_ApartmentType
		public APT_ApartmentCollection APT_ApartmentsCol
		{
			get
			{
				if(_APT_ApartmentsCol == null) {
					_APT_ApartmentsCol = new APT_ApartmentCollection();
					_APT_ApartmentsCol.LoadAndCloseReader(APT_Apartment.Query()
						.WHERE(APT_Apartment.Columns.ApartmentTypeID, ApartmentTypeID).ExecuteReader());
				}
				return _APT_ApartmentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_Bed class.
	/// </summary>
	[DataContract]
	public partial class APT_BedCollection : ActiveList<APT_Bed, APT_BedCollection>
	{
		public static APT_BedCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_BedCollection result = new APT_BedCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_Bed item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_Bed table.
	/// </summary>
	[DataContract]
	public partial class APT_Bed : ActiveRecord<APT_Bed>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_Bed()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_Bed", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBedID = new TableSchema.TableColumn(schema);
				colvarBedID.ColumnName = "BedID";
				colvarBedID.DataType = DbType.Int32;
				colvarBedID.MaxLength = 0;
				colvarBedID.AutoIncrement = true;
				colvarBedID.IsNullable = false;
				colvarBedID.IsPrimaryKey = true;
				colvarBedID.IsForeignKey = false;
				colvarBedID.IsReadOnly = false;
				colvarBedID.DefaultSetting = @"";
				colvarBedID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedID);

				TableSchema.TableColumn colvarBedTypeID = new TableSchema.TableColumn(schema);
				colvarBedTypeID.ColumnName = "BedTypeID";
				colvarBedTypeID.DataType = DbType.Int32;
				colvarBedTypeID.MaxLength = 0;
				colvarBedTypeID.AutoIncrement = false;
				colvarBedTypeID.IsNullable = true;
				colvarBedTypeID.IsPrimaryKey = false;
				colvarBedTypeID.IsForeignKey = false;
				colvarBedTypeID.IsReadOnly = false;
				colvarBedTypeID.DefaultSetting = @"";
				colvarBedTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedTypeID);

				TableSchema.TableColumn colvarBedroomID = new TableSchema.TableColumn(schema);
				colvarBedroomID.ColumnName = "BedroomID";
				colvarBedroomID.DataType = DbType.Int32;
				colvarBedroomID.MaxLength = 0;
				colvarBedroomID.AutoIncrement = false;
				colvarBedroomID.IsNullable = false;
				colvarBedroomID.IsPrimaryKey = false;
				colvarBedroomID.IsForeignKey = true;
				colvarBedroomID.IsReadOnly = false;
				colvarBedroomID.DefaultSetting = @"";
				colvarBedroomID.ForeignKeyTableName = "APT_Bedroom";
				schema.Columns.Add(colvarBedroomID);

				TableSchema.TableColumn colvarFurnitureItemID = new TableSchema.TableColumn(schema);
				colvarFurnitureItemID.ColumnName = "FurnitureItemID";
				colvarFurnitureItemID.DataType = DbType.Int32;
				colvarFurnitureItemID.MaxLength = 0;
				colvarFurnitureItemID.AutoIncrement = false;
				colvarFurnitureItemID.IsNullable = false;
				colvarFurnitureItemID.IsPrimaryKey = false;
				colvarFurnitureItemID.IsForeignKey = true;
				colvarFurnitureItemID.IsReadOnly = false;
				colvarFurnitureItemID.DefaultSetting = @"";
				colvarFurnitureItemID.ForeignKeyTableName = "APT_ApartmentFurnitureItems";
				schema.Columns.Add(colvarFurnitureItemID);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_Bed",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_Bed LoadFrom(APT_Bed item)
		{
			APT_Bed result = new APT_Bed();
			if (item.BedID != default(int)) {
				result.LoadByKey(item.BedID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BedID {
			get { return GetColumnValue<int>(Columns.BedID); }
			set {
				SetColumnValue(Columns.BedID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BedID));
			}
		}
		[DataMember]
		public int? BedTypeID {
			get { return GetColumnValue<int?>(Columns.BedTypeID); }
			set {
				SetColumnValue(Columns.BedTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BedTypeID));
			}
		}
		[DataMember]
		public int BedroomID {
			get { return GetColumnValue<int>(Columns.BedroomID); }
			set {
				SetColumnValue(Columns.BedroomID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BedroomID));
			}
		}
		[DataMember]
		public int FurnitureItemID {
			get { return GetColumnValue<int>(Columns.FurnitureItemID); }
			set {
				SetColumnValue(Columns.FurnitureItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurnitureItemID));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_ApartmentFurnitureItem _FurnitureItem;
		//Relationship: FK_APT_Bed_APT_ApartmentFurnitureItems
		public APT_ApartmentFurnitureItem FurnitureItem
		{
			get
			{
				if(_FurnitureItem == null) {
					_FurnitureItem = APT_ApartmentFurnitureItem.FetchByID(this.FurnitureItemID);
				}
				return _FurnitureItem;
			}
			set
			{
				SetColumnValue("FurnitureItemID", value.FurnitureItemID);
				_FurnitureItem = value;
			}
		}

		private APT_Bedroom _Bedroom;
		//Relationship: FK_APT_Bed_APT_Bedroom
		public APT_Bedroom Bedroom
		{
			get
			{
				if(_Bedroom == null) {
					_Bedroom = APT_Bedroom.FetchByID(this.BedroomID);
				}
				return _Bedroom;
			}
			set
			{
				SetColumnValue("BedroomID", value.BedroomID);
				_Bedroom = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BedID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BedIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BedTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BedroomIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn FurnitureItemIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BedID = @"BedID";
			public static readonly string BedTypeID = @"BedTypeID";
			public static readonly string BedroomID = @"BedroomID";
			public static readonly string FurnitureItemID = @"FurnitureItemID";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BedID; }
		}
		*/

		#region Foreign Collections

		private APT_OccupantCollection _APT_OccupantsCol;
		//Relationship: FK_APT_Occupant_APT_Bed
		public APT_OccupantCollection APT_OccupantsCol
		{
			get
			{
				if(_APT_OccupantsCol == null) {
					_APT_OccupantsCol = new APT_OccupantCollection();
					_APT_OccupantsCol.LoadAndCloseReader(APT_Occupant.Query()
						.WHERE(APT_Occupant.Columns.BedID, BedID).ExecuteReader());
				}
				return _APT_OccupantsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_Bedroom class.
	/// </summary>
	[DataContract]
	public partial class APT_BedroomCollection : ActiveList<APT_Bedroom, APT_BedroomCollection>
	{
		public static APT_BedroomCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_BedroomCollection result = new APT_BedroomCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_Bedroom item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_Bedroom table.
	/// </summary>
	[DataContract]
	public partial class APT_Bedroom : ActiveRecord<APT_Bedroom>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_Bedroom()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_Bedroom", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBedroomID = new TableSchema.TableColumn(schema);
				colvarBedroomID.ColumnName = "BedroomID";
				colvarBedroomID.DataType = DbType.Int32;
				colvarBedroomID.MaxLength = 0;
				colvarBedroomID.AutoIncrement = true;
				colvarBedroomID.IsNullable = false;
				colvarBedroomID.IsPrimaryKey = true;
				colvarBedroomID.IsForeignKey = false;
				colvarBedroomID.IsReadOnly = false;
				colvarBedroomID.DefaultSetting = @"";
				colvarBedroomID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedroomID);

				TableSchema.TableColumn colvarApartmentID = new TableSchema.TableColumn(schema);
				colvarApartmentID.ColumnName = "ApartmentID";
				colvarApartmentID.DataType = DbType.Int32;
				colvarApartmentID.MaxLength = 0;
				colvarApartmentID.AutoIncrement = false;
				colvarApartmentID.IsNullable = false;
				colvarApartmentID.IsPrimaryKey = false;
				colvarApartmentID.IsForeignKey = true;
				colvarApartmentID.IsReadOnly = false;
				colvarApartmentID.DefaultSetting = @"";
				colvarApartmentID.ForeignKeyTableName = "APT_Apartment";
				schema.Columns.Add(colvarApartmentID);

				TableSchema.TableColumn colvarCurrentMaxOccupancy = new TableSchema.TableColumn(schema);
				colvarCurrentMaxOccupancy.ColumnName = "CurrentMaxOccupancy";
				colvarCurrentMaxOccupancy.DataType = DbType.Int16;
				colvarCurrentMaxOccupancy.MaxLength = 0;
				colvarCurrentMaxOccupancy.AutoIncrement = false;
				colvarCurrentMaxOccupancy.IsNullable = true;
				colvarCurrentMaxOccupancy.IsPrimaryKey = false;
				colvarCurrentMaxOccupancy.IsForeignKey = false;
				colvarCurrentMaxOccupancy.IsReadOnly = false;
				colvarCurrentMaxOccupancy.DefaultSetting = @"";
				colvarCurrentMaxOccupancy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentMaxOccupancy);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = true;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_Bedroom",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_Bedroom LoadFrom(APT_Bedroom item)
		{
			APT_Bedroom result = new APT_Bedroom();
			if (item.BedroomID != default(int)) {
				result.LoadByKey(item.BedroomID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BedroomID {
			get { return GetColumnValue<int>(Columns.BedroomID); }
			set {
				SetColumnValue(Columns.BedroomID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BedroomID));
			}
		}
		[DataMember]
		public int ApartmentID {
			get { return GetColumnValue<int>(Columns.ApartmentID); }
			set {
				SetColumnValue(Columns.ApartmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApartmentID));
			}
		}
		[DataMember]
		public short? CurrentMaxOccupancy {
			get { return GetColumnValue<short?>(Columns.CurrentMaxOccupancy); }
			set {
				SetColumnValue(Columns.CurrentMaxOccupancy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CurrentMaxOccupancy));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Apartment _Apartment;
		//Relationship: FK_APT_Bedroom_APT_Apartment
		public APT_Apartment Apartment
		{
			get
			{
				if(_Apartment == null) {
					_Apartment = APT_Apartment.FetchByID(this.ApartmentID);
				}
				return _Apartment;
			}
			set
			{
				SetColumnValue("ApartmentID", value.ApartmentID);
				_Apartment = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BedroomID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BedroomIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApartmentIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CurrentMaxOccupancyColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BedroomID = @"BedroomID";
			public static readonly string ApartmentID = @"ApartmentID";
			public static readonly string CurrentMaxOccupancy = @"CurrentMaxOccupancy";
			public static readonly string Name = @"Name";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BedroomID; }
		}
		*/

		#region Foreign Collections

		private APT_BedCollection _APT_BedsCol;
		//Relationship: FK_APT_Bed_APT_Bedroom
		public APT_BedCollection APT_BedsCol
		{
			get
			{
				if(_APT_BedsCol == null) {
					_APT_BedsCol = new APT_BedCollection();
					_APT_BedsCol.LoadAndCloseReader(APT_Bed.Query()
						.WHERE(APT_Bed.Columns.BedroomID, BedroomID).ExecuteReader());
				}
				return _APT_BedsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_BedType class.
	/// </summary>
	[DataContract]
	public partial class APT_BedTypeCollection : ActiveList<APT_BedType, APT_BedTypeCollection>
	{
		public static APT_BedTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_BedTypeCollection result = new APT_BedTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_BedType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_BedType table.
	/// </summary>
	[DataContract]
	public partial class APT_BedType : ActiveRecord<APT_BedType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum BedTypeEnum : int
		{
			[EnumMember()] King = 1,
			[EnumMember()] Queen = 2,
			[EnumMember()] Full = 3,
			[EnumMember()] Twin = 4,
			[EnumMember()] Couch = 5,
		}

		//[DataMember]
		//public BedTypeEnum BedTypeCode
		//{
		//	get { return (BedTypeEnum)BedTypeID; }
		//	set { BedTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_BedType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_BedType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBedTypeID = new TableSchema.TableColumn(schema);
				colvarBedTypeID.ColumnName = "BedTypeID";
				colvarBedTypeID.DataType = DbType.Int32;
				colvarBedTypeID.MaxLength = 0;
				colvarBedTypeID.AutoIncrement = true;
				colvarBedTypeID.IsNullable = false;
				colvarBedTypeID.IsPrimaryKey = true;
				colvarBedTypeID.IsForeignKey = false;
				colvarBedTypeID.IsReadOnly = false;
				colvarBedTypeID.DefaultSetting = @"";
				colvarBedTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarCapacity = new TableSchema.TableColumn(schema);
				colvarCapacity.ColumnName = "Capacity";
				colvarCapacity.DataType = DbType.Int32;
				colvarCapacity.MaxLength = 0;
				colvarCapacity.AutoIncrement = false;
				colvarCapacity.IsNullable = false;
				colvarCapacity.IsPrimaryKey = false;
				colvarCapacity.IsForeignKey = false;
				colvarCapacity.IsReadOnly = false;
				colvarCapacity.DefaultSetting = @"";
				colvarCapacity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCapacity);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_BedType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_BedType LoadFrom(APT_BedType item)
		{
			APT_BedType result = new APT_BedType();
			if (item.BedTypeID != default(int)) {
				result.LoadByKey(item.BedTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BedTypeID {
			get { return GetColumnValue<int>(Columns.BedTypeID); }
			set {
				SetColumnValue(Columns.BedTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BedTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public int Capacity {
			get { return GetColumnValue<int>(Columns.Capacity); }
			set {
				SetColumnValue(Columns.Capacity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Capacity));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BedTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CapacityColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BedTypeID = @"BedTypeID";
			public static readonly string Description = @"Description";
			public static readonly string Capacity = @"Capacity";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BedTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the APT_Complaint class.
	/// </summary>
	[DataContract]
	public partial class APT_ComplaintCollection : ActiveList<APT_Complaint, APT_ComplaintCollection>
	{
		public static APT_ComplaintCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ComplaintCollection result = new APT_ComplaintCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_Complaint item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_Complaint table.
	/// </summary>
	[DataContract]
	public partial class APT_Complaint : ActiveRecord<APT_Complaint>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_Complaint()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_Complaint", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarComplaintID = new TableSchema.TableColumn(schema);
				colvarComplaintID.ColumnName = "ComplaintID";
				colvarComplaintID.DataType = DbType.Int32;
				colvarComplaintID.MaxLength = 0;
				colvarComplaintID.AutoIncrement = true;
				colvarComplaintID.IsNullable = false;
				colvarComplaintID.IsPrimaryKey = true;
				colvarComplaintID.IsForeignKey = false;
				colvarComplaintID.IsReadOnly = false;
				colvarComplaintID.DefaultSetting = @"";
				colvarComplaintID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComplaintID);

				TableSchema.TableColumn colvarOccupantID = new TableSchema.TableColumn(schema);
				colvarOccupantID.ColumnName = "OccupantID";
				colvarOccupantID.DataType = DbType.Int32;
				colvarOccupantID.MaxLength = 0;
				colvarOccupantID.AutoIncrement = false;
				colvarOccupantID.IsNullable = false;
				colvarOccupantID.IsPrimaryKey = false;
				colvarOccupantID.IsForeignKey = true;
				colvarOccupantID.IsReadOnly = false;
				colvarOccupantID.DefaultSetting = @"";
				colvarOccupantID.ForeignKeyTableName = "APT_Occupant";
				schema.Columns.Add(colvarOccupantID);

				TableSchema.TableColumn colvarDetails = new TableSchema.TableColumn(schema);
				colvarDetails.ColumnName = "Details";
				colvarDetails.DataType = DbType.AnsiString;
				colvarDetails.MaxLength = 2147483647;
				colvarDetails.AutoIncrement = false;
				colvarDetails.IsNullable = true;
				colvarDetails.IsPrimaryKey = false;
				colvarDetails.IsForeignKey = false;
				colvarDetails.IsReadOnly = false;
				colvarDetails.DefaultSetting = @"";
				colvarDetails.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetails);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_Complaint",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_Complaint LoadFrom(APT_Complaint item)
		{
			APT_Complaint result = new APT_Complaint();
			if (item.ComplaintID != default(int)) {
				result.LoadByKey(item.ComplaintID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ComplaintID {
			get { return GetColumnValue<int>(Columns.ComplaintID); }
			set {
				SetColumnValue(Columns.ComplaintID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ComplaintID));
			}
		}
		[DataMember]
		public int OccupantID {
			get { return GetColumnValue<int>(Columns.OccupantID); }
			set {
				SetColumnValue(Columns.OccupantID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OccupantID));
			}
		}
		[DataMember]
		public string Details {
			get { return GetColumnValue<string>(Columns.Details); }
			set {
				SetColumnValue(Columns.Details, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Details));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Occupant _Occupant;
		//Relationship: FK_APT_Complaint_RU_Recruits
		public APT_Occupant Occupant
		{
			get
			{
				if(_Occupant == null) {
					_Occupant = APT_Occupant.FetchByID(this.OccupantID);
				}
				return _Occupant;
			}
			set
			{
				SetColumnValue("OccupantID", value.OccupantID);
				_Occupant = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ComplaintID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ComplaintIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn OccupantIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DetailsColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ComplaintID = @"ComplaintID";
			public static readonly string OccupantID = @"OccupantID";
			public static readonly string Details = @"Details";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ComplaintID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the APT_Complex class.
	/// </summary>
	[DataContract]
	public partial class APT_ComplexCollection : ActiveList<APT_Complex, APT_ComplexCollection>
	{
		public static APT_ComplexCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ComplexCollection result = new APT_ComplexCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_Complex item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_Complex table.
	/// </summary>
	[DataContract]
	public partial class APT_Complex : ActiveRecord<APT_Complex>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_Complex()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_Complex", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarComplexID = new TableSchema.TableColumn(schema);
				colvarComplexID.ColumnName = "ComplexID";
				colvarComplexID.DataType = DbType.Int32;
				colvarComplexID.MaxLength = 0;
				colvarComplexID.AutoIncrement = true;
				colvarComplexID.IsNullable = false;
				colvarComplexID.IsPrimaryKey = true;
				colvarComplexID.IsForeignKey = false;
				colvarComplexID.IsReadOnly = false;
				colvarComplexID.DefaultSetting = @"";
				colvarComplexID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComplexID);

				TableSchema.TableColumn colvarManagementCompanyID = new TableSchema.TableColumn(schema);
				colvarManagementCompanyID.ColumnName = "ManagementCompanyID";
				colvarManagementCompanyID.DataType = DbType.Int32;
				colvarManagementCompanyID.MaxLength = 0;
				colvarManagementCompanyID.AutoIncrement = false;
				colvarManagementCompanyID.IsNullable = true;
				colvarManagementCompanyID.IsPrimaryKey = false;
				colvarManagementCompanyID.IsForeignKey = true;
				colvarManagementCompanyID.IsReadOnly = false;
				colvarManagementCompanyID.DefaultSetting = @"";
				colvarManagementCompanyID.ForeignKeyTableName = "APT_Contact";
				schema.Columns.Add(colvarManagementCompanyID);

				TableSchema.TableColumn colvarSeasonId = new TableSchema.TableColumn(schema);
				colvarSeasonId.ColumnName = "SeasonId";
				colvarSeasonId.DataType = DbType.Int32;
				colvarSeasonId.MaxLength = 0;
				colvarSeasonId.AutoIncrement = false;
				colvarSeasonId.IsNullable = true;
				colvarSeasonId.IsPrimaryKey = false;
				colvarSeasonId.IsForeignKey = true;
				colvarSeasonId.IsReadOnly = false;
				colvarSeasonId.DefaultSetting = @"";
				colvarSeasonId.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonId);

				TableSchema.TableColumn colvarGPOffice = new TableSchema.TableColumn(schema);
				colvarGPOffice.ColumnName = "GPOffice";
				colvarGPOffice.DataType = DbType.String;
				colvarGPOffice.MaxLength = 15;
				colvarGPOffice.AutoIncrement = false;
				colvarGPOffice.IsNullable = true;
				colvarGPOffice.IsPrimaryKey = false;
				colvarGPOffice.IsForeignKey = false;
				colvarGPOffice.IsReadOnly = false;
				colvarGPOffice.DefaultSetting = @"";
				colvarGPOffice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPOffice);

				TableSchema.TableColumn colvarContactID = new TableSchema.TableColumn(schema);
				colvarContactID.ColumnName = "ContactID";
				colvarContactID.DataType = DbType.Int32;
				colvarContactID.MaxLength = 0;
				colvarContactID.AutoIncrement = false;
				colvarContactID.IsNullable = true;
				colvarContactID.IsPrimaryKey = false;
				colvarContactID.IsForeignKey = true;
				colvarContactID.IsReadOnly = false;
				colvarContactID.DefaultSetting = @"";
				colvarContactID.ForeignKeyTableName = "APT_Contact";
				schema.Columns.Add(colvarContactID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_Complex",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_Complex LoadFrom(APT_Complex item)
		{
			APT_Complex result = new APT_Complex();
			if (item.ComplexID != default(int)) {
				result.LoadByKey(item.ComplexID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ComplexID {
			get { return GetColumnValue<int>(Columns.ComplexID); }
			set {
				SetColumnValue(Columns.ComplexID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ComplexID));
			}
		}
		[DataMember]
		public int? ManagementCompanyID {
			get { return GetColumnValue<int?>(Columns.ManagementCompanyID); }
			set {
				SetColumnValue(Columns.ManagementCompanyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagementCompanyID));
			}
		}
		[DataMember]
		public int? SeasonId {
			get { return GetColumnValue<int?>(Columns.SeasonId); }
			set {
				SetColumnValue(Columns.SeasonId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonId));
			}
		}
		[DataMember]
		public string GPOffice {
			get { return GetColumnValue<string>(Columns.GPOffice); }
			set {
				SetColumnValue(Columns.GPOffice, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPOffice));
			}
		}
		[DataMember]
		public int? ContactID {
			get { return GetColumnValue<int?>(Columns.ContactID); }
			set {
				SetColumnValue(Columns.ContactID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Contact _Contact;
		//Relationship: FK_APT_Complex_APT_Contact
		public APT_Contact Contact
		{
			get
			{
				if(_Contact == null) {
					_Contact = APT_Contact.FetchByID(this.ContactID);
				}
				return _Contact;
			}
			set
			{
				SetColumnValue("ContactID", value.ContactID);
				_Contact = value;
			}
		}

		private APT_Contact _ManagementCompany;
		//Relationship: FK_APT_Complex_APT_Contact1
		public APT_Contact ManagementCompany
		{
			get
			{
				if(_ManagementCompany == null) {
					_ManagementCompany = APT_Contact.FetchByID(this.ManagementCompanyID);
				}
				return _ManagementCompany;
			}
			set
			{
				SetColumnValue("ManagementCompanyID", value.ContactID);
				_ManagementCompany = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_APT_Complex_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonId);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonId", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ComplexID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ComplexIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ManagementCompanyIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SeasonIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GPOfficeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ContactIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ComplexID = @"ComplexID";
			public static readonly string ManagementCompanyID = @"ManagementCompanyID";
			public static readonly string SeasonId = @"SeasonId";
			public static readonly string GPOffice = @"GPOffice";
			public static readonly string ContactID = @"ContactID";
			public static readonly string Description = @"Description";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ComplexID; }
		}
		*/

		#region Foreign Collections

		private APT_ApartmentCollection _APT_ApartmentsCol;
		//Relationship: FK_APT_Apartment_APT_Complex
		public APT_ApartmentCollection APT_ApartmentsCol
		{
			get
			{
				if(_APT_ApartmentsCol == null) {
					_APT_ApartmentsCol = new APT_ApartmentCollection();
					_APT_ApartmentsCol.LoadAndCloseReader(APT_Apartment.Query()
						.WHERE(APT_Apartment.Columns.ComplexID, ComplexID).ExecuteReader());
				}
				return _APT_ApartmentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_Contact class.
	/// </summary>
	[DataContract]
	public partial class APT_ContactCollection : ActiveList<APT_Contact, APT_ContactCollection>
	{
		public static APT_ContactCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ContactCollection result = new APT_ContactCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_Contact item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_Contact table.
	/// </summary>
	[DataContract]
	public partial class APT_Contact : ActiveRecord<APT_Contact>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_Contact()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_Contact", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContactID = new TableSchema.TableColumn(schema);
				colvarContactID.ColumnName = "ContactID";
				colvarContactID.DataType = DbType.Int32;
				colvarContactID.MaxLength = 0;
				colvarContactID.AutoIncrement = true;
				colvarContactID.IsNullable = false;
				colvarContactID.IsPrimaryKey = true;
				colvarContactID.IsForeignKey = false;
				colvarContactID.IsReadOnly = false;
				colvarContactID.DefaultSetting = @"";
				colvarContactID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactID);

				TableSchema.TableColumn colvarContactTypeID = new TableSchema.TableColumn(schema);
				colvarContactTypeID.ColumnName = "ContactTypeID";
				colvarContactTypeID.DataType = DbType.Int32;
				colvarContactTypeID.MaxLength = 0;
				colvarContactTypeID.AutoIncrement = false;
				colvarContactTypeID.IsNullable = false;
				colvarContactTypeID.IsPrimaryKey = false;
				colvarContactTypeID.IsForeignKey = true;
				colvarContactTypeID.IsReadOnly = false;
				colvarContactTypeID.DefaultSetting = @"";
				colvarContactTypeID.ForeignKeyTableName = "APT_ContactType";
				schema.Columns.Add(colvarContactTypeID);

				TableSchema.TableColumn colvarCompanyName = new TableSchema.TableColumn(schema);
				colvarCompanyName.ColumnName = "CompanyName";
				colvarCompanyName.DataType = DbType.AnsiString;
				colvarCompanyName.MaxLength = 50;
				colvarCompanyName.AutoIncrement = false;
				colvarCompanyName.IsNullable = true;
				colvarCompanyName.IsPrimaryKey = false;
				colvarCompanyName.IsForeignKey = false;
				colvarCompanyName.IsReadOnly = false;
				colvarCompanyName.DefaultSetting = @"";
				colvarCompanyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyName);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.AnsiString;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarPrimaryPhone = new TableSchema.TableColumn(schema);
				colvarPrimaryPhone.ColumnName = "PrimaryPhone";
				colvarPrimaryPhone.DataType = DbType.AnsiString;
				colvarPrimaryPhone.MaxLength = 20;
				colvarPrimaryPhone.AutoIncrement = false;
				colvarPrimaryPhone.IsNullable = true;
				colvarPrimaryPhone.IsPrimaryKey = false;
				colvarPrimaryPhone.IsForeignKey = false;
				colvarPrimaryPhone.IsReadOnly = false;
				colvarPrimaryPhone.DefaultSetting = @"";
				colvarPrimaryPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrimaryPhone);

				TableSchema.TableColumn colvarSecondaryPhone = new TableSchema.TableColumn(schema);
				colvarSecondaryPhone.ColumnName = "SecondaryPhone";
				colvarSecondaryPhone.DataType = DbType.AnsiString;
				colvarSecondaryPhone.MaxLength = 20;
				colvarSecondaryPhone.AutoIncrement = false;
				colvarSecondaryPhone.IsNullable = true;
				colvarSecondaryPhone.IsPrimaryKey = false;
				colvarSecondaryPhone.IsForeignKey = false;
				colvarSecondaryPhone.IsReadOnly = false;
				colvarSecondaryPhone.DefaultSetting = @"";
				colvarSecondaryPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSecondaryPhone);

				TableSchema.TableColumn colvarFaxPhone = new TableSchema.TableColumn(schema);
				colvarFaxPhone.ColumnName = "FaxPhone";
				colvarFaxPhone.DataType = DbType.AnsiString;
				colvarFaxPhone.MaxLength = 20;
				colvarFaxPhone.AutoIncrement = false;
				colvarFaxPhone.IsNullable = true;
				colvarFaxPhone.IsPrimaryKey = false;
				colvarFaxPhone.IsForeignKey = false;
				colvarFaxPhone.IsReadOnly = false;
				colvarFaxPhone.DefaultSetting = @"";
				colvarFaxPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFaxPhone);

				TableSchema.TableColumn colvarPhysicalAddressID = new TableSchema.TableColumn(schema);
				colvarPhysicalAddressID.ColumnName = "PhysicalAddressID";
				colvarPhysicalAddressID.DataType = DbType.Int32;
				colvarPhysicalAddressID.MaxLength = 0;
				colvarPhysicalAddressID.AutoIncrement = false;
				colvarPhysicalAddressID.IsNullable = true;
				colvarPhysicalAddressID.IsPrimaryKey = false;
				colvarPhysicalAddressID.IsForeignKey = true;
				colvarPhysicalAddressID.IsReadOnly = false;
				colvarPhysicalAddressID.DefaultSetting = @"";
				colvarPhysicalAddressID.ForeignKeyTableName = "APT_Address";
				schema.Columns.Add(colvarPhysicalAddressID);

				TableSchema.TableColumn colvarMailingAddressID = new TableSchema.TableColumn(schema);
				colvarMailingAddressID.ColumnName = "MailingAddressID";
				colvarMailingAddressID.DataType = DbType.Int32;
				colvarMailingAddressID.MaxLength = 0;
				colvarMailingAddressID.AutoIncrement = false;
				colvarMailingAddressID.IsNullable = true;
				colvarMailingAddressID.IsPrimaryKey = false;
				colvarMailingAddressID.IsForeignKey = true;
				colvarMailingAddressID.IsReadOnly = false;
				colvarMailingAddressID.DefaultSetting = @"";
				colvarMailingAddressID.ForeignKeyTableName = "APT_Address";
				schema.Columns.Add(colvarMailingAddressID);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = -1;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarGPVendorID = new TableSchema.TableColumn(schema);
				colvarGPVendorID.ColumnName = "GPVendorID";
				colvarGPVendorID.DataType = DbType.AnsiString;
				colvarGPVendorID.MaxLength = 15;
				colvarGPVendorID.AutoIncrement = false;
				colvarGPVendorID.IsNullable = true;
				colvarGPVendorID.IsPrimaryKey = false;
				colvarGPVendorID.IsForeignKey = false;
				colvarGPVendorID.IsReadOnly = false;
				colvarGPVendorID.DefaultSetting = @"";
				colvarGPVendorID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPVendorID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 2147483647;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.String;
				colvarModifiedByID.MaxLength = 50;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = true;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_Contact",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_Contact LoadFrom(APT_Contact item)
		{
			APT_Contact result = new APT_Contact();
			if (item.ContactID != default(int)) {
				result.LoadByKey(item.ContactID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContactID {
			get { return GetColumnValue<int>(Columns.ContactID); }
			set {
				SetColumnValue(Columns.ContactID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactID));
			}
		}
		[DataMember]
		public int ContactTypeID {
			get { return GetColumnValue<int>(Columns.ContactTypeID); }
			set {
				SetColumnValue(Columns.ContactTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactTypeID));
			}
		}
		[DataMember]
		public string CompanyName {
			get { return GetColumnValue<string>(Columns.CompanyName); }
			set {
				SetColumnValue(Columns.CompanyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CompanyName));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public string PrimaryPhone {
			get { return GetColumnValue<string>(Columns.PrimaryPhone); }
			set {
				SetColumnValue(Columns.PrimaryPhone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrimaryPhone));
			}
		}
		[DataMember]
		public string SecondaryPhone {
			get { return GetColumnValue<string>(Columns.SecondaryPhone); }
			set {
				SetColumnValue(Columns.SecondaryPhone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SecondaryPhone));
			}
		}
		[DataMember]
		public string FaxPhone {
			get { return GetColumnValue<string>(Columns.FaxPhone); }
			set {
				SetColumnValue(Columns.FaxPhone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FaxPhone));
			}
		}
		[DataMember]
		public int? PhysicalAddressID {
			get { return GetColumnValue<int?>(Columns.PhysicalAddressID); }
			set {
				SetColumnValue(Columns.PhysicalAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhysicalAddressID));
			}
		}
		[DataMember]
		public int? MailingAddressID {
			get { return GetColumnValue<int?>(Columns.MailingAddressID); }
			set {
				SetColumnValue(Columns.MailingAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MailingAddressID));
			}
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set {
				SetColumnValue(Columns.Email, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Email));
			}
		}
		[DataMember]
		public string GPVendorID {
			get { return GetColumnValue<string>(Columns.GPVendorID); }
			set {
				SetColumnValue(Columns.GPVendorID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPVendorID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string ModifiedByID {
			get { return GetColumnValue<string>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime? ModifiedDate {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Address _MailingAddress;
		//Relationship: FK_APT_Contact_APT_Address
		public APT_Address MailingAddress
		{
			get
			{
				if(_MailingAddress == null) {
					_MailingAddress = APT_Address.FetchByID(this.MailingAddressID);
				}
				return _MailingAddress;
			}
			set
			{
				SetColumnValue("MailingAddressID", value.AddressID);
				_MailingAddress = value;
			}
		}

		private APT_ContactType _ContactType;
		//Relationship: FK_APT_Contact_APT_ContactType
		public APT_ContactType ContactType
		{
			get
			{
				if(_ContactType == null) {
					_ContactType = APT_ContactType.FetchByID(this.ContactTypeID);
				}
				return _ContactType;
			}
			set
			{
				SetColumnValue("ContactTypeID", value.ContactTypeID);
				_ContactType = value;
			}
		}

		private APT_Address _PhysicalAddress;
		//Relationship: FK_APT_ContactPhysical_APT_Contact
		public APT_Address PhysicalAddress
		{
			get
			{
				if(_PhysicalAddress == null) {
					_PhysicalAddress = APT_Address.FetchByID(this.PhysicalAddressID);
				}
				return _PhysicalAddress;
			}
			set
			{
				SetColumnValue("PhysicalAddressID", value.AddressID);
				_PhysicalAddress = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ContactID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContactIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContactTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CompanyNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PrimaryPhoneColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SecondaryPhoneColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn FaxPhoneColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PhysicalAddressIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn MailingAddressIDColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn GPVendorIDColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContactID = @"ContactID";
			public static readonly string ContactTypeID = @"ContactTypeID";
			public static readonly string CompanyName = @"CompanyName";
			public static readonly string Name = @"Name";
			public static readonly string PrimaryPhone = @"PrimaryPhone";
			public static readonly string SecondaryPhone = @"SecondaryPhone";
			public static readonly string FaxPhone = @"FaxPhone";
			public static readonly string PhysicalAddressID = @"PhysicalAddressID";
			public static readonly string MailingAddressID = @"MailingAddressID";
			public static readonly string Email = @"Email";
			public static readonly string GPVendorID = @"GPVendorID";
			public static readonly string Description = @"Description";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContactID; }
		}
		*/

		#region Foreign Collections

		private APT_ApartmentCollection _APT_ApartmentsCol;
		//Relationship: FK_APT_ApartmentManager_APT_Contact
		public APT_ApartmentCollection APT_ApartmentsCol
		{
			get
			{
				if(_APT_ApartmentsCol == null) {
					_APT_ApartmentsCol = new APT_ApartmentCollection();
					_APT_ApartmentsCol.LoadAndCloseReader(APT_Apartment.Query()
						.WHERE(APT_Apartment.Columns.ApartmentManagerID, ContactID).ExecuteReader());
				}
				return _APT_ApartmentsCol;
			}
		}

		private APT_ComplexCollection _APT_ComplicesCol;
		//Relationship: FK_APT_Complex_APT_Contact
		public APT_ComplexCollection APT_ComplicesCol
		{
			get
			{
				if(_APT_ComplicesCol == null) {
					_APT_ComplicesCol = new APT_ComplexCollection();
					_APT_ComplicesCol.LoadAndCloseReader(APT_Complex.Query()
						.WHERE(APT_Complex.Columns.ContactID, ContactID).ExecuteReader());
				}
				return _APT_ComplicesCol;
			}
		}

		private APT_ComplexCollection _APT_Complices02Col;
		//Relationship: FK_APT_Complex_APT_Contact1
		public APT_ComplexCollection APT_Complices02Col
		{
			get
			{
				if(_APT_Complices02Col == null) {
					_APT_Complices02Col = new APT_ComplexCollection();
					_APT_Complices02Col.LoadAndCloseReader(APT_Complex.Query()
						.WHERE(APT_Complex.Columns.ManagementCompanyID, ContactID).ExecuteReader());
				}
				return _APT_Complices02Col;
			}
		}

		private APT_DocumentCollection _APT_DocumentsCol;
		//Relationship: FK_APT_Document_APT_Contact
		public APT_DocumentCollection APT_DocumentsCol
		{
			get
			{
				if(_APT_DocumentsCol == null) {
					_APT_DocumentsCol = new APT_DocumentCollection();
					_APT_DocumentsCol.LoadAndCloseReader(APT_Document.Query()
						.WHERE(APT_Document.Columns.ContactID, ContactID).ExecuteReader());
				}
				return _APT_DocumentsCol;
			}
		}

		private APT_ApartmentFurnitureItemCollection _APT_ApartmentFurnitureItemsCol;
		//Relationship: FK_APT_FurniturePackageContents_APT_Contact
		public APT_ApartmentFurnitureItemCollection APT_ApartmentFurnitureItemsCol
		{
			get
			{
				if(_APT_ApartmentFurnitureItemsCol == null) {
					_APT_ApartmentFurnitureItemsCol = new APT_ApartmentFurnitureItemCollection();
					_APT_ApartmentFurnitureItemsCol.LoadAndCloseReader(APT_ApartmentFurnitureItem.Query()
						.WHERE(APT_ApartmentFurnitureItem.Columns.ProviderContactID, ContactID).ExecuteReader());
				}
				return _APT_ApartmentFurnitureItemsCol;
			}
		}

		private APT_ManagementCompanyCollection _APT_ManagementCompaniesCol;
		//Relationship: FK_APT_ManagementCompany_APT_Contact
		public APT_ManagementCompanyCollection APT_ManagementCompaniesCol
		{
			get
			{
				if(_APT_ManagementCompaniesCol == null) {
					_APT_ManagementCompaniesCol = new APT_ManagementCompanyCollection();
					_APT_ManagementCompaniesCol.LoadAndCloseReader(APT_ManagementCompany.Query()
						.WHERE(APT_ManagementCompany.Columns.ContactID, ContactID).ExecuteReader());
				}
				return _APT_ManagementCompaniesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_ContactType class.
	/// </summary>
	[DataContract]
	public partial class APT_ContactTypeCollection : ActiveList<APT_ContactType, APT_ContactTypeCollection>
	{
		public static APT_ContactTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ContactTypeCollection result = new APT_ContactTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_ContactType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_ContactType table.
	/// </summary>
	[DataContract]
	public partial class APT_ContactType : ActiveRecord<APT_ContactType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum ContactTypeEnum : int
		{
			[EnumMember()] Management_Company = 1,
			[EnumMember()] Apartment_Manager = 2,
			[EnumMember()] Furniture_Provider = 3,
			[EnumMember()] Utility_Company = 4,
		}

		//[DataMember]
		//public ContactTypeEnum ContactTypeCode
		//{
		//	get { return (ContactTypeEnum)ContactTypeID; }
		//	set { ContactTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_ContactType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_ContactType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContactTypeID = new TableSchema.TableColumn(schema);
				colvarContactTypeID.ColumnName = "ContactTypeID";
				colvarContactTypeID.DataType = DbType.Int32;
				colvarContactTypeID.MaxLength = 0;
				colvarContactTypeID.AutoIncrement = true;
				colvarContactTypeID.IsNullable = false;
				colvarContactTypeID.IsPrimaryKey = true;
				colvarContactTypeID.IsForeignKey = false;
				colvarContactTypeID.IsReadOnly = false;
				colvarContactTypeID.DefaultSetting = @"";
				colvarContactTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactTypeID);

				TableSchema.TableColumn colvarContactTypeDescription = new TableSchema.TableColumn(schema);
				colvarContactTypeDescription.ColumnName = "ContactTypeDescription";
				colvarContactTypeDescription.DataType = DbType.AnsiString;
				colvarContactTypeDescription.MaxLength = 50;
				colvarContactTypeDescription.AutoIncrement = false;
				colvarContactTypeDescription.IsNullable = true;
				colvarContactTypeDescription.IsPrimaryKey = false;
				colvarContactTypeDescription.IsForeignKey = false;
				colvarContactTypeDescription.IsReadOnly = false;
				colvarContactTypeDescription.DefaultSetting = @"";
				colvarContactTypeDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactTypeDescription);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_ContactType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_ContactType LoadFrom(APT_ContactType item)
		{
			APT_ContactType result = new APT_ContactType();
			if (item.ContactTypeID != default(int)) {
				result.LoadByKey(item.ContactTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContactTypeID {
			get { return GetColumnValue<int>(Columns.ContactTypeID); }
			set {
				SetColumnValue(Columns.ContactTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactTypeID));
			}
		}
		[DataMember]
		public string ContactTypeDescription {
			get { return GetColumnValue<string>(Columns.ContactTypeDescription); }
			set {
				SetColumnValue(Columns.ContactTypeDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactTypeDescription));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ContactTypeDescription;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContactTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContactTypeDescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContactTypeID = @"ContactTypeID";
			public static readonly string ContactTypeDescription = @"ContactTypeDescription";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContactTypeID; }
		}
		*/

		#region Foreign Collections

		private APT_ContactCollection _APT_ContactsCol;
		//Relationship: FK_APT_Contact_APT_ContactType
		public APT_ContactCollection APT_ContactsCol
		{
			get
			{
				if(_APT_ContactsCol == null) {
					_APT_ContactsCol = new APT_ContactCollection();
					_APT_ContactsCol.LoadAndCloseReader(APT_Contact.Query()
						.WHERE(APT_Contact.Columns.ContactTypeID, ContactTypeID).ExecuteReader());
				}
				return _APT_ContactsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_DefaultFurniturePackage class.
	/// </summary>
	[DataContract]
	public partial class APT_DefaultFurniturePackageCollection : ActiveList<APT_DefaultFurniturePackage, APT_DefaultFurniturePackageCollection>
	{
		public static APT_DefaultFurniturePackageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_DefaultFurniturePackageCollection result = new APT_DefaultFurniturePackageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_DefaultFurniturePackage item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_DefaultFurniturePackage table.
	/// </summary>
	[DataContract]
	public partial class APT_DefaultFurniturePackage : ActiveRecord<APT_DefaultFurniturePackage>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_DefaultFurniturePackage()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_DefaultFurniturePackage", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDefaultPackageID = new TableSchema.TableColumn(schema);
				colvarDefaultPackageID.ColumnName = "DefaultPackageID";
				colvarDefaultPackageID.DataType = DbType.Int32;
				colvarDefaultPackageID.MaxLength = 0;
				colvarDefaultPackageID.AutoIncrement = true;
				colvarDefaultPackageID.IsNullable = false;
				colvarDefaultPackageID.IsPrimaryKey = true;
				colvarDefaultPackageID.IsForeignKey = false;
				colvarDefaultPackageID.IsReadOnly = false;
				colvarDefaultPackageID.DefaultSetting = @"";
				colvarDefaultPackageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultPackageID);

				TableSchema.TableColumn colvarPackageName = new TableSchema.TableColumn(schema);
				colvarPackageName.ColumnName = "PackageName";
				colvarPackageName.DataType = DbType.String;
				colvarPackageName.MaxLength = 50;
				colvarPackageName.AutoIncrement = false;
				colvarPackageName.IsNullable = false;
				colvarPackageName.IsPrimaryKey = false;
				colvarPackageName.IsForeignKey = false;
				colvarPackageName.IsReadOnly = false;
				colvarPackageName.DefaultSetting = @"";
				colvarPackageName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackageName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_DefaultFurniturePackage",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_DefaultFurniturePackage LoadFrom(APT_DefaultFurniturePackage item)
		{
			APT_DefaultFurniturePackage result = new APT_DefaultFurniturePackage();
			if (item.DefaultPackageID != default(int)) {
				result.LoadByKey(item.DefaultPackageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DefaultPackageID {
			get { return GetColumnValue<int>(Columns.DefaultPackageID); }
			set {
				SetColumnValue(Columns.DefaultPackageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultPackageID));
			}
		}
		[DataMember]
		public string PackageName {
			get { return GetColumnValue<string>(Columns.PackageName); }
			set {
				SetColumnValue(Columns.PackageName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PackageName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return PackageName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DefaultPackageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PackageNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DefaultPackageID = @"DefaultPackageID";
			public static readonly string PackageName = @"PackageName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DefaultPackageID; }
		}
		*/

		#region Foreign Collections

		private APT_ApartmentCollection _APT_ApartmentsCol;
		//Relationship: FK_APT_Apartment_APT_DefaultFurniturePackage
		public APT_ApartmentCollection APT_ApartmentsCol
		{
			get
			{
				if(_APT_ApartmentsCol == null) {
					_APT_ApartmentsCol = new APT_ApartmentCollection();
					_APT_ApartmentsCol.LoadAndCloseReader(APT_Apartment.Query()
						.WHERE(APT_Apartment.Columns.FurniturePackageID, DefaultPackageID).ExecuteReader());
				}
				return _APT_ApartmentsCol;
			}
		}

		private APT_DefaultFurniturePackageContentCollection _APT_DefaultFurniturePackageContentsCol;
		//Relationship: FK_APT_DefaultFurniturePackageContents_APT_DefaultFurniturePackage
		public APT_DefaultFurniturePackageContentCollection APT_DefaultFurniturePackageContentsCol
		{
			get
			{
				if(_APT_DefaultFurniturePackageContentsCol == null) {
					_APT_DefaultFurniturePackageContentsCol = new APT_DefaultFurniturePackageContentCollection();
					_APT_DefaultFurniturePackageContentsCol.LoadAndCloseReader(APT_DefaultFurniturePackageContent.Query()
						.WHERE(APT_DefaultFurniturePackageContent.Columns.DefaultPackageID, DefaultPackageID).ExecuteReader());
				}
				return _APT_DefaultFurniturePackageContentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_DefaultFurniturePackageContent class.
	/// </summary>
	[DataContract]
	public partial class APT_DefaultFurniturePackageContentCollection : ActiveList<APT_DefaultFurniturePackageContent, APT_DefaultFurniturePackageContentCollection>
	{
		public static APT_DefaultFurniturePackageContentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_DefaultFurniturePackageContentCollection result = new APT_DefaultFurniturePackageContentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_DefaultFurniturePackageContent item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_DefaultFurniturePackageContents table.
	/// </summary>
	[DataContract]
	public partial class APT_DefaultFurniturePackageContent : ActiveRecord<APT_DefaultFurniturePackageContent>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_DefaultFurniturePackageContent()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_DefaultFurniturePackageContents", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContentID = new TableSchema.TableColumn(schema);
				colvarContentID.ColumnName = "ContentID";
				colvarContentID.DataType = DbType.Int32;
				colvarContentID.MaxLength = 0;
				colvarContentID.AutoIncrement = true;
				colvarContentID.IsNullable = false;
				colvarContentID.IsPrimaryKey = true;
				colvarContentID.IsForeignKey = false;
				colvarContentID.IsReadOnly = false;
				colvarContentID.DefaultSetting = @"";
				colvarContentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContentID);

				TableSchema.TableColumn colvarDefaultPackageID = new TableSchema.TableColumn(schema);
				colvarDefaultPackageID.ColumnName = "DefaultPackageID";
				colvarDefaultPackageID.DataType = DbType.Int32;
				colvarDefaultPackageID.MaxLength = 0;
				colvarDefaultPackageID.AutoIncrement = false;
				colvarDefaultPackageID.IsNullable = false;
				colvarDefaultPackageID.IsPrimaryKey = false;
				colvarDefaultPackageID.IsForeignKey = true;
				colvarDefaultPackageID.IsReadOnly = false;
				colvarDefaultPackageID.DefaultSetting = @"";
				colvarDefaultPackageID.ForeignKeyTableName = "APT_DefaultFurniturePackage";
				schema.Columns.Add(colvarDefaultPackageID);

				TableSchema.TableColumn colvarIncludedPieceID = new TableSchema.TableColumn(schema);
				colvarIncludedPieceID.ColumnName = "IncludedPieceID";
				colvarIncludedPieceID.DataType = DbType.Int32;
				colvarIncludedPieceID.MaxLength = 0;
				colvarIncludedPieceID.AutoIncrement = false;
				colvarIncludedPieceID.IsNullable = false;
				colvarIncludedPieceID.IsPrimaryKey = false;
				colvarIncludedPieceID.IsForeignKey = true;
				colvarIncludedPieceID.IsReadOnly = false;
				colvarIncludedPieceID.DefaultSetting = @"";
				colvarIncludedPieceID.ForeignKeyTableName = "APT_FurniturePiece";
				schema.Columns.Add(colvarIncludedPieceID);

				TableSchema.TableColumn colvarIncludedPieceQty = new TableSchema.TableColumn(schema);
				colvarIncludedPieceQty.ColumnName = "IncludedPieceQty";
				colvarIncludedPieceQty.DataType = DbType.Int32;
				colvarIncludedPieceQty.MaxLength = 0;
				colvarIncludedPieceQty.AutoIncrement = false;
				colvarIncludedPieceQty.IsNullable = true;
				colvarIncludedPieceQty.IsPrimaryKey = false;
				colvarIncludedPieceQty.IsForeignKey = false;
				colvarIncludedPieceQty.IsReadOnly = false;
				colvarIncludedPieceQty.DefaultSetting = @"";
				colvarIncludedPieceQty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncludedPieceQty);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_DefaultFurniturePackageContents",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_DefaultFurniturePackageContent LoadFrom(APT_DefaultFurniturePackageContent item)
		{
			APT_DefaultFurniturePackageContent result = new APT_DefaultFurniturePackageContent();
			if (item.ContentID != default(int)) {
				result.LoadByKey(item.ContentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContentID {
			get { return GetColumnValue<int>(Columns.ContentID); }
			set {
				SetColumnValue(Columns.ContentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentID));
			}
		}
		[DataMember]
		public int DefaultPackageID {
			get { return GetColumnValue<int>(Columns.DefaultPackageID); }
			set {
				SetColumnValue(Columns.DefaultPackageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultPackageID));
			}
		}
		[DataMember]
		public int IncludedPieceID {
			get { return GetColumnValue<int>(Columns.IncludedPieceID); }
			set {
				SetColumnValue(Columns.IncludedPieceID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncludedPieceID));
			}
		}
		[DataMember]
		public int? IncludedPieceQty {
			get { return GetColumnValue<int?>(Columns.IncludedPieceQty); }
			set {
				SetColumnValue(Columns.IncludedPieceQty, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncludedPieceQty));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_FurniturePiece _IncludedPiece;
		//Relationship: FK_APT_DefaultFurniturePackage_APT_FurniturePiece
		public APT_FurniturePiece IncludedPiece
		{
			get
			{
				if(_IncludedPiece == null) {
					_IncludedPiece = APT_FurniturePiece.FetchByID(this.IncludedPieceID);
				}
				return _IncludedPiece;
			}
			set
			{
				SetColumnValue("IncludedPieceID", value.FurniturePieceID);
				_IncludedPiece = value;
			}
		}

		private APT_DefaultFurniturePackage _DefaultPackage;
		//Relationship: FK_APT_DefaultFurniturePackageContents_APT_DefaultFurniturePackage
		public APT_DefaultFurniturePackage DefaultPackage
		{
			get
			{
				if(_DefaultPackage == null) {
					_DefaultPackage = APT_DefaultFurniturePackage.FetchByID(this.DefaultPackageID);
				}
				return _DefaultPackage;
			}
			set
			{
				SetColumnValue("DefaultPackageID", value.DefaultPackageID);
				_DefaultPackage = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ContentID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DefaultPackageIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IncludedPieceIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IncludedPieceQtyColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContentID = @"ContentID";
			public static readonly string DefaultPackageID = @"DefaultPackageID";
			public static readonly string IncludedPieceID = @"IncludedPieceID";
			public static readonly string IncludedPieceQty = @"IncludedPieceQty";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the APT_Document class.
	/// </summary>
	[DataContract]
	public partial class APT_DocumentCollection : ActiveList<APT_Document, APT_DocumentCollection>
	{
		public static APT_DocumentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_DocumentCollection result = new APT_DocumentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_Document item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_Document table.
	/// </summary>
	[DataContract]
	public partial class APT_Document : ActiveRecord<APT_Document>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_Document()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_Document", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDocumentID = new TableSchema.TableColumn(schema);
				colvarDocumentID.ColumnName = "DocumentID";
				colvarDocumentID.DataType = DbType.Int32;
				colvarDocumentID.MaxLength = 0;
				colvarDocumentID.AutoIncrement = true;
				colvarDocumentID.IsNullable = false;
				colvarDocumentID.IsPrimaryKey = true;
				colvarDocumentID.IsForeignKey = false;
				colvarDocumentID.IsReadOnly = false;
				colvarDocumentID.DefaultSetting = @"";
				colvarDocumentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentID);

				TableSchema.TableColumn colvarDocumentName = new TableSchema.TableColumn(schema);
				colvarDocumentName.ColumnName = "DocumentName";
				colvarDocumentName.DataType = DbType.AnsiString;
				colvarDocumentName.MaxLength = 20;
				colvarDocumentName.AutoIncrement = false;
				colvarDocumentName.IsNullable = false;
				colvarDocumentName.IsPrimaryKey = false;
				colvarDocumentName.IsForeignKey = false;
				colvarDocumentName.IsReadOnly = false;
				colvarDocumentName.DefaultSetting = @"";
				colvarDocumentName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentName);

				TableSchema.TableColumn colvarDocumentTypeID = new TableSchema.TableColumn(schema);
				colvarDocumentTypeID.ColumnName = "DocumentTypeID";
				colvarDocumentTypeID.DataType = DbType.Int32;
				colvarDocumentTypeID.MaxLength = 0;
				colvarDocumentTypeID.AutoIncrement = false;
				colvarDocumentTypeID.IsNullable = false;
				colvarDocumentTypeID.IsPrimaryKey = false;
				colvarDocumentTypeID.IsForeignKey = true;
				colvarDocumentTypeID.IsReadOnly = false;
				colvarDocumentTypeID.DefaultSetting = @"";
				colvarDocumentTypeID.ForeignKeyTableName = "APT_DocumentType";
				schema.Columns.Add(colvarDocumentTypeID);

				TableSchema.TableColumn colvarContactID = new TableSchema.TableColumn(schema);
				colvarContactID.ColumnName = "ContactID";
				colvarContactID.DataType = DbType.Int32;
				colvarContactID.MaxLength = 0;
				colvarContactID.AutoIncrement = false;
				colvarContactID.IsNullable = true;
				colvarContactID.IsPrimaryKey = false;
				colvarContactID.IsForeignKey = true;
				colvarContactID.IsReadOnly = false;
				colvarContactID.DefaultSetting = @"";
				colvarContactID.ForeignKeyTableName = "APT_Contact";
				schema.Columns.Add(colvarContactID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 2147483647;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarBody = new TableSchema.TableColumn(schema);
				colvarBody.ColumnName = "Body";
				colvarBody.DataType = DbType.Binary;
				colvarBody.MaxLength = 2147483647;
				colvarBody.AutoIncrement = false;
				colvarBody.IsNullable = true;
				colvarBody.IsPrimaryKey = false;
				colvarBody.IsForeignKey = false;
				colvarBody.IsReadOnly = false;
				colvarBody.DefaultSetting = @"";
				colvarBody.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBody);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_Document",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_Document LoadFrom(APT_Document item)
		{
			APT_Document result = new APT_Document();
			if (item.DocumentID != default(int)) {
				result.LoadByKey(item.DocumentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DocumentID {
			get { return GetColumnValue<int>(Columns.DocumentID); }
			set {
				SetColumnValue(Columns.DocumentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocumentID));
			}
		}
		[DataMember]
		public string DocumentName {
			get { return GetColumnValue<string>(Columns.DocumentName); }
			set {
				SetColumnValue(Columns.DocumentName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocumentName));
			}
		}
		[DataMember]
		public int DocumentTypeID {
			get { return GetColumnValue<int>(Columns.DocumentTypeID); }
			set {
				SetColumnValue(Columns.DocumentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocumentTypeID));
			}
		}
		[DataMember]
		public int? ContactID {
			get { return GetColumnValue<int?>(Columns.ContactID); }
			set {
				SetColumnValue(Columns.ContactID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public byte[] Body {
			get { return GetColumnValue<byte[]>(Columns.Body); }
			set {
				SetColumnValue(Columns.Body, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Body));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Contact _Contact;
		//Relationship: FK_APT_Document_APT_Contact
		public APT_Contact Contact
		{
			get
			{
				if(_Contact == null) {
					_Contact = APT_Contact.FetchByID(this.ContactID);
				}
				return _Contact;
			}
			set
			{
				SetColumnValue("ContactID", value.ContactID);
				_Contact = value;
			}
		}

		private APT_DocumentType _DocumentType;
		//Relationship: FK_APT_Document_APT_DocumentType
		public APT_DocumentType DocumentType
		{
			get
			{
				if(_DocumentType == null) {
					_DocumentType = APT_DocumentType.FetchByID(this.DocumentTypeID);
				}
				return _DocumentType;
			}
			set
			{
				SetColumnValue("DocumentTypeID", value.DocumentTypeID);
				_DocumentType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return DocumentName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DocumentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DocumentNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DocumentTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ContactIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn BodyColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DocumentID = @"DocumentID";
			public static readonly string DocumentName = @"DocumentName";
			public static readonly string DocumentTypeID = @"DocumentTypeID";
			public static readonly string ContactID = @"ContactID";
			public static readonly string Description = @"Description";
			public static readonly string Body = @"Body";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DocumentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the APT_DocumentType class.
	/// </summary>
	[DataContract]
	public partial class APT_DocumentTypeCollection : ActiveList<APT_DocumentType, APT_DocumentTypeCollection>
	{
		public static APT_DocumentTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_DocumentTypeCollection result = new APT_DocumentTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_DocumentType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_DocumentType table.
	/// </summary>
	[DataContract]
	public partial class APT_DocumentType : ActiveRecord<APT_DocumentType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum DocumentTypeEnum : int
		{
		}

		//[DataMember]
		//public DocumentTypeEnum DocumentTypeCode
		//{
		//	get { return (DocumentTypeEnum)DocumentTypeID; }
		//	set { DocumentTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_DocumentType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_DocumentType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDocumentTypeID = new TableSchema.TableColumn(schema);
				colvarDocumentTypeID.ColumnName = "DocumentTypeID";
				colvarDocumentTypeID.DataType = DbType.Int32;
				colvarDocumentTypeID.MaxLength = 0;
				colvarDocumentTypeID.AutoIncrement = true;
				colvarDocumentTypeID.IsNullable = false;
				colvarDocumentTypeID.IsPrimaryKey = true;
				colvarDocumentTypeID.IsForeignKey = false;
				colvarDocumentTypeID.IsReadOnly = false;
				colvarDocumentTypeID.DefaultSetting = @"";
				colvarDocumentTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocumentTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_DocumentType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_DocumentType LoadFrom(APT_DocumentType item)
		{
			APT_DocumentType result = new APT_DocumentType();
			if (item.DocumentTypeID != default(int)) {
				result.LoadByKey(item.DocumentTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DocumentTypeID {
			get { return GetColumnValue<int>(Columns.DocumentTypeID); }
			set {
				SetColumnValue(Columns.DocumentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocumentTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DocumentTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DocumentTypeID = @"DocumentTypeID";
			public static readonly string Description = @"Description";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DocumentTypeID; }
		}
		*/

		#region Foreign Collections

		private APT_DocumentCollection _APT_DocumentsCol;
		//Relationship: FK_APT_Document_APT_DocumentType
		public APT_DocumentCollection APT_DocumentsCol
		{
			get
			{
				if(_APT_DocumentsCol == null) {
					_APT_DocumentsCol = new APT_DocumentCollection();
					_APT_DocumentsCol.LoadAndCloseReader(APT_Document.Query()
						.WHERE(APT_Document.Columns.DocumentTypeID, DocumentTypeID).ExecuteReader());
				}
				return _APT_DocumentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_Expense class.
	/// </summary>
	[DataContract]
	public partial class APT_ExpenseCollection : ActiveList<APT_Expense, APT_ExpenseCollection>
	{
		public static APT_ExpenseCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ExpenseCollection result = new APT_ExpenseCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_Expense item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_Expense table.
	/// </summary>
	[DataContract]
	public partial class APT_Expense : ActiveRecord<APT_Expense>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_Expense()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_Expense", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarExpenseID = new TableSchema.TableColumn(schema);
				colvarExpenseID.ColumnName = "ExpenseID";
				colvarExpenseID.DataType = DbType.Int32;
				colvarExpenseID.MaxLength = 0;
				colvarExpenseID.AutoIncrement = true;
				colvarExpenseID.IsNullable = false;
				colvarExpenseID.IsPrimaryKey = true;
				colvarExpenseID.IsForeignKey = false;
				colvarExpenseID.IsReadOnly = false;
				colvarExpenseID.DefaultSetting = @"";
				colvarExpenseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpenseID);

				TableSchema.TableColumn colvarApartmentID = new TableSchema.TableColumn(schema);
				colvarApartmentID.ColumnName = "ApartmentID";
				colvarApartmentID.DataType = DbType.Int32;
				colvarApartmentID.MaxLength = 0;
				colvarApartmentID.AutoIncrement = false;
				colvarApartmentID.IsNullable = false;
				colvarApartmentID.IsPrimaryKey = false;
				colvarApartmentID.IsForeignKey = true;
				colvarApartmentID.IsReadOnly = false;
				colvarApartmentID.DefaultSetting = @"";
				colvarApartmentID.ForeignKeyTableName = "APT_Apartment";
				schema.Columns.Add(colvarApartmentID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = true;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = -1;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarExpenseTypeID = new TableSchema.TableColumn(schema);
				colvarExpenseTypeID.ColumnName = "ExpenseTypeID";
				colvarExpenseTypeID.DataType = DbType.Int32;
				colvarExpenseTypeID.MaxLength = 0;
				colvarExpenseTypeID.AutoIncrement = false;
				colvarExpenseTypeID.IsNullable = true;
				colvarExpenseTypeID.IsPrimaryKey = false;
				colvarExpenseTypeID.IsForeignKey = true;
				colvarExpenseTypeID.IsReadOnly = false;
				colvarExpenseTypeID.DefaultSetting = @"";
				colvarExpenseTypeID.ForeignKeyTableName = "APT_ExpenseType";
				schema.Columns.Add(colvarExpenseTypeID);

				TableSchema.TableColumn colvarBillingCompanyID = new TableSchema.TableColumn(schema);
				colvarBillingCompanyID.ColumnName = "BillingCompanyID";
				colvarBillingCompanyID.DataType = DbType.Int32;
				colvarBillingCompanyID.MaxLength = 0;
				colvarBillingCompanyID.AutoIncrement = false;
				colvarBillingCompanyID.IsNullable = true;
				colvarBillingCompanyID.IsPrimaryKey = false;
				colvarBillingCompanyID.IsForeignKey = false;
				colvarBillingCompanyID.IsReadOnly = false;
				colvarBillingCompanyID.DefaultSetting = @"";
				colvarBillingCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingCompanyID);

				TableSchema.TableColumn colvarAccountNumber = new TableSchema.TableColumn(schema);
				colvarAccountNumber.ColumnName = "AccountNumber";
				colvarAccountNumber.DataType = DbType.String;
				colvarAccountNumber.MaxLength = 50;
				colvarAccountNumber.AutoIncrement = false;
				colvarAccountNumber.IsNullable = true;
				colvarAccountNumber.IsPrimaryKey = false;
				colvarAccountNumber.IsForeignKey = false;
				colvarAccountNumber.IsReadOnly = false;
				colvarAccountNumber.DefaultSetting = @"";
				colvarAccountNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountNumber);

				TableSchema.TableColumn colvarDefaultAmount = new TableSchema.TableColumn(schema);
				colvarDefaultAmount.ColumnName = "DefaultAmount";
				colvarDefaultAmount.DataType = DbType.Currency;
				colvarDefaultAmount.MaxLength = 0;
				colvarDefaultAmount.AutoIncrement = false;
				colvarDefaultAmount.IsNullable = true;
				colvarDefaultAmount.IsPrimaryKey = false;
				colvarDefaultAmount.IsForeignKey = false;
				colvarDefaultAmount.IsReadOnly = false;
				colvarDefaultAmount.DefaultSetting = @"";
				colvarDefaultAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultAmount);

				TableSchema.TableColumn colvarRecurringBillStartDate = new TableSchema.TableColumn(schema);
				colvarRecurringBillStartDate.ColumnName = "RecurringBillStartDate";
				colvarRecurringBillStartDate.DataType = DbType.DateTime;
				colvarRecurringBillStartDate.MaxLength = 0;
				colvarRecurringBillStartDate.AutoIncrement = false;
				colvarRecurringBillStartDate.IsNullable = true;
				colvarRecurringBillStartDate.IsPrimaryKey = false;
				colvarRecurringBillStartDate.IsForeignKey = false;
				colvarRecurringBillStartDate.IsReadOnly = false;
				colvarRecurringBillStartDate.DefaultSetting = @"";
				colvarRecurringBillStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecurringBillStartDate);

				TableSchema.TableColumn colvarRecurringBillEndDate = new TableSchema.TableColumn(schema);
				colvarRecurringBillEndDate.ColumnName = "RecurringBillEndDate";
				colvarRecurringBillEndDate.DataType = DbType.DateTime;
				colvarRecurringBillEndDate.MaxLength = 0;
				colvarRecurringBillEndDate.AutoIncrement = false;
				colvarRecurringBillEndDate.IsNullable = true;
				colvarRecurringBillEndDate.IsPrimaryKey = false;
				colvarRecurringBillEndDate.IsForeignKey = false;
				colvarRecurringBillEndDate.IsReadOnly = false;
				colvarRecurringBillEndDate.DefaultSetting = @"";
				colvarRecurringBillEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecurringBillEndDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.String;
				colvarModifiedByID.MaxLength = 50;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = true;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_Expense",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_Expense LoadFrom(APT_Expense item)
		{
			APT_Expense result = new APT_Expense();
			if (item.ExpenseID != default(int)) {
				result.LoadByKey(item.ExpenseID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ExpenseID {
			get { return GetColumnValue<int>(Columns.ExpenseID); }
			set {
				SetColumnValue(Columns.ExpenseID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExpenseID));
			}
		}
		[DataMember]
		public int ApartmentID {
			get { return GetColumnValue<int>(Columns.ApartmentID); }
			set {
				SetColumnValue(Columns.ApartmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApartmentID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public int? ExpenseTypeID {
			get { return GetColumnValue<int?>(Columns.ExpenseTypeID); }
			set {
				SetColumnValue(Columns.ExpenseTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExpenseTypeID));
			}
		}
		[DataMember]
		public int? BillingCompanyID {
			get { return GetColumnValue<int?>(Columns.BillingCompanyID); }
			set {
				SetColumnValue(Columns.BillingCompanyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BillingCompanyID));
			}
		}
		[DataMember]
		public string AccountNumber {
			get { return GetColumnValue<string>(Columns.AccountNumber); }
			set {
				SetColumnValue(Columns.AccountNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountNumber));
			}
		}
		[DataMember]
		public decimal? DefaultAmount {
			get { return GetColumnValue<decimal?>(Columns.DefaultAmount); }
			set {
				SetColumnValue(Columns.DefaultAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DefaultAmount));
			}
		}
		[DataMember]
		public DateTime? RecurringBillStartDate {
			get { return GetColumnValue<DateTime?>(Columns.RecurringBillStartDate); }
			set {
				SetColumnValue(Columns.RecurringBillStartDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecurringBillStartDate));
			}
		}
		[DataMember]
		public DateTime? RecurringBillEndDate {
			get { return GetColumnValue<DateTime?>(Columns.RecurringBillEndDate); }
			set {
				SetColumnValue(Columns.RecurringBillEndDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecurringBillEndDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string ModifiedByID {
			get { return GetColumnValue<string>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime? ModifiedDate {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Apartment _Apartment;
		//Relationship: FK_APT_Expense_APT_Apartment
		public APT_Apartment Apartment
		{
			get
			{
				if(_Apartment == null) {
					_Apartment = APT_Apartment.FetchByID(this.ApartmentID);
				}
				return _Apartment;
			}
			set
			{
				SetColumnValue("ApartmentID", value.ApartmentID);
				_Apartment = value;
			}
		}

		private APT_ExpenseType _ExpenseType;
		//Relationship: FK_APT_Expense_APT_ExpenseType
		public APT_ExpenseType ExpenseType
		{
			get
			{
				if(_ExpenseType == null) {
					_ExpenseType = APT_ExpenseType.FetchByID(this.ExpenseTypeID);
				}
				return _ExpenseType;
			}
			set
			{
				SetColumnValue("ExpenseTypeID", value.ExpenseTypeID);
				_ExpenseType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ExpenseID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ExpenseIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApartmentIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ExpenseTypeIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn BillingCompanyIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AccountNumberColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DefaultAmountColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn RecurringBillStartDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn RecurringBillEndDateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ExpenseID = @"ExpenseID";
			public static readonly string ApartmentID = @"ApartmentID";
			public static readonly string Name = @"Name";
			public static readonly string Description = @"Description";
			public static readonly string ExpenseTypeID = @"ExpenseTypeID";
			public static readonly string BillingCompanyID = @"BillingCompanyID";
			public static readonly string AccountNumber = @"AccountNumber";
			public static readonly string DefaultAmount = @"DefaultAmount";
			public static readonly string RecurringBillStartDate = @"RecurringBillStartDate";
			public static readonly string RecurringBillEndDate = @"RecurringBillEndDate";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ExpenseID; }
		}
		*/

		#region Foreign Collections

		private APT_ExpenseBillCollection _APT_ExpenseBillsCol;
		//Relationship: FK_APT_ExpenseBill_APT_Expense
		public APT_ExpenseBillCollection APT_ExpenseBillsCol
		{
			get
			{
				if(_APT_ExpenseBillsCol == null) {
					_APT_ExpenseBillsCol = new APT_ExpenseBillCollection();
					_APT_ExpenseBillsCol.LoadAndCloseReader(APT_ExpenseBill.Query()
						.WHERE(APT_ExpenseBill.Columns.ExpenseID, ExpenseID).ExecuteReader());
				}
				return _APT_ExpenseBillsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_ExpenseBill class.
	/// </summary>
	[DataContract]
	public partial class APT_ExpenseBillCollection : ActiveList<APT_ExpenseBill, APT_ExpenseBillCollection>
	{
		public static APT_ExpenseBillCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ExpenseBillCollection result = new APT_ExpenseBillCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_ExpenseBill item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_ExpenseBill table.
	/// </summary>
	[DataContract]
	public partial class APT_ExpenseBill : ActiveRecord<APT_ExpenseBill>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_ExpenseBill()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_ExpenseBill", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarExpenseBillID = new TableSchema.TableColumn(schema);
				colvarExpenseBillID.ColumnName = "ExpenseBillID";
				colvarExpenseBillID.DataType = DbType.Int32;
				colvarExpenseBillID.MaxLength = 0;
				colvarExpenseBillID.AutoIncrement = true;
				colvarExpenseBillID.IsNullable = false;
				colvarExpenseBillID.IsPrimaryKey = true;
				colvarExpenseBillID.IsForeignKey = false;
				colvarExpenseBillID.IsReadOnly = false;
				colvarExpenseBillID.DefaultSetting = @"";
				colvarExpenseBillID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpenseBillID);

				TableSchema.TableColumn colvarExpenseID = new TableSchema.TableColumn(schema);
				colvarExpenseID.ColumnName = "ExpenseID";
				colvarExpenseID.DataType = DbType.Int32;
				colvarExpenseID.MaxLength = 0;
				colvarExpenseID.AutoIncrement = false;
				colvarExpenseID.IsNullable = false;
				colvarExpenseID.IsPrimaryKey = false;
				colvarExpenseID.IsForeignKey = true;
				colvarExpenseID.IsReadOnly = false;
				colvarExpenseID.DefaultSetting = @"";
				colvarExpenseID.ForeignKeyTableName = "APT_Expense";
				schema.Columns.Add(colvarExpenseID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = true;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarDateDue = new TableSchema.TableColumn(schema);
				colvarDateDue.ColumnName = "DateDue";
				colvarDateDue.DataType = DbType.DateTime;
				colvarDateDue.MaxLength = 0;
				colvarDateDue.AutoIncrement = false;
				colvarDateDue.IsNullable = true;
				colvarDateDue.IsPrimaryKey = false;
				colvarDateDue.IsForeignKey = false;
				colvarDateDue.IsReadOnly = false;
				colvarDateDue.DefaultSetting = @"";
				colvarDateDue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateDue);

				TableSchema.TableColumn colvarDatePaidInFull = new TableSchema.TableColumn(schema);
				colvarDatePaidInFull.ColumnName = "DatePaidInFull";
				colvarDatePaidInFull.DataType = DbType.DateTime;
				colvarDatePaidInFull.MaxLength = 0;
				colvarDatePaidInFull.AutoIncrement = false;
				colvarDatePaidInFull.IsNullable = true;
				colvarDatePaidInFull.IsPrimaryKey = false;
				colvarDatePaidInFull.IsForeignKey = false;
				colvarDatePaidInFull.IsReadOnly = false;
				colvarDatePaidInFull.DefaultSetting = @"";
				colvarDatePaidInFull.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDatePaidInFull);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_ExpenseBill",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_ExpenseBill LoadFrom(APT_ExpenseBill item)
		{
			APT_ExpenseBill result = new APT_ExpenseBill();
			if (item.ExpenseBillID != default(int)) {
				result.LoadByKey(item.ExpenseBillID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ExpenseBillID {
			get { return GetColumnValue<int>(Columns.ExpenseBillID); }
			set {
				SetColumnValue(Columns.ExpenseBillID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExpenseBillID));
			}
		}
		[DataMember]
		public int ExpenseID {
			get { return GetColumnValue<int>(Columns.ExpenseID); }
			set {
				SetColumnValue(Columns.ExpenseID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExpenseID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public int? SeasonID {
			get { return GetColumnValue<int?>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public DateTime? DateDue {
			get { return GetColumnValue<DateTime?>(Columns.DateDue); }
			set {
				SetColumnValue(Columns.DateDue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DateDue));
			}
		}
		[DataMember]
		public DateTime? DatePaidInFull {
			get { return GetColumnValue<DateTime?>(Columns.DatePaidInFull); }
			set {
				SetColumnValue(Columns.DatePaidInFull, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DatePaidInFull));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Expense _Expense;
		//Relationship: FK_APT_ExpenseBill_APT_Expense
		public APT_Expense Expense
		{
			get
			{
				if(_Expense == null) {
					_Expense = APT_Expense.FetchByID(this.ExpenseID);
				}
				return _Expense;
			}
			set
			{
				SetColumnValue("ExpenseID", value.ExpenseID);
				_Expense = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_APT_ExpenseBill_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ExpenseBillID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ExpenseBillIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ExpenseIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DateDueColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DatePaidInFullColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ExpenseBillID = @"ExpenseBillID";
			public static readonly string ExpenseID = @"ExpenseID";
			public static readonly string Amount = @"Amount";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string DateDue = @"DateDue";
			public static readonly string DatePaidInFull = @"DatePaidInFull";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ExpenseBillID; }
		}
		*/

		#region Foreign Collections

		private APT_ExpensePaymentCollection _APT_ExpensePaymentsCol;
		//Relationship: FK_APT_ExpensePayment_APT_ExpenseBill
		public APT_ExpensePaymentCollection APT_ExpensePaymentsCol
		{
			get
			{
				if(_APT_ExpensePaymentsCol == null) {
					_APT_ExpensePaymentsCol = new APT_ExpensePaymentCollection();
					_APT_ExpensePaymentsCol.LoadAndCloseReader(APT_ExpensePayment.Query()
						.WHERE(APT_ExpensePayment.Columns.ExpenseBillID, ExpenseBillID).ExecuteReader());
				}
				return _APT_ExpensePaymentsCol;
			}
		}

		private APT_RecruitChargeCollection _APT_RecruitChargesCol;
		//Relationship: FK_APT_RecruitCharge_APT_ExpenseBill
		public APT_RecruitChargeCollection APT_RecruitChargesCol
		{
			get
			{
				if(_APT_RecruitChargesCol == null) {
					_APT_RecruitChargesCol = new APT_RecruitChargeCollection();
					_APT_RecruitChargesCol.LoadAndCloseReader(APT_RecruitCharge.Query()
						.WHERE(APT_RecruitCharge.Columns.ExpenseBillID, ExpenseBillID).ExecuteReader());
				}
				return _APT_RecruitChargesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_ExpensePayment class.
	/// </summary>
	[DataContract]
	public partial class APT_ExpensePaymentCollection : ActiveList<APT_ExpensePayment, APT_ExpensePaymentCollection>
	{
		public static APT_ExpensePaymentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ExpensePaymentCollection result = new APT_ExpensePaymentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_ExpensePayment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_ExpensePayment table.
	/// </summary>
	[DataContract]
	public partial class APT_ExpensePayment : ActiveRecord<APT_ExpensePayment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_ExpensePayment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_ExpensePayment", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarExpensePaymentID = new TableSchema.TableColumn(schema);
				colvarExpensePaymentID.ColumnName = "ExpensePaymentID";
				colvarExpensePaymentID.DataType = DbType.Int32;
				colvarExpensePaymentID.MaxLength = 0;
				colvarExpensePaymentID.AutoIncrement = true;
				colvarExpensePaymentID.IsNullable = false;
				colvarExpensePaymentID.IsPrimaryKey = true;
				colvarExpensePaymentID.IsForeignKey = false;
				colvarExpensePaymentID.IsReadOnly = false;
				colvarExpensePaymentID.DefaultSetting = @"";
				colvarExpensePaymentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpensePaymentID);

				TableSchema.TableColumn colvarExpenseBillID = new TableSchema.TableColumn(schema);
				colvarExpenseBillID.ColumnName = "ExpenseBillID";
				colvarExpenseBillID.DataType = DbType.Int32;
				colvarExpenseBillID.MaxLength = 0;
				colvarExpenseBillID.AutoIncrement = false;
				colvarExpenseBillID.IsNullable = false;
				colvarExpenseBillID.IsPrimaryKey = false;
				colvarExpenseBillID.IsForeignKey = true;
				colvarExpenseBillID.IsReadOnly = false;
				colvarExpenseBillID.DefaultSetting = @"";
				colvarExpenseBillID.ForeignKeyTableName = "APT_ExpenseBill";
				schema.Columns.Add(colvarExpenseBillID);

				TableSchema.TableColumn colvarDatePaid = new TableSchema.TableColumn(schema);
				colvarDatePaid.ColumnName = "DatePaid";
				colvarDatePaid.DataType = DbType.DateTime;
				colvarDatePaid.MaxLength = 0;
				colvarDatePaid.AutoIncrement = false;
				colvarDatePaid.IsNullable = true;
				colvarDatePaid.IsPrimaryKey = false;
				colvarDatePaid.IsForeignKey = false;
				colvarDatePaid.IsReadOnly = false;
				colvarDatePaid.DefaultSetting = @"";
				colvarDatePaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDatePaid);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = true;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarGPCheckID = new TableSchema.TableColumn(schema);
				colvarGPCheckID.ColumnName = "GPCheckID";
				colvarGPCheckID.DataType = DbType.Int32;
				colvarGPCheckID.MaxLength = 0;
				colvarGPCheckID.AutoIncrement = false;
				colvarGPCheckID.IsNullable = true;
				colvarGPCheckID.IsPrimaryKey = false;
				colvarGPCheckID.IsForeignKey = false;
				colvarGPCheckID.IsReadOnly = false;
				colvarGPCheckID.DefaultSetting = @"";
				colvarGPCheckID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPCheckID);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_ExpensePayment",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_ExpensePayment LoadFrom(APT_ExpensePayment item)
		{
			APT_ExpensePayment result = new APT_ExpensePayment();
			if (item.ExpensePaymentID != default(int)) {
				result.LoadByKey(item.ExpensePaymentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ExpensePaymentID {
			get { return GetColumnValue<int>(Columns.ExpensePaymentID); }
			set {
				SetColumnValue(Columns.ExpensePaymentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExpensePaymentID));
			}
		}
		[DataMember]
		public int ExpenseBillID {
			get { return GetColumnValue<int>(Columns.ExpenseBillID); }
			set {
				SetColumnValue(Columns.ExpenseBillID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExpenseBillID));
			}
		}
		[DataMember]
		public DateTime? DatePaid {
			get { return GetColumnValue<DateTime?>(Columns.DatePaid); }
			set {
				SetColumnValue(Columns.DatePaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DatePaid));
			}
		}
		[DataMember]
		public decimal? Amount {
			get { return GetColumnValue<decimal?>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public int? GPCheckID {
			get { return GetColumnValue<int?>(Columns.GPCheckID); }
			set {
				SetColumnValue(Columns.GPCheckID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPCheckID));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_ExpenseBill _ExpenseBill;
		//Relationship: FK_APT_ExpensePayment_APT_ExpenseBill
		public APT_ExpenseBill ExpenseBill
		{
			get
			{
				if(_ExpenseBill == null) {
					_ExpenseBill = APT_ExpenseBill.FetchByID(this.ExpenseBillID);
				}
				return _ExpenseBill;
			}
			set
			{
				SetColumnValue("ExpenseBillID", value.ExpenseBillID);
				_ExpenseBill = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ExpensePaymentID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ExpensePaymentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ExpenseBillIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DatePaidColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPCheckIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ExpensePaymentID = @"ExpensePaymentID";
			public static readonly string ExpenseBillID = @"ExpenseBillID";
			public static readonly string DatePaid = @"DatePaid";
			public static readonly string Amount = @"Amount";
			public static readonly string GPCheckID = @"GPCheckID";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ExpensePaymentID; }
		}
		*/

		#region Foreign Collections

		private APT_ApartmentNoteCollection _APT_ApartmentNotesCol;
		//Relationship: FK_APT_ApartmentNote_APT_ExpensePayment
		public APT_ApartmentNoteCollection APT_ApartmentNotesCol
		{
			get
			{
				if(_APT_ApartmentNotesCol == null) {
					_APT_ApartmentNotesCol = new APT_ApartmentNoteCollection();
					_APT_ApartmentNotesCol.LoadAndCloseReader(APT_ApartmentNote.Query()
						.WHERE(APT_ApartmentNote.Columns.ExpensePaymentID, ExpensePaymentID).ExecuteReader());
				}
				return _APT_ApartmentNotesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_ExpenseType class.
	/// </summary>
	[DataContract]
	public partial class APT_ExpenseTypeCollection : ActiveList<APT_ExpenseType, APT_ExpenseTypeCollection>
	{
		public static APT_ExpenseTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ExpenseTypeCollection result = new APT_ExpenseTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_ExpenseType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_ExpenseType table.
	/// </summary>
	[DataContract]
	public partial class APT_ExpenseType : ActiveRecord<APT_ExpenseType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum ExpenseTypeEnum : int
		{
			[EnumMember()] Utilities = 1,
			[EnumMember()] Rent = 2,
			[EnumMember()] Furniture = 3,
		}

		//[DataMember]
		//public ExpenseTypeEnum ExpenseTypeCode
		//{
		//	get { return (ExpenseTypeEnum)ExpenseTypeID; }
		//	set { ExpenseTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_ExpenseType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_ExpenseType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarExpenseTypeID = new TableSchema.TableColumn(schema);
				colvarExpenseTypeID.ColumnName = "ExpenseTypeID";
				colvarExpenseTypeID.DataType = DbType.Int32;
				colvarExpenseTypeID.MaxLength = 0;
				colvarExpenseTypeID.AutoIncrement = true;
				colvarExpenseTypeID.IsNullable = false;
				colvarExpenseTypeID.IsPrimaryKey = true;
				colvarExpenseTypeID.IsForeignKey = false;
				colvarExpenseTypeID.IsReadOnly = false;
				colvarExpenseTypeID.DefaultSetting = @"";
				colvarExpenseTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpenseTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsRecurring = new TableSchema.TableColumn(schema);
				colvarIsRecurring.ColumnName = "IsRecurring";
				colvarIsRecurring.DataType = DbType.Boolean;
				colvarIsRecurring.MaxLength = 0;
				colvarIsRecurring.AutoIncrement = false;
				colvarIsRecurring.IsNullable = true;
				colvarIsRecurring.IsPrimaryKey = false;
				colvarIsRecurring.IsForeignKey = false;
				colvarIsRecurring.IsReadOnly = false;
				colvarIsRecurring.DefaultSetting = @"";
				colvarIsRecurring.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsRecurring);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_ExpenseType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_ExpenseType LoadFrom(APT_ExpenseType item)
		{
			APT_ExpenseType result = new APT_ExpenseType();
			if (item.ExpenseTypeID != default(int)) {
				result.LoadByKey(item.ExpenseTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ExpenseTypeID {
			get { return GetColumnValue<int>(Columns.ExpenseTypeID); }
			set {
				SetColumnValue(Columns.ExpenseTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExpenseTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool? IsRecurring {
			get { return GetColumnValue<bool?>(Columns.IsRecurring); }
			set {
				SetColumnValue(Columns.IsRecurring, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsRecurring));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ExpenseTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsRecurringColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ExpenseTypeID = @"ExpenseTypeID";
			public static readonly string Description = @"Description";
			public static readonly string IsRecurring = @"IsRecurring";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ExpenseTypeID; }
		}
		*/

		#region Foreign Collections

		private APT_ExpenseCollection _APT_ExpensesCol;
		//Relationship: FK_APT_Expense_APT_ExpenseType
		public APT_ExpenseCollection APT_ExpensesCol
		{
			get
			{
				if(_APT_ExpensesCol == null) {
					_APT_ExpensesCol = new APT_ExpenseCollection();
					_APT_ExpensesCol.LoadAndCloseReader(APT_Expense.Query()
						.WHERE(APT_Expense.Columns.ExpenseTypeID, ExpenseTypeID).ExecuteReader());
				}
				return _APT_ExpensesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_FurniturePackage class.
	/// </summary>
	[DataContract]
	public partial class APT_FurniturePackageCollection : ActiveList<APT_FurniturePackage, APT_FurniturePackageCollection>
	{
		public static APT_FurniturePackageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_FurniturePackageCollection result = new APT_FurniturePackageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_FurniturePackage item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_FurniturePackage table.
	/// </summary>
	[DataContract]
	public partial class APT_FurniturePackage : ActiveRecord<APT_FurniturePackage>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_FurniturePackage()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_FurniturePackage", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarFurniturePackageID = new TableSchema.TableColumn(schema);
				colvarFurniturePackageID.ColumnName = "FurniturePackageID";
				colvarFurniturePackageID.DataType = DbType.Int32;
				colvarFurniturePackageID.MaxLength = 0;
				colvarFurniturePackageID.AutoIncrement = true;
				colvarFurniturePackageID.IsNullable = false;
				colvarFurniturePackageID.IsPrimaryKey = true;
				colvarFurniturePackageID.IsForeignKey = false;
				colvarFurniturePackageID.IsReadOnly = false;
				colvarFurniturePackageID.DefaultSetting = @"";
				colvarFurniturePackageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFurniturePackageID);

				TableSchema.TableColumn colvarApartmentID = new TableSchema.TableColumn(schema);
				colvarApartmentID.ColumnName = "ApartmentID";
				colvarApartmentID.DataType = DbType.Int32;
				colvarApartmentID.MaxLength = 0;
				colvarApartmentID.AutoIncrement = false;
				colvarApartmentID.IsNullable = false;
				colvarApartmentID.IsPrimaryKey = false;
				colvarApartmentID.IsForeignKey = false;
				colvarApartmentID.IsReadOnly = false;
				colvarApartmentID.DefaultSetting = @"";
				colvarApartmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApartmentID);

				TableSchema.TableColumn colvarProviderContactID = new TableSchema.TableColumn(schema);
				colvarProviderContactID.ColumnName = "ProviderContactID";
				colvarProviderContactID.DataType = DbType.Int32;
				colvarProviderContactID.MaxLength = 0;
				colvarProviderContactID.AutoIncrement = false;
				colvarProviderContactID.IsNullable = true;
				colvarProviderContactID.IsPrimaryKey = false;
				colvarProviderContactID.IsForeignKey = false;
				colvarProviderContactID.IsReadOnly = false;
				colvarProviderContactID.DefaultSetting = @"";
				colvarProviderContactID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProviderContactID);

				TableSchema.TableColumn colvarPackageType = new TableSchema.TableColumn(schema);
				colvarPackageType.ColumnName = "PackageType";
				colvarPackageType.DataType = DbType.AnsiString;
				colvarPackageType.MaxLength = 10;
				colvarPackageType.AutoIncrement = false;
				colvarPackageType.IsNullable = true;
				colvarPackageType.IsPrimaryKey = false;
				colvarPackageType.IsForeignKey = false;
				colvarPackageType.IsReadOnly = false;
				colvarPackageType.DefaultSetting = @"";
				colvarPackageType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackageType);

				TableSchema.TableColumn colvarPackageDescription = new TableSchema.TableColumn(schema);
				colvarPackageDescription.ColumnName = "PackageDescription";
				colvarPackageDescription.DataType = DbType.AnsiString;
				colvarPackageDescription.MaxLength = 2147483647;
				colvarPackageDescription.AutoIncrement = false;
				colvarPackageDescription.IsNullable = true;
				colvarPackageDescription.IsPrimaryKey = false;
				colvarPackageDescription.IsForeignKey = false;
				colvarPackageDescription.IsReadOnly = false;
				colvarPackageDescription.DefaultSetting = @"";
				colvarPackageDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackageDescription);

				TableSchema.TableColumn colvarExpenseID = new TableSchema.TableColumn(schema);
				colvarExpenseID.ColumnName = "ExpenseID";
				colvarExpenseID.DataType = DbType.Int32;
				colvarExpenseID.MaxLength = 0;
				colvarExpenseID.AutoIncrement = false;
				colvarExpenseID.IsNullable = true;
				colvarExpenseID.IsPrimaryKey = false;
				colvarExpenseID.IsForeignKey = false;
				colvarExpenseID.IsReadOnly = false;
				colvarExpenseID.DefaultSetting = @"";
				colvarExpenseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpenseID);

				TableSchema.TableColumn colvarActive = new TableSchema.TableColumn(schema);
				colvarActive.ColumnName = "Active";
				colvarActive.DataType = DbType.Boolean;
				colvarActive.MaxLength = 0;
				colvarActive.AutoIncrement = false;
				colvarActive.IsNullable = true;
				colvarActive.IsPrimaryKey = false;
				colvarActive.IsForeignKey = false;
				colvarActive.IsReadOnly = false;
				colvarActive.DefaultSetting = @"";
				colvarActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActive);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = true;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.String;
				colvarModifiedByID.MaxLength = 50;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = true;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedByDate = new TableSchema.TableColumn(schema);
				colvarModifiedByDate.ColumnName = "ModifiedByDate";
				colvarModifiedByDate.DataType = DbType.DateTime;
				colvarModifiedByDate.MaxLength = 0;
				colvarModifiedByDate.AutoIncrement = false;
				colvarModifiedByDate.IsNullable = true;
				colvarModifiedByDate.IsPrimaryKey = false;
				colvarModifiedByDate.IsForeignKey = false;
				colvarModifiedByDate.IsReadOnly = false;
				colvarModifiedByDate.DefaultSetting = @"";
				colvarModifiedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_FurniturePackage",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_FurniturePackage LoadFrom(APT_FurniturePackage item)
		{
			APT_FurniturePackage result = new APT_FurniturePackage();
			if (item.FurniturePackageID != default(int)) {
				result.LoadByKey(item.FurniturePackageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int FurniturePackageID {
			get { return GetColumnValue<int>(Columns.FurniturePackageID); }
			set {
				SetColumnValue(Columns.FurniturePackageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurniturePackageID));
			}
		}
		[DataMember]
		public int ApartmentID {
			get { return GetColumnValue<int>(Columns.ApartmentID); }
			set {
				SetColumnValue(Columns.ApartmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ApartmentID));
			}
		}
		[DataMember]
		public int? ProviderContactID {
			get { return GetColumnValue<int?>(Columns.ProviderContactID); }
			set {
				SetColumnValue(Columns.ProviderContactID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProviderContactID));
			}
		}
		[DataMember]
		public string PackageType {
			get { return GetColumnValue<string>(Columns.PackageType); }
			set {
				SetColumnValue(Columns.PackageType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PackageType));
			}
		}
		[DataMember]
		public string PackageDescription {
			get { return GetColumnValue<string>(Columns.PackageDescription); }
			set {
				SetColumnValue(Columns.PackageDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PackageDescription));
			}
		}
		[DataMember]
		public int? ExpenseID {
			get { return GetColumnValue<int?>(Columns.ExpenseID); }
			set {
				SetColumnValue(Columns.ExpenseID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExpenseID));
			}
		}
		[DataMember]
		public bool? Active {
			get { return GetColumnValue<bool?>(Columns.Active); }
			set {
				SetColumnValue(Columns.Active, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Active));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedByDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string ModifiedByID {
			get { return GetColumnValue<string>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime? ModifiedByDate {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedByDate); }
			set {
				SetColumnValue(Columns.ModifiedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByDate));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return FurniturePackageID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn FurniturePackageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ApartmentIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ProviderContactIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PackageTypeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PackageDescriptionColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ExpenseIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ActiveColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedByDateColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string FurniturePackageID = @"FurniturePackageID";
			public static readonly string ApartmentID = @"ApartmentID";
			public static readonly string ProviderContactID = @"ProviderContactID";
			public static readonly string PackageType = @"PackageType";
			public static readonly string PackageDescription = @"PackageDescription";
			public static readonly string ExpenseID = @"ExpenseID";
			public static readonly string Active = @"Active";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedByDate = @"ModifiedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return FurniturePackageID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the APT_FurniturePiece class.
	/// </summary>
	[DataContract]
	public partial class APT_FurniturePieceCollection : ActiveList<APT_FurniturePiece, APT_FurniturePieceCollection>
	{
		public static APT_FurniturePieceCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_FurniturePieceCollection result = new APT_FurniturePieceCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_FurniturePiece item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_FurniturePiece table.
	/// </summary>
	[DataContract]
	public partial class APT_FurniturePiece : ActiveRecord<APT_FurniturePiece>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_FurniturePiece()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_FurniturePiece", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarFurniturePieceID = new TableSchema.TableColumn(schema);
				colvarFurniturePieceID.ColumnName = "FurniturePieceID";
				colvarFurniturePieceID.DataType = DbType.Int32;
				colvarFurniturePieceID.MaxLength = 0;
				colvarFurniturePieceID.AutoIncrement = true;
				colvarFurniturePieceID.IsNullable = false;
				colvarFurniturePieceID.IsPrimaryKey = true;
				colvarFurniturePieceID.IsForeignKey = false;
				colvarFurniturePieceID.IsReadOnly = false;
				colvarFurniturePieceID.DefaultSetting = @"";
				colvarFurniturePieceID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFurniturePieceID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarSleepCapacity = new TableSchema.TableColumn(schema);
				colvarSleepCapacity.ColumnName = "SleepCapacity";
				colvarSleepCapacity.DataType = DbType.Int32;
				colvarSleepCapacity.MaxLength = 0;
				colvarSleepCapacity.AutoIncrement = false;
				colvarSleepCapacity.IsNullable = true;
				colvarSleepCapacity.IsPrimaryKey = false;
				colvarSleepCapacity.IsForeignKey = false;
				colvarSleepCapacity.IsReadOnly = false;
				colvarSleepCapacity.DefaultSetting = @"";
				colvarSleepCapacity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSleepCapacity);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_FurniturePiece",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_FurniturePiece LoadFrom(APT_FurniturePiece item)
		{
			APT_FurniturePiece result = new APT_FurniturePiece();
			if (item.FurniturePieceID != default(int)) {
				result.LoadByKey(item.FurniturePieceID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int FurniturePieceID {
			get { return GetColumnValue<int>(Columns.FurniturePieceID); }
			set {
				SetColumnValue(Columns.FurniturePieceID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurniturePieceID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public int? SleepCapacity {
			get { return GetColumnValue<int?>(Columns.SleepCapacity); }
			set {
				SetColumnValue(Columns.SleepCapacity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SleepCapacity));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn FurniturePieceIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SleepCapacityColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string FurniturePieceID = @"FurniturePieceID";
			public static readonly string Description = @"Description";
			public static readonly string SleepCapacity = @"SleepCapacity";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return FurniturePieceID; }
		}
		*/

		#region Foreign Collections

		private APT_DefaultFurniturePackageContentCollection _APT_DefaultFurniturePackageContentsCol;
		//Relationship: FK_APT_DefaultFurniturePackage_APT_FurniturePiece
		public APT_DefaultFurniturePackageContentCollection APT_DefaultFurniturePackageContentsCol
		{
			get
			{
				if(_APT_DefaultFurniturePackageContentsCol == null) {
					_APT_DefaultFurniturePackageContentsCol = new APT_DefaultFurniturePackageContentCollection();
					_APT_DefaultFurniturePackageContentsCol.LoadAndCloseReader(APT_DefaultFurniturePackageContent.Query()
						.WHERE(APT_DefaultFurniturePackageContent.Columns.IncludedPieceID, FurniturePieceID).ExecuteReader());
				}
				return _APT_DefaultFurniturePackageContentsCol;
			}
		}

		private APT_ApartmentFurnitureItemCollection _APT_ApartmentFurnitureItemsCol;
		//Relationship: FK_APT_FurniturePackageContents_APT_FurniturePiece
		public APT_ApartmentFurnitureItemCollection APT_ApartmentFurnitureItemsCol
		{
			get
			{
				if(_APT_ApartmentFurnitureItemsCol == null) {
					_APT_ApartmentFurnitureItemsCol = new APT_ApartmentFurnitureItemCollection();
					_APT_ApartmentFurnitureItemsCol.LoadAndCloseReader(APT_ApartmentFurnitureItem.Query()
						.WHERE(APT_ApartmentFurnitureItem.Columns.FurniturePieceID, FurniturePieceID).ExecuteReader());
				}
				return _APT_ApartmentFurnitureItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_ManagementCompany class.
	/// </summary>
	[DataContract]
	public partial class APT_ManagementCompanyCollection : ActiveList<APT_ManagementCompany, APT_ManagementCompanyCollection>
	{
		public static APT_ManagementCompanyCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_ManagementCompanyCollection result = new APT_ManagementCompanyCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_ManagementCompany item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_ManagementCompany table.
	/// </summary>
	[DataContract]
	public partial class APT_ManagementCompany : ActiveRecord<APT_ManagementCompany>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_ManagementCompany()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_ManagementCompany", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
				colvarCompanyID.ColumnName = "CompanyID";
				colvarCompanyID.DataType = DbType.Int32;
				colvarCompanyID.MaxLength = 0;
				colvarCompanyID.AutoIncrement = true;
				colvarCompanyID.IsNullable = false;
				colvarCompanyID.IsPrimaryKey = true;
				colvarCompanyID.IsForeignKey = false;
				colvarCompanyID.IsReadOnly = false;
				colvarCompanyID.DefaultSetting = @"";
				colvarCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyID);

				TableSchema.TableColumn colvarContactID = new TableSchema.TableColumn(schema);
				colvarContactID.ColumnName = "ContactID";
				colvarContactID.DataType = DbType.Int32;
				colvarContactID.MaxLength = 0;
				colvarContactID.AutoIncrement = false;
				colvarContactID.IsNullable = true;
				colvarContactID.IsPrimaryKey = false;
				colvarContactID.IsForeignKey = true;
				colvarContactID.IsReadOnly = false;
				colvarContactID.DefaultSetting = @"";
				colvarContactID.ForeignKeyTableName = "APT_Contact";
				schema.Columns.Add(colvarContactID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_ManagementCompany",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_ManagementCompany LoadFrom(APT_ManagementCompany item)
		{
			APT_ManagementCompany result = new APT_ManagementCompany();
			if (item.CompanyID != default(int)) {
				result.LoadByKey(item.CompanyID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CompanyID {
			get { return GetColumnValue<int>(Columns.CompanyID); }
			set {
				SetColumnValue(Columns.CompanyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CompanyID));
			}
		}
		[DataMember]
		public int? ContactID {
			get { return GetColumnValue<int?>(Columns.ContactID); }
			set {
				SetColumnValue(Columns.ContactID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Contact _Contact;
		//Relationship: FK_APT_ManagementCompany_APT_Contact
		public APT_Contact Contact
		{
			get
			{
				if(_Contact == null) {
					_Contact = APT_Contact.FetchByID(this.ContactID);
				}
				return _Contact;
			}
			set
			{
				SetColumnValue("ContactID", value.ContactID);
				_Contact = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CompanyID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CompanyIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContactIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CompanyID = @"CompanyID";
			public static readonly string ContactID = @"ContactID";
			public static readonly string Description = @"Description";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CompanyID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the APT_Occupant class.
	/// </summary>
	[DataContract]
	public partial class APT_OccupantCollection : ActiveList<APT_Occupant, APT_OccupantCollection>
	{
		public static APT_OccupantCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_OccupantCollection result = new APT_OccupantCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_Occupant item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_Occupant table.
	/// </summary>
	[DataContract]
	public partial class APT_Occupant : ActiveRecord<APT_Occupant>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_Occupant()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_Occupant", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarOccupantID = new TableSchema.TableColumn(schema);
				colvarOccupantID.ColumnName = "OccupantID";
				colvarOccupantID.DataType = DbType.Int32;
				colvarOccupantID.MaxLength = 0;
				colvarOccupantID.AutoIncrement = true;
				colvarOccupantID.IsNullable = false;
				colvarOccupantID.IsPrimaryKey = true;
				colvarOccupantID.IsForeignKey = false;
				colvarOccupantID.IsReadOnly = false;
				colvarOccupantID.DefaultSetting = @"";
				colvarOccupantID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOccupantID);

				TableSchema.TableColumn colvarResponsibleUserID = new TableSchema.TableColumn(schema);
				colvarResponsibleUserID.ColumnName = "ResponsibleUserID";
				colvarResponsibleUserID.DataType = DbType.Int32;
				colvarResponsibleUserID.MaxLength = 0;
				colvarResponsibleUserID.AutoIncrement = false;
				colvarResponsibleUserID.IsNullable = true;
				colvarResponsibleUserID.IsPrimaryKey = false;
				colvarResponsibleUserID.IsForeignKey = true;
				colvarResponsibleUserID.IsReadOnly = false;
				colvarResponsibleUserID.DefaultSetting = @"";
				colvarResponsibleUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarResponsibleUserID);

				TableSchema.TableColumn colvarRelation = new TableSchema.TableColumn(schema);
				colvarRelation.ColumnName = "Relation";
				colvarRelation.DataType = DbType.String;
				colvarRelation.MaxLength = 50;
				colvarRelation.AutoIncrement = false;
				colvarRelation.IsNullable = true;
				colvarRelation.IsPrimaryKey = false;
				colvarRelation.IsForeignKey = false;
				colvarRelation.IsReadOnly = false;
				colvarRelation.DefaultSetting = @"";
				colvarRelation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRelation);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = true;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = true;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarBedID = new TableSchema.TableColumn(schema);
				colvarBedID.ColumnName = "BedID";
				colvarBedID.DataType = DbType.Int32;
				colvarBedID.MaxLength = 0;
				colvarBedID.AutoIncrement = false;
				colvarBedID.IsNullable = false;
				colvarBedID.IsPrimaryKey = false;
				colvarBedID.IsForeignKey = true;
				colvarBedID.IsReadOnly = false;
				colvarBedID.DefaultSetting = @"";
				colvarBedID.ForeignKeyTableName = "APT_Bed";
				schema.Columns.Add(colvarBedID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.AnsiString;
				colvarName.MaxLength = 20;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = true;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarCountsAgainstOccupancy = new TableSchema.TableColumn(schema);
				colvarCountsAgainstOccupancy.ColumnName = "CountsAgainstOccupancy";
				colvarCountsAgainstOccupancy.DataType = DbType.Boolean;
				colvarCountsAgainstOccupancy.MaxLength = 0;
				colvarCountsAgainstOccupancy.AutoIncrement = false;
				colvarCountsAgainstOccupancy.IsNullable = true;
				colvarCountsAgainstOccupancy.IsPrimaryKey = false;
				colvarCountsAgainstOccupancy.IsForeignKey = false;
				colvarCountsAgainstOccupancy.IsReadOnly = false;
				colvarCountsAgainstOccupancy.DefaultSetting = @"";
				colvarCountsAgainstOccupancy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountsAgainstOccupancy);

				TableSchema.TableColumn colvarDateMovedIn = new TableSchema.TableColumn(schema);
				colvarDateMovedIn.ColumnName = "DateMovedIn";
				colvarDateMovedIn.DataType = DbType.DateTime;
				colvarDateMovedIn.MaxLength = 0;
				colvarDateMovedIn.AutoIncrement = false;
				colvarDateMovedIn.IsNullable = true;
				colvarDateMovedIn.IsPrimaryKey = false;
				colvarDateMovedIn.IsForeignKey = false;
				colvarDateMovedIn.IsReadOnly = false;
				colvarDateMovedIn.DefaultSetting = @"";
				colvarDateMovedIn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateMovedIn);

				TableSchema.TableColumn colvarDateMovedOut = new TableSchema.TableColumn(schema);
				colvarDateMovedOut.ColumnName = "DateMovedOut";
				colvarDateMovedOut.DataType = DbType.DateTime;
				colvarDateMovedOut.MaxLength = 0;
				colvarDateMovedOut.AutoIncrement = false;
				colvarDateMovedOut.IsNullable = true;
				colvarDateMovedOut.IsPrimaryKey = false;
				colvarDateMovedOut.IsForeignKey = false;
				colvarDateMovedOut.IsReadOnly = false;
				colvarDateMovedOut.DefaultSetting = @"";
				colvarDateMovedOut.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateMovedOut);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.String;
				colvarModifiedByID.MaxLength = 50;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = true;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_Occupant",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_Occupant LoadFrom(APT_Occupant item)
		{
			APT_Occupant result = new APT_Occupant();
			if (item.OccupantID != default(int)) {
				result.LoadByKey(item.OccupantID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int OccupantID {
			get { return GetColumnValue<int>(Columns.OccupantID); }
			set {
				SetColumnValue(Columns.OccupantID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OccupantID));
			}
		}
		[DataMember]
		public int? ResponsibleUserID {
			get { return GetColumnValue<int?>(Columns.ResponsibleUserID); }
			set {
				SetColumnValue(Columns.ResponsibleUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ResponsibleUserID));
			}
		}
		[DataMember]
		public string Relation {
			get { return GetColumnValue<string>(Columns.Relation); }
			set {
				SetColumnValue(Columns.Relation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Relation));
			}
		}
		[DataMember]
		public int? UserID {
			get { return GetColumnValue<int?>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public int BedID {
			get { return GetColumnValue<int>(Columns.BedID); }
			set {
				SetColumnValue(Columns.BedID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BedID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public bool? CountsAgainstOccupancy {
			get { return GetColumnValue<bool?>(Columns.CountsAgainstOccupancy); }
			set {
				SetColumnValue(Columns.CountsAgainstOccupancy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountsAgainstOccupancy));
			}
		}
		[DataMember]
		public DateTime? DateMovedIn {
			get { return GetColumnValue<DateTime?>(Columns.DateMovedIn); }
			set {
				SetColumnValue(Columns.DateMovedIn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DateMovedIn));
			}
		}
		[DataMember]
		public DateTime? DateMovedOut {
			get { return GetColumnValue<DateTime?>(Columns.DateMovedOut); }
			set {
				SetColumnValue(Columns.DateMovedOut, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DateMovedOut));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public string ModifiedByID {
			get { return GetColumnValue<string>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime? ModifiedDate {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_Bed _Bed;
		//Relationship: FK_APT_Occupant_APT_Bed
		public APT_Bed Bed
		{
			get
			{
				if(_Bed == null) {
					_Bed = APT_Bed.FetchByID(this.BedID);
				}
				return _Bed;
			}
			set
			{
				SetColumnValue("BedID", value.BedID);
				_Bed = value;
			}
		}

		private RU_User _User;
		//Relationship: FK_APT_Occupant_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserID);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserID", value.UserID);
				_User = value;
			}
		}

		private RU_User _ResponsibleUser;
		//Relationship: FK_APT_Occupant_RU_Users1
		public RU_User ResponsibleUser
		{
			get
			{
				if(_ResponsibleUser == null) {
					_ResponsibleUser = RU_User.FetchByID(this.ResponsibleUserID);
				}
				return _ResponsibleUser;
			}
			set
			{
				SetColumnValue("ResponsibleUserID", value.UserID);
				_ResponsibleUser = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return OccupantID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn OccupantIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ResponsibleUserIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RelationColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn BedIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CountsAgainstOccupancyColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DateMovedInColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DateMovedOutColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string OccupantID = @"OccupantID";
			public static readonly string ResponsibleUserID = @"ResponsibleUserID";
			public static readonly string Relation = @"Relation";
			public static readonly string UserID = @"UserID";
			public static readonly string BedID = @"BedID";
			public static readonly string Name = @"Name";
			public static readonly string CountsAgainstOccupancy = @"CountsAgainstOccupancy";
			public static readonly string DateMovedIn = @"DateMovedIn";
			public static readonly string DateMovedOut = @"DateMovedOut";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return OccupantID; }
		}
		*/

		#region Foreign Collections

		private APT_ApartmentCollection _APT_ApartmentsCol;
		//Relationship: FK_APT_ApartmentManOcc_APT_Apartment
		public APT_ApartmentCollection APT_ApartmentsCol
		{
			get
			{
				if(_APT_ApartmentsCol == null) {
					_APT_ApartmentsCol = new APT_ApartmentCollection();
					_APT_ApartmentsCol.LoadAndCloseReader(APT_Apartment.Query()
						.WHERE(APT_Apartment.Columns.ManagerOccupantID, OccupantID).ExecuteReader());
				}
				return _APT_ApartmentsCol;
			}
		}

		private APT_ComplaintCollection _APT_ComplaintsCol;
		//Relationship: FK_APT_Complaint_RU_Recruits
		public APT_ComplaintCollection APT_ComplaintsCol
		{
			get
			{
				if(_APT_ComplaintsCol == null) {
					_APT_ComplaintsCol = new APT_ComplaintCollection();
					_APT_ComplaintsCol.LoadAndCloseReader(APT_Complaint.Query()
						.WHERE(APT_Complaint.Columns.OccupantID, OccupantID).ExecuteReader());
				}
				return _APT_ComplaintsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the APT_RecruitCharge class.
	/// </summary>
	[DataContract]
	public partial class APT_RecruitChargeCollection : ActiveList<APT_RecruitCharge, APT_RecruitChargeCollection>
	{
		public static APT_RecruitChargeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			APT_RecruitChargeCollection result = new APT_RecruitChargeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (APT_RecruitCharge item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the APT_RecruitCharge table.
	/// </summary>
	[DataContract]
	public partial class APT_RecruitCharge : ActiveRecord<APT_RecruitCharge>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public APT_RecruitCharge()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("APT_RecruitCharge", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRecruitChargeID = new TableSchema.TableColumn(schema);
				colvarRecruitChargeID.ColumnName = "RecruitChargeID";
				colvarRecruitChargeID.DataType = DbType.Int32;
				colvarRecruitChargeID.MaxLength = 0;
				colvarRecruitChargeID.AutoIncrement = false;
				colvarRecruitChargeID.IsNullable = false;
				colvarRecruitChargeID.IsPrimaryKey = true;
				colvarRecruitChargeID.IsForeignKey = false;
				colvarRecruitChargeID.IsReadOnly = false;
				colvarRecruitChargeID.DefaultSetting = @"";
				colvarRecruitChargeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitChargeID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = true;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarExpenseBillID = new TableSchema.TableColumn(schema);
				colvarExpenseBillID.ColumnName = "ExpenseBillID";
				colvarExpenseBillID.DataType = DbType.Int32;
				colvarExpenseBillID.MaxLength = 0;
				colvarExpenseBillID.AutoIncrement = false;
				colvarExpenseBillID.IsNullable = false;
				colvarExpenseBillID.IsPrimaryKey = false;
				colvarExpenseBillID.IsForeignKey = true;
				colvarExpenseBillID.IsReadOnly = false;
				colvarExpenseBillID.DefaultSetting = @"";
				colvarExpenseBillID.ForeignKeyTableName = "APT_ExpenseBill";
				schema.Columns.Add(colvarExpenseBillID);

				TableSchema.TableColumn colvarPenaltyAmt = new TableSchema.TableColumn(schema);
				colvarPenaltyAmt.ColumnName = "PenaltyAmt";
				colvarPenaltyAmt.DataType = DbType.Currency;
				colvarPenaltyAmt.MaxLength = 0;
				colvarPenaltyAmt.AutoIncrement = false;
				colvarPenaltyAmt.IsNullable = false;
				colvarPenaltyAmt.IsPrimaryKey = false;
				colvarPenaltyAmt.IsForeignKey = false;
				colvarPenaltyAmt.IsReadOnly = false;
				colvarPenaltyAmt.DefaultSetting = @"";
				colvarPenaltyAmt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPenaltyAmt);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarGPTransactionID = new TableSchema.TableColumn(schema);
				colvarGPTransactionID.ColumnName = "GPTransactionID";
				colvarGPTransactionID.DataType = DbType.Int32;
				colvarGPTransactionID.MaxLength = 0;
				colvarGPTransactionID.AutoIncrement = false;
				colvarGPTransactionID.IsNullable = true;
				colvarGPTransactionID.IsPrimaryKey = false;
				colvarGPTransactionID.IsForeignKey = false;
				colvarGPTransactionID.IsReadOnly = false;
				colvarGPTransactionID.DefaultSetting = @"";
				colvarGPTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPTransactionID);

				TableSchema.TableColumn colvarEnteredByID = new TableSchema.TableColumn(schema);
				colvarEnteredByID.ColumnName = "EnteredByID";
				colvarEnteredByID.DataType = DbType.String;
				colvarEnteredByID.MaxLength = 50;
				colvarEnteredByID.AutoIncrement = false;
				colvarEnteredByID.IsNullable = true;
				colvarEnteredByID.IsPrimaryKey = false;
				colvarEnteredByID.IsForeignKey = false;
				colvarEnteredByID.IsReadOnly = false;
				colvarEnteredByID.DefaultSetting = @"";
				colvarEnteredByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEnteredByID);

				TableSchema.TableColumn colvarEnteredByDate = new TableSchema.TableColumn(schema);
				colvarEnteredByDate.ColumnName = "EnteredByDate";
				colvarEnteredByDate.DataType = DbType.DateTime;
				colvarEnteredByDate.MaxLength = 0;
				colvarEnteredByDate.AutoIncrement = false;
				colvarEnteredByDate.IsNullable = true;
				colvarEnteredByDate.IsPrimaryKey = false;
				colvarEnteredByDate.IsForeignKey = false;
				colvarEnteredByDate.IsReadOnly = false;
				colvarEnteredByDate.DefaultSetting = @"";
				colvarEnteredByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEnteredByDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.String;
				colvarModifiedByID.MaxLength = 50;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = true;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("APT_RecruitCharge",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static APT_RecruitCharge LoadFrom(APT_RecruitCharge item)
		{
			APT_RecruitCharge result = new APT_RecruitCharge();
			if (item.RecruitChargeID != default(int)) {
				result.LoadByKey(item.RecruitChargeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RecruitChargeID {
			get { return GetColumnValue<int>(Columns.RecruitChargeID); }
			set {
				SetColumnValue(Columns.RecruitChargeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitChargeID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public int ExpenseBillID {
			get { return GetColumnValue<int>(Columns.ExpenseBillID); }
			set {
				SetColumnValue(Columns.ExpenseBillID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExpenseBillID));
			}
		}
		[DataMember]
		public decimal PenaltyAmt {
			get { return GetColumnValue<decimal>(Columns.PenaltyAmt); }
			set {
				SetColumnValue(Columns.PenaltyAmt, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PenaltyAmt));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public int? GPTransactionID {
			get { return GetColumnValue<int?>(Columns.GPTransactionID); }
			set {
				SetColumnValue(Columns.GPTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPTransactionID));
			}
		}
		[DataMember]
		public string EnteredByID {
			get { return GetColumnValue<string>(Columns.EnteredByID); }
			set {
				SetColumnValue(Columns.EnteredByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EnteredByID));
			}
		}
		[DataMember]
		public DateTime? EnteredByDate {
			get { return GetColumnValue<DateTime?>(Columns.EnteredByDate); }
			set {
				SetColumnValue(Columns.EnteredByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EnteredByDate));
			}
		}
		[DataMember]
		public string ModifiedByID {
			get { return GetColumnValue<string>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime? ModifiedDate {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private APT_ExpenseBill _ExpenseBill;
		//Relationship: FK_APT_RecruitCharge_APT_ExpenseBill
		public APT_ExpenseBill ExpenseBill
		{
			get
			{
				if(_ExpenseBill == null) {
					_ExpenseBill = APT_ExpenseBill.FetchByID(this.ExpenseBillID);
				}
				return _ExpenseBill;
			}
			set
			{
				SetColumnValue("ExpenseBillID", value.ExpenseBillID);
				_ExpenseBill = value;
			}
		}

		private RU_User _User;
		//Relationship: FK_APT_RecruitCharge_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserID);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserID", value.UserID);
				_User = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RecruitChargeID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RecruitChargeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ExpenseBillIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PenaltyAmtColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn GPTransactionIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn EnteredByIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn EnteredByDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RecruitChargeID = @"RecruitChargeID";
			public static readonly string UserID = @"UserID";
			public static readonly string ExpenseBillID = @"ExpenseBillID";
			public static readonly string PenaltyAmt = @"PenaltyAmt";
			public static readonly string Description = @"Description";
			public static readonly string GPTransactionID = @"GPTransactionID";
			public static readonly string EnteredByID = @"EnteredByID";
			public static readonly string EnteredByDate = @"EnteredByDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RecruitChargeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the dtproperty class.
	/// </summary>
	[DataContract]
	public partial class dtpropertyCollection : ActiveList<dtproperty, dtpropertyCollection>
	{
		public static dtpropertyCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			dtpropertyCollection result = new dtpropertyCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (dtproperty item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the dtproperties table.
	/// </summary>
	[DataContract]
	public partial class dtproperty : ActiveRecord<dtproperty>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public dtproperty()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("dtproperties", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarid = new TableSchema.TableColumn(schema);
				colvarid.ColumnName = "id";
				colvarid.DataType = DbType.Int32;
				colvarid.MaxLength = 0;
				colvarid.AutoIncrement = true;
				colvarid.IsNullable = false;
				colvarid.IsPrimaryKey = true;
				colvarid.IsForeignKey = false;
				colvarid.IsReadOnly = false;
				colvarid.DefaultSetting = @"";
				colvarid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarid);

				TableSchema.TableColumn colvarobjectid = new TableSchema.TableColumn(schema);
				colvarobjectid.ColumnName = "objectid";
				colvarobjectid.DataType = DbType.Int32;
				colvarobjectid.MaxLength = 0;
				colvarobjectid.AutoIncrement = false;
				colvarobjectid.IsNullable = true;
				colvarobjectid.IsPrimaryKey = false;
				colvarobjectid.IsForeignKey = false;
				colvarobjectid.IsReadOnly = false;
				colvarobjectid.DefaultSetting = @"";
				colvarobjectid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarobjectid);

				TableSchema.TableColumn colvarpropertyX = new TableSchema.TableColumn(schema);
				colvarpropertyX.ColumnName = "property";
				colvarpropertyX.DataType = DbType.AnsiString;
				colvarpropertyX.MaxLength = 64;
				colvarpropertyX.AutoIncrement = false;
				colvarpropertyX.IsNullable = false;
				colvarpropertyX.IsPrimaryKey = false;
				colvarpropertyX.IsForeignKey = false;
				colvarpropertyX.IsReadOnly = false;
				colvarpropertyX.DefaultSetting = @"";
				colvarpropertyX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarpropertyX);

				TableSchema.TableColumn colvarvalueX = new TableSchema.TableColumn(schema);
				colvarvalueX.ColumnName = "value";
				colvarvalueX.DataType = DbType.AnsiString;
				colvarvalueX.MaxLength = 255;
				colvarvalueX.AutoIncrement = false;
				colvarvalueX.IsNullable = true;
				colvarvalueX.IsPrimaryKey = false;
				colvarvalueX.IsForeignKey = false;
				colvarvalueX.IsReadOnly = false;
				colvarvalueX.DefaultSetting = @"";
				colvarvalueX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarvalueX);

				TableSchema.TableColumn colvaruvalue = new TableSchema.TableColumn(schema);
				colvaruvalue.ColumnName = "uvalue";
				colvaruvalue.DataType = DbType.String;
				colvaruvalue.MaxLength = 255;
				colvaruvalue.AutoIncrement = false;
				colvaruvalue.IsNullable = true;
				colvaruvalue.IsPrimaryKey = false;
				colvaruvalue.IsForeignKey = false;
				colvaruvalue.IsReadOnly = false;
				colvaruvalue.DefaultSetting = @"";
				colvaruvalue.ForeignKeyTableName = "";
				schema.Columns.Add(colvaruvalue);

				TableSchema.TableColumn colvarlvalue = new TableSchema.TableColumn(schema);
				colvarlvalue.ColumnName = "lvalue";
				colvarlvalue.DataType = DbType.Binary;
				colvarlvalue.MaxLength = 2147483647;
				colvarlvalue.AutoIncrement = false;
				colvarlvalue.IsNullable = true;
				colvarlvalue.IsPrimaryKey = false;
				colvarlvalue.IsForeignKey = false;
				colvarlvalue.IsReadOnly = false;
				colvarlvalue.DefaultSetting = @"";
				colvarlvalue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarlvalue);

				TableSchema.TableColumn colvarversion = new TableSchema.TableColumn(schema);
				colvarversion.ColumnName = "version";
				colvarversion.DataType = DbType.Int32;
				colvarversion.MaxLength = 0;
				colvarversion.AutoIncrement = false;
				colvarversion.IsNullable = false;
				colvarversion.IsPrimaryKey = false;
				colvarversion.IsForeignKey = false;
				colvarversion.IsReadOnly = false;
				colvarversion.DefaultSetting = @"((0))";
				colvarversion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarversion);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("dtproperties",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static dtproperty LoadFrom(dtproperty item)
		{
			dtproperty result = new dtproperty();
			if (item.id != default(int)) {
				result.LoadByKey(item.id);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int id {
			get { return GetColumnValue<int>(Columns.id); }
			set {
				SetColumnValue(Columns.id, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.id));
			}
		}
		[DataMember]
		public int? objectid {
			get { return GetColumnValue<int?>(Columns.objectid); }
			set {
				SetColumnValue(Columns.objectid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.objectid));
			}
		}
		[DataMember]
		public string propertyX {
			get { return GetColumnValue<string>(Columns.propertyX); }
			set {
				SetColumnValue(Columns.propertyX, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.propertyX));
			}
		}
		[DataMember]
		public string valueX {
			get { return GetColumnValue<string>(Columns.valueX); }
			set {
				SetColumnValue(Columns.valueX, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.valueX));
			}
		}
		[DataMember]
		public string uvalue {
			get { return GetColumnValue<string>(Columns.uvalue); }
			set {
				SetColumnValue(Columns.uvalue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.uvalue));
			}
		}
		[DataMember]
		public byte[] lvalue {
			get { return GetColumnValue<byte[]>(Columns.lvalue); }
			set {
				SetColumnValue(Columns.lvalue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.lvalue));
			}
		}
		[DataMember]
		public int version {
			get { return GetColumnValue<int>(Columns.version); }
			set {
				SetColumnValue(Columns.version, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.version));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return id.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn idColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn objectidColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn propertyXColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn valueXColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn uvalueColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn lvalueColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn versionColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string id = @"id";
			public static readonly string objectid = @"objectid";
			public static readonly string propertyX = @"property";
			public static readonly string valueX = @"value";
			public static readonly string uvalue = @"uvalue";
			public static readonly string lvalue = @"lvalue";
			public static readonly string version = @"version";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return id; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the ES_MessageAttachment class.
	/// </summary>
	[DataContract]
	public partial class ES_MessageAttachmentCollection : ActiveList<ES_MessageAttachment, ES_MessageAttachmentCollection>
	{
		public static ES_MessageAttachmentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			ES_MessageAttachmentCollection result = new ES_MessageAttachmentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (ES_MessageAttachment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the ES_MessageAttachments table.
	/// </summary>
	[DataContract]
	public partial class ES_MessageAttachment : ActiveRecord<ES_MessageAttachment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public ES_MessageAttachment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ES_MessageAttachments", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMessageAttachmentID = new TableSchema.TableColumn(schema);
				colvarMessageAttachmentID.ColumnName = "MessageAttachmentID";
				colvarMessageAttachmentID.DataType = DbType.Int32;
				colvarMessageAttachmentID.MaxLength = 0;
				colvarMessageAttachmentID.AutoIncrement = true;
				colvarMessageAttachmentID.IsNullable = false;
				colvarMessageAttachmentID.IsPrimaryKey = true;
				colvarMessageAttachmentID.IsForeignKey = false;
				colvarMessageAttachmentID.IsReadOnly = false;
				colvarMessageAttachmentID.DefaultSetting = @"";
				colvarMessageAttachmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageAttachmentID);

				TableSchema.TableColumn colvarFileName = new TableSchema.TableColumn(schema);
				colvarFileName.ColumnName = "FileName";
				colvarFileName.DataType = DbType.String;
				colvarFileName.MaxLength = -1;
				colvarFileName.AutoIncrement = false;
				colvarFileName.IsNullable = false;
				colvarFileName.IsPrimaryKey = false;
				colvarFileName.IsForeignKey = false;
				colvarFileName.IsReadOnly = false;
				colvarFileName.DefaultSetting = @"";
				colvarFileName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileName);

				TableSchema.TableColumn colvarAttachment = new TableSchema.TableColumn(schema);
				colvarAttachment.ColumnName = "Attachment";
				colvarAttachment.DataType = DbType.Binary;
				colvarAttachment.MaxLength = 2147483647;
				colvarAttachment.AutoIncrement = false;
				colvarAttachment.IsNullable = false;
				colvarAttachment.IsPrimaryKey = false;
				colvarAttachment.IsForeignKey = false;
				colvarAttachment.IsReadOnly = false;
				colvarAttachment.DefaultSetting = @"";
				colvarAttachment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAttachment);

				TableSchema.TableColumn colvarMessageID = new TableSchema.TableColumn(schema);
				colvarMessageID.ColumnName = "MessageID";
				colvarMessageID.DataType = DbType.Int32;
				colvarMessageID.MaxLength = 0;
				colvarMessageID.AutoIncrement = false;
				colvarMessageID.IsNullable = false;
				colvarMessageID.IsPrimaryKey = false;
				colvarMessageID.IsForeignKey = true;
				colvarMessageID.IsReadOnly = false;
				colvarMessageID.DefaultSetting = @"";
				colvarMessageID.ForeignKeyTableName = "ES_Messages";
				schema.Columns.Add(colvarMessageID);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("ES_MessageAttachments",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static ES_MessageAttachment LoadFrom(ES_MessageAttachment item)
		{
			ES_MessageAttachment result = new ES_MessageAttachment();
			if (item.MessageAttachmentID != default(int)) {
				result.LoadByKey(item.MessageAttachmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MessageAttachmentID {
			get { return GetColumnValue<int>(Columns.MessageAttachmentID); }
			set {
				SetColumnValue(Columns.MessageAttachmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageAttachmentID));
			}
		}
		[DataMember]
		public string FileName {
			get { return GetColumnValue<string>(Columns.FileName); }
			set {
				SetColumnValue(Columns.FileName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FileName));
			}
		}
		[DataMember]
		public byte[] Attachment {
			get { return GetColumnValue<byte[]>(Columns.Attachment); }
			set {
				SetColumnValue(Columns.Attachment, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Attachment));
			}
		}
		[DataMember]
		public int MessageID {
			get { return GetColumnValue<int>(Columns.MessageID); }
			set {
				SetColumnValue(Columns.MessageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageID));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private ES_Message _Message;
		//Relationship: FK_ES_MessageAttachment_ES_Messages
		public ES_Message Message
		{
			get
			{
				if(_Message == null) {
					_Message = ES_Message.FetchByID(this.MessageID);
				}
				return _Message;
			}
			set
			{
				SetColumnValue("MessageID", value.MessageID);
				_Message = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return FileName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MessageAttachmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn FileNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AttachmentColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MessageIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MessageAttachmentID = @"MessageAttachmentID";
			public static readonly string FileName = @"FileName";
			public static readonly string Attachment = @"Attachment";
			public static readonly string MessageID = @"MessageID";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MessageAttachmentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the ES_MessageRecipient class.
	/// </summary>
	[DataContract]
	public partial class ES_MessageRecipientCollection : ActiveList<ES_MessageRecipient, ES_MessageRecipientCollection>
	{
		public static ES_MessageRecipientCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			ES_MessageRecipientCollection result = new ES_MessageRecipientCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (ES_MessageRecipient item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the ES_MessageRecipients table.
	/// </summary>
	[DataContract]
	public partial class ES_MessageRecipient : ActiveRecord<ES_MessageRecipient>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public ES_MessageRecipient()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ES_MessageRecipients", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMessageRecipientID = new TableSchema.TableColumn(schema);
				colvarMessageRecipientID.ColumnName = "MessageRecipientID";
				colvarMessageRecipientID.DataType = DbType.Int32;
				colvarMessageRecipientID.MaxLength = 0;
				colvarMessageRecipientID.AutoIncrement = true;
				colvarMessageRecipientID.IsNullable = false;
				colvarMessageRecipientID.IsPrimaryKey = true;
				colvarMessageRecipientID.IsForeignKey = false;
				colvarMessageRecipientID.IsReadOnly = false;
				colvarMessageRecipientID.DefaultSetting = @"";
				colvarMessageRecipientID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageRecipientID);

				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.String;
				colvarAddress.MaxLength = 256;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = false;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);

				TableSchema.TableColumn colvarMessageID = new TableSchema.TableColumn(schema);
				colvarMessageID.ColumnName = "MessageID";
				colvarMessageID.DataType = DbType.Int32;
				colvarMessageID.MaxLength = 0;
				colvarMessageID.AutoIncrement = false;
				colvarMessageID.IsNullable = false;
				colvarMessageID.IsPrimaryKey = false;
				colvarMessageID.IsForeignKey = true;
				colvarMessageID.IsReadOnly = false;
				colvarMessageID.DefaultSetting = @"";
				colvarMessageID.ForeignKeyTableName = "ES_Messages";
				schema.Columns.Add(colvarMessageID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 100;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = true;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("ES_MessageRecipients",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static ES_MessageRecipient LoadFrom(ES_MessageRecipient item)
		{
			ES_MessageRecipient result = new ES_MessageRecipient();
			if (item.MessageRecipientID != default(int)) {
				result.LoadByKey(item.MessageRecipientID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MessageRecipientID {
			get { return GetColumnValue<int>(Columns.MessageRecipientID); }
			set {
				SetColumnValue(Columns.MessageRecipientID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageRecipientID));
			}
		}
		[DataMember]
		public string Address {
			get { return GetColumnValue<string>(Columns.Address); }
			set {
				SetColumnValue(Columns.Address, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Address));
			}
		}
		[DataMember]
		public int MessageID {
			get { return GetColumnValue<int>(Columns.MessageID); }
			set {
				SetColumnValue(Columns.MessageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private ES_Message _Message;
		//Relationship: FK_ES_MessageRecipients_ES_Messages
		public ES_Message Message
		{
			get
			{
				if(_Message == null) {
					_Message = ES_Message.FetchByID(this.MessageID);
				}
				return _Message;
			}
			set
			{
				SetColumnValue("MessageID", value.MessageID);
				_Message = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Address;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MessageRecipientIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AddressColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MessageIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MessageRecipientID = @"MessageRecipientID";
			public static readonly string Address = @"Address";
			public static readonly string MessageID = @"MessageID";
			public static readonly string Name = @"Name";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MessageRecipientID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the ES_Message class.
	/// </summary>
	[DataContract]
	public partial class ES_MessageCollection : ActiveList<ES_Message, ES_MessageCollection>
	{
		public static ES_MessageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			ES_MessageCollection result = new ES_MessageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (ES_Message item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the ES_Messages table.
	/// </summary>
	[DataContract]
	public partial class ES_Message : ActiveRecord<ES_Message>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public ES_Message()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ES_Messages", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMessageID = new TableSchema.TableColumn(schema);
				colvarMessageID.ColumnName = "MessageID";
				colvarMessageID.DataType = DbType.Int32;
				colvarMessageID.MaxLength = 0;
				colvarMessageID.AutoIncrement = true;
				colvarMessageID.IsNullable = false;
				colvarMessageID.IsPrimaryKey = true;
				colvarMessageID.IsForeignKey = false;
				colvarMessageID.IsReadOnly = false;
				colvarMessageID.DefaultSetting = @"";
				colvarMessageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageID);

				TableSchema.TableColumn colvarSubject = new TableSchema.TableColumn(schema);
				colvarSubject.ColumnName = "Subject";
				colvarSubject.DataType = DbType.String;
				colvarSubject.MaxLength = 100;
				colvarSubject.AutoIncrement = false;
				colvarSubject.IsNullable = false;
				colvarSubject.IsPrimaryKey = false;
				colvarSubject.IsForeignKey = false;
				colvarSubject.IsReadOnly = false;
				colvarSubject.DefaultSetting = @"";
				colvarSubject.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubject);

				TableSchema.TableColumn colvarBody = new TableSchema.TableColumn(schema);
				colvarBody.ColumnName = "Body";
				colvarBody.DataType = DbType.String;
				colvarBody.MaxLength = -1;
				colvarBody.AutoIncrement = false;
				colvarBody.IsNullable = false;
				colvarBody.IsPrimaryKey = false;
				colvarBody.IsForeignKey = false;
				colvarBody.IsReadOnly = false;
				colvarBody.DefaultSetting = @"";
				colvarBody.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBody);

				TableSchema.TableColumn colvarIsHtml = new TableSchema.TableColumn(schema);
				colvarIsHtml.ColumnName = "IsHtml";
				colvarIsHtml.DataType = DbType.Boolean;
				colvarIsHtml.MaxLength = 0;
				colvarIsHtml.AutoIncrement = false;
				colvarIsHtml.IsNullable = false;
				colvarIsHtml.IsPrimaryKey = false;
				colvarIsHtml.IsForeignKey = false;
				colvarIsHtml.IsReadOnly = false;
				colvarIsHtml.DefaultSetting = @"";
				colvarIsHtml.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHtml);

				TableSchema.TableColumn colvarSentDate = new TableSchema.TableColumn(schema);
				colvarSentDate.ColumnName = "SentDate";
				colvarSentDate.DataType = DbType.DateTime;
				colvarSentDate.MaxLength = 0;
				colvarSentDate.AutoIncrement = false;
				colvarSentDate.IsNullable = true;
				colvarSentDate.IsPrimaryKey = false;
				colvarSentDate.IsForeignKey = false;
				colvarSentDate.IsReadOnly = false;
				colvarSentDate.DefaultSetting = @"";
				colvarSentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSentDate);

				TableSchema.TableColumn colvarSenderName = new TableSchema.TableColumn(schema);
				colvarSenderName.ColumnName = "SenderName";
				colvarSenderName.DataType = DbType.String;
				colvarSenderName.MaxLength = 50;
				colvarSenderName.AutoIncrement = false;
				colvarSenderName.IsNullable = false;
				colvarSenderName.IsPrimaryKey = false;
				colvarSenderName.IsForeignKey = false;
				colvarSenderName.IsReadOnly = false;
				colvarSenderName.DefaultSetting = @"";
				colvarSenderName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSenderName);

				TableSchema.TableColumn colvarSenderAddress = new TableSchema.TableColumn(schema);
				colvarSenderAddress.ColumnName = "SenderAddress";
				colvarSenderAddress.DataType = DbType.String;
				colvarSenderAddress.MaxLength = 256;
				colvarSenderAddress.AutoIncrement = false;
				colvarSenderAddress.IsNullable = false;
				colvarSenderAddress.IsPrimaryKey = false;
				colvarSenderAddress.IsForeignKey = false;
				colvarSenderAddress.IsReadOnly = false;
				colvarSenderAddress.DefaultSetting = @"";
				colvarSenderAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSenderAddress);

				TableSchema.TableColumn colvarIsReady = new TableSchema.TableColumn(schema);
				colvarIsReady.ColumnName = "IsReady";
				colvarIsReady.DataType = DbType.Boolean;
				colvarIsReady.MaxLength = 0;
				colvarIsReady.AutoIncrement = false;
				colvarIsReady.IsNullable = false;
				colvarIsReady.IsPrimaryKey = false;
				colvarIsReady.IsForeignKey = false;
				colvarIsReady.IsReadOnly = false;
				colvarIsReady.DefaultSetting = @"";
				colvarIsReady.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsReady);

				TableSchema.TableColumn colvarDestroyAfter = new TableSchema.TableColumn(schema);
				colvarDestroyAfter.ColumnName = "DestroyAfter";
				colvarDestroyAfter.DataType = DbType.Boolean;
				colvarDestroyAfter.MaxLength = 0;
				colvarDestroyAfter.AutoIncrement = false;
				colvarDestroyAfter.IsNullable = false;
				colvarDestroyAfter.IsPrimaryKey = false;
				colvarDestroyAfter.IsForeignKey = false;
				colvarDestroyAfter.IsReadOnly = false;
				colvarDestroyAfter.DefaultSetting = @"";
				colvarDestroyAfter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDestroyAfter);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("ES_Messages",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static ES_Message LoadFrom(ES_Message item)
		{
			ES_Message result = new ES_Message();
			if (item.MessageID != default(int)) {
				result.LoadByKey(item.MessageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MessageID {
			get { return GetColumnValue<int>(Columns.MessageID); }
			set {
				SetColumnValue(Columns.MessageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageID));
			}
		}
		[DataMember]
		public string Subject {
			get { return GetColumnValue<string>(Columns.Subject); }
			set {
				SetColumnValue(Columns.Subject, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Subject));
			}
		}
		[DataMember]
		public string Body {
			get { return GetColumnValue<string>(Columns.Body); }
			set {
				SetColumnValue(Columns.Body, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Body));
			}
		}
		[DataMember]
		public bool IsHtml {
			get { return GetColumnValue<bool>(Columns.IsHtml); }
			set {
				SetColumnValue(Columns.IsHtml, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsHtml));
			}
		}
		[DataMember]
		public DateTime? SentDate {
			get { return GetColumnValue<DateTime?>(Columns.SentDate); }
			set {
				SetColumnValue(Columns.SentDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SentDate));
			}
		}
		[DataMember]
		public string SenderName {
			get { return GetColumnValue<string>(Columns.SenderName); }
			set {
				SetColumnValue(Columns.SenderName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SenderName));
			}
		}
		[DataMember]
		public string SenderAddress {
			get { return GetColumnValue<string>(Columns.SenderAddress); }
			set {
				SetColumnValue(Columns.SenderAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SenderAddress));
			}
		}
		[DataMember]
		public bool IsReady {
			get { return GetColumnValue<bool>(Columns.IsReady); }
			set {
				SetColumnValue(Columns.IsReady, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsReady));
			}
		}
		[DataMember]
		public bool DestroyAfter {
			get { return GetColumnValue<bool>(Columns.DestroyAfter); }
			set {
				SetColumnValue(Columns.DestroyAfter, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DestroyAfter));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Subject;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MessageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SubjectColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BodyColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsHtmlColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SentDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SenderNameColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SenderAddressColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsReadyColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DestroyAfterColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MessageID = @"MessageID";
			public static readonly string Subject = @"Subject";
			public static readonly string Body = @"Body";
			public static readonly string IsHtml = @"IsHtml";
			public static readonly string SentDate = @"SentDate";
			public static readonly string SenderName = @"SenderName";
			public static readonly string SenderAddress = @"SenderAddress";
			public static readonly string IsReady = @"IsReady";
			public static readonly string DestroyAfter = @"DestroyAfter";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MessageID; }
		}
		*/

		#region Foreign Collections

		private ES_MessageAttachmentCollection _ES_MessageAttachmentsCol;
		//Relationship: FK_ES_MessageAttachment_ES_Messages
		public ES_MessageAttachmentCollection ES_MessageAttachmentsCol
		{
			get
			{
				if(_ES_MessageAttachmentsCol == null) {
					_ES_MessageAttachmentsCol = new ES_MessageAttachmentCollection();
					_ES_MessageAttachmentsCol.LoadAndCloseReader(ES_MessageAttachment.Query()
						.WHERE(ES_MessageAttachment.Columns.MessageID, MessageID).ExecuteReader());
				}
				return _ES_MessageAttachmentsCol;
			}
		}

		private ES_MessageRecipientCollection _ES_MessageRecipientsCol;
		//Relationship: FK_ES_MessageRecipients_ES_Messages
		public ES_MessageRecipientCollection ES_MessageRecipientsCol
		{
			get
			{
				if(_ES_MessageRecipientsCol == null) {
					_ES_MessageRecipientsCol = new ES_MessageRecipientCollection();
					_ES_MessageRecipientsCol.LoadAndCloseReader(ES_MessageRecipient.Query()
						.WHERE(ES_MessageRecipient.Columns.MessageID, MessageID).ExecuteReader());
				}
				return _ES_MessageRecipientsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the GP_CustAcctSummary class.
	/// </summary>
	[DataContract]
	public partial class GP_CustAcctSummaryCollection : ActiveList<GP_CustAcctSummary, GP_CustAcctSummaryCollection>
	{
		public static GP_CustAcctSummaryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			GP_CustAcctSummaryCollection result = new GP_CustAcctSummaryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (GP_CustAcctSummary item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the GP_CustAcctSummary table.
	/// </summary>
	[DataContract]
	public partial class GP_CustAcctSummary : ActiveRecord<GP_CustAcctSummary>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public GP_CustAcctSummary()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("GP_CustAcctSummary", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCustAcctSummaryID = new TableSchema.TableColumn(schema);
				colvarCustAcctSummaryID.ColumnName = "CustAcctSummaryID";
				colvarCustAcctSummaryID.DataType = DbType.Int32;
				colvarCustAcctSummaryID.MaxLength = 0;
				colvarCustAcctSummaryID.AutoIncrement = true;
				colvarCustAcctSummaryID.IsNullable = false;
				colvarCustAcctSummaryID.IsPrimaryKey = true;
				colvarCustAcctSummaryID.IsForeignKey = false;
				colvarCustAcctSummaryID.IsReadOnly = false;
				colvarCustAcctSummaryID.DefaultSetting = @"";
				colvarCustAcctSummaryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustAcctSummaryID);

				TableSchema.TableColumn colvarCustomerNum = new TableSchema.TableColumn(schema);
				colvarCustomerNum.ColumnName = "CustomerNum";
				colvarCustomerNum.DataType = DbType.String;
				colvarCustomerNum.MaxLength = 15;
				colvarCustomerNum.AutoIncrement = false;
				colvarCustomerNum.IsNullable = true;
				colvarCustomerNum.IsPrimaryKey = false;
				colvarCustomerNum.IsForeignKey = false;
				colvarCustomerNum.IsReadOnly = false;
				colvarCustomerNum.DefaultSetting = @"";
				colvarCustomerNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerNum);

				TableSchema.TableColumn colvarCustomerName = new TableSchema.TableColumn(schema);
				colvarCustomerName.ColumnName = "CustomerName";
				colvarCustomerName.DataType = DbType.String;
				colvarCustomerName.MaxLength = 50;
				colvarCustomerName.AutoIncrement = false;
				colvarCustomerName.IsNullable = true;
				colvarCustomerName.IsPrimaryKey = false;
				colvarCustomerName.IsForeignKey = false;
				colvarCustomerName.IsReadOnly = false;
				colvarCustomerName.DefaultSetting = @"";
				colvarCustomerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerName);

				TableSchema.TableColumn colvarInstallDate = new TableSchema.TableColumn(schema);
				colvarInstallDate.ColumnName = "InstallDate";
				colvarInstallDate.DataType = DbType.DateTime;
				colvarInstallDate.MaxLength = 0;
				colvarInstallDate.AutoIncrement = false;
				colvarInstallDate.IsNullable = true;
				colvarInstallDate.IsPrimaryKey = false;
				colvarInstallDate.IsForeignKey = false;
				colvarInstallDate.IsReadOnly = false;
				colvarInstallDate.DefaultSetting = @"";
				colvarInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallDate);

				TableSchema.TableColumn colvarGPSalesRepID = new TableSchema.TableColumn(schema);
				colvarGPSalesRepID.ColumnName = "GPSalesRepID";
				colvarGPSalesRepID.DataType = DbType.String;
				colvarGPSalesRepID.MaxLength = 15;
				colvarGPSalesRepID.AutoIncrement = false;
				colvarGPSalesRepID.IsNullable = true;
				colvarGPSalesRepID.IsPrimaryKey = false;
				colvarGPSalesRepID.IsForeignKey = false;
				colvarGPSalesRepID.IsReadOnly = false;
				colvarGPSalesRepID.DefaultSetting = @"";
				colvarGPSalesRepID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPSalesRepID);

				TableSchema.TableColumn colvarGPTech1ID = new TableSchema.TableColumn(schema);
				colvarGPTech1ID.ColumnName = "GPTech1ID";
				colvarGPTech1ID.DataType = DbType.String;
				colvarGPTech1ID.MaxLength = 15;
				colvarGPTech1ID.AutoIncrement = false;
				colvarGPTech1ID.IsNullable = true;
				colvarGPTech1ID.IsPrimaryKey = false;
				colvarGPTech1ID.IsForeignKey = false;
				colvarGPTech1ID.IsReadOnly = false;
				colvarGPTech1ID.DefaultSetting = @"";
				colvarGPTech1ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPTech1ID);

				TableSchema.TableColumn colvarGPTech2ID = new TableSchema.TableColumn(schema);
				colvarGPTech2ID.ColumnName = "GPTech2ID";
				colvarGPTech2ID.DataType = DbType.String;
				colvarGPTech2ID.MaxLength = 15;
				colvarGPTech2ID.AutoIncrement = false;
				colvarGPTech2ID.IsNullable = true;
				colvarGPTech2ID.IsPrimaryKey = false;
				colvarGPTech2ID.IsForeignKey = false;
				colvarGPTech2ID.IsReadOnly = false;
				colvarGPTech2ID.DefaultSetting = @"";
				colvarGPTech2ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPTech2ID);

				TableSchema.TableColumn colvarSalesTerritory = new TableSchema.TableColumn(schema);
				colvarSalesTerritory.ColumnName = "SalesTerritory";
				colvarSalesTerritory.DataType = DbType.String;
				colvarSalesTerritory.MaxLength = 20;
				colvarSalesTerritory.AutoIncrement = false;
				colvarSalesTerritory.IsNullable = true;
				colvarSalesTerritory.IsPrimaryKey = false;
				colvarSalesTerritory.IsForeignKey = false;
				colvarSalesTerritory.IsReadOnly = false;
				colvarSalesTerritory.DefaultSetting = @"";
				colvarSalesTerritory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesTerritory);

				TableSchema.TableColumn colvarInactiveAcct = new TableSchema.TableColumn(schema);
				colvarInactiveAcct.ColumnName = "InactiveAcct";
				colvarInactiveAcct.DataType = DbType.Boolean;
				colvarInactiveAcct.MaxLength = 0;
				colvarInactiveAcct.AutoIncrement = false;
				colvarInactiveAcct.IsNullable = true;
				colvarInactiveAcct.IsPrimaryKey = false;
				colvarInactiveAcct.IsForeignKey = false;
				colvarInactiveAcct.IsReadOnly = false;
				colvarInactiveAcct.DefaultSetting = @"";
				colvarInactiveAcct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInactiveAcct);

				TableSchema.TableColumn colvarAcctBalance = new TableSchema.TableColumn(schema);
				colvarAcctBalance.ColumnName = "AcctBalance";
				colvarAcctBalance.DataType = DbType.Currency;
				colvarAcctBalance.MaxLength = 0;
				colvarAcctBalance.AutoIncrement = false;
				colvarAcctBalance.IsNullable = true;
				colvarAcctBalance.IsPrimaryKey = false;
				colvarAcctBalance.IsForeignKey = false;
				colvarAcctBalance.IsReadOnly = false;
				colvarAcctBalance.DefaultSetting = @"";
				colvarAcctBalance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAcctBalance);

				TableSchema.TableColumn colvarTotalBilled = new TableSchema.TableColumn(schema);
				colvarTotalBilled.ColumnName = "TotalBilled";
				colvarTotalBilled.DataType = DbType.Currency;
				colvarTotalBilled.MaxLength = 0;
				colvarTotalBilled.AutoIncrement = false;
				colvarTotalBilled.IsNullable = true;
				colvarTotalBilled.IsPrimaryKey = false;
				colvarTotalBilled.IsForeignKey = false;
				colvarTotalBilled.IsReadOnly = false;
				colvarTotalBilled.DefaultSetting = @"";
				colvarTotalBilled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalBilled);

				TableSchema.TableColumn colvarTotalPaid = new TableSchema.TableColumn(schema);
				colvarTotalPaid.ColumnName = "TotalPaid";
				colvarTotalPaid.DataType = DbType.Currency;
				colvarTotalPaid.MaxLength = 0;
				colvarTotalPaid.AutoIncrement = false;
				colvarTotalPaid.IsNullable = true;
				colvarTotalPaid.IsPrimaryKey = false;
				colvarTotalPaid.IsForeignKey = false;
				colvarTotalPaid.IsReadOnly = false;
				colvarTotalPaid.DefaultSetting = @"";
				colvarTotalPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPaid);

				TableSchema.TableColumn colvarAMTAged60_90 = new TableSchema.TableColumn(schema);
				colvarAMTAged60_90.ColumnName = "AMTAged60_90";
				colvarAMTAged60_90.DataType = DbType.Currency;
				colvarAMTAged60_90.MaxLength = 0;
				colvarAMTAged60_90.AutoIncrement = false;
				colvarAMTAged60_90.IsNullable = true;
				colvarAMTAged60_90.IsPrimaryKey = false;
				colvarAMTAged60_90.IsForeignKey = false;
				colvarAMTAged60_90.IsReadOnly = false;
				colvarAMTAged60_90.DefaultSetting = @"";
				colvarAMTAged60_90.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAMTAged60_90);

				TableSchema.TableColumn colvarAmtAged90_120 = new TableSchema.TableColumn(schema);
				colvarAmtAged90_120.ColumnName = "AmtAged90_120";
				colvarAmtAged90_120.DataType = DbType.Currency;
				colvarAmtAged90_120.MaxLength = 0;
				colvarAmtAged90_120.AutoIncrement = false;
				colvarAmtAged90_120.IsNullable = true;
				colvarAmtAged90_120.IsPrimaryKey = false;
				colvarAmtAged90_120.IsForeignKey = false;
				colvarAmtAged90_120.IsReadOnly = false;
				colvarAmtAged90_120.DefaultSetting = @"";
				colvarAmtAged90_120.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmtAged90_120);

				TableSchema.TableColumn colvarAmtAgedOver90 = new TableSchema.TableColumn(schema);
				colvarAmtAgedOver90.ColumnName = "AmtAgedOver90";
				colvarAmtAgedOver90.DataType = DbType.Currency;
				colvarAmtAgedOver90.MaxLength = 0;
				colvarAmtAgedOver90.AutoIncrement = false;
				colvarAmtAgedOver90.IsNullable = true;
				colvarAmtAgedOver90.IsPrimaryKey = false;
				colvarAmtAgedOver90.IsForeignKey = false;
				colvarAmtAgedOver90.IsReadOnly = false;
				colvarAmtAgedOver90.DefaultSetting = @"";
				colvarAmtAgedOver90.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmtAgedOver90);

				TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
				colvarComment.ColumnName = "Comment";
				colvarComment.DataType = DbType.String;
				colvarComment.MaxLength = 50;
				colvarComment.AutoIncrement = false;
				colvarComment.IsNullable = true;
				colvarComment.IsPrimaryKey = false;
				colvarComment.IsForeignKey = false;
				colvarComment.IsReadOnly = false;
				colvarComment.DefaultSetting = @"";
				colvarComment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("GP_CustAcctSummary",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static GP_CustAcctSummary LoadFrom(GP_CustAcctSummary item)
		{
			GP_CustAcctSummary result = new GP_CustAcctSummary();
			if (item.CustAcctSummaryID != default(int)) {
				result.LoadByKey(item.CustAcctSummaryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CustAcctSummaryID {
			get { return GetColumnValue<int>(Columns.CustAcctSummaryID); }
			set {
				SetColumnValue(Columns.CustAcctSummaryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustAcctSummaryID));
			}
		}
		[DataMember]
		public string CustomerNum {
			get { return GetColumnValue<string>(Columns.CustomerNum); }
			set {
				SetColumnValue(Columns.CustomerNum, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerNum));
			}
		}
		[DataMember]
		public string CustomerName {
			get { return GetColumnValue<string>(Columns.CustomerName); }
			set {
				SetColumnValue(Columns.CustomerName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerName));
			}
		}
		[DataMember]
		public DateTime? InstallDate {
			get { return GetColumnValue<DateTime?>(Columns.InstallDate); }
			set {
				SetColumnValue(Columns.InstallDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InstallDate));
			}
		}
		[DataMember]
		public string GPSalesRepID {
			get { return GetColumnValue<string>(Columns.GPSalesRepID); }
			set {
				SetColumnValue(Columns.GPSalesRepID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPSalesRepID));
			}
		}
		[DataMember]
		public string GPTech1ID {
			get { return GetColumnValue<string>(Columns.GPTech1ID); }
			set {
				SetColumnValue(Columns.GPTech1ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPTech1ID));
			}
		}
		[DataMember]
		public string GPTech2ID {
			get { return GetColumnValue<string>(Columns.GPTech2ID); }
			set {
				SetColumnValue(Columns.GPTech2ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPTech2ID));
			}
		}
		[DataMember]
		public string SalesTerritory {
			get { return GetColumnValue<string>(Columns.SalesTerritory); }
			set {
				SetColumnValue(Columns.SalesTerritory, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesTerritory));
			}
		}
		[DataMember]
		public bool? InactiveAcct {
			get { return GetColumnValue<bool?>(Columns.InactiveAcct); }
			set {
				SetColumnValue(Columns.InactiveAcct, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InactiveAcct));
			}
		}
		[DataMember]
		public decimal? AcctBalance {
			get { return GetColumnValue<decimal?>(Columns.AcctBalance); }
			set {
				SetColumnValue(Columns.AcctBalance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AcctBalance));
			}
		}
		[DataMember]
		public decimal? TotalBilled {
			get { return GetColumnValue<decimal?>(Columns.TotalBilled); }
			set {
				SetColumnValue(Columns.TotalBilled, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalBilled));
			}
		}
		[DataMember]
		public decimal? TotalPaid {
			get { return GetColumnValue<decimal?>(Columns.TotalPaid); }
			set {
				SetColumnValue(Columns.TotalPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPaid));
			}
		}
		[DataMember]
		public decimal? AMTAged60_90 {
			get { return GetColumnValue<decimal?>(Columns.AMTAged60_90); }
			set {
				SetColumnValue(Columns.AMTAged60_90, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AMTAged60_90));
			}
		}
		[DataMember]
		public decimal? AmtAged90_120 {
			get { return GetColumnValue<decimal?>(Columns.AmtAged90_120); }
			set {
				SetColumnValue(Columns.AmtAged90_120, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AmtAged90_120));
			}
		}
		[DataMember]
		public decimal? AmtAgedOver90 {
			get { return GetColumnValue<decimal?>(Columns.AmtAgedOver90); }
			set {
				SetColumnValue(Columns.AmtAgedOver90, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AmtAgedOver90));
			}
		}
		[DataMember]
		public string Comment {
			get { return GetColumnValue<string>(Columns.Comment); }
			set {
				SetColumnValue(Columns.Comment, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comment));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CustomerNum;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CustAcctSummaryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CustomerNumColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn InstallDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPSalesRepIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn GPTech1IDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn GPTech2IDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn SalesTerritoryColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn InactiveAcctColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AcctBalanceColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn TotalBilledColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn TotalPaidColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn AMTAged60_90Column
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn AmtAged90_120Column
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn AmtAgedOver90Column
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CommentColumn
		{
			get { return Schema.Columns[15]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CustAcctSummaryID = @"CustAcctSummaryID";
			public static readonly string CustomerNum = @"CustomerNum";
			public static readonly string CustomerName = @"CustomerName";
			public static readonly string InstallDate = @"InstallDate";
			public static readonly string GPSalesRepID = @"GPSalesRepID";
			public static readonly string GPTech1ID = @"GPTech1ID";
			public static readonly string GPTech2ID = @"GPTech2ID";
			public static readonly string SalesTerritory = @"SalesTerritory";
			public static readonly string InactiveAcct = @"InactiveAcct";
			public static readonly string AcctBalance = @"AcctBalance";
			public static readonly string TotalBilled = @"TotalBilled";
			public static readonly string TotalPaid = @"TotalPaid";
			public static readonly string AMTAged60_90 = @"AMTAged60_90";
			public static readonly string AmtAged90_120 = @"AmtAged90_120";
			public static readonly string AmtAgedOver90 = @"AmtAgedOver90";
			public static readonly string Comment = @"Comment";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CustAcctSummaryID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the HS_Complex class.
	/// </summary>
	[DataContract]
	public partial class HS_ComplexCollection : ActiveList<HS_Complex, HS_ComplexCollection>
	{
		public static HS_ComplexCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_ComplexCollection result = new HS_ComplexCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_Complex item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_Complex table.
	/// </summary>
	[DataContract]
	public partial class HS_Complex : ActiveRecord<HS_Complex>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_Complex()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_Complex", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarComplexID = new TableSchema.TableColumn(schema);
				colvarComplexID.ColumnName = "ComplexID";
				colvarComplexID.DataType = DbType.Int32;
				colvarComplexID.MaxLength = 0;
				colvarComplexID.AutoIncrement = true;
				colvarComplexID.IsNullable = false;
				colvarComplexID.IsPrimaryKey = true;
				colvarComplexID.IsForeignKey = false;
				colvarComplexID.IsReadOnly = false;
				colvarComplexID.DefaultSetting = @"";
				colvarComplexID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComplexID);

				TableSchema.TableColumn colvarContactInformationID = new TableSchema.TableColumn(schema);
				colvarContactInformationID.ColumnName = "ContactInformationID";
				colvarContactInformationID.DataType = DbType.Int32;
				colvarContactInformationID.MaxLength = 0;
				colvarContactInformationID.AutoIncrement = false;
				colvarContactInformationID.IsNullable = false;
				colvarContactInformationID.IsPrimaryKey = false;
				colvarContactInformationID.IsForeignKey = true;
				colvarContactInformationID.IsReadOnly = false;
				colvarContactInformationID.DefaultSetting = @"";
				colvarContactInformationID.ForeignKeyTableName = "HS_ContactInformation";
				schema.Columns.Add(colvarContactInformationID);

				TableSchema.TableColumn colvarComplexCheckTypeID = new TableSchema.TableColumn(schema);
				colvarComplexCheckTypeID.ColumnName = "ComplexCheckTypeID";
				colvarComplexCheckTypeID.DataType = DbType.Int32;
				colvarComplexCheckTypeID.MaxLength = 0;
				colvarComplexCheckTypeID.AutoIncrement = false;
				colvarComplexCheckTypeID.IsNullable = false;
				colvarComplexCheckTypeID.IsPrimaryKey = false;
				colvarComplexCheckTypeID.IsForeignKey = true;
				colvarComplexCheckTypeID.IsReadOnly = false;
				colvarComplexCheckTypeID.DefaultSetting = @"";
				colvarComplexCheckTypeID.ForeignKeyTableName = "HS_ComplexCheckType";
				schema.Columns.Add(colvarComplexCheckTypeID);

				TableSchema.TableColumn colvarComplexName = new TableSchema.TableColumn(schema);
				colvarComplexName.ColumnName = "ComplexName";
				colvarComplexName.DataType = DbType.String;
				colvarComplexName.MaxLength = 200;
				colvarComplexName.AutoIncrement = false;
				colvarComplexName.IsNullable = false;
				colvarComplexName.IsPrimaryKey = false;
				colvarComplexName.IsForeignKey = false;
				colvarComplexName.IsReadOnly = false;
				colvarComplexName.DefaultSetting = @"";
				colvarComplexName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComplexName);

				TableSchema.TableColumn colvarManagementCompanyName = new TableSchema.TableColumn(schema);
				colvarManagementCompanyName.ColumnName = "ManagementCompanyName";
				colvarManagementCompanyName.DataType = DbType.String;
				colvarManagementCompanyName.MaxLength = 200;
				colvarManagementCompanyName.AutoIncrement = false;
				colvarManagementCompanyName.IsNullable = true;
				colvarManagementCompanyName.IsPrimaryKey = false;
				colvarManagementCompanyName.IsForeignKey = false;
				colvarManagementCompanyName.IsReadOnly = false;
				colvarManagementCompanyName.DefaultSetting = @"";
				colvarManagementCompanyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManagementCompanyName);

				TableSchema.TableColumn colvarPlatinumManagerUnitID = new TableSchema.TableColumn(schema);
				colvarPlatinumManagerUnitID.ColumnName = "PlatinumManagerUnitID";
				colvarPlatinumManagerUnitID.DataType = DbType.Int32;
				colvarPlatinumManagerUnitID.MaxLength = 0;
				colvarPlatinumManagerUnitID.AutoIncrement = false;
				colvarPlatinumManagerUnitID.IsNullable = true;
				colvarPlatinumManagerUnitID.IsPrimaryKey = false;
				colvarPlatinumManagerUnitID.IsForeignKey = true;
				colvarPlatinumManagerUnitID.IsReadOnly = false;
				colvarPlatinumManagerUnitID.DefaultSetting = @"";
				colvarPlatinumManagerUnitID.ForeignKeyTableName = "HS_Unit";
				schema.Columns.Add(colvarPlatinumManagerUnitID);

				TableSchema.TableColumn colvarSendVacateNoticeInAdvanceDays = new TableSchema.TableColumn(schema);
				colvarSendVacateNoticeInAdvanceDays.ColumnName = "SendVacateNoticeInAdvanceDays";
				colvarSendVacateNoticeInAdvanceDays.DataType = DbType.Int32;
				colvarSendVacateNoticeInAdvanceDays.MaxLength = 0;
				colvarSendVacateNoticeInAdvanceDays.AutoIncrement = false;
				colvarSendVacateNoticeInAdvanceDays.IsNullable = false;
				colvarSendVacateNoticeInAdvanceDays.IsPrimaryKey = false;
				colvarSendVacateNoticeInAdvanceDays.IsForeignKey = false;
				colvarSendVacateNoticeInAdvanceDays.IsReadOnly = false;
				colvarSendVacateNoticeInAdvanceDays.DefaultSetting = @"";
				colvarSendVacateNoticeInAdvanceDays.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSendVacateNoticeInAdvanceDays);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_Complex",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_Complex LoadFrom(HS_Complex item)
		{
			HS_Complex result = new HS_Complex();
			if (item.ComplexID != default(int)) {
				result.LoadByKey(item.ComplexID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ComplexID {
			get { return GetColumnValue<int>(Columns.ComplexID); }
			set {
				SetColumnValue(Columns.ComplexID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ComplexID));
			}
		}
		[DataMember]
		public int ContactInformationID {
			get { return GetColumnValue<int>(Columns.ContactInformationID); }
			set {
				SetColumnValue(Columns.ContactInformationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactInformationID));
			}
		}
		[DataMember]
		public int ComplexCheckTypeID {
			get { return GetColumnValue<int>(Columns.ComplexCheckTypeID); }
			set {
				SetColumnValue(Columns.ComplexCheckTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ComplexCheckTypeID));
			}
		}
		[DataMember]
		public string ComplexName {
			get { return GetColumnValue<string>(Columns.ComplexName); }
			set {
				SetColumnValue(Columns.ComplexName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ComplexName));
			}
		}
		[DataMember]
		public string ManagementCompanyName {
			get { return GetColumnValue<string>(Columns.ManagementCompanyName); }
			set {
				SetColumnValue(Columns.ManagementCompanyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagementCompanyName));
			}
		}
		[DataMember]
		public int? PlatinumManagerUnitID {
			get { return GetColumnValue<int?>(Columns.PlatinumManagerUnitID); }
			set {
				SetColumnValue(Columns.PlatinumManagerUnitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PlatinumManagerUnitID));
			}
		}
		[DataMember]
		public int SendVacateNoticeInAdvanceDays {
			get { return GetColumnValue<int>(Columns.SendVacateNoticeInAdvanceDays); }
			set {
				SetColumnValue(Columns.SendVacateNoticeInAdvanceDays, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SendVacateNoticeInAdvanceDays));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_ComplexCheckType _ComplexCheckType;
		//Relationship: FK_HS_Complex_HS_ComplexCheckType
		public HS_ComplexCheckType ComplexCheckType
		{
			get
			{
				if(_ComplexCheckType == null) {
					_ComplexCheckType = HS_ComplexCheckType.FetchByID(this.ComplexCheckTypeID);
				}
				return _ComplexCheckType;
			}
			set
			{
				SetColumnValue("ComplexCheckTypeID", value.ComplexCheckTypeID);
				_ComplexCheckType = value;
			}
		}

		private HS_ContactInformation _ContactInformation;
		//Relationship: FK_HS_Complex_HS_ContactInformation
		public HS_ContactInformation ContactInformation
		{
			get
			{
				if(_ContactInformation == null) {
					_ContactInformation = HS_ContactInformation.FetchByID(this.ContactInformationID);
				}
				return _ContactInformation;
			}
			set
			{
				SetColumnValue("ContactInformationID", value.ContactInformationID);
				_ContactInformation = value;
			}
		}

		private HS_Unit _PlatinumManagerUnit;
		//Relationship: FK_HS_Complex_HS_Unit
		public HS_Unit PlatinumManagerUnit
		{
			get
			{
				if(_PlatinumManagerUnit == null) {
					_PlatinumManagerUnit = HS_Unit.FetchByID(this.PlatinumManagerUnitID);
				}
				return _PlatinumManagerUnit;
			}
			set
			{
				SetColumnValue("PlatinumManagerUnitID", value.UnitID);
				_PlatinumManagerUnit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ComplexID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ComplexIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContactInformationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ComplexCheckTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ComplexNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ManagementCompanyNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn PlatinumManagerUnitIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SendVacateNoticeInAdvanceDaysColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ComplexID = @"ComplexID";
			public static readonly string ContactInformationID = @"ContactInformationID";
			public static readonly string ComplexCheckTypeID = @"ComplexCheckTypeID";
			public static readonly string ComplexName = @"ComplexName";
			public static readonly string ManagementCompanyName = @"ManagementCompanyName";
			public static readonly string PlatinumManagerUnitID = @"PlatinumManagerUnitID";
			public static readonly string SendVacateNoticeInAdvanceDays = @"SendVacateNoticeInAdvanceDays";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ComplexID; }
		}
		*/

		#region Foreign Collections

		private HS_ComplexNoteCollection _HS_ComplexNotesCol;
		//Relationship: FK_HS_ComplexNotes_HS_Complex
		public HS_ComplexNoteCollection HS_ComplexNotesCol
		{
			get
			{
				if(_HS_ComplexNotesCol == null) {
					_HS_ComplexNotesCol = new HS_ComplexNoteCollection();
					_HS_ComplexNotesCol.LoadAndCloseReader(HS_ComplexNote.Query()
						.WHERE(HS_ComplexNote.Columns.ComplexID, ComplexID).ExecuteReader());
				}
				return _HS_ComplexNotesCol;
			}
		}

		private HS_OfficeComplexCollection _HS_OfficeComplicesCol;
		//Relationship: FK_HS_OfficeComplex_HS_Complex
		public HS_OfficeComplexCollection HS_OfficeComplicesCol
		{
			get
			{
				if(_HS_OfficeComplicesCol == null) {
					_HS_OfficeComplicesCol = new HS_OfficeComplexCollection();
					_HS_OfficeComplicesCol.LoadAndCloseReader(HS_OfficeComplex.Query()
						.WHERE(HS_OfficeComplex.Columns.ComplexID, ComplexID).ExecuteReader());
				}
				return _HS_OfficeComplicesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_ComplexCheckType class.
	/// </summary>
	[DataContract]
	public partial class HS_ComplexCheckTypeCollection : ActiveList<HS_ComplexCheckType, HS_ComplexCheckTypeCollection>
	{
		public static HS_ComplexCheckTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_ComplexCheckTypeCollection result = new HS_ComplexCheckTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_ComplexCheckType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_ComplexCheckType table.
	/// </summary>
	[DataContract]
	public partial class HS_ComplexCheckType : ActiveRecord<HS_ComplexCheckType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum ComplexCheckTypeEnum : int
		{
			[EnumMember()] Per_Unit = 1,
			[EnumMember()] Per_Complex = 2,
		}

		//[DataMember]
		//public ComplexCheckTypeEnum ComplexCheckTypeCode
		//{
		//	get { return (ComplexCheckTypeEnum)ComplexCheckTypeID; }
		//	set { ComplexCheckTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_ComplexCheckType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_ComplexCheckType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarComplexCheckTypeID = new TableSchema.TableColumn(schema);
				colvarComplexCheckTypeID.ColumnName = "ComplexCheckTypeID";
				colvarComplexCheckTypeID.DataType = DbType.Int32;
				colvarComplexCheckTypeID.MaxLength = 0;
				colvarComplexCheckTypeID.AutoIncrement = true;
				colvarComplexCheckTypeID.IsNullable = false;
				colvarComplexCheckTypeID.IsPrimaryKey = true;
				colvarComplexCheckTypeID.IsForeignKey = false;
				colvarComplexCheckTypeID.IsReadOnly = false;
				colvarComplexCheckTypeID.DefaultSetting = @"";
				colvarComplexCheckTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComplexCheckTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_ComplexCheckType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_ComplexCheckType LoadFrom(HS_ComplexCheckType item)
		{
			HS_ComplexCheckType result = new HS_ComplexCheckType();
			if (item.ComplexCheckTypeID != default(int)) {
				result.LoadByKey(item.ComplexCheckTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ComplexCheckTypeID {
			get { return GetColumnValue<int>(Columns.ComplexCheckTypeID); }
			set {
				SetColumnValue(Columns.ComplexCheckTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ComplexCheckTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ComplexCheckTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ComplexCheckTypeID = @"ComplexCheckTypeID";
			public static readonly string Description = @"Description";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ComplexCheckTypeID; }
		}
		*/

		#region Foreign Collections

		private HS_ComplexCollection _HS_ComplicesCol;
		//Relationship: FK_HS_Complex_HS_ComplexCheckType
		public HS_ComplexCollection HS_ComplicesCol
		{
			get
			{
				if(_HS_ComplicesCol == null) {
					_HS_ComplicesCol = new HS_ComplexCollection();
					_HS_ComplicesCol.LoadAndCloseReader(HS_Complex.Query()
						.WHERE(HS_Complex.Columns.ComplexCheckTypeID, ComplexCheckTypeID).ExecuteReader());
				}
				return _HS_ComplicesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_ComplexNote class.
	/// </summary>
	[DataContract]
	public partial class HS_ComplexNoteCollection : ActiveList<HS_ComplexNote, HS_ComplexNoteCollection>
	{
		public static HS_ComplexNoteCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_ComplexNoteCollection result = new HS_ComplexNoteCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_ComplexNote item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_ComplexNotes table.
	/// </summary>
	[DataContract]
	public partial class HS_ComplexNote : ActiveRecord<HS_ComplexNote>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_ComplexNote()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_ComplexNotes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarComplexNoteID = new TableSchema.TableColumn(schema);
				colvarComplexNoteID.ColumnName = "ComplexNoteID";
				colvarComplexNoteID.DataType = DbType.Int32;
				colvarComplexNoteID.MaxLength = 0;
				colvarComplexNoteID.AutoIncrement = true;
				colvarComplexNoteID.IsNullable = false;
				colvarComplexNoteID.IsPrimaryKey = true;
				colvarComplexNoteID.IsForeignKey = false;
				colvarComplexNoteID.IsReadOnly = false;
				colvarComplexNoteID.DefaultSetting = @"";
				colvarComplexNoteID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComplexNoteID);

				TableSchema.TableColumn colvarComplexID = new TableSchema.TableColumn(schema);
				colvarComplexID.ColumnName = "ComplexID";
				colvarComplexID.DataType = DbType.Int32;
				colvarComplexID.MaxLength = 0;
				colvarComplexID.AutoIncrement = false;
				colvarComplexID.IsNullable = false;
				colvarComplexID.IsPrimaryKey = false;
				colvarComplexID.IsForeignKey = true;
				colvarComplexID.IsReadOnly = false;
				colvarComplexID.DefaultSetting = @"";
				colvarComplexID.ForeignKeyTableName = "HS_Complex";
				schema.Columns.Add(colvarComplexID);

				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = 2000;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = false;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_ComplexNotes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_ComplexNote LoadFrom(HS_ComplexNote item)
		{
			HS_ComplexNote result = new HS_ComplexNote();
			if (item.ComplexNoteID != default(int)) {
				result.LoadByKey(item.ComplexNoteID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ComplexNoteID {
			get { return GetColumnValue<int>(Columns.ComplexNoteID); }
			set {
				SetColumnValue(Columns.ComplexNoteID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ComplexNoteID));
			}
		}
		[DataMember]
		public int ComplexID {
			get { return GetColumnValue<int>(Columns.ComplexID); }
			set {
				SetColumnValue(Columns.ComplexID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ComplexID));
			}
		}
		[DataMember]
		public string Note {
			get { return GetColumnValue<string>(Columns.Note); }
			set {
				SetColumnValue(Columns.Note, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Note));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_Complex _Complex;
		//Relationship: FK_HS_ComplexNotes_HS_Complex
		public HS_Complex Complex
		{
			get
			{
				if(_Complex == null) {
					_Complex = HS_Complex.FetchByID(this.ComplexID);
				}
				return _Complex;
			}
			set
			{
				SetColumnValue("ComplexID", value.ComplexID);
				_Complex = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ComplexNoteID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ComplexNoteIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ComplexIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn NoteColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ComplexNoteID = @"ComplexNoteID";
			public static readonly string ComplexID = @"ComplexID";
			public static readonly string Note = @"Note";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ComplexNoteID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the HS_ContactInformation class.
	/// </summary>
	[DataContract]
	public partial class HS_ContactInformationCollection : ActiveList<HS_ContactInformation, HS_ContactInformationCollection>
	{
		public static HS_ContactInformationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_ContactInformationCollection result = new HS_ContactInformationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_ContactInformation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_ContactInformation table.
	/// </summary>
	[DataContract]
	public partial class HS_ContactInformation : ActiveRecord<HS_ContactInformation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_ContactInformation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_ContactInformation", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContactInformationID = new TableSchema.TableColumn(schema);
				colvarContactInformationID.ColumnName = "ContactInformationID";
				colvarContactInformationID.DataType = DbType.Int32;
				colvarContactInformationID.MaxLength = 0;
				colvarContactInformationID.AutoIncrement = true;
				colvarContactInformationID.IsNullable = false;
				colvarContactInformationID.IsPrimaryKey = true;
				colvarContactInformationID.IsForeignKey = false;
				colvarContactInformationID.IsReadOnly = false;
				colvarContactInformationID.DefaultSetting = @"";
				colvarContactInformationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactInformationID);

				TableSchema.TableColumn colvarContactName = new TableSchema.TableColumn(schema);
				colvarContactName.ColumnName = "ContactName";
				colvarContactName.DataType = DbType.String;
				colvarContactName.MaxLength = 50;
				colvarContactName.AutoIncrement = false;
				colvarContactName.IsNullable = true;
				colvarContactName.IsPrimaryKey = false;
				colvarContactName.IsForeignKey = false;
				colvarContactName.IsReadOnly = false;
				colvarContactName.DefaultSetting = @"";
				colvarContactName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactName);

				TableSchema.TableColumn colvarMainPhone = new TableSchema.TableColumn(schema);
				colvarMainPhone.ColumnName = "MainPhone";
				colvarMainPhone.DataType = DbType.String;
				colvarMainPhone.MaxLength = 10;
				colvarMainPhone.AutoIncrement = false;
				colvarMainPhone.IsNullable = true;
				colvarMainPhone.IsPrimaryKey = false;
				colvarMainPhone.IsForeignKey = false;
				colvarMainPhone.IsReadOnly = false;
				colvarMainPhone.DefaultSetting = @"";
				colvarMainPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMainPhone);

				TableSchema.TableColumn colvarSecondaryPhone = new TableSchema.TableColumn(schema);
				colvarSecondaryPhone.ColumnName = "SecondaryPhone";
				colvarSecondaryPhone.DataType = DbType.String;
				colvarSecondaryPhone.MaxLength = 10;
				colvarSecondaryPhone.AutoIncrement = false;
				colvarSecondaryPhone.IsNullable = true;
				colvarSecondaryPhone.IsPrimaryKey = false;
				colvarSecondaryPhone.IsForeignKey = false;
				colvarSecondaryPhone.IsReadOnly = false;
				colvarSecondaryPhone.DefaultSetting = @"";
				colvarSecondaryPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSecondaryPhone);

				TableSchema.TableColumn colvarFax = new TableSchema.TableColumn(schema);
				colvarFax.ColumnName = "Fax";
				colvarFax.DataType = DbType.String;
				colvarFax.MaxLength = 10;
				colvarFax.AutoIncrement = false;
				colvarFax.IsNullable = true;
				colvarFax.IsPrimaryKey = false;
				colvarFax.IsForeignKey = false;
				colvarFax.IsReadOnly = false;
				colvarFax.DefaultSetting = @"";
				colvarFax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFax);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 200;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_ContactInformation",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_ContactInformation LoadFrom(HS_ContactInformation item)
		{
			HS_ContactInformation result = new HS_ContactInformation();
			if (item.ContactInformationID != default(int)) {
				result.LoadByKey(item.ContactInformationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContactInformationID {
			get { return GetColumnValue<int>(Columns.ContactInformationID); }
			set {
				SetColumnValue(Columns.ContactInformationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactInformationID));
			}
		}
		[DataMember]
		public string ContactName {
			get { return GetColumnValue<string>(Columns.ContactName); }
			set {
				SetColumnValue(Columns.ContactName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactName));
			}
		}
		[DataMember]
		public string MainPhone {
			get { return GetColumnValue<string>(Columns.MainPhone); }
			set {
				SetColumnValue(Columns.MainPhone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MainPhone));
			}
		}
		[DataMember]
		public string SecondaryPhone {
			get { return GetColumnValue<string>(Columns.SecondaryPhone); }
			set {
				SetColumnValue(Columns.SecondaryPhone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SecondaryPhone));
			}
		}
		[DataMember]
		public string Fax {
			get { return GetColumnValue<string>(Columns.Fax); }
			set {
				SetColumnValue(Columns.Fax, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Fax));
			}
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set {
				SetColumnValue(Columns.Email, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Email));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ContactName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContactInformationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContactNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MainPhoneColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SecondaryPhoneColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn FaxColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContactInformationID = @"ContactInformationID";
			public static readonly string ContactName = @"ContactName";
			public static readonly string MainPhone = @"MainPhone";
			public static readonly string SecondaryPhone = @"SecondaryPhone";
			public static readonly string Fax = @"Fax";
			public static readonly string Email = @"Email";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContactInformationID; }
		}
		*/

		#region Foreign Collections

		private HS_ComplexCollection _HS_ComplicesCol;
		//Relationship: FK_HS_Complex_HS_ContactInformation
		public HS_ComplexCollection HS_ComplicesCol
		{
			get
			{
				if(_HS_ComplicesCol == null) {
					_HS_ComplicesCol = new HS_ComplexCollection();
					_HS_ComplicesCol.LoadAndCloseReader(HS_Complex.Query()
						.WHERE(HS_Complex.Columns.ContactInformationID, ContactInformationID).ExecuteReader());
				}
				return _HS_ComplicesCol;
			}
		}

		private HS_ContactInformationAddressCollection _HS_ContactInformationAddressesCol;
		//Relationship: FK_HS_ContactInformationAddress_HS_ContactInformation
		public HS_ContactInformationAddressCollection HS_ContactInformationAddressesCol
		{
			get
			{
				if(_HS_ContactInformationAddressesCol == null) {
					_HS_ContactInformationAddressesCol = new HS_ContactInformationAddressCollection();
					_HS_ContactInformationAddressesCol.LoadAndCloseReader(HS_ContactInformationAddress.Query()
						.WHERE(HS_ContactInformationAddress.Columns.ContactInformationID, ContactInformationID).ExecuteReader());
				}
				return _HS_ContactInformationAddressesCol;
			}
		}

		private HS_FurnitureCompanyCollection _HS_FurnitureCompaniesCol;
		//Relationship: FK_HS_FurnitureCompany_HS_ContactInformation
		public HS_FurnitureCompanyCollection HS_FurnitureCompaniesCol
		{
			get
			{
				if(_HS_FurnitureCompaniesCol == null) {
					_HS_FurnitureCompaniesCol = new HS_FurnitureCompanyCollection();
					_HS_FurnitureCompaniesCol.LoadAndCloseReader(HS_FurnitureCompany.Query()
						.WHERE(HS_FurnitureCompany.Columns.ContactInformationID, ContactInformationID).ExecuteReader());
				}
				return _HS_FurnitureCompaniesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_ContactInformationAddress class.
	/// </summary>
	[DataContract]
	public partial class HS_ContactInformationAddressCollection : ActiveList<HS_ContactInformationAddress, HS_ContactInformationAddressCollection>
	{
		public static HS_ContactInformationAddressCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_ContactInformationAddressCollection result = new HS_ContactInformationAddressCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_ContactInformationAddress item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_ContactInformationAddress table.
	/// </summary>
	[DataContract]
	public partial class HS_ContactInformationAddress : ActiveRecord<HS_ContactInformationAddress>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_ContactInformationAddress()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_ContactInformationAddress", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContactInformationAddressID = new TableSchema.TableColumn(schema);
				colvarContactInformationAddressID.ColumnName = "ContactInformationAddressID";
				colvarContactInformationAddressID.DataType = DbType.Int32;
				colvarContactInformationAddressID.MaxLength = 0;
				colvarContactInformationAddressID.AutoIncrement = true;
				colvarContactInformationAddressID.IsNullable = false;
				colvarContactInformationAddressID.IsPrimaryKey = true;
				colvarContactInformationAddressID.IsForeignKey = false;
				colvarContactInformationAddressID.IsReadOnly = false;
				colvarContactInformationAddressID.DefaultSetting = @"";
				colvarContactInformationAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactInformationAddressID);

				TableSchema.TableColumn colvarContactInformationID = new TableSchema.TableColumn(schema);
				colvarContactInformationID.ColumnName = "ContactInformationID";
				colvarContactInformationID.DataType = DbType.Int32;
				colvarContactInformationID.MaxLength = 0;
				colvarContactInformationID.AutoIncrement = false;
				colvarContactInformationID.IsNullable = false;
				colvarContactInformationID.IsPrimaryKey = false;
				colvarContactInformationID.IsForeignKey = true;
				colvarContactInformationID.IsReadOnly = false;
				colvarContactInformationID.DefaultSetting = @"";
				colvarContactInformationID.ForeignKeyTableName = "HS_ContactInformation";
				schema.Columns.Add(colvarContactInformationID);

				TableSchema.TableColumn colvarAddressTypeID = new TableSchema.TableColumn(schema);
				colvarAddressTypeID.ColumnName = "AddressTypeID";
				colvarAddressTypeID.DataType = DbType.Int32;
				colvarAddressTypeID.MaxLength = 0;
				colvarAddressTypeID.AutoIncrement = false;
				colvarAddressTypeID.IsNullable = false;
				colvarAddressTypeID.IsPrimaryKey = false;
				colvarAddressTypeID.IsForeignKey = true;
				colvarAddressTypeID.IsReadOnly = false;
				colvarAddressTypeID.DefaultSetting = @"";
				colvarAddressTypeID.ForeignKeyTableName = "HS_ContactInformationAddressType";
				schema.Columns.Add(colvarAddressTypeID);

				TableSchema.TableColumn colvarAddressLine1 = new TableSchema.TableColumn(schema);
				colvarAddressLine1.ColumnName = "AddressLine1";
				colvarAddressLine1.DataType = DbType.String;
				colvarAddressLine1.MaxLength = 200;
				colvarAddressLine1.AutoIncrement = false;
				colvarAddressLine1.IsNullable = false;
				colvarAddressLine1.IsPrimaryKey = false;
				colvarAddressLine1.IsForeignKey = false;
				colvarAddressLine1.IsReadOnly = false;
				colvarAddressLine1.DefaultSetting = @"";
				colvarAddressLine1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressLine1);

				TableSchema.TableColumn colvarAddressLine2 = new TableSchema.TableColumn(schema);
				colvarAddressLine2.ColumnName = "AddressLine2";
				colvarAddressLine2.DataType = DbType.String;
				colvarAddressLine2.MaxLength = 200;
				colvarAddressLine2.AutoIncrement = false;
				colvarAddressLine2.IsNullable = true;
				colvarAddressLine2.IsPrimaryKey = false;
				colvarAddressLine2.IsForeignKey = false;
				colvarAddressLine2.IsReadOnly = false;
				colvarAddressLine2.DefaultSetting = @"";
				colvarAddressLine2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressLine2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = true;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "MC_PoliticalStates";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = false;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = true;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"";
				colvarCountryId.ForeignKeyTableName = "MC_PoliticalCountrys";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.String;
				colvarZipCode.MaxLength = 10;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = false;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_ContactInformationAddress",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_ContactInformationAddress LoadFrom(HS_ContactInformationAddress item)
		{
			HS_ContactInformationAddress result = new HS_ContactInformationAddress();
			if (item.ContactInformationAddressID != default(int)) {
				result.LoadByKey(item.ContactInformationAddressID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContactInformationAddressID {
			get { return GetColumnValue<int>(Columns.ContactInformationAddressID); }
			set {
				SetColumnValue(Columns.ContactInformationAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactInformationAddressID));
			}
		}
		[DataMember]
		public int ContactInformationID {
			get { return GetColumnValue<int>(Columns.ContactInformationID); }
			set {
				SetColumnValue(Columns.ContactInformationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactInformationID));
			}
		}
		[DataMember]
		public int AddressTypeID {
			get { return GetColumnValue<int>(Columns.AddressTypeID); }
			set {
				SetColumnValue(Columns.AddressTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressTypeID));
			}
		}
		[DataMember]
		public string AddressLine1 {
			get { return GetColumnValue<string>(Columns.AddressLine1); }
			set {
				SetColumnValue(Columns.AddressLine1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressLine1));
			}
		}
		[DataMember]
		public string AddressLine2 {
			get { return GetColumnValue<string>(Columns.AddressLine2); }
			set {
				SetColumnValue(Columns.AddressLine2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressLine2));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set {
				SetColumnValue(Columns.CountryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryId));
			}
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set {
				SetColumnValue(Columns.ZipCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZipCode));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_ContactInformation _ContactInformation;
		//Relationship: FK_HS_ContactInformationAddress_HS_ContactInformation
		public HS_ContactInformation ContactInformation
		{
			get
			{
				if(_ContactInformation == null) {
					_ContactInformation = HS_ContactInformation.FetchByID(this.ContactInformationID);
				}
				return _ContactInformation;
			}
			set
			{
				SetColumnValue("ContactInformationID", value.ContactInformationID);
				_ContactInformation = value;
			}
		}

		private HS_ContactInformationAddressType _AddressType;
		//Relationship: FK_HS_ContactInformationAddress_HS_ContactInformationAddressType
		public HS_ContactInformationAddressType AddressType
		{
			get
			{
				if(_AddressType == null) {
					_AddressType = HS_ContactInformationAddressType.FetchByID(this.AddressTypeID);
				}
				return _AddressType;
			}
			set
			{
				SetColumnValue("AddressTypeID", value.AddressTypeID);
				_AddressType = value;
			}
		}

		private MC_PoliticalCountry _Country;
		//Relationship: FK_HS_ContactInformationAddress_MC_PoliticalCountrys
		public MC_PoliticalCountry Country
		{
			get
			{
				if(_Country == null) {
					_Country = MC_PoliticalCountry.FetchByID(this.CountryId);
				}
				return _Country;
			}
			set
			{
				SetColumnValue("CountryId", value.CountryID);
				_Country = value;
			}
		}

		private MC_PoliticalState _State;
		//Relationship: FK_HS_ContactInformationAddress_MC_PoliticalStates
		public MC_PoliticalState State
		{
			get
			{
				if(_State == null) {
					_State = MC_PoliticalState.FetchByID(this.StateId);
				}
				return _State;
			}
			set
			{
				SetColumnValue("StateId", value.StateID);
				_State = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ContactInformationAddressID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContactInformationAddressIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContactInformationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AddressTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AddressLine1Column
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AddressLine2Column
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContactInformationAddressID = @"ContactInformationAddressID";
			public static readonly string ContactInformationID = @"ContactInformationID";
			public static readonly string AddressTypeID = @"AddressTypeID";
			public static readonly string AddressLine1 = @"AddressLine1";
			public static readonly string AddressLine2 = @"AddressLine2";
			public static readonly string City = @"City";
			public static readonly string StateId = @"StateId";
			public static readonly string CountryId = @"CountryId";
			public static readonly string ZipCode = @"ZipCode";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContactInformationAddressID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the HS_ContactInformationAddressType class.
	/// </summary>
	[DataContract]
	public partial class HS_ContactInformationAddressTypeCollection : ActiveList<HS_ContactInformationAddressType, HS_ContactInformationAddressTypeCollection>
	{
		public static HS_ContactInformationAddressTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_ContactInformationAddressTypeCollection result = new HS_ContactInformationAddressTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_ContactInformationAddressType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_ContactInformationAddressType table.
	/// </summary>
	[DataContract]
	public partial class HS_ContactInformationAddressType : ActiveRecord<HS_ContactInformationAddressType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum AddressTypeEnum : int
		{
			[EnumMember()] Mailing_Address = 1,
			[EnumMember()] Physical_Address = 2,
		}

		//[DataMember]
		//public AddressTypeEnum AddressTypeCode
		//{
		//	get { return (AddressTypeEnum)AddressTypeID; }
		//	set { AddressTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_ContactInformationAddressType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_ContactInformationAddressType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressTypeID = new TableSchema.TableColumn(schema);
				colvarAddressTypeID.ColumnName = "AddressTypeID";
				colvarAddressTypeID.DataType = DbType.Int32;
				colvarAddressTypeID.MaxLength = 0;
				colvarAddressTypeID.AutoIncrement = true;
				colvarAddressTypeID.IsNullable = false;
				colvarAddressTypeID.IsPrimaryKey = true;
				colvarAddressTypeID.IsForeignKey = false;
				colvarAddressTypeID.IsReadOnly = false;
				colvarAddressTypeID.DefaultSetting = @"";
				colvarAddressTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressTypeID);

				TableSchema.TableColumn colvarAddressTypeName = new TableSchema.TableColumn(schema);
				colvarAddressTypeName.ColumnName = "AddressTypeName";
				colvarAddressTypeName.DataType = DbType.String;
				colvarAddressTypeName.MaxLength = 50;
				colvarAddressTypeName.AutoIncrement = false;
				colvarAddressTypeName.IsNullable = false;
				colvarAddressTypeName.IsPrimaryKey = false;
				colvarAddressTypeName.IsForeignKey = false;
				colvarAddressTypeName.IsReadOnly = false;
				colvarAddressTypeName.DefaultSetting = @"";
				colvarAddressTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressTypeName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_ContactInformationAddressType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_ContactInformationAddressType LoadFrom(HS_ContactInformationAddressType item)
		{
			HS_ContactInformationAddressType result = new HS_ContactInformationAddressType();
			if (item.AddressTypeID != default(int)) {
				result.LoadByKey(item.AddressTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AddressTypeID {
			get { return GetColumnValue<int>(Columns.AddressTypeID); }
			set {
				SetColumnValue(Columns.AddressTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressTypeID));
			}
		}
		[DataMember]
		public string AddressTypeName {
			get { return GetColumnValue<string>(Columns.AddressTypeName); }
			set {
				SetColumnValue(Columns.AddressTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressTypeName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AddressTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AddressTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddressTypeID = @"AddressTypeID";
			public static readonly string AddressTypeName = @"AddressTypeName";
			public static readonly string IsActive = @"IsActive";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddressTypeID; }
		}
		*/

		#region Foreign Collections

		private HS_ContactInformationAddressCollection _HS_ContactInformationAddressesCol;
		//Relationship: FK_HS_ContactInformationAddress_HS_ContactInformationAddressType
		public HS_ContactInformationAddressCollection HS_ContactInformationAddressesCol
		{
			get
			{
				if(_HS_ContactInformationAddressesCol == null) {
					_HS_ContactInformationAddressesCol = new HS_ContactInformationAddressCollection();
					_HS_ContactInformationAddressesCol.LoadAndCloseReader(HS_ContactInformationAddress.Query()
						.WHERE(HS_ContactInformationAddress.Columns.AddressTypeID, AddressTypeID).ExecuteReader());
				}
				return _HS_ContactInformationAddressesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_FurnitureCompany class.
	/// </summary>
	[DataContract]
	public partial class HS_FurnitureCompanyCollection : ActiveList<HS_FurnitureCompany, HS_FurnitureCompanyCollection>
	{
		public static HS_FurnitureCompanyCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_FurnitureCompanyCollection result = new HS_FurnitureCompanyCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_FurnitureCompany item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_FurnitureCompany table.
	/// </summary>
	[DataContract]
	public partial class HS_FurnitureCompany : ActiveRecord<HS_FurnitureCompany>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_FurnitureCompany()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_FurnitureCompany", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarFurnitureCompanyID = new TableSchema.TableColumn(schema);
				colvarFurnitureCompanyID.ColumnName = "FurnitureCompanyID";
				colvarFurnitureCompanyID.DataType = DbType.Int32;
				colvarFurnitureCompanyID.MaxLength = 0;
				colvarFurnitureCompanyID.AutoIncrement = true;
				colvarFurnitureCompanyID.IsNullable = false;
				colvarFurnitureCompanyID.IsPrimaryKey = true;
				colvarFurnitureCompanyID.IsForeignKey = false;
				colvarFurnitureCompanyID.IsReadOnly = false;
				colvarFurnitureCompanyID.DefaultSetting = @"";
				colvarFurnitureCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFurnitureCompanyID);

				TableSchema.TableColumn colvarGPID = new TableSchema.TableColumn(schema);
				colvarGPID.ColumnName = "GPID";
				colvarGPID.DataType = DbType.String;
				colvarGPID.MaxLength = 50;
				colvarGPID.AutoIncrement = false;
				colvarGPID.IsNullable = false;
				colvarGPID.IsPrimaryKey = false;
				colvarGPID.IsForeignKey = false;
				colvarGPID.IsReadOnly = false;
				colvarGPID.DefaultSetting = @"";
				colvarGPID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPID);

				TableSchema.TableColumn colvarCompanyName = new TableSchema.TableColumn(schema);
				colvarCompanyName.ColumnName = "CompanyName";
				colvarCompanyName.DataType = DbType.String;
				colvarCompanyName.MaxLength = 100;
				colvarCompanyName.AutoIncrement = false;
				colvarCompanyName.IsNullable = false;
				colvarCompanyName.IsPrimaryKey = false;
				colvarCompanyName.IsForeignKey = false;
				colvarCompanyName.IsReadOnly = false;
				colvarCompanyName.DefaultSetting = @"";
				colvarCompanyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyName);

				TableSchema.TableColumn colvarContactInformationID = new TableSchema.TableColumn(schema);
				colvarContactInformationID.ColumnName = "ContactInformationID";
				colvarContactInformationID.DataType = DbType.Int32;
				colvarContactInformationID.MaxLength = 0;
				colvarContactInformationID.AutoIncrement = false;
				colvarContactInformationID.IsNullable = false;
				colvarContactInformationID.IsPrimaryKey = false;
				colvarContactInformationID.IsForeignKey = true;
				colvarContactInformationID.IsReadOnly = false;
				colvarContactInformationID.DefaultSetting = @"";
				colvarContactInformationID.ForeignKeyTableName = "HS_ContactInformation";
				schema.Columns.Add(colvarContactInformationID);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_FurnitureCompany",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_FurnitureCompany LoadFrom(HS_FurnitureCompany item)
		{
			HS_FurnitureCompany result = new HS_FurnitureCompany();
			if (item.FurnitureCompanyID != default(int)) {
				result.LoadByKey(item.FurnitureCompanyID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int FurnitureCompanyID {
			get { return GetColumnValue<int>(Columns.FurnitureCompanyID); }
			set {
				SetColumnValue(Columns.FurnitureCompanyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurnitureCompanyID));
			}
		}
		[DataMember]
		public string GPID {
			get { return GetColumnValue<string>(Columns.GPID); }
			set {
				SetColumnValue(Columns.GPID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPID));
			}
		}
		[DataMember]
		public string CompanyName {
			get { return GetColumnValue<string>(Columns.CompanyName); }
			set {
				SetColumnValue(Columns.CompanyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CompanyName));
			}
		}
		[DataMember]
		public int ContactInformationID {
			get { return GetColumnValue<int>(Columns.ContactInformationID); }
			set {
				SetColumnValue(Columns.ContactInformationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContactInformationID));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_ContactInformation _ContactInformation;
		//Relationship: FK_HS_FurnitureCompany_HS_ContactInformation
		public HS_ContactInformation ContactInformation
		{
			get
			{
				if(_ContactInformation == null) {
					_ContactInformation = HS_ContactInformation.FetchByID(this.ContactInformationID);
				}
				return _ContactInformation;
			}
			set
			{
				SetColumnValue("ContactInformationID", value.ContactInformationID);
				_ContactInformation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return GPID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn FurnitureCompanyIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn GPIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CompanyNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ContactInformationIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string FurnitureCompanyID = @"FurnitureCompanyID";
			public static readonly string GPID = @"GPID";
			public static readonly string CompanyName = @"CompanyName";
			public static readonly string ContactInformationID = @"ContactInformationID";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return FurnitureCompanyID; }
		}
		*/

		#region Foreign Collections

		private HS_FurniturePackageCollection _HS_FurniturePackagesCol;
		//Relationship: FK_HS_FurniturePackage_HS_FurnitureCompany
		public HS_FurniturePackageCollection HS_FurniturePackagesCol
		{
			get
			{
				if(_HS_FurniturePackagesCol == null) {
					_HS_FurniturePackagesCol = new HS_FurniturePackageCollection();
					_HS_FurniturePackagesCol.LoadAndCloseReader(HS_FurniturePackage.Query()
						.WHERE(HS_FurniturePackage.Columns.FurnitureCompanyID, FurnitureCompanyID).ExecuteReader());
				}
				return _HS_FurniturePackagesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_FurnitureItem class.
	/// </summary>
	[DataContract]
	public partial class HS_FurnitureItemCollection : ActiveList<HS_FurnitureItem, HS_FurnitureItemCollection>
	{
		public static HS_FurnitureItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_FurnitureItemCollection result = new HS_FurnitureItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_FurnitureItem item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_FurnitureItem table.
	/// </summary>
	[DataContract]
	public partial class HS_FurnitureItem : ActiveRecord<HS_FurnitureItem>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_FurnitureItem()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_FurnitureItem", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarFurnitureItemID = new TableSchema.TableColumn(schema);
				colvarFurnitureItemID.ColumnName = "FurnitureItemID";
				colvarFurnitureItemID.DataType = DbType.Int32;
				colvarFurnitureItemID.MaxLength = 0;
				colvarFurnitureItemID.AutoIncrement = true;
				colvarFurnitureItemID.IsNullable = false;
				colvarFurnitureItemID.IsPrimaryKey = true;
				colvarFurnitureItemID.IsForeignKey = false;
				colvarFurnitureItemID.IsReadOnly = false;
				colvarFurnitureItemID.DefaultSetting = @"";
				colvarFurnitureItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFurnitureItemID);

				TableSchema.TableColumn colvarFurnitureName = new TableSchema.TableColumn(schema);
				colvarFurnitureName.ColumnName = "FurnitureName";
				colvarFurnitureName.DataType = DbType.String;
				colvarFurnitureName.MaxLength = 50;
				colvarFurnitureName.AutoIncrement = false;
				colvarFurnitureName.IsNullable = false;
				colvarFurnitureName.IsPrimaryKey = false;
				colvarFurnitureName.IsForeignKey = false;
				colvarFurnitureName.IsReadOnly = false;
				colvarFurnitureName.DefaultSetting = @"";
				colvarFurnitureName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFurnitureName);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_FurnitureItem",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_FurnitureItem LoadFrom(HS_FurnitureItem item)
		{
			HS_FurnitureItem result = new HS_FurnitureItem();
			if (item.FurnitureItemID != default(int)) {
				result.LoadByKey(item.FurnitureItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int FurnitureItemID {
			get { return GetColumnValue<int>(Columns.FurnitureItemID); }
			set {
				SetColumnValue(Columns.FurnitureItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurnitureItemID));
			}
		}
		[DataMember]
		public string FurnitureName {
			get { return GetColumnValue<string>(Columns.FurnitureName); }
			set {
				SetColumnValue(Columns.FurnitureName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurnitureName));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return FurnitureName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn FurnitureItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn FurnitureNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string FurnitureItemID = @"FurnitureItemID";
			public static readonly string FurnitureName = @"FurnitureName";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return FurnitureItemID; }
		}
		*/

		#region Foreign Collections

		private HS_FurniturePackageContentCollection _HS_FurniturePackageContentsCol;
		//Relationship: FK_HS_FurniturePackageContents_HS_FurnitureItem
		public HS_FurniturePackageContentCollection HS_FurniturePackageContentsCol
		{
			get
			{
				if(_HS_FurniturePackageContentsCol == null) {
					_HS_FurniturePackageContentsCol = new HS_FurniturePackageContentCollection();
					_HS_FurniturePackageContentsCol.LoadAndCloseReader(HS_FurniturePackageContent.Query()
						.WHERE(HS_FurniturePackageContent.Columns.FurnitureItemID, FurnitureItemID).ExecuteReader());
				}
				return _HS_FurniturePackageContentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_FurniturePackage class.
	/// </summary>
	[DataContract]
	public partial class HS_FurniturePackageCollection : ActiveList<HS_FurniturePackage, HS_FurniturePackageCollection>
	{
		public static HS_FurniturePackageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_FurniturePackageCollection result = new HS_FurniturePackageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_FurniturePackage item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_FurniturePackage table.
	/// </summary>
	[DataContract]
	public partial class HS_FurniturePackage : ActiveRecord<HS_FurniturePackage>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_FurniturePackage()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_FurniturePackage", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarFurniturePackageID = new TableSchema.TableColumn(schema);
				colvarFurniturePackageID.ColumnName = "FurniturePackageID";
				colvarFurniturePackageID.DataType = DbType.Int32;
				colvarFurniturePackageID.MaxLength = 0;
				colvarFurniturePackageID.AutoIncrement = true;
				colvarFurniturePackageID.IsNullable = false;
				colvarFurniturePackageID.IsPrimaryKey = true;
				colvarFurniturePackageID.IsForeignKey = false;
				colvarFurniturePackageID.IsReadOnly = false;
				colvarFurniturePackageID.DefaultSetting = @"";
				colvarFurniturePackageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFurniturePackageID);

				TableSchema.TableColumn colvarFurnitureCompanyID = new TableSchema.TableColumn(schema);
				colvarFurnitureCompanyID.ColumnName = "FurnitureCompanyID";
				colvarFurnitureCompanyID.DataType = DbType.Int32;
				colvarFurnitureCompanyID.MaxLength = 0;
				colvarFurnitureCompanyID.AutoIncrement = false;
				colvarFurnitureCompanyID.IsNullable = false;
				colvarFurnitureCompanyID.IsPrimaryKey = false;
				colvarFurnitureCompanyID.IsForeignKey = true;
				colvarFurnitureCompanyID.IsReadOnly = false;
				colvarFurnitureCompanyID.DefaultSetting = @"";
				colvarFurnitureCompanyID.ForeignKeyTableName = "HS_FurnitureCompany";
				schema.Columns.Add(colvarFurnitureCompanyID);

				TableSchema.TableColumn colvarPackageName = new TableSchema.TableColumn(schema);
				colvarPackageName.ColumnName = "PackageName";
				colvarPackageName.DataType = DbType.String;
				colvarPackageName.MaxLength = 50;
				colvarPackageName.AutoIncrement = false;
				colvarPackageName.IsNullable = false;
				colvarPackageName.IsPrimaryKey = false;
				colvarPackageName.IsForeignKey = false;
				colvarPackageName.IsReadOnly = false;
				colvarPackageName.DefaultSetting = @"";
				colvarPackageName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackageName);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_FurniturePackage",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_FurniturePackage LoadFrom(HS_FurniturePackage item)
		{
			HS_FurniturePackage result = new HS_FurniturePackage();
			if (item.FurniturePackageID != default(int)) {
				result.LoadByKey(item.FurniturePackageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int FurniturePackageID {
			get { return GetColumnValue<int>(Columns.FurniturePackageID); }
			set {
				SetColumnValue(Columns.FurniturePackageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurniturePackageID));
			}
		}
		[DataMember]
		public int FurnitureCompanyID {
			get { return GetColumnValue<int>(Columns.FurnitureCompanyID); }
			set {
				SetColumnValue(Columns.FurnitureCompanyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurnitureCompanyID));
			}
		}
		[DataMember]
		public string PackageName {
			get { return GetColumnValue<string>(Columns.PackageName); }
			set {
				SetColumnValue(Columns.PackageName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PackageName));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_FurnitureCompany _FurnitureCompany;
		//Relationship: FK_HS_FurniturePackage_HS_FurnitureCompany
		public HS_FurnitureCompany FurnitureCompany
		{
			get
			{
				if(_FurnitureCompany == null) {
					_FurnitureCompany = HS_FurnitureCompany.FetchByID(this.FurnitureCompanyID);
				}
				return _FurnitureCompany;
			}
			set
			{
				SetColumnValue("FurnitureCompanyID", value.FurnitureCompanyID);
				_FurnitureCompany = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return FurniturePackageID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn FurniturePackageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn FurnitureCompanyIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PackageNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string FurniturePackageID = @"FurniturePackageID";
			public static readonly string FurnitureCompanyID = @"FurnitureCompanyID";
			public static readonly string PackageName = @"PackageName";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return FurniturePackageID; }
		}
		*/

		#region Foreign Collections

		private HS_FurniturePackageContentCollection _HS_FurniturePackageContentsCol;
		//Relationship: FK_HS_FurniturePackageContents_HS_FurniturePackage
		public HS_FurniturePackageContentCollection HS_FurniturePackageContentsCol
		{
			get
			{
				if(_HS_FurniturePackageContentsCol == null) {
					_HS_FurniturePackageContentsCol = new HS_FurniturePackageContentCollection();
					_HS_FurniturePackageContentsCol.LoadAndCloseReader(HS_FurniturePackageContent.Query()
						.WHERE(HS_FurniturePackageContent.Columns.FurniturePackageID, FurniturePackageID).ExecuteReader());
				}
				return _HS_FurniturePackageContentsCol;
			}
		}

		private HS_UnitFurniturePackageCollection _HS_UnitFurniturePackagesCol;
		//Relationship: FK_HS_UnitFurniturePackage_HS_FurniturePackage
		public HS_UnitFurniturePackageCollection HS_UnitFurniturePackagesCol
		{
			get
			{
				if(_HS_UnitFurniturePackagesCol == null) {
					_HS_UnitFurniturePackagesCol = new HS_UnitFurniturePackageCollection();
					_HS_UnitFurniturePackagesCol.LoadAndCloseReader(HS_UnitFurniturePackage.Query()
						.WHERE(HS_UnitFurniturePackage.Columns.FurniturePackageID, FurniturePackageID).ExecuteReader());
				}
				return _HS_UnitFurniturePackagesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_FurniturePackageContent class.
	/// </summary>
	[DataContract]
	public partial class HS_FurniturePackageContentCollection : ActiveList<HS_FurniturePackageContent, HS_FurniturePackageContentCollection>
	{
		public static HS_FurniturePackageContentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_FurniturePackageContentCollection result = new HS_FurniturePackageContentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_FurniturePackageContent item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_FurniturePackageContents table.
	/// </summary>
	[DataContract]
	public partial class HS_FurniturePackageContent : ActiveRecord<HS_FurniturePackageContent>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_FurniturePackageContent()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_FurniturePackageContents", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarFurniturePackageContentsID = new TableSchema.TableColumn(schema);
				colvarFurniturePackageContentsID.ColumnName = "FurniturePackageContentsID";
				colvarFurniturePackageContentsID.DataType = DbType.Int32;
				colvarFurniturePackageContentsID.MaxLength = 0;
				colvarFurniturePackageContentsID.AutoIncrement = true;
				colvarFurniturePackageContentsID.IsNullable = false;
				colvarFurniturePackageContentsID.IsPrimaryKey = true;
				colvarFurniturePackageContentsID.IsForeignKey = false;
				colvarFurniturePackageContentsID.IsReadOnly = false;
				colvarFurniturePackageContentsID.DefaultSetting = @"";
				colvarFurniturePackageContentsID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFurniturePackageContentsID);

				TableSchema.TableColumn colvarFurniturePackageID = new TableSchema.TableColumn(schema);
				colvarFurniturePackageID.ColumnName = "FurniturePackageID";
				colvarFurniturePackageID.DataType = DbType.Int32;
				colvarFurniturePackageID.MaxLength = 0;
				colvarFurniturePackageID.AutoIncrement = false;
				colvarFurniturePackageID.IsNullable = false;
				colvarFurniturePackageID.IsPrimaryKey = false;
				colvarFurniturePackageID.IsForeignKey = true;
				colvarFurniturePackageID.IsReadOnly = false;
				colvarFurniturePackageID.DefaultSetting = @"";
				colvarFurniturePackageID.ForeignKeyTableName = "HS_FurniturePackage";
				schema.Columns.Add(colvarFurniturePackageID);

				TableSchema.TableColumn colvarFurnitureItemID = new TableSchema.TableColumn(schema);
				colvarFurnitureItemID.ColumnName = "FurnitureItemID";
				colvarFurnitureItemID.DataType = DbType.Int32;
				colvarFurnitureItemID.MaxLength = 0;
				colvarFurnitureItemID.AutoIncrement = false;
				colvarFurnitureItemID.IsNullable = false;
				colvarFurnitureItemID.IsPrimaryKey = false;
				colvarFurnitureItemID.IsForeignKey = true;
				colvarFurnitureItemID.IsReadOnly = false;
				colvarFurnitureItemID.DefaultSetting = @"";
				colvarFurnitureItemID.ForeignKeyTableName = "HS_FurnitureItem";
				schema.Columns.Add(colvarFurnitureItemID);

				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_FurniturePackageContents",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_FurniturePackageContent LoadFrom(HS_FurniturePackageContent item)
		{
			HS_FurniturePackageContent result = new HS_FurniturePackageContent();
			if (item.FurniturePackageContentsID != default(int)) {
				result.LoadByKey(item.FurniturePackageContentsID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int FurniturePackageContentsID {
			get { return GetColumnValue<int>(Columns.FurniturePackageContentsID); }
			set {
				SetColumnValue(Columns.FurniturePackageContentsID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurniturePackageContentsID));
			}
		}
		[DataMember]
		public int FurniturePackageID {
			get { return GetColumnValue<int>(Columns.FurniturePackageID); }
			set {
				SetColumnValue(Columns.FurniturePackageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurniturePackageID));
			}
		}
		[DataMember]
		public int FurnitureItemID {
			get { return GetColumnValue<int>(Columns.FurnitureItemID); }
			set {
				SetColumnValue(Columns.FurnitureItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurnitureItemID));
			}
		}
		[DataMember]
		public int Quantity {
			get { return GetColumnValue<int>(Columns.Quantity); }
			set {
				SetColumnValue(Columns.Quantity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Quantity));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_FurnitureItem _FurnitureItem;
		//Relationship: FK_HS_FurniturePackageContents_HS_FurnitureItem
		public HS_FurnitureItem FurnitureItem
		{
			get
			{
				if(_FurnitureItem == null) {
					_FurnitureItem = HS_FurnitureItem.FetchByID(this.FurnitureItemID);
				}
				return _FurnitureItem;
			}
			set
			{
				SetColumnValue("FurnitureItemID", value.FurnitureItemID);
				_FurnitureItem = value;
			}
		}

		private HS_FurniturePackage _FurniturePackage;
		//Relationship: FK_HS_FurniturePackageContents_HS_FurniturePackage
		public HS_FurniturePackage FurniturePackage
		{
			get
			{
				if(_FurniturePackage == null) {
					_FurniturePackage = HS_FurniturePackage.FetchByID(this.FurniturePackageID);
				}
				return _FurniturePackage;
			}
			set
			{
				SetColumnValue("FurniturePackageID", value.FurniturePackageID);
				_FurniturePackage = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return FurniturePackageContentsID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn FurniturePackageContentsIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn FurniturePackageIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn FurnitureItemIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn QuantityColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string FurniturePackageContentsID = @"FurniturePackageContentsID";
			public static readonly string FurniturePackageID = @"FurniturePackageID";
			public static readonly string FurnitureItemID = @"FurnitureItemID";
			public static readonly string Quantity = @"Quantity";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return FurniturePackageContentsID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the HS_HousingUser class.
	/// </summary>
	[DataContract]
	public partial class HS_HousingUserCollection : ActiveList<HS_HousingUser, HS_HousingUserCollection>
	{
		public static HS_HousingUserCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_HousingUserCollection result = new HS_HousingUserCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_HousingUser item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_HousingUser table.
	/// </summary>
	[DataContract]
	public partial class HS_HousingUser : ActiveRecord<HS_HousingUser>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_HousingUser()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_HousingUser", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = true;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = 2000;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = false;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);

				TableSchema.TableColumn colvarIsValidForHousing = new TableSchema.TableColumn(schema);
				colvarIsValidForHousing.ColumnName = "IsValidForHousing";
				colvarIsValidForHousing.DataType = DbType.Boolean;
				colvarIsValidForHousing.MaxLength = 0;
				colvarIsValidForHousing.AutoIncrement = false;
				colvarIsValidForHousing.IsNullable = false;
				colvarIsValidForHousing.IsPrimaryKey = false;
				colvarIsValidForHousing.IsForeignKey = false;
				colvarIsValidForHousing.IsReadOnly = false;
				colvarIsValidForHousing.DefaultSetting = @"";
				colvarIsValidForHousing.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsValidForHousing);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_HousingUser",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_HousingUser LoadFrom(HS_HousingUser item)
		{
			HS_HousingUser result = new HS_HousingUser();
			if (item.UserID != default(int)) {
				result.LoadByKey(item.UserID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public string Note {
			get { return GetColumnValue<string>(Columns.Note); }
			set {
				SetColumnValue(Columns.Note, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Note));
			}
		}
		[DataMember]
		public bool IsValidForHousing {
			get { return GetColumnValue<bool>(Columns.IsValidForHousing); }
			set {
				SetColumnValue(Columns.IsValidForHousing, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsValidForHousing));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_User _User;
		//Relationship: FK_HS_UserNotes_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserID);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserID", value.UserID);
				_User = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Note;
		}

		#region Typed Columns

		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NoteColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsValidForHousingColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UserID = @"UserID";
			public static readonly string Note = @"Note";
			public static readonly string IsValidForHousing = @"IsValidForHousing";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UserID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the HS_OfficeComplex class.
	/// </summary>
	[DataContract]
	public partial class HS_OfficeComplexCollection : ActiveList<HS_OfficeComplex, HS_OfficeComplexCollection>
	{
		public static HS_OfficeComplexCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_OfficeComplexCollection result = new HS_OfficeComplexCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_OfficeComplex item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_OfficeComplex table.
	/// </summary>
	[DataContract]
	public partial class HS_OfficeComplex : ActiveRecord<HS_OfficeComplex>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_OfficeComplex()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_OfficeComplex", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarOfficeComplexID = new TableSchema.TableColumn(schema);
				colvarOfficeComplexID.ColumnName = "OfficeComplexID";
				colvarOfficeComplexID.DataType = DbType.Int32;
				colvarOfficeComplexID.MaxLength = 0;
				colvarOfficeComplexID.AutoIncrement = true;
				colvarOfficeComplexID.IsNullable = false;
				colvarOfficeComplexID.IsPrimaryKey = true;
				colvarOfficeComplexID.IsForeignKey = false;
				colvarOfficeComplexID.IsReadOnly = false;
				colvarOfficeComplexID.DefaultSetting = @"";
				colvarOfficeComplexID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeComplexID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = false;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarComplexID = new TableSchema.TableColumn(schema);
				colvarComplexID.ColumnName = "ComplexID";
				colvarComplexID.DataType = DbType.Int32;
				colvarComplexID.MaxLength = 0;
				colvarComplexID.AutoIncrement = false;
				colvarComplexID.IsNullable = false;
				colvarComplexID.IsPrimaryKey = false;
				colvarComplexID.IsForeignKey = true;
				colvarComplexID.IsReadOnly = false;
				colvarComplexID.DefaultSetting = @"";
				colvarComplexID.ForeignKeyTableName = "HS_Complex";
				schema.Columns.Add(colvarComplexID);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_OfficeComplex",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_OfficeComplex LoadFrom(HS_OfficeComplex item)
		{
			HS_OfficeComplex result = new HS_OfficeComplex();
			if (item.OfficeComplexID != default(int)) {
				result.LoadByKey(item.OfficeComplexID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int OfficeComplexID {
			get { return GetColumnValue<int>(Columns.OfficeComplexID); }
			set {
				SetColumnValue(Columns.OfficeComplexID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeComplexID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int ComplexID {
			get { return GetColumnValue<int>(Columns.ComplexID); }
			set {
				SetColumnValue(Columns.ComplexID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ComplexID));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_Complex _Complex;
		//Relationship: FK_HS_OfficeComplex_HS_Complex
		public HS_Complex Complex
		{
			get
			{
				if(_Complex == null) {
					_Complex = HS_Complex.FetchByID(this.ComplexID);
				}
				return _Complex;
			}
			set
			{
				SetColumnValue("ComplexID", value.ComplexID);
				_Complex = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return OfficeComplexID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn OfficeComplexIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ComplexIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string OfficeComplexID = @"OfficeComplexID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string ComplexID = @"ComplexID";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return OfficeComplexID; }
		}
		*/

		#region Foreign Collections

		private HS_OfficeComplexUnitCollection _HS_OfficeComplexUnitsCol;
		//Relationship: FK_HS_OfficeComplexUnit_HS_OfficeComplex
		public HS_OfficeComplexUnitCollection HS_OfficeComplexUnitsCol
		{
			get
			{
				if(_HS_OfficeComplexUnitsCol == null) {
					_HS_OfficeComplexUnitsCol = new HS_OfficeComplexUnitCollection();
					_HS_OfficeComplexUnitsCol.LoadAndCloseReader(HS_OfficeComplexUnit.Query()
						.WHERE(HS_OfficeComplexUnit.Columns.OfficeComplexID, OfficeComplexID).ExecuteReader());
				}
				return _HS_OfficeComplexUnitsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_OfficeComplexUnit class.
	/// </summary>
	[DataContract]
	public partial class HS_OfficeComplexUnitCollection : ActiveList<HS_OfficeComplexUnit, HS_OfficeComplexUnitCollection>
	{
		public static HS_OfficeComplexUnitCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_OfficeComplexUnitCollection result = new HS_OfficeComplexUnitCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_OfficeComplexUnit item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_OfficeComplexUnit table.
	/// </summary>
	[DataContract]
	public partial class HS_OfficeComplexUnit : ActiveRecord<HS_OfficeComplexUnit>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_OfficeComplexUnit()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_OfficeComplexUnit", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarOfficeComplexUnitID = new TableSchema.TableColumn(schema);
				colvarOfficeComplexUnitID.ColumnName = "OfficeComplexUnitID";
				colvarOfficeComplexUnitID.DataType = DbType.Int32;
				colvarOfficeComplexUnitID.MaxLength = 0;
				colvarOfficeComplexUnitID.AutoIncrement = true;
				colvarOfficeComplexUnitID.IsNullable = false;
				colvarOfficeComplexUnitID.IsPrimaryKey = true;
				colvarOfficeComplexUnitID.IsForeignKey = false;
				colvarOfficeComplexUnitID.IsReadOnly = false;
				colvarOfficeComplexUnitID.DefaultSetting = @"";
				colvarOfficeComplexUnitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeComplexUnitID);

				TableSchema.TableColumn colvarOfficeComplexID = new TableSchema.TableColumn(schema);
				colvarOfficeComplexID.ColumnName = "OfficeComplexID";
				colvarOfficeComplexID.DataType = DbType.Int32;
				colvarOfficeComplexID.MaxLength = 0;
				colvarOfficeComplexID.AutoIncrement = false;
				colvarOfficeComplexID.IsNullable = false;
				colvarOfficeComplexID.IsPrimaryKey = false;
				colvarOfficeComplexID.IsForeignKey = true;
				colvarOfficeComplexID.IsReadOnly = false;
				colvarOfficeComplexID.DefaultSetting = @"";
				colvarOfficeComplexID.ForeignKeyTableName = "HS_OfficeComplex";
				schema.Columns.Add(colvarOfficeComplexID);

				TableSchema.TableColumn colvarUnitID = new TableSchema.TableColumn(schema);
				colvarUnitID.ColumnName = "UnitID";
				colvarUnitID.DataType = DbType.Int32;
				colvarUnitID.MaxLength = 0;
				colvarUnitID.AutoIncrement = false;
				colvarUnitID.IsNullable = false;
				colvarUnitID.IsPrimaryKey = false;
				colvarUnitID.IsForeignKey = true;
				colvarUnitID.IsReadOnly = false;
				colvarUnitID.DefaultSetting = @"";
				colvarUnitID.ForeignKeyTableName = "HS_Unit";
				schema.Columns.Add(colvarUnitID);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_OfficeComplexUnit",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_OfficeComplexUnit LoadFrom(HS_OfficeComplexUnit item)
		{
			HS_OfficeComplexUnit result = new HS_OfficeComplexUnit();
			if (item.OfficeComplexUnitID != default(int)) {
				result.LoadByKey(item.OfficeComplexUnitID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int OfficeComplexUnitID {
			get { return GetColumnValue<int>(Columns.OfficeComplexUnitID); }
			set {
				SetColumnValue(Columns.OfficeComplexUnitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeComplexUnitID));
			}
		}
		[DataMember]
		public int OfficeComplexID {
			get { return GetColumnValue<int>(Columns.OfficeComplexID); }
			set {
				SetColumnValue(Columns.OfficeComplexID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeComplexID));
			}
		}
		[DataMember]
		public int UnitID {
			get { return GetColumnValue<int>(Columns.UnitID); }
			set {
				SetColumnValue(Columns.UnitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitID));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_OfficeComplex _OfficeComplex;
		//Relationship: FK_HS_OfficeComplexUnit_HS_OfficeComplex
		public HS_OfficeComplex OfficeComplex
		{
			get
			{
				if(_OfficeComplex == null) {
					_OfficeComplex = HS_OfficeComplex.FetchByID(this.OfficeComplexID);
				}
				return _OfficeComplex;
			}
			set
			{
				SetColumnValue("OfficeComplexID", value.OfficeComplexID);
				_OfficeComplex = value;
			}
		}

		private HS_Unit _Unit;
		//Relationship: FK_HS_OfficeComplexUnit_HS_Unit
		public HS_Unit Unit
		{
			get
			{
				if(_Unit == null) {
					_Unit = HS_Unit.FetchByID(this.UnitID);
				}
				return _Unit;
			}
			set
			{
				SetColumnValue("UnitID", value.UnitID);
				_Unit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return OfficeComplexUnitID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn OfficeComplexUnitIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn OfficeComplexIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UnitIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string OfficeComplexUnitID = @"OfficeComplexUnitID";
			public static readonly string OfficeComplexID = @"OfficeComplexID";
			public static readonly string UnitID = @"UnitID";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return OfficeComplexUnitID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the HS_Unit class.
	/// </summary>
	[DataContract]
	public partial class HS_UnitCollection : ActiveList<HS_Unit, HS_UnitCollection>
	{
		public static HS_UnitCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_UnitCollection result = new HS_UnitCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_Unit item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_Unit table.
	/// </summary>
	[DataContract]
	public partial class HS_Unit : ActiveRecord<HS_Unit>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_Unit()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_Unit", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUnitID = new TableSchema.TableColumn(schema);
				colvarUnitID.ColumnName = "UnitID";
				colvarUnitID.DataType = DbType.Int32;
				colvarUnitID.MaxLength = 0;
				colvarUnitID.AutoIncrement = true;
				colvarUnitID.IsNullable = false;
				colvarUnitID.IsPrimaryKey = true;
				colvarUnitID.IsForeignKey = false;
				colvarUnitID.IsReadOnly = false;
				colvarUnitID.DefaultSetting = @"";
				colvarUnitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitID);

				TableSchema.TableColumn colvarUnitNr = new TableSchema.TableColumn(schema);
				colvarUnitNr.ColumnName = "UnitNr";
				colvarUnitNr.DataType = DbType.String;
				colvarUnitNr.MaxLength = 50;
				colvarUnitNr.AutoIncrement = false;
				colvarUnitNr.IsNullable = false;
				colvarUnitNr.IsPrimaryKey = false;
				colvarUnitNr.IsForeignKey = false;
				colvarUnitNr.IsReadOnly = false;
				colvarUnitNr.DefaultSetting = @"";
				colvarUnitNr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitNr);

				TableSchema.TableColumn colvarUnitAddressID = new TableSchema.TableColumn(schema);
				colvarUnitAddressID.ColumnName = "UnitAddressID";
				colvarUnitAddressID.DataType = DbType.Int32;
				colvarUnitAddressID.MaxLength = 0;
				colvarUnitAddressID.AutoIncrement = false;
				colvarUnitAddressID.IsNullable = false;
				colvarUnitAddressID.IsPrimaryKey = false;
				colvarUnitAddressID.IsForeignKey = true;
				colvarUnitAddressID.IsReadOnly = false;
				colvarUnitAddressID.DefaultSetting = @"";
				colvarUnitAddressID.ForeignKeyTableName = "HS_UnitAddress";
				schema.Columns.Add(colvarUnitAddressID);

				TableSchema.TableColumn colvarNrOfBedrooms = new TableSchema.TableColumn(schema);
				colvarNrOfBedrooms.ColumnName = "NrOfBedrooms";
				colvarNrOfBedrooms.DataType = DbType.Int32;
				colvarNrOfBedrooms.MaxLength = 0;
				colvarNrOfBedrooms.AutoIncrement = false;
				colvarNrOfBedrooms.IsNullable = false;
				colvarNrOfBedrooms.IsPrimaryKey = false;
				colvarNrOfBedrooms.IsForeignKey = false;
				colvarNrOfBedrooms.IsReadOnly = false;
				colvarNrOfBedrooms.DefaultSetting = @"";
				colvarNrOfBedrooms.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNrOfBedrooms);

				TableSchema.TableColumn colvarMaxOccupancy = new TableSchema.TableColumn(schema);
				colvarMaxOccupancy.ColumnName = "MaxOccupancy";
				colvarMaxOccupancy.DataType = DbType.Int32;
				colvarMaxOccupancy.MaxLength = 0;
				colvarMaxOccupancy.AutoIncrement = false;
				colvarMaxOccupancy.IsNullable = false;
				colvarMaxOccupancy.IsPrimaryKey = false;
				colvarMaxOccupancy.IsForeignKey = false;
				colvarMaxOccupancy.IsReadOnly = false;
				colvarMaxOccupancy.DefaultSetting = @"";
				colvarMaxOccupancy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxOccupancy);

				TableSchema.TableColumn colvarUnitTypeID = new TableSchema.TableColumn(schema);
				colvarUnitTypeID.ColumnName = "UnitTypeID";
				colvarUnitTypeID.DataType = DbType.Int32;
				colvarUnitTypeID.MaxLength = 0;
				colvarUnitTypeID.AutoIncrement = false;
				colvarUnitTypeID.IsNullable = false;
				colvarUnitTypeID.IsPrimaryKey = false;
				colvarUnitTypeID.IsForeignKey = true;
				colvarUnitTypeID.IsReadOnly = false;
				colvarUnitTypeID.DefaultSetting = @"";
				colvarUnitTypeID.ForeignKeyTableName = "HS_UnitType";
				schema.Columns.Add(colvarUnitTypeID);

				TableSchema.TableColumn colvarRentAmount = new TableSchema.TableColumn(schema);
				colvarRentAmount.ColumnName = "RentAmount";
				colvarRentAmount.DataType = DbType.Currency;
				colvarRentAmount.MaxLength = 0;
				colvarRentAmount.AutoIncrement = false;
				colvarRentAmount.IsNullable = false;
				colvarRentAmount.IsPrimaryKey = false;
				colvarRentAmount.IsForeignKey = false;
				colvarRentAmount.IsReadOnly = false;
				colvarRentAmount.DefaultSetting = @"";
				colvarRentAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentAmount);

				TableSchema.TableColumn colvarSecurityDepositAmount = new TableSchema.TableColumn(schema);
				colvarSecurityDepositAmount.ColumnName = "SecurityDepositAmount";
				colvarSecurityDepositAmount.DataType = DbType.Currency;
				colvarSecurityDepositAmount.MaxLength = 0;
				colvarSecurityDepositAmount.AutoIncrement = false;
				colvarSecurityDepositAmount.IsNullable = false;
				colvarSecurityDepositAmount.IsPrimaryKey = false;
				colvarSecurityDepositAmount.IsForeignKey = false;
				colvarSecurityDepositAmount.IsReadOnly = false;
				colvarSecurityDepositAmount.DefaultSetting = @"";
				colvarSecurityDepositAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSecurityDepositAmount);

				TableSchema.TableColumn colvarLeaseStartDate = new TableSchema.TableColumn(schema);
				colvarLeaseStartDate.ColumnName = "LeaseStartDate";
				colvarLeaseStartDate.DataType = DbType.DateTime;
				colvarLeaseStartDate.MaxLength = 0;
				colvarLeaseStartDate.AutoIncrement = false;
				colvarLeaseStartDate.IsNullable = false;
				colvarLeaseStartDate.IsPrimaryKey = false;
				colvarLeaseStartDate.IsForeignKey = false;
				colvarLeaseStartDate.IsReadOnly = false;
				colvarLeaseStartDate.DefaultSetting = @"";
				colvarLeaseStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeaseStartDate);

				TableSchema.TableColumn colvarLeaseEndDate = new TableSchema.TableColumn(schema);
				colvarLeaseEndDate.ColumnName = "LeaseEndDate";
				colvarLeaseEndDate.DataType = DbType.DateTime;
				colvarLeaseEndDate.MaxLength = 0;
				colvarLeaseEndDate.AutoIncrement = false;
				colvarLeaseEndDate.IsNullable = false;
				colvarLeaseEndDate.IsPrimaryKey = false;
				colvarLeaseEndDate.IsForeignKey = false;
				colvarLeaseEndDate.IsReadOnly = false;
				colvarLeaseEndDate.DefaultSetting = @"";
				colvarLeaseEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeaseEndDate);

				TableSchema.TableColumn colvarAdvancedVacateDayNr = new TableSchema.TableColumn(schema);
				colvarAdvancedVacateDayNr.ColumnName = "AdvancedVacateDayNr";
				colvarAdvancedVacateDayNr.DataType = DbType.Int32;
				colvarAdvancedVacateDayNr.MaxLength = 0;
				colvarAdvancedVacateDayNr.AutoIncrement = false;
				colvarAdvancedVacateDayNr.IsNullable = false;
				colvarAdvancedVacateDayNr.IsPrimaryKey = false;
				colvarAdvancedVacateDayNr.IsForeignKey = false;
				colvarAdvancedVacateDayNr.IsReadOnly = false;
				colvarAdvancedVacateDayNr.DefaultSetting = @"";
				colvarAdvancedVacateDayNr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdvancedVacateDayNr);

				TableSchema.TableColumn colvarVacateNoticeSentDate = new TableSchema.TableColumn(schema);
				colvarVacateNoticeSentDate.ColumnName = "VacateNoticeSentDate";
				colvarVacateNoticeSentDate.DataType = DbType.DateTime;
				colvarVacateNoticeSentDate.MaxLength = 0;
				colvarVacateNoticeSentDate.AutoIncrement = false;
				colvarVacateNoticeSentDate.IsNullable = true;
				colvarVacateNoticeSentDate.IsPrimaryKey = false;
				colvarVacateNoticeSentDate.IsForeignKey = false;
				colvarVacateNoticeSentDate.IsReadOnly = false;
				colvarVacateNoticeSentDate.DefaultSetting = @"";
				colvarVacateNoticeSentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVacateNoticeSentDate);

				TableSchema.TableColumn colvarVacateNoticeSentByTypeID = new TableSchema.TableColumn(schema);
				colvarVacateNoticeSentByTypeID.ColumnName = "VacateNoticeSentByTypeID";
				colvarVacateNoticeSentByTypeID.DataType = DbType.Int32;
				colvarVacateNoticeSentByTypeID.MaxLength = 0;
				colvarVacateNoticeSentByTypeID.AutoIncrement = false;
				colvarVacateNoticeSentByTypeID.IsNullable = true;
				colvarVacateNoticeSentByTypeID.IsPrimaryKey = false;
				colvarVacateNoticeSentByTypeID.IsForeignKey = true;
				colvarVacateNoticeSentByTypeID.IsReadOnly = false;
				colvarVacateNoticeSentByTypeID.DefaultSetting = @"";
				colvarVacateNoticeSentByTypeID.ForeignKeyTableName = "HS_UnitVacateNoticeSentByType";
				schema.Columns.Add(colvarVacateNoticeSentByTypeID);

				TableSchema.TableColumn colvarVacateNotifiedBy = new TableSchema.TableColumn(schema);
				colvarVacateNotifiedBy.ColumnName = "VacateNotifiedBy";
				colvarVacateNotifiedBy.DataType = DbType.String;
				colvarVacateNotifiedBy.MaxLength = 50;
				colvarVacateNotifiedBy.AutoIncrement = false;
				colvarVacateNotifiedBy.IsNullable = true;
				colvarVacateNotifiedBy.IsPrimaryKey = false;
				colvarVacateNotifiedBy.IsForeignKey = false;
				colvarVacateNotifiedBy.IsReadOnly = false;
				colvarVacateNotifiedBy.DefaultSetting = @"";
				colvarVacateNotifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVacateNotifiedBy);

				TableSchema.TableColumn colvarDateActuallyVacated = new TableSchema.TableColumn(schema);
				colvarDateActuallyVacated.ColumnName = "DateActuallyVacated";
				colvarDateActuallyVacated.DataType = DbType.DateTime;
				colvarDateActuallyVacated.MaxLength = 0;
				colvarDateActuallyVacated.AutoIncrement = false;
				colvarDateActuallyVacated.IsNullable = true;
				colvarDateActuallyVacated.IsPrimaryKey = false;
				colvarDateActuallyVacated.IsForeignKey = false;
				colvarDateActuallyVacated.IsReadOnly = false;
				colvarDateActuallyVacated.DefaultSetting = @"";
				colvarDateActuallyVacated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateActuallyVacated);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_Unit",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_Unit LoadFrom(HS_Unit item)
		{
			HS_Unit result = new HS_Unit();
			if (item.UnitID != default(int)) {
				result.LoadByKey(item.UnitID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UnitID {
			get { return GetColumnValue<int>(Columns.UnitID); }
			set {
				SetColumnValue(Columns.UnitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitID));
			}
		}
		[DataMember]
		public string UnitNr {
			get { return GetColumnValue<string>(Columns.UnitNr); }
			set {
				SetColumnValue(Columns.UnitNr, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitNr));
			}
		}
		[DataMember]
		public int UnitAddressID {
			get { return GetColumnValue<int>(Columns.UnitAddressID); }
			set {
				SetColumnValue(Columns.UnitAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitAddressID));
			}
		}
		[DataMember]
		public int NrOfBedrooms {
			get { return GetColumnValue<int>(Columns.NrOfBedrooms); }
			set {
				SetColumnValue(Columns.NrOfBedrooms, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NrOfBedrooms));
			}
		}
		[DataMember]
		public int MaxOccupancy {
			get { return GetColumnValue<int>(Columns.MaxOccupancy); }
			set {
				SetColumnValue(Columns.MaxOccupancy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxOccupancy));
			}
		}
		[DataMember]
		public int UnitTypeID {
			get { return GetColumnValue<int>(Columns.UnitTypeID); }
			set {
				SetColumnValue(Columns.UnitTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitTypeID));
			}
		}
		[DataMember]
		public decimal RentAmount {
			get { return GetColumnValue<decimal>(Columns.RentAmount); }
			set {
				SetColumnValue(Columns.RentAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentAmount));
			}
		}
		[DataMember]
		public decimal SecurityDepositAmount {
			get { return GetColumnValue<decimal>(Columns.SecurityDepositAmount); }
			set {
				SetColumnValue(Columns.SecurityDepositAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SecurityDepositAmount));
			}
		}
		[DataMember]
		public DateTime LeaseStartDate {
			get { return GetColumnValue<DateTime>(Columns.LeaseStartDate); }
			set {
				SetColumnValue(Columns.LeaseStartDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeaseStartDate));
			}
		}
		[DataMember]
		public DateTime LeaseEndDate {
			get { return GetColumnValue<DateTime>(Columns.LeaseEndDate); }
			set {
				SetColumnValue(Columns.LeaseEndDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeaseEndDate));
			}
		}
		[DataMember]
		public int AdvancedVacateDayNr {
			get { return GetColumnValue<int>(Columns.AdvancedVacateDayNr); }
			set {
				SetColumnValue(Columns.AdvancedVacateDayNr, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AdvancedVacateDayNr));
			}
		}
		[DataMember]
		public DateTime? VacateNoticeSentDate {
			get { return GetColumnValue<DateTime?>(Columns.VacateNoticeSentDate); }
			set {
				SetColumnValue(Columns.VacateNoticeSentDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VacateNoticeSentDate));
			}
		}
		[DataMember]
		public int? VacateNoticeSentByTypeID {
			get { return GetColumnValue<int?>(Columns.VacateNoticeSentByTypeID); }
			set {
				SetColumnValue(Columns.VacateNoticeSentByTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VacateNoticeSentByTypeID));
			}
		}
		[DataMember]
		public string VacateNotifiedBy {
			get { return GetColumnValue<string>(Columns.VacateNotifiedBy); }
			set {
				SetColumnValue(Columns.VacateNotifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VacateNotifiedBy));
			}
		}
		[DataMember]
		public DateTime? DateActuallyVacated {
			get { return GetColumnValue<DateTime?>(Columns.DateActuallyVacated); }
			set {
				SetColumnValue(Columns.DateActuallyVacated, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DateActuallyVacated));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_UnitAddress _UnitAddress;
		//Relationship: FK_HS_Unit_HS_UnitAddress
		public HS_UnitAddress UnitAddress
		{
			get
			{
				if(_UnitAddress == null) {
					_UnitAddress = HS_UnitAddress.FetchByID(this.UnitAddressID);
				}
				return _UnitAddress;
			}
			set
			{
				SetColumnValue("UnitAddressID", value.UnitAddressID);
				_UnitAddress = value;
			}
		}

		private HS_UnitType _UnitType;
		//Relationship: FK_HS_Unit_HS_UnitType
		public HS_UnitType UnitType
		{
			get
			{
				if(_UnitType == null) {
					_UnitType = HS_UnitType.FetchByID(this.UnitTypeID);
				}
				return _UnitType;
			}
			set
			{
				SetColumnValue("UnitTypeID", value.UnitTypeID);
				_UnitType = value;
			}
		}

		private HS_UnitVacateNoticeSentByType _VacateNoticeSentByType;
		//Relationship: FK_HS_Unit_HS_UnitVacateNoticeSentByType
		public HS_UnitVacateNoticeSentByType VacateNoticeSentByType
		{
			get
			{
				if(_VacateNoticeSentByType == null) {
					_VacateNoticeSentByType = HS_UnitVacateNoticeSentByType.FetchByID(this.VacateNoticeSentByTypeID);
				}
				return _VacateNoticeSentByType;
			}
			set
			{
				SetColumnValue("VacateNoticeSentByTypeID", value.VacateNoticeSentByTypeID);
				_VacateNoticeSentByType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return UnitNr;
		}

		#region Typed Columns

		public static TableSchema.TableColumn UnitIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UnitNrColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UnitAddressIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn NrOfBedroomsColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MaxOccupancyColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn UnitTypeIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RentAmountColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn SecurityDepositAmountColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn LeaseStartDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn LeaseEndDateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn AdvancedVacateDayNrColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn VacateNoticeSentDateColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn VacateNoticeSentByTypeIDColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn VacateNotifiedByColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn DateActuallyVacatedColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[18]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UnitID = @"UnitID";
			public static readonly string UnitNr = @"UnitNr";
			public static readonly string UnitAddressID = @"UnitAddressID";
			public static readonly string NrOfBedrooms = @"NrOfBedrooms";
			public static readonly string MaxOccupancy = @"MaxOccupancy";
			public static readonly string UnitTypeID = @"UnitTypeID";
			public static readonly string RentAmount = @"RentAmount";
			public static readonly string SecurityDepositAmount = @"SecurityDepositAmount";
			public static readonly string LeaseStartDate = @"LeaseStartDate";
			public static readonly string LeaseEndDate = @"LeaseEndDate";
			public static readonly string AdvancedVacateDayNr = @"AdvancedVacateDayNr";
			public static readonly string VacateNoticeSentDate = @"VacateNoticeSentDate";
			public static readonly string VacateNoticeSentByTypeID = @"VacateNoticeSentByTypeID";
			public static readonly string VacateNotifiedBy = @"VacateNotifiedBy";
			public static readonly string DateActuallyVacated = @"DateActuallyVacated";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UnitID; }
		}
		*/

		#region Foreign Collections

		private HS_ComplexCollection _HS_ComplicesCol;
		//Relationship: FK_HS_Complex_HS_Unit
		public HS_ComplexCollection HS_ComplicesCol
		{
			get
			{
				if(_HS_ComplicesCol == null) {
					_HS_ComplicesCol = new HS_ComplexCollection();
					_HS_ComplicesCol.LoadAndCloseReader(HS_Complex.Query()
						.WHERE(HS_Complex.Columns.PlatinumManagerUnitID, UnitID).ExecuteReader());
				}
				return _HS_ComplicesCol;
			}
		}

		private HS_OfficeComplexUnitCollection _HS_OfficeComplexUnitsCol;
		//Relationship: FK_HS_OfficeComplexUnit_HS_Unit
		public HS_OfficeComplexUnitCollection HS_OfficeComplexUnitsCol
		{
			get
			{
				if(_HS_OfficeComplexUnitsCol == null) {
					_HS_OfficeComplexUnitsCol = new HS_OfficeComplexUnitCollection();
					_HS_OfficeComplexUnitsCol.LoadAndCloseReader(HS_OfficeComplexUnit.Query()
						.WHERE(HS_OfficeComplexUnit.Columns.UnitID, UnitID).ExecuteReader());
				}
				return _HS_OfficeComplexUnitsCol;
			}
		}

		private HS_UnitDamageCollection _HS_UnitDamagesCol;
		//Relationship: FK_HS_UnitDamage_HS_UnitDamage
		public HS_UnitDamageCollection HS_UnitDamagesCol
		{
			get
			{
				if(_HS_UnitDamagesCol == null) {
					_HS_UnitDamagesCol = new HS_UnitDamageCollection();
					_HS_UnitDamagesCol.LoadAndCloseReader(HS_UnitDamage.Query()
						.WHERE(HS_UnitDamage.Columns.UnitID, UnitID).ExecuteReader());
				}
				return _HS_UnitDamagesCol;
			}
		}

		private HS_UnitFurniturePackageCollection _HS_UnitFurniturePackagesCol;
		//Relationship: FK_HS_UnitFurniturePackage_HS_Unit
		public HS_UnitFurniturePackageCollection HS_UnitFurniturePackagesCol
		{
			get
			{
				if(_HS_UnitFurniturePackagesCol == null) {
					_HS_UnitFurniturePackagesCol = new HS_UnitFurniturePackageCollection();
					_HS_UnitFurniturePackagesCol.LoadAndCloseReader(HS_UnitFurniturePackage.Query()
						.WHERE(HS_UnitFurniturePackage.Columns.UnitID, UnitID).ExecuteReader());
				}
				return _HS_UnitFurniturePackagesCol;
			}
		}

		private HS_UnitNoteCollection _HS_UnitNotesCol;
		//Relationship: FK_HS_UnitNotes_HS_Unit
		public HS_UnitNoteCollection HS_UnitNotesCol
		{
			get
			{
				if(_HS_UnitNotesCol == null) {
					_HS_UnitNotesCol = new HS_UnitNoteCollection();
					_HS_UnitNotesCol.LoadAndCloseReader(HS_UnitNote.Query()
						.WHERE(HS_UnitNote.Columns.UnitID, UnitID).ExecuteReader());
				}
				return _HS_UnitNotesCol;
			}
		}

		private HS_UnitOccupantCollection _HS_UnitOccupantsCol;
		//Relationship: FK_HS_UnitOccupant_HS_Unit
		public HS_UnitOccupantCollection HS_UnitOccupantsCol
		{
			get
			{
				if(_HS_UnitOccupantsCol == null) {
					_HS_UnitOccupantsCol = new HS_UnitOccupantCollection();
					_HS_UnitOccupantsCol.LoadAndCloseReader(HS_UnitOccupant.Query()
						.WHERE(HS_UnitOccupant.Columns.UnitID, UnitID).ExecuteReader());
				}
				return _HS_UnitOccupantsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_UnitAddress class.
	/// </summary>
	[DataContract]
	public partial class HS_UnitAddressCollection : ActiveList<HS_UnitAddress, HS_UnitAddressCollection>
	{
		public static HS_UnitAddressCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_UnitAddressCollection result = new HS_UnitAddressCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_UnitAddress item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_UnitAddress table.
	/// </summary>
	[DataContract]
	public partial class HS_UnitAddress : ActiveRecord<HS_UnitAddress>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_UnitAddress()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_UnitAddress", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUnitAddressID = new TableSchema.TableColumn(schema);
				colvarUnitAddressID.ColumnName = "UnitAddressID";
				colvarUnitAddressID.DataType = DbType.Int32;
				colvarUnitAddressID.MaxLength = 0;
				colvarUnitAddressID.AutoIncrement = true;
				colvarUnitAddressID.IsNullable = false;
				colvarUnitAddressID.IsPrimaryKey = true;
				colvarUnitAddressID.IsForeignKey = false;
				colvarUnitAddressID.IsReadOnly = false;
				colvarUnitAddressID.DefaultSetting = @"";
				colvarUnitAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitAddressID);

				TableSchema.TableColumn colvarAddressLine1 = new TableSchema.TableColumn(schema);
				colvarAddressLine1.ColumnName = "AddressLine1";
				colvarAddressLine1.DataType = DbType.String;
				colvarAddressLine1.MaxLength = 200;
				colvarAddressLine1.AutoIncrement = false;
				colvarAddressLine1.IsNullable = false;
				colvarAddressLine1.IsPrimaryKey = false;
				colvarAddressLine1.IsForeignKey = false;
				colvarAddressLine1.IsReadOnly = false;
				colvarAddressLine1.DefaultSetting = @"";
				colvarAddressLine1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressLine1);

				TableSchema.TableColumn colvarAddressLine2 = new TableSchema.TableColumn(schema);
				colvarAddressLine2.ColumnName = "AddressLine2";
				colvarAddressLine2.DataType = DbType.String;
				colvarAddressLine2.MaxLength = 200;
				colvarAddressLine2.AutoIncrement = false;
				colvarAddressLine2.IsNullable = true;
				colvarAddressLine2.IsPrimaryKey = false;
				colvarAddressLine2.IsForeignKey = false;
				colvarAddressLine2.IsReadOnly = false;
				colvarAddressLine2.DefaultSetting = @"";
				colvarAddressLine2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressLine2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = false;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = false;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = true;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"";
				colvarCountryId.ForeignKeyTableName = "MC_PoliticalCountrys";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarZipCode = new TableSchema.TableColumn(schema);
				colvarZipCode.ColumnName = "ZipCode";
				colvarZipCode.DataType = DbType.String;
				colvarZipCode.MaxLength = 10;
				colvarZipCode.AutoIncrement = false;
				colvarZipCode.IsNullable = false;
				colvarZipCode.IsPrimaryKey = false;
				colvarZipCode.IsForeignKey = false;
				colvarZipCode.IsReadOnly = false;
				colvarZipCode.DefaultSetting = @"";
				colvarZipCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZipCode);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_UnitAddress",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_UnitAddress LoadFrom(HS_UnitAddress item)
		{
			HS_UnitAddress result = new HS_UnitAddress();
			if (item.UnitAddressID != default(int)) {
				result.LoadByKey(item.UnitAddressID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UnitAddressID {
			get { return GetColumnValue<int>(Columns.UnitAddressID); }
			set {
				SetColumnValue(Columns.UnitAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitAddressID));
			}
		}
		[DataMember]
		public string AddressLine1 {
			get { return GetColumnValue<string>(Columns.AddressLine1); }
			set {
				SetColumnValue(Columns.AddressLine1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressLine1));
			}
		}
		[DataMember]
		public string AddressLine2 {
			get { return GetColumnValue<string>(Columns.AddressLine2); }
			set {
				SetColumnValue(Columns.AddressLine2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressLine2));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set {
				SetColumnValue(Columns.CountryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryId));
			}
		}
		[DataMember]
		public string ZipCode {
			get { return GetColumnValue<string>(Columns.ZipCode); }
			set {
				SetColumnValue(Columns.ZipCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZipCode));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_PoliticalCountry _Country;
		//Relationship: FK_HS_UnitAddress_MC_PoliticalCountrys
		public MC_PoliticalCountry Country
		{
			get
			{
				if(_Country == null) {
					_Country = MC_PoliticalCountry.FetchByID(this.CountryId);
				}
				return _Country;
			}
			set
			{
				SetColumnValue("CountryId", value.CountryID);
				_Country = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AddressLine1;
		}

		#region Typed Columns

		public static TableSchema.TableColumn UnitAddressIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AddressLine1Column
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AddressLine2Column
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ZipCodeColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UnitAddressID = @"UnitAddressID";
			public static readonly string AddressLine1 = @"AddressLine1";
			public static readonly string AddressLine2 = @"AddressLine2";
			public static readonly string City = @"City";
			public static readonly string StateId = @"StateId";
			public static readonly string CountryId = @"CountryId";
			public static readonly string ZipCode = @"ZipCode";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UnitAddressID; }
		}
		*/

		#region Foreign Collections

		private HS_UnitCollection _HS_UnitsCol;
		//Relationship: FK_HS_Unit_HS_UnitAddress
		public HS_UnitCollection HS_UnitsCol
		{
			get
			{
				if(_HS_UnitsCol == null) {
					_HS_UnitsCol = new HS_UnitCollection();
					_HS_UnitsCol.LoadAndCloseReader(HS_Unit.Query()
						.WHERE(HS_Unit.Columns.UnitAddressID, UnitAddressID).ExecuteReader());
				}
				return _HS_UnitsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_UnitDamage class.
	/// </summary>
	[DataContract]
	public partial class HS_UnitDamageCollection : ActiveList<HS_UnitDamage, HS_UnitDamageCollection>
	{
		public static HS_UnitDamageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_UnitDamageCollection result = new HS_UnitDamageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_UnitDamage item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_UnitDamage table.
	/// </summary>
	[DataContract]
	public partial class HS_UnitDamage : ActiveRecord<HS_UnitDamage>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_UnitDamage()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_UnitDamage", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUnitDamageID = new TableSchema.TableColumn(schema);
				colvarUnitDamageID.ColumnName = "UnitDamageID";
				colvarUnitDamageID.DataType = DbType.Int32;
				colvarUnitDamageID.MaxLength = 0;
				colvarUnitDamageID.AutoIncrement = true;
				colvarUnitDamageID.IsNullable = false;
				colvarUnitDamageID.IsPrimaryKey = true;
				colvarUnitDamageID.IsForeignKey = false;
				colvarUnitDamageID.IsReadOnly = false;
				colvarUnitDamageID.DefaultSetting = @"";
				colvarUnitDamageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitDamageID);

				TableSchema.TableColumn colvarUnitID = new TableSchema.TableColumn(schema);
				colvarUnitID.ColumnName = "UnitID";
				colvarUnitID.DataType = DbType.Int32;
				colvarUnitID.MaxLength = 0;
				colvarUnitID.AutoIncrement = false;
				colvarUnitID.IsNullable = false;
				colvarUnitID.IsPrimaryKey = false;
				colvarUnitID.IsForeignKey = true;
				colvarUnitID.IsReadOnly = false;
				colvarUnitID.DefaultSetting = @"";
				colvarUnitID.ForeignKeyTableName = "HS_Unit";
				schema.Columns.Add(colvarUnitID);

				TableSchema.TableColumn colvarDamageDescription = new TableSchema.TableColumn(schema);
				colvarDamageDescription.ColumnName = "DamageDescription";
				colvarDamageDescription.DataType = DbType.String;
				colvarDamageDescription.MaxLength = 2000;
				colvarDamageDescription.AutoIncrement = false;
				colvarDamageDescription.IsNullable = false;
				colvarDamageDescription.IsPrimaryKey = false;
				colvarDamageDescription.IsForeignKey = false;
				colvarDamageDescription.IsReadOnly = false;
				colvarDamageDescription.DefaultSetting = @"";
				colvarDamageDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDamageDescription);

				TableSchema.TableColumn colvarDamageAmount = new TableSchema.TableColumn(schema);
				colvarDamageAmount.ColumnName = "DamageAmount";
				colvarDamageAmount.DataType = DbType.Currency;
				colvarDamageAmount.MaxLength = 0;
				colvarDamageAmount.AutoIncrement = false;
				colvarDamageAmount.IsNullable = false;
				colvarDamageAmount.IsPrimaryKey = false;
				colvarDamageAmount.IsForeignKey = false;
				colvarDamageAmount.IsReadOnly = false;
				colvarDamageAmount.DefaultSetting = @"";
				colvarDamageAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDamageAmount);

				TableSchema.TableColumn colvarIsDamageAmountPaid = new TableSchema.TableColumn(schema);
				colvarIsDamageAmountPaid.ColumnName = "IsDamageAmountPaid";
				colvarIsDamageAmountPaid.DataType = DbType.Boolean;
				colvarIsDamageAmountPaid.MaxLength = 0;
				colvarIsDamageAmountPaid.AutoIncrement = false;
				colvarIsDamageAmountPaid.IsNullable = false;
				colvarIsDamageAmountPaid.IsPrimaryKey = false;
				colvarIsDamageAmountPaid.IsForeignKey = false;
				colvarIsDamageAmountPaid.IsReadOnly = false;
				colvarIsDamageAmountPaid.DefaultSetting = @"";
				colvarIsDamageAmountPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDamageAmountPaid);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_UnitDamage",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_UnitDamage LoadFrom(HS_UnitDamage item)
		{
			HS_UnitDamage result = new HS_UnitDamage();
			if (item.UnitDamageID != default(int)) {
				result.LoadByKey(item.UnitDamageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UnitDamageID {
			get { return GetColumnValue<int>(Columns.UnitDamageID); }
			set {
				SetColumnValue(Columns.UnitDamageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitDamageID));
			}
		}
		[DataMember]
		public int UnitID {
			get { return GetColumnValue<int>(Columns.UnitID); }
			set {
				SetColumnValue(Columns.UnitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitID));
			}
		}
		[DataMember]
		public string DamageDescription {
			get { return GetColumnValue<string>(Columns.DamageDescription); }
			set {
				SetColumnValue(Columns.DamageDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DamageDescription));
			}
		}
		[DataMember]
		public decimal DamageAmount {
			get { return GetColumnValue<decimal>(Columns.DamageAmount); }
			set {
				SetColumnValue(Columns.DamageAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DamageAmount));
			}
		}
		[DataMember]
		public bool IsDamageAmountPaid {
			get { return GetColumnValue<bool>(Columns.IsDamageAmountPaid); }
			set {
				SetColumnValue(Columns.IsDamageAmountPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDamageAmountPaid));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_Unit _Unit;
		//Relationship: FK_HS_UnitDamage_HS_UnitDamage
		public HS_Unit Unit
		{
			get
			{
				if(_Unit == null) {
					_Unit = HS_Unit.FetchByID(this.UnitID);
				}
				return _Unit;
			}
			set
			{
				SetColumnValue("UnitID", value.UnitID);
				_Unit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return UnitDamageID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn UnitDamageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UnitIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DamageDescriptionColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DamageAmountColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDamageAmountPaidColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UnitDamageID = @"UnitDamageID";
			public static readonly string UnitID = @"UnitID";
			public static readonly string DamageDescription = @"DamageDescription";
			public static readonly string DamageAmount = @"DamageAmount";
			public static readonly string IsDamageAmountPaid = @"IsDamageAmountPaid";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UnitDamageID; }
		}
		*/

		#region Foreign Collections

		private HS_UnitDamageUserCollection _HS_UnitDamageUsersCol;
		//Relationship: FK_HS_UnitDamageUsers_HS_UnitDamageUsers
		public HS_UnitDamageUserCollection HS_UnitDamageUsersCol
		{
			get
			{
				if(_HS_UnitDamageUsersCol == null) {
					_HS_UnitDamageUsersCol = new HS_UnitDamageUserCollection();
					_HS_UnitDamageUsersCol.LoadAndCloseReader(HS_UnitDamageUser.Query()
						.WHERE(HS_UnitDamageUser.Columns.UnitDamageID, UnitDamageID).ExecuteReader());
				}
				return _HS_UnitDamageUsersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_UnitDamageUser class.
	/// </summary>
	[DataContract]
	public partial class HS_UnitDamageUserCollection : ActiveList<HS_UnitDamageUser, HS_UnitDamageUserCollection>
	{
		public static HS_UnitDamageUserCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_UnitDamageUserCollection result = new HS_UnitDamageUserCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_UnitDamageUser item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_UnitDamageUsers table.
	/// </summary>
	[DataContract]
	public partial class HS_UnitDamageUser : ActiveRecord<HS_UnitDamageUser>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_UnitDamageUser()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_UnitDamageUsers", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUnitDamageUsersID = new TableSchema.TableColumn(schema);
				colvarUnitDamageUsersID.ColumnName = "UnitDamageUsersID";
				colvarUnitDamageUsersID.DataType = DbType.Int32;
				colvarUnitDamageUsersID.MaxLength = 0;
				colvarUnitDamageUsersID.AutoIncrement = true;
				colvarUnitDamageUsersID.IsNullable = false;
				colvarUnitDamageUsersID.IsPrimaryKey = true;
				colvarUnitDamageUsersID.IsForeignKey = false;
				colvarUnitDamageUsersID.IsReadOnly = false;
				colvarUnitDamageUsersID.DefaultSetting = @"";
				colvarUnitDamageUsersID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitDamageUsersID);

				TableSchema.TableColumn colvarUnitDamageID = new TableSchema.TableColumn(schema);
				colvarUnitDamageID.ColumnName = "UnitDamageID";
				colvarUnitDamageID.DataType = DbType.Int32;
				colvarUnitDamageID.MaxLength = 0;
				colvarUnitDamageID.AutoIncrement = false;
				colvarUnitDamageID.IsNullable = false;
				colvarUnitDamageID.IsPrimaryKey = false;
				colvarUnitDamageID.IsForeignKey = true;
				colvarUnitDamageID.IsReadOnly = false;
				colvarUnitDamageID.DefaultSetting = @"";
				colvarUnitDamageID.ForeignKeyTableName = "HS_UnitDamage";
				schema.Columns.Add(colvarUnitDamageID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = true;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarResponsibleDamageAmount = new TableSchema.TableColumn(schema);
				colvarResponsibleDamageAmount.ColumnName = "ResponsibleDamageAmount";
				colvarResponsibleDamageAmount.DataType = DbType.Currency;
				colvarResponsibleDamageAmount.MaxLength = 0;
				colvarResponsibleDamageAmount.AutoIncrement = false;
				colvarResponsibleDamageAmount.IsNullable = false;
				colvarResponsibleDamageAmount.IsPrimaryKey = false;
				colvarResponsibleDamageAmount.IsForeignKey = false;
				colvarResponsibleDamageAmount.IsReadOnly = false;
				colvarResponsibleDamageAmount.DefaultSetting = @"";
				colvarResponsibleDamageAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResponsibleDamageAmount);

				TableSchema.TableColumn colvarIsDeducted = new TableSchema.TableColumn(schema);
				colvarIsDeducted.ColumnName = "IsDeducted";
				colvarIsDeducted.DataType = DbType.Boolean;
				colvarIsDeducted.MaxLength = 0;
				colvarIsDeducted.AutoIncrement = false;
				colvarIsDeducted.IsNullable = false;
				colvarIsDeducted.IsPrimaryKey = false;
				colvarIsDeducted.IsForeignKey = false;
				colvarIsDeducted.IsReadOnly = false;
				colvarIsDeducted.DefaultSetting = @"";
				colvarIsDeducted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeducted);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_UnitDamageUsers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_UnitDamageUser LoadFrom(HS_UnitDamageUser item)
		{
			HS_UnitDamageUser result = new HS_UnitDamageUser();
			if (item.UnitDamageUsersID != default(int)) {
				result.LoadByKey(item.UnitDamageUsersID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UnitDamageUsersID {
			get { return GetColumnValue<int>(Columns.UnitDamageUsersID); }
			set {
				SetColumnValue(Columns.UnitDamageUsersID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitDamageUsersID));
			}
		}
		[DataMember]
		public int UnitDamageID {
			get { return GetColumnValue<int>(Columns.UnitDamageID); }
			set {
				SetColumnValue(Columns.UnitDamageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitDamageID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public decimal ResponsibleDamageAmount {
			get { return GetColumnValue<decimal>(Columns.ResponsibleDamageAmount); }
			set {
				SetColumnValue(Columns.ResponsibleDamageAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ResponsibleDamageAmount));
			}
		}
		[DataMember]
		public bool IsDeducted {
			get { return GetColumnValue<bool>(Columns.IsDeducted); }
			set {
				SetColumnValue(Columns.IsDeducted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeducted));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_UnitDamage _UnitDamage;
		//Relationship: FK_HS_UnitDamageUsers_HS_UnitDamageUsers
		public HS_UnitDamage UnitDamage
		{
			get
			{
				if(_UnitDamage == null) {
					_UnitDamage = HS_UnitDamage.FetchByID(this.UnitDamageID);
				}
				return _UnitDamage;
			}
			set
			{
				SetColumnValue("UnitDamageID", value.UnitDamageID);
				_UnitDamage = value;
			}
		}

		private RU_User _User;
		//Relationship: FK_HS_UnitDamageUsers_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserID);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserID", value.UserID);
				_User = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return UnitDamageUsersID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn UnitDamageUsersIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UnitDamageIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ResponsibleDamageAmountColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeductedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UnitDamageUsersID = @"UnitDamageUsersID";
			public static readonly string UnitDamageID = @"UnitDamageID";
			public static readonly string UserID = @"UserID";
			public static readonly string ResponsibleDamageAmount = @"ResponsibleDamageAmount";
			public static readonly string IsDeducted = @"IsDeducted";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UnitDamageUsersID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the HS_UnitFurniturePackage class.
	/// </summary>
	[DataContract]
	public partial class HS_UnitFurniturePackageCollection : ActiveList<HS_UnitFurniturePackage, HS_UnitFurniturePackageCollection>
	{
		public static HS_UnitFurniturePackageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_UnitFurniturePackageCollection result = new HS_UnitFurniturePackageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_UnitFurniturePackage item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_UnitFurniturePackage table.
	/// </summary>
	[DataContract]
	public partial class HS_UnitFurniturePackage : ActiveRecord<HS_UnitFurniturePackage>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_UnitFurniturePackage()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_UnitFurniturePackage", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUnitFurniturePackageID = new TableSchema.TableColumn(schema);
				colvarUnitFurniturePackageID.ColumnName = "UnitFurniturePackageID";
				colvarUnitFurniturePackageID.DataType = DbType.Int32;
				colvarUnitFurniturePackageID.MaxLength = 0;
				colvarUnitFurniturePackageID.AutoIncrement = true;
				colvarUnitFurniturePackageID.IsNullable = false;
				colvarUnitFurniturePackageID.IsPrimaryKey = true;
				colvarUnitFurniturePackageID.IsForeignKey = false;
				colvarUnitFurniturePackageID.IsReadOnly = false;
				colvarUnitFurniturePackageID.DefaultSetting = @"";
				colvarUnitFurniturePackageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitFurniturePackageID);

				TableSchema.TableColumn colvarUnitID = new TableSchema.TableColumn(schema);
				colvarUnitID.ColumnName = "UnitID";
				colvarUnitID.DataType = DbType.Int32;
				colvarUnitID.MaxLength = 0;
				colvarUnitID.AutoIncrement = false;
				colvarUnitID.IsNullable = false;
				colvarUnitID.IsPrimaryKey = false;
				colvarUnitID.IsForeignKey = true;
				colvarUnitID.IsReadOnly = false;
				colvarUnitID.DefaultSetting = @"";
				colvarUnitID.ForeignKeyTableName = "HS_Unit";
				schema.Columns.Add(colvarUnitID);

				TableSchema.TableColumn colvarFurniturePackageID = new TableSchema.TableColumn(schema);
				colvarFurniturePackageID.ColumnName = "FurniturePackageID";
				colvarFurniturePackageID.DataType = DbType.Int32;
				colvarFurniturePackageID.MaxLength = 0;
				colvarFurniturePackageID.AutoIncrement = false;
				colvarFurniturePackageID.IsNullable = false;
				colvarFurniturePackageID.IsPrimaryKey = false;
				colvarFurniturePackageID.IsForeignKey = true;
				colvarFurniturePackageID.IsReadOnly = false;
				colvarFurniturePackageID.DefaultSetting = @"";
				colvarFurniturePackageID.ForeignKeyTableName = "HS_FurniturePackage";
				schema.Columns.Add(colvarFurniturePackageID);

				TableSchema.TableColumn colvarRentalPrice = new TableSchema.TableColumn(schema);
				colvarRentalPrice.ColumnName = "RentalPrice";
				colvarRentalPrice.DataType = DbType.Currency;
				colvarRentalPrice.MaxLength = 0;
				colvarRentalPrice.AutoIncrement = false;
				colvarRentalPrice.IsNullable = true;
				colvarRentalPrice.IsPrimaryKey = false;
				colvarRentalPrice.IsForeignKey = false;
				colvarRentalPrice.IsReadOnly = false;
				colvarRentalPrice.DefaultSetting = @"";
				colvarRentalPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentalPrice);

				TableSchema.TableColumn colvarDeliveryDate = new TableSchema.TableColumn(schema);
				colvarDeliveryDate.ColumnName = "DeliveryDate";
				colvarDeliveryDate.DataType = DbType.DateTime;
				colvarDeliveryDate.MaxLength = 0;
				colvarDeliveryDate.AutoIncrement = false;
				colvarDeliveryDate.IsNullable = true;
				colvarDeliveryDate.IsPrimaryKey = false;
				colvarDeliveryDate.IsForeignKey = false;
				colvarDeliveryDate.IsReadOnly = false;
				colvarDeliveryDate.DefaultSetting = @"";
				colvarDeliveryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryDate);

				TableSchema.TableColumn colvarDeliveryCharge = new TableSchema.TableColumn(schema);
				colvarDeliveryCharge.ColumnName = "DeliveryCharge";
				colvarDeliveryCharge.DataType = DbType.Currency;
				colvarDeliveryCharge.MaxLength = 0;
				colvarDeliveryCharge.AutoIncrement = false;
				colvarDeliveryCharge.IsNullable = true;
				colvarDeliveryCharge.IsPrimaryKey = false;
				colvarDeliveryCharge.IsForeignKey = false;
				colvarDeliveryCharge.IsReadOnly = false;
				colvarDeliveryCharge.DefaultSetting = @"";
				colvarDeliveryCharge.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliveryCharge);

				TableSchema.TableColumn colvarIsDeliveryChargePaid = new TableSchema.TableColumn(schema);
				colvarIsDeliveryChargePaid.ColumnName = "IsDeliveryChargePaid";
				colvarIsDeliveryChargePaid.DataType = DbType.Boolean;
				colvarIsDeliveryChargePaid.MaxLength = 0;
				colvarIsDeliveryChargePaid.AutoIncrement = false;
				colvarIsDeliveryChargePaid.IsNullable = false;
				colvarIsDeliveryChargePaid.IsPrimaryKey = false;
				colvarIsDeliveryChargePaid.IsForeignKey = false;
				colvarIsDeliveryChargePaid.IsReadOnly = false;
				colvarIsDeliveryChargePaid.DefaultSetting = @"";
				colvarIsDeliveryChargePaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeliveryChargePaid);

				TableSchema.TableColumn colvarPickupDate = new TableSchema.TableColumn(schema);
				colvarPickupDate.ColumnName = "PickupDate";
				colvarPickupDate.DataType = DbType.DateTime;
				colvarPickupDate.MaxLength = 0;
				colvarPickupDate.AutoIncrement = false;
				colvarPickupDate.IsNullable = true;
				colvarPickupDate.IsPrimaryKey = false;
				colvarPickupDate.IsForeignKey = false;
				colvarPickupDate.IsReadOnly = false;
				colvarPickupDate.DefaultSetting = @"";
				colvarPickupDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPickupDate);

				TableSchema.TableColumn colvarPickupCharge = new TableSchema.TableColumn(schema);
				colvarPickupCharge.ColumnName = "PickupCharge";
				colvarPickupCharge.DataType = DbType.Currency;
				colvarPickupCharge.MaxLength = 0;
				colvarPickupCharge.AutoIncrement = false;
				colvarPickupCharge.IsNullable = true;
				colvarPickupCharge.IsPrimaryKey = false;
				colvarPickupCharge.IsForeignKey = false;
				colvarPickupCharge.IsReadOnly = false;
				colvarPickupCharge.DefaultSetting = @"";
				colvarPickupCharge.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPickupCharge);

				TableSchema.TableColumn colvarIsPickupChargePaid = new TableSchema.TableColumn(schema);
				colvarIsPickupChargePaid.ColumnName = "IsPickupChargePaid";
				colvarIsPickupChargePaid.DataType = DbType.Boolean;
				colvarIsPickupChargePaid.MaxLength = 0;
				colvarIsPickupChargePaid.AutoIncrement = false;
				colvarIsPickupChargePaid.IsNullable = false;
				colvarIsPickupChargePaid.IsPrimaryKey = false;
				colvarIsPickupChargePaid.IsForeignKey = false;
				colvarIsPickupChargePaid.IsReadOnly = false;
				colvarIsPickupChargePaid.DefaultSetting = @"";
				colvarIsPickupChargePaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPickupChargePaid);

				TableSchema.TableColumn colvarIsInactive = new TableSchema.TableColumn(schema);
				colvarIsInactive.ColumnName = "IsInactive";
				colvarIsInactive.DataType = DbType.Boolean;
				colvarIsInactive.MaxLength = 0;
				colvarIsInactive.AutoIncrement = false;
				colvarIsInactive.IsNullable = false;
				colvarIsInactive.IsPrimaryKey = false;
				colvarIsInactive.IsForeignKey = false;
				colvarIsInactive.IsReadOnly = false;
				colvarIsInactive.DefaultSetting = @"";
				colvarIsInactive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsInactive);

				TableSchema.TableColumn colvarInactiveDate = new TableSchema.TableColumn(schema);
				colvarInactiveDate.ColumnName = "InactiveDate";
				colvarInactiveDate.DataType = DbType.DateTime;
				colvarInactiveDate.MaxLength = 0;
				colvarInactiveDate.AutoIncrement = false;
				colvarInactiveDate.IsNullable = true;
				colvarInactiveDate.IsPrimaryKey = false;
				colvarInactiveDate.IsForeignKey = false;
				colvarInactiveDate.IsReadOnly = false;
				colvarInactiveDate.DefaultSetting = @"";
				colvarInactiveDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInactiveDate);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_UnitFurniturePackage",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_UnitFurniturePackage LoadFrom(HS_UnitFurniturePackage item)
		{
			HS_UnitFurniturePackage result = new HS_UnitFurniturePackage();
			if (item.UnitFurniturePackageID != default(int)) {
				result.LoadByKey(item.UnitFurniturePackageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UnitFurniturePackageID {
			get { return GetColumnValue<int>(Columns.UnitFurniturePackageID); }
			set {
				SetColumnValue(Columns.UnitFurniturePackageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitFurniturePackageID));
			}
		}
		[DataMember]
		public int UnitID {
			get { return GetColumnValue<int>(Columns.UnitID); }
			set {
				SetColumnValue(Columns.UnitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitID));
			}
		}
		[DataMember]
		public int FurniturePackageID {
			get { return GetColumnValue<int>(Columns.FurniturePackageID); }
			set {
				SetColumnValue(Columns.FurniturePackageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FurniturePackageID));
			}
		}
		[DataMember]
		public decimal? RentalPrice {
			get { return GetColumnValue<decimal?>(Columns.RentalPrice); }
			set {
				SetColumnValue(Columns.RentalPrice, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentalPrice));
			}
		}
		[DataMember]
		public DateTime? DeliveryDate {
			get { return GetColumnValue<DateTime?>(Columns.DeliveryDate); }
			set {
				SetColumnValue(Columns.DeliveryDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DeliveryDate));
			}
		}
		[DataMember]
		public decimal? DeliveryCharge {
			get { return GetColumnValue<decimal?>(Columns.DeliveryCharge); }
			set {
				SetColumnValue(Columns.DeliveryCharge, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DeliveryCharge));
			}
		}
		[DataMember]
		public bool IsDeliveryChargePaid {
			get { return GetColumnValue<bool>(Columns.IsDeliveryChargePaid); }
			set {
				SetColumnValue(Columns.IsDeliveryChargePaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeliveryChargePaid));
			}
		}
		[DataMember]
		public DateTime? PickupDate {
			get { return GetColumnValue<DateTime?>(Columns.PickupDate); }
			set {
				SetColumnValue(Columns.PickupDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PickupDate));
			}
		}
		[DataMember]
		public decimal? PickupCharge {
			get { return GetColumnValue<decimal?>(Columns.PickupCharge); }
			set {
				SetColumnValue(Columns.PickupCharge, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PickupCharge));
			}
		}
		[DataMember]
		public bool IsPickupChargePaid {
			get { return GetColumnValue<bool>(Columns.IsPickupChargePaid); }
			set {
				SetColumnValue(Columns.IsPickupChargePaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPickupChargePaid));
			}
		}
		[DataMember]
		public bool IsInactive {
			get { return GetColumnValue<bool>(Columns.IsInactive); }
			set {
				SetColumnValue(Columns.IsInactive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsInactive));
			}
		}
		[DataMember]
		public DateTime? InactiveDate {
			get { return GetColumnValue<DateTime?>(Columns.InactiveDate); }
			set {
				SetColumnValue(Columns.InactiveDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InactiveDate));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_FurniturePackage _FurniturePackage;
		//Relationship: FK_HS_UnitFurniturePackage_HS_FurniturePackage
		public HS_FurniturePackage FurniturePackage
		{
			get
			{
				if(_FurniturePackage == null) {
					_FurniturePackage = HS_FurniturePackage.FetchByID(this.FurniturePackageID);
				}
				return _FurniturePackage;
			}
			set
			{
				SetColumnValue("FurniturePackageID", value.FurniturePackageID);
				_FurniturePackage = value;
			}
		}

		private HS_Unit _Unit;
		//Relationship: FK_HS_UnitFurniturePackage_HS_Unit
		public HS_Unit Unit
		{
			get
			{
				if(_Unit == null) {
					_Unit = HS_Unit.FetchByID(this.UnitID);
				}
				return _Unit;
			}
			set
			{
				SetColumnValue("UnitID", value.UnitID);
				_Unit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return UnitFurniturePackageID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn UnitFurniturePackageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UnitIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn FurniturePackageIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RentalPriceColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DeliveryDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DeliveryChargeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeliveryChargePaidColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PickupDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PickupChargeColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsPickupChargePaidColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsInactiveColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn InactiveDateColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[16]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UnitFurniturePackageID = @"UnitFurniturePackageID";
			public static readonly string UnitID = @"UnitID";
			public static readonly string FurniturePackageID = @"FurniturePackageID";
			public static readonly string RentalPrice = @"RentalPrice";
			public static readonly string DeliveryDate = @"DeliveryDate";
			public static readonly string DeliveryCharge = @"DeliveryCharge";
			public static readonly string IsDeliveryChargePaid = @"IsDeliveryChargePaid";
			public static readonly string PickupDate = @"PickupDate";
			public static readonly string PickupCharge = @"PickupCharge";
			public static readonly string IsPickupChargePaid = @"IsPickupChargePaid";
			public static readonly string IsInactive = @"IsInactive";
			public static readonly string InactiveDate = @"InactiveDate";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UnitFurniturePackageID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the HS_UnitNote class.
	/// </summary>
	[DataContract]
	public partial class HS_UnitNoteCollection : ActiveList<HS_UnitNote, HS_UnitNoteCollection>
	{
		public static HS_UnitNoteCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_UnitNoteCollection result = new HS_UnitNoteCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_UnitNote item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_UnitNotes table.
	/// </summary>
	[DataContract]
	public partial class HS_UnitNote : ActiveRecord<HS_UnitNote>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_UnitNote()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_UnitNotes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUnitNoteID = new TableSchema.TableColumn(schema);
				colvarUnitNoteID.ColumnName = "UnitNoteID";
				colvarUnitNoteID.DataType = DbType.Int32;
				colvarUnitNoteID.MaxLength = 0;
				colvarUnitNoteID.AutoIncrement = true;
				colvarUnitNoteID.IsNullable = false;
				colvarUnitNoteID.IsPrimaryKey = true;
				colvarUnitNoteID.IsForeignKey = false;
				colvarUnitNoteID.IsReadOnly = false;
				colvarUnitNoteID.DefaultSetting = @"";
				colvarUnitNoteID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitNoteID);

				TableSchema.TableColumn colvarUnitID = new TableSchema.TableColumn(schema);
				colvarUnitID.ColumnName = "UnitID";
				colvarUnitID.DataType = DbType.Int32;
				colvarUnitID.MaxLength = 0;
				colvarUnitID.AutoIncrement = false;
				colvarUnitID.IsNullable = false;
				colvarUnitID.IsPrimaryKey = false;
				colvarUnitID.IsForeignKey = true;
				colvarUnitID.IsReadOnly = false;
				colvarUnitID.DefaultSetting = @"";
				colvarUnitID.ForeignKeyTableName = "HS_Unit";
				schema.Columns.Add(colvarUnitID);

				TableSchema.TableColumn colvarUnitNote = new TableSchema.TableColumn(schema);
				colvarUnitNote.ColumnName = "UnitNote";
				colvarUnitNote.DataType = DbType.String;
				colvarUnitNote.MaxLength = 2000;
				colvarUnitNote.AutoIncrement = false;
				colvarUnitNote.IsNullable = false;
				colvarUnitNote.IsPrimaryKey = false;
				colvarUnitNote.IsForeignKey = false;
				colvarUnitNote.IsReadOnly = false;
				colvarUnitNote.DefaultSetting = @"";
				colvarUnitNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitNote);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_UnitNotes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_UnitNote LoadFrom(HS_UnitNote item)
		{
			HS_UnitNote result = new HS_UnitNote();
			if (item.UnitNoteID != default(int)) {
				result.LoadByKey(item.UnitNoteID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UnitNoteID {
			get { return GetColumnValue<int>(Columns.UnitNoteID); }
			set {
				SetColumnValue(Columns.UnitNoteID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitNoteID));
			}
		}
		[DataMember]
		public int UnitID {
			get { return GetColumnValue<int>(Columns.UnitID); }
			set {
				SetColumnValue(Columns.UnitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitID));
			}
		}
		[DataMember]
		public string UnitNote {
			get { return GetColumnValue<string>(Columns.UnitNote); }
			set {
				SetColumnValue(Columns.UnitNote, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitNote));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_Unit _Unit;
		//Relationship: FK_HS_UnitNotes_HS_Unit
		public HS_Unit Unit
		{
			get
			{
				if(_Unit == null) {
					_Unit = HS_Unit.FetchByID(this.UnitID);
				}
				return _Unit;
			}
			set
			{
				SetColumnValue("UnitID", value.UnitID);
				_Unit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return UnitNoteID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn UnitNoteIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UnitIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UnitNoteColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UnitNoteID = @"UnitNoteID";
			public static readonly string UnitID = @"UnitID";
			public static readonly string UnitNote = @"UnitNote";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UnitNoteID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the HS_UnitOccupant class.
	/// </summary>
	[DataContract]
	public partial class HS_UnitOccupantCollection : ActiveList<HS_UnitOccupant, HS_UnitOccupantCollection>
	{
		public static HS_UnitOccupantCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_UnitOccupantCollection result = new HS_UnitOccupantCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_UnitOccupant item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_UnitOccupant table.
	/// </summary>
	[DataContract]
	public partial class HS_UnitOccupant : ActiveRecord<HS_UnitOccupant>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_UnitOccupant()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_UnitOccupant", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUnitOccupantID = new TableSchema.TableColumn(schema);
				colvarUnitOccupantID.ColumnName = "UnitOccupantID";
				colvarUnitOccupantID.DataType = DbType.Int32;
				colvarUnitOccupantID.MaxLength = 0;
				colvarUnitOccupantID.AutoIncrement = true;
				colvarUnitOccupantID.IsNullable = false;
				colvarUnitOccupantID.IsPrimaryKey = true;
				colvarUnitOccupantID.IsForeignKey = false;
				colvarUnitOccupantID.IsReadOnly = false;
				colvarUnitOccupantID.DefaultSetting = @"";
				colvarUnitOccupantID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitOccupantID);

				TableSchema.TableColumn colvarUnitID = new TableSchema.TableColumn(schema);
				colvarUnitID.ColumnName = "UnitID";
				colvarUnitID.DataType = DbType.Int32;
				colvarUnitID.MaxLength = 0;
				colvarUnitID.AutoIncrement = false;
				colvarUnitID.IsNullable = false;
				colvarUnitID.IsPrimaryKey = false;
				colvarUnitID.IsForeignKey = true;
				colvarUnitID.IsReadOnly = false;
				colvarUnitID.DefaultSetting = @"";
				colvarUnitID.ForeignKeyTableName = "HS_Unit";
				schema.Columns.Add(colvarUnitID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = true;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarMoveInDate = new TableSchema.TableColumn(schema);
				colvarMoveInDate.ColumnName = "MoveInDate";
				colvarMoveInDate.DataType = DbType.DateTime;
				colvarMoveInDate.MaxLength = 0;
				colvarMoveInDate.AutoIncrement = false;
				colvarMoveInDate.IsNullable = false;
				colvarMoveInDate.IsPrimaryKey = false;
				colvarMoveInDate.IsForeignKey = false;
				colvarMoveInDate.IsReadOnly = false;
				colvarMoveInDate.DefaultSetting = @"";
				colvarMoveInDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoveInDate);

				TableSchema.TableColumn colvarMoveOutDate = new TableSchema.TableColumn(schema);
				colvarMoveOutDate.ColumnName = "MoveOutDate";
				colvarMoveOutDate.DataType = DbType.DateTime;
				colvarMoveOutDate.MaxLength = 0;
				colvarMoveOutDate.AutoIncrement = false;
				colvarMoveOutDate.IsNullable = true;
				colvarMoveOutDate.IsPrimaryKey = false;
				colvarMoveOutDate.IsForeignKey = false;
				colvarMoveOutDate.IsReadOnly = false;
				colvarMoveOutDate.DefaultSetting = @"";
				colvarMoveOutDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoveOutDate);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_UnitOccupant",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_UnitOccupant LoadFrom(HS_UnitOccupant item)
		{
			HS_UnitOccupant result = new HS_UnitOccupant();
			if (item.UnitOccupantID != default(int)) {
				result.LoadByKey(item.UnitOccupantID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UnitOccupantID {
			get { return GetColumnValue<int>(Columns.UnitOccupantID); }
			set {
				SetColumnValue(Columns.UnitOccupantID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitOccupantID));
			}
		}
		[DataMember]
		public int UnitID {
			get { return GetColumnValue<int>(Columns.UnitID); }
			set {
				SetColumnValue(Columns.UnitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public DateTime MoveInDate {
			get { return GetColumnValue<DateTime>(Columns.MoveInDate); }
			set {
				SetColumnValue(Columns.MoveInDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MoveInDate));
			}
		}
		[DataMember]
		public DateTime? MoveOutDate {
			get { return GetColumnValue<DateTime?>(Columns.MoveOutDate); }
			set {
				SetColumnValue(Columns.MoveOutDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MoveOutDate));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private HS_Unit _Unit;
		//Relationship: FK_HS_UnitOccupant_HS_Unit
		public HS_Unit Unit
		{
			get
			{
				if(_Unit == null) {
					_Unit = HS_Unit.FetchByID(this.UnitID);
				}
				return _Unit;
			}
			set
			{
				SetColumnValue("UnitID", value.UnitID);
				_Unit = value;
			}
		}

		private RU_User _User;
		//Relationship: FK_HS_UnitOccupant_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserID);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserID", value.UserID);
				_User = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return UnitOccupantID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn UnitOccupantIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UnitIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MoveInDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MoveOutDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UnitOccupantID = @"UnitOccupantID";
			public static readonly string UnitID = @"UnitID";
			public static readonly string UserID = @"UserID";
			public static readonly string MoveInDate = @"MoveInDate";
			public static readonly string MoveOutDate = @"MoveOutDate";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UnitOccupantID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the HS_UnitType class.
	/// </summary>
	[DataContract]
	public partial class HS_UnitTypeCollection : ActiveList<HS_UnitType, HS_UnitTypeCollection>
	{
		public static HS_UnitTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_UnitTypeCollection result = new HS_UnitTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_UnitType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_UnitType table.
	/// </summary>
	[DataContract]
	public partial class HS_UnitType : ActiveRecord<HS_UnitType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_UnitType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_UnitType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUnitTypeID = new TableSchema.TableColumn(schema);
				colvarUnitTypeID.ColumnName = "UnitTypeID";
				colvarUnitTypeID.DataType = DbType.Int32;
				colvarUnitTypeID.MaxLength = 0;
				colvarUnitTypeID.AutoIncrement = true;
				colvarUnitTypeID.IsNullable = false;
				colvarUnitTypeID.IsPrimaryKey = true;
				colvarUnitTypeID.IsForeignKey = false;
				colvarUnitTypeID.IsReadOnly = false;
				colvarUnitTypeID.DefaultSetting = @"";
				colvarUnitTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitTypeID);

				TableSchema.TableColumn colvarUnitTypeName = new TableSchema.TableColumn(schema);
				colvarUnitTypeName.ColumnName = "UnitTypeName";
				colvarUnitTypeName.DataType = DbType.String;
				colvarUnitTypeName.MaxLength = 50;
				colvarUnitTypeName.AutoIncrement = false;
				colvarUnitTypeName.IsNullable = false;
				colvarUnitTypeName.IsPrimaryKey = false;
				colvarUnitTypeName.IsForeignKey = false;
				colvarUnitTypeName.IsReadOnly = false;
				colvarUnitTypeName.DefaultSetting = @"";
				colvarUnitTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitTypeName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_UnitType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_UnitType LoadFrom(HS_UnitType item)
		{
			HS_UnitType result = new HS_UnitType();
			if (item.UnitTypeID != default(int)) {
				result.LoadByKey(item.UnitTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UnitTypeID {
			get { return GetColumnValue<int>(Columns.UnitTypeID); }
			set {
				SetColumnValue(Columns.UnitTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitTypeID));
			}
		}
		[DataMember]
		public string UnitTypeName {
			get { return GetColumnValue<string>(Columns.UnitTypeName); }
			set {
				SetColumnValue(Columns.UnitTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UnitTypeName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return UnitTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn UnitTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UnitTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UnitTypeID = @"UnitTypeID";
			public static readonly string UnitTypeName = @"UnitTypeName";
			public static readonly string IsActive = @"IsActive";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UnitTypeID; }
		}
		*/

		#region Foreign Collections

		private HS_UnitCollection _HS_UnitsCol;
		//Relationship: FK_HS_Unit_HS_UnitType
		public HS_UnitCollection HS_UnitsCol
		{
			get
			{
				if(_HS_UnitsCol == null) {
					_HS_UnitsCol = new HS_UnitCollection();
					_HS_UnitsCol.LoadAndCloseReader(HS_Unit.Query()
						.WHERE(HS_Unit.Columns.UnitTypeID, UnitTypeID).ExecuteReader());
				}
				return _HS_UnitsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the HS_UnitVacateNoticeSentByType class.
	/// </summary>
	[DataContract]
	public partial class HS_UnitVacateNoticeSentByTypeCollection : ActiveList<HS_UnitVacateNoticeSentByType, HS_UnitVacateNoticeSentByTypeCollection>
	{
		public static HS_UnitVacateNoticeSentByTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			HS_UnitVacateNoticeSentByTypeCollection result = new HS_UnitVacateNoticeSentByTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (HS_UnitVacateNoticeSentByType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the HS_UnitVacateNoticeSentByType table.
	/// </summary>
	[DataContract]
	public partial class HS_UnitVacateNoticeSentByType : ActiveRecord<HS_UnitVacateNoticeSentByType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum VacateNoticeSentByTypeEnum : int
		{
			[EnumMember()] Ground_WSignature = 1,
			[EnumMember()] Email = 2,
			[EnumMember()] Fax = 3,
		}

		//[DataMember]
		//public VacateNoticeSentByTypeEnum VacateNoticeSentByTypeCode
		//{
		//	get { return (VacateNoticeSentByTypeEnum)VacateNoticeSentByTypeID; }
		//	set { VacateNoticeSentByTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public HS_UnitVacateNoticeSentByType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HS_UnitVacateNoticeSentByType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarVacateNoticeSentByTypeID = new TableSchema.TableColumn(schema);
				colvarVacateNoticeSentByTypeID.ColumnName = "VacateNoticeSentByTypeID";
				colvarVacateNoticeSentByTypeID.DataType = DbType.Int32;
				colvarVacateNoticeSentByTypeID.MaxLength = 0;
				colvarVacateNoticeSentByTypeID.AutoIncrement = true;
				colvarVacateNoticeSentByTypeID.IsNullable = false;
				colvarVacateNoticeSentByTypeID.IsPrimaryKey = true;
				colvarVacateNoticeSentByTypeID.IsForeignKey = false;
				colvarVacateNoticeSentByTypeID.IsReadOnly = false;
				colvarVacateNoticeSentByTypeID.DefaultSetting = @"";
				colvarVacateNoticeSentByTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVacateNoticeSentByTypeID);

				TableSchema.TableColumn colvarSentByName = new TableSchema.TableColumn(schema);
				colvarSentByName.ColumnName = "SentByName";
				colvarSentByName.DataType = DbType.String;
				colvarSentByName.MaxLength = 50;
				colvarSentByName.AutoIncrement = false;
				colvarSentByName.IsNullable = false;
				colvarSentByName.IsPrimaryKey = false;
				colvarSentByName.IsForeignKey = false;
				colvarSentByName.IsReadOnly = false;
				colvarSentByName.DefaultSetting = @"";
				colvarSentByName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSentByName);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("HS_UnitVacateNoticeSentByType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static HS_UnitVacateNoticeSentByType LoadFrom(HS_UnitVacateNoticeSentByType item)
		{
			HS_UnitVacateNoticeSentByType result = new HS_UnitVacateNoticeSentByType();
			if (item.VacateNoticeSentByTypeID != default(int)) {
				result.LoadByKey(item.VacateNoticeSentByTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int VacateNoticeSentByTypeID {
			get { return GetColumnValue<int>(Columns.VacateNoticeSentByTypeID); }
			set {
				SetColumnValue(Columns.VacateNoticeSentByTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VacateNoticeSentByTypeID));
			}
		}
		[DataMember]
		public string SentByName {
			get { return GetColumnValue<string>(Columns.SentByName); }
			set {
				SetColumnValue(Columns.SentByName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SentByName));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return SentByName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn VacateNoticeSentByTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SentByNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string VacateNoticeSentByTypeID = @"VacateNoticeSentByTypeID";
			public static readonly string SentByName = @"SentByName";
			public static readonly string IsActive = @"IsActive";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return VacateNoticeSentByTypeID; }
		}
		*/

		#region Foreign Collections

		private HS_UnitCollection _HS_UnitsCol;
		//Relationship: FK_HS_Unit_HS_UnitVacateNoticeSentByType
		public HS_UnitCollection HS_UnitsCol
		{
			get
			{
				if(_HS_UnitsCol == null) {
					_HS_UnitsCol = new HS_UnitCollection();
					_HS_UnitsCol.LoadAndCloseReader(HS_Unit.Query()
						.WHERE(HS_Unit.Columns.VacateNoticeSentByTypeID, VacateNoticeSentByTypeID).ExecuteReader());
				}
				return _HS_UnitsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_PoliticalCountry class.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalCountryCollection : ActiveList<MC_PoliticalCountry, MC_PoliticalCountryCollection>
	{
		public static MC_PoliticalCountryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_PoliticalCountryCollection result = new MC_PoliticalCountryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_PoliticalCountry item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_PoliticalCountrys table.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalCountry : ActiveRecord<MC_PoliticalCountry>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_PoliticalCountry()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_PoliticalCountrys", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCountryID = new TableSchema.TableColumn(schema);
				colvarCountryID.ColumnName = "CountryID";
				colvarCountryID.DataType = DbType.String;
				colvarCountryID.MaxLength = 10;
				colvarCountryID.AutoIncrement = false;
				colvarCountryID.IsNullable = false;
				colvarCountryID.IsPrimaryKey = true;
				colvarCountryID.IsForeignKey = false;
				colvarCountryID.IsReadOnly = false;
				colvarCountryID.DefaultSetting = @"";
				colvarCountryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryID);

				TableSchema.TableColumn colvarCountryName = new TableSchema.TableColumn(schema);
				colvarCountryName.ColumnName = "CountryName";
				colvarCountryName.DataType = DbType.String;
				colvarCountryName.MaxLength = 150;
				colvarCountryName.AutoIncrement = false;
				colvarCountryName.IsNullable = false;
				colvarCountryName.IsPrimaryKey = false;
				colvarCountryName.IsForeignKey = false;
				colvarCountryName.IsReadOnly = false;
				colvarCountryName.DefaultSetting = @"";
				colvarCountryName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryName);

				TableSchema.TableColumn colvarCountryAB = new TableSchema.TableColumn(schema);
				colvarCountryAB.ColumnName = "CountryAB";
				colvarCountryAB.DataType = DbType.String;
				colvarCountryAB.MaxLength = 50;
				colvarCountryAB.AutoIncrement = false;
				colvarCountryAB.IsNullable = false;
				colvarCountryAB.IsPrimaryKey = false;
				colvarCountryAB.IsForeignKey = false;
				colvarCountryAB.IsReadOnly = false;
				colvarCountryAB.DefaultSetting = @"";
				colvarCountryAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryAB);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("MC_PoliticalCountrys",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_PoliticalCountry LoadFrom(MC_PoliticalCountry item)
		{
			MC_PoliticalCountry result = new MC_PoliticalCountry();
			if (item.CountryID != default(string)) {
				result.LoadByKey(item.CountryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string CountryID {
			get { return GetColumnValue<string>(Columns.CountryID); }
			set {
				SetColumnValue(Columns.CountryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryID));
			}
		}
		[DataMember]
		public string CountryName {
			get { return GetColumnValue<string>(Columns.CountryName); }
			set {
				SetColumnValue(Columns.CountryName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryName));
			}
		}
		[DataMember]
		public string CountryAB {
			get { return GetColumnValue<string>(Columns.CountryAB); }
			set {
				SetColumnValue(Columns.CountryAB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryAB));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CountryName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CountryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CountryNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CountryABColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CountryID = @"CountryID";
			public static readonly string CountryName = @"CountryName";
			public static readonly string CountryAB = @"CountryAB";
			public static readonly string IsActive = @"IsActive";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CountryID; }
		}
		*/

		#region Foreign Collections

		private APT_AddressCollection _APT_AddressesCol;
		//Relationship: FK_APT_Address_MC_PoliticalCountrys
		public APT_AddressCollection APT_AddressesCol
		{
			get
			{
				if(_APT_AddressesCol == null) {
					_APT_AddressesCol = new APT_AddressCollection();
					_APT_AddressesCol.LoadAndCloseReader(APT_Address.Query()
						.WHERE(APT_Address.Columns.CountryId, CountryID).ExecuteReader());
				}
				return _APT_AddressesCol;
			}
		}

		private HS_ContactInformationAddressCollection _HS_ContactInformationAddressesCol;
		//Relationship: FK_HS_ContactInformationAddress_MC_PoliticalCountrys
		public HS_ContactInformationAddressCollection HS_ContactInformationAddressesCol
		{
			get
			{
				if(_HS_ContactInformationAddressesCol == null) {
					_HS_ContactInformationAddressesCol = new HS_ContactInformationAddressCollection();
					_HS_ContactInformationAddressesCol.LoadAndCloseReader(HS_ContactInformationAddress.Query()
						.WHERE(HS_ContactInformationAddress.Columns.CountryId, CountryID).ExecuteReader());
				}
				return _HS_ContactInformationAddressesCol;
			}
		}

		private HS_UnitAddressCollection _HS_UnitAddressesCol;
		//Relationship: FK_HS_UnitAddress_MC_PoliticalCountrys
		public HS_UnitAddressCollection HS_UnitAddressesCol
		{
			get
			{
				if(_HS_UnitAddressesCol == null) {
					_HS_UnitAddressesCol = new HS_UnitAddressCollection();
					_HS_UnitAddressesCol.LoadAndCloseReader(HS_UnitAddress.Query()
						.WHERE(HS_UnitAddress.Columns.CountryId, CountryID).ExecuteReader());
				}
				return _HS_UnitAddressesCol;
			}
		}

		private MC_PoliticalStateCollection _MC_PoliticalStatesCol;
		//Relationship: FK_MC_PoliticalStates_MC_PoliticalCountrys
		public MC_PoliticalStateCollection MC_PoliticalStatesCol
		{
			get
			{
				if(_MC_PoliticalStatesCol == null) {
					_MC_PoliticalStatesCol = new MC_PoliticalStateCollection();
					_MC_PoliticalStatesCol.LoadAndCloseReader(MC_PoliticalState.Query()
						.WHERE(MC_PoliticalState.Columns.CountryId, CountryID).ExecuteReader());
				}
				return _MC_PoliticalStatesCol;
			}
		}

		private RU_RecruitAddressCollection _RU_RecruitAddressesCol;
		//Relationship: FK_RU_RecruitAddresses_MC_PoliticalCountrys
		public RU_RecruitAddressCollection RU_RecruitAddressesCol
		{
			get
			{
				if(_RU_RecruitAddressesCol == null) {
					_RU_RecruitAddressesCol = new RU_RecruitAddressCollection();
					_RU_RecruitAddressesCol.LoadAndCloseReader(RU_RecruitAddress.Query()
						.WHERE(RU_RecruitAddress.Columns.CountryId, CountryID).ExecuteReader());
				}
				return _RU_RecruitAddressesCol;
			}
		}

		private RU_RecruitCollection _RU_RecruitsCol;
		//Relationship: FK_RU_Recruits_MC_PoliticalCountrys
		public RU_RecruitCollection RU_RecruitsCol
		{
			get
			{
				if(_RU_RecruitsCol == null) {
					_RU_RecruitsCol = new RU_RecruitCollection();
					_RU_RecruitsCol.LoadAndCloseReader(RU_Recruit.Query()
						.WHERE(RU_Recruit.Columns.CountryId, CountryID).ExecuteReader());
				}
				return _RU_RecruitsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_PoliticalState class.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalStateCollection : ActiveList<MC_PoliticalState, MC_PoliticalStateCollection>
	{
		public static MC_PoliticalStateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_PoliticalStateCollection result = new MC_PoliticalStateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_PoliticalState item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_PoliticalStates table.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalState : ActiveRecord<MC_PoliticalState>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_PoliticalState()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_PoliticalStates", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarStateID = new TableSchema.TableColumn(schema);
				colvarStateID.ColumnName = "StateID";
				colvarStateID.DataType = DbType.AnsiString;
				colvarStateID.MaxLength = 4;
				colvarStateID.AutoIncrement = false;
				colvarStateID.IsNullable = false;
				colvarStateID.IsPrimaryKey = true;
				colvarStateID.IsForeignKey = false;
				colvarStateID.IsReadOnly = false;
				colvarStateID.DefaultSetting = @"";
				colvarStateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateID);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = false;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = true;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"";
				colvarCountryId.ForeignKeyTableName = "MC_PoliticalCountrys";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarStateName = new TableSchema.TableColumn(schema);
				colvarStateName.ColumnName = "StateName";
				colvarStateName.DataType = DbType.String;
				colvarStateName.MaxLength = 100;
				colvarStateName.AutoIncrement = false;
				colvarStateName.IsNullable = false;
				colvarStateName.IsPrimaryKey = false;
				colvarStateName.IsForeignKey = false;
				colvarStateName.IsReadOnly = false;
				colvarStateName.DefaultSetting = @"";
				colvarStateName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateName);

				TableSchema.TableColumn colvarStateAB = new TableSchema.TableColumn(schema);
				colvarStateAB.ColumnName = "StateAB";
				colvarStateAB.DataType = DbType.AnsiStringFixedLength;
				colvarStateAB.MaxLength = 2;
				colvarStateAB.AutoIncrement = false;
				colvarStateAB.IsNullable = false;
				colvarStateAB.IsPrimaryKey = false;
				colvarStateAB.IsForeignKey = false;
				colvarStateAB.IsReadOnly = false;
				colvarStateAB.DefaultSetting = @"";
				colvarStateAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateAB);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("MC_PoliticalStates",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_PoliticalState LoadFrom(MC_PoliticalState item)
		{
			MC_PoliticalState result = new MC_PoliticalState();
			if (item.StateID != default(string)) {
				result.LoadByKey(item.StateID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string StateID {
			get { return GetColumnValue<string>(Columns.StateID); }
			set {
				SetColumnValue(Columns.StateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateID));
			}
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set {
				SetColumnValue(Columns.CountryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryId));
			}
		}
		[DataMember]
		public string StateName {
			get { return GetColumnValue<string>(Columns.StateName); }
			set {
				SetColumnValue(Columns.StateName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateName));
			}
		}
		[DataMember]
		public string StateAB {
			get { return GetColumnValue<string>(Columns.StateAB); }
			set {
				SetColumnValue(Columns.StateAB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateAB));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_PoliticalCountry _Country;
		//Relationship: FK_MC_PoliticalStates_MC_PoliticalCountrys
		public MC_PoliticalCountry Country
		{
			get
			{
				if(_Country == null) {
					_Country = MC_PoliticalCountry.FetchByID(this.CountryId);
				}
				return _Country;
			}
			set
			{
				SetColumnValue("CountryId", value.CountryID);
				_Country = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CountryId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn StateIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn StateNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn StateABColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string StateID = @"StateID";
			public static readonly string CountryId = @"CountryId";
			public static readonly string StateName = @"StateName";
			public static readonly string StateAB = @"StateAB";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return StateID; }
		}
		*/

		#region Foreign Collections

		private APT_AddressCollection _APT_AddressesCol;
		//Relationship: FK_APT_Address_MC_PoliticalStates
		public APT_AddressCollection APT_AddressesCol
		{
			get
			{
				if(_APT_AddressesCol == null) {
					_APT_AddressesCol = new APT_AddressCollection();
					_APT_AddressesCol.LoadAndCloseReader(APT_Address.Query()
						.WHERE(APT_Address.Columns.StateId, StateID).ExecuteReader());
				}
				return _APT_AddressesCol;
			}
		}

		private HS_ContactInformationAddressCollection _HS_ContactInformationAddressesCol;
		//Relationship: FK_HS_ContactInformationAddress_MC_PoliticalStates
		public HS_ContactInformationAddressCollection HS_ContactInformationAddressesCol
		{
			get
			{
				if(_HS_ContactInformationAddressesCol == null) {
					_HS_ContactInformationAddressesCol = new HS_ContactInformationAddressCollection();
					_HS_ContactInformationAddressesCol.LoadAndCloseReader(HS_ContactInformationAddress.Query()
						.WHERE(HS_ContactInformationAddress.Columns.StateId, StateID).ExecuteReader());
				}
				return _HS_ContactInformationAddressesCol;
			}
		}

		private RU_BaseTeamLocationCollection _RU_BaseTeamLocationsCol;
		//Relationship: FK_RU_BaseTeamLocations_MC_PoliticalStates
		public RU_BaseTeamLocationCollection RU_BaseTeamLocationsCol
		{
			get
			{
				if(_RU_BaseTeamLocationsCol == null) {
					_RU_BaseTeamLocationsCol = new RU_BaseTeamLocationCollection();
					_RU_BaseTeamLocationsCol.LoadAndCloseReader(RU_BaseTeamLocation.Query()
						.WHERE(RU_BaseTeamLocation.Columns.StateId, StateID).ExecuteReader());
				}
				return _RU_BaseTeamLocationsCol;
			}
		}

		private RU_RecruitAddressCollection _RU_RecruitAddressesCol;
		//Relationship: FK_RU_RecruitAddresses_MC_PoliticalStates
		public RU_RecruitAddressCollection RU_RecruitAddressesCol
		{
			get
			{
				if(_RU_RecruitAddressesCol == null) {
					_RU_RecruitAddressesCol = new RU_RecruitAddressCollection();
					_RU_RecruitAddressesCol.LoadAndCloseReader(RU_RecruitAddress.Query()
						.WHERE(RU_RecruitAddress.Columns.StateId, StateID).ExecuteReader());
				}
				return _RU_RecruitAddressesCol;
			}
		}

		private RU_RecruitCollection _RU_RecruitsCol;
		//Relationship: FK_RU_Recruits_MC_PoliticalStates
		public RU_RecruitCollection RU_RecruitsCol
		{
			get
			{
				if(_RU_RecruitsCol == null) {
					_RU_RecruitsCol = new RU_RecruitCollection();
					_RU_RecruitsCol.LoadAndCloseReader(RU_Recruit.Query()
						.WHERE(RU_Recruit.Columns.StateId, StateID).ExecuteReader());
				}
				return _RU_RecruitsCol;
			}
		}

		private RU_SiteCodeCollection _RU_SiteCodesCol;
		//Relationship: FK_RU_SiteCodes_MC_PoliticalStates
		public RU_SiteCodeCollection RU_SiteCodesCol
		{
			get
			{
				if(_RU_SiteCodesCol == null) {
					_RU_SiteCodesCol = new RU_SiteCodeCollection();
					_RU_SiteCodesCol.LoadAndCloseReader(RU_SiteCode.Query()
						.WHERE(RU_SiteCode.Columns.StateId, StateID).ExecuteReader());
				}
				return _RU_SiteCodesCol;
			}
		}

		private RU_TeamLocationCollection _RU_TeamLocationsCol;
		//Relationship: FK_RU_TeamLocations_MC_PoliticalStates
		public RU_TeamLocationCollection RU_TeamLocationsCol
		{
			get
			{
				if(_RU_TeamLocationsCol == null) {
					_RU_TeamLocationsCol = new RU_TeamLocationCollection();
					_RU_TeamLocationsCol.LoadAndCloseReader(RU_TeamLocation.Query()
						.WHERE(RU_TeamLocation.Columns.StateId, StateID).ExecuteReader());
				}
				return _RU_TeamLocationsCol;
			}
		}

		private RU_TeamLocationStateMappingCollection _RU_TeamLocationStateMappingsCol;
		//Relationship: FK_RU_TeamLocationStateMappings_MC_PoliticalStates
		public RU_TeamLocationStateMappingCollection RU_TeamLocationStateMappingsCol
		{
			get
			{
				if(_RU_TeamLocationStateMappingsCol == null) {
					_RU_TeamLocationStateMappingsCol = new RU_TeamLocationStateMappingCollection();
					_RU_TeamLocationStateMappingsCol.LoadAndCloseReader(RU_TeamLocationStateMapping.Query()
						.WHERE(RU_TeamLocationStateMapping.Columns.StateId, StateID).ExecuteReader());
				}
				return _RU_TeamLocationStateMappingsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the MC_PoliticalTimeZone class.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalTimeZoneCollection : ActiveList<MC_PoliticalTimeZone, MC_PoliticalTimeZoneCollection>
	{
		public static MC_PoliticalTimeZoneCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			MC_PoliticalTimeZoneCollection result = new MC_PoliticalTimeZoneCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (MC_PoliticalTimeZone item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the MC_PoliticalTimeZones table.
	/// </summary>
	[DataContract]
	public partial class MC_PoliticalTimeZone : ActiveRecord<MC_PoliticalTimeZone>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public MC_PoliticalTimeZone()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("MC_PoliticalTimeZones", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTimeZoneID = new TableSchema.TableColumn(schema);
				colvarTimeZoneID.ColumnName = "TimeZoneID";
				colvarTimeZoneID.DataType = DbType.Int32;
				colvarTimeZoneID.MaxLength = 0;
				colvarTimeZoneID.AutoIncrement = true;
				colvarTimeZoneID.IsNullable = false;
				colvarTimeZoneID.IsPrimaryKey = true;
				colvarTimeZoneID.IsForeignKey = false;
				colvarTimeZoneID.IsReadOnly = false;
				colvarTimeZoneID.DefaultSetting = @"";
				colvarTimeZoneID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneID);

				TableSchema.TableColumn colvarTimeZoneName = new TableSchema.TableColumn(schema);
				colvarTimeZoneName.ColumnName = "TimeZoneName";
				colvarTimeZoneName.DataType = DbType.AnsiString;
				colvarTimeZoneName.MaxLength = 50;
				colvarTimeZoneName.AutoIncrement = false;
				colvarTimeZoneName.IsNullable = false;
				colvarTimeZoneName.IsPrimaryKey = false;
				colvarTimeZoneName.IsForeignKey = false;
				colvarTimeZoneName.IsReadOnly = false;
				colvarTimeZoneName.DefaultSetting = @"";
				colvarTimeZoneName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneName);

				TableSchema.TableColumn colvarTimeZoneAB = new TableSchema.TableColumn(schema);
				colvarTimeZoneAB.ColumnName = "TimeZoneAB";
				colvarTimeZoneAB.DataType = DbType.AnsiString;
				colvarTimeZoneAB.MaxLength = 4;
				colvarTimeZoneAB.AutoIncrement = false;
				colvarTimeZoneAB.IsNullable = false;
				colvarTimeZoneAB.IsPrimaryKey = false;
				colvarTimeZoneAB.IsForeignKey = false;
				colvarTimeZoneAB.IsReadOnly = false;
				colvarTimeZoneAB.DefaultSetting = @"";
				colvarTimeZoneAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneAB);

				TableSchema.TableColumn colvarCentralTime = new TableSchema.TableColumn(schema);
				colvarCentralTime.ColumnName = "CentralTime";
				colvarCentralTime.DataType = DbType.AnsiString;
				colvarCentralTime.MaxLength = 4;
				colvarCentralTime.AutoIncrement = false;
				colvarCentralTime.IsNullable = false;
				colvarCentralTime.IsPrimaryKey = false;
				colvarCentralTime.IsForeignKey = false;
				colvarCentralTime.IsReadOnly = false;
				colvarCentralTime.DefaultSetting = @"('UTC')";
				colvarCentralTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCentralTime);

				TableSchema.TableColumn colvarHourDifference = new TableSchema.TableColumn(schema);
				colvarHourDifference.ColumnName = "HourDifference";
				colvarHourDifference.DataType = DbType.Int32;
				colvarHourDifference.MaxLength = 0;
				colvarHourDifference.AutoIncrement = false;
				colvarHourDifference.IsNullable = false;
				colvarHourDifference.IsPrimaryKey = false;
				colvarHourDifference.IsForeignKey = false;
				colvarHourDifference.IsReadOnly = false;
				colvarHourDifference.DefaultSetting = @"";
				colvarHourDifference.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHourDifference);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("MC_PoliticalTimeZones",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static MC_PoliticalTimeZone LoadFrom(MC_PoliticalTimeZone item)
		{
			MC_PoliticalTimeZone result = new MC_PoliticalTimeZone();
			if (item.TimeZoneID != default(int)) {
				result.LoadByKey(item.TimeZoneID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TimeZoneID {
			get { return GetColumnValue<int>(Columns.TimeZoneID); }
			set {
				SetColumnValue(Columns.TimeZoneID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneID));
			}
		}
		[DataMember]
		public string TimeZoneName {
			get { return GetColumnValue<string>(Columns.TimeZoneName); }
			set {
				SetColumnValue(Columns.TimeZoneName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneName));
			}
		}
		[DataMember]
		public string TimeZoneAB {
			get { return GetColumnValue<string>(Columns.TimeZoneAB); }
			set {
				SetColumnValue(Columns.TimeZoneAB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneAB));
			}
		}
		[DataMember]
		public string CentralTime {
			get { return GetColumnValue<string>(Columns.CentralTime); }
			set {
				SetColumnValue(Columns.CentralTime, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CentralTime));
			}
		}
		[DataMember]
		public int HourDifference {
			get { return GetColumnValue<int>(Columns.HourDifference); }
			set {
				SetColumnValue(Columns.HourDifference, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HourDifference));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return TimeZoneName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TimeZoneIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TimeZoneNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TimeZoneABColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CentralTimeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn HourDifferenceColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TimeZoneID = @"TimeZoneID";
			public static readonly string TimeZoneName = @"TimeZoneName";
			public static readonly string TimeZoneAB = @"TimeZoneAB";
			public static readonly string CentralTime = @"CentralTime";
			public static readonly string HourDifference = @"HourDifference";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TimeZoneID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_AccountCalculation class.
	/// </summary>
	[DataContract]
	public partial class PR_AccountCalculationCollection : ActiveList<PR_AccountCalculation, PR_AccountCalculationCollection>
	{
		public static PR_AccountCalculationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_AccountCalculationCollection result = new PR_AccountCalculationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_AccountCalculation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_AccountCalculations table.
	/// </summary>
	[DataContract]
	public partial class PR_AccountCalculation : ActiveRecord<PR_AccountCalculation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_AccountCalculation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_AccountCalculations", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCalculationID = new TableSchema.TableColumn(schema);
				colvarCalculationID.ColumnName = "CalculationID";
				colvarCalculationID.DataType = DbType.Int64;
				colvarCalculationID.MaxLength = 0;
				colvarCalculationID.AutoIncrement = true;
				colvarCalculationID.IsNullable = false;
				colvarCalculationID.IsPrimaryKey = true;
				colvarCalculationID.IsForeignKey = false;
				colvarCalculationID.IsReadOnly = false;
				colvarCalculationID.DefaultSetting = @"";
				colvarCalculationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCalculationID);

				TableSchema.TableColumn colvarPayScheduleID = new TableSchema.TableColumn(schema);
				colvarPayScheduleID.ColumnName = "PayScheduleID";
				colvarPayScheduleID.DataType = DbType.Int32;
				colvarPayScheduleID.MaxLength = 0;
				colvarPayScheduleID.AutoIncrement = false;
				colvarPayScheduleID.IsNullable = true;
				colvarPayScheduleID.IsPrimaryKey = false;
				colvarPayScheduleID.IsForeignKey = true;
				colvarPayScheduleID.IsReadOnly = false;
				colvarPayScheduleID.DefaultSetting = @"";
				colvarPayScheduleID.ForeignKeyTableName = "PR_PaySchedules";
				schema.Columns.Add(colvarPayScheduleID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarGPSalesRepID = new TableSchema.TableColumn(schema);
				colvarGPSalesRepID.ColumnName = "GPSalesRepID";
				colvarGPSalesRepID.DataType = DbType.String;
				colvarGPSalesRepID.MaxLength = 20;
				colvarGPSalesRepID.AutoIncrement = false;
				colvarGPSalesRepID.IsNullable = true;
				colvarGPSalesRepID.IsPrimaryKey = false;
				colvarGPSalesRepID.IsForeignKey = false;
				colvarGPSalesRepID.IsReadOnly = false;
				colvarGPSalesRepID.DefaultSetting = @"";
				colvarGPSalesRepID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPSalesRepID);

				TableSchema.TableColumn colvarGPTechnicianID = new TableSchema.TableColumn(schema);
				colvarGPTechnicianID.ColumnName = "GPTechnicianID";
				colvarGPTechnicianID.DataType = DbType.String;
				colvarGPTechnicianID.MaxLength = 20;
				colvarGPTechnicianID.AutoIncrement = false;
				colvarGPTechnicianID.IsNullable = true;
				colvarGPTechnicianID.IsPrimaryKey = false;
				colvarGPTechnicianID.IsForeignKey = false;
				colvarGPTechnicianID.IsReadOnly = false;
				colvarGPTechnicianID.DefaultSetting = @"";
				colvarGPTechnicianID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPTechnicianID);

				TableSchema.TableColumn colvarCreditScore = new TableSchema.TableColumn(schema);
				colvarCreditScore.ColumnName = "CreditScore";
				colvarCreditScore.DataType = DbType.Int32;
				colvarCreditScore.MaxLength = 0;
				colvarCreditScore.AutoIncrement = false;
				colvarCreditScore.IsNullable = false;
				colvarCreditScore.IsPrimaryKey = false;
				colvarCreditScore.IsForeignKey = false;
				colvarCreditScore.IsReadOnly = false;
				colvarCreditScore.DefaultSetting = @"";
				colvarCreditScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScore);

				TableSchema.TableColumn colvarHasRepFrontEndHold = new TableSchema.TableColumn(schema);
				colvarHasRepFrontEndHold.ColumnName = "HasRepFrontEndHold";
				colvarHasRepFrontEndHold.DataType = DbType.Boolean;
				colvarHasRepFrontEndHold.MaxLength = 0;
				colvarHasRepFrontEndHold.AutoIncrement = false;
				colvarHasRepFrontEndHold.IsNullable = false;
				colvarHasRepFrontEndHold.IsPrimaryKey = false;
				colvarHasRepFrontEndHold.IsForeignKey = false;
				colvarHasRepFrontEndHold.IsReadOnly = false;
				colvarHasRepFrontEndHold.DefaultSetting = @"";
				colvarHasRepFrontEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasRepFrontEndHold);

				TableSchema.TableColumn colvarHasTechFrontEndHold = new TableSchema.TableColumn(schema);
				colvarHasTechFrontEndHold.ColumnName = "HasTechFrontEndHold";
				colvarHasTechFrontEndHold.DataType = DbType.Boolean;
				colvarHasTechFrontEndHold.MaxLength = 0;
				colvarHasTechFrontEndHold.AutoIncrement = false;
				colvarHasTechFrontEndHold.IsNullable = false;
				colvarHasTechFrontEndHold.IsPrimaryKey = false;
				colvarHasTechFrontEndHold.IsForeignKey = false;
				colvarHasTechFrontEndHold.IsReadOnly = false;
				colvarHasTechFrontEndHold.DefaultSetting = @"";
				colvarHasTechFrontEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasTechFrontEndHold);

				TableSchema.TableColumn colvarIsCanceled = new TableSchema.TableColumn(schema);
				colvarIsCanceled.ColumnName = "IsCanceled";
				colvarIsCanceled.DataType = DbType.Boolean;
				colvarIsCanceled.MaxLength = 0;
				colvarIsCanceled.AutoIncrement = false;
				colvarIsCanceled.IsNullable = false;
				colvarIsCanceled.IsPrimaryKey = false;
				colvarIsCanceled.IsForeignKey = false;
				colvarIsCanceled.IsReadOnly = false;
				colvarIsCanceled.DefaultSetting = @"";
				colvarIsCanceled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCanceled);

				TableSchema.TableColumn colvarIsCellAccount = new TableSchema.TableColumn(schema);
				colvarIsCellAccount.ColumnName = "IsCellAccount";
				colvarIsCellAccount.DataType = DbType.Boolean;
				colvarIsCellAccount.MaxLength = 0;
				colvarIsCellAccount.AutoIncrement = false;
				colvarIsCellAccount.IsNullable = false;
				colvarIsCellAccount.IsPrimaryKey = false;
				colvarIsCellAccount.IsForeignKey = false;
				colvarIsCellAccount.IsReadOnly = false;
				colvarIsCellAccount.DefaultSetting = @"";
				colvarIsCellAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCellAccount);

				TableSchema.TableColumn colvarIsFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarIsFriendsAndFamily.ColumnName = "IsFriendsAndFamily";
				colvarIsFriendsAndFamily.DataType = DbType.Boolean;
				colvarIsFriendsAndFamily.MaxLength = 0;
				colvarIsFriendsAndFamily.AutoIncrement = false;
				colvarIsFriendsAndFamily.IsNullable = false;
				colvarIsFriendsAndFamily.IsPrimaryKey = false;
				colvarIsFriendsAndFamily.IsForeignKey = false;
				colvarIsFriendsAndFamily.IsReadOnly = false;
				colvarIsFriendsAndFamily.DefaultSetting = @"";
				colvarIsFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsFriendsAndFamily);

				TableSchema.TableColumn colvarHasActivationFee = new TableSchema.TableColumn(schema);
				colvarHasActivationFee.ColumnName = "HasActivationFee";
				colvarHasActivationFee.DataType = DbType.Boolean;
				colvarHasActivationFee.MaxLength = 0;
				colvarHasActivationFee.AutoIncrement = false;
				colvarHasActivationFee.IsNullable = false;
				colvarHasActivationFee.IsPrimaryKey = false;
				colvarHasActivationFee.IsForeignKey = false;
				colvarHasActivationFee.IsReadOnly = false;
				colvarHasActivationFee.DefaultSetting = @"";
				colvarHasActivationFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasActivationFee);

				TableSchema.TableColumn colvarIsAutoPay = new TableSchema.TableColumn(schema);
				colvarIsAutoPay.ColumnName = "IsAutoPay";
				colvarIsAutoPay.DataType = DbType.Boolean;
				colvarIsAutoPay.MaxLength = 0;
				colvarIsAutoPay.AutoIncrement = false;
				colvarIsAutoPay.IsNullable = false;
				colvarIsAutoPay.IsPrimaryKey = false;
				colvarIsAutoPay.IsForeignKey = false;
				colvarIsAutoPay.IsReadOnly = false;
				colvarIsAutoPay.DefaultSetting = @"";
				colvarIsAutoPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAutoPay);

				TableSchema.TableColumn colvarIsPlatinumInteractive = new TableSchema.TableColumn(schema);
				colvarIsPlatinumInteractive.ColumnName = "IsPlatinumInteractive";
				colvarIsPlatinumInteractive.DataType = DbType.Boolean;
				colvarIsPlatinumInteractive.MaxLength = 0;
				colvarIsPlatinumInteractive.AutoIncrement = false;
				colvarIsPlatinumInteractive.IsNullable = false;
				colvarIsPlatinumInteractive.IsPrimaryKey = false;
				colvarIsPlatinumInteractive.IsForeignKey = false;
				colvarIsPlatinumInteractive.IsReadOnly = false;
				colvarIsPlatinumInteractive.DefaultSetting = @"";
				colvarIsPlatinumInteractive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPlatinumInteractive);

				TableSchema.TableColumn colvarHasRaisedRMR = new TableSchema.TableColumn(schema);
				colvarHasRaisedRMR.ColumnName = "HasRaisedRMR";
				colvarHasRaisedRMR.DataType = DbType.Boolean;
				colvarHasRaisedRMR.MaxLength = 0;
				colvarHasRaisedRMR.AutoIncrement = false;
				colvarHasRaisedRMR.IsNullable = false;
				colvarHasRaisedRMR.IsPrimaryKey = false;
				colvarHasRaisedRMR.IsForeignKey = false;
				colvarHasRaisedRMR.IsReadOnly = false;
				colvarHasRaisedRMR.DefaultSetting = @"";
				colvarHasRaisedRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasRaisedRMR);

				TableSchema.TableColumn colvarIsExtendedContract = new TableSchema.TableColumn(schema);
				colvarIsExtendedContract.ColumnName = "IsExtendedContract";
				colvarIsExtendedContract.DataType = DbType.Boolean;
				colvarIsExtendedContract.MaxLength = 0;
				colvarIsExtendedContract.AutoIncrement = false;
				colvarIsExtendedContract.IsNullable = false;
				colvarIsExtendedContract.IsPrimaryKey = false;
				colvarIsExtendedContract.IsForeignKey = false;
				colvarIsExtendedContract.IsReadOnly = false;
				colvarIsExtendedContract.DefaultSetting = @"";
				colvarIsExtendedContract.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExtendedContract);

				TableSchema.TableColumn colvarIsPreSeason = new TableSchema.TableColumn(schema);
				colvarIsPreSeason.ColumnName = "IsPreSeason";
				colvarIsPreSeason.DataType = DbType.Boolean;
				colvarIsPreSeason.MaxLength = 0;
				colvarIsPreSeason.AutoIncrement = false;
				colvarIsPreSeason.IsNullable = false;
				colvarIsPreSeason.IsPrimaryKey = false;
				colvarIsPreSeason.IsForeignKey = false;
				colvarIsPreSeason.IsReadOnly = false;
				colvarIsPreSeason.DefaultSetting = @"";
				colvarIsPreSeason.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPreSeason);

				TableSchema.TableColumn colvarIsInstalled = new TableSchema.TableColumn(schema);
				colvarIsInstalled.ColumnName = "IsInstalled";
				colvarIsInstalled.DataType = DbType.Boolean;
				colvarIsInstalled.MaxLength = 0;
				colvarIsInstalled.AutoIncrement = false;
				colvarIsInstalled.IsNullable = false;
				colvarIsInstalled.IsPrimaryKey = false;
				colvarIsInstalled.IsForeignKey = false;
				colvarIsInstalled.IsReadOnly = false;
				colvarIsInstalled.DefaultSetting = @"";
				colvarIsInstalled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsInstalled);

				TableSchema.TableColumn colvarIsSubmittedToGP = new TableSchema.TableColumn(schema);
				colvarIsSubmittedToGP.ColumnName = "IsSubmittedToGP";
				colvarIsSubmittedToGP.DataType = DbType.Boolean;
				colvarIsSubmittedToGP.MaxLength = 0;
				colvarIsSubmittedToGP.AutoIncrement = false;
				colvarIsSubmittedToGP.IsNullable = false;
				colvarIsSubmittedToGP.IsPrimaryKey = false;
				colvarIsSubmittedToGP.IsForeignKey = false;
				colvarIsSubmittedToGP.IsReadOnly = false;
				colvarIsSubmittedToGP.DefaultSetting = @"";
				colvarIsSubmittedToGP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSubmittedToGP);

				TableSchema.TableColumn colvarIsPayable = new TableSchema.TableColumn(schema);
				colvarIsPayable.ColumnName = "IsPayable";
				colvarIsPayable.DataType = DbType.Boolean;
				colvarIsPayable.MaxLength = 0;
				colvarIsPayable.AutoIncrement = false;
				colvarIsPayable.IsNullable = false;
				colvarIsPayable.IsPrimaryKey = false;
				colvarIsPayable.IsForeignKey = false;
				colvarIsPayable.IsReadOnly = false;
				colvarIsPayable.DefaultSetting = @"";
				colvarIsPayable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPayable);

				TableSchema.TableColumn colvarCommission = new TableSchema.TableColumn(schema);
				colvarCommission.ColumnName = "Commission";
				colvarCommission.DataType = DbType.Currency;
				colvarCommission.MaxLength = 0;
				colvarCommission.AutoIncrement = false;
				colvarCommission.IsNullable = false;
				colvarCommission.IsPrimaryKey = false;
				colvarCommission.IsForeignKey = false;
				colvarCommission.IsReadOnly = false;
				colvarCommission.DefaultSetting = @"";
				colvarCommission.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommission);

				TableSchema.TableColumn colvarSalesBonus = new TableSchema.TableColumn(schema);
				colvarSalesBonus.ColumnName = "SalesBonus";
				colvarSalesBonus.DataType = DbType.Currency;
				colvarSalesBonus.MaxLength = 0;
				colvarSalesBonus.AutoIncrement = false;
				colvarSalesBonus.IsNullable = false;
				colvarSalesBonus.IsPrimaryKey = false;
				colvarSalesBonus.IsForeignKey = false;
				colvarSalesBonus.IsReadOnly = false;
				colvarSalesBonus.DefaultSetting = @"";
				colvarSalesBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesBonus);

				TableSchema.TableColumn colvarSalesDeduction = new TableSchema.TableColumn(schema);
				colvarSalesDeduction.ColumnName = "SalesDeduction";
				colvarSalesDeduction.DataType = DbType.Currency;
				colvarSalesDeduction.MaxLength = 0;
				colvarSalesDeduction.AutoIncrement = false;
				colvarSalesDeduction.IsNullable = false;
				colvarSalesDeduction.IsPrimaryKey = false;
				colvarSalesDeduction.IsForeignKey = false;
				colvarSalesDeduction.IsReadOnly = false;
				colvarSalesDeduction.DefaultSetting = @"((0))";
				colvarSalesDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesDeduction);

				TableSchema.TableColumn colvarActivationDeduction = new TableSchema.TableColumn(schema);
				colvarActivationDeduction.ColumnName = "ActivationDeduction";
				colvarActivationDeduction.DataType = DbType.Currency;
				colvarActivationDeduction.MaxLength = 0;
				colvarActivationDeduction.AutoIncrement = false;
				colvarActivationDeduction.IsNullable = false;
				colvarActivationDeduction.IsPrimaryKey = false;
				colvarActivationDeduction.IsForeignKey = false;
				colvarActivationDeduction.IsReadOnly = false;
				colvarActivationDeduction.DefaultSetting = @"";
				colvarActivationDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationDeduction);

				TableSchema.TableColumn colvarInstallPay = new TableSchema.TableColumn(schema);
				colvarInstallPay.ColumnName = "InstallPay";
				colvarInstallPay.DataType = DbType.Currency;
				colvarInstallPay.MaxLength = 0;
				colvarInstallPay.AutoIncrement = false;
				colvarInstallPay.IsNullable = false;
				colvarInstallPay.IsPrimaryKey = false;
				colvarInstallPay.IsForeignKey = false;
				colvarInstallPay.IsReadOnly = false;
				colvarInstallPay.DefaultSetting = @"";
				colvarInstallPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallPay);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_AccountCalculations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_AccountCalculation LoadFrom(PR_AccountCalculation item)
		{
			PR_AccountCalculation result = new PR_AccountCalculation();
			if (item.CalculationID != default(long)) {
				result.LoadByKey(item.CalculationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long CalculationID {
			get { return GetColumnValue<long>(Columns.CalculationID); }
			set {
				SetColumnValue(Columns.CalculationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CalculationID));
			}
		}
		[DataMember]
		public int? PayScheduleID {
			get { return GetColumnValue<int?>(Columns.PayScheduleID); }
			set {
				SetColumnValue(Columns.PayScheduleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScheduleID));
			}
		}
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public string GPSalesRepID {
			get { return GetColumnValue<string>(Columns.GPSalesRepID); }
			set {
				SetColumnValue(Columns.GPSalesRepID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPSalesRepID));
			}
		}
		[DataMember]
		public string GPTechnicianID {
			get { return GetColumnValue<string>(Columns.GPTechnicianID); }
			set {
				SetColumnValue(Columns.GPTechnicianID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPTechnicianID));
			}
		}
		[DataMember]
		public int CreditScore {
			get { return GetColumnValue<int>(Columns.CreditScore); }
			set {
				SetColumnValue(Columns.CreditScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScore));
			}
		}
		[DataMember]
		public bool HasRepFrontEndHold {
			get { return GetColumnValue<bool>(Columns.HasRepFrontEndHold); }
			set {
				SetColumnValue(Columns.HasRepFrontEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasRepFrontEndHold));
			}
		}
		[DataMember]
		public bool HasTechFrontEndHold {
			get { return GetColumnValue<bool>(Columns.HasTechFrontEndHold); }
			set {
				SetColumnValue(Columns.HasTechFrontEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasTechFrontEndHold));
			}
		}
		[DataMember]
		public bool IsCanceled {
			get { return GetColumnValue<bool>(Columns.IsCanceled); }
			set {
				SetColumnValue(Columns.IsCanceled, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCanceled));
			}
		}
		[DataMember]
		public bool IsCellAccount {
			get { return GetColumnValue<bool>(Columns.IsCellAccount); }
			set {
				SetColumnValue(Columns.IsCellAccount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCellAccount));
			}
		}
		[DataMember]
		public bool IsFriendsAndFamily {
			get { return GetColumnValue<bool>(Columns.IsFriendsAndFamily); }
			set {
				SetColumnValue(Columns.IsFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsFriendsAndFamily));
			}
		}
		[DataMember]
		public bool HasActivationFee {
			get { return GetColumnValue<bool>(Columns.HasActivationFee); }
			set {
				SetColumnValue(Columns.HasActivationFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasActivationFee));
			}
		}
		[DataMember]
		public bool IsAutoPay {
			get { return GetColumnValue<bool>(Columns.IsAutoPay); }
			set {
				SetColumnValue(Columns.IsAutoPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAutoPay));
			}
		}
		[DataMember]
		public bool IsPlatinumInteractive {
			get { return GetColumnValue<bool>(Columns.IsPlatinumInteractive); }
			set {
				SetColumnValue(Columns.IsPlatinumInteractive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPlatinumInteractive));
			}
		}
		[DataMember]
		public bool HasRaisedRMR {
			get { return GetColumnValue<bool>(Columns.HasRaisedRMR); }
			set {
				SetColumnValue(Columns.HasRaisedRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasRaisedRMR));
			}
		}
		[DataMember]
		public bool IsExtendedContract {
			get { return GetColumnValue<bool>(Columns.IsExtendedContract); }
			set {
				SetColumnValue(Columns.IsExtendedContract, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsExtendedContract));
			}
		}
		[DataMember]
		public bool IsPreSeason {
			get { return GetColumnValue<bool>(Columns.IsPreSeason); }
			set {
				SetColumnValue(Columns.IsPreSeason, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPreSeason));
			}
		}
		[DataMember]
		public bool IsInstalled {
			get { return GetColumnValue<bool>(Columns.IsInstalled); }
			set {
				SetColumnValue(Columns.IsInstalled, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsInstalled));
			}
		}
		[DataMember]
		public bool IsSubmittedToGP {
			get { return GetColumnValue<bool>(Columns.IsSubmittedToGP); }
			set {
				SetColumnValue(Columns.IsSubmittedToGP, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSubmittedToGP));
			}
		}
		[DataMember]
		public bool IsPayable {
			get { return GetColumnValue<bool>(Columns.IsPayable); }
			set {
				SetColumnValue(Columns.IsPayable, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPayable));
			}
		}
		[DataMember]
		public decimal Commission {
			get { return GetColumnValue<decimal>(Columns.Commission); }
			set {
				SetColumnValue(Columns.Commission, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Commission));
			}
		}
		[DataMember]
		public decimal SalesBonus {
			get { return GetColumnValue<decimal>(Columns.SalesBonus); }
			set {
				SetColumnValue(Columns.SalesBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesBonus));
			}
		}
		[DataMember]
		public decimal SalesDeduction {
			get { return GetColumnValue<decimal>(Columns.SalesDeduction); }
			set {
				SetColumnValue(Columns.SalesDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesDeduction));
			}
		}
		[DataMember]
		public decimal ActivationDeduction {
			get { return GetColumnValue<decimal>(Columns.ActivationDeduction); }
			set {
				SetColumnValue(Columns.ActivationDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationDeduction));
			}
		}
		[DataMember]
		public decimal InstallPay {
			get { return GetColumnValue<decimal>(Columns.InstallPay); }
			set {
				SetColumnValue(Columns.InstallPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InstallPay));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_PaySchedule _PaySchedule;
		//Relationship: FK_PR_AccountCalculations_PR_AccountCalculations
		public PR_PaySchedule PaySchedule
		{
			get
			{
				if(_PaySchedule == null) {
					_PaySchedule = PR_PaySchedule.FetchByID(this.PayScheduleID);
				}
				return _PaySchedule;
			}
			set
			{
				SetColumnValue("PayScheduleID", value.PayScheduleID);
				_PaySchedule = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CalculationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CalculationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PayScheduleIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GPSalesRepIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPTechnicianIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreditScoreColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn HasRepFrontEndHoldColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn HasTechFrontEndHoldColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsCanceledColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsCellAccountColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsFriendsAndFamilyColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn HasActivationFeeColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsAutoPayColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsPlatinumInteractiveColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn HasRaisedRMRColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsExtendedContractColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsPreSeasonColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsInstalledColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn IsSubmittedToGPColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsPayableColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn CommissionColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn SalesBonusColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn SalesDeductionColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn ActivationDeductionColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn InstallPayColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[25]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CalculationID = @"CalculationID";
			public static readonly string PayScheduleID = @"PayScheduleID";
			public static readonly string AccountID = @"AccountID";
			public static readonly string GPSalesRepID = @"GPSalesRepID";
			public static readonly string GPTechnicianID = @"GPTechnicianID";
			public static readonly string CreditScore = @"CreditScore";
			public static readonly string HasRepFrontEndHold = @"HasRepFrontEndHold";
			public static readonly string HasTechFrontEndHold = @"HasTechFrontEndHold";
			public static readonly string IsCanceled = @"IsCanceled";
			public static readonly string IsCellAccount = @"IsCellAccount";
			public static readonly string IsFriendsAndFamily = @"IsFriendsAndFamily";
			public static readonly string HasActivationFee = @"HasActivationFee";
			public static readonly string IsAutoPay = @"IsAutoPay";
			public static readonly string IsPlatinumInteractive = @"IsPlatinumInteractive";
			public static readonly string HasRaisedRMR = @"HasRaisedRMR";
			public static readonly string IsExtendedContract = @"IsExtendedContract";
			public static readonly string IsPreSeason = @"IsPreSeason";
			public static readonly string IsInstalled = @"IsInstalled";
			public static readonly string IsSubmittedToGP = @"IsSubmittedToGP";
			public static readonly string IsPayable = @"IsPayable";
			public static readonly string Commission = @"Commission";
			public static readonly string SalesBonus = @"SalesBonus";
			public static readonly string SalesDeduction = @"SalesDeduction";
			public static readonly string ActivationDeduction = @"ActivationDeduction";
			public static readonly string InstallPay = @"InstallPay";
			public static readonly string CreatedByDate = @"CreatedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CalculationID; }
		}
		*/

		#region Foreign Collections

		private PR_TransactionCollection _PR_TransactionsCol;
		//Relationship: FK_PR_Transactions_PR_AccountCalculations
		public PR_TransactionCollection PR_TransactionsCol
		{
			get
			{
				if(_PR_TransactionsCol == null) {
					_PR_TransactionsCol = new PR_TransactionCollection();
					_PR_TransactionsCol.LoadAndCloseReader(PR_Transaction.Query()
						.WHERE(PR_Transaction.Columns.CalculationID, CalculationID).ExecuteReader());
				}
				return _PR_TransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_AccountStateException class.
	/// </summary>
	[DataContract]
	public partial class PR_AccountStateExceptionCollection : ActiveList<PR_AccountStateException, PR_AccountStateExceptionCollection>
	{
		public static PR_AccountStateExceptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_AccountStateExceptionCollection result = new PR_AccountStateExceptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_AccountStateException item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_AccountStateExceptions table.
	/// </summary>
	[DataContract]
	public partial class PR_AccountStateException : ActiveRecord<PR_AccountStateException>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_AccountStateException()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_AccountStateExceptions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountStateExceptionID = new TableSchema.TableColumn(schema);
				colvarAccountStateExceptionID.ColumnName = "AccountStateExceptionID";
				colvarAccountStateExceptionID.DataType = DbType.Int32;
				colvarAccountStateExceptionID.MaxLength = 0;
				colvarAccountStateExceptionID.AutoIncrement = true;
				colvarAccountStateExceptionID.IsNullable = false;
				colvarAccountStateExceptionID.IsPrimaryKey = true;
				colvarAccountStateExceptionID.IsForeignKey = false;
				colvarAccountStateExceptionID.IsReadOnly = false;
				colvarAccountStateExceptionID.DefaultSetting = @"";
				colvarAccountStateExceptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountStateExceptionID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarCreditedTeamLocationID = new TableSchema.TableColumn(schema);
				colvarCreditedTeamLocationID.ColumnName = "CreditedTeamLocationID";
				colvarCreditedTeamLocationID.DataType = DbType.Int32;
				colvarCreditedTeamLocationID.MaxLength = 0;
				colvarCreditedTeamLocationID.AutoIncrement = false;
				colvarCreditedTeamLocationID.IsNullable = true;
				colvarCreditedTeamLocationID.IsPrimaryKey = false;
				colvarCreditedTeamLocationID.IsForeignKey = true;
				colvarCreditedTeamLocationID.IsReadOnly = false;
				colvarCreditedTeamLocationID.DefaultSetting = @"";
				colvarCreditedTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarCreditedTeamLocationID);

				TableSchema.TableColumn colvarCreditScore = new TableSchema.TableColumn(schema);
				colvarCreditScore.ColumnName = "CreditScore";
				colvarCreditScore.DataType = DbType.Int32;
				colvarCreditScore.MaxLength = 0;
				colvarCreditScore.AutoIncrement = false;
				colvarCreditScore.IsNullable = true;
				colvarCreditScore.IsPrimaryKey = false;
				colvarCreditScore.IsForeignKey = false;
				colvarCreditScore.IsReadOnly = false;
				colvarCreditScore.DefaultSetting = @"";
				colvarCreditScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScore);

				TableSchema.TableColumn colvarHasRepFrontEndHold = new TableSchema.TableColumn(schema);
				colvarHasRepFrontEndHold.ColumnName = "HasRepFrontEndHold";
				colvarHasRepFrontEndHold.DataType = DbType.Boolean;
				colvarHasRepFrontEndHold.MaxLength = 0;
				colvarHasRepFrontEndHold.AutoIncrement = false;
				colvarHasRepFrontEndHold.IsNullable = true;
				colvarHasRepFrontEndHold.IsPrimaryKey = false;
				colvarHasRepFrontEndHold.IsForeignKey = false;
				colvarHasRepFrontEndHold.IsReadOnly = false;
				colvarHasRepFrontEndHold.DefaultSetting = @"";
				colvarHasRepFrontEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasRepFrontEndHold);

				TableSchema.TableColumn colvarHasRepBackEndHold = new TableSchema.TableColumn(schema);
				colvarHasRepBackEndHold.ColumnName = "HasRepBackEndHold";
				colvarHasRepBackEndHold.DataType = DbType.Boolean;
				colvarHasRepBackEndHold.MaxLength = 0;
				colvarHasRepBackEndHold.AutoIncrement = false;
				colvarHasRepBackEndHold.IsNullable = true;
				colvarHasRepBackEndHold.IsPrimaryKey = false;
				colvarHasRepBackEndHold.IsForeignKey = false;
				colvarHasRepBackEndHold.IsReadOnly = false;
				colvarHasRepBackEndHold.DefaultSetting = @"";
				colvarHasRepBackEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasRepBackEndHold);

				TableSchema.TableColumn colvarHasTechFrontEndHold = new TableSchema.TableColumn(schema);
				colvarHasTechFrontEndHold.ColumnName = "HasTechFrontEndHold";
				colvarHasTechFrontEndHold.DataType = DbType.Boolean;
				colvarHasTechFrontEndHold.MaxLength = 0;
				colvarHasTechFrontEndHold.AutoIncrement = false;
				colvarHasTechFrontEndHold.IsNullable = true;
				colvarHasTechFrontEndHold.IsPrimaryKey = false;
				colvarHasTechFrontEndHold.IsForeignKey = false;
				colvarHasTechFrontEndHold.IsReadOnly = false;
				colvarHasTechFrontEndHold.DefaultSetting = @"";
				colvarHasTechFrontEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasTechFrontEndHold);

				TableSchema.TableColumn colvarHasTechBackEndHold = new TableSchema.TableColumn(schema);
				colvarHasTechBackEndHold.ColumnName = "HasTechBackEndHold";
				colvarHasTechBackEndHold.DataType = DbType.Boolean;
				colvarHasTechBackEndHold.MaxLength = 0;
				colvarHasTechBackEndHold.AutoIncrement = false;
				colvarHasTechBackEndHold.IsNullable = true;
				colvarHasTechBackEndHold.IsPrimaryKey = false;
				colvarHasTechBackEndHold.IsForeignKey = false;
				colvarHasTechBackEndHold.IsReadOnly = false;
				colvarHasTechBackEndHold.DefaultSetting = @"";
				colvarHasTechBackEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasTechBackEndHold);

				TableSchema.TableColumn colvarIsCanceled = new TableSchema.TableColumn(schema);
				colvarIsCanceled.ColumnName = "IsCanceled";
				colvarIsCanceled.DataType = DbType.Boolean;
				colvarIsCanceled.MaxLength = 0;
				colvarIsCanceled.AutoIncrement = false;
				colvarIsCanceled.IsNullable = true;
				colvarIsCanceled.IsPrimaryKey = false;
				colvarIsCanceled.IsForeignKey = false;
				colvarIsCanceled.IsReadOnly = false;
				colvarIsCanceled.DefaultSetting = @"";
				colvarIsCanceled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCanceled);

				TableSchema.TableColumn colvarIsCellAccount = new TableSchema.TableColumn(schema);
				colvarIsCellAccount.ColumnName = "IsCellAccount";
				colvarIsCellAccount.DataType = DbType.Boolean;
				colvarIsCellAccount.MaxLength = 0;
				colvarIsCellAccount.AutoIncrement = false;
				colvarIsCellAccount.IsNullable = true;
				colvarIsCellAccount.IsPrimaryKey = false;
				colvarIsCellAccount.IsForeignKey = false;
				colvarIsCellAccount.IsReadOnly = false;
				colvarIsCellAccount.DefaultSetting = @"";
				colvarIsCellAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCellAccount);

				TableSchema.TableColumn colvarIsFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarIsFriendsAndFamily.ColumnName = "IsFriendsAndFamily";
				colvarIsFriendsAndFamily.DataType = DbType.Boolean;
				colvarIsFriendsAndFamily.MaxLength = 0;
				colvarIsFriendsAndFamily.AutoIncrement = false;
				colvarIsFriendsAndFamily.IsNullable = true;
				colvarIsFriendsAndFamily.IsPrimaryKey = false;
				colvarIsFriendsAndFamily.IsForeignKey = false;
				colvarIsFriendsAndFamily.IsReadOnly = false;
				colvarIsFriendsAndFamily.DefaultSetting = @"";
				colvarIsFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsFriendsAndFamily);

				TableSchema.TableColumn colvarIsActivationWaive = new TableSchema.TableColumn(schema);
				colvarIsActivationWaive.ColumnName = "IsActivationWaive";
				colvarIsActivationWaive.DataType = DbType.Boolean;
				colvarIsActivationWaive.MaxLength = 0;
				colvarIsActivationWaive.AutoIncrement = false;
				colvarIsActivationWaive.IsNullable = true;
				colvarIsActivationWaive.IsPrimaryKey = false;
				colvarIsActivationWaive.IsForeignKey = false;
				colvarIsActivationWaive.IsReadOnly = false;
				colvarIsActivationWaive.DefaultSetting = @"";
				colvarIsActivationWaive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActivationWaive);

				TableSchema.TableColumn colvarActivationFee = new TableSchema.TableColumn(schema);
				colvarActivationFee.ColumnName = "ActivationFee";
				colvarActivationFee.DataType = DbType.Currency;
				colvarActivationFee.MaxLength = 0;
				colvarActivationFee.AutoIncrement = false;
				colvarActivationFee.IsNullable = true;
				colvarActivationFee.IsPrimaryKey = false;
				colvarActivationFee.IsForeignKey = false;
				colvarActivationFee.IsReadOnly = false;
				colvarActivationFee.DefaultSetting = @"";
				colvarActivationFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationFee);

				TableSchema.TableColumn colvarIsActivationUpFront = new TableSchema.TableColumn(schema);
				colvarIsActivationUpFront.ColumnName = "IsActivationUpFront";
				colvarIsActivationUpFront.DataType = DbType.Boolean;
				colvarIsActivationUpFront.MaxLength = 0;
				colvarIsActivationUpFront.AutoIncrement = false;
				colvarIsActivationUpFront.IsNullable = true;
				colvarIsActivationUpFront.IsPrimaryKey = false;
				colvarIsActivationUpFront.IsForeignKey = false;
				colvarIsActivationUpFront.IsReadOnly = false;
				colvarIsActivationUpFront.DefaultSetting = @"";
				colvarIsActivationUpFront.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActivationUpFront);

				TableSchema.TableColumn colvarIsAutoPay = new TableSchema.TableColumn(schema);
				colvarIsAutoPay.ColumnName = "IsAutoPay";
				colvarIsAutoPay.DataType = DbType.Boolean;
				colvarIsAutoPay.MaxLength = 0;
				colvarIsAutoPay.AutoIncrement = false;
				colvarIsAutoPay.IsNullable = true;
				colvarIsAutoPay.IsPrimaryKey = false;
				colvarIsAutoPay.IsForeignKey = false;
				colvarIsAutoPay.IsReadOnly = false;
				colvarIsAutoPay.DefaultSetting = @"";
				colvarIsAutoPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAutoPay);

				TableSchema.TableColumn colvarIsPlatinumInteractive = new TableSchema.TableColumn(schema);
				colvarIsPlatinumInteractive.ColumnName = "IsPlatinumInteractive";
				colvarIsPlatinumInteractive.DataType = DbType.Boolean;
				colvarIsPlatinumInteractive.MaxLength = 0;
				colvarIsPlatinumInteractive.AutoIncrement = false;
				colvarIsPlatinumInteractive.IsNullable = true;
				colvarIsPlatinumInteractive.IsPrimaryKey = false;
				colvarIsPlatinumInteractive.IsForeignKey = false;
				colvarIsPlatinumInteractive.IsReadOnly = false;
				colvarIsPlatinumInteractive.DefaultSetting = @"";
				colvarIsPlatinumInteractive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPlatinumInteractive);

				TableSchema.TableColumn colvarIsTwoWayCell = new TableSchema.TableColumn(schema);
				colvarIsTwoWayCell.ColumnName = "IsTwoWayCell";
				colvarIsTwoWayCell.DataType = DbType.Boolean;
				colvarIsTwoWayCell.MaxLength = 0;
				colvarIsTwoWayCell.AutoIncrement = false;
				colvarIsTwoWayCell.IsNullable = true;
				colvarIsTwoWayCell.IsPrimaryKey = false;
				colvarIsTwoWayCell.IsForeignKey = false;
				colvarIsTwoWayCell.IsReadOnly = false;
				colvarIsTwoWayCell.DefaultSetting = @"";
				colvarIsTwoWayCell.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTwoWayCell);

				TableSchema.TableColumn colvarIsExtendedContract = new TableSchema.TableColumn(schema);
				colvarIsExtendedContract.ColumnName = "IsExtendedContract";
				colvarIsExtendedContract.DataType = DbType.Boolean;
				colvarIsExtendedContract.MaxLength = 0;
				colvarIsExtendedContract.AutoIncrement = false;
				colvarIsExtendedContract.IsNullable = true;
				colvarIsExtendedContract.IsPrimaryKey = false;
				colvarIsExtendedContract.IsForeignKey = false;
				colvarIsExtendedContract.IsReadOnly = false;
				colvarIsExtendedContract.DefaultSetting = @"";
				colvarIsExtendedContract.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExtendedContract);

				TableSchema.TableColumn colvarIsShortenedContract = new TableSchema.TableColumn(schema);
				colvarIsShortenedContract.ColumnName = "IsShortenedContract";
				colvarIsShortenedContract.DataType = DbType.Boolean;
				colvarIsShortenedContract.MaxLength = 0;
				colvarIsShortenedContract.AutoIncrement = false;
				colvarIsShortenedContract.IsNullable = true;
				colvarIsShortenedContract.IsPrimaryKey = false;
				colvarIsShortenedContract.IsForeignKey = false;
				colvarIsShortenedContract.IsReadOnly = false;
				colvarIsShortenedContract.DefaultSetting = @"";
				colvarIsShortenedContract.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsShortenedContract);

				TableSchema.TableColumn colvarIsInstalled = new TableSchema.TableColumn(schema);
				colvarIsInstalled.ColumnName = "IsInstalled";
				colvarIsInstalled.DataType = DbType.Boolean;
				colvarIsInstalled.MaxLength = 0;
				colvarIsInstalled.AutoIncrement = false;
				colvarIsInstalled.IsNullable = true;
				colvarIsInstalled.IsPrimaryKey = false;
				colvarIsInstalled.IsForeignKey = false;
				colvarIsInstalled.IsReadOnly = false;
				colvarIsInstalled.DefaultSetting = @"";
				colvarIsInstalled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsInstalled);

				TableSchema.TableColumn colvarIsSubmittedToGP = new TableSchema.TableColumn(schema);
				colvarIsSubmittedToGP.ColumnName = "IsSubmittedToGP";
				colvarIsSubmittedToGP.DataType = DbType.Boolean;
				colvarIsSubmittedToGP.MaxLength = 0;
				colvarIsSubmittedToGP.AutoIncrement = false;
				colvarIsSubmittedToGP.IsNullable = true;
				colvarIsSubmittedToGP.IsPrimaryKey = false;
				colvarIsSubmittedToGP.IsForeignKey = false;
				colvarIsSubmittedToGP.IsReadOnly = false;
				colvarIsSubmittedToGP.DefaultSetting = @"";
				colvarIsSubmittedToGP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSubmittedToGP);

				TableSchema.TableColumn colvarIsDelinquent = new TableSchema.TableColumn(schema);
				colvarIsDelinquent.ColumnName = "IsDelinquent";
				colvarIsDelinquent.DataType = DbType.Boolean;
				colvarIsDelinquent.MaxLength = 0;
				colvarIsDelinquent.AutoIncrement = false;
				colvarIsDelinquent.IsNullable = true;
				colvarIsDelinquent.IsPrimaryKey = false;
				colvarIsDelinquent.IsForeignKey = false;
				colvarIsDelinquent.IsReadOnly = false;
				colvarIsDelinquent.DefaultSetting = @"";
				colvarIsDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDelinquent);

				TableSchema.TableColumn colvarIsSaved = new TableSchema.TableColumn(schema);
				colvarIsSaved.ColumnName = "IsSaved";
				colvarIsSaved.DataType = DbType.Boolean;
				colvarIsSaved.MaxLength = 0;
				colvarIsSaved.AutoIncrement = false;
				colvarIsSaved.IsNullable = true;
				colvarIsSaved.IsPrimaryKey = false;
				colvarIsSaved.IsForeignKey = false;
				colvarIsSaved.IsReadOnly = false;
				colvarIsSaved.DefaultSetting = @"";
				colvarIsSaved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSaved);

				TableSchema.TableColumn colvarIsMissingInvoiceFee = new TableSchema.TableColumn(schema);
				colvarIsMissingInvoiceFee.ColumnName = "IsMissingInvoiceFee";
				colvarIsMissingInvoiceFee.DataType = DbType.Boolean;
				colvarIsMissingInvoiceFee.MaxLength = 0;
				colvarIsMissingInvoiceFee.AutoIncrement = false;
				colvarIsMissingInvoiceFee.IsNullable = true;
				colvarIsMissingInvoiceFee.IsPrimaryKey = false;
				colvarIsMissingInvoiceFee.IsForeignKey = false;
				colvarIsMissingInvoiceFee.IsReadOnly = false;
				colvarIsMissingInvoiceFee.DefaultSetting = @"";
				colvarIsMissingInvoiceFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMissingInvoiceFee);

				TableSchema.TableColumn colvarIsCommercial = new TableSchema.TableColumn(schema);
				colvarIsCommercial.ColumnName = "IsCommercial";
				colvarIsCommercial.DataType = DbType.Boolean;
				colvarIsCommercial.MaxLength = 0;
				colvarIsCommercial.AutoIncrement = false;
				colvarIsCommercial.IsNullable = true;
				colvarIsCommercial.IsPrimaryKey = false;
				colvarIsCommercial.IsForeignKey = false;
				colvarIsCommercial.IsReadOnly = false;
				colvarIsCommercial.DefaultSetting = @"";
				colvarIsCommercial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCommercial);

				TableSchema.TableColumn colvarHasServiceTicket = new TableSchema.TableColumn(schema);
				colvarHasServiceTicket.ColumnName = "HasServiceTicket";
				colvarHasServiceTicket.DataType = DbType.Boolean;
				colvarHasServiceTicket.MaxLength = 0;
				colvarHasServiceTicket.AutoIncrement = false;
				colvarHasServiceTicket.IsNullable = true;
				colvarHasServiceTicket.IsPrimaryKey = false;
				colvarHasServiceTicket.IsForeignKey = false;
				colvarHasServiceTicket.IsReadOnly = false;
				colvarHasServiceTicket.DefaultSetting = @"";
				colvarHasServiceTicket.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasServiceTicket);

				TableSchema.TableColumn colvarRMR = new TableSchema.TableColumn(schema);
				colvarRMR.ColumnName = "RMR";
				colvarRMR.DataType = DbType.Currency;
				colvarRMR.MaxLength = 0;
				colvarRMR.AutoIncrement = false;
				colvarRMR.IsNullable = true;
				colvarRMR.IsPrimaryKey = false;
				colvarRMR.IsForeignKey = false;
				colvarRMR.IsReadOnly = false;
				colvarRMR.DefaultSetting = @"";
				colvarRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRMR);

				TableSchema.TableColumn colvarFullPriceRMR = new TableSchema.TableColumn(schema);
				colvarFullPriceRMR.ColumnName = "FullPriceRMR";
				colvarFullPriceRMR.DataType = DbType.Currency;
				colvarFullPriceRMR.MaxLength = 0;
				colvarFullPriceRMR.AutoIncrement = false;
				colvarFullPriceRMR.IsNullable = true;
				colvarFullPriceRMR.IsPrimaryKey = false;
				colvarFullPriceRMR.IsForeignKey = false;
				colvarFullPriceRMR.IsReadOnly = false;
				colvarFullPriceRMR.DefaultSetting = @"";
				colvarFullPriceRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullPriceRMR);

				TableSchema.TableColumn colvarBaseRMR = new TableSchema.TableColumn(schema);
				colvarBaseRMR.ColumnName = "BaseRMR";
				colvarBaseRMR.DataType = DbType.Currency;
				colvarBaseRMR.MaxLength = 0;
				colvarBaseRMR.AutoIncrement = false;
				colvarBaseRMR.IsNullable = true;
				colvarBaseRMR.IsPrimaryKey = false;
				colvarBaseRMR.IsForeignKey = false;
				colvarBaseRMR.IsReadOnly = false;
				colvarBaseRMR.DefaultSetting = @"";
				colvarBaseRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaseRMR);

				TableSchema.TableColumn colvarPointBank = new TableSchema.TableColumn(schema);
				colvarPointBank.ColumnName = "PointBank";
				colvarPointBank.DataType = DbType.Decimal;
				colvarPointBank.MaxLength = 0;
				colvarPointBank.AutoIncrement = false;
				colvarPointBank.IsNullable = true;
				colvarPointBank.IsPrimaryKey = false;
				colvarPointBank.IsForeignKey = false;
				colvarPointBank.IsReadOnly = false;
				colvarPointBank.DefaultSetting = @"";
				colvarPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPointBank);

				TableSchema.TableColumn colvarInstallDate = new TableSchema.TableColumn(schema);
				colvarInstallDate.ColumnName = "InstallDate";
				colvarInstallDate.DataType = DbType.DateTime;
				colvarInstallDate.MaxLength = 0;
				colvarInstallDate.AutoIncrement = false;
				colvarInstallDate.IsNullable = true;
				colvarInstallDate.IsPrimaryKey = false;
				colvarInstallDate.IsForeignKey = false;
				colvarInstallDate.IsReadOnly = false;
				colvarInstallDate.DefaultSetting = @"";
				colvarInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallDate);

				TableSchema.TableColumn colvarTechSelfInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarTechSelfInspectionPercentage.ColumnName = "TechSelfInspectionPercentage";
				colvarTechSelfInspectionPercentage.DataType = DbType.Double;
				colvarTechSelfInspectionPercentage.MaxLength = 0;
				colvarTechSelfInspectionPercentage.AutoIncrement = false;
				colvarTechSelfInspectionPercentage.IsNullable = true;
				colvarTechSelfInspectionPercentage.IsPrimaryKey = false;
				colvarTechSelfInspectionPercentage.IsForeignKey = false;
				colvarTechSelfInspectionPercentage.IsReadOnly = false;
				colvarTechSelfInspectionPercentage.DefaultSetting = @"";
				colvarTechSelfInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechSelfInspectionPercentage);

				TableSchema.TableColumn colvarTechManagerInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarTechManagerInspectionPercentage.ColumnName = "TechManagerInspectionPercentage";
				colvarTechManagerInspectionPercentage.DataType = DbType.Double;
				colvarTechManagerInspectionPercentage.MaxLength = 0;
				colvarTechManagerInspectionPercentage.AutoIncrement = false;
				colvarTechManagerInspectionPercentage.IsNullable = true;
				colvarTechManagerInspectionPercentage.IsPrimaryKey = false;
				colvarTechManagerInspectionPercentage.IsForeignKey = false;
				colvarTechManagerInspectionPercentage.IsReadOnly = false;
				colvarTechManagerInspectionPercentage.DefaultSetting = @"";
				colvarTechManagerInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechManagerInspectionPercentage);

				TableSchema.TableColumn colvarTechRegionalInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarTechRegionalInspectionPercentage.ColumnName = "TechRegionalInspectionPercentage";
				colvarTechRegionalInspectionPercentage.DataType = DbType.Double;
				colvarTechRegionalInspectionPercentage.MaxLength = 0;
				colvarTechRegionalInspectionPercentage.AutoIncrement = false;
				colvarTechRegionalInspectionPercentage.IsNullable = true;
				colvarTechRegionalInspectionPercentage.IsPrimaryKey = false;
				colvarTechRegionalInspectionPercentage.IsForeignKey = false;
				colvarTechRegionalInspectionPercentage.IsReadOnly = false;
				colvarTechRegionalInspectionPercentage.DefaultSetting = @"";
				colvarTechRegionalInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechRegionalInspectionPercentage);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = 255;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = false;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_AccountStateExceptions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_AccountStateException LoadFrom(PR_AccountStateException item)
		{
			PR_AccountStateException result = new PR_AccountStateException();
			if (item.AccountStateExceptionID != default(int)) {
				result.LoadByKey(item.AccountStateExceptionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountStateExceptionID {
			get { return GetColumnValue<int>(Columns.AccountStateExceptionID); }
			set {
				SetColumnValue(Columns.AccountStateExceptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountStateExceptionID));
			}
		}
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public int? CreditedTeamLocationID {
			get { return GetColumnValue<int?>(Columns.CreditedTeamLocationID); }
			set {
				SetColumnValue(Columns.CreditedTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditedTeamLocationID));
			}
		}
		[DataMember]
		public int? CreditScore {
			get { return GetColumnValue<int?>(Columns.CreditScore); }
			set {
				SetColumnValue(Columns.CreditScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScore));
			}
		}
		[DataMember]
		public bool? HasRepFrontEndHold {
			get { return GetColumnValue<bool?>(Columns.HasRepFrontEndHold); }
			set {
				SetColumnValue(Columns.HasRepFrontEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasRepFrontEndHold));
			}
		}
		[DataMember]
		public bool? HasRepBackEndHold {
			get { return GetColumnValue<bool?>(Columns.HasRepBackEndHold); }
			set {
				SetColumnValue(Columns.HasRepBackEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasRepBackEndHold));
			}
		}
		[DataMember]
		public bool? HasTechFrontEndHold {
			get { return GetColumnValue<bool?>(Columns.HasTechFrontEndHold); }
			set {
				SetColumnValue(Columns.HasTechFrontEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasTechFrontEndHold));
			}
		}
		[DataMember]
		public bool? HasTechBackEndHold {
			get { return GetColumnValue<bool?>(Columns.HasTechBackEndHold); }
			set {
				SetColumnValue(Columns.HasTechBackEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasTechBackEndHold));
			}
		}
		[DataMember]
		public bool? IsCanceled {
			get { return GetColumnValue<bool?>(Columns.IsCanceled); }
			set {
				SetColumnValue(Columns.IsCanceled, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCanceled));
			}
		}
		[DataMember]
		public bool? IsCellAccount {
			get { return GetColumnValue<bool?>(Columns.IsCellAccount); }
			set {
				SetColumnValue(Columns.IsCellAccount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCellAccount));
			}
		}
		[DataMember]
		public bool? IsFriendsAndFamily {
			get { return GetColumnValue<bool?>(Columns.IsFriendsAndFamily); }
			set {
				SetColumnValue(Columns.IsFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsFriendsAndFamily));
			}
		}
		[DataMember]
		public bool? IsActivationWaive {
			get { return GetColumnValue<bool?>(Columns.IsActivationWaive); }
			set {
				SetColumnValue(Columns.IsActivationWaive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActivationWaive));
			}
		}
		[DataMember]
		public decimal? ActivationFee {
			get { return GetColumnValue<decimal?>(Columns.ActivationFee); }
			set {
				SetColumnValue(Columns.ActivationFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationFee));
			}
		}
		[DataMember]
		public bool? IsActivationUpFront {
			get { return GetColumnValue<bool?>(Columns.IsActivationUpFront); }
			set {
				SetColumnValue(Columns.IsActivationUpFront, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActivationUpFront));
			}
		}
		[DataMember]
		public bool? IsAutoPay {
			get { return GetColumnValue<bool?>(Columns.IsAutoPay); }
			set {
				SetColumnValue(Columns.IsAutoPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAutoPay));
			}
		}
		[DataMember]
		public bool? IsPlatinumInteractive {
			get { return GetColumnValue<bool?>(Columns.IsPlatinumInteractive); }
			set {
				SetColumnValue(Columns.IsPlatinumInteractive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPlatinumInteractive));
			}
		}
		[DataMember]
		public bool? IsTwoWayCell {
			get { return GetColumnValue<bool?>(Columns.IsTwoWayCell); }
			set {
				SetColumnValue(Columns.IsTwoWayCell, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTwoWayCell));
			}
		}
		[DataMember]
		public bool? IsExtendedContract {
			get { return GetColumnValue<bool?>(Columns.IsExtendedContract); }
			set {
				SetColumnValue(Columns.IsExtendedContract, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsExtendedContract));
			}
		}
		[DataMember]
		public bool? IsShortenedContract {
			get { return GetColumnValue<bool?>(Columns.IsShortenedContract); }
			set {
				SetColumnValue(Columns.IsShortenedContract, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsShortenedContract));
			}
		}
		[DataMember]
		public bool? IsInstalled {
			get { return GetColumnValue<bool?>(Columns.IsInstalled); }
			set {
				SetColumnValue(Columns.IsInstalled, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsInstalled));
			}
		}
		[DataMember]
		public bool? IsSubmittedToGP {
			get { return GetColumnValue<bool?>(Columns.IsSubmittedToGP); }
			set {
				SetColumnValue(Columns.IsSubmittedToGP, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSubmittedToGP));
			}
		}
		[DataMember]
		public bool? IsDelinquent {
			get { return GetColumnValue<bool?>(Columns.IsDelinquent); }
			set {
				SetColumnValue(Columns.IsDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDelinquent));
			}
		}
		[DataMember]
		public bool? IsSaved {
			get { return GetColumnValue<bool?>(Columns.IsSaved); }
			set {
				SetColumnValue(Columns.IsSaved, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSaved));
			}
		}
		[DataMember]
		public bool? IsMissingInvoiceFee {
			get { return GetColumnValue<bool?>(Columns.IsMissingInvoiceFee); }
			set {
				SetColumnValue(Columns.IsMissingInvoiceFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsMissingInvoiceFee));
			}
		}
		[DataMember]
		public bool? IsCommercial {
			get { return GetColumnValue<bool?>(Columns.IsCommercial); }
			set {
				SetColumnValue(Columns.IsCommercial, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCommercial));
			}
		}
		[DataMember]
		public bool? HasServiceTicket {
			get { return GetColumnValue<bool?>(Columns.HasServiceTicket); }
			set {
				SetColumnValue(Columns.HasServiceTicket, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasServiceTicket));
			}
		}
		[DataMember]
		public decimal? RMR {
			get { return GetColumnValue<decimal?>(Columns.RMR); }
			set {
				SetColumnValue(Columns.RMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RMR));
			}
		}
		[DataMember]
		public decimal? FullPriceRMR {
			get { return GetColumnValue<decimal?>(Columns.FullPriceRMR); }
			set {
				SetColumnValue(Columns.FullPriceRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullPriceRMR));
			}
		}
		[DataMember]
		public decimal? BaseRMR {
			get { return GetColumnValue<decimal?>(Columns.BaseRMR); }
			set {
				SetColumnValue(Columns.BaseRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BaseRMR));
			}
		}
		[DataMember]
		public decimal? PointBank {
			get { return GetColumnValue<decimal?>(Columns.PointBank); }
			set {
				SetColumnValue(Columns.PointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PointBank));
			}
		}
		[DataMember]
		public DateTime? InstallDate {
			get { return GetColumnValue<DateTime?>(Columns.InstallDate); }
			set {
				SetColumnValue(Columns.InstallDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InstallDate));
			}
		}
		[DataMember]
		public double? TechSelfInspectionPercentage {
			get { return GetColumnValue<double?>(Columns.TechSelfInspectionPercentage); }
			set {
				SetColumnValue(Columns.TechSelfInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechSelfInspectionPercentage));
			}
		}
		[DataMember]
		public double? TechManagerInspectionPercentage {
			get { return GetColumnValue<double?>(Columns.TechManagerInspectionPercentage); }
			set {
				SetColumnValue(Columns.TechManagerInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechManagerInspectionPercentage));
			}
		}
		[DataMember]
		public double? TechRegionalInspectionPercentage {
			get { return GetColumnValue<double?>(Columns.TechRegionalInspectionPercentage); }
			set {
				SetColumnValue(Columns.TechRegionalInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechRegionalInspectionPercentage));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string Note {
			get { return GetColumnValue<string>(Columns.Note); }
			set {
				SetColumnValue(Columns.Note, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Note));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_TeamLocation _CreditedTeamLocation;
		//Relationship: FK_PR_AccountStateExceptions_RU_TeamLocations
		public RU_TeamLocation CreditedTeamLocation
		{
			get
			{
				if(_CreditedTeamLocation == null) {
					_CreditedTeamLocation = RU_TeamLocation.FetchByID(this.CreditedTeamLocationID);
				}
				return _CreditedTeamLocation;
			}
			set
			{
				SetColumnValue("CreditedTeamLocationID", value.TeamLocationID);
				_CreditedTeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountStateExceptionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountStateExceptionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreditedTeamLocationIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreditScoreColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn HasRepFrontEndHoldColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn HasRepBackEndHoldColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn HasTechFrontEndHoldColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn HasTechBackEndHoldColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsCanceledColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsCellAccountColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsFriendsAndFamilyColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsActivationWaiveColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ActivationFeeColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsActivationUpFrontColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsAutoPayColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsPlatinumInteractiveColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsTwoWayCellColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsExtendedContractColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn IsShortenedContractColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsInstalledColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsSubmittedToGPColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn IsDelinquentColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn IsSavedColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn IsMissingInvoiceFeeColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn IsCommercialColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn HasServiceTicketColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn RMRColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn FullPriceRMRColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn BaseRMRColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn PointBankColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn InstallDateColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn TechSelfInspectionPercentageColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn TechManagerInspectionPercentageColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn TechRegionalInspectionPercentageColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn NoteColumn
		{
			get { return Schema.Columns[35]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountStateExceptionID = @"AccountStateExceptionID";
			public static readonly string AccountID = @"AccountID";
			public static readonly string CreditedTeamLocationID = @"CreditedTeamLocationID";
			public static readonly string CreditScore = @"CreditScore";
			public static readonly string HasRepFrontEndHold = @"HasRepFrontEndHold";
			public static readonly string HasRepBackEndHold = @"HasRepBackEndHold";
			public static readonly string HasTechFrontEndHold = @"HasTechFrontEndHold";
			public static readonly string HasTechBackEndHold = @"HasTechBackEndHold";
			public static readonly string IsCanceled = @"IsCanceled";
			public static readonly string IsCellAccount = @"IsCellAccount";
			public static readonly string IsFriendsAndFamily = @"IsFriendsAndFamily";
			public static readonly string IsActivationWaive = @"IsActivationWaive";
			public static readonly string ActivationFee = @"ActivationFee";
			public static readonly string IsActivationUpFront = @"IsActivationUpFront";
			public static readonly string IsAutoPay = @"IsAutoPay";
			public static readonly string IsPlatinumInteractive = @"IsPlatinumInteractive";
			public static readonly string IsTwoWayCell = @"IsTwoWayCell";
			public static readonly string IsExtendedContract = @"IsExtendedContract";
			public static readonly string IsShortenedContract = @"IsShortenedContract";
			public static readonly string IsInstalled = @"IsInstalled";
			public static readonly string IsSubmittedToGP = @"IsSubmittedToGP";
			public static readonly string IsDelinquent = @"IsDelinquent";
			public static readonly string IsSaved = @"IsSaved";
			public static readonly string IsMissingInvoiceFee = @"IsMissingInvoiceFee";
			public static readonly string IsCommercial = @"IsCommercial";
			public static readonly string HasServiceTicket = @"HasServiceTicket";
			public static readonly string RMR = @"RMR";
			public static readonly string FullPriceRMR = @"FullPriceRMR";
			public static readonly string BaseRMR = @"BaseRMR";
			public static readonly string PointBank = @"PointBank";
			public static readonly string InstallDate = @"InstallDate";
			public static readonly string TechSelfInspectionPercentage = @"TechSelfInspectionPercentage";
			public static readonly string TechManagerInspectionPercentage = @"TechManagerInspectionPercentage";
			public static readonly string TechRegionalInspectionPercentage = @"TechRegionalInspectionPercentage";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string Note = @"Note";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountStateExceptionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_AccountState class.
	/// </summary>
	[DataContract]
	public partial class PR_AccountStateCollection : ActiveList<PR_AccountState, PR_AccountStateCollection>
	{
		public static PR_AccountStateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_AccountStateCollection result = new PR_AccountStateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_AccountState item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_AccountStates table.
	/// </summary>
	[DataContract]
	public partial class PR_AccountState : ActiveRecord<PR_AccountState>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_AccountState()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_AccountStates", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountStateID = new TableSchema.TableColumn(schema);
				colvarAccountStateID.ColumnName = "AccountStateID";
				colvarAccountStateID.DataType = DbType.Int32;
				colvarAccountStateID.MaxLength = 0;
				colvarAccountStateID.AutoIncrement = true;
				colvarAccountStateID.IsNullable = false;
				colvarAccountStateID.IsPrimaryKey = true;
				colvarAccountStateID.IsForeignKey = false;
				colvarAccountStateID.IsReadOnly = false;
				colvarAccountStateID.DefaultSetting = @"";
				colvarAccountStateID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountStateID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarCustomerName = new TableSchema.TableColumn(schema);
				colvarCustomerName.ColumnName = "CustomerName";
				colvarCustomerName.DataType = DbType.String;
				colvarCustomerName.MaxLength = 150;
				colvarCustomerName.AutoIncrement = false;
				colvarCustomerName.IsNullable = false;
				colvarCustomerName.IsPrimaryKey = false;
				colvarCustomerName.IsForeignKey = false;
				colvarCustomerName.IsReadOnly = false;
				colvarCustomerName.DefaultSetting = @"";
				colvarCustomerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerName);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarCreditedTeamLocationID = new TableSchema.TableColumn(schema);
				colvarCreditedTeamLocationID.ColumnName = "CreditedTeamLocationID";
				colvarCreditedTeamLocationID.DataType = DbType.Int32;
				colvarCreditedTeamLocationID.MaxLength = 0;
				colvarCreditedTeamLocationID.AutoIncrement = false;
				colvarCreditedTeamLocationID.IsNullable = false;
				colvarCreditedTeamLocationID.IsPrimaryKey = false;
				colvarCreditedTeamLocationID.IsForeignKey = true;
				colvarCreditedTeamLocationID.IsReadOnly = false;
				colvarCreditedTeamLocationID.DefaultSetting = @"";
				colvarCreditedTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarCreditedTeamLocationID);

				TableSchema.TableColumn colvarGPSalesRepID = new TableSchema.TableColumn(schema);
				colvarGPSalesRepID.ColumnName = "GPSalesRepID";
				colvarGPSalesRepID.DataType = DbType.String;
				colvarGPSalesRepID.MaxLength = 30;
				colvarGPSalesRepID.AutoIncrement = false;
				colvarGPSalesRepID.IsNullable = false;
				colvarGPSalesRepID.IsPrimaryKey = false;
				colvarGPSalesRepID.IsForeignKey = false;
				colvarGPSalesRepID.IsReadOnly = false;
				colvarGPSalesRepID.DefaultSetting = @"";
				colvarGPSalesRepID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPSalesRepID);

				TableSchema.TableColumn colvarGPTechnicianID = new TableSchema.TableColumn(schema);
				colvarGPTechnicianID.ColumnName = "GPTechnicianID";
				colvarGPTechnicianID.DataType = DbType.String;
				colvarGPTechnicianID.MaxLength = 30;
				colvarGPTechnicianID.AutoIncrement = false;
				colvarGPTechnicianID.IsNullable = false;
				colvarGPTechnicianID.IsPrimaryKey = false;
				colvarGPTechnicianID.IsForeignKey = false;
				colvarGPTechnicianID.IsReadOnly = false;
				colvarGPTechnicianID.DefaultSetting = @"";
				colvarGPTechnicianID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPTechnicianID);

				TableSchema.TableColumn colvarStateAB = new TableSchema.TableColumn(schema);
				colvarStateAB.ColumnName = "StateAB";
				colvarStateAB.DataType = DbType.String;
				colvarStateAB.MaxLength = 5;
				colvarStateAB.AutoIncrement = false;
				colvarStateAB.IsNullable = false;
				colvarStateAB.IsPrimaryKey = false;
				colvarStateAB.IsForeignKey = false;
				colvarStateAB.IsReadOnly = false;
				colvarStateAB.DefaultSetting = @"";
				colvarStateAB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateAB);

				TableSchema.TableColumn colvarCreditScore = new TableSchema.TableColumn(schema);
				colvarCreditScore.ColumnName = "CreditScore";
				colvarCreditScore.DataType = DbType.Int32;
				colvarCreditScore.MaxLength = 0;
				colvarCreditScore.AutoIncrement = false;
				colvarCreditScore.IsNullable = false;
				colvarCreditScore.IsPrimaryKey = false;
				colvarCreditScore.IsForeignKey = false;
				colvarCreditScore.IsReadOnly = false;
				colvarCreditScore.DefaultSetting = @"";
				colvarCreditScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScore);

				TableSchema.TableColumn colvarHasRepFrontEndHold = new TableSchema.TableColumn(schema);
				colvarHasRepFrontEndHold.ColumnName = "HasRepFrontEndHold";
				colvarHasRepFrontEndHold.DataType = DbType.Boolean;
				colvarHasRepFrontEndHold.MaxLength = 0;
				colvarHasRepFrontEndHold.AutoIncrement = false;
				colvarHasRepFrontEndHold.IsNullable = false;
				colvarHasRepFrontEndHold.IsPrimaryKey = false;
				colvarHasRepFrontEndHold.IsForeignKey = false;
				colvarHasRepFrontEndHold.IsReadOnly = false;
				colvarHasRepFrontEndHold.DefaultSetting = @"";
				colvarHasRepFrontEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasRepFrontEndHold);

				TableSchema.TableColumn colvarHasRepBackEndHold = new TableSchema.TableColumn(schema);
				colvarHasRepBackEndHold.ColumnName = "HasRepBackEndHold";
				colvarHasRepBackEndHold.DataType = DbType.Boolean;
				colvarHasRepBackEndHold.MaxLength = 0;
				colvarHasRepBackEndHold.AutoIncrement = false;
				colvarHasRepBackEndHold.IsNullable = false;
				colvarHasRepBackEndHold.IsPrimaryKey = false;
				colvarHasRepBackEndHold.IsForeignKey = false;
				colvarHasRepBackEndHold.IsReadOnly = false;
				colvarHasRepBackEndHold.DefaultSetting = @"";
				colvarHasRepBackEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasRepBackEndHold);

				TableSchema.TableColumn colvarHasTechFrontEndHold = new TableSchema.TableColumn(schema);
				colvarHasTechFrontEndHold.ColumnName = "HasTechFrontEndHold";
				colvarHasTechFrontEndHold.DataType = DbType.Boolean;
				colvarHasTechFrontEndHold.MaxLength = 0;
				colvarHasTechFrontEndHold.AutoIncrement = false;
				colvarHasTechFrontEndHold.IsNullable = false;
				colvarHasTechFrontEndHold.IsPrimaryKey = false;
				colvarHasTechFrontEndHold.IsForeignKey = false;
				colvarHasTechFrontEndHold.IsReadOnly = false;
				colvarHasTechFrontEndHold.DefaultSetting = @"";
				colvarHasTechFrontEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasTechFrontEndHold);

				TableSchema.TableColumn colvarHasTechBackEndHold = new TableSchema.TableColumn(schema);
				colvarHasTechBackEndHold.ColumnName = "HasTechBackEndHold";
				colvarHasTechBackEndHold.DataType = DbType.Boolean;
				colvarHasTechBackEndHold.MaxLength = 0;
				colvarHasTechBackEndHold.AutoIncrement = false;
				colvarHasTechBackEndHold.IsNullable = false;
				colvarHasTechBackEndHold.IsPrimaryKey = false;
				colvarHasTechBackEndHold.IsForeignKey = false;
				colvarHasTechBackEndHold.IsReadOnly = false;
				colvarHasTechBackEndHold.DefaultSetting = @"";
				colvarHasTechBackEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasTechBackEndHold);

				TableSchema.TableColumn colvarIsCanceled = new TableSchema.TableColumn(schema);
				colvarIsCanceled.ColumnName = "IsCanceled";
				colvarIsCanceled.DataType = DbType.Boolean;
				colvarIsCanceled.MaxLength = 0;
				colvarIsCanceled.AutoIncrement = false;
				colvarIsCanceled.IsNullable = false;
				colvarIsCanceled.IsPrimaryKey = false;
				colvarIsCanceled.IsForeignKey = false;
				colvarIsCanceled.IsReadOnly = false;
				colvarIsCanceled.DefaultSetting = @"";
				colvarIsCanceled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCanceled);

				TableSchema.TableColumn colvarIsCellAccount = new TableSchema.TableColumn(schema);
				colvarIsCellAccount.ColumnName = "IsCellAccount";
				colvarIsCellAccount.DataType = DbType.Boolean;
				colvarIsCellAccount.MaxLength = 0;
				colvarIsCellAccount.AutoIncrement = false;
				colvarIsCellAccount.IsNullable = false;
				colvarIsCellAccount.IsPrimaryKey = false;
				colvarIsCellAccount.IsForeignKey = false;
				colvarIsCellAccount.IsReadOnly = false;
				colvarIsCellAccount.DefaultSetting = @"";
				colvarIsCellAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCellAccount);

				TableSchema.TableColumn colvarIsFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarIsFriendsAndFamily.ColumnName = "IsFriendsAndFamily";
				colvarIsFriendsAndFamily.DataType = DbType.Boolean;
				colvarIsFriendsAndFamily.MaxLength = 0;
				colvarIsFriendsAndFamily.AutoIncrement = false;
				colvarIsFriendsAndFamily.IsNullable = false;
				colvarIsFriendsAndFamily.IsPrimaryKey = false;
				colvarIsFriendsAndFamily.IsForeignKey = false;
				colvarIsFriendsAndFamily.IsReadOnly = false;
				colvarIsFriendsAndFamily.DefaultSetting = @"";
				colvarIsFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsFriendsAndFamily);

				TableSchema.TableColumn colvarIsActivationWaive = new TableSchema.TableColumn(schema);
				colvarIsActivationWaive.ColumnName = "IsActivationWaive";
				colvarIsActivationWaive.DataType = DbType.Boolean;
				colvarIsActivationWaive.MaxLength = 0;
				colvarIsActivationWaive.AutoIncrement = false;
				colvarIsActivationWaive.IsNullable = false;
				colvarIsActivationWaive.IsPrimaryKey = false;
				colvarIsActivationWaive.IsForeignKey = false;
				colvarIsActivationWaive.IsReadOnly = false;
				colvarIsActivationWaive.DefaultSetting = @"";
				colvarIsActivationWaive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActivationWaive);

				TableSchema.TableColumn colvarActivationFee = new TableSchema.TableColumn(schema);
				colvarActivationFee.ColumnName = "ActivationFee";
				colvarActivationFee.DataType = DbType.Currency;
				colvarActivationFee.MaxLength = 0;
				colvarActivationFee.AutoIncrement = false;
				colvarActivationFee.IsNullable = false;
				colvarActivationFee.IsPrimaryKey = false;
				colvarActivationFee.IsForeignKey = false;
				colvarActivationFee.IsReadOnly = false;
				colvarActivationFee.DefaultSetting = @"";
				colvarActivationFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationFee);

				TableSchema.TableColumn colvarIsActivationUpFront = new TableSchema.TableColumn(schema);
				colvarIsActivationUpFront.ColumnName = "IsActivationUpFront";
				colvarIsActivationUpFront.DataType = DbType.Boolean;
				colvarIsActivationUpFront.MaxLength = 0;
				colvarIsActivationUpFront.AutoIncrement = false;
				colvarIsActivationUpFront.IsNullable = false;
				colvarIsActivationUpFront.IsPrimaryKey = false;
				colvarIsActivationUpFront.IsForeignKey = false;
				colvarIsActivationUpFront.IsReadOnly = false;
				colvarIsActivationUpFront.DefaultSetting = @"";
				colvarIsActivationUpFront.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActivationUpFront);

				TableSchema.TableColumn colvarIsAutoPay = new TableSchema.TableColumn(schema);
				colvarIsAutoPay.ColumnName = "IsAutoPay";
				colvarIsAutoPay.DataType = DbType.Boolean;
				colvarIsAutoPay.MaxLength = 0;
				colvarIsAutoPay.AutoIncrement = false;
				colvarIsAutoPay.IsNullable = false;
				colvarIsAutoPay.IsPrimaryKey = false;
				colvarIsAutoPay.IsForeignKey = false;
				colvarIsAutoPay.IsReadOnly = false;
				colvarIsAutoPay.DefaultSetting = @"";
				colvarIsAutoPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAutoPay);

				TableSchema.TableColumn colvarIsPlatinumInteractive = new TableSchema.TableColumn(schema);
				colvarIsPlatinumInteractive.ColumnName = "IsPlatinumInteractive";
				colvarIsPlatinumInteractive.DataType = DbType.Boolean;
				colvarIsPlatinumInteractive.MaxLength = 0;
				colvarIsPlatinumInteractive.AutoIncrement = false;
				colvarIsPlatinumInteractive.IsNullable = false;
				colvarIsPlatinumInteractive.IsPrimaryKey = false;
				colvarIsPlatinumInteractive.IsForeignKey = false;
				colvarIsPlatinumInteractive.IsReadOnly = false;
				colvarIsPlatinumInteractive.DefaultSetting = @"";
				colvarIsPlatinumInteractive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPlatinumInteractive);

				TableSchema.TableColumn colvarIsTwoWayCell = new TableSchema.TableColumn(schema);
				colvarIsTwoWayCell.ColumnName = "IsTwoWayCell";
				colvarIsTwoWayCell.DataType = DbType.Boolean;
				colvarIsTwoWayCell.MaxLength = 0;
				colvarIsTwoWayCell.AutoIncrement = false;
				colvarIsTwoWayCell.IsNullable = false;
				colvarIsTwoWayCell.IsPrimaryKey = false;
				colvarIsTwoWayCell.IsForeignKey = false;
				colvarIsTwoWayCell.IsReadOnly = false;
				colvarIsTwoWayCell.DefaultSetting = @"";
				colvarIsTwoWayCell.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTwoWayCell);

				TableSchema.TableColumn colvarIsExtendedContract = new TableSchema.TableColumn(schema);
				colvarIsExtendedContract.ColumnName = "IsExtendedContract";
				colvarIsExtendedContract.DataType = DbType.Boolean;
				colvarIsExtendedContract.MaxLength = 0;
				colvarIsExtendedContract.AutoIncrement = false;
				colvarIsExtendedContract.IsNullable = false;
				colvarIsExtendedContract.IsPrimaryKey = false;
				colvarIsExtendedContract.IsForeignKey = false;
				colvarIsExtendedContract.IsReadOnly = false;
				colvarIsExtendedContract.DefaultSetting = @"";
				colvarIsExtendedContract.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExtendedContract);

				TableSchema.TableColumn colvarIsShortenedContract = new TableSchema.TableColumn(schema);
				colvarIsShortenedContract.ColumnName = "IsShortenedContract";
				colvarIsShortenedContract.DataType = DbType.Boolean;
				colvarIsShortenedContract.MaxLength = 0;
				colvarIsShortenedContract.AutoIncrement = false;
				colvarIsShortenedContract.IsNullable = false;
				colvarIsShortenedContract.IsPrimaryKey = false;
				colvarIsShortenedContract.IsForeignKey = false;
				colvarIsShortenedContract.IsReadOnly = false;
				colvarIsShortenedContract.DefaultSetting = @"";
				colvarIsShortenedContract.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsShortenedContract);

				TableSchema.TableColumn colvarIsInstalled = new TableSchema.TableColumn(schema);
				colvarIsInstalled.ColumnName = "IsInstalled";
				colvarIsInstalled.DataType = DbType.Boolean;
				colvarIsInstalled.MaxLength = 0;
				colvarIsInstalled.AutoIncrement = false;
				colvarIsInstalled.IsNullable = false;
				colvarIsInstalled.IsPrimaryKey = false;
				colvarIsInstalled.IsForeignKey = false;
				colvarIsInstalled.IsReadOnly = false;
				colvarIsInstalled.DefaultSetting = @"";
				colvarIsInstalled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsInstalled);

				TableSchema.TableColumn colvarIsSubmittedToGP = new TableSchema.TableColumn(schema);
				colvarIsSubmittedToGP.ColumnName = "IsSubmittedToGP";
				colvarIsSubmittedToGP.DataType = DbType.Boolean;
				colvarIsSubmittedToGP.MaxLength = 0;
				colvarIsSubmittedToGP.AutoIncrement = false;
				colvarIsSubmittedToGP.IsNullable = false;
				colvarIsSubmittedToGP.IsPrimaryKey = false;
				colvarIsSubmittedToGP.IsForeignKey = false;
				colvarIsSubmittedToGP.IsReadOnly = false;
				colvarIsSubmittedToGP.DefaultSetting = @"";
				colvarIsSubmittedToGP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSubmittedToGP);

				TableSchema.TableColumn colvarIsDelinquent = new TableSchema.TableColumn(schema);
				colvarIsDelinquent.ColumnName = "IsDelinquent";
				colvarIsDelinquent.DataType = DbType.Boolean;
				colvarIsDelinquent.MaxLength = 0;
				colvarIsDelinquent.AutoIncrement = false;
				colvarIsDelinquent.IsNullable = false;
				colvarIsDelinquent.IsPrimaryKey = false;
				colvarIsDelinquent.IsForeignKey = false;
				colvarIsDelinquent.IsReadOnly = false;
				colvarIsDelinquent.DefaultSetting = @"";
				colvarIsDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDelinquent);

				TableSchema.TableColumn colvarIsSaved = new TableSchema.TableColumn(schema);
				colvarIsSaved.ColumnName = "IsSaved";
				colvarIsSaved.DataType = DbType.Boolean;
				colvarIsSaved.MaxLength = 0;
				colvarIsSaved.AutoIncrement = false;
				colvarIsSaved.IsNullable = false;
				colvarIsSaved.IsPrimaryKey = false;
				colvarIsSaved.IsForeignKey = false;
				colvarIsSaved.IsReadOnly = false;
				colvarIsSaved.DefaultSetting = @"";
				colvarIsSaved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSaved);

				TableSchema.TableColumn colvarIsMissingInvoiceFee = new TableSchema.TableColumn(schema);
				colvarIsMissingInvoiceFee.ColumnName = "IsMissingInvoiceFee";
				colvarIsMissingInvoiceFee.DataType = DbType.Boolean;
				colvarIsMissingInvoiceFee.MaxLength = 0;
				colvarIsMissingInvoiceFee.AutoIncrement = false;
				colvarIsMissingInvoiceFee.IsNullable = false;
				colvarIsMissingInvoiceFee.IsPrimaryKey = false;
				colvarIsMissingInvoiceFee.IsForeignKey = false;
				colvarIsMissingInvoiceFee.IsReadOnly = false;
				colvarIsMissingInvoiceFee.DefaultSetting = @"";
				colvarIsMissingInvoiceFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMissingInvoiceFee);

				TableSchema.TableColumn colvarIsCommercial = new TableSchema.TableColumn(schema);
				colvarIsCommercial.ColumnName = "IsCommercial";
				colvarIsCommercial.DataType = DbType.Boolean;
				colvarIsCommercial.MaxLength = 0;
				colvarIsCommercial.AutoIncrement = false;
				colvarIsCommercial.IsNullable = false;
				colvarIsCommercial.IsPrimaryKey = false;
				colvarIsCommercial.IsForeignKey = false;
				colvarIsCommercial.IsReadOnly = false;
				colvarIsCommercial.DefaultSetting = @"";
				colvarIsCommercial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCommercial);

				TableSchema.TableColumn colvarHasServiceTicket = new TableSchema.TableColumn(schema);
				colvarHasServiceTicket.ColumnName = "HasServiceTicket";
				colvarHasServiceTicket.DataType = DbType.Boolean;
				colvarHasServiceTicket.MaxLength = 0;
				colvarHasServiceTicket.AutoIncrement = false;
				colvarHasServiceTicket.IsNullable = false;
				colvarHasServiceTicket.IsPrimaryKey = false;
				colvarHasServiceTicket.IsForeignKey = false;
				colvarHasServiceTicket.IsReadOnly = false;
				colvarHasServiceTicket.DefaultSetting = @"";
				colvarHasServiceTicket.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasServiceTicket);

				TableSchema.TableColumn colvarRMR = new TableSchema.TableColumn(schema);
				colvarRMR.ColumnName = "RMR";
				colvarRMR.DataType = DbType.Currency;
				colvarRMR.MaxLength = 0;
				colvarRMR.AutoIncrement = false;
				colvarRMR.IsNullable = false;
				colvarRMR.IsPrimaryKey = false;
				colvarRMR.IsForeignKey = false;
				colvarRMR.IsReadOnly = false;
				colvarRMR.DefaultSetting = @"";
				colvarRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRMR);

				TableSchema.TableColumn colvarFullPriceRMR = new TableSchema.TableColumn(schema);
				colvarFullPriceRMR.ColumnName = "FullPriceRMR";
				colvarFullPriceRMR.DataType = DbType.Currency;
				colvarFullPriceRMR.MaxLength = 0;
				colvarFullPriceRMR.AutoIncrement = false;
				colvarFullPriceRMR.IsNullable = true;
				colvarFullPriceRMR.IsPrimaryKey = false;
				colvarFullPriceRMR.IsForeignKey = false;
				colvarFullPriceRMR.IsReadOnly = false;
				colvarFullPriceRMR.DefaultSetting = @"";
				colvarFullPriceRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullPriceRMR);

				TableSchema.TableColumn colvarBaseRMR = new TableSchema.TableColumn(schema);
				colvarBaseRMR.ColumnName = "BaseRMR";
				colvarBaseRMR.DataType = DbType.Currency;
				colvarBaseRMR.MaxLength = 0;
				colvarBaseRMR.AutoIncrement = false;
				colvarBaseRMR.IsNullable = true;
				colvarBaseRMR.IsPrimaryKey = false;
				colvarBaseRMR.IsForeignKey = false;
				colvarBaseRMR.IsReadOnly = false;
				colvarBaseRMR.DefaultSetting = @"";
				colvarBaseRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaseRMR);

				TableSchema.TableColumn colvarPointBank = new TableSchema.TableColumn(schema);
				colvarPointBank.ColumnName = "PointBank";
				colvarPointBank.DataType = DbType.Decimal;
				colvarPointBank.MaxLength = 0;
				colvarPointBank.AutoIncrement = false;
				colvarPointBank.IsNullable = false;
				colvarPointBank.IsPrimaryKey = false;
				colvarPointBank.IsForeignKey = false;
				colvarPointBank.IsReadOnly = false;
				colvarPointBank.DefaultSetting = @"";
				colvarPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPointBank);

				TableSchema.TableColumn colvarActivationPointBank = new TableSchema.TableColumn(schema);
				colvarActivationPointBank.ColumnName = "ActivationPointBank";
				colvarActivationPointBank.DataType = DbType.Decimal;
				colvarActivationPointBank.MaxLength = 0;
				colvarActivationPointBank.AutoIncrement = false;
				colvarActivationPointBank.IsNullable = true;
				colvarActivationPointBank.IsPrimaryKey = false;
				colvarActivationPointBank.IsForeignKey = false;
				colvarActivationPointBank.IsReadOnly = false;
				colvarActivationPointBank.DefaultSetting = @"";
				colvarActivationPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationPointBank);

				TableSchema.TableColumn colvarInstallDate = new TableSchema.TableColumn(schema);
				colvarInstallDate.ColumnName = "InstallDate";
				colvarInstallDate.DataType = DbType.DateTime;
				colvarInstallDate.MaxLength = 0;
				colvarInstallDate.AutoIncrement = false;
				colvarInstallDate.IsNullable = false;
				colvarInstallDate.IsPrimaryKey = false;
				colvarInstallDate.IsForeignKey = false;
				colvarInstallDate.IsReadOnly = false;
				colvarInstallDate.DefaultSetting = @"";
				colvarInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallDate);

				TableSchema.TableColumn colvarTechSelfInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarTechSelfInspectionPercentage.ColumnName = "TechSelfInspectionPercentage";
				colvarTechSelfInspectionPercentage.DataType = DbType.Double;
				colvarTechSelfInspectionPercentage.MaxLength = 0;
				colvarTechSelfInspectionPercentage.AutoIncrement = false;
				colvarTechSelfInspectionPercentage.IsNullable = false;
				colvarTechSelfInspectionPercentage.IsPrimaryKey = false;
				colvarTechSelfInspectionPercentage.IsForeignKey = false;
				colvarTechSelfInspectionPercentage.IsReadOnly = false;
				colvarTechSelfInspectionPercentage.DefaultSetting = @"";
				colvarTechSelfInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechSelfInspectionPercentage);

				TableSchema.TableColumn colvarTechManagerInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarTechManagerInspectionPercentage.ColumnName = "TechManagerInspectionPercentage";
				colvarTechManagerInspectionPercentage.DataType = DbType.Double;
				colvarTechManagerInspectionPercentage.MaxLength = 0;
				colvarTechManagerInspectionPercentage.AutoIncrement = false;
				colvarTechManagerInspectionPercentage.IsNullable = false;
				colvarTechManagerInspectionPercentage.IsPrimaryKey = false;
				colvarTechManagerInspectionPercentage.IsForeignKey = false;
				colvarTechManagerInspectionPercentage.IsReadOnly = false;
				colvarTechManagerInspectionPercentage.DefaultSetting = @"";
				colvarTechManagerInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechManagerInspectionPercentage);

				TableSchema.TableColumn colvarTechRegionalInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarTechRegionalInspectionPercentage.ColumnName = "TechRegionalInspectionPercentage";
				colvarTechRegionalInspectionPercentage.DataType = DbType.Double;
				colvarTechRegionalInspectionPercentage.MaxLength = 0;
				colvarTechRegionalInspectionPercentage.AutoIncrement = false;
				colvarTechRegionalInspectionPercentage.IsNullable = true;
				colvarTechRegionalInspectionPercentage.IsPrimaryKey = false;
				colvarTechRegionalInspectionPercentage.IsForeignKey = false;
				colvarTechRegionalInspectionPercentage.IsReadOnly = false;
				colvarTechRegionalInspectionPercentage.DefaultSetting = @"";
				colvarTechRegionalInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechRegionalInspectionPercentage);

				TableSchema.TableColumn colvarIgnoreForRepReconciliation = new TableSchema.TableColumn(schema);
				colvarIgnoreForRepReconciliation.ColumnName = "IgnoreForRepReconciliation";
				colvarIgnoreForRepReconciliation.DataType = DbType.Boolean;
				colvarIgnoreForRepReconciliation.MaxLength = 0;
				colvarIgnoreForRepReconciliation.AutoIncrement = false;
				colvarIgnoreForRepReconciliation.IsNullable = false;
				colvarIgnoreForRepReconciliation.IsPrimaryKey = false;
				colvarIgnoreForRepReconciliation.IsForeignKey = false;
				colvarIgnoreForRepReconciliation.IsReadOnly = false;
				colvarIgnoreForRepReconciliation.DefaultSetting = @"((0))";
				colvarIgnoreForRepReconciliation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIgnoreForRepReconciliation);

				TableSchema.TableColumn colvarIgnoreForTechReconciliation = new TableSchema.TableColumn(schema);
				colvarIgnoreForTechReconciliation.ColumnName = "IgnoreForTechReconciliation";
				colvarIgnoreForTechReconciliation.DataType = DbType.Boolean;
				colvarIgnoreForTechReconciliation.MaxLength = 0;
				colvarIgnoreForTechReconciliation.AutoIncrement = false;
				colvarIgnoreForTechReconciliation.IsNullable = false;
				colvarIgnoreForTechReconciliation.IsPrimaryKey = false;
				colvarIgnoreForTechReconciliation.IsForeignKey = false;
				colvarIgnoreForTechReconciliation.IsReadOnly = false;
				colvarIgnoreForTechReconciliation.DefaultSetting = @"((0))";
				colvarIgnoreForTechReconciliation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIgnoreForTechReconciliation);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_AccountStates",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_AccountState LoadFrom(PR_AccountState item)
		{
			PR_AccountState result = new PR_AccountState();
			if (item.AccountStateID != default(int)) {
				result.LoadByKey(item.AccountStateID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountStateID {
			get { return GetColumnValue<int>(Columns.AccountStateID); }
			set {
				SetColumnValue(Columns.AccountStateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountStateID));
			}
		}
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public string CustomerName {
			get { return GetColumnValue<string>(Columns.CustomerName); }
			set {
				SetColumnValue(Columns.CustomerName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerName));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int CreditedTeamLocationID {
			get { return GetColumnValue<int>(Columns.CreditedTeamLocationID); }
			set {
				SetColumnValue(Columns.CreditedTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditedTeamLocationID));
			}
		}
		[DataMember]
		public string GPSalesRepID {
			get { return GetColumnValue<string>(Columns.GPSalesRepID); }
			set {
				SetColumnValue(Columns.GPSalesRepID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPSalesRepID));
			}
		}
		[DataMember]
		public string GPTechnicianID {
			get { return GetColumnValue<string>(Columns.GPTechnicianID); }
			set {
				SetColumnValue(Columns.GPTechnicianID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPTechnicianID));
			}
		}
		[DataMember]
		public string StateAB {
			get { return GetColumnValue<string>(Columns.StateAB); }
			set {
				SetColumnValue(Columns.StateAB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateAB));
			}
		}
		[DataMember]
		public int CreditScore {
			get { return GetColumnValue<int>(Columns.CreditScore); }
			set {
				SetColumnValue(Columns.CreditScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScore));
			}
		}
		[DataMember]
		public bool HasRepFrontEndHold {
			get { return GetColumnValue<bool>(Columns.HasRepFrontEndHold); }
			set {
				SetColumnValue(Columns.HasRepFrontEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasRepFrontEndHold));
			}
		}
		[DataMember]
		public bool HasRepBackEndHold {
			get { return GetColumnValue<bool>(Columns.HasRepBackEndHold); }
			set {
				SetColumnValue(Columns.HasRepBackEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasRepBackEndHold));
			}
		}
		[DataMember]
		public bool HasTechFrontEndHold {
			get { return GetColumnValue<bool>(Columns.HasTechFrontEndHold); }
			set {
				SetColumnValue(Columns.HasTechFrontEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasTechFrontEndHold));
			}
		}
		[DataMember]
		public bool HasTechBackEndHold {
			get { return GetColumnValue<bool>(Columns.HasTechBackEndHold); }
			set {
				SetColumnValue(Columns.HasTechBackEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasTechBackEndHold));
			}
		}
		[DataMember]
		public bool IsCanceled {
			get { return GetColumnValue<bool>(Columns.IsCanceled); }
			set {
				SetColumnValue(Columns.IsCanceled, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCanceled));
			}
		}
		[DataMember]
		public bool IsCellAccount {
			get { return GetColumnValue<bool>(Columns.IsCellAccount); }
			set {
				SetColumnValue(Columns.IsCellAccount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCellAccount));
			}
		}
		[DataMember]
		public bool IsFriendsAndFamily {
			get { return GetColumnValue<bool>(Columns.IsFriendsAndFamily); }
			set {
				SetColumnValue(Columns.IsFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsFriendsAndFamily));
			}
		}
		[DataMember]
		public bool IsActivationWaive {
			get { return GetColumnValue<bool>(Columns.IsActivationWaive); }
			set {
				SetColumnValue(Columns.IsActivationWaive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActivationWaive));
			}
		}
		[DataMember]
		public decimal ActivationFee {
			get { return GetColumnValue<decimal>(Columns.ActivationFee); }
			set {
				SetColumnValue(Columns.ActivationFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationFee));
			}
		}
		[DataMember]
		public bool IsActivationUpFront {
			get { return GetColumnValue<bool>(Columns.IsActivationUpFront); }
			set {
				SetColumnValue(Columns.IsActivationUpFront, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActivationUpFront));
			}
		}
		[DataMember]
		public bool IsAutoPay {
			get { return GetColumnValue<bool>(Columns.IsAutoPay); }
			set {
				SetColumnValue(Columns.IsAutoPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAutoPay));
			}
		}
		[DataMember]
		public bool IsPlatinumInteractive {
			get { return GetColumnValue<bool>(Columns.IsPlatinumInteractive); }
			set {
				SetColumnValue(Columns.IsPlatinumInteractive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPlatinumInteractive));
			}
		}
		[DataMember]
		public bool IsTwoWayCell {
			get { return GetColumnValue<bool>(Columns.IsTwoWayCell); }
			set {
				SetColumnValue(Columns.IsTwoWayCell, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTwoWayCell));
			}
		}
		[DataMember]
		public bool IsExtendedContract {
			get { return GetColumnValue<bool>(Columns.IsExtendedContract); }
			set {
				SetColumnValue(Columns.IsExtendedContract, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsExtendedContract));
			}
		}
		[DataMember]
		public bool IsShortenedContract {
			get { return GetColumnValue<bool>(Columns.IsShortenedContract); }
			set {
				SetColumnValue(Columns.IsShortenedContract, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsShortenedContract));
			}
		}
		[DataMember]
		public bool IsInstalled {
			get { return GetColumnValue<bool>(Columns.IsInstalled); }
			set {
				SetColumnValue(Columns.IsInstalled, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsInstalled));
			}
		}
		[DataMember]
		public bool IsSubmittedToGP {
			get { return GetColumnValue<bool>(Columns.IsSubmittedToGP); }
			set {
				SetColumnValue(Columns.IsSubmittedToGP, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSubmittedToGP));
			}
		}
		[DataMember]
		public bool IsDelinquent {
			get { return GetColumnValue<bool>(Columns.IsDelinquent); }
			set {
				SetColumnValue(Columns.IsDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDelinquent));
			}
		}
		[DataMember]
		public bool IsSaved {
			get { return GetColumnValue<bool>(Columns.IsSaved); }
			set {
				SetColumnValue(Columns.IsSaved, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSaved));
			}
		}
		[DataMember]
		public bool IsMissingInvoiceFee {
			get { return GetColumnValue<bool>(Columns.IsMissingInvoiceFee); }
			set {
				SetColumnValue(Columns.IsMissingInvoiceFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsMissingInvoiceFee));
			}
		}
		[DataMember]
		public bool IsCommercial {
			get { return GetColumnValue<bool>(Columns.IsCommercial); }
			set {
				SetColumnValue(Columns.IsCommercial, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCommercial));
			}
		}
		[DataMember]
		public bool HasServiceTicket {
			get { return GetColumnValue<bool>(Columns.HasServiceTicket); }
			set {
				SetColumnValue(Columns.HasServiceTicket, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasServiceTicket));
			}
		}
		[DataMember]
		public decimal RMR {
			get { return GetColumnValue<decimal>(Columns.RMR); }
			set {
				SetColumnValue(Columns.RMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RMR));
			}
		}
		[DataMember]
		public decimal? FullPriceRMR {
			get { return GetColumnValue<decimal?>(Columns.FullPriceRMR); }
			set {
				SetColumnValue(Columns.FullPriceRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullPriceRMR));
			}
		}
		[DataMember]
		public decimal? BaseRMR {
			get { return GetColumnValue<decimal?>(Columns.BaseRMR); }
			set {
				SetColumnValue(Columns.BaseRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BaseRMR));
			}
		}
		[DataMember]
		public decimal PointBank {
			get { return GetColumnValue<decimal>(Columns.PointBank); }
			set {
				SetColumnValue(Columns.PointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PointBank));
			}
		}
		[DataMember]
		public decimal? ActivationPointBank {
			get { return GetColumnValue<decimal?>(Columns.ActivationPointBank); }
			set {
				SetColumnValue(Columns.ActivationPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationPointBank));
			}
		}
		[DataMember]
		public DateTime InstallDate {
			get { return GetColumnValue<DateTime>(Columns.InstallDate); }
			set {
				SetColumnValue(Columns.InstallDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InstallDate));
			}
		}
		[DataMember]
		public double TechSelfInspectionPercentage {
			get { return GetColumnValue<double>(Columns.TechSelfInspectionPercentage); }
			set {
				SetColumnValue(Columns.TechSelfInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechSelfInspectionPercentage));
			}
		}
		[DataMember]
		public double TechManagerInspectionPercentage {
			get { return GetColumnValue<double>(Columns.TechManagerInspectionPercentage); }
			set {
				SetColumnValue(Columns.TechManagerInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechManagerInspectionPercentage));
			}
		}
		[DataMember]
		public double? TechRegionalInspectionPercentage {
			get { return GetColumnValue<double?>(Columns.TechRegionalInspectionPercentage); }
			set {
				SetColumnValue(Columns.TechRegionalInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechRegionalInspectionPercentage));
			}
		}
		[DataMember]
		public bool IgnoreForRepReconciliation {
			get { return GetColumnValue<bool>(Columns.IgnoreForRepReconciliation); }
			set {
				SetColumnValue(Columns.IgnoreForRepReconciliation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IgnoreForRepReconciliation));
			}
		}
		[DataMember]
		public bool IgnoreForTechReconciliation {
			get { return GetColumnValue<bool>(Columns.IgnoreForTechReconciliation); }
			set {
				SetColumnValue(Columns.IgnoreForTechReconciliation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IgnoreForTechReconciliation));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _Season;
		//Relationship: FK_PR_AccountStates_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_PR_AccountStates_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		private RU_TeamLocation _CreditedTeamLocation;
		//Relationship: FK_PR_AccountStates_RU_TeamLocations1
		public RU_TeamLocation CreditedTeamLocation
		{
			get
			{
				if(_CreditedTeamLocation == null) {
					_CreditedTeamLocation = RU_TeamLocation.FetchByID(this.CreditedTeamLocationID);
				}
				return _CreditedTeamLocation;
			}
			set
			{
				SetColumnValue("CreditedTeamLocationID", value.TeamLocationID);
				_CreditedTeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountStateID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountStateIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreditedTeamLocationIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn GPSalesRepIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn GPTechnicianIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn StateABColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreditScoreColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn HasRepFrontEndHoldColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn HasRepBackEndHoldColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn HasTechFrontEndHoldColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn HasTechBackEndHoldColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsCanceledColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsCellAccountColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsFriendsAndFamilyColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsActivationWaiveColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ActivationFeeColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsActivationUpFrontColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsAutoPayColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn IsPlatinumInteractiveColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn IsTwoWayCellColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn IsExtendedContractColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn IsShortenedContractColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn IsInstalledColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn IsSubmittedToGPColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn IsDelinquentColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn IsSavedColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn IsMissingInvoiceFeeColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn IsCommercialColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn HasServiceTicketColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn RMRColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn FullPriceRMRColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn BaseRMRColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn PointBankColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn ActivationPointBankColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn InstallDateColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn TechSelfInspectionPercentageColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn TechManagerInspectionPercentageColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn TechRegionalInspectionPercentageColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn IgnoreForRepReconciliationColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn IgnoreForTechReconciliationColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[43]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountStateID = @"AccountStateID";
			public static readonly string AccountID = @"AccountID";
			public static readonly string CustomerName = @"CustomerName";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string CreditedTeamLocationID = @"CreditedTeamLocationID";
			public static readonly string GPSalesRepID = @"GPSalesRepID";
			public static readonly string GPTechnicianID = @"GPTechnicianID";
			public static readonly string StateAB = @"StateAB";
			public static readonly string CreditScore = @"CreditScore";
			public static readonly string HasRepFrontEndHold = @"HasRepFrontEndHold";
			public static readonly string HasRepBackEndHold = @"HasRepBackEndHold";
			public static readonly string HasTechFrontEndHold = @"HasTechFrontEndHold";
			public static readonly string HasTechBackEndHold = @"HasTechBackEndHold";
			public static readonly string IsCanceled = @"IsCanceled";
			public static readonly string IsCellAccount = @"IsCellAccount";
			public static readonly string IsFriendsAndFamily = @"IsFriendsAndFamily";
			public static readonly string IsActivationWaive = @"IsActivationWaive";
			public static readonly string ActivationFee = @"ActivationFee";
			public static readonly string IsActivationUpFront = @"IsActivationUpFront";
			public static readonly string IsAutoPay = @"IsAutoPay";
			public static readonly string IsPlatinumInteractive = @"IsPlatinumInteractive";
			public static readonly string IsTwoWayCell = @"IsTwoWayCell";
			public static readonly string IsExtendedContract = @"IsExtendedContract";
			public static readonly string IsShortenedContract = @"IsShortenedContract";
			public static readonly string IsInstalled = @"IsInstalled";
			public static readonly string IsSubmittedToGP = @"IsSubmittedToGP";
			public static readonly string IsDelinquent = @"IsDelinquent";
			public static readonly string IsSaved = @"IsSaved";
			public static readonly string IsMissingInvoiceFee = @"IsMissingInvoiceFee";
			public static readonly string IsCommercial = @"IsCommercial";
			public static readonly string HasServiceTicket = @"HasServiceTicket";
			public static readonly string RMR = @"RMR";
			public static readonly string FullPriceRMR = @"FullPriceRMR";
			public static readonly string BaseRMR = @"BaseRMR";
			public static readonly string PointBank = @"PointBank";
			public static readonly string ActivationPointBank = @"ActivationPointBank";
			public static readonly string InstallDate = @"InstallDate";
			public static readonly string TechSelfInspectionPercentage = @"TechSelfInspectionPercentage";
			public static readonly string TechManagerInspectionPercentage = @"TechManagerInspectionPercentage";
			public static readonly string TechRegionalInspectionPercentage = @"TechRegionalInspectionPercentage";
			public static readonly string IgnoreForRepReconciliation = @"IgnoreForRepReconciliation";
			public static readonly string IgnoreForTechReconciliation = @"IgnoreForTechReconciliation";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountStateID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendAccountMappingCollection _PR_BackendAccountMappingsCol;
		//Relationship: FK_PR_BackendAccountMappings_PR_AccountStates
		public PR_BackendAccountMappingCollection PR_BackendAccountMappingsCol
		{
			get
			{
				if(_PR_BackendAccountMappingsCol == null) {
					_PR_BackendAccountMappingsCol = new PR_BackendAccountMappingCollection();
					_PR_BackendAccountMappingsCol.LoadAndCloseReader(PR_BackendAccountMapping.Query()
						.WHERE(PR_BackendAccountMapping.Columns.AccountStateID, AccountStateID).ExecuteReader());
				}
				return _PR_BackendAccountMappingsCol;
			}
		}

		private PR_BackendTransactionCollection _PR_BackendTransactionsCol;
		//Relationship: FK_PR_BackendTransactions_PR_AccountStates
		public PR_BackendTransactionCollection PR_BackendTransactionsCol
		{
			get
			{
				if(_PR_BackendTransactionsCol == null) {
					_PR_BackendTransactionsCol = new PR_BackendTransactionCollection();
					_PR_BackendTransactionsCol.LoadAndCloseReader(PR_BackendTransaction.Query()
						.WHERE(PR_BackendTransaction.Columns.AccountStateID, AccountStateID).ExecuteReader());
				}
				return _PR_BackendTransactionsCol;
			}
		}

		private PR_TransactionCollection _PR_TransactionsCol;
		//Relationship: FK_PR_Transactions_PR_AccountStates
		public PR_TransactionCollection PR_TransactionsCol
		{
			get
			{
				if(_PR_TransactionsCol == null) {
					_PR_TransactionsCol = new PR_TransactionCollection();
					_PR_TransactionsCol.LoadAndCloseReader(PR_Transaction.Query()
						.WHERE(PR_Transaction.Columns.AccountStateID, AccountStateID).ExecuteReader());
				}
				return _PR_TransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_AccountsToIgnore class.
	/// </summary>
	[DataContract]
	public partial class PR_AccountsToIgnoreCollection : ActiveList<PR_AccountsToIgnore, PR_AccountsToIgnoreCollection>
	{
		public static PR_AccountsToIgnoreCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_AccountsToIgnoreCollection result = new PR_AccountsToIgnoreCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_AccountsToIgnore item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_AccountsToIgnore table.
	/// </summary>
	[DataContract]
	public partial class PR_AccountsToIgnore : ActiveRecord<PR_AccountsToIgnore>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_AccountsToIgnore()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_AccountsToIgnore", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIgnoreForRepReconciliation = new TableSchema.TableColumn(schema);
				colvarIgnoreForRepReconciliation.ColumnName = "IgnoreForRepReconciliation";
				colvarIgnoreForRepReconciliation.DataType = DbType.Boolean;
				colvarIgnoreForRepReconciliation.MaxLength = 0;
				colvarIgnoreForRepReconciliation.AutoIncrement = false;
				colvarIgnoreForRepReconciliation.IsNullable = false;
				colvarIgnoreForRepReconciliation.IsPrimaryKey = false;
				colvarIgnoreForRepReconciliation.IsForeignKey = false;
				colvarIgnoreForRepReconciliation.IsReadOnly = false;
				colvarIgnoreForRepReconciliation.DefaultSetting = @"((0))";
				colvarIgnoreForRepReconciliation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIgnoreForRepReconciliation);

				TableSchema.TableColumn colvarIgnoreForTechReconciliation = new TableSchema.TableColumn(schema);
				colvarIgnoreForTechReconciliation.ColumnName = "IgnoreForTechReconciliation";
				colvarIgnoreForTechReconciliation.DataType = DbType.Boolean;
				colvarIgnoreForTechReconciliation.MaxLength = 0;
				colvarIgnoreForTechReconciliation.AutoIncrement = false;
				colvarIgnoreForTechReconciliation.IsNullable = false;
				colvarIgnoreForTechReconciliation.IsPrimaryKey = false;
				colvarIgnoreForTechReconciliation.IsForeignKey = false;
				colvarIgnoreForTechReconciliation.IsReadOnly = false;
				colvarIgnoreForTechReconciliation.DefaultSetting = @"";
				colvarIgnoreForTechReconciliation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIgnoreForTechReconciliation);

				TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
				colvarComment.ColumnName = "Comment";
				colvarComment.DataType = DbType.String;
				colvarComment.MaxLength = -1;
				colvarComment.AutoIncrement = false;
				colvarComment.IsNullable = true;
				colvarComment.IsPrimaryKey = false;
				colvarComment.IsForeignKey = false;
				colvarComment.IsReadOnly = false;
				colvarComment.DefaultSetting = @"";
				colvarComment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_AccountsToIgnore",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_AccountsToIgnore LoadFrom(PR_AccountsToIgnore item)
		{
			PR_AccountsToIgnore result = new PR_AccountsToIgnore();
			if (item.AccountID != default(int)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public bool IgnoreForRepReconciliation {
			get { return GetColumnValue<bool>(Columns.IgnoreForRepReconciliation); }
			set {
				SetColumnValue(Columns.IgnoreForRepReconciliation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IgnoreForRepReconciliation));
			}
		}
		[DataMember]
		public bool IgnoreForTechReconciliation {
			get { return GetColumnValue<bool>(Columns.IgnoreForTechReconciliation); }
			set {
				SetColumnValue(Columns.IgnoreForTechReconciliation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IgnoreForTechReconciliation));
			}
		}
		[DataMember]
		public string Comment {
			get { return GetColumnValue<string>(Columns.Comment); }
			set {
				SetColumnValue(Columns.Comment, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comment));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IgnoreForRepReconciliationColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IgnoreForTechReconciliationColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CommentColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string IgnoreForRepReconciliation = @"IgnoreForRepReconciliation";
			public static readonly string IgnoreForTechReconciliation = @"IgnoreForTechReconciliation";
			public static readonly string Comment = @"Comment";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_AutomaticTransaction class.
	/// </summary>
	[DataContract]
	public partial class PR_AutomaticTransactionCollection : ActiveList<PR_AutomaticTransaction, PR_AutomaticTransactionCollection>
	{
		public static PR_AutomaticTransactionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_AutomaticTransactionCollection result = new PR_AutomaticTransactionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_AutomaticTransaction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_AutomaticTransactions table.
	/// </summary>
	[DataContract]
	public partial class PR_AutomaticTransaction : ActiveRecord<PR_AutomaticTransaction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_AutomaticTransaction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_AutomaticTransactions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAutomaticTransactionID = new TableSchema.TableColumn(schema);
				colvarAutomaticTransactionID.ColumnName = "AutomaticTransactionID";
				colvarAutomaticTransactionID.DataType = DbType.Int32;
				colvarAutomaticTransactionID.MaxLength = 0;
				colvarAutomaticTransactionID.AutoIncrement = true;
				colvarAutomaticTransactionID.IsNullable = false;
				colvarAutomaticTransactionID.IsPrimaryKey = true;
				colvarAutomaticTransactionID.IsForeignKey = false;
				colvarAutomaticTransactionID.IsReadOnly = false;
				colvarAutomaticTransactionID.DefaultSetting = @"";
				colvarAutomaticTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAutomaticTransactionID);

				TableSchema.TableColumn colvarTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarTransactionTypeID.ColumnName = "TransactionTypeID";
				colvarTransactionTypeID.DataType = DbType.Int32;
				colvarTransactionTypeID.MaxLength = 0;
				colvarTransactionTypeID.AutoIncrement = false;
				colvarTransactionTypeID.IsNullable = false;
				colvarTransactionTypeID.IsPrimaryKey = false;
				colvarTransactionTypeID.IsForeignKey = false;
				colvarTransactionTypeID.IsReadOnly = false;
				colvarTransactionTypeID.DefaultSetting = @"";
				colvarTransactionTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionTypeID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"((0))";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 20;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"(getdate())";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_AutomaticTransactions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_AutomaticTransaction LoadFrom(PR_AutomaticTransaction item)
		{
			PR_AutomaticTransaction result = new PR_AutomaticTransaction();
			if (item.AutomaticTransactionID != default(int)) {
				result.LoadByKey(item.AutomaticTransactionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AutomaticTransactionID {
			get { return GetColumnValue<int>(Columns.AutomaticTransactionID); }
			set {
				SetColumnValue(Columns.AutomaticTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AutomaticTransactionID));
			}
		}
		[DataMember]
		public int TransactionTypeID {
			get { return GetColumnValue<int>(Columns.TransactionTypeID); }
			set {
				SetColumnValue(Columns.TransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionTypeID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AutomaticTransactionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AutomaticTransactionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TransactionTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AutomaticTransactionID = @"AutomaticTransactionID";
			public static readonly string TransactionTypeID = @"TransactionTypeID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Amount = @"Amount";
			public static readonly string Comments = @"Comments";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AutomaticTransactionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendAccountCalculation class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAccountCalculationCollection : ActiveList<PR_BackendAccountCalculation, PR_BackendAccountCalculationCollection>
	{
		public static PR_BackendAccountCalculationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendAccountCalculationCollection result = new PR_BackendAccountCalculationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendAccountCalculation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendAccountCalculations table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAccountCalculation : ActiveRecord<PR_BackendAccountCalculation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendAccountCalculation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendAccountCalculations", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendCalculationID = new TableSchema.TableColumn(schema);
				colvarBackendCalculationID.ColumnName = "BackendCalculationID";
				colvarBackendCalculationID.DataType = DbType.Int32;
				colvarBackendCalculationID.MaxLength = 0;
				colvarBackendCalculationID.AutoIncrement = true;
				colvarBackendCalculationID.IsNullable = false;
				colvarBackendCalculationID.IsPrimaryKey = true;
				colvarBackendCalculationID.IsForeignKey = false;
				colvarBackendCalculationID.IsReadOnly = false;
				colvarBackendCalculationID.DefaultSetting = @"";
				colvarBackendCalculationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendCalculationID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarCustomerName = new TableSchema.TableColumn(schema);
				colvarCustomerName.ColumnName = "CustomerName";
				colvarCustomerName.DataType = DbType.String;
				colvarCustomerName.MaxLength = 100;
				colvarCustomerName.AutoIncrement = false;
				colvarCustomerName.IsNullable = false;
				colvarCustomerName.IsPrimaryKey = false;
				colvarCustomerName.IsForeignKey = false;
				colvarCustomerName.IsReadOnly = false;
				colvarCustomerName.DefaultSetting = @"";
				colvarCustomerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerName);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = false;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarCreditedTeamLocationID = new TableSchema.TableColumn(schema);
				colvarCreditedTeamLocationID.ColumnName = "CreditedTeamLocationID";
				colvarCreditedTeamLocationID.DataType = DbType.Int32;
				colvarCreditedTeamLocationID.MaxLength = 0;
				colvarCreditedTeamLocationID.AutoIncrement = false;
				colvarCreditedTeamLocationID.IsNullable = true;
				colvarCreditedTeamLocationID.IsPrimaryKey = false;
				colvarCreditedTeamLocationID.IsForeignKey = false;
				colvarCreditedTeamLocationID.IsReadOnly = false;
				colvarCreditedTeamLocationID.DefaultSetting = @"";
				colvarCreditedTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditedTeamLocationID);

				TableSchema.TableColumn colvarGPSalesRepID = new TableSchema.TableColumn(schema);
				colvarGPSalesRepID.ColumnName = "GPSalesRepID";
				colvarGPSalesRepID.DataType = DbType.String;
				colvarGPSalesRepID.MaxLength = 30;
				colvarGPSalesRepID.AutoIncrement = false;
				colvarGPSalesRepID.IsNullable = false;
				colvarGPSalesRepID.IsPrimaryKey = false;
				colvarGPSalesRepID.IsForeignKey = false;
				colvarGPSalesRepID.IsReadOnly = false;
				colvarGPSalesRepID.DefaultSetting = @"";
				colvarGPSalesRepID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPSalesRepID);

				TableSchema.TableColumn colvarGPTechnicianID = new TableSchema.TableColumn(schema);
				colvarGPTechnicianID.ColumnName = "GPTechnicianID";
				colvarGPTechnicianID.DataType = DbType.String;
				colvarGPTechnicianID.MaxLength = 30;
				colvarGPTechnicianID.AutoIncrement = false;
				colvarGPTechnicianID.IsNullable = false;
				colvarGPTechnicianID.IsPrimaryKey = false;
				colvarGPTechnicianID.IsForeignKey = false;
				colvarGPTechnicianID.IsReadOnly = false;
				colvarGPTechnicianID.DefaultSetting = @"";
				colvarGPTechnicianID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPTechnicianID);

				TableSchema.TableColumn colvarCreditScore = new TableSchema.TableColumn(schema);
				colvarCreditScore.ColumnName = "CreditScore";
				colvarCreditScore.DataType = DbType.Int32;
				colvarCreditScore.MaxLength = 0;
				colvarCreditScore.AutoIncrement = false;
				colvarCreditScore.IsNullable = false;
				colvarCreditScore.IsPrimaryKey = false;
				colvarCreditScore.IsForeignKey = false;
				colvarCreditScore.IsReadOnly = false;
				colvarCreditScore.DefaultSetting = @"";
				colvarCreditScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScore);

				TableSchema.TableColumn colvarHasRepBackEndHold = new TableSchema.TableColumn(schema);
				colvarHasRepBackEndHold.ColumnName = "HasRepBackEndHold";
				colvarHasRepBackEndHold.DataType = DbType.Boolean;
				colvarHasRepBackEndHold.MaxLength = 0;
				colvarHasRepBackEndHold.AutoIncrement = false;
				colvarHasRepBackEndHold.IsNullable = false;
				colvarHasRepBackEndHold.IsPrimaryKey = false;
				colvarHasRepBackEndHold.IsForeignKey = false;
				colvarHasRepBackEndHold.IsReadOnly = false;
				colvarHasRepBackEndHold.DefaultSetting = @"";
				colvarHasRepBackEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasRepBackEndHold);

				TableSchema.TableColumn colvarHasTechBackEndHold = new TableSchema.TableColumn(schema);
				colvarHasTechBackEndHold.ColumnName = "HasTechBackEndHold";
				colvarHasTechBackEndHold.DataType = DbType.Boolean;
				colvarHasTechBackEndHold.MaxLength = 0;
				colvarHasTechBackEndHold.AutoIncrement = false;
				colvarHasTechBackEndHold.IsNullable = false;
				colvarHasTechBackEndHold.IsPrimaryKey = false;
				colvarHasTechBackEndHold.IsForeignKey = false;
				colvarHasTechBackEndHold.IsReadOnly = false;
				colvarHasTechBackEndHold.DefaultSetting = @"";
				colvarHasTechBackEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasTechBackEndHold);

				TableSchema.TableColumn colvarIsCanceled = new TableSchema.TableColumn(schema);
				colvarIsCanceled.ColumnName = "IsCanceled";
				colvarIsCanceled.DataType = DbType.Boolean;
				colvarIsCanceled.MaxLength = 0;
				colvarIsCanceled.AutoIncrement = false;
				colvarIsCanceled.IsNullable = false;
				colvarIsCanceled.IsPrimaryKey = false;
				colvarIsCanceled.IsForeignKey = false;
				colvarIsCanceled.IsReadOnly = false;
				colvarIsCanceled.DefaultSetting = @"";
				colvarIsCanceled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCanceled);

				TableSchema.TableColumn colvarIsCellAccount = new TableSchema.TableColumn(schema);
				colvarIsCellAccount.ColumnName = "IsCellAccount";
				colvarIsCellAccount.DataType = DbType.Boolean;
				colvarIsCellAccount.MaxLength = 0;
				colvarIsCellAccount.AutoIncrement = false;
				colvarIsCellAccount.IsNullable = false;
				colvarIsCellAccount.IsPrimaryKey = false;
				colvarIsCellAccount.IsForeignKey = false;
				colvarIsCellAccount.IsReadOnly = false;
				colvarIsCellAccount.DefaultSetting = @"";
				colvarIsCellAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCellAccount);

				TableSchema.TableColumn colvarIsFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarIsFriendsAndFamily.ColumnName = "IsFriendsAndFamily";
				colvarIsFriendsAndFamily.DataType = DbType.Boolean;
				colvarIsFriendsAndFamily.MaxLength = 0;
				colvarIsFriendsAndFamily.AutoIncrement = false;
				colvarIsFriendsAndFamily.IsNullable = false;
				colvarIsFriendsAndFamily.IsPrimaryKey = false;
				colvarIsFriendsAndFamily.IsForeignKey = false;
				colvarIsFriendsAndFamily.IsReadOnly = false;
				colvarIsFriendsAndFamily.DefaultSetting = @"";
				colvarIsFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsFriendsAndFamily);

				TableSchema.TableColumn colvarHasActivationFee = new TableSchema.TableColumn(schema);
				colvarHasActivationFee.ColumnName = "HasActivationFee";
				colvarHasActivationFee.DataType = DbType.Boolean;
				colvarHasActivationFee.MaxLength = 0;
				colvarHasActivationFee.AutoIncrement = false;
				colvarHasActivationFee.IsNullable = false;
				colvarHasActivationFee.IsPrimaryKey = false;
				colvarHasActivationFee.IsForeignKey = false;
				colvarHasActivationFee.IsReadOnly = false;
				colvarHasActivationFee.DefaultSetting = @"";
				colvarHasActivationFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasActivationFee);

				TableSchema.TableColumn colvarIsAutoPay = new TableSchema.TableColumn(schema);
				colvarIsAutoPay.ColumnName = "IsAutoPay";
				colvarIsAutoPay.DataType = DbType.Boolean;
				colvarIsAutoPay.MaxLength = 0;
				colvarIsAutoPay.AutoIncrement = false;
				colvarIsAutoPay.IsNullable = false;
				colvarIsAutoPay.IsPrimaryKey = false;
				colvarIsAutoPay.IsForeignKey = false;
				colvarIsAutoPay.IsReadOnly = false;
				colvarIsAutoPay.DefaultSetting = @"";
				colvarIsAutoPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAutoPay);

				TableSchema.TableColumn colvarIsPlatinumInteractive = new TableSchema.TableColumn(schema);
				colvarIsPlatinumInteractive.ColumnName = "IsPlatinumInteractive";
				colvarIsPlatinumInteractive.DataType = DbType.Boolean;
				colvarIsPlatinumInteractive.MaxLength = 0;
				colvarIsPlatinumInteractive.AutoIncrement = false;
				colvarIsPlatinumInteractive.IsNullable = false;
				colvarIsPlatinumInteractive.IsPrimaryKey = false;
				colvarIsPlatinumInteractive.IsForeignKey = false;
				colvarIsPlatinumInteractive.IsReadOnly = false;
				colvarIsPlatinumInteractive.DefaultSetting = @"";
				colvarIsPlatinumInteractive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPlatinumInteractive);

				TableSchema.TableColumn colvarIsExtendedContract = new TableSchema.TableColumn(schema);
				colvarIsExtendedContract.ColumnName = "IsExtendedContract";
				colvarIsExtendedContract.DataType = DbType.Boolean;
				colvarIsExtendedContract.MaxLength = 0;
				colvarIsExtendedContract.AutoIncrement = false;
				colvarIsExtendedContract.IsNullable = false;
				colvarIsExtendedContract.IsPrimaryKey = false;
				colvarIsExtendedContract.IsForeignKey = false;
				colvarIsExtendedContract.IsReadOnly = false;
				colvarIsExtendedContract.DefaultSetting = @"";
				colvarIsExtendedContract.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExtendedContract);

				TableSchema.TableColumn colvarIsShortenedContract = new TableSchema.TableColumn(schema);
				colvarIsShortenedContract.ColumnName = "IsShortenedContract";
				colvarIsShortenedContract.DataType = DbType.Boolean;
				colvarIsShortenedContract.MaxLength = 0;
				colvarIsShortenedContract.AutoIncrement = false;
				colvarIsShortenedContract.IsNullable = false;
				colvarIsShortenedContract.IsPrimaryKey = false;
				colvarIsShortenedContract.IsForeignKey = false;
				colvarIsShortenedContract.IsReadOnly = false;
				colvarIsShortenedContract.DefaultSetting = @"((0))";
				colvarIsShortenedContract.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsShortenedContract);

				TableSchema.TableColumn colvarIsInstalled = new TableSchema.TableColumn(schema);
				colvarIsInstalled.ColumnName = "IsInstalled";
				colvarIsInstalled.DataType = DbType.Boolean;
				colvarIsInstalled.MaxLength = 0;
				colvarIsInstalled.AutoIncrement = false;
				colvarIsInstalled.IsNullable = false;
				colvarIsInstalled.IsPrimaryKey = false;
				colvarIsInstalled.IsForeignKey = false;
				colvarIsInstalled.IsReadOnly = false;
				colvarIsInstalled.DefaultSetting = @"";
				colvarIsInstalled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsInstalled);

				TableSchema.TableColumn colvarIsSubmittedToGP = new TableSchema.TableColumn(schema);
				colvarIsSubmittedToGP.ColumnName = "IsSubmittedToGP";
				colvarIsSubmittedToGP.DataType = DbType.Boolean;
				colvarIsSubmittedToGP.MaxLength = 0;
				colvarIsSubmittedToGP.AutoIncrement = false;
				colvarIsSubmittedToGP.IsNullable = false;
				colvarIsSubmittedToGP.IsPrimaryKey = false;
				colvarIsSubmittedToGP.IsForeignKey = false;
				colvarIsSubmittedToGP.IsReadOnly = false;
				colvarIsSubmittedToGP.DefaultSetting = @"";
				colvarIsSubmittedToGP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSubmittedToGP);

				TableSchema.TableColumn colvarIsDelinquent = new TableSchema.TableColumn(schema);
				colvarIsDelinquent.ColumnName = "IsDelinquent";
				colvarIsDelinquent.DataType = DbType.Boolean;
				colvarIsDelinquent.MaxLength = 0;
				colvarIsDelinquent.AutoIncrement = false;
				colvarIsDelinquent.IsNullable = false;
				colvarIsDelinquent.IsPrimaryKey = false;
				colvarIsDelinquent.IsForeignKey = false;
				colvarIsDelinquent.IsReadOnly = false;
				colvarIsDelinquent.DefaultSetting = @"";
				colvarIsDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDelinquent);

				TableSchema.TableColumn colvarIsPayable = new TableSchema.TableColumn(schema);
				colvarIsPayable.ColumnName = "IsPayable";
				colvarIsPayable.DataType = DbType.Boolean;
				colvarIsPayable.MaxLength = 0;
				colvarIsPayable.AutoIncrement = false;
				colvarIsPayable.IsNullable = false;
				colvarIsPayable.IsPrimaryKey = false;
				colvarIsPayable.IsForeignKey = false;
				colvarIsPayable.IsReadOnly = false;
				colvarIsPayable.DefaultSetting = @"";
				colvarIsPayable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPayable);

				TableSchema.TableColumn colvarIsDigital = new TableSchema.TableColumn(schema);
				colvarIsDigital.ColumnName = "IsDigital";
				colvarIsDigital.DataType = DbType.Boolean;
				colvarIsDigital.MaxLength = 0;
				colvarIsDigital.AutoIncrement = false;
				colvarIsDigital.IsNullable = false;
				colvarIsDigital.IsPrimaryKey = false;
				colvarIsDigital.IsForeignKey = false;
				colvarIsDigital.IsReadOnly = false;
				colvarIsDigital.DefaultSetting = @"";
				colvarIsDigital.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDigital);

				TableSchema.TableColumn colvarIsSaved = new TableSchema.TableColumn(schema);
				colvarIsSaved.ColumnName = "IsSaved";
				colvarIsSaved.DataType = DbType.Boolean;
				colvarIsSaved.MaxLength = 0;
				colvarIsSaved.AutoIncrement = false;
				colvarIsSaved.IsNullable = false;
				colvarIsSaved.IsPrimaryKey = false;
				colvarIsSaved.IsForeignKey = false;
				colvarIsSaved.IsReadOnly = false;
				colvarIsSaved.DefaultSetting = @"((0))";
				colvarIsSaved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSaved);

				TableSchema.TableColumn colvarIsMissingInvoiceFee = new TableSchema.TableColumn(schema);
				colvarIsMissingInvoiceFee.ColumnName = "IsMissingInvoiceFee";
				colvarIsMissingInvoiceFee.DataType = DbType.Boolean;
				colvarIsMissingInvoiceFee.MaxLength = 0;
				colvarIsMissingInvoiceFee.AutoIncrement = false;
				colvarIsMissingInvoiceFee.IsNullable = false;
				colvarIsMissingInvoiceFee.IsPrimaryKey = false;
				colvarIsMissingInvoiceFee.IsForeignKey = false;
				colvarIsMissingInvoiceFee.IsReadOnly = false;
				colvarIsMissingInvoiceFee.DefaultSetting = @"((0))";
				colvarIsMissingInvoiceFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMissingInvoiceFee);

				TableSchema.TableColumn colvarIsCommercial = new TableSchema.TableColumn(schema);
				colvarIsCommercial.ColumnName = "IsCommercial";
				colvarIsCommercial.DataType = DbType.Boolean;
				colvarIsCommercial.MaxLength = 0;
				colvarIsCommercial.AutoIncrement = false;
				colvarIsCommercial.IsNullable = false;
				colvarIsCommercial.IsPrimaryKey = false;
				colvarIsCommercial.IsForeignKey = false;
				colvarIsCommercial.IsReadOnly = false;
				colvarIsCommercial.DefaultSetting = @"((0))";
				colvarIsCommercial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCommercial);

				TableSchema.TableColumn colvarHasServiceTicket = new TableSchema.TableColumn(schema);
				colvarHasServiceTicket.ColumnName = "HasServiceTicket";
				colvarHasServiceTicket.DataType = DbType.Boolean;
				colvarHasServiceTicket.MaxLength = 0;
				colvarHasServiceTicket.AutoIncrement = false;
				colvarHasServiceTicket.IsNullable = false;
				colvarHasServiceTicket.IsPrimaryKey = false;
				colvarHasServiceTicket.IsForeignKey = false;
				colvarHasServiceTicket.IsReadOnly = false;
				colvarHasServiceTicket.DefaultSetting = @"((0))";
				colvarHasServiceTicket.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasServiceTicket);

				TableSchema.TableColumn colvarTechSelfInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarTechSelfInspectionPercentage.ColumnName = "TechSelfInspectionPercentage";
				colvarTechSelfInspectionPercentage.DataType = DbType.Double;
				colvarTechSelfInspectionPercentage.MaxLength = 0;
				colvarTechSelfInspectionPercentage.AutoIncrement = false;
				colvarTechSelfInspectionPercentage.IsNullable = false;
				colvarTechSelfInspectionPercentage.IsPrimaryKey = false;
				colvarTechSelfInspectionPercentage.IsForeignKey = false;
				colvarTechSelfInspectionPercentage.IsReadOnly = false;
				colvarTechSelfInspectionPercentage.DefaultSetting = @"((0))";
				colvarTechSelfInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechSelfInspectionPercentage);

				TableSchema.TableColumn colvarTechManagerInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarTechManagerInspectionPercentage.ColumnName = "TechManagerInspectionPercentage";
				colvarTechManagerInspectionPercentage.DataType = DbType.Double;
				colvarTechManagerInspectionPercentage.MaxLength = 0;
				colvarTechManagerInspectionPercentage.AutoIncrement = false;
				colvarTechManagerInspectionPercentage.IsNullable = false;
				colvarTechManagerInspectionPercentage.IsPrimaryKey = false;
				colvarTechManagerInspectionPercentage.IsForeignKey = false;
				colvarTechManagerInspectionPercentage.IsReadOnly = false;
				colvarTechManagerInspectionPercentage.DefaultSetting = @"((0))";
				colvarTechManagerInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechManagerInspectionPercentage);

				TableSchema.TableColumn colvarRMR = new TableSchema.TableColumn(schema);
				colvarRMR.ColumnName = "RMR";
				colvarRMR.DataType = DbType.Currency;
				colvarRMR.MaxLength = 0;
				colvarRMR.AutoIncrement = false;
				colvarRMR.IsNullable = false;
				colvarRMR.IsPrimaryKey = false;
				colvarRMR.IsForeignKey = false;
				colvarRMR.IsReadOnly = false;
				colvarRMR.DefaultSetting = @"((0))";
				colvarRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRMR);

				TableSchema.TableColumn colvarRMRDifference = new TableSchema.TableColumn(schema);
				colvarRMRDifference.ColumnName = "RMRDifference";
				colvarRMRDifference.DataType = DbType.Currency;
				colvarRMRDifference.MaxLength = 0;
				colvarRMRDifference.AutoIncrement = false;
				colvarRMRDifference.IsNullable = false;
				colvarRMRDifference.IsPrimaryKey = false;
				colvarRMRDifference.IsForeignKey = false;
				colvarRMRDifference.IsReadOnly = false;
				colvarRMRDifference.DefaultSetting = @"";
				colvarRMRDifference.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRMRDifference);

				TableSchema.TableColumn colvarPointBank = new TableSchema.TableColumn(schema);
				colvarPointBank.ColumnName = "PointBank";
				colvarPointBank.DataType = DbType.Decimal;
				colvarPointBank.MaxLength = 0;
				colvarPointBank.AutoIncrement = false;
				colvarPointBank.IsNullable = false;
				colvarPointBank.IsPrimaryKey = false;
				colvarPointBank.IsForeignKey = false;
				colvarPointBank.IsReadOnly = false;
				colvarPointBank.DefaultSetting = @"";
				colvarPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPointBank);

				TableSchema.TableColumn colvarInstallDate = new TableSchema.TableColumn(schema);
				colvarInstallDate.ColumnName = "InstallDate";
				colvarInstallDate.DataType = DbType.DateTime;
				colvarInstallDate.MaxLength = 0;
				colvarInstallDate.AutoIncrement = false;
				colvarInstallDate.IsNullable = true;
				colvarInstallDate.IsPrimaryKey = false;
				colvarInstallDate.IsForeignKey = false;
				colvarInstallDate.IsReadOnly = false;
				colvarInstallDate.DefaultSetting = @"";
				colvarInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallDate);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"(getdate())";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendAccountCalculations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendAccountCalculation LoadFrom(PR_BackendAccountCalculation item)
		{
			PR_BackendAccountCalculation result = new PR_BackendAccountCalculation();
			if (item.BackendCalculationID != default(int)) {
				result.LoadByKey(item.BackendCalculationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendCalculationID {
			get { return GetColumnValue<int>(Columns.BackendCalculationID); }
			set {
				SetColumnValue(Columns.BackendCalculationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendCalculationID));
			}
		}
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public string CustomerName {
			get { return GetColumnValue<string>(Columns.CustomerName); }
			set {
				SetColumnValue(Columns.CustomerName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerName));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int? CreditedTeamLocationID {
			get { return GetColumnValue<int?>(Columns.CreditedTeamLocationID); }
			set {
				SetColumnValue(Columns.CreditedTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditedTeamLocationID));
			}
		}
		[DataMember]
		public string GPSalesRepID {
			get { return GetColumnValue<string>(Columns.GPSalesRepID); }
			set {
				SetColumnValue(Columns.GPSalesRepID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPSalesRepID));
			}
		}
		[DataMember]
		public string GPTechnicianID {
			get { return GetColumnValue<string>(Columns.GPTechnicianID); }
			set {
				SetColumnValue(Columns.GPTechnicianID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPTechnicianID));
			}
		}
		[DataMember]
		public int CreditScore {
			get { return GetColumnValue<int>(Columns.CreditScore); }
			set {
				SetColumnValue(Columns.CreditScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScore));
			}
		}
		[DataMember]
		public bool HasRepBackEndHold {
			get { return GetColumnValue<bool>(Columns.HasRepBackEndHold); }
			set {
				SetColumnValue(Columns.HasRepBackEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasRepBackEndHold));
			}
		}
		[DataMember]
		public bool HasTechBackEndHold {
			get { return GetColumnValue<bool>(Columns.HasTechBackEndHold); }
			set {
				SetColumnValue(Columns.HasTechBackEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasTechBackEndHold));
			}
		}
		[DataMember]
		public bool IsCanceled {
			get { return GetColumnValue<bool>(Columns.IsCanceled); }
			set {
				SetColumnValue(Columns.IsCanceled, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCanceled));
			}
		}
		[DataMember]
		public bool IsCellAccount {
			get { return GetColumnValue<bool>(Columns.IsCellAccount); }
			set {
				SetColumnValue(Columns.IsCellAccount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCellAccount));
			}
		}
		[DataMember]
		public bool IsFriendsAndFamily {
			get { return GetColumnValue<bool>(Columns.IsFriendsAndFamily); }
			set {
				SetColumnValue(Columns.IsFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsFriendsAndFamily));
			}
		}
		[DataMember]
		public bool HasActivationFee {
			get { return GetColumnValue<bool>(Columns.HasActivationFee); }
			set {
				SetColumnValue(Columns.HasActivationFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasActivationFee));
			}
		}
		[DataMember]
		public bool IsAutoPay {
			get { return GetColumnValue<bool>(Columns.IsAutoPay); }
			set {
				SetColumnValue(Columns.IsAutoPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAutoPay));
			}
		}
		[DataMember]
		public bool IsPlatinumInteractive {
			get { return GetColumnValue<bool>(Columns.IsPlatinumInteractive); }
			set {
				SetColumnValue(Columns.IsPlatinumInteractive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPlatinumInteractive));
			}
		}
		[DataMember]
		public bool IsExtendedContract {
			get { return GetColumnValue<bool>(Columns.IsExtendedContract); }
			set {
				SetColumnValue(Columns.IsExtendedContract, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsExtendedContract));
			}
		}
		[DataMember]
		public bool IsShortenedContract {
			get { return GetColumnValue<bool>(Columns.IsShortenedContract); }
			set {
				SetColumnValue(Columns.IsShortenedContract, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsShortenedContract));
			}
		}
		[DataMember]
		public bool IsInstalled {
			get { return GetColumnValue<bool>(Columns.IsInstalled); }
			set {
				SetColumnValue(Columns.IsInstalled, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsInstalled));
			}
		}
		[DataMember]
		public bool IsSubmittedToGP {
			get { return GetColumnValue<bool>(Columns.IsSubmittedToGP); }
			set {
				SetColumnValue(Columns.IsSubmittedToGP, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSubmittedToGP));
			}
		}
		[DataMember]
		public bool IsDelinquent {
			get { return GetColumnValue<bool>(Columns.IsDelinquent); }
			set {
				SetColumnValue(Columns.IsDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDelinquent));
			}
		}
		[DataMember]
		public bool IsPayable {
			get { return GetColumnValue<bool>(Columns.IsPayable); }
			set {
				SetColumnValue(Columns.IsPayable, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPayable));
			}
		}
		[DataMember]
		public bool IsDigital {
			get { return GetColumnValue<bool>(Columns.IsDigital); }
			set {
				SetColumnValue(Columns.IsDigital, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDigital));
			}
		}
		[DataMember]
		public bool IsSaved {
			get { return GetColumnValue<bool>(Columns.IsSaved); }
			set {
				SetColumnValue(Columns.IsSaved, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSaved));
			}
		}
		[DataMember]
		public bool IsMissingInvoiceFee {
			get { return GetColumnValue<bool>(Columns.IsMissingInvoiceFee); }
			set {
				SetColumnValue(Columns.IsMissingInvoiceFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsMissingInvoiceFee));
			}
		}
		[DataMember]
		public bool IsCommercial {
			get { return GetColumnValue<bool>(Columns.IsCommercial); }
			set {
				SetColumnValue(Columns.IsCommercial, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCommercial));
			}
		}
		[DataMember]
		public bool HasServiceTicket {
			get { return GetColumnValue<bool>(Columns.HasServiceTicket); }
			set {
				SetColumnValue(Columns.HasServiceTicket, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasServiceTicket));
			}
		}
		[DataMember]
		public double TechSelfInspectionPercentage {
			get { return GetColumnValue<double>(Columns.TechSelfInspectionPercentage); }
			set {
				SetColumnValue(Columns.TechSelfInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechSelfInspectionPercentage));
			}
		}
		[DataMember]
		public double TechManagerInspectionPercentage {
			get { return GetColumnValue<double>(Columns.TechManagerInspectionPercentage); }
			set {
				SetColumnValue(Columns.TechManagerInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechManagerInspectionPercentage));
			}
		}
		[DataMember]
		public decimal RMR {
			get { return GetColumnValue<decimal>(Columns.RMR); }
			set {
				SetColumnValue(Columns.RMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RMR));
			}
		}
		[DataMember]
		public decimal RMRDifference {
			get { return GetColumnValue<decimal>(Columns.RMRDifference); }
			set {
				SetColumnValue(Columns.RMRDifference, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RMRDifference));
			}
		}
		[DataMember]
		public decimal PointBank {
			get { return GetColumnValue<decimal>(Columns.PointBank); }
			set {
				SetColumnValue(Columns.PointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PointBank));
			}
		}
		[DataMember]
		public DateTime? InstallDate {
			get { return GetColumnValue<DateTime?>(Columns.InstallDate); }
			set {
				SetColumnValue(Columns.InstallDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InstallDate));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return BackendCalculationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendCalculationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreditedTeamLocationIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn GPSalesRepIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn GPTechnicianIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreditScoreColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn HasRepBackEndHoldColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn HasTechBackEndHoldColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsCanceledColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsCellAccountColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsFriendsAndFamilyColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn HasActivationFeeColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsAutoPayColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsPlatinumInteractiveColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsExtendedContractColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn IsShortenedContractColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsInstalledColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsSubmittedToGPColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn IsDelinquentColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn IsPayableColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn IsDigitalColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn IsSavedColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn IsMissingInvoiceFeeColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn IsCommercialColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn HasServiceTicketColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn TechSelfInspectionPercentageColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn TechManagerInspectionPercentageColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn RMRColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn RMRDifferenceColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn PointBankColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn InstallDateColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[35]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendCalculationID = @"BackendCalculationID";
			public static readonly string AccountID = @"AccountID";
			public static readonly string CustomerName = @"CustomerName";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string CreditedTeamLocationID = @"CreditedTeamLocationID";
			public static readonly string GPSalesRepID = @"GPSalesRepID";
			public static readonly string GPTechnicianID = @"GPTechnicianID";
			public static readonly string CreditScore = @"CreditScore";
			public static readonly string HasRepBackEndHold = @"HasRepBackEndHold";
			public static readonly string HasTechBackEndHold = @"HasTechBackEndHold";
			public static readonly string IsCanceled = @"IsCanceled";
			public static readonly string IsCellAccount = @"IsCellAccount";
			public static readonly string IsFriendsAndFamily = @"IsFriendsAndFamily";
			public static readonly string HasActivationFee = @"HasActivationFee";
			public static readonly string IsAutoPay = @"IsAutoPay";
			public static readonly string IsPlatinumInteractive = @"IsPlatinumInteractive";
			public static readonly string IsExtendedContract = @"IsExtendedContract";
			public static readonly string IsShortenedContract = @"IsShortenedContract";
			public static readonly string IsInstalled = @"IsInstalled";
			public static readonly string IsSubmittedToGP = @"IsSubmittedToGP";
			public static readonly string IsDelinquent = @"IsDelinquent";
			public static readonly string IsPayable = @"IsPayable";
			public static readonly string IsDigital = @"IsDigital";
			public static readonly string IsSaved = @"IsSaved";
			public static readonly string IsMissingInvoiceFee = @"IsMissingInvoiceFee";
			public static readonly string IsCommercial = @"IsCommercial";
			public static readonly string HasServiceTicket = @"HasServiceTicket";
			public static readonly string TechSelfInspectionPercentage = @"TechSelfInspectionPercentage";
			public static readonly string TechManagerInspectionPercentage = @"TechManagerInspectionPercentage";
			public static readonly string RMR = @"RMR";
			public static readonly string RMRDifference = @"RMRDifference";
			public static readonly string PointBank = @"PointBank";
			public static readonly string InstallDate = @"InstallDate";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByDate = @"CreatedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendCalculationID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendAccountMappingCollection _PR_BackendAccountMappingsCol;
		//Relationship: FK_PR_BackendAccountMappings_PR_BackendAccountCalculations
		public PR_BackendAccountMappingCollection PR_BackendAccountMappingsCol
		{
			get
			{
				if(_PR_BackendAccountMappingsCol == null) {
					_PR_BackendAccountMappingsCol = new PR_BackendAccountMappingCollection();
					_PR_BackendAccountMappingsCol.LoadAndCloseReader(PR_BackendAccountMapping.Query()
						.WHERE(PR_BackendAccountMapping.Columns.BackendCalculationID, BackendCalculationID).ExecuteReader());
				}
				return _PR_BackendAccountMappingsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendAccountException class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAccountExceptionCollection : ActiveList<PR_BackendAccountException, PR_BackendAccountExceptionCollection>
	{
		public static PR_BackendAccountExceptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendAccountExceptionCollection result = new PR_BackendAccountExceptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendAccountException item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendAccountExceptions table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAccountException : ActiveRecord<PR_BackendAccountException>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendAccountException()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendAccountExceptions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountExceptionID = new TableSchema.TableColumn(schema);
				colvarAccountExceptionID.ColumnName = "AccountExceptionID";
				colvarAccountExceptionID.DataType = DbType.Int32;
				colvarAccountExceptionID.MaxLength = 0;
				colvarAccountExceptionID.AutoIncrement = true;
				colvarAccountExceptionID.IsNullable = false;
				colvarAccountExceptionID.IsPrimaryKey = true;
				colvarAccountExceptionID.IsForeignKey = false;
				colvarAccountExceptionID.IsReadOnly = false;
				colvarAccountExceptionID.DefaultSetting = @"";
				colvarAccountExceptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountExceptionID);

				TableSchema.TableColumn colvarBackendPeriodID = new TableSchema.TableColumn(schema);
				colvarBackendPeriodID.ColumnName = "BackendPeriodID";
				colvarBackendPeriodID.DataType = DbType.Int32;
				colvarBackendPeriodID.MaxLength = 0;
				colvarBackendPeriodID.AutoIncrement = false;
				colvarBackendPeriodID.IsNullable = false;
				colvarBackendPeriodID.IsPrimaryKey = false;
				colvarBackendPeriodID.IsForeignKey = true;
				colvarBackendPeriodID.IsReadOnly = false;
				colvarBackendPeriodID.DefaultSetting = @"";
				colvarBackendPeriodID.ForeignKeyTableName = "PR_BackendPeriods";
				schema.Columns.Add(colvarBackendPeriodID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarCreditScore = new TableSchema.TableColumn(schema);
				colvarCreditScore.ColumnName = "CreditScore";
				colvarCreditScore.DataType = DbType.Int32;
				colvarCreditScore.MaxLength = 0;
				colvarCreditScore.AutoIncrement = false;
				colvarCreditScore.IsNullable = true;
				colvarCreditScore.IsPrimaryKey = false;
				colvarCreditScore.IsForeignKey = false;
				colvarCreditScore.IsReadOnly = false;
				colvarCreditScore.DefaultSetting = @"";
				colvarCreditScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScore);

				TableSchema.TableColumn colvarHasRepBackEndHold = new TableSchema.TableColumn(schema);
				colvarHasRepBackEndHold.ColumnName = "HasRepBackEndHold";
				colvarHasRepBackEndHold.DataType = DbType.Boolean;
				colvarHasRepBackEndHold.MaxLength = 0;
				colvarHasRepBackEndHold.AutoIncrement = false;
				colvarHasRepBackEndHold.IsNullable = true;
				colvarHasRepBackEndHold.IsPrimaryKey = false;
				colvarHasRepBackEndHold.IsForeignKey = false;
				colvarHasRepBackEndHold.IsReadOnly = false;
				colvarHasRepBackEndHold.DefaultSetting = @"";
				colvarHasRepBackEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasRepBackEndHold);

				TableSchema.TableColumn colvarHasTechBackEndHold = new TableSchema.TableColumn(schema);
				colvarHasTechBackEndHold.ColumnName = "HasTechBackEndHold";
				colvarHasTechBackEndHold.DataType = DbType.Boolean;
				colvarHasTechBackEndHold.MaxLength = 0;
				colvarHasTechBackEndHold.AutoIncrement = false;
				colvarHasTechBackEndHold.IsNullable = true;
				colvarHasTechBackEndHold.IsPrimaryKey = false;
				colvarHasTechBackEndHold.IsForeignKey = false;
				colvarHasTechBackEndHold.IsReadOnly = false;
				colvarHasTechBackEndHold.DefaultSetting = @"";
				colvarHasTechBackEndHold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasTechBackEndHold);

				TableSchema.TableColumn colvarIsCanceled = new TableSchema.TableColumn(schema);
				colvarIsCanceled.ColumnName = "IsCanceled";
				colvarIsCanceled.DataType = DbType.Boolean;
				colvarIsCanceled.MaxLength = 0;
				colvarIsCanceled.AutoIncrement = false;
				colvarIsCanceled.IsNullable = true;
				colvarIsCanceled.IsPrimaryKey = false;
				colvarIsCanceled.IsForeignKey = false;
				colvarIsCanceled.IsReadOnly = false;
				colvarIsCanceled.DefaultSetting = @"";
				colvarIsCanceled.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCanceled);

				TableSchema.TableColumn colvarIsCellAccount = new TableSchema.TableColumn(schema);
				colvarIsCellAccount.ColumnName = "IsCellAccount";
				colvarIsCellAccount.DataType = DbType.Boolean;
				colvarIsCellAccount.MaxLength = 0;
				colvarIsCellAccount.AutoIncrement = false;
				colvarIsCellAccount.IsNullable = true;
				colvarIsCellAccount.IsPrimaryKey = false;
				colvarIsCellAccount.IsForeignKey = false;
				colvarIsCellAccount.IsReadOnly = false;
				colvarIsCellAccount.DefaultSetting = @"";
				colvarIsCellAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCellAccount);

				TableSchema.TableColumn colvarIsFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarIsFriendsAndFamily.ColumnName = "IsFriendsAndFamily";
				colvarIsFriendsAndFamily.DataType = DbType.Boolean;
				colvarIsFriendsAndFamily.MaxLength = 0;
				colvarIsFriendsAndFamily.AutoIncrement = false;
				colvarIsFriendsAndFamily.IsNullable = true;
				colvarIsFriendsAndFamily.IsPrimaryKey = false;
				colvarIsFriendsAndFamily.IsForeignKey = false;
				colvarIsFriendsAndFamily.IsReadOnly = false;
				colvarIsFriendsAndFamily.DefaultSetting = @"";
				colvarIsFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsFriendsAndFamily);

				TableSchema.TableColumn colvarHasActivationFee = new TableSchema.TableColumn(schema);
				colvarHasActivationFee.ColumnName = "HasActivationFee";
				colvarHasActivationFee.DataType = DbType.Boolean;
				colvarHasActivationFee.MaxLength = 0;
				colvarHasActivationFee.AutoIncrement = false;
				colvarHasActivationFee.IsNullable = true;
				colvarHasActivationFee.IsPrimaryKey = false;
				colvarHasActivationFee.IsForeignKey = false;
				colvarHasActivationFee.IsReadOnly = false;
				colvarHasActivationFee.DefaultSetting = @"";
				colvarHasActivationFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasActivationFee);

				TableSchema.TableColumn colvarIsAutoPay = new TableSchema.TableColumn(schema);
				colvarIsAutoPay.ColumnName = "IsAutoPay";
				colvarIsAutoPay.DataType = DbType.Boolean;
				colvarIsAutoPay.MaxLength = 0;
				colvarIsAutoPay.AutoIncrement = false;
				colvarIsAutoPay.IsNullable = true;
				colvarIsAutoPay.IsPrimaryKey = false;
				colvarIsAutoPay.IsForeignKey = false;
				colvarIsAutoPay.IsReadOnly = false;
				colvarIsAutoPay.DefaultSetting = @"";
				colvarIsAutoPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAutoPay);

				TableSchema.TableColumn colvarIsPlatinumInteractive = new TableSchema.TableColumn(schema);
				colvarIsPlatinumInteractive.ColumnName = "IsPlatinumInteractive";
				colvarIsPlatinumInteractive.DataType = DbType.Boolean;
				colvarIsPlatinumInteractive.MaxLength = 0;
				colvarIsPlatinumInteractive.AutoIncrement = false;
				colvarIsPlatinumInteractive.IsNullable = true;
				colvarIsPlatinumInteractive.IsPrimaryKey = false;
				colvarIsPlatinumInteractive.IsForeignKey = false;
				colvarIsPlatinumInteractive.IsReadOnly = false;
				colvarIsPlatinumInteractive.DefaultSetting = @"";
				colvarIsPlatinumInteractive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPlatinumInteractive);

				TableSchema.TableColumn colvarIsExtendedContract = new TableSchema.TableColumn(schema);
				colvarIsExtendedContract.ColumnName = "IsExtendedContract";
				colvarIsExtendedContract.DataType = DbType.Boolean;
				colvarIsExtendedContract.MaxLength = 0;
				colvarIsExtendedContract.AutoIncrement = false;
				colvarIsExtendedContract.IsNullable = true;
				colvarIsExtendedContract.IsPrimaryKey = false;
				colvarIsExtendedContract.IsForeignKey = false;
				colvarIsExtendedContract.IsReadOnly = false;
				colvarIsExtendedContract.DefaultSetting = @"";
				colvarIsExtendedContract.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExtendedContract);

				TableSchema.TableColumn colvarIsShortenedContract = new TableSchema.TableColumn(schema);
				colvarIsShortenedContract.ColumnName = "IsShortenedContract";
				colvarIsShortenedContract.DataType = DbType.Boolean;
				colvarIsShortenedContract.MaxLength = 0;
				colvarIsShortenedContract.AutoIncrement = false;
				colvarIsShortenedContract.IsNullable = true;
				colvarIsShortenedContract.IsPrimaryKey = false;
				colvarIsShortenedContract.IsForeignKey = false;
				colvarIsShortenedContract.IsReadOnly = false;
				colvarIsShortenedContract.DefaultSetting = @"";
				colvarIsShortenedContract.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsShortenedContract);

				TableSchema.TableColumn colvarIsDelinquent = new TableSchema.TableColumn(schema);
				colvarIsDelinquent.ColumnName = "IsDelinquent";
				colvarIsDelinquent.DataType = DbType.Boolean;
				colvarIsDelinquent.MaxLength = 0;
				colvarIsDelinquent.AutoIncrement = false;
				colvarIsDelinquent.IsNullable = true;
				colvarIsDelinquent.IsPrimaryKey = false;
				colvarIsDelinquent.IsForeignKey = false;
				colvarIsDelinquent.IsReadOnly = false;
				colvarIsDelinquent.DefaultSetting = @"";
				colvarIsDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDelinquent);

				TableSchema.TableColumn colvarIsPayable = new TableSchema.TableColumn(schema);
				colvarIsPayable.ColumnName = "IsPayable";
				colvarIsPayable.DataType = DbType.Boolean;
				colvarIsPayable.MaxLength = 0;
				colvarIsPayable.AutoIncrement = false;
				colvarIsPayable.IsNullable = true;
				colvarIsPayable.IsPrimaryKey = false;
				colvarIsPayable.IsForeignKey = false;
				colvarIsPayable.IsReadOnly = false;
				colvarIsPayable.DefaultSetting = @"";
				colvarIsPayable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPayable);

				TableSchema.TableColumn colvarIsDigital = new TableSchema.TableColumn(schema);
				colvarIsDigital.ColumnName = "IsDigital";
				colvarIsDigital.DataType = DbType.Boolean;
				colvarIsDigital.MaxLength = 0;
				colvarIsDigital.AutoIncrement = false;
				colvarIsDigital.IsNullable = true;
				colvarIsDigital.IsPrimaryKey = false;
				colvarIsDigital.IsForeignKey = false;
				colvarIsDigital.IsReadOnly = false;
				colvarIsDigital.DefaultSetting = @"";
				colvarIsDigital.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDigital);

				TableSchema.TableColumn colvarIsSaved = new TableSchema.TableColumn(schema);
				colvarIsSaved.ColumnName = "IsSaved";
				colvarIsSaved.DataType = DbType.Boolean;
				colvarIsSaved.MaxLength = 0;
				colvarIsSaved.AutoIncrement = false;
				colvarIsSaved.IsNullable = true;
				colvarIsSaved.IsPrimaryKey = false;
				colvarIsSaved.IsForeignKey = false;
				colvarIsSaved.IsReadOnly = false;
				colvarIsSaved.DefaultSetting = @"";
				colvarIsSaved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSaved);

				TableSchema.TableColumn colvarIsMissingInvoiceFee = new TableSchema.TableColumn(schema);
				colvarIsMissingInvoiceFee.ColumnName = "IsMissingInvoiceFee";
				colvarIsMissingInvoiceFee.DataType = DbType.Boolean;
				colvarIsMissingInvoiceFee.MaxLength = 0;
				colvarIsMissingInvoiceFee.AutoIncrement = false;
				colvarIsMissingInvoiceFee.IsNullable = true;
				colvarIsMissingInvoiceFee.IsPrimaryKey = false;
				colvarIsMissingInvoiceFee.IsForeignKey = false;
				colvarIsMissingInvoiceFee.IsReadOnly = false;
				colvarIsMissingInvoiceFee.DefaultSetting = @"";
				colvarIsMissingInvoiceFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMissingInvoiceFee);

				TableSchema.TableColumn colvarIsCommercial = new TableSchema.TableColumn(schema);
				colvarIsCommercial.ColumnName = "IsCommercial";
				colvarIsCommercial.DataType = DbType.Boolean;
				colvarIsCommercial.MaxLength = 0;
				colvarIsCommercial.AutoIncrement = false;
				colvarIsCommercial.IsNullable = true;
				colvarIsCommercial.IsPrimaryKey = false;
				colvarIsCommercial.IsForeignKey = false;
				colvarIsCommercial.IsReadOnly = false;
				colvarIsCommercial.DefaultSetting = @"";
				colvarIsCommercial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCommercial);

				TableSchema.TableColumn colvarHasServiceTicket = new TableSchema.TableColumn(schema);
				colvarHasServiceTicket.ColumnName = "HasServiceTicket";
				colvarHasServiceTicket.DataType = DbType.Boolean;
				colvarHasServiceTicket.MaxLength = 0;
				colvarHasServiceTicket.AutoIncrement = false;
				colvarHasServiceTicket.IsNullable = true;
				colvarHasServiceTicket.IsPrimaryKey = false;
				colvarHasServiceTicket.IsForeignKey = false;
				colvarHasServiceTicket.IsReadOnly = false;
				colvarHasServiceTicket.DefaultSetting = @"";
				colvarHasServiceTicket.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasServiceTicket);

				TableSchema.TableColumn colvarTechSelfInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarTechSelfInspectionPercentage.ColumnName = "TechSelfInspectionPercentage";
				colvarTechSelfInspectionPercentage.DataType = DbType.Double;
				colvarTechSelfInspectionPercentage.MaxLength = 0;
				colvarTechSelfInspectionPercentage.AutoIncrement = false;
				colvarTechSelfInspectionPercentage.IsNullable = true;
				colvarTechSelfInspectionPercentage.IsPrimaryKey = false;
				colvarTechSelfInspectionPercentage.IsForeignKey = false;
				colvarTechSelfInspectionPercentage.IsReadOnly = false;
				colvarTechSelfInspectionPercentage.DefaultSetting = @"";
				colvarTechSelfInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechSelfInspectionPercentage);

				TableSchema.TableColumn colvarTechManagerInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarTechManagerInspectionPercentage.ColumnName = "TechManagerInspectionPercentage";
				colvarTechManagerInspectionPercentage.DataType = DbType.Double;
				colvarTechManagerInspectionPercentage.MaxLength = 0;
				colvarTechManagerInspectionPercentage.AutoIncrement = false;
				colvarTechManagerInspectionPercentage.IsNullable = true;
				colvarTechManagerInspectionPercentage.IsPrimaryKey = false;
				colvarTechManagerInspectionPercentage.IsForeignKey = false;
				colvarTechManagerInspectionPercentage.IsReadOnly = false;
				colvarTechManagerInspectionPercentage.DefaultSetting = @"";
				colvarTechManagerInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechManagerInspectionPercentage);

				TableSchema.TableColumn colvarRMR = new TableSchema.TableColumn(schema);
				colvarRMR.ColumnName = "RMR";
				colvarRMR.DataType = DbType.Currency;
				colvarRMR.MaxLength = 0;
				colvarRMR.AutoIncrement = false;
				colvarRMR.IsNullable = true;
				colvarRMR.IsPrimaryKey = false;
				colvarRMR.IsForeignKey = false;
				colvarRMR.IsReadOnly = false;
				colvarRMR.DefaultSetting = @"";
				colvarRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRMR);

				TableSchema.TableColumn colvarRMRDifference = new TableSchema.TableColumn(schema);
				colvarRMRDifference.ColumnName = "RMRDifference";
				colvarRMRDifference.DataType = DbType.Currency;
				colvarRMRDifference.MaxLength = 0;
				colvarRMRDifference.AutoIncrement = false;
				colvarRMRDifference.IsNullable = true;
				colvarRMRDifference.IsPrimaryKey = false;
				colvarRMRDifference.IsForeignKey = false;
				colvarRMRDifference.IsReadOnly = false;
				colvarRMRDifference.DefaultSetting = @"";
				colvarRMRDifference.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRMRDifference);

				TableSchema.TableColumn colvarPointBank = new TableSchema.TableColumn(schema);
				colvarPointBank.ColumnName = "PointBank";
				colvarPointBank.DataType = DbType.Decimal;
				colvarPointBank.MaxLength = 0;
				colvarPointBank.AutoIncrement = false;
				colvarPointBank.IsNullable = true;
				colvarPointBank.IsPrimaryKey = false;
				colvarPointBank.IsForeignKey = false;
				colvarPointBank.IsReadOnly = false;
				colvarPointBank.DefaultSetting = @"";
				colvarPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPointBank);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"(getdate())";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendAccountExceptions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendAccountException LoadFrom(PR_BackendAccountException item)
		{
			PR_BackendAccountException result = new PR_BackendAccountException();
			if (item.AccountExceptionID != default(int)) {
				result.LoadByKey(item.AccountExceptionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountExceptionID {
			get { return GetColumnValue<int>(Columns.AccountExceptionID); }
			set {
				SetColumnValue(Columns.AccountExceptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountExceptionID));
			}
		}
		[DataMember]
		public int BackendPeriodID {
			get { return GetColumnValue<int>(Columns.BackendPeriodID); }
			set {
				SetColumnValue(Columns.BackendPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPeriodID));
			}
		}
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public int? CreditScore {
			get { return GetColumnValue<int?>(Columns.CreditScore); }
			set {
				SetColumnValue(Columns.CreditScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScore));
			}
		}
		[DataMember]
		public bool? HasRepBackEndHold {
			get { return GetColumnValue<bool?>(Columns.HasRepBackEndHold); }
			set {
				SetColumnValue(Columns.HasRepBackEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasRepBackEndHold));
			}
		}
		[DataMember]
		public bool? HasTechBackEndHold {
			get { return GetColumnValue<bool?>(Columns.HasTechBackEndHold); }
			set {
				SetColumnValue(Columns.HasTechBackEndHold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasTechBackEndHold));
			}
		}
		[DataMember]
		public bool? IsCanceled {
			get { return GetColumnValue<bool?>(Columns.IsCanceled); }
			set {
				SetColumnValue(Columns.IsCanceled, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCanceled));
			}
		}
		[DataMember]
		public bool? IsCellAccount {
			get { return GetColumnValue<bool?>(Columns.IsCellAccount); }
			set {
				SetColumnValue(Columns.IsCellAccount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCellAccount));
			}
		}
		[DataMember]
		public bool? IsFriendsAndFamily {
			get { return GetColumnValue<bool?>(Columns.IsFriendsAndFamily); }
			set {
				SetColumnValue(Columns.IsFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsFriendsAndFamily));
			}
		}
		[DataMember]
		public bool? HasActivationFee {
			get { return GetColumnValue<bool?>(Columns.HasActivationFee); }
			set {
				SetColumnValue(Columns.HasActivationFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasActivationFee));
			}
		}
		[DataMember]
		public bool? IsAutoPay {
			get { return GetColumnValue<bool?>(Columns.IsAutoPay); }
			set {
				SetColumnValue(Columns.IsAutoPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAutoPay));
			}
		}
		[DataMember]
		public bool? IsPlatinumInteractive {
			get { return GetColumnValue<bool?>(Columns.IsPlatinumInteractive); }
			set {
				SetColumnValue(Columns.IsPlatinumInteractive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPlatinumInteractive));
			}
		}
		[DataMember]
		public bool? IsExtendedContract {
			get { return GetColumnValue<bool?>(Columns.IsExtendedContract); }
			set {
				SetColumnValue(Columns.IsExtendedContract, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsExtendedContract));
			}
		}
		[DataMember]
		public bool? IsShortenedContract {
			get { return GetColumnValue<bool?>(Columns.IsShortenedContract); }
			set {
				SetColumnValue(Columns.IsShortenedContract, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsShortenedContract));
			}
		}
		[DataMember]
		public bool? IsDelinquent {
			get { return GetColumnValue<bool?>(Columns.IsDelinquent); }
			set {
				SetColumnValue(Columns.IsDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDelinquent));
			}
		}
		[DataMember]
		public bool? IsPayable {
			get { return GetColumnValue<bool?>(Columns.IsPayable); }
			set {
				SetColumnValue(Columns.IsPayable, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPayable));
			}
		}
		[DataMember]
		public bool? IsDigital {
			get { return GetColumnValue<bool?>(Columns.IsDigital); }
			set {
				SetColumnValue(Columns.IsDigital, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDigital));
			}
		}
		[DataMember]
		public bool? IsSaved {
			get { return GetColumnValue<bool?>(Columns.IsSaved); }
			set {
				SetColumnValue(Columns.IsSaved, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSaved));
			}
		}
		[DataMember]
		public bool? IsMissingInvoiceFee {
			get { return GetColumnValue<bool?>(Columns.IsMissingInvoiceFee); }
			set {
				SetColumnValue(Columns.IsMissingInvoiceFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsMissingInvoiceFee));
			}
		}
		[DataMember]
		public bool? IsCommercial {
			get { return GetColumnValue<bool?>(Columns.IsCommercial); }
			set {
				SetColumnValue(Columns.IsCommercial, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCommercial));
			}
		}
		[DataMember]
		public bool? HasServiceTicket {
			get { return GetColumnValue<bool?>(Columns.HasServiceTicket); }
			set {
				SetColumnValue(Columns.HasServiceTicket, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasServiceTicket));
			}
		}
		[DataMember]
		public double? TechSelfInspectionPercentage {
			get { return GetColumnValue<double?>(Columns.TechSelfInspectionPercentage); }
			set {
				SetColumnValue(Columns.TechSelfInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechSelfInspectionPercentage));
			}
		}
		[DataMember]
		public double? TechManagerInspectionPercentage {
			get { return GetColumnValue<double?>(Columns.TechManagerInspectionPercentage); }
			set {
				SetColumnValue(Columns.TechManagerInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechManagerInspectionPercentage));
			}
		}
		[DataMember]
		public decimal? RMR {
			get { return GetColumnValue<decimal?>(Columns.RMR); }
			set {
				SetColumnValue(Columns.RMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RMR));
			}
		}
		[DataMember]
		public decimal? RMRDifference {
			get { return GetColumnValue<decimal?>(Columns.RMRDifference); }
			set {
				SetColumnValue(Columns.RMRDifference, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RMRDifference));
			}
		}
		[DataMember]
		public decimal? PointBank {
			get { return GetColumnValue<decimal?>(Columns.PointBank); }
			set {
				SetColumnValue(Columns.PointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PointBank));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendPeriod _BackendPeriod;
		//Relationship: FK_PR_BackendAccountExceptions_PR_BackendPeriods
		public PR_BackendPeriod BackendPeriod
		{
			get
			{
				if(_BackendPeriod == null) {
					_BackendPeriod = PR_BackendPeriod.FetchByID(this.BackendPeriodID);
				}
				return _BackendPeriod;
			}
			set
			{
				SetColumnValue("BackendPeriodID", value.BackendPeriodID);
				_BackendPeriod = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountExceptionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountExceptionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BackendPeriodIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreditScoreColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn HasRepBackEndHoldColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn HasTechBackEndHoldColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsCanceledColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsCellAccountColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsFriendsAndFamilyColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn HasActivationFeeColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsAutoPayColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsPlatinumInteractiveColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsExtendedContractColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsShortenedContractColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsDelinquentColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsPayableColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IsDigitalColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsSavedColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn IsMissingInvoiceFeeColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsCommercialColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn HasServiceTicketColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn TechSelfInspectionPercentageColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn TechManagerInspectionPercentageColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn RMRColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn RMRDifferenceColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn PointBankColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[29]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountExceptionID = @"AccountExceptionID";
			public static readonly string BackendPeriodID = @"BackendPeriodID";
			public static readonly string AccountID = @"AccountID";
			public static readonly string CreditScore = @"CreditScore";
			public static readonly string HasRepBackEndHold = @"HasRepBackEndHold";
			public static readonly string HasTechBackEndHold = @"HasTechBackEndHold";
			public static readonly string IsCanceled = @"IsCanceled";
			public static readonly string IsCellAccount = @"IsCellAccount";
			public static readonly string IsFriendsAndFamily = @"IsFriendsAndFamily";
			public static readonly string HasActivationFee = @"HasActivationFee";
			public static readonly string IsAutoPay = @"IsAutoPay";
			public static readonly string IsPlatinumInteractive = @"IsPlatinumInteractive";
			public static readonly string IsExtendedContract = @"IsExtendedContract";
			public static readonly string IsShortenedContract = @"IsShortenedContract";
			public static readonly string IsDelinquent = @"IsDelinquent";
			public static readonly string IsPayable = @"IsPayable";
			public static readonly string IsDigital = @"IsDigital";
			public static readonly string IsSaved = @"IsSaved";
			public static readonly string IsMissingInvoiceFee = @"IsMissingInvoiceFee";
			public static readonly string IsCommercial = @"IsCommercial";
			public static readonly string HasServiceTicket = @"HasServiceTicket";
			public static readonly string TechSelfInspectionPercentage = @"TechSelfInspectionPercentage";
			public static readonly string TechManagerInspectionPercentage = @"TechManagerInspectionPercentage";
			public static readonly string RMR = @"RMR";
			public static readonly string RMRDifference = @"RMRDifference";
			public static readonly string PointBank = @"PointBank";
			public static readonly string Comments = @"Comments";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountExceptionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendAccountMapping class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAccountMappingCollection : ActiveList<PR_BackendAccountMapping, PR_BackendAccountMappingCollection>
	{
		public static PR_BackendAccountMappingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendAccountMappingCollection result = new PR_BackendAccountMappingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendAccountMapping item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendAccountMappings table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAccountMapping : ActiveRecord<PR_BackendAccountMapping>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendAccountMapping()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendAccountMappings", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendAccountMappingID = new TableSchema.TableColumn(schema);
				colvarBackendAccountMappingID.ColumnName = "BackendAccountMappingID";
				colvarBackendAccountMappingID.DataType = DbType.Int32;
				colvarBackendAccountMappingID.MaxLength = 0;
				colvarBackendAccountMappingID.AutoIncrement = true;
				colvarBackendAccountMappingID.IsNullable = false;
				colvarBackendAccountMappingID.IsPrimaryKey = true;
				colvarBackendAccountMappingID.IsForeignKey = false;
				colvarBackendAccountMappingID.IsReadOnly = false;
				colvarBackendAccountMappingID.DefaultSetting = @"";
				colvarBackendAccountMappingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendAccountMappingID);

				TableSchema.TableColumn colvarBackendID = new TableSchema.TableColumn(schema);
				colvarBackendID.ColumnName = "BackendID";
				colvarBackendID.DataType = DbType.Int32;
				colvarBackendID.MaxLength = 0;
				colvarBackendID.AutoIncrement = false;
				colvarBackendID.IsNullable = false;
				colvarBackendID.IsPrimaryKey = false;
				colvarBackendID.IsForeignKey = true;
				colvarBackendID.IsReadOnly = false;
				colvarBackendID.DefaultSetting = @"";
				colvarBackendID.ForeignKeyTableName = "PR_Backends";
				schema.Columns.Add(colvarBackendID);

				TableSchema.TableColumn colvarBackendAccountMappingTypeID = new TableSchema.TableColumn(schema);
				colvarBackendAccountMappingTypeID.ColumnName = "BackendAccountMappingTypeID";
				colvarBackendAccountMappingTypeID.DataType = DbType.Int32;
				colvarBackendAccountMappingTypeID.MaxLength = 0;
				colvarBackendAccountMappingTypeID.AutoIncrement = false;
				colvarBackendAccountMappingTypeID.IsNullable = false;
				colvarBackendAccountMappingTypeID.IsPrimaryKey = false;
				colvarBackendAccountMappingTypeID.IsForeignKey = true;
				colvarBackendAccountMappingTypeID.IsReadOnly = false;
				colvarBackendAccountMappingTypeID.DefaultSetting = @"((0))";
				colvarBackendAccountMappingTypeID.ForeignKeyTableName = "PR_BackendAccountMappingTypes";
				schema.Columns.Add(colvarBackendAccountMappingTypeID);

				TableSchema.TableColumn colvarBackendCalculationID = new TableSchema.TableColumn(schema);
				colvarBackendCalculationID.ColumnName = "BackendCalculationID";
				colvarBackendCalculationID.DataType = DbType.Int32;
				colvarBackendCalculationID.MaxLength = 0;
				colvarBackendCalculationID.AutoIncrement = false;
				colvarBackendCalculationID.IsNullable = true;
				colvarBackendCalculationID.IsPrimaryKey = false;
				colvarBackendCalculationID.IsForeignKey = true;
				colvarBackendCalculationID.IsReadOnly = false;
				colvarBackendCalculationID.DefaultSetting = @"";
				colvarBackendCalculationID.ForeignKeyTableName = "PR_BackendAccountCalculations";
				schema.Columns.Add(colvarBackendCalculationID);

				TableSchema.TableColumn colvarAccountStateID = new TableSchema.TableColumn(schema);
				colvarAccountStateID.ColumnName = "AccountStateID";
				colvarAccountStateID.DataType = DbType.Int32;
				colvarAccountStateID.MaxLength = 0;
				colvarAccountStateID.AutoIncrement = false;
				colvarAccountStateID.IsNullable = true;
				colvarAccountStateID.IsPrimaryKey = false;
				colvarAccountStateID.IsForeignKey = true;
				colvarAccountStateID.IsReadOnly = false;
				colvarAccountStateID.DefaultSetting = @"";
				colvarAccountStateID.ForeignKeyTableName = "PR_AccountStates";
				schema.Columns.Add(colvarAccountStateID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendAccountMappings",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendAccountMapping LoadFrom(PR_BackendAccountMapping item)
		{
			PR_BackendAccountMapping result = new PR_BackendAccountMapping();
			if (item.BackendAccountMappingID != default(int)) {
				result.LoadByKey(item.BackendAccountMappingID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendAccountMappingID {
			get { return GetColumnValue<int>(Columns.BackendAccountMappingID); }
			set {
				SetColumnValue(Columns.BackendAccountMappingID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendAccountMappingID));
			}
		}
		[DataMember]
		public int BackendID {
			get { return GetColumnValue<int>(Columns.BackendID); }
			set {
				SetColumnValue(Columns.BackendID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendID));
			}
		}
		[DataMember]
		public int BackendAccountMappingTypeID {
			get { return GetColumnValue<int>(Columns.BackendAccountMappingTypeID); }
			set {
				SetColumnValue(Columns.BackendAccountMappingTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendAccountMappingTypeID));
			}
		}
		[DataMember]
		public int? BackendCalculationID {
			get { return GetColumnValue<int?>(Columns.BackendCalculationID); }
			set {
				SetColumnValue(Columns.BackendCalculationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendCalculationID));
			}
		}
		[DataMember]
		public int? AccountStateID {
			get { return GetColumnValue<int?>(Columns.AccountStateID); }
			set {
				SetColumnValue(Columns.AccountStateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountStateID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_AccountState _AccountState;
		//Relationship: FK_PR_BackendAccountMappings_PR_AccountStates
		public PR_AccountState AccountState
		{
			get
			{
				if(_AccountState == null) {
					_AccountState = PR_AccountState.FetchByID(this.AccountStateID);
				}
				return _AccountState;
			}
			set
			{
				SetColumnValue("AccountStateID", value.AccountStateID);
				_AccountState = value;
			}
		}

		private PR_BackendAccountCalculation _BackendCalculation;
		//Relationship: FK_PR_BackendAccountMappings_PR_BackendAccountCalculations
		public PR_BackendAccountCalculation BackendCalculation
		{
			get
			{
				if(_BackendCalculation == null) {
					_BackendCalculation = PR_BackendAccountCalculation.FetchByID(this.BackendCalculationID);
				}
				return _BackendCalculation;
			}
			set
			{
				SetColumnValue("BackendCalculationID", value.BackendCalculationID);
				_BackendCalculation = value;
			}
		}

		private PR_BackendAccountMappingType _BackendAccountMappingType;
		//Relationship: FK_PR_BackendAccountMappings_PR_BackendAccountMappingTypes
		public PR_BackendAccountMappingType BackendAccountMappingType
		{
			get
			{
				if(_BackendAccountMappingType == null) {
					_BackendAccountMappingType = PR_BackendAccountMappingType.FetchByID(this.BackendAccountMappingTypeID);
				}
				return _BackendAccountMappingType;
			}
			set
			{
				SetColumnValue("BackendAccountMappingTypeID", value.BackendAccountMappingTypeID);
				_BackendAccountMappingType = value;
			}
		}

		private PR_Backend _Backend;
		//Relationship: FK_PR_BackendAccountMappings_PR_Backends
		public PR_Backend Backend
		{
			get
			{
				if(_Backend == null) {
					_Backend = PR_Backend.FetchByID(this.BackendID);
				}
				return _Backend;
			}
			set
			{
				SetColumnValue("BackendID", value.BackendID);
				_Backend = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendAccountMappingID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendAccountMappingIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BackendIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BackendAccountMappingTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BackendCalculationIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AccountStateIDColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendAccountMappingID = @"BackendAccountMappingID";
			public static readonly string BackendID = @"BackendID";
			public static readonly string BackendAccountMappingTypeID = @"BackendAccountMappingTypeID";
			public static readonly string BackendCalculationID = @"BackendCalculationID";
			public static readonly string AccountStateID = @"AccountStateID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendAccountMappingID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendAccountMappingType class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAccountMappingTypeCollection : ActiveList<PR_BackendAccountMappingType, PR_BackendAccountMappingTypeCollection>
	{
		public static PR_BackendAccountMappingTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendAccountMappingTypeCollection result = new PR_BackendAccountMappingTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendAccountMappingType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendAccountMappingTypes table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAccountMappingType : ActiveRecord<PR_BackendAccountMappingType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum BackendAccountMappingTypeEnum : int
		{
			[EnumMember()] Personal_Sale = 1,
			[EnumMember()] Office_Sale = 2,
			[EnumMember()] Region_Sale = 3,
			[EnumMember()] Personal_Install = 4,
			[EnumMember()] Office_Install = 5,
			[EnumMember()] Region_Install = 6,
			[EnumMember()] Legion_Sale = 7,
		}

		//[DataMember]
		//public BackendAccountMappingTypeEnum BackendAccountMappingTypeCode
		//{
		//	get { return (BackendAccountMappingTypeEnum)BackendAccountMappingTypeID; }
		//	set { BackendAccountMappingTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendAccountMappingType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendAccountMappingTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendAccountMappingTypeID = new TableSchema.TableColumn(schema);
				colvarBackendAccountMappingTypeID.ColumnName = "BackendAccountMappingTypeID";
				colvarBackendAccountMappingTypeID.DataType = DbType.Int32;
				colvarBackendAccountMappingTypeID.MaxLength = 0;
				colvarBackendAccountMappingTypeID.AutoIncrement = true;
				colvarBackendAccountMappingTypeID.IsNullable = false;
				colvarBackendAccountMappingTypeID.IsPrimaryKey = true;
				colvarBackendAccountMappingTypeID.IsForeignKey = false;
				colvarBackendAccountMappingTypeID.IsReadOnly = false;
				colvarBackendAccountMappingTypeID.DefaultSetting = @"";
				colvarBackendAccountMappingTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendAccountMappingTypeID);

				TableSchema.TableColumn colvarBackendAccountMappingTypeName = new TableSchema.TableColumn(schema);
				colvarBackendAccountMappingTypeName.ColumnName = "BackendAccountMappingTypeName";
				colvarBackendAccountMappingTypeName.DataType = DbType.String;
				colvarBackendAccountMappingTypeName.MaxLength = 50;
				colvarBackendAccountMappingTypeName.AutoIncrement = false;
				colvarBackendAccountMappingTypeName.IsNullable = false;
				colvarBackendAccountMappingTypeName.IsPrimaryKey = false;
				colvarBackendAccountMappingTypeName.IsForeignKey = false;
				colvarBackendAccountMappingTypeName.IsReadOnly = false;
				colvarBackendAccountMappingTypeName.DefaultSetting = @"";
				colvarBackendAccountMappingTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendAccountMappingTypeName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendAccountMappingTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendAccountMappingType LoadFrom(PR_BackendAccountMappingType item)
		{
			PR_BackendAccountMappingType result = new PR_BackendAccountMappingType();
			if (item.BackendAccountMappingTypeID != default(int)) {
				result.LoadByKey(item.BackendAccountMappingTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendAccountMappingTypeID {
			get { return GetColumnValue<int>(Columns.BackendAccountMappingTypeID); }
			set {
				SetColumnValue(Columns.BackendAccountMappingTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendAccountMappingTypeID));
			}
		}
		[DataMember]
		public string BackendAccountMappingTypeName {
			get { return GetColumnValue<string>(Columns.BackendAccountMappingTypeName); }
			set {
				SetColumnValue(Columns.BackendAccountMappingTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendAccountMappingTypeName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return BackendAccountMappingTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendAccountMappingTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BackendAccountMappingTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendAccountMappingTypeID = @"BackendAccountMappingTypeID";
			public static readonly string BackendAccountMappingTypeName = @"BackendAccountMappingTypeName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendAccountMappingTypeID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendAccountMappingCollection _PR_BackendAccountMappingsCol;
		//Relationship: FK_PR_BackendAccountMappings_PR_BackendAccountMappingTypes
		public PR_BackendAccountMappingCollection PR_BackendAccountMappingsCol
		{
			get
			{
				if(_PR_BackendAccountMappingsCol == null) {
					_PR_BackendAccountMappingsCol = new PR_BackendAccountMappingCollection();
					_PR_BackendAccountMappingsCol.LoadAndCloseReader(PR_BackendAccountMapping.Query()
						.WHERE(PR_BackendAccountMapping.Columns.BackendAccountMappingTypeID, BackendAccountMappingTypeID).ExecuteReader());
				}
				return _PR_BackendAccountMappingsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendAccountNumbersException class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAccountNumbersExceptionCollection : ActiveList<PR_BackendAccountNumbersException, PR_BackendAccountNumbersExceptionCollection>
	{
		public static PR_BackendAccountNumbersExceptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendAccountNumbersExceptionCollection result = new PR_BackendAccountNumbersExceptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendAccountNumbersException item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendAccountNumbersExceptions table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAccountNumbersException : ActiveRecord<PR_BackendAccountNumbersException>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendAccountNumbersException()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendAccountNumbersExceptions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountNumbersExceptionID = new TableSchema.TableColumn(schema);
				colvarAccountNumbersExceptionID.ColumnName = "AccountNumbersExceptionID";
				colvarAccountNumbersExceptionID.DataType = DbType.Int32;
				colvarAccountNumbersExceptionID.MaxLength = 0;
				colvarAccountNumbersExceptionID.AutoIncrement = true;
				colvarAccountNumbersExceptionID.IsNullable = false;
				colvarAccountNumbersExceptionID.IsPrimaryKey = true;
				colvarAccountNumbersExceptionID.IsForeignKey = false;
				colvarAccountNumbersExceptionID.IsReadOnly = false;
				colvarAccountNumbersExceptionID.DefaultSetting = @"";
				colvarAccountNumbersExceptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountNumbersExceptionID);

				TableSchema.TableColumn colvarBackendPeriodID = new TableSchema.TableColumn(schema);
				colvarBackendPeriodID.ColumnName = "BackendPeriodID";
				colvarBackendPeriodID.DataType = DbType.Int32;
				colvarBackendPeriodID.MaxLength = 0;
				colvarBackendPeriodID.AutoIncrement = false;
				colvarBackendPeriodID.IsNullable = false;
				colvarBackendPeriodID.IsPrimaryKey = false;
				colvarBackendPeriodID.IsForeignKey = true;
				colvarBackendPeriodID.IsReadOnly = false;
				colvarBackendPeriodID.DefaultSetting = @"";
				colvarBackendPeriodID.ForeignKeyTableName = "PR_BackendPeriods";
				schema.Columns.Add(colvarBackendPeriodID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 50;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarNQualifyingPersonalAccounts = new TableSchema.TableColumn(schema);
				colvarNQualifyingPersonalAccounts.ColumnName = "NQualifyingPersonalAccounts";
				colvarNQualifyingPersonalAccounts.DataType = DbType.Int32;
				colvarNQualifyingPersonalAccounts.MaxLength = 0;
				colvarNQualifyingPersonalAccounts.AutoIncrement = false;
				colvarNQualifyingPersonalAccounts.IsNullable = true;
				colvarNQualifyingPersonalAccounts.IsPrimaryKey = false;
				colvarNQualifyingPersonalAccounts.IsForeignKey = false;
				colvarNQualifyingPersonalAccounts.IsReadOnly = false;
				colvarNQualifyingPersonalAccounts.DefaultSetting = @"";
				colvarNQualifyingPersonalAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNQualifyingPersonalAccounts);

				TableSchema.TableColumn colvarNPaidPersonalAccounts = new TableSchema.TableColumn(schema);
				colvarNPaidPersonalAccounts.ColumnName = "NPaidPersonalAccounts";
				colvarNPaidPersonalAccounts.DataType = DbType.Int32;
				colvarNPaidPersonalAccounts.MaxLength = 0;
				colvarNPaidPersonalAccounts.AutoIncrement = false;
				colvarNPaidPersonalAccounts.IsNullable = true;
				colvarNPaidPersonalAccounts.IsPrimaryKey = false;
				colvarNPaidPersonalAccounts.IsForeignKey = false;
				colvarNPaidPersonalAccounts.IsReadOnly = false;
				colvarNPaidPersonalAccounts.DefaultSetting = @"";
				colvarNPaidPersonalAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPaidPersonalAccounts);

				TableSchema.TableColumn colvarNQualifyingOfficeAccounts = new TableSchema.TableColumn(schema);
				colvarNQualifyingOfficeAccounts.ColumnName = "NQualifyingOfficeAccounts";
				colvarNQualifyingOfficeAccounts.DataType = DbType.Int32;
				colvarNQualifyingOfficeAccounts.MaxLength = 0;
				colvarNQualifyingOfficeAccounts.AutoIncrement = false;
				colvarNQualifyingOfficeAccounts.IsNullable = true;
				colvarNQualifyingOfficeAccounts.IsPrimaryKey = false;
				colvarNQualifyingOfficeAccounts.IsForeignKey = false;
				colvarNQualifyingOfficeAccounts.IsReadOnly = false;
				colvarNQualifyingOfficeAccounts.DefaultSetting = @"";
				colvarNQualifyingOfficeAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNQualifyingOfficeAccounts);

				TableSchema.TableColumn colvarNPaidOfficeAccounts = new TableSchema.TableColumn(schema);
				colvarNPaidOfficeAccounts.ColumnName = "NPaidOfficeAccounts";
				colvarNPaidOfficeAccounts.DataType = DbType.Int32;
				colvarNPaidOfficeAccounts.MaxLength = 0;
				colvarNPaidOfficeAccounts.AutoIncrement = false;
				colvarNPaidOfficeAccounts.IsNullable = true;
				colvarNPaidOfficeAccounts.IsPrimaryKey = false;
				colvarNPaidOfficeAccounts.IsForeignKey = false;
				colvarNPaidOfficeAccounts.IsReadOnly = false;
				colvarNPaidOfficeAccounts.DefaultSetting = @"";
				colvarNPaidOfficeAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPaidOfficeAccounts);

				TableSchema.TableColumn colvarNQualifyingRegionAccounts = new TableSchema.TableColumn(schema);
				colvarNQualifyingRegionAccounts.ColumnName = "NQualifyingRegionAccounts";
				colvarNQualifyingRegionAccounts.DataType = DbType.Int32;
				colvarNQualifyingRegionAccounts.MaxLength = 0;
				colvarNQualifyingRegionAccounts.AutoIncrement = false;
				colvarNQualifyingRegionAccounts.IsNullable = true;
				colvarNQualifyingRegionAccounts.IsPrimaryKey = false;
				colvarNQualifyingRegionAccounts.IsForeignKey = false;
				colvarNQualifyingRegionAccounts.IsReadOnly = false;
				colvarNQualifyingRegionAccounts.DefaultSetting = @"";
				colvarNQualifyingRegionAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNQualifyingRegionAccounts);

				TableSchema.TableColumn colvarNPaidRegionAccounts = new TableSchema.TableColumn(schema);
				colvarNPaidRegionAccounts.ColumnName = "NPaidRegionAccounts";
				colvarNPaidRegionAccounts.DataType = DbType.Int32;
				colvarNPaidRegionAccounts.MaxLength = 0;
				colvarNPaidRegionAccounts.AutoIncrement = false;
				colvarNPaidRegionAccounts.IsNullable = true;
				colvarNPaidRegionAccounts.IsPrimaryKey = false;
				colvarNPaidRegionAccounts.IsForeignKey = false;
				colvarNPaidRegionAccounts.IsReadOnly = false;
				colvarNPaidRegionAccounts.DefaultSetting = @"";
				colvarNPaidRegionAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPaidRegionAccounts);

				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = -1;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = false;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendAccountNumbersExceptions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendAccountNumbersException LoadFrom(PR_BackendAccountNumbersException item)
		{
			PR_BackendAccountNumbersException result = new PR_BackendAccountNumbersException();
			if (item.AccountNumbersExceptionID != default(int)) {
				result.LoadByKey(item.AccountNumbersExceptionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountNumbersExceptionID {
			get { return GetColumnValue<int>(Columns.AccountNumbersExceptionID); }
			set {
				SetColumnValue(Columns.AccountNumbersExceptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountNumbersExceptionID));
			}
		}
		[DataMember]
		public int BackendPeriodID {
			get { return GetColumnValue<int>(Columns.BackendPeriodID); }
			set {
				SetColumnValue(Columns.BackendPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPeriodID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public int? NQualifyingPersonalAccounts {
			get { return GetColumnValue<int?>(Columns.NQualifyingPersonalAccounts); }
			set {
				SetColumnValue(Columns.NQualifyingPersonalAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NQualifyingPersonalAccounts));
			}
		}
		[DataMember]
		public int? NPaidPersonalAccounts {
			get { return GetColumnValue<int?>(Columns.NPaidPersonalAccounts); }
			set {
				SetColumnValue(Columns.NPaidPersonalAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPaidPersonalAccounts));
			}
		}
		[DataMember]
		public int? NQualifyingOfficeAccounts {
			get { return GetColumnValue<int?>(Columns.NQualifyingOfficeAccounts); }
			set {
				SetColumnValue(Columns.NQualifyingOfficeAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NQualifyingOfficeAccounts));
			}
		}
		[DataMember]
		public int? NPaidOfficeAccounts {
			get { return GetColumnValue<int?>(Columns.NPaidOfficeAccounts); }
			set {
				SetColumnValue(Columns.NPaidOfficeAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPaidOfficeAccounts));
			}
		}
		[DataMember]
		public int? NQualifyingRegionAccounts {
			get { return GetColumnValue<int?>(Columns.NQualifyingRegionAccounts); }
			set {
				SetColumnValue(Columns.NQualifyingRegionAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NQualifyingRegionAccounts));
			}
		}
		[DataMember]
		public int? NPaidRegionAccounts {
			get { return GetColumnValue<int?>(Columns.NPaidRegionAccounts); }
			set {
				SetColumnValue(Columns.NPaidRegionAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPaidRegionAccounts));
			}
		}
		[DataMember]
		public string Note {
			get { return GetColumnValue<string>(Columns.Note); }
			set {
				SetColumnValue(Columns.Note, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Note));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendPeriod _BackendPeriod;
		//Relationship: FK_PR_BackendAccountNumbersExceptions_PR_BackendPeriods
		public PR_BackendPeriod BackendPeriod
		{
			get
			{
				if(_BackendPeriod == null) {
					_BackendPeriod = PR_BackendPeriod.FetchByID(this.BackendPeriodID);
				}
				return _BackendPeriod;
			}
			set
			{
				SetColumnValue("BackendPeriodID", value.BackendPeriodID);
				_BackendPeriod = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountNumbersExceptionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountNumbersExceptionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BackendPeriodIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn NQualifyingPersonalAccountsColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn NPaidPersonalAccountsColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn NQualifyingOfficeAccountsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn NPaidOfficeAccountsColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn NQualifyingRegionAccountsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn NPaidRegionAccountsColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn NoteColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountNumbersExceptionID = @"AccountNumbersExceptionID";
			public static readonly string BackendPeriodID = @"BackendPeriodID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string NQualifyingPersonalAccounts = @"NQualifyingPersonalAccounts";
			public static readonly string NPaidPersonalAccounts = @"NPaidPersonalAccounts";
			public static readonly string NQualifyingOfficeAccounts = @"NQualifyingOfficeAccounts";
			public static readonly string NPaidOfficeAccounts = @"NPaidOfficeAccounts";
			public static readonly string NQualifyingRegionAccounts = @"NQualifyingRegionAccounts";
			public static readonly string NPaidRegionAccounts = @"NPaidRegionAccounts";
			public static readonly string Note = @"Note";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountNumbersExceptionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendAdjustment class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAdjustmentCollection : ActiveList<PR_BackendAdjustment, PR_BackendAdjustmentCollection>
	{
		public static PR_BackendAdjustmentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendAdjustmentCollection result = new PR_BackendAdjustmentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendAdjustment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendAdjustments table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAdjustment : ActiveRecord<PR_BackendAdjustment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendAdjustment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendAdjustments", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendAdjustmentID = new TableSchema.TableColumn(schema);
				colvarBackendAdjustmentID.ColumnName = "BackendAdjustmentID";
				colvarBackendAdjustmentID.DataType = DbType.Int32;
				colvarBackendAdjustmentID.MaxLength = 0;
				colvarBackendAdjustmentID.AutoIncrement = true;
				colvarBackendAdjustmentID.IsNullable = false;
				colvarBackendAdjustmentID.IsPrimaryKey = true;
				colvarBackendAdjustmentID.IsForeignKey = false;
				colvarBackendAdjustmentID.IsReadOnly = false;
				colvarBackendAdjustmentID.DefaultSetting = @"";
				colvarBackendAdjustmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendAdjustmentID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarReason = new TableSchema.TableColumn(schema);
				colvarReason.ColumnName = "Reason";
				colvarReason.DataType = DbType.String;
				colvarReason.MaxLength = -1;
				colvarReason.AutoIncrement = false;
				colvarReason.IsNullable = false;
				colvarReason.IsPrimaryKey = false;
				colvarReason.IsForeignKey = false;
				colvarReason.IsReadOnly = false;
				colvarReason.DefaultSetting = @"";
				colvarReason.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReason);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"(getdate())";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendAdjustments",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendAdjustment LoadFrom(PR_BackendAdjustment item)
		{
			PR_BackendAdjustment result = new PR_BackendAdjustment();
			if (item.BackendAdjustmentID != default(int)) {
				result.LoadByKey(item.BackendAdjustmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendAdjustmentID {
			get { return GetColumnValue<int>(Columns.BackendAdjustmentID); }
			set {
				SetColumnValue(Columns.BackendAdjustmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendAdjustmentID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public string Reason {
			get { return GetColumnValue<string>(Columns.Reason); }
			set {
				SetColumnValue(Columns.Reason, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Reason));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return GPEmployeeID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendAdjustmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ReasonColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendAdjustmentID = @"BackendAdjustmentID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Amount = @"Amount";
			public static readonly string Reason = @"Reason";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendAdjustmentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendAggregateTransaction class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAggregateTransactionCollection : ActiveList<PR_BackendAggregateTransaction, PR_BackendAggregateTransactionCollection>
	{
		public static PR_BackendAggregateTransactionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendAggregateTransactionCollection result = new PR_BackendAggregateTransactionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendAggregateTransaction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendAggregateTransactions table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAggregateTransaction : ActiveRecord<PR_BackendAggregateTransaction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendAggregateTransaction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendAggregateTransactions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendAggregateTransactionID = new TableSchema.TableColumn(schema);
				colvarBackendAggregateTransactionID.ColumnName = "BackendAggregateTransactionID";
				colvarBackendAggregateTransactionID.DataType = DbType.Int32;
				colvarBackendAggregateTransactionID.MaxLength = 0;
				colvarBackendAggregateTransactionID.AutoIncrement = true;
				colvarBackendAggregateTransactionID.IsNullable = false;
				colvarBackendAggregateTransactionID.IsPrimaryKey = true;
				colvarBackendAggregateTransactionID.IsForeignKey = false;
				colvarBackendAggregateTransactionID.IsReadOnly = false;
				colvarBackendAggregateTransactionID.DefaultSetting = @"";
				colvarBackendAggregateTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendAggregateTransactionID);

				TableSchema.TableColumn colvarAggregateTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarAggregateTransactionTypeID.ColumnName = "AggregateTransactionTypeID";
				colvarAggregateTransactionTypeID.DataType = DbType.Int32;
				colvarAggregateTransactionTypeID.MaxLength = 0;
				colvarAggregateTransactionTypeID.AutoIncrement = false;
				colvarAggregateTransactionTypeID.IsNullable = false;
				colvarAggregateTransactionTypeID.IsPrimaryKey = false;
				colvarAggregateTransactionTypeID.IsForeignKey = true;
				colvarAggregateTransactionTypeID.IsReadOnly = false;
				colvarAggregateTransactionTypeID.DefaultSetting = @"";
				colvarAggregateTransactionTypeID.ForeignKeyTableName = "PR_BackendAggregateTransactionTypes";
				schema.Columns.Add(colvarAggregateTransactionTypeID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarMinLevel = new TableSchema.TableColumn(schema);
				colvarMinLevel.ColumnName = "MinLevel";
				colvarMinLevel.DataType = DbType.Double;
				colvarMinLevel.MaxLength = 0;
				colvarMinLevel.AutoIncrement = false;
				colvarMinLevel.IsNullable = false;
				colvarMinLevel.IsPrimaryKey = false;
				colvarMinLevel.IsForeignKey = false;
				colvarMinLevel.IsReadOnly = false;
				colvarMinLevel.DefaultSetting = @"";
				colvarMinLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinLevel);

				TableSchema.TableColumn colvarMaxLevel = new TableSchema.TableColumn(schema);
				colvarMaxLevel.ColumnName = "MaxLevel";
				colvarMaxLevel.DataType = DbType.Double;
				colvarMaxLevel.MaxLength = 0;
				colvarMaxLevel.AutoIncrement = false;
				colvarMaxLevel.IsNullable = false;
				colvarMaxLevel.IsPrimaryKey = false;
				colvarMaxLevel.IsForeignKey = false;
				colvarMaxLevel.IsReadOnly = false;
				colvarMaxLevel.DefaultSetting = @"";
				colvarMaxLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxLevel);

				TableSchema.TableColumn colvarRate = new TableSchema.TableColumn(schema);
				colvarRate.ColumnName = "Rate";
				colvarRate.DataType = DbType.Currency;
				colvarRate.MaxLength = 0;
				colvarRate.AutoIncrement = false;
				colvarRate.IsNullable = false;
				colvarRate.IsPrimaryKey = false;
				colvarRate.IsForeignKey = false;
				colvarRate.IsReadOnly = false;
				colvarRate.DefaultSetting = @"((0))";
				colvarRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendAggregateTransactions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendAggregateTransaction LoadFrom(PR_BackendAggregateTransaction item)
		{
			PR_BackendAggregateTransaction result = new PR_BackendAggregateTransaction();
			if (item.BackendAggregateTransactionID != default(int)) {
				result.LoadByKey(item.BackendAggregateTransactionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendAggregateTransactionID {
			get { return GetColumnValue<int>(Columns.BackendAggregateTransactionID); }
			set {
				SetColumnValue(Columns.BackendAggregateTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendAggregateTransactionID));
			}
		}
		[DataMember]
		public int AggregateTransactionTypeID {
			get { return GetColumnValue<int>(Columns.AggregateTransactionTypeID); }
			set {
				SetColumnValue(Columns.AggregateTransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AggregateTransactionTypeID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public double MinLevel {
			get { return GetColumnValue<double>(Columns.MinLevel); }
			set {
				SetColumnValue(Columns.MinLevel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinLevel));
			}
		}
		[DataMember]
		public double MaxLevel {
			get { return GetColumnValue<double>(Columns.MaxLevel); }
			set {
				SetColumnValue(Columns.MaxLevel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxLevel));
			}
		}
		[DataMember]
		public decimal Rate {
			get { return GetColumnValue<decimal>(Columns.Rate); }
			set {
				SetColumnValue(Columns.Rate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Rate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendAggregateTransactionType _AggregateTransactionType;
		//Relationship: FK_PR_BackendAggregateDeductions_PR_BackendAggregateDeductionTypes
		public PR_BackendAggregateTransactionType AggregateTransactionType
		{
			get
			{
				if(_AggregateTransactionType == null) {
					_AggregateTransactionType = PR_BackendAggregateTransactionType.FetchByID(this.AggregateTransactionTypeID);
				}
				return _AggregateTransactionType;
			}
			set
			{
				SetColumnValue("AggregateTransactionTypeID", value.AggregateTransactionTypeID);
				_AggregateTransactionType = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_BackendAggregateDeductions_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendAggregateTransactionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendAggregateTransactionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AggregateTransactionTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MinLevelColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MaxLevelColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RateColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendAggregateTransactionID = @"BackendAggregateTransactionID";
			public static readonly string AggregateTransactionTypeID = @"AggregateTransactionTypeID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string MinLevel = @"MinLevel";
			public static readonly string MaxLevel = @"MaxLevel";
			public static readonly string Rate = @"Rate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendAggregateTransactionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendAggregateTransactionType class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAggregateTransactionTypeCollection : ActiveList<PR_BackendAggregateTransactionType, PR_BackendAggregateTransactionTypeCollection>
	{
		public static PR_BackendAggregateTransactionTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendAggregateTransactionTypeCollection result = new PR_BackendAggregateTransactionTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendAggregateTransactionType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendAggregateTransactionTypes table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendAggregateTransactionType : ActiveRecord<PR_BackendAggregateTransactionType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum AggregateTransactionTypeEnum : int
		{
			[EnumMember()] Tech_Service_Deduction = 1,
			[EnumMember()] Tech_Inspection_Percentage_Deduction = 2,
			[EnumMember()] Sales_Regional_Activation = 3,
			[EnumMember()] National_Regional_Bonus = 4,
			[EnumMember()] Tech_Inspection_Fails_Deduction = 5,
			[EnumMember()] Lead_Tech_Service_Bonus = 6,
			[EnumMember()] Lead_Tech_Inspection_Bonus = 7,
			[EnumMember()] Lead_Tech_Sameday_Bonus = 8,
			[EnumMember()] Lead_Tech_Training_Bonus = 9,
		}

		//[DataMember]
		//public AggregateTransactionTypeEnum AggregateTransactionTypeCode
		//{
		//	get { return (AggregateTransactionTypeEnum)AggregateTransactionTypeID; }
		//	set { AggregateTransactionTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendAggregateTransactionType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendAggregateTransactionTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAggregateTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarAggregateTransactionTypeID.ColumnName = "AggregateTransactionTypeID";
				colvarAggregateTransactionTypeID.DataType = DbType.Int32;
				colvarAggregateTransactionTypeID.MaxLength = 0;
				colvarAggregateTransactionTypeID.AutoIncrement = true;
				colvarAggregateTransactionTypeID.IsNullable = false;
				colvarAggregateTransactionTypeID.IsPrimaryKey = true;
				colvarAggregateTransactionTypeID.IsForeignKey = false;
				colvarAggregateTransactionTypeID.IsReadOnly = false;
				colvarAggregateTransactionTypeID.DefaultSetting = @"";
				colvarAggregateTransactionTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAggregateTransactionTypeID);

				TableSchema.TableColumn colvarAggregateTransactionTypeName = new TableSchema.TableColumn(schema);
				colvarAggregateTransactionTypeName.ColumnName = "AggregateTransactionTypeName";
				colvarAggregateTransactionTypeName.DataType = DbType.String;
				colvarAggregateTransactionTypeName.MaxLength = 50;
				colvarAggregateTransactionTypeName.AutoIncrement = false;
				colvarAggregateTransactionTypeName.IsNullable = false;
				colvarAggregateTransactionTypeName.IsPrimaryKey = false;
				colvarAggregateTransactionTypeName.IsForeignKey = false;
				colvarAggregateTransactionTypeName.IsReadOnly = false;
				colvarAggregateTransactionTypeName.DefaultSetting = @"";
				colvarAggregateTransactionTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAggregateTransactionTypeName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendAggregateTransactionTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendAggregateTransactionType LoadFrom(PR_BackendAggregateTransactionType item)
		{
			PR_BackendAggregateTransactionType result = new PR_BackendAggregateTransactionType();
			if (item.AggregateTransactionTypeID != default(int)) {
				result.LoadByKey(item.AggregateTransactionTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AggregateTransactionTypeID {
			get { return GetColumnValue<int>(Columns.AggregateTransactionTypeID); }
			set {
				SetColumnValue(Columns.AggregateTransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AggregateTransactionTypeID));
			}
		}
		[DataMember]
		public string AggregateTransactionTypeName {
			get { return GetColumnValue<string>(Columns.AggregateTransactionTypeName); }
			set {
				SetColumnValue(Columns.AggregateTransactionTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AggregateTransactionTypeName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AggregateTransactionTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AggregateTransactionTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AggregateTransactionTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AggregateTransactionTypeID = @"AggregateTransactionTypeID";
			public static readonly string AggregateTransactionTypeName = @"AggregateTransactionTypeName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AggregateTransactionTypeID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendAggregateTransactionCollection _PR_BackendAggregateTransactionsCol;
		//Relationship: FK_PR_BackendAggregateDeductions_PR_BackendAggregateDeductionTypes
		public PR_BackendAggregateTransactionCollection PR_BackendAggregateTransactionsCol
		{
			get
			{
				if(_PR_BackendAggregateTransactionsCol == null) {
					_PR_BackendAggregateTransactionsCol = new PR_BackendAggregateTransactionCollection();
					_PR_BackendAggregateTransactionsCol.LoadAndCloseReader(PR_BackendAggregateTransaction.Query()
						.WHERE(PR_BackendAggregateTransaction.Columns.AggregateTransactionTypeID, AggregateTransactionTypeID).ExecuteReader());
				}
				return _PR_BackendAggregateTransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendException class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendExceptionCollection : ActiveList<PR_BackendException, PR_BackendExceptionCollection>
	{
		public static PR_BackendExceptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendExceptionCollection result = new PR_BackendExceptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendException item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendExceptions table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendException : ActiveRecord<PR_BackendException>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendException()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendExceptions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendExceptionID = new TableSchema.TableColumn(schema);
				colvarBackendExceptionID.ColumnName = "BackendExceptionID";
				colvarBackendExceptionID.DataType = DbType.Int32;
				colvarBackendExceptionID.MaxLength = 0;
				colvarBackendExceptionID.AutoIncrement = true;
				colvarBackendExceptionID.IsNullable = false;
				colvarBackendExceptionID.IsPrimaryKey = true;
				colvarBackendExceptionID.IsForeignKey = false;
				colvarBackendExceptionID.IsReadOnly = false;
				colvarBackendExceptionID.DefaultSetting = @"";
				colvarBackendExceptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendExceptionID);

				TableSchema.TableColumn colvarBackendPeriodID = new TableSchema.TableColumn(schema);
				colvarBackendPeriodID.ColumnName = "BackendPeriodID";
				colvarBackendPeriodID.DataType = DbType.Int32;
				colvarBackendPeriodID.MaxLength = 0;
				colvarBackendPeriodID.AutoIncrement = false;
				colvarBackendPeriodID.IsNullable = false;
				colvarBackendPeriodID.IsPrimaryKey = false;
				colvarBackendPeriodID.IsForeignKey = true;
				colvarBackendPeriodID.IsReadOnly = false;
				colvarBackendPeriodID.DefaultSetting = @"";
				colvarBackendPeriodID.ForeignKeyTableName = "PR_BackendPeriods";
				schema.Columns.Add(colvarBackendPeriodID);

				TableSchema.TableColumn colvarBackendTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarBackendTransactionTypeID.ColumnName = "BackendTransactionTypeID";
				colvarBackendTransactionTypeID.DataType = DbType.Int32;
				colvarBackendTransactionTypeID.MaxLength = 0;
				colvarBackendTransactionTypeID.AutoIncrement = false;
				colvarBackendTransactionTypeID.IsNullable = false;
				colvarBackendTransactionTypeID.IsPrimaryKey = false;
				colvarBackendTransactionTypeID.IsForeignKey = true;
				colvarBackendTransactionTypeID.IsReadOnly = false;
				colvarBackendTransactionTypeID.DefaultSetting = @"";
				colvarBackendTransactionTypeID.ForeignKeyTableName = "PR_BackendTransactionTypes";
				schema.Columns.Add(colvarBackendTransactionTypeID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"(getdate())";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendExceptions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendException LoadFrom(PR_BackendException item)
		{
			PR_BackendException result = new PR_BackendException();
			if (item.BackendExceptionID != default(int)) {
				result.LoadByKey(item.BackendExceptionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendExceptionID {
			get { return GetColumnValue<int>(Columns.BackendExceptionID); }
			set {
				SetColumnValue(Columns.BackendExceptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendExceptionID));
			}
		}
		[DataMember]
		public int BackendPeriodID {
			get { return GetColumnValue<int>(Columns.BackendPeriodID); }
			set {
				SetColumnValue(Columns.BackendPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPeriodID));
			}
		}
		[DataMember]
		public int BackendTransactionTypeID {
			get { return GetColumnValue<int>(Columns.BackendTransactionTypeID); }
			set {
				SetColumnValue(Columns.BackendTransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendTransactionTypeID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendPeriod _BackendPeriod;
		//Relationship: FK_PR_BackendExceptions_PR_BackendPeriods
		public PR_BackendPeriod BackendPeriod
		{
			get
			{
				if(_BackendPeriod == null) {
					_BackendPeriod = PR_BackendPeriod.FetchByID(this.BackendPeriodID);
				}
				return _BackendPeriod;
			}
			set
			{
				SetColumnValue("BackendPeriodID", value.BackendPeriodID);
				_BackendPeriod = value;
			}
		}

		private PR_BackendTransactionType _BackendTransactionType;
		//Relationship: FK_PR_BackendExceptions_PR_BackendTransactionTypes
		public PR_BackendTransactionType BackendTransactionType
		{
			get
			{
				if(_BackendTransactionType == null) {
					_BackendTransactionType = PR_BackendTransactionType.FetchByID(this.BackendTransactionTypeID);
				}
				return _BackendTransactionType;
			}
			set
			{
				SetColumnValue("BackendTransactionTypeID", value.BackendTransactionTypeID);
				_BackendTransactionType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendExceptionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendExceptionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BackendPeriodIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BackendTransactionTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendExceptionID = @"BackendExceptionID";
			public static readonly string BackendPeriodID = @"BackendPeriodID";
			public static readonly string BackendTransactionTypeID = @"BackendTransactionTypeID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Amount = @"Amount";
			public static readonly string Comments = @"Comments";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendExceptionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendLegion class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendLegionCollection : ActiveList<PR_BackendLegion, PR_BackendLegionCollection>
	{
		public static PR_BackendLegionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendLegionCollection result = new PR_BackendLegionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendLegion item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendLegions table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendLegion : ActiveRecord<PR_BackendLegion>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendLegion()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendLegions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLegionID = new TableSchema.TableColumn(schema);
				colvarLegionID.ColumnName = "LegionID";
				colvarLegionID.DataType = DbType.Int32;
				colvarLegionID.MaxLength = 0;
				colvarLegionID.AutoIncrement = true;
				colvarLegionID.IsNullable = false;
				colvarLegionID.IsPrimaryKey = true;
				colvarLegionID.IsForeignKey = false;
				colvarLegionID.IsReadOnly = false;
				colvarLegionID.DefaultSetting = @"";
				colvarLegionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLegionID);

				TableSchema.TableColumn colvarPrimarySeasonID = new TableSchema.TableColumn(schema);
				colvarPrimarySeasonID.ColumnName = "PrimarySeasonID";
				colvarPrimarySeasonID.DataType = DbType.Int32;
				colvarPrimarySeasonID.MaxLength = 0;
				colvarPrimarySeasonID.AutoIncrement = false;
				colvarPrimarySeasonID.IsNullable = false;
				colvarPrimarySeasonID.IsPrimaryKey = false;
				colvarPrimarySeasonID.IsForeignKey = true;
				colvarPrimarySeasonID.IsReadOnly = false;
				colvarPrimarySeasonID.DefaultSetting = @"";
				colvarPrimarySeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarPrimarySeasonID);

				TableSchema.TableColumn colvarLegionOwnerGPID = new TableSchema.TableColumn(schema);
				colvarLegionOwnerGPID.ColumnName = "LegionOwnerGPID";
				colvarLegionOwnerGPID.DataType = DbType.String;
				colvarLegionOwnerGPID.MaxLength = 50;
				colvarLegionOwnerGPID.AutoIncrement = false;
				colvarLegionOwnerGPID.IsNullable = false;
				colvarLegionOwnerGPID.IsPrimaryKey = false;
				colvarLegionOwnerGPID.IsForeignKey = false;
				colvarLegionOwnerGPID.IsReadOnly = false;
				colvarLegionOwnerGPID.DefaultSetting = @"";
				colvarLegionOwnerGPID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLegionOwnerGPID);

				TableSchema.TableColumn colvarLegionMemberGPID = new TableSchema.TableColumn(schema);
				colvarLegionMemberGPID.ColumnName = "LegionMemberGPID";
				colvarLegionMemberGPID.DataType = DbType.String;
				colvarLegionMemberGPID.MaxLength = 50;
				colvarLegionMemberGPID.AutoIncrement = false;
				colvarLegionMemberGPID.IsNullable = false;
				colvarLegionMemberGPID.IsPrimaryKey = false;
				colvarLegionMemberGPID.IsForeignKey = false;
				colvarLegionMemberGPID.IsReadOnly = false;
				colvarLegionMemberGPID.DefaultSetting = @"";
				colvarLegionMemberGPID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLegionMemberGPID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendLegions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendLegion LoadFrom(PR_BackendLegion item)
		{
			PR_BackendLegion result = new PR_BackendLegion();
			if (item.LegionID != default(int)) {
				result.LoadByKey(item.LegionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int LegionID {
			get { return GetColumnValue<int>(Columns.LegionID); }
			set {
				SetColumnValue(Columns.LegionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LegionID));
			}
		}
		[DataMember]
		public int PrimarySeasonID {
			get { return GetColumnValue<int>(Columns.PrimarySeasonID); }
			set {
				SetColumnValue(Columns.PrimarySeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrimarySeasonID));
			}
		}
		[DataMember]
		public string LegionOwnerGPID {
			get { return GetColumnValue<string>(Columns.LegionOwnerGPID); }
			set {
				SetColumnValue(Columns.LegionOwnerGPID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LegionOwnerGPID));
			}
		}
		[DataMember]
		public string LegionMemberGPID {
			get { return GetColumnValue<string>(Columns.LegionMemberGPID); }
			set {
				SetColumnValue(Columns.LegionMemberGPID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LegionMemberGPID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _PrimarySeason;
		//Relationship: FK_PR_BackendLegions_RU_Season
		public RU_Season PrimarySeason
		{
			get
			{
				if(_PrimarySeason == null) {
					_PrimarySeason = RU_Season.FetchByID(this.PrimarySeasonID);
				}
				return _PrimarySeason;
			}
			set
			{
				SetColumnValue("PrimarySeasonID", value.SeasonID);
				_PrimarySeason = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return LegionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LegionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PrimarySeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LegionOwnerGPIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn LegionMemberGPIDColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LegionID = @"LegionID";
			public static readonly string PrimarySeasonID = @"PrimarySeasonID";
			public static readonly string LegionOwnerGPID = @"LegionOwnerGPID";
			public static readonly string LegionMemberGPID = @"LegionMemberGPID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LegionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendManagerPayscale class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendManagerPayscaleCollection : ActiveList<PR_BackendManagerPayscale, PR_BackendManagerPayscaleCollection>
	{
		public static PR_BackendManagerPayscaleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendManagerPayscaleCollection result = new PR_BackendManagerPayscaleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendManagerPayscale item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendManagerPayscales table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendManagerPayscale : ActiveRecord<PR_BackendManagerPayscale>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendManagerPayscale()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendManagerPayscales", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendManagerPayscaleID = new TableSchema.TableColumn(schema);
				colvarBackendManagerPayscaleID.ColumnName = "BackendManagerPayscaleID";
				colvarBackendManagerPayscaleID.DataType = DbType.Int32;
				colvarBackendManagerPayscaleID.MaxLength = 0;
				colvarBackendManagerPayscaleID.AutoIncrement = true;
				colvarBackendManagerPayscaleID.IsNullable = false;
				colvarBackendManagerPayscaleID.IsPrimaryKey = true;
				colvarBackendManagerPayscaleID.IsForeignKey = false;
				colvarBackendManagerPayscaleID.IsReadOnly = false;
				colvarBackendManagerPayscaleID.DefaultSetting = @"";
				colvarBackendManagerPayscaleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendManagerPayscaleID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarMinQualifyingPersonalAccounts = new TableSchema.TableColumn(schema);
				colvarMinQualifyingPersonalAccounts.ColumnName = "MinQualifyingPersonalAccounts";
				colvarMinQualifyingPersonalAccounts.DataType = DbType.Int32;
				colvarMinQualifyingPersonalAccounts.MaxLength = 0;
				colvarMinQualifyingPersonalAccounts.AutoIncrement = false;
				colvarMinQualifyingPersonalAccounts.IsNullable = false;
				colvarMinQualifyingPersonalAccounts.IsPrimaryKey = false;
				colvarMinQualifyingPersonalAccounts.IsForeignKey = false;
				colvarMinQualifyingPersonalAccounts.IsReadOnly = false;
				colvarMinQualifyingPersonalAccounts.DefaultSetting = @"((0))";
				colvarMinQualifyingPersonalAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinQualifyingPersonalAccounts);

				TableSchema.TableColumn colvarMaxQualifyingPersonalAccounts = new TableSchema.TableColumn(schema);
				colvarMaxQualifyingPersonalAccounts.ColumnName = "MaxQualifyingPersonalAccounts";
				colvarMaxQualifyingPersonalAccounts.DataType = DbType.Int32;
				colvarMaxQualifyingPersonalAccounts.MaxLength = 0;
				colvarMaxQualifyingPersonalAccounts.AutoIncrement = false;
				colvarMaxQualifyingPersonalAccounts.IsNullable = false;
				colvarMaxQualifyingPersonalAccounts.IsPrimaryKey = false;
				colvarMaxQualifyingPersonalAccounts.IsForeignKey = false;
				colvarMaxQualifyingPersonalAccounts.IsReadOnly = false;
				colvarMaxQualifyingPersonalAccounts.DefaultSetting = @"((0))";
				colvarMaxQualifyingPersonalAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxQualifyingPersonalAccounts);

				TableSchema.TableColumn colvarMinQualifyingOfficeAccounts = new TableSchema.TableColumn(schema);
				colvarMinQualifyingOfficeAccounts.ColumnName = "MinQualifyingOfficeAccounts";
				colvarMinQualifyingOfficeAccounts.DataType = DbType.Int32;
				colvarMinQualifyingOfficeAccounts.MaxLength = 0;
				colvarMinQualifyingOfficeAccounts.AutoIncrement = false;
				colvarMinQualifyingOfficeAccounts.IsNullable = false;
				colvarMinQualifyingOfficeAccounts.IsPrimaryKey = false;
				colvarMinQualifyingOfficeAccounts.IsForeignKey = false;
				colvarMinQualifyingOfficeAccounts.IsReadOnly = false;
				colvarMinQualifyingOfficeAccounts.DefaultSetting = @"((0))";
				colvarMinQualifyingOfficeAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinQualifyingOfficeAccounts);

				TableSchema.TableColumn colvarMaxQualifyingOfficeAccounts = new TableSchema.TableColumn(schema);
				colvarMaxQualifyingOfficeAccounts.ColumnName = "MaxQualifyingOfficeAccounts";
				colvarMaxQualifyingOfficeAccounts.DataType = DbType.Int32;
				colvarMaxQualifyingOfficeAccounts.MaxLength = 0;
				colvarMaxQualifyingOfficeAccounts.AutoIncrement = false;
				colvarMaxQualifyingOfficeAccounts.IsNullable = false;
				colvarMaxQualifyingOfficeAccounts.IsPrimaryKey = false;
				colvarMaxQualifyingOfficeAccounts.IsForeignKey = false;
				colvarMaxQualifyingOfficeAccounts.IsReadOnly = false;
				colvarMaxQualifyingOfficeAccounts.DefaultSetting = @"((0))";
				colvarMaxQualifyingOfficeAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxQualifyingOfficeAccounts);

				TableSchema.TableColumn colvarAccountRate = new TableSchema.TableColumn(schema);
				colvarAccountRate.ColumnName = "AccountRate";
				colvarAccountRate.DataType = DbType.Currency;
				colvarAccountRate.MaxLength = 0;
				colvarAccountRate.AutoIncrement = false;
				colvarAccountRate.IsNullable = false;
				colvarAccountRate.IsPrimaryKey = false;
				colvarAccountRate.IsForeignKey = false;
				colvarAccountRate.IsReadOnly = false;
				colvarAccountRate.DefaultSetting = @"((0))";
				colvarAccountRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountRate);

				TableSchema.TableColumn colvarOverrideRate = new TableSchema.TableColumn(schema);
				colvarOverrideRate.ColumnName = "OverrideRate";
				colvarOverrideRate.DataType = DbType.Currency;
				colvarOverrideRate.MaxLength = 0;
				colvarOverrideRate.AutoIncrement = false;
				colvarOverrideRate.IsNullable = false;
				colvarOverrideRate.IsPrimaryKey = false;
				colvarOverrideRate.IsForeignKey = false;
				colvarOverrideRate.IsReadOnly = false;
				colvarOverrideRate.DefaultSetting = @"((0))";
				colvarOverrideRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOverrideRate);

				TableSchema.TableColumn colvarSubAccountRate = new TableSchema.TableColumn(schema);
				colvarSubAccountRate.ColumnName = "SubAccountRate";
				colvarSubAccountRate.DataType = DbType.Currency;
				colvarSubAccountRate.MaxLength = 0;
				colvarSubAccountRate.AutoIncrement = false;
				colvarSubAccountRate.IsNullable = false;
				colvarSubAccountRate.IsPrimaryKey = false;
				colvarSubAccountRate.IsForeignKey = false;
				colvarSubAccountRate.IsReadOnly = false;
				colvarSubAccountRate.DefaultSetting = @"((0))";
				colvarSubAccountRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubAccountRate);

				TableSchema.TableColumn colvarSubOverrideRate = new TableSchema.TableColumn(schema);
				colvarSubOverrideRate.ColumnName = "SubOverrideRate";
				colvarSubOverrideRate.DataType = DbType.Currency;
				colvarSubOverrideRate.MaxLength = 0;
				colvarSubOverrideRate.AutoIncrement = false;
				colvarSubOverrideRate.IsNullable = false;
				colvarSubOverrideRate.IsPrimaryKey = false;
				colvarSubOverrideRate.IsForeignKey = false;
				colvarSubOverrideRate.IsReadOnly = false;
				colvarSubOverrideRate.DefaultSetting = @"((0))";
				colvarSubOverrideRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubOverrideRate);

				TableSchema.TableColumn colvarIsCoManagerPayscale = new TableSchema.TableColumn(schema);
				colvarIsCoManagerPayscale.ColumnName = "IsCoManagerPayscale";
				colvarIsCoManagerPayscale.DataType = DbType.Boolean;
				colvarIsCoManagerPayscale.MaxLength = 0;
				colvarIsCoManagerPayscale.AutoIncrement = false;
				colvarIsCoManagerPayscale.IsNullable = false;
				colvarIsCoManagerPayscale.IsPrimaryKey = false;
				colvarIsCoManagerPayscale.IsForeignKey = false;
				colvarIsCoManagerPayscale.IsReadOnly = false;
				colvarIsCoManagerPayscale.DefaultSetting = @"((0))";
				colvarIsCoManagerPayscale.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCoManagerPayscale);

				TableSchema.TableColumn colvarLoweredRMRDeduction = new TableSchema.TableColumn(schema);
				colvarLoweredRMRDeduction.ColumnName = "LoweredRMRDeduction";
				colvarLoweredRMRDeduction.DataType = DbType.Currency;
				colvarLoweredRMRDeduction.MaxLength = 0;
				colvarLoweredRMRDeduction.AutoIncrement = false;
				colvarLoweredRMRDeduction.IsNullable = false;
				colvarLoweredRMRDeduction.IsPrimaryKey = false;
				colvarLoweredRMRDeduction.IsForeignKey = false;
				colvarLoweredRMRDeduction.IsReadOnly = false;
				colvarLoweredRMRDeduction.DefaultSetting = @"((0))";
				colvarLoweredRMRDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoweredRMRDeduction);

				TableSchema.TableColumn colvarPassCreditScoreDeduction = new TableSchema.TableColumn(schema);
				colvarPassCreditScoreDeduction.ColumnName = "PassCreditScoreDeduction";
				colvarPassCreditScoreDeduction.DataType = DbType.Currency;
				colvarPassCreditScoreDeduction.MaxLength = 0;
				colvarPassCreditScoreDeduction.AutoIncrement = false;
				colvarPassCreditScoreDeduction.IsNullable = false;
				colvarPassCreditScoreDeduction.IsPrimaryKey = false;
				colvarPassCreditScoreDeduction.IsForeignKey = false;
				colvarPassCreditScoreDeduction.IsReadOnly = false;
				colvarPassCreditScoreDeduction.DefaultSetting = @"((0))";
				colvarPassCreditScoreDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassCreditScoreDeduction);

				TableSchema.TableColumn colvarWaivedActivationDeduction = new TableSchema.TableColumn(schema);
				colvarWaivedActivationDeduction.ColumnName = "WaivedActivationDeduction";
				colvarWaivedActivationDeduction.DataType = DbType.Currency;
				colvarWaivedActivationDeduction.MaxLength = 0;
				colvarWaivedActivationDeduction.AutoIncrement = false;
				colvarWaivedActivationDeduction.IsNullable = false;
				colvarWaivedActivationDeduction.IsPrimaryKey = false;
				colvarWaivedActivationDeduction.IsForeignKey = false;
				colvarWaivedActivationDeduction.IsReadOnly = false;
				colvarWaivedActivationDeduction.DefaultSetting = @"((0))";
				colvarWaivedActivationDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWaivedActivationDeduction);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendManagerPayscales",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendManagerPayscale LoadFrom(PR_BackendManagerPayscale item)
		{
			PR_BackendManagerPayscale result = new PR_BackendManagerPayscale();
			if (item.BackendManagerPayscaleID != default(int)) {
				result.LoadByKey(item.BackendManagerPayscaleID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendManagerPayscaleID {
			get { return GetColumnValue<int>(Columns.BackendManagerPayscaleID); }
			set {
				SetColumnValue(Columns.BackendManagerPayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendManagerPayscaleID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int MinQualifyingPersonalAccounts {
			get { return GetColumnValue<int>(Columns.MinQualifyingPersonalAccounts); }
			set {
				SetColumnValue(Columns.MinQualifyingPersonalAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinQualifyingPersonalAccounts));
			}
		}
		[DataMember]
		public int MaxQualifyingPersonalAccounts {
			get { return GetColumnValue<int>(Columns.MaxQualifyingPersonalAccounts); }
			set {
				SetColumnValue(Columns.MaxQualifyingPersonalAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxQualifyingPersonalAccounts));
			}
		}
		[DataMember]
		public int MinQualifyingOfficeAccounts {
			get { return GetColumnValue<int>(Columns.MinQualifyingOfficeAccounts); }
			set {
				SetColumnValue(Columns.MinQualifyingOfficeAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinQualifyingOfficeAccounts));
			}
		}
		[DataMember]
		public int MaxQualifyingOfficeAccounts {
			get { return GetColumnValue<int>(Columns.MaxQualifyingOfficeAccounts); }
			set {
				SetColumnValue(Columns.MaxQualifyingOfficeAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxQualifyingOfficeAccounts));
			}
		}
		[DataMember]
		public decimal AccountRate {
			get { return GetColumnValue<decimal>(Columns.AccountRate); }
			set {
				SetColumnValue(Columns.AccountRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountRate));
			}
		}
		[DataMember]
		public decimal OverrideRate {
			get { return GetColumnValue<decimal>(Columns.OverrideRate); }
			set {
				SetColumnValue(Columns.OverrideRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OverrideRate));
			}
		}
		[DataMember]
		public decimal SubAccountRate {
			get { return GetColumnValue<decimal>(Columns.SubAccountRate); }
			set {
				SetColumnValue(Columns.SubAccountRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubAccountRate));
			}
		}
		[DataMember]
		public decimal SubOverrideRate {
			get { return GetColumnValue<decimal>(Columns.SubOverrideRate); }
			set {
				SetColumnValue(Columns.SubOverrideRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubOverrideRate));
			}
		}
		[DataMember]
		public bool IsCoManagerPayscale {
			get { return GetColumnValue<bool>(Columns.IsCoManagerPayscale); }
			set {
				SetColumnValue(Columns.IsCoManagerPayscale, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCoManagerPayscale));
			}
		}
		[DataMember]
		public decimal LoweredRMRDeduction {
			get { return GetColumnValue<decimal>(Columns.LoweredRMRDeduction); }
			set {
				SetColumnValue(Columns.LoweredRMRDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoweredRMRDeduction));
			}
		}
		[DataMember]
		public decimal PassCreditScoreDeduction {
			get { return GetColumnValue<decimal>(Columns.PassCreditScoreDeduction); }
			set {
				SetColumnValue(Columns.PassCreditScoreDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassCreditScoreDeduction));
			}
		}
		[DataMember]
		public decimal WaivedActivationDeduction {
			get { return GetColumnValue<decimal>(Columns.WaivedActivationDeduction); }
			set {
				SetColumnValue(Columns.WaivedActivationDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WaivedActivationDeduction));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _Season;
		//Relationship: FK_PR_BackendManagerPayscales_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendManagerPayscaleID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendManagerPayscaleIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MinQualifyingPersonalAccountsColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MaxQualifyingPersonalAccountsColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MinQualifyingOfficeAccountsColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MaxQualifyingOfficeAccountsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AccountRateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn OverrideRateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn SubAccountRateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn SubOverrideRateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsCoManagerPayscaleColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn LoweredRMRDeductionColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn PassCreditScoreDeductionColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn WaivedActivationDeductionColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendManagerPayscaleID = @"BackendManagerPayscaleID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string MinQualifyingPersonalAccounts = @"MinQualifyingPersonalAccounts";
			public static readonly string MaxQualifyingPersonalAccounts = @"MaxQualifyingPersonalAccounts";
			public static readonly string MinQualifyingOfficeAccounts = @"MinQualifyingOfficeAccounts";
			public static readonly string MaxQualifyingOfficeAccounts = @"MaxQualifyingOfficeAccounts";
			public static readonly string AccountRate = @"AccountRate";
			public static readonly string OverrideRate = @"OverrideRate";
			public static readonly string SubAccountRate = @"SubAccountRate";
			public static readonly string SubOverrideRate = @"SubOverrideRate";
			public static readonly string IsCoManagerPayscale = @"IsCoManagerPayscale";
			public static readonly string LoweredRMRDeduction = @"LoweredRMRDeduction";
			public static readonly string PassCreditScoreDeduction = @"PassCreditScoreDeduction";
			public static readonly string WaivedActivationDeduction = @"WaivedActivationDeduction";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendManagerPayscaleID; }
		}
		*/

		#region Foreign Collections

		private PR_SalesManagerBackendCollection _PR_SalesManagerBackendsCol;
		//Relationship: FK_PR_SalesManagerBackends_PR_BackendManagerPayscales
		public PR_SalesManagerBackendCollection PR_SalesManagerBackendsCol
		{
			get
			{
				if(_PR_SalesManagerBackendsCol == null) {
					_PR_SalesManagerBackendsCol = new PR_SalesManagerBackendCollection();
					_PR_SalesManagerBackendsCol.LoadAndCloseReader(PR_SalesManagerBackend.Query()
						.WHERE(PR_SalesManagerBackend.Columns.BackendManagerPayscaleID, BackendManagerPayscaleID).ExecuteReader());
				}
				return _PR_SalesManagerBackendsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendManagerPaySchedule class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendManagerPayScheduleCollection : ActiveList<PR_BackendManagerPaySchedule, PR_BackendManagerPayScheduleCollection>
	{
		public static PR_BackendManagerPayScheduleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendManagerPayScheduleCollection result = new PR_BackendManagerPayScheduleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendManagerPaySchedule item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendManagerPaySchedules table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendManagerPaySchedule : ActiveRecord<PR_BackendManagerPaySchedule>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendManagerPaySchedule()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendManagerPaySchedules", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendManagerPayScheduleID = new TableSchema.TableColumn(schema);
				colvarBackendManagerPayScheduleID.ColumnName = "BackendManagerPayScheduleID";
				colvarBackendManagerPayScheduleID.DataType = DbType.Int32;
				colvarBackendManagerPayScheduleID.MaxLength = 0;
				colvarBackendManagerPayScheduleID.AutoIncrement = true;
				colvarBackendManagerPayScheduleID.IsNullable = false;
				colvarBackendManagerPayScheduleID.IsPrimaryKey = true;
				colvarBackendManagerPayScheduleID.IsForeignKey = false;
				colvarBackendManagerPayScheduleID.IsReadOnly = false;
				colvarBackendManagerPayScheduleID.DefaultSetting = @"";
				colvarBackendManagerPayScheduleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendManagerPayScheduleID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarPrimaryUserTypeID = new TableSchema.TableColumn(schema);
				colvarPrimaryUserTypeID.ColumnName = "PrimaryUserTypeID";
				colvarPrimaryUserTypeID.DataType = DbType.Int16;
				colvarPrimaryUserTypeID.MaxLength = 0;
				colvarPrimaryUserTypeID.AutoIncrement = false;
				colvarPrimaryUserTypeID.IsNullable = false;
				colvarPrimaryUserTypeID.IsPrimaryKey = false;
				colvarPrimaryUserTypeID.IsForeignKey = true;
				colvarPrimaryUserTypeID.IsReadOnly = false;
				colvarPrimaryUserTypeID.DefaultSetting = @"";
				colvarPrimaryUserTypeID.ForeignKeyTableName = "RU_UserType";
				schema.Columns.Add(colvarPrimaryUserTypeID);

				TableSchema.TableColumn colvarPayScaleID = new TableSchema.TableColumn(schema);
				colvarPayScaleID.ColumnName = "PayScaleID";
				colvarPayScaleID.DataType = DbType.Int32;
				colvarPayScaleID.MaxLength = 0;
				colvarPayScaleID.AutoIncrement = false;
				colvarPayScaleID.IsNullable = false;
				colvarPayScaleID.IsPrimaryKey = false;
				colvarPayScaleID.IsForeignKey = true;
				colvarPayScaleID.IsReadOnly = false;
				colvarPayScaleID.DefaultSetting = @"";
				colvarPayScaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayScaleID);

				TableSchema.TableColumn colvarMinQualifyingPersonalAccounts = new TableSchema.TableColumn(schema);
				colvarMinQualifyingPersonalAccounts.ColumnName = "MinQualifyingPersonalAccounts";
				colvarMinQualifyingPersonalAccounts.DataType = DbType.Int32;
				colvarMinQualifyingPersonalAccounts.MaxLength = 0;
				colvarMinQualifyingPersonalAccounts.AutoIncrement = false;
				colvarMinQualifyingPersonalAccounts.IsNullable = false;
				colvarMinQualifyingPersonalAccounts.IsPrimaryKey = false;
				colvarMinQualifyingPersonalAccounts.IsForeignKey = false;
				colvarMinQualifyingPersonalAccounts.IsReadOnly = false;
				colvarMinQualifyingPersonalAccounts.DefaultSetting = @"";
				colvarMinQualifyingPersonalAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinQualifyingPersonalAccounts);

				TableSchema.TableColumn colvarMaxQualifyingPersonalAccounts = new TableSchema.TableColumn(schema);
				colvarMaxQualifyingPersonalAccounts.ColumnName = "MaxQualifyingPersonalAccounts";
				colvarMaxQualifyingPersonalAccounts.DataType = DbType.Int32;
				colvarMaxQualifyingPersonalAccounts.MaxLength = 0;
				colvarMaxQualifyingPersonalAccounts.AutoIncrement = false;
				colvarMaxQualifyingPersonalAccounts.IsNullable = false;
				colvarMaxQualifyingPersonalAccounts.IsPrimaryKey = false;
				colvarMaxQualifyingPersonalAccounts.IsForeignKey = false;
				colvarMaxQualifyingPersonalAccounts.IsReadOnly = false;
				colvarMaxQualifyingPersonalAccounts.DefaultSetting = @"";
				colvarMaxQualifyingPersonalAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxQualifyingPersonalAccounts);

				TableSchema.TableColumn colvarMinQualifyingOfficeAccounts = new TableSchema.TableColumn(schema);
				colvarMinQualifyingOfficeAccounts.ColumnName = "MinQualifyingOfficeAccounts";
				colvarMinQualifyingOfficeAccounts.DataType = DbType.Int32;
				colvarMinQualifyingOfficeAccounts.MaxLength = 0;
				colvarMinQualifyingOfficeAccounts.AutoIncrement = false;
				colvarMinQualifyingOfficeAccounts.IsNullable = false;
				colvarMinQualifyingOfficeAccounts.IsPrimaryKey = false;
				colvarMinQualifyingOfficeAccounts.IsForeignKey = false;
				colvarMinQualifyingOfficeAccounts.IsReadOnly = false;
				colvarMinQualifyingOfficeAccounts.DefaultSetting = @"";
				colvarMinQualifyingOfficeAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinQualifyingOfficeAccounts);

				TableSchema.TableColumn colvarMaxQualifyingOfficeAccounts = new TableSchema.TableColumn(schema);
				colvarMaxQualifyingOfficeAccounts.ColumnName = "MaxQualifyingOfficeAccounts";
				colvarMaxQualifyingOfficeAccounts.DataType = DbType.Int32;
				colvarMaxQualifyingOfficeAccounts.MaxLength = 0;
				colvarMaxQualifyingOfficeAccounts.AutoIncrement = false;
				colvarMaxQualifyingOfficeAccounts.IsNullable = false;
				colvarMaxQualifyingOfficeAccounts.IsPrimaryKey = false;
				colvarMaxQualifyingOfficeAccounts.IsForeignKey = false;
				colvarMaxQualifyingOfficeAccounts.IsReadOnly = false;
				colvarMaxQualifyingOfficeAccounts.DefaultSetting = @"";
				colvarMaxQualifyingOfficeAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxQualifyingOfficeAccounts);

				TableSchema.TableColumn colvarAccountSaleRate = new TableSchema.TableColumn(schema);
				colvarAccountSaleRate.ColumnName = "AccountSaleRate";
				colvarAccountSaleRate.DataType = DbType.Currency;
				colvarAccountSaleRate.MaxLength = 0;
				colvarAccountSaleRate.AutoIncrement = false;
				colvarAccountSaleRate.IsNullable = false;
				colvarAccountSaleRate.IsPrimaryKey = false;
				colvarAccountSaleRate.IsForeignKey = false;
				colvarAccountSaleRate.IsReadOnly = false;
				colvarAccountSaleRate.DefaultSetting = @"";
				colvarAccountSaleRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountSaleRate);

				TableSchema.TableColumn colvarSubAccountSaleRate = new TableSchema.TableColumn(schema);
				colvarSubAccountSaleRate.ColumnName = "SubAccountSaleRate";
				colvarSubAccountSaleRate.DataType = DbType.Currency;
				colvarSubAccountSaleRate.MaxLength = 0;
				colvarSubAccountSaleRate.AutoIncrement = false;
				colvarSubAccountSaleRate.IsNullable = false;
				colvarSubAccountSaleRate.IsPrimaryKey = false;
				colvarSubAccountSaleRate.IsForeignKey = false;
				colvarSubAccountSaleRate.IsReadOnly = false;
				colvarSubAccountSaleRate.DefaultSetting = @"";
				colvarSubAccountSaleRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubAccountSaleRate);

				TableSchema.TableColumn colvarAccountOverrideRate = new TableSchema.TableColumn(schema);
				colvarAccountOverrideRate.ColumnName = "AccountOverrideRate";
				colvarAccountOverrideRate.DataType = DbType.Currency;
				colvarAccountOverrideRate.MaxLength = 0;
				colvarAccountOverrideRate.AutoIncrement = false;
				colvarAccountOverrideRate.IsNullable = false;
				colvarAccountOverrideRate.IsPrimaryKey = false;
				colvarAccountOverrideRate.IsForeignKey = false;
				colvarAccountOverrideRate.IsReadOnly = false;
				colvarAccountOverrideRate.DefaultSetting = @"";
				colvarAccountOverrideRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountOverrideRate);

				TableSchema.TableColumn colvarSubAccountOverrideRate = new TableSchema.TableColumn(schema);
				colvarSubAccountOverrideRate.ColumnName = "SubAccountOverrideRate";
				colvarSubAccountOverrideRate.DataType = DbType.Currency;
				colvarSubAccountOverrideRate.MaxLength = 0;
				colvarSubAccountOverrideRate.AutoIncrement = false;
				colvarSubAccountOverrideRate.IsNullable = false;
				colvarSubAccountOverrideRate.IsPrimaryKey = false;
				colvarSubAccountOverrideRate.IsForeignKey = false;
				colvarSubAccountOverrideRate.IsReadOnly = false;
				colvarSubAccountOverrideRate.DefaultSetting = @"";
				colvarSubAccountOverrideRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubAccountOverrideRate);

				TableSchema.TableColumn colvarWaivedActivationDeduction = new TableSchema.TableColumn(schema);
				colvarWaivedActivationDeduction.ColumnName = "WaivedActivationDeduction";
				colvarWaivedActivationDeduction.DataType = DbType.Currency;
				colvarWaivedActivationDeduction.MaxLength = 0;
				colvarWaivedActivationDeduction.AutoIncrement = false;
				colvarWaivedActivationDeduction.IsNullable = false;
				colvarWaivedActivationDeduction.IsPrimaryKey = false;
				colvarWaivedActivationDeduction.IsForeignKey = false;
				colvarWaivedActivationDeduction.IsReadOnly = false;
				colvarWaivedActivationDeduction.DefaultSetting = @"";
				colvarWaivedActivationDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWaivedActivationDeduction);

				TableSchema.TableColumn colvarLoweredRMRDeduction = new TableSchema.TableColumn(schema);
				colvarLoweredRMRDeduction.ColumnName = "LoweredRMRDeduction";
				colvarLoweredRMRDeduction.DataType = DbType.Currency;
				colvarLoweredRMRDeduction.MaxLength = 0;
				colvarLoweredRMRDeduction.AutoIncrement = false;
				colvarLoweredRMRDeduction.IsNullable = false;
				colvarLoweredRMRDeduction.IsPrimaryKey = false;
				colvarLoweredRMRDeduction.IsForeignKey = false;
				colvarLoweredRMRDeduction.IsReadOnly = false;
				colvarLoweredRMRDeduction.DefaultSetting = @"";
				colvarLoweredRMRDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoweredRMRDeduction);

				TableSchema.TableColumn colvarPassCreditScoreDeduction = new TableSchema.TableColumn(schema);
				colvarPassCreditScoreDeduction.ColumnName = "PassCreditScoreDeduction";
				colvarPassCreditScoreDeduction.DataType = DbType.Currency;
				colvarPassCreditScoreDeduction.MaxLength = 0;
				colvarPassCreditScoreDeduction.AutoIncrement = false;
				colvarPassCreditScoreDeduction.IsNullable = false;
				colvarPassCreditScoreDeduction.IsPrimaryKey = false;
				colvarPassCreditScoreDeduction.IsForeignKey = false;
				colvarPassCreditScoreDeduction.IsReadOnly = false;
				colvarPassCreditScoreDeduction.DefaultSetting = @"";
				colvarPassCreditScoreDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassCreditScoreDeduction);

				TableSchema.TableColumn colvarManagerSalaryTotal = new TableSchema.TableColumn(schema);
				colvarManagerSalaryTotal.ColumnName = "ManagerSalaryTotal";
				colvarManagerSalaryTotal.DataType = DbType.Currency;
				colvarManagerSalaryTotal.MaxLength = 0;
				colvarManagerSalaryTotal.AutoIncrement = false;
				colvarManagerSalaryTotal.IsNullable = false;
				colvarManagerSalaryTotal.IsPrimaryKey = false;
				colvarManagerSalaryTotal.IsForeignKey = false;
				colvarManagerSalaryTotal.IsReadOnly = false;
				colvarManagerSalaryTotal.DefaultSetting = @"";
				colvarManagerSalaryTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManagerSalaryTotal);

				TableSchema.TableColumn colvarUpgradeBonusPerPoint = new TableSchema.TableColumn(schema);
				colvarUpgradeBonusPerPoint.ColumnName = "UpgradeBonusPerPoint";
				colvarUpgradeBonusPerPoint.DataType = DbType.Currency;
				colvarUpgradeBonusPerPoint.MaxLength = 0;
				colvarUpgradeBonusPerPoint.AutoIncrement = false;
				colvarUpgradeBonusPerPoint.IsNullable = false;
				colvarUpgradeBonusPerPoint.IsPrimaryKey = false;
				colvarUpgradeBonusPerPoint.IsForeignKey = false;
				colvarUpgradeBonusPerPoint.IsReadOnly = false;
				colvarUpgradeBonusPerPoint.DefaultSetting = @"((0))";
				colvarUpgradeBonusPerPoint.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpgradeBonusPerPoint);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendManagerPaySchedules",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendManagerPaySchedule LoadFrom(PR_BackendManagerPaySchedule item)
		{
			PR_BackendManagerPaySchedule result = new PR_BackendManagerPaySchedule();
			if (item.BackendManagerPayScheduleID != default(int)) {
				result.LoadByKey(item.BackendManagerPayScheduleID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendManagerPayScheduleID {
			get { return GetColumnValue<int>(Columns.BackendManagerPayScheduleID); }
			set {
				SetColumnValue(Columns.BackendManagerPayScheduleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendManagerPayScheduleID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public short PrimaryUserTypeID {
			get { return GetColumnValue<short>(Columns.PrimaryUserTypeID); }
			set {
				SetColumnValue(Columns.PrimaryUserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrimaryUserTypeID));
			}
		}
		[DataMember]
		public int PayScaleID {
			get { return GetColumnValue<int>(Columns.PayScaleID); }
			set {
				SetColumnValue(Columns.PayScaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScaleID));
			}
		}
		[DataMember]
		public int MinQualifyingPersonalAccounts {
			get { return GetColumnValue<int>(Columns.MinQualifyingPersonalAccounts); }
			set {
				SetColumnValue(Columns.MinQualifyingPersonalAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinQualifyingPersonalAccounts));
			}
		}
		[DataMember]
		public int MaxQualifyingPersonalAccounts {
			get { return GetColumnValue<int>(Columns.MaxQualifyingPersonalAccounts); }
			set {
				SetColumnValue(Columns.MaxQualifyingPersonalAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxQualifyingPersonalAccounts));
			}
		}
		[DataMember]
		public int MinQualifyingOfficeAccounts {
			get { return GetColumnValue<int>(Columns.MinQualifyingOfficeAccounts); }
			set {
				SetColumnValue(Columns.MinQualifyingOfficeAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinQualifyingOfficeAccounts));
			}
		}
		[DataMember]
		public int MaxQualifyingOfficeAccounts {
			get { return GetColumnValue<int>(Columns.MaxQualifyingOfficeAccounts); }
			set {
				SetColumnValue(Columns.MaxQualifyingOfficeAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxQualifyingOfficeAccounts));
			}
		}
		[DataMember]
		public decimal AccountSaleRate {
			get { return GetColumnValue<decimal>(Columns.AccountSaleRate); }
			set {
				SetColumnValue(Columns.AccountSaleRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSaleRate));
			}
		}
		[DataMember]
		public decimal SubAccountSaleRate {
			get { return GetColumnValue<decimal>(Columns.SubAccountSaleRate); }
			set {
				SetColumnValue(Columns.SubAccountSaleRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubAccountSaleRate));
			}
		}
		[DataMember]
		public decimal AccountOverrideRate {
			get { return GetColumnValue<decimal>(Columns.AccountOverrideRate); }
			set {
				SetColumnValue(Columns.AccountOverrideRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountOverrideRate));
			}
		}
		[DataMember]
		public decimal SubAccountOverrideRate {
			get { return GetColumnValue<decimal>(Columns.SubAccountOverrideRate); }
			set {
				SetColumnValue(Columns.SubAccountOverrideRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubAccountOverrideRate));
			}
		}
		[DataMember]
		public decimal WaivedActivationDeduction {
			get { return GetColumnValue<decimal>(Columns.WaivedActivationDeduction); }
			set {
				SetColumnValue(Columns.WaivedActivationDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WaivedActivationDeduction));
			}
		}
		[DataMember]
		public decimal LoweredRMRDeduction {
			get { return GetColumnValue<decimal>(Columns.LoweredRMRDeduction); }
			set {
				SetColumnValue(Columns.LoweredRMRDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoweredRMRDeduction));
			}
		}
		[DataMember]
		public decimal PassCreditScoreDeduction {
			get { return GetColumnValue<decimal>(Columns.PassCreditScoreDeduction); }
			set {
				SetColumnValue(Columns.PassCreditScoreDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassCreditScoreDeduction));
			}
		}
		[DataMember]
		public decimal ManagerSalaryTotal {
			get { return GetColumnValue<decimal>(Columns.ManagerSalaryTotal); }
			set {
				SetColumnValue(Columns.ManagerSalaryTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagerSalaryTotal));
			}
		}
		[DataMember]
		public decimal UpgradeBonusPerPoint {
			get { return GetColumnValue<decimal>(Columns.UpgradeBonusPerPoint); }
			set {
				SetColumnValue(Columns.UpgradeBonusPerPoint, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UpgradeBonusPerPoint));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Payscale _PayScale;
		//Relationship: FK_PR_BackendManagerPaySchedules_RU_Payscales
		public RU_Payscale PayScale
		{
			get
			{
				if(_PayScale == null) {
					_PayScale = RU_Payscale.FetchByID(this.PayScaleID);
				}
				return _PayScale;
			}
			set
			{
				SetColumnValue("PayScaleID", value.PayscaleID);
				_PayScale = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_BackendManagerPaySchedules_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_UserType _PrimaryUserType;
		//Relationship: FK_PR_BackendManagerPaySchedules_RU_UserType
		public RU_UserType PrimaryUserType
		{
			get
			{
				if(_PrimaryUserType == null) {
					_PrimaryUserType = RU_UserType.FetchByID(this.PrimaryUserTypeID);
				}
				return _PrimaryUserType;
			}
			set
			{
				SetColumnValue("PrimaryUserTypeID", value.UserTypeID);
				_PrimaryUserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendManagerPayScheduleID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendManagerPayScheduleIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PrimaryUserTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PayScaleIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MinQualifyingPersonalAccountsColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MaxQualifyingPersonalAccountsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MinQualifyingOfficeAccountsColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn MaxQualifyingOfficeAccountsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn AccountSaleRateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn SubAccountSaleRateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn AccountOverrideRateColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn SubAccountOverrideRateColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn WaivedActivationDeductionColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn LoweredRMRDeductionColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PassCreditScoreDeductionColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ManagerSalaryTotalColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn UpgradeBonusPerPointColumn
		{
			get { return Schema.Columns[16]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendManagerPayScheduleID = @"BackendManagerPayScheduleID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string PrimaryUserTypeID = @"PrimaryUserTypeID";
			public static readonly string PayScaleID = @"PayScaleID";
			public static readonly string MinQualifyingPersonalAccounts = @"MinQualifyingPersonalAccounts";
			public static readonly string MaxQualifyingPersonalAccounts = @"MaxQualifyingPersonalAccounts";
			public static readonly string MinQualifyingOfficeAccounts = @"MinQualifyingOfficeAccounts";
			public static readonly string MaxQualifyingOfficeAccounts = @"MaxQualifyingOfficeAccounts";
			public static readonly string AccountSaleRate = @"AccountSaleRate";
			public static readonly string SubAccountSaleRate = @"SubAccountSaleRate";
			public static readonly string AccountOverrideRate = @"AccountOverrideRate";
			public static readonly string SubAccountOverrideRate = @"SubAccountOverrideRate";
			public static readonly string WaivedActivationDeduction = @"WaivedActivationDeduction";
			public static readonly string LoweredRMRDeduction = @"LoweredRMRDeduction";
			public static readonly string PassCreditScoreDeduction = @"PassCreditScoreDeduction";
			public static readonly string ManagerSalaryTotal = @"ManagerSalaryTotal";
			public static readonly string UpgradeBonusPerPoint = @"UpgradeBonusPerPoint";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendManagerPayScheduleID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendCollection _PR_BackendsCol;
		//Relationship: FK_PR_Backends_PR_BackendManagerPaySchedules
		public PR_BackendCollection PR_BackendsCol
		{
			get
			{
				if(_PR_BackendsCol == null) {
					_PR_BackendsCol = new PR_BackendCollection();
					_PR_BackendsCol.LoadAndCloseReader(PR_Backend.Query()
						.WHERE(PR_Backend.Columns.BackendManagerPayScheduleID, BackendManagerPayScheduleID).ExecuteReader());
				}
				return _PR_BackendsCol;
			}
		}

		private PR_BackendCollection _PR_Backends02Col;
		//Relationship: FK_PR_Backends_PR_BackendManagerPaySchedules1
		public PR_BackendCollection PR_Backends02Col
		{
			get
			{
				if(_PR_Backends02Col == null) {
					_PR_Backends02Col = new PR_BackendCollection();
					_PR_Backends02Col.LoadAndCloseReader(PR_Backend.Query()
						.WHERE(PR_Backend.Columns.BackendRegionalManagerPayScheduleID, BackendManagerPayScheduleID).ExecuteReader());
				}
				return _PR_Backends02Col;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendPayscale class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendPayscaleCollection : ActiveList<PR_BackendPayscale, PR_BackendPayscaleCollection>
	{
		public static PR_BackendPayscaleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendPayscaleCollection result = new PR_BackendPayscaleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendPayscale item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendPayscales table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendPayscale : ActiveRecord<PR_BackendPayscale>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendPayscale()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendPayscales", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendPayscaleID = new TableSchema.TableColumn(schema);
				colvarBackendPayscaleID.ColumnName = "BackendPayscaleID";
				colvarBackendPayscaleID.DataType = DbType.Int32;
				colvarBackendPayscaleID.MaxLength = 0;
				colvarBackendPayscaleID.AutoIncrement = true;
				colvarBackendPayscaleID.IsNullable = false;
				colvarBackendPayscaleID.IsPrimaryKey = true;
				colvarBackendPayscaleID.IsForeignKey = false;
				colvarBackendPayscaleID.IsReadOnly = false;
				colvarBackendPayscaleID.DefaultSetting = @"";
				colvarBackendPayscaleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendPayscaleID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarUserTypeID = new TableSchema.TableColumn(schema);
				colvarUserTypeID.ColumnName = "UserTypeID";
				colvarUserTypeID.DataType = DbType.Int16;
				colvarUserTypeID.MaxLength = 0;
				colvarUserTypeID.AutoIncrement = false;
				colvarUserTypeID.IsNullable = false;
				colvarUserTypeID.IsPrimaryKey = false;
				colvarUserTypeID.IsForeignKey = true;
				colvarUserTypeID.IsReadOnly = false;
				colvarUserTypeID.DefaultSetting = @"";
				colvarUserTypeID.ForeignKeyTableName = "RU_UserType";
				schema.Columns.Add(colvarUserTypeID);

				TableSchema.TableColumn colvarPayscaleID = new TableSchema.TableColumn(schema);
				colvarPayscaleID.ColumnName = "PayscaleID";
				colvarPayscaleID.DataType = DbType.Int32;
				colvarPayscaleID.MaxLength = 0;
				colvarPayscaleID.AutoIncrement = false;
				colvarPayscaleID.IsNullable = false;
				colvarPayscaleID.IsPrimaryKey = false;
				colvarPayscaleID.IsForeignKey = true;
				colvarPayscaleID.IsReadOnly = false;
				colvarPayscaleID.DefaultSetting = @"";
				colvarPayscaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayscaleID);

				TableSchema.TableColumn colvarMinQualifyingAccounts = new TableSchema.TableColumn(schema);
				colvarMinQualifyingAccounts.ColumnName = "MinQualifyingAccounts";
				colvarMinQualifyingAccounts.DataType = DbType.Int32;
				colvarMinQualifyingAccounts.MaxLength = 0;
				colvarMinQualifyingAccounts.AutoIncrement = false;
				colvarMinQualifyingAccounts.IsNullable = false;
				colvarMinQualifyingAccounts.IsPrimaryKey = false;
				colvarMinQualifyingAccounts.IsForeignKey = false;
				colvarMinQualifyingAccounts.IsReadOnly = false;
				colvarMinQualifyingAccounts.DefaultSetting = @"";
				colvarMinQualifyingAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinQualifyingAccounts);

				TableSchema.TableColumn colvarMaxQualifyingAccounts = new TableSchema.TableColumn(schema);
				colvarMaxQualifyingAccounts.ColumnName = "MaxQualifyingAccounts";
				colvarMaxQualifyingAccounts.DataType = DbType.Int32;
				colvarMaxQualifyingAccounts.MaxLength = 0;
				colvarMaxQualifyingAccounts.AutoIncrement = false;
				colvarMaxQualifyingAccounts.IsNullable = false;
				colvarMaxQualifyingAccounts.IsPrimaryKey = false;
				colvarMaxQualifyingAccounts.IsForeignKey = false;
				colvarMaxQualifyingAccounts.IsReadOnly = false;
				colvarMaxQualifyingAccounts.DefaultSetting = @"";
				colvarMaxQualifyingAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxQualifyingAccounts);

				TableSchema.TableColumn colvarAccountRate = new TableSchema.TableColumn(schema);
				colvarAccountRate.ColumnName = "AccountRate";
				colvarAccountRate.DataType = DbType.Currency;
				colvarAccountRate.MaxLength = 0;
				colvarAccountRate.AutoIncrement = false;
				colvarAccountRate.IsNullable = false;
				colvarAccountRate.IsPrimaryKey = false;
				colvarAccountRate.IsForeignKey = false;
				colvarAccountRate.IsReadOnly = false;
				colvarAccountRate.DefaultSetting = @"((0))";
				colvarAccountRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountRate);

				TableSchema.TableColumn colvarCashBonusAmount = new TableSchema.TableColumn(schema);
				colvarCashBonusAmount.ColumnName = "CashBonusAmount";
				colvarCashBonusAmount.DataType = DbType.Currency;
				colvarCashBonusAmount.MaxLength = 0;
				colvarCashBonusAmount.AutoIncrement = false;
				colvarCashBonusAmount.IsNullable = false;
				colvarCashBonusAmount.IsPrimaryKey = false;
				colvarCashBonusAmount.IsForeignKey = false;
				colvarCashBonusAmount.IsReadOnly = false;
				colvarCashBonusAmount.DefaultSetting = @"((0))";
				colvarCashBonusAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCashBonusAmount);

				TableSchema.TableColumn colvarSigningBonusAmount = new TableSchema.TableColumn(schema);
				colvarSigningBonusAmount.ColumnName = "SigningBonusAmount";
				colvarSigningBonusAmount.DataType = DbType.Currency;
				colvarSigningBonusAmount.MaxLength = 0;
				colvarSigningBonusAmount.AutoIncrement = false;
				colvarSigningBonusAmount.IsNullable = false;
				colvarSigningBonusAmount.IsPrimaryKey = false;
				colvarSigningBonusAmount.IsForeignKey = false;
				colvarSigningBonusAmount.IsReadOnly = false;
				colvarSigningBonusAmount.DefaultSetting = @"((0))";
				colvarSigningBonusAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSigningBonusAmount);

				TableSchema.TableColumn colvarStartingPointBank = new TableSchema.TableColumn(schema);
				colvarStartingPointBank.ColumnName = "StartingPointBank";
				colvarStartingPointBank.DataType = DbType.Double;
				colvarStartingPointBank.MaxLength = 0;
				colvarStartingPointBank.AutoIncrement = false;
				colvarStartingPointBank.IsNullable = false;
				colvarStartingPointBank.IsPrimaryKey = false;
				colvarStartingPointBank.IsForeignKey = false;
				colvarStartingPointBank.IsReadOnly = false;
				colvarStartingPointBank.DefaultSetting = @"((0))";
				colvarStartingPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartingPointBank);

				TableSchema.TableColumn colvarRentBonusCap = new TableSchema.TableColumn(schema);
				colvarRentBonusCap.ColumnName = "RentBonusCap";
				colvarRentBonusCap.DataType = DbType.Currency;
				colvarRentBonusCap.MaxLength = 0;
				colvarRentBonusCap.AutoIncrement = false;
				colvarRentBonusCap.IsNullable = false;
				colvarRentBonusCap.IsPrimaryKey = false;
				colvarRentBonusCap.IsForeignKey = false;
				colvarRentBonusCap.IsReadOnly = false;
				colvarRentBonusCap.DefaultSetting = @"((0))";
				colvarRentBonusCap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentBonusCap);

				TableSchema.TableColumn colvarRentBonusMultiplier = new TableSchema.TableColumn(schema);
				colvarRentBonusMultiplier.ColumnName = "RentBonusMultiplier";
				colvarRentBonusMultiplier.DataType = DbType.Double;
				colvarRentBonusMultiplier.MaxLength = 0;
				colvarRentBonusMultiplier.AutoIncrement = false;
				colvarRentBonusMultiplier.IsNullable = false;
				colvarRentBonusMultiplier.IsPrimaryKey = false;
				colvarRentBonusMultiplier.IsForeignKey = false;
				colvarRentBonusMultiplier.IsReadOnly = false;
				colvarRentBonusMultiplier.DefaultSetting = @"((0))";
				colvarRentBonusMultiplier.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentBonusMultiplier);

				TableSchema.TableColumn colvarSubAccountRate = new TableSchema.TableColumn(schema);
				colvarSubAccountRate.ColumnName = "SubAccountRate";
				colvarSubAccountRate.DataType = DbType.Currency;
				colvarSubAccountRate.MaxLength = 0;
				colvarSubAccountRate.AutoIncrement = false;
				colvarSubAccountRate.IsNullable = false;
				colvarSubAccountRate.IsPrimaryKey = false;
				colvarSubAccountRate.IsForeignKey = false;
				colvarSubAccountRate.IsReadOnly = false;
				colvarSubAccountRate.DefaultSetting = @"((0))";
				colvarSubAccountRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubAccountRate);

				TableSchema.TableColumn colvarWaivedActivationDeduction = new TableSchema.TableColumn(schema);
				colvarWaivedActivationDeduction.ColumnName = "WaivedActivationDeduction";
				colvarWaivedActivationDeduction.DataType = DbType.Currency;
				colvarWaivedActivationDeduction.MaxLength = 0;
				colvarWaivedActivationDeduction.AutoIncrement = false;
				colvarWaivedActivationDeduction.IsNullable = false;
				colvarWaivedActivationDeduction.IsPrimaryKey = false;
				colvarWaivedActivationDeduction.IsForeignKey = false;
				colvarWaivedActivationDeduction.IsReadOnly = false;
				colvarWaivedActivationDeduction.DefaultSetting = @"((0))";
				colvarWaivedActivationDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWaivedActivationDeduction);

				TableSchema.TableColumn colvarPassCreditDeduction = new TableSchema.TableColumn(schema);
				colvarPassCreditDeduction.ColumnName = "PassCreditDeduction";
				colvarPassCreditDeduction.DataType = DbType.Currency;
				colvarPassCreditDeduction.MaxLength = 0;
				colvarPassCreditDeduction.AutoIncrement = false;
				colvarPassCreditDeduction.IsNullable = false;
				colvarPassCreditDeduction.IsPrimaryKey = false;
				colvarPassCreditDeduction.IsForeignKey = false;
				colvarPassCreditDeduction.IsReadOnly = false;
				colvarPassCreditDeduction.DefaultSetting = @"((0))";
				colvarPassCreditDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassCreditDeduction);

				TableSchema.TableColumn colvarManualBillDeduction = new TableSchema.TableColumn(schema);
				colvarManualBillDeduction.ColumnName = "ManualBillDeduction";
				colvarManualBillDeduction.DataType = DbType.Currency;
				colvarManualBillDeduction.MaxLength = 0;
				colvarManualBillDeduction.AutoIncrement = false;
				colvarManualBillDeduction.IsNullable = false;
				colvarManualBillDeduction.IsPrimaryKey = false;
				colvarManualBillDeduction.IsForeignKey = false;
				colvarManualBillDeduction.IsReadOnly = false;
				colvarManualBillDeduction.DefaultSetting = @"((0))";
				colvarManualBillDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManualBillDeduction);

				TableSchema.TableColumn colvarMissingInvoiceFeeDeduction = new TableSchema.TableColumn(schema);
				colvarMissingInvoiceFeeDeduction.ColumnName = "MissingInvoiceFeeDeduction";
				colvarMissingInvoiceFeeDeduction.DataType = DbType.Currency;
				colvarMissingInvoiceFeeDeduction.MaxLength = 0;
				colvarMissingInvoiceFeeDeduction.AutoIncrement = false;
				colvarMissingInvoiceFeeDeduction.IsNullable = false;
				colvarMissingInvoiceFeeDeduction.IsPrimaryKey = false;
				colvarMissingInvoiceFeeDeduction.IsForeignKey = false;
				colvarMissingInvoiceFeeDeduction.IsReadOnly = false;
				colvarMissingInvoiceFeeDeduction.DefaultSetting = @"((0))";
				colvarMissingInvoiceFeeDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMissingInvoiceFeeDeduction);

				TableSchema.TableColumn colvarDigitalAccountDeduction = new TableSchema.TableColumn(schema);
				colvarDigitalAccountDeduction.ColumnName = "DigitalAccountDeduction";
				colvarDigitalAccountDeduction.DataType = DbType.Currency;
				colvarDigitalAccountDeduction.MaxLength = 0;
				colvarDigitalAccountDeduction.AutoIncrement = false;
				colvarDigitalAccountDeduction.IsNullable = false;
				colvarDigitalAccountDeduction.IsPrimaryKey = false;
				colvarDigitalAccountDeduction.IsForeignKey = false;
				colvarDigitalAccountDeduction.IsReadOnly = false;
				colvarDigitalAccountDeduction.DefaultSetting = @"((0))";
				colvarDigitalAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDigitalAccountDeduction);

				TableSchema.TableColumn colvarSavedAccountDeduction = new TableSchema.TableColumn(schema);
				colvarSavedAccountDeduction.ColumnName = "SavedAccountDeduction";
				colvarSavedAccountDeduction.DataType = DbType.Currency;
				colvarSavedAccountDeduction.MaxLength = 0;
				colvarSavedAccountDeduction.AutoIncrement = false;
				colvarSavedAccountDeduction.IsNullable = false;
				colvarSavedAccountDeduction.IsPrimaryKey = false;
				colvarSavedAccountDeduction.IsForeignKey = false;
				colvarSavedAccountDeduction.IsReadOnly = false;
				colvarSavedAccountDeduction.DefaultSetting = @"((0))";
				colvarSavedAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSavedAccountDeduction);

				TableSchema.TableColumn colvarCommercialAccountDeduction = new TableSchema.TableColumn(schema);
				colvarCommercialAccountDeduction.ColumnName = "CommercialAccountDeduction";
				colvarCommercialAccountDeduction.DataType = DbType.Currency;
				colvarCommercialAccountDeduction.MaxLength = 0;
				colvarCommercialAccountDeduction.AutoIncrement = false;
				colvarCommercialAccountDeduction.IsNullable = false;
				colvarCommercialAccountDeduction.IsPrimaryKey = false;
				colvarCommercialAccountDeduction.IsForeignKey = false;
				colvarCommercialAccountDeduction.IsReadOnly = false;
				colvarCommercialAccountDeduction.DefaultSetting = @"((0))";
				colvarCommercialAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommercialAccountDeduction);

				TableSchema.TableColumn colvarPricePerPoint = new TableSchema.TableColumn(schema);
				colvarPricePerPoint.ColumnName = "PricePerPoint";
				colvarPricePerPoint.DataType = DbType.Currency;
				colvarPricePerPoint.MaxLength = 0;
				colvarPricePerPoint.AutoIncrement = false;
				colvarPricePerPoint.IsNullable = false;
				colvarPricePerPoint.IsPrimaryKey = false;
				colvarPricePerPoint.IsForeignKey = false;
				colvarPricePerPoint.IsReadOnly = false;
				colvarPricePerPoint.DefaultSetting = @"((0))";
				colvarPricePerPoint.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPricePerPoint);

				TableSchema.TableColumn colvarRaisedRMRPerDollarBonus = new TableSchema.TableColumn(schema);
				colvarRaisedRMRPerDollarBonus.ColumnName = "RaisedRMRPerDollarBonus";
				colvarRaisedRMRPerDollarBonus.DataType = DbType.Currency;
				colvarRaisedRMRPerDollarBonus.MaxLength = 0;
				colvarRaisedRMRPerDollarBonus.AutoIncrement = false;
				colvarRaisedRMRPerDollarBonus.IsNullable = false;
				colvarRaisedRMRPerDollarBonus.IsPrimaryKey = false;
				colvarRaisedRMRPerDollarBonus.IsForeignKey = false;
				colvarRaisedRMRPerDollarBonus.IsReadOnly = false;
				colvarRaisedRMRPerDollarBonus.DefaultSetting = @"((0))";
				colvarRaisedRMRPerDollarBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRaisedRMRPerDollarBonus);

				TableSchema.TableColumn colvarExtendedContractBonus = new TableSchema.TableColumn(schema);
				colvarExtendedContractBonus.ColumnName = "ExtendedContractBonus";
				colvarExtendedContractBonus.DataType = DbType.Currency;
				colvarExtendedContractBonus.MaxLength = 0;
				colvarExtendedContractBonus.AutoIncrement = false;
				colvarExtendedContractBonus.IsNullable = false;
				colvarExtendedContractBonus.IsPrimaryKey = false;
				colvarExtendedContractBonus.IsForeignKey = false;
				colvarExtendedContractBonus.IsReadOnly = false;
				colvarExtendedContractBonus.DefaultSetting = @"((0))";
				colvarExtendedContractBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtendedContractBonus);

				TableSchema.TableColumn colvarWeeklyCellPhoneAllowance = new TableSchema.TableColumn(schema);
				colvarWeeklyCellPhoneAllowance.ColumnName = "WeeklyCellPhoneAllowance";
				colvarWeeklyCellPhoneAllowance.DataType = DbType.Currency;
				colvarWeeklyCellPhoneAllowance.MaxLength = 0;
				colvarWeeklyCellPhoneAllowance.AutoIncrement = false;
				colvarWeeklyCellPhoneAllowance.IsNullable = false;
				colvarWeeklyCellPhoneAllowance.IsPrimaryKey = false;
				colvarWeeklyCellPhoneAllowance.IsForeignKey = false;
				colvarWeeklyCellPhoneAllowance.IsReadOnly = false;
				colvarWeeklyCellPhoneAllowance.DefaultSetting = @"((0))";
				colvarWeeklyCellPhoneAllowance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeeklyCellPhoneAllowance);

				TableSchema.TableColumn colvarWeeklyGasAllowance = new TableSchema.TableColumn(schema);
				colvarWeeklyGasAllowance.ColumnName = "WeeklyGasAllowance";
				colvarWeeklyGasAllowance.DataType = DbType.Currency;
				colvarWeeklyGasAllowance.MaxLength = 0;
				colvarWeeklyGasAllowance.AutoIncrement = false;
				colvarWeeklyGasAllowance.IsNullable = false;
				colvarWeeklyGasAllowance.IsPrimaryKey = false;
				colvarWeeklyGasAllowance.IsForeignKey = false;
				colvarWeeklyGasAllowance.IsReadOnly = false;
				colvarWeeklyGasAllowance.DefaultSetting = @"((0))";
				colvarWeeklyGasAllowance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeeklyGasAllowance);

				TableSchema.TableColumn colvarPlatinumCertifiedPerAccountBonus = new TableSchema.TableColumn(schema);
				colvarPlatinumCertifiedPerAccountBonus.ColumnName = "PlatinumCertifiedPerAccountBonus";
				colvarPlatinumCertifiedPerAccountBonus.DataType = DbType.Currency;
				colvarPlatinumCertifiedPerAccountBonus.MaxLength = 0;
				colvarPlatinumCertifiedPerAccountBonus.AutoIncrement = false;
				colvarPlatinumCertifiedPerAccountBonus.IsNullable = false;
				colvarPlatinumCertifiedPerAccountBonus.IsPrimaryKey = false;
				colvarPlatinumCertifiedPerAccountBonus.IsForeignKey = false;
				colvarPlatinumCertifiedPerAccountBonus.IsReadOnly = false;
				colvarPlatinumCertifiedPerAccountBonus.DefaultSetting = @"((0))";
				colvarPlatinumCertifiedPerAccountBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlatinumCertifiedPerAccountBonus);

				TableSchema.TableColumn colvarMaxCertifiedServicePercentage = new TableSchema.TableColumn(schema);
				colvarMaxCertifiedServicePercentage.ColumnName = "MaxCertifiedServicePercentage";
				colvarMaxCertifiedServicePercentage.DataType = DbType.Double;
				colvarMaxCertifiedServicePercentage.MaxLength = 0;
				colvarMaxCertifiedServicePercentage.AutoIncrement = false;
				colvarMaxCertifiedServicePercentage.IsNullable = false;
				colvarMaxCertifiedServicePercentage.IsPrimaryKey = false;
				colvarMaxCertifiedServicePercentage.IsForeignKey = false;
				colvarMaxCertifiedServicePercentage.IsReadOnly = false;
				colvarMaxCertifiedServicePercentage.DefaultSetting = @"((0))";
				colvarMaxCertifiedServicePercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxCertifiedServicePercentage);

				TableSchema.TableColumn colvarMinCertifiedInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarMinCertifiedInspectionPercentage.ColumnName = "MinCertifiedInspectionPercentage";
				colvarMinCertifiedInspectionPercentage.DataType = DbType.Double;
				colvarMinCertifiedInspectionPercentage.MaxLength = 0;
				colvarMinCertifiedInspectionPercentage.AutoIncrement = false;
				colvarMinCertifiedInspectionPercentage.IsNullable = false;
				colvarMinCertifiedInspectionPercentage.IsPrimaryKey = false;
				colvarMinCertifiedInspectionPercentage.IsForeignKey = false;
				colvarMinCertifiedInspectionPercentage.IsReadOnly = false;
				colvarMinCertifiedInspectionPercentage.DefaultSetting = @"((0))";
				colvarMinCertifiedInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinCertifiedInspectionPercentage);

				TableSchema.TableColumn colvarHealthInsuranceBonusPercentage = new TableSchema.TableColumn(schema);
				colvarHealthInsuranceBonusPercentage.ColumnName = "HealthInsuranceBonusPercentage";
				colvarHealthInsuranceBonusPercentage.DataType = DbType.Double;
				colvarHealthInsuranceBonusPercentage.MaxLength = 0;
				colvarHealthInsuranceBonusPercentage.AutoIncrement = false;
				colvarHealthInsuranceBonusPercentage.IsNullable = false;
				colvarHealthInsuranceBonusPercentage.IsPrimaryKey = false;
				colvarHealthInsuranceBonusPercentage.IsForeignKey = false;
				colvarHealthInsuranceBonusPercentage.IsReadOnly = false;
				colvarHealthInsuranceBonusPercentage.DefaultSetting = @"((0))";
				colvarHealthInsuranceBonusPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHealthInsuranceBonusPercentage);

				TableSchema.TableColumn colvarManagerSalaryAmount = new TableSchema.TableColumn(schema);
				colvarManagerSalaryAmount.ColumnName = "ManagerSalaryAmount";
				colvarManagerSalaryAmount.DataType = DbType.Currency;
				colvarManagerSalaryAmount.MaxLength = 0;
				colvarManagerSalaryAmount.AutoIncrement = false;
				colvarManagerSalaryAmount.IsNullable = false;
				colvarManagerSalaryAmount.IsPrimaryKey = false;
				colvarManagerSalaryAmount.IsForeignKey = false;
				colvarManagerSalaryAmount.IsReadOnly = false;
				colvarManagerSalaryAmount.DefaultSetting = @"((0))";
				colvarManagerSalaryAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManagerSalaryAmount);

				TableSchema.TableColumn colvarTechSaleRate = new TableSchema.TableColumn(schema);
				colvarTechSaleRate.ColumnName = "TechSaleRate";
				colvarTechSaleRate.DataType = DbType.Currency;
				colvarTechSaleRate.MaxLength = 0;
				colvarTechSaleRate.AutoIncrement = false;
				colvarTechSaleRate.IsNullable = false;
				colvarTechSaleRate.IsPrimaryKey = false;
				colvarTechSaleRate.IsForeignKey = false;
				colvarTechSaleRate.IsReadOnly = false;
				colvarTechSaleRate.DefaultSetting = @"((0))";
				colvarTechSaleRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechSaleRate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendPayscales",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendPayscale LoadFrom(PR_BackendPayscale item)
		{
			PR_BackendPayscale result = new PR_BackendPayscale();
			if (item.BackendPayscaleID != default(int)) {
				result.LoadByKey(item.BackendPayscaleID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendPayscaleID {
			get { return GetColumnValue<int>(Columns.BackendPayscaleID); }
			set {
				SetColumnValue(Columns.BackendPayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPayscaleID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public short UserTypeID {
			get { return GetColumnValue<short>(Columns.UserTypeID); }
			set {
				SetColumnValue(Columns.UserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeID));
			}
		}
		[DataMember]
		public int PayscaleID {
			get { return GetColumnValue<int>(Columns.PayscaleID); }
			set {
				SetColumnValue(Columns.PayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayscaleID));
			}
		}
		[DataMember]
		public int MinQualifyingAccounts {
			get { return GetColumnValue<int>(Columns.MinQualifyingAccounts); }
			set {
				SetColumnValue(Columns.MinQualifyingAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinQualifyingAccounts));
			}
		}
		[DataMember]
		public int MaxQualifyingAccounts {
			get { return GetColumnValue<int>(Columns.MaxQualifyingAccounts); }
			set {
				SetColumnValue(Columns.MaxQualifyingAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxQualifyingAccounts));
			}
		}
		[DataMember]
		public decimal AccountRate {
			get { return GetColumnValue<decimal>(Columns.AccountRate); }
			set {
				SetColumnValue(Columns.AccountRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountRate));
			}
		}
		[DataMember]
		public decimal CashBonusAmount {
			get { return GetColumnValue<decimal>(Columns.CashBonusAmount); }
			set {
				SetColumnValue(Columns.CashBonusAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CashBonusAmount));
			}
		}
		[DataMember]
		public decimal SigningBonusAmount {
			get { return GetColumnValue<decimal>(Columns.SigningBonusAmount); }
			set {
				SetColumnValue(Columns.SigningBonusAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SigningBonusAmount));
			}
		}
		[DataMember]
		public double StartingPointBank {
			get { return GetColumnValue<double>(Columns.StartingPointBank); }
			set {
				SetColumnValue(Columns.StartingPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartingPointBank));
			}
		}
		[DataMember]
		public decimal RentBonusCap {
			get { return GetColumnValue<decimal>(Columns.RentBonusCap); }
			set {
				SetColumnValue(Columns.RentBonusCap, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentBonusCap));
			}
		}
		[DataMember]
		public double RentBonusMultiplier {
			get { return GetColumnValue<double>(Columns.RentBonusMultiplier); }
			set {
				SetColumnValue(Columns.RentBonusMultiplier, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentBonusMultiplier));
			}
		}
		[DataMember]
		public decimal SubAccountRate {
			get { return GetColumnValue<decimal>(Columns.SubAccountRate); }
			set {
				SetColumnValue(Columns.SubAccountRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubAccountRate));
			}
		}
		[DataMember]
		public decimal WaivedActivationDeduction {
			get { return GetColumnValue<decimal>(Columns.WaivedActivationDeduction); }
			set {
				SetColumnValue(Columns.WaivedActivationDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WaivedActivationDeduction));
			}
		}
		[DataMember]
		public decimal PassCreditDeduction {
			get { return GetColumnValue<decimal>(Columns.PassCreditDeduction); }
			set {
				SetColumnValue(Columns.PassCreditDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassCreditDeduction));
			}
		}
		[DataMember]
		public decimal ManualBillDeduction {
			get { return GetColumnValue<decimal>(Columns.ManualBillDeduction); }
			set {
				SetColumnValue(Columns.ManualBillDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManualBillDeduction));
			}
		}
		[DataMember]
		public decimal MissingInvoiceFeeDeduction {
			get { return GetColumnValue<decimal>(Columns.MissingInvoiceFeeDeduction); }
			set {
				SetColumnValue(Columns.MissingInvoiceFeeDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MissingInvoiceFeeDeduction));
			}
		}
		[DataMember]
		public decimal DigitalAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.DigitalAccountDeduction); }
			set {
				SetColumnValue(Columns.DigitalAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DigitalAccountDeduction));
			}
		}
		[DataMember]
		public decimal SavedAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.SavedAccountDeduction); }
			set {
				SetColumnValue(Columns.SavedAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SavedAccountDeduction));
			}
		}
		[DataMember]
		public decimal CommercialAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.CommercialAccountDeduction); }
			set {
				SetColumnValue(Columns.CommercialAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommercialAccountDeduction));
			}
		}
		[DataMember]
		public decimal PricePerPoint {
			get { return GetColumnValue<decimal>(Columns.PricePerPoint); }
			set {
				SetColumnValue(Columns.PricePerPoint, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PricePerPoint));
			}
		}
		[DataMember]
		public decimal RaisedRMRPerDollarBonus {
			get { return GetColumnValue<decimal>(Columns.RaisedRMRPerDollarBonus); }
			set {
				SetColumnValue(Columns.RaisedRMRPerDollarBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RaisedRMRPerDollarBonus));
			}
		}
		[DataMember]
		public decimal ExtendedContractBonus {
			get { return GetColumnValue<decimal>(Columns.ExtendedContractBonus); }
			set {
				SetColumnValue(Columns.ExtendedContractBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExtendedContractBonus));
			}
		}
		[DataMember]
		public decimal WeeklyCellPhoneAllowance {
			get { return GetColumnValue<decimal>(Columns.WeeklyCellPhoneAllowance); }
			set {
				SetColumnValue(Columns.WeeklyCellPhoneAllowance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WeeklyCellPhoneAllowance));
			}
		}
		[DataMember]
		public decimal WeeklyGasAllowance {
			get { return GetColumnValue<decimal>(Columns.WeeklyGasAllowance); }
			set {
				SetColumnValue(Columns.WeeklyGasAllowance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WeeklyGasAllowance));
			}
		}
		[DataMember]
		public decimal PlatinumCertifiedPerAccountBonus {
			get { return GetColumnValue<decimal>(Columns.PlatinumCertifiedPerAccountBonus); }
			set {
				SetColumnValue(Columns.PlatinumCertifiedPerAccountBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PlatinumCertifiedPerAccountBonus));
			}
		}
		[DataMember]
		public double MaxCertifiedServicePercentage {
			get { return GetColumnValue<double>(Columns.MaxCertifiedServicePercentage); }
			set {
				SetColumnValue(Columns.MaxCertifiedServicePercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxCertifiedServicePercentage));
			}
		}
		[DataMember]
		public double MinCertifiedInspectionPercentage {
			get { return GetColumnValue<double>(Columns.MinCertifiedInspectionPercentage); }
			set {
				SetColumnValue(Columns.MinCertifiedInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinCertifiedInspectionPercentage));
			}
		}
		[DataMember]
		public double HealthInsuranceBonusPercentage {
			get { return GetColumnValue<double>(Columns.HealthInsuranceBonusPercentage); }
			set {
				SetColumnValue(Columns.HealthInsuranceBonusPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HealthInsuranceBonusPercentage));
			}
		}
		[DataMember]
		public decimal ManagerSalaryAmount {
			get { return GetColumnValue<decimal>(Columns.ManagerSalaryAmount); }
			set {
				SetColumnValue(Columns.ManagerSalaryAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagerSalaryAmount));
			}
		}
		[DataMember]
		public decimal TechSaleRate {
			get { return GetColumnValue<decimal>(Columns.TechSaleRate); }
			set {
				SetColumnValue(Columns.TechSaleRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechSaleRate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Payscale _Payscale;
		//Relationship: FK_PR_BackendAccountRates_RU_Payscales
		public RU_Payscale Payscale
		{
			get
			{
				if(_Payscale == null) {
					_Payscale = RU_Payscale.FetchByID(this.PayscaleID);
				}
				return _Payscale;
			}
			set
			{
				SetColumnValue("PayscaleID", value.PayscaleID);
				_Payscale = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_BackendAccountRates_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_UserType _UserType;
		//Relationship: FK_PR_BackendAccountRates_RU_UserType
		public RU_UserType UserType
		{
			get
			{
				if(_UserType == null) {
					_UserType = RU_UserType.FetchByID(this.UserTypeID);
				}
				return _UserType;
			}
			set
			{
				SetColumnValue("UserTypeID", value.UserTypeID);
				_UserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendPayscaleID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendPayscaleIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UserTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PayscaleIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MinQualifyingAccountsColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MaxQualifyingAccountsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AccountRateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CashBonusAmountColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn SigningBonusAmountColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn StartingPointBankColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn RentBonusCapColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn RentBonusMultiplierColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn SubAccountRateColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn WaivedActivationDeductionColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PassCreditDeductionColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ManualBillDeductionColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn MissingInvoiceFeeDeductionColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn DigitalAccountDeductionColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn SavedAccountDeductionColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn CommercialAccountDeductionColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn PricePerPointColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn RaisedRMRPerDollarBonusColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn ExtendedContractBonusColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn WeeklyCellPhoneAllowanceColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn WeeklyGasAllowanceColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn PlatinumCertifiedPerAccountBonusColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn MaxCertifiedServicePercentageColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn MinCertifiedInspectionPercentageColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn HealthInsuranceBonusPercentageColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn ManagerSalaryAmountColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn TechSaleRateColumn
		{
			get { return Schema.Columns[30]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendPayscaleID = @"BackendPayscaleID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string UserTypeID = @"UserTypeID";
			public static readonly string PayscaleID = @"PayscaleID";
			public static readonly string MinQualifyingAccounts = @"MinQualifyingAccounts";
			public static readonly string MaxQualifyingAccounts = @"MaxQualifyingAccounts";
			public static readonly string AccountRate = @"AccountRate";
			public static readonly string CashBonusAmount = @"CashBonusAmount";
			public static readonly string SigningBonusAmount = @"SigningBonusAmount";
			public static readonly string StartingPointBank = @"StartingPointBank";
			public static readonly string RentBonusCap = @"RentBonusCap";
			public static readonly string RentBonusMultiplier = @"RentBonusMultiplier";
			public static readonly string SubAccountRate = @"SubAccountRate";
			public static readonly string WaivedActivationDeduction = @"WaivedActivationDeduction";
			public static readonly string PassCreditDeduction = @"PassCreditDeduction";
			public static readonly string ManualBillDeduction = @"ManualBillDeduction";
			public static readonly string MissingInvoiceFeeDeduction = @"MissingInvoiceFeeDeduction";
			public static readonly string DigitalAccountDeduction = @"DigitalAccountDeduction";
			public static readonly string SavedAccountDeduction = @"SavedAccountDeduction";
			public static readonly string CommercialAccountDeduction = @"CommercialAccountDeduction";
			public static readonly string PricePerPoint = @"PricePerPoint";
			public static readonly string RaisedRMRPerDollarBonus = @"RaisedRMRPerDollarBonus";
			public static readonly string ExtendedContractBonus = @"ExtendedContractBonus";
			public static readonly string WeeklyCellPhoneAllowance = @"WeeklyCellPhoneAllowance";
			public static readonly string WeeklyGasAllowance = @"WeeklyGasAllowance";
			public static readonly string PlatinumCertifiedPerAccountBonus = @"PlatinumCertifiedPerAccountBonus";
			public static readonly string MaxCertifiedServicePercentage = @"MaxCertifiedServicePercentage";
			public static readonly string MinCertifiedInspectionPercentage = @"MinCertifiedInspectionPercentage";
			public static readonly string HealthInsuranceBonusPercentage = @"HealthInsuranceBonusPercentage";
			public static readonly string ManagerSalaryAmount = @"ManagerSalaryAmount";
			public static readonly string TechSaleRate = @"TechSaleRate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendPayscaleID; }
		}
		*/

		#region Foreign Collections

		private PR_LeadTechBackendCollection _PR_LeadTechBackendsCol;
		//Relationship: FK_PR_LeadTechBackends_PR_BackendPayscales
		public PR_LeadTechBackendCollection PR_LeadTechBackendsCol
		{
			get
			{
				if(_PR_LeadTechBackendsCol == null) {
					_PR_LeadTechBackendsCol = new PR_LeadTechBackendCollection();
					_PR_LeadTechBackendsCol.LoadAndCloseReader(PR_LeadTechBackend.Query()
						.WHERE(PR_LeadTechBackend.Columns.BackendPayscaleID, BackendPayscaleID).ExecuteReader());
				}
				return _PR_LeadTechBackendsCol;
			}
		}

		private PR_SalesManagerBackendCollection _PR_SalesManagerBackendsCol;
		//Relationship: FK_PR_SalesManagerBackends_PR_BackendPayscales
		public PR_SalesManagerBackendCollection PR_SalesManagerBackendsCol
		{
			get
			{
				if(_PR_SalesManagerBackendsCol == null) {
					_PR_SalesManagerBackendsCol = new PR_SalesManagerBackendCollection();
					_PR_SalesManagerBackendsCol.LoadAndCloseReader(PR_SalesManagerBackend.Query()
						.WHERE(PR_SalesManagerBackend.Columns.BackendPayscaleID, BackendPayscaleID).ExecuteReader());
				}
				return _PR_SalesManagerBackendsCol;
			}
		}

		private PR_SalesManagerBackendCollection _PR_SalesManagerBackends02Col;
		//Relationship: FK_PR_SalesManagerBackends_PR_BackendPayscales1
		public PR_SalesManagerBackendCollection PR_SalesManagerBackends02Col
		{
			get
			{
				if(_PR_SalesManagerBackends02Col == null) {
					_PR_SalesManagerBackends02Col = new PR_SalesManagerBackendCollection();
					_PR_SalesManagerBackends02Col.LoadAndCloseReader(PR_SalesManagerBackend.Query()
						.WHERE(PR_SalesManagerBackend.Columns.PersonalBackendPayscaleID, BackendPayscaleID).ExecuteReader());
				}
				return _PR_SalesManagerBackends02Col;
			}
		}

		private PR_SalesRegionalBackendCollection _PR_SalesRegionalBackendsCol;
		//Relationship: FK_PR_SalesRegionalBackends_PR_BackendPayscales
		public PR_SalesRegionalBackendCollection PR_SalesRegionalBackendsCol
		{
			get
			{
				if(_PR_SalesRegionalBackendsCol == null) {
					_PR_SalesRegionalBackendsCol = new PR_SalesRegionalBackendCollection();
					_PR_SalesRegionalBackendsCol.LoadAndCloseReader(PR_SalesRegionalBackend.Query()
						.WHERE(PR_SalesRegionalBackend.Columns.BackendPayscaleID, BackendPayscaleID).ExecuteReader());
				}
				return _PR_SalesRegionalBackendsCol;
			}
		}

		private PR_SalesRegionalBackendCollection _PR_SalesRegionalBackends02Col;
		//Relationship: FK_PR_SalesRegionalBackends_PR_BackendPayscales1
		public PR_SalesRegionalBackendCollection PR_SalesRegionalBackends02Col
		{
			get
			{
				if(_PR_SalesRegionalBackends02Col == null) {
					_PR_SalesRegionalBackends02Col = new PR_SalesRegionalBackendCollection();
					_PR_SalesRegionalBackends02Col.LoadAndCloseReader(PR_SalesRegionalBackend.Query()
						.WHERE(PR_SalesRegionalBackend.Columns.EstimatedPayscaleID, BackendPayscaleID).ExecuteReader());
				}
				return _PR_SalesRegionalBackends02Col;
			}
		}

		private PR_SalesRepBackendCollection _PR_SalesRepBackendsCol;
		//Relationship: FK_PR_SalesRepBackends_PR_BackendPayscales
		public PR_SalesRepBackendCollection PR_SalesRepBackendsCol
		{
			get
			{
				if(_PR_SalesRepBackendsCol == null) {
					_PR_SalesRepBackendsCol = new PR_SalesRepBackendCollection();
					_PR_SalesRepBackendsCol.LoadAndCloseReader(PR_SalesRepBackend.Query()
						.WHERE(PR_SalesRepBackend.Columns.BackendPayscaleID, BackendPayscaleID).ExecuteReader());
				}
				return _PR_SalesRepBackendsCol;
			}
		}

		private PR_SalesRepBackendCollection _PR_SalesRepBackends02Col;
		//Relationship: FK_PR_SalesRepBackends_PR_BackendPayscales1
		public PR_SalesRepBackendCollection PR_SalesRepBackends02Col
		{
			get
			{
				if(_PR_SalesRepBackends02Col == null) {
					_PR_SalesRepBackends02Col = new PR_SalesRepBackendCollection();
					_PR_SalesRepBackends02Col.LoadAndCloseReader(PR_SalesRepBackend.Query()
						.WHERE(PR_SalesRepBackend.Columns.EstimatePayscaleID, BackendPayscaleID).ExecuteReader());
				}
				return _PR_SalesRepBackends02Col;
			}
		}

		private PR_TechBackendCollection _PR_TechBackendsCol;
		//Relationship: FK_PR_TechBackends_PR_BackendPayscales
		public PR_TechBackendCollection PR_TechBackendsCol
		{
			get
			{
				if(_PR_TechBackendsCol == null) {
					_PR_TechBackendsCol = new PR_TechBackendCollection();
					_PR_TechBackendsCol.LoadAndCloseReader(PR_TechBackend.Query()
						.WHERE(PR_TechBackend.Columns.BackendPayscaleID, BackendPayscaleID).ExecuteReader());
				}
				return _PR_TechBackendsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendPaySchedule class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendPayScheduleCollection : ActiveList<PR_BackendPaySchedule, PR_BackendPayScheduleCollection>
	{
		public static PR_BackendPayScheduleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendPayScheduleCollection result = new PR_BackendPayScheduleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendPaySchedule item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendPaySchedules table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendPaySchedule : ActiveRecord<PR_BackendPaySchedule>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendPaySchedule()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendPaySchedules", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendPayScheduleID = new TableSchema.TableColumn(schema);
				colvarBackendPayScheduleID.ColumnName = "BackendPayScheduleID";
				colvarBackendPayScheduleID.DataType = DbType.Int32;
				colvarBackendPayScheduleID.MaxLength = 0;
				colvarBackendPayScheduleID.AutoIncrement = true;
				colvarBackendPayScheduleID.IsNullable = false;
				colvarBackendPayScheduleID.IsPrimaryKey = true;
				colvarBackendPayScheduleID.IsForeignKey = false;
				colvarBackendPayScheduleID.IsReadOnly = false;
				colvarBackendPayScheduleID.DefaultSetting = @"";
				colvarBackendPayScheduleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendPayScheduleID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarPrimaryUserTypeID = new TableSchema.TableColumn(schema);
				colvarPrimaryUserTypeID.ColumnName = "PrimaryUserTypeID";
				colvarPrimaryUserTypeID.DataType = DbType.Int16;
				colvarPrimaryUserTypeID.MaxLength = 0;
				colvarPrimaryUserTypeID.AutoIncrement = false;
				colvarPrimaryUserTypeID.IsNullable = false;
				colvarPrimaryUserTypeID.IsPrimaryKey = false;
				colvarPrimaryUserTypeID.IsForeignKey = true;
				colvarPrimaryUserTypeID.IsReadOnly = false;
				colvarPrimaryUserTypeID.DefaultSetting = @"";
				colvarPrimaryUserTypeID.ForeignKeyTableName = "RU_UserType";
				schema.Columns.Add(colvarPrimaryUserTypeID);

				TableSchema.TableColumn colvarPayScaleID = new TableSchema.TableColumn(schema);
				colvarPayScaleID.ColumnName = "PayScaleID";
				colvarPayScaleID.DataType = DbType.Int32;
				colvarPayScaleID.MaxLength = 0;
				colvarPayScaleID.AutoIncrement = false;
				colvarPayScaleID.IsNullable = false;
				colvarPayScaleID.IsPrimaryKey = false;
				colvarPayScaleID.IsForeignKey = true;
				colvarPayScaleID.IsReadOnly = false;
				colvarPayScaleID.DefaultSetting = @"";
				colvarPayScaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayScaleID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 50;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = true;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarMinQualifyingAccounts = new TableSchema.TableColumn(schema);
				colvarMinQualifyingAccounts.ColumnName = "MinQualifyingAccounts";
				colvarMinQualifyingAccounts.DataType = DbType.Int32;
				colvarMinQualifyingAccounts.MaxLength = 0;
				colvarMinQualifyingAccounts.AutoIncrement = false;
				colvarMinQualifyingAccounts.IsNullable = false;
				colvarMinQualifyingAccounts.IsPrimaryKey = false;
				colvarMinQualifyingAccounts.IsForeignKey = false;
				colvarMinQualifyingAccounts.IsReadOnly = false;
				colvarMinQualifyingAccounts.DefaultSetting = @"";
				colvarMinQualifyingAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinQualifyingAccounts);

				TableSchema.TableColumn colvarMaxQualifyingAccounts = new TableSchema.TableColumn(schema);
				colvarMaxQualifyingAccounts.ColumnName = "MaxQualifyingAccounts";
				colvarMaxQualifyingAccounts.DataType = DbType.Int32;
				colvarMaxQualifyingAccounts.MaxLength = 0;
				colvarMaxQualifyingAccounts.AutoIncrement = false;
				colvarMaxQualifyingAccounts.IsNullable = false;
				colvarMaxQualifyingAccounts.IsPrimaryKey = false;
				colvarMaxQualifyingAccounts.IsForeignKey = false;
				colvarMaxQualifyingAccounts.IsReadOnly = false;
				colvarMaxQualifyingAccounts.DefaultSetting = @"";
				colvarMaxQualifyingAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxQualifyingAccounts);

				TableSchema.TableColumn colvarAccountSaleRate = new TableSchema.TableColumn(schema);
				colvarAccountSaleRate.ColumnName = "AccountSaleRate";
				colvarAccountSaleRate.DataType = DbType.Currency;
				colvarAccountSaleRate.MaxLength = 0;
				colvarAccountSaleRate.AutoIncrement = false;
				colvarAccountSaleRate.IsNullable = false;
				colvarAccountSaleRate.IsPrimaryKey = false;
				colvarAccountSaleRate.IsForeignKey = false;
				colvarAccountSaleRate.IsReadOnly = false;
				colvarAccountSaleRate.DefaultSetting = @"";
				colvarAccountSaleRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountSaleRate);

				TableSchema.TableColumn colvarSubAccountSaleRate = new TableSchema.TableColumn(schema);
				colvarSubAccountSaleRate.ColumnName = "SubAccountSaleRate";
				colvarSubAccountSaleRate.DataType = DbType.Currency;
				colvarSubAccountSaleRate.MaxLength = 0;
				colvarSubAccountSaleRate.AutoIncrement = false;
				colvarSubAccountSaleRate.IsNullable = false;
				colvarSubAccountSaleRate.IsPrimaryKey = false;
				colvarSubAccountSaleRate.IsForeignKey = false;
				colvarSubAccountSaleRate.IsReadOnly = false;
				colvarSubAccountSaleRate.DefaultSetting = @"((0))";
				colvarSubAccountSaleRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubAccountSaleRate);

				TableSchema.TableColumn colvarAccountInstallRate = new TableSchema.TableColumn(schema);
				colvarAccountInstallRate.ColumnName = "AccountInstallRate";
				colvarAccountInstallRate.DataType = DbType.Currency;
				colvarAccountInstallRate.MaxLength = 0;
				colvarAccountInstallRate.AutoIncrement = false;
				colvarAccountInstallRate.IsNullable = false;
				colvarAccountInstallRate.IsPrimaryKey = false;
				colvarAccountInstallRate.IsForeignKey = false;
				colvarAccountInstallRate.IsReadOnly = false;
				colvarAccountInstallRate.DefaultSetting = @"((0))";
				colvarAccountInstallRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountInstallRate);

				TableSchema.TableColumn colvarSigningBonusAmount = new TableSchema.TableColumn(schema);
				colvarSigningBonusAmount.ColumnName = "SigningBonusAmount";
				colvarSigningBonusAmount.DataType = DbType.Currency;
				colvarSigningBonusAmount.MaxLength = 0;
				colvarSigningBonusAmount.AutoIncrement = false;
				colvarSigningBonusAmount.IsNullable = false;
				colvarSigningBonusAmount.IsPrimaryKey = false;
				colvarSigningBonusAmount.IsForeignKey = false;
				colvarSigningBonusAmount.IsReadOnly = false;
				colvarSigningBonusAmount.DefaultSetting = @"((0))";
				colvarSigningBonusAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSigningBonusAmount);

				TableSchema.TableColumn colvarRentBonusCap = new TableSchema.TableColumn(schema);
				colvarRentBonusCap.ColumnName = "RentBonusCap";
				colvarRentBonusCap.DataType = DbType.Currency;
				colvarRentBonusCap.MaxLength = 0;
				colvarRentBonusCap.AutoIncrement = false;
				colvarRentBonusCap.IsNullable = false;
				colvarRentBonusCap.IsPrimaryKey = false;
				colvarRentBonusCap.IsForeignKey = false;
				colvarRentBonusCap.IsReadOnly = false;
				colvarRentBonusCap.DefaultSetting = @"((0))";
				colvarRentBonusCap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentBonusCap);

				TableSchema.TableColumn colvarRentBonusMultiplier = new TableSchema.TableColumn(schema);
				colvarRentBonusMultiplier.ColumnName = "RentBonusMultiplier";
				colvarRentBonusMultiplier.DataType = DbType.Double;
				colvarRentBonusMultiplier.MaxLength = 0;
				colvarRentBonusMultiplier.AutoIncrement = false;
				colvarRentBonusMultiplier.IsNullable = false;
				colvarRentBonusMultiplier.IsPrimaryKey = false;
				colvarRentBonusMultiplier.IsForeignKey = false;
				colvarRentBonusMultiplier.IsReadOnly = false;
				colvarRentBonusMultiplier.DefaultSetting = @"((0))";
				colvarRentBonusMultiplier.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentBonusMultiplier);

				TableSchema.TableColumn colvarVolumeBonusAmount = new TableSchema.TableColumn(schema);
				colvarVolumeBonusAmount.ColumnName = "VolumeBonusAmount";
				colvarVolumeBonusAmount.DataType = DbType.Currency;
				colvarVolumeBonusAmount.MaxLength = 0;
				colvarVolumeBonusAmount.AutoIncrement = false;
				colvarVolumeBonusAmount.IsNullable = false;
				colvarVolumeBonusAmount.IsPrimaryKey = false;
				colvarVolumeBonusAmount.IsForeignKey = false;
				colvarVolumeBonusAmount.IsReadOnly = false;
				colvarVolumeBonusAmount.DefaultSetting = @"((0))";
				colvarVolumeBonusAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVolumeBonusAmount);

				TableSchema.TableColumn colvarStartingPointBank = new TableSchema.TableColumn(schema);
				colvarStartingPointBank.ColumnName = "StartingPointBank";
				colvarStartingPointBank.DataType = DbType.Double;
				colvarStartingPointBank.MaxLength = 0;
				colvarStartingPointBank.AutoIncrement = false;
				colvarStartingPointBank.IsNullable = false;
				colvarStartingPointBank.IsPrimaryKey = false;
				colvarStartingPointBank.IsForeignKey = false;
				colvarStartingPointBank.IsReadOnly = false;
				colvarStartingPointBank.DefaultSetting = @"((0))";
				colvarStartingPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartingPointBank);

				TableSchema.TableColumn colvarPricePerPoint = new TableSchema.TableColumn(schema);
				colvarPricePerPoint.ColumnName = "PricePerPoint";
				colvarPricePerPoint.DataType = DbType.Currency;
				colvarPricePerPoint.MaxLength = 0;
				colvarPricePerPoint.AutoIncrement = false;
				colvarPricePerPoint.IsNullable = false;
				colvarPricePerPoint.IsPrimaryKey = false;
				colvarPricePerPoint.IsForeignKey = false;
				colvarPricePerPoint.IsReadOnly = false;
				colvarPricePerPoint.DefaultSetting = @"((0))";
				colvarPricePerPoint.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPricePerPoint);

				TableSchema.TableColumn colvarStandardTravelAmount = new TableSchema.TableColumn(schema);
				colvarStandardTravelAmount.ColumnName = "StandardTravelAmount";
				colvarStandardTravelAmount.DataType = DbType.Currency;
				colvarStandardTravelAmount.MaxLength = 0;
				colvarStandardTravelAmount.AutoIncrement = false;
				colvarStandardTravelAmount.IsNullable = false;
				colvarStandardTravelAmount.IsPrimaryKey = false;
				colvarStandardTravelAmount.IsForeignKey = false;
				colvarStandardTravelAmount.IsReadOnly = false;
				colvarStandardTravelAmount.DefaultSetting = @"((0))";
				colvarStandardTravelAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStandardTravelAmount);

				TableSchema.TableColumn colvarWaivedActivationDeduction = new TableSchema.TableColumn(schema);
				colvarWaivedActivationDeduction.ColumnName = "WaivedActivationDeduction";
				colvarWaivedActivationDeduction.DataType = DbType.Currency;
				colvarWaivedActivationDeduction.MaxLength = 0;
				colvarWaivedActivationDeduction.AutoIncrement = false;
				colvarWaivedActivationDeduction.IsNullable = false;
				colvarWaivedActivationDeduction.IsPrimaryKey = false;
				colvarWaivedActivationDeduction.IsForeignKey = false;
				colvarWaivedActivationDeduction.IsReadOnly = false;
				colvarWaivedActivationDeduction.DefaultSetting = @"((0))";
				colvarWaivedActivationDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWaivedActivationDeduction);

				TableSchema.TableColumn colvarPassCreditDeduction = new TableSchema.TableColumn(schema);
				colvarPassCreditDeduction.ColumnName = "PassCreditDeduction";
				colvarPassCreditDeduction.DataType = DbType.Currency;
				colvarPassCreditDeduction.MaxLength = 0;
				colvarPassCreditDeduction.AutoIncrement = false;
				colvarPassCreditDeduction.IsNullable = false;
				colvarPassCreditDeduction.IsPrimaryKey = false;
				colvarPassCreditDeduction.IsForeignKey = false;
				colvarPassCreditDeduction.IsReadOnly = false;
				colvarPassCreditDeduction.DefaultSetting = @"((0))";
				colvarPassCreditDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassCreditDeduction);

				TableSchema.TableColumn colvarManualBillDeduction = new TableSchema.TableColumn(schema);
				colvarManualBillDeduction.ColumnName = "ManualBillDeduction";
				colvarManualBillDeduction.DataType = DbType.Currency;
				colvarManualBillDeduction.MaxLength = 0;
				colvarManualBillDeduction.AutoIncrement = false;
				colvarManualBillDeduction.IsNullable = false;
				colvarManualBillDeduction.IsPrimaryKey = false;
				colvarManualBillDeduction.IsForeignKey = false;
				colvarManualBillDeduction.IsReadOnly = false;
				colvarManualBillDeduction.DefaultSetting = @"((0))";
				colvarManualBillDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManualBillDeduction);

				TableSchema.TableColumn colvarMissingInvoiceFeeDeduction = new TableSchema.TableColumn(schema);
				colvarMissingInvoiceFeeDeduction.ColumnName = "MissingInvoiceFeeDeduction";
				colvarMissingInvoiceFeeDeduction.DataType = DbType.Currency;
				colvarMissingInvoiceFeeDeduction.MaxLength = 0;
				colvarMissingInvoiceFeeDeduction.AutoIncrement = false;
				colvarMissingInvoiceFeeDeduction.IsNullable = false;
				colvarMissingInvoiceFeeDeduction.IsPrimaryKey = false;
				colvarMissingInvoiceFeeDeduction.IsForeignKey = false;
				colvarMissingInvoiceFeeDeduction.IsReadOnly = false;
				colvarMissingInvoiceFeeDeduction.DefaultSetting = @"((0))";
				colvarMissingInvoiceFeeDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMissingInvoiceFeeDeduction);

				TableSchema.TableColumn colvarDigitalAccountDeduction = new TableSchema.TableColumn(schema);
				colvarDigitalAccountDeduction.ColumnName = "DigitalAccountDeduction";
				colvarDigitalAccountDeduction.DataType = DbType.Currency;
				colvarDigitalAccountDeduction.MaxLength = 0;
				colvarDigitalAccountDeduction.AutoIncrement = false;
				colvarDigitalAccountDeduction.IsNullable = false;
				colvarDigitalAccountDeduction.IsPrimaryKey = false;
				colvarDigitalAccountDeduction.IsForeignKey = false;
				colvarDigitalAccountDeduction.IsReadOnly = false;
				colvarDigitalAccountDeduction.DefaultSetting = @"((0))";
				colvarDigitalAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDigitalAccountDeduction);

				TableSchema.TableColumn colvarSavedAccountDeduction = new TableSchema.TableColumn(schema);
				colvarSavedAccountDeduction.ColumnName = "SavedAccountDeduction";
				colvarSavedAccountDeduction.DataType = DbType.Currency;
				colvarSavedAccountDeduction.MaxLength = 0;
				colvarSavedAccountDeduction.AutoIncrement = false;
				colvarSavedAccountDeduction.IsNullable = false;
				colvarSavedAccountDeduction.IsPrimaryKey = false;
				colvarSavedAccountDeduction.IsForeignKey = false;
				colvarSavedAccountDeduction.IsReadOnly = false;
				colvarSavedAccountDeduction.DefaultSetting = @"((0))";
				colvarSavedAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSavedAccountDeduction);

				TableSchema.TableColumn colvarCommercialAccountDeduction = new TableSchema.TableColumn(schema);
				colvarCommercialAccountDeduction.ColumnName = "CommercialAccountDeduction";
				colvarCommercialAccountDeduction.DataType = DbType.Currency;
				colvarCommercialAccountDeduction.MaxLength = 0;
				colvarCommercialAccountDeduction.AutoIncrement = false;
				colvarCommercialAccountDeduction.IsNullable = false;
				colvarCommercialAccountDeduction.IsPrimaryKey = false;
				colvarCommercialAccountDeduction.IsForeignKey = false;
				colvarCommercialAccountDeduction.IsReadOnly = false;
				colvarCommercialAccountDeduction.DefaultSetting = @"((0))";
				colvarCommercialAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommercialAccountDeduction);

				TableSchema.TableColumn colvarShortenedContractDeduction = new TableSchema.TableColumn(schema);
				colvarShortenedContractDeduction.ColumnName = "ShortenedContractDeduction";
				colvarShortenedContractDeduction.DataType = DbType.Currency;
				colvarShortenedContractDeduction.MaxLength = 0;
				colvarShortenedContractDeduction.AutoIncrement = false;
				colvarShortenedContractDeduction.IsNullable = false;
				colvarShortenedContractDeduction.IsPrimaryKey = false;
				colvarShortenedContractDeduction.IsForeignKey = false;
				colvarShortenedContractDeduction.IsReadOnly = false;
				colvarShortenedContractDeduction.DefaultSetting = @"((0))";
				colvarShortenedContractDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortenedContractDeduction);

				TableSchema.TableColumn colvarRaisedRMRPerDollarBonus = new TableSchema.TableColumn(schema);
				colvarRaisedRMRPerDollarBonus.ColumnName = "RaisedRMRPerDollarBonus";
				colvarRaisedRMRPerDollarBonus.DataType = DbType.Currency;
				colvarRaisedRMRPerDollarBonus.MaxLength = 0;
				colvarRaisedRMRPerDollarBonus.AutoIncrement = false;
				colvarRaisedRMRPerDollarBonus.IsNullable = false;
				colvarRaisedRMRPerDollarBonus.IsPrimaryKey = false;
				colvarRaisedRMRPerDollarBonus.IsForeignKey = false;
				colvarRaisedRMRPerDollarBonus.IsReadOnly = false;
				colvarRaisedRMRPerDollarBonus.DefaultSetting = @"((0))";
				colvarRaisedRMRPerDollarBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRaisedRMRPerDollarBonus);

				TableSchema.TableColumn colvarLoweredRMRAboveBaseDeduction = new TableSchema.TableColumn(schema);
				colvarLoweredRMRAboveBaseDeduction.ColumnName = "LoweredRMRAboveBaseDeduction";
				colvarLoweredRMRAboveBaseDeduction.DataType = DbType.Currency;
				colvarLoweredRMRAboveBaseDeduction.MaxLength = 0;
				colvarLoweredRMRAboveBaseDeduction.AutoIncrement = false;
				colvarLoweredRMRAboveBaseDeduction.IsNullable = false;
				colvarLoweredRMRAboveBaseDeduction.IsPrimaryKey = false;
				colvarLoweredRMRAboveBaseDeduction.IsForeignKey = false;
				colvarLoweredRMRAboveBaseDeduction.IsReadOnly = false;
				colvarLoweredRMRAboveBaseDeduction.DefaultSetting = @"((0))";
				colvarLoweredRMRAboveBaseDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoweredRMRAboveBaseDeduction);

				TableSchema.TableColumn colvarLoweredRMRBelowBaseDeduction = new TableSchema.TableColumn(schema);
				colvarLoweredRMRBelowBaseDeduction.ColumnName = "LoweredRMRBelowBaseDeduction";
				colvarLoweredRMRBelowBaseDeduction.DataType = DbType.Currency;
				colvarLoweredRMRBelowBaseDeduction.MaxLength = 0;
				colvarLoweredRMRBelowBaseDeduction.AutoIncrement = false;
				colvarLoweredRMRBelowBaseDeduction.IsNullable = false;
				colvarLoweredRMRBelowBaseDeduction.IsPrimaryKey = false;
				colvarLoweredRMRBelowBaseDeduction.IsForeignKey = false;
				colvarLoweredRMRBelowBaseDeduction.IsReadOnly = false;
				colvarLoweredRMRBelowBaseDeduction.DefaultSetting = @"((0))";
				colvarLoweredRMRBelowBaseDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoweredRMRBelowBaseDeduction);

				TableSchema.TableColumn colvarExtendedContractBonus = new TableSchema.TableColumn(schema);
				colvarExtendedContractBonus.ColumnName = "ExtendedContractBonus";
				colvarExtendedContractBonus.DataType = DbType.Currency;
				colvarExtendedContractBonus.MaxLength = 0;
				colvarExtendedContractBonus.AutoIncrement = false;
				colvarExtendedContractBonus.IsNullable = false;
				colvarExtendedContractBonus.IsPrimaryKey = false;
				colvarExtendedContractBonus.IsForeignKey = false;
				colvarExtendedContractBonus.IsReadOnly = false;
				colvarExtendedContractBonus.DefaultSetting = @"((0))";
				colvarExtendedContractBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtendedContractBonus);

				TableSchema.TableColumn colvarWeeklyCellPhoneAllowance = new TableSchema.TableColumn(schema);
				colvarWeeklyCellPhoneAllowance.ColumnName = "WeeklyCellPhoneAllowance";
				colvarWeeklyCellPhoneAllowance.DataType = DbType.Currency;
				colvarWeeklyCellPhoneAllowance.MaxLength = 0;
				colvarWeeklyCellPhoneAllowance.AutoIncrement = false;
				colvarWeeklyCellPhoneAllowance.IsNullable = false;
				colvarWeeklyCellPhoneAllowance.IsPrimaryKey = false;
				colvarWeeklyCellPhoneAllowance.IsForeignKey = false;
				colvarWeeklyCellPhoneAllowance.IsReadOnly = false;
				colvarWeeklyCellPhoneAllowance.DefaultSetting = @"((0))";
				colvarWeeklyCellPhoneAllowance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeeklyCellPhoneAllowance);

				TableSchema.TableColumn colvarWeeklyGasAllowance = new TableSchema.TableColumn(schema);
				colvarWeeklyGasAllowance.ColumnName = "WeeklyGasAllowance";
				colvarWeeklyGasAllowance.DataType = DbType.Currency;
				colvarWeeklyGasAllowance.MaxLength = 0;
				colvarWeeklyGasAllowance.AutoIncrement = false;
				colvarWeeklyGasAllowance.IsNullable = false;
				colvarWeeklyGasAllowance.IsPrimaryKey = false;
				colvarWeeklyGasAllowance.IsForeignKey = false;
				colvarWeeklyGasAllowance.IsReadOnly = false;
				colvarWeeklyGasAllowance.DefaultSetting = @"((0))";
				colvarWeeklyGasAllowance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeeklyGasAllowance);

				TableSchema.TableColumn colvarPlatinumCertifiedBonus = new TableSchema.TableColumn(schema);
				colvarPlatinumCertifiedBonus.ColumnName = "PlatinumCertifiedBonus";
				colvarPlatinumCertifiedBonus.DataType = DbType.Currency;
				colvarPlatinumCertifiedBonus.MaxLength = 0;
				colvarPlatinumCertifiedBonus.AutoIncrement = false;
				colvarPlatinumCertifiedBonus.IsNullable = false;
				colvarPlatinumCertifiedBonus.IsPrimaryKey = false;
				colvarPlatinumCertifiedBonus.IsForeignKey = false;
				colvarPlatinumCertifiedBonus.IsReadOnly = false;
				colvarPlatinumCertifiedBonus.DefaultSetting = @"((0))";
				colvarPlatinumCertifiedBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlatinumCertifiedBonus);

				TableSchema.TableColumn colvarMaxCertifiedServicePercentage = new TableSchema.TableColumn(schema);
				colvarMaxCertifiedServicePercentage.ColumnName = "MaxCertifiedServicePercentage";
				colvarMaxCertifiedServicePercentage.DataType = DbType.Double;
				colvarMaxCertifiedServicePercentage.MaxLength = 0;
				colvarMaxCertifiedServicePercentage.AutoIncrement = false;
				colvarMaxCertifiedServicePercentage.IsNullable = false;
				colvarMaxCertifiedServicePercentage.IsPrimaryKey = false;
				colvarMaxCertifiedServicePercentage.IsForeignKey = false;
				colvarMaxCertifiedServicePercentage.IsReadOnly = false;
				colvarMaxCertifiedServicePercentage.DefaultSetting = @"((0))";
				colvarMaxCertifiedServicePercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxCertifiedServicePercentage);

				TableSchema.TableColumn colvarMinCertifiedInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarMinCertifiedInspectionPercentage.ColumnName = "MinCertifiedInspectionPercentage";
				colvarMinCertifiedInspectionPercentage.DataType = DbType.Double;
				colvarMinCertifiedInspectionPercentage.MaxLength = 0;
				colvarMinCertifiedInspectionPercentage.AutoIncrement = false;
				colvarMinCertifiedInspectionPercentage.IsNullable = false;
				colvarMinCertifiedInspectionPercentage.IsPrimaryKey = false;
				colvarMinCertifiedInspectionPercentage.IsForeignKey = false;
				colvarMinCertifiedInspectionPercentage.IsReadOnly = false;
				colvarMinCertifiedInspectionPercentage.DefaultSetting = @"((0))";
				colvarMinCertifiedInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinCertifiedInspectionPercentage);

				TableSchema.TableColumn colvarMaxCertifiedInspectionFails = new TableSchema.TableColumn(schema);
				colvarMaxCertifiedInspectionFails.ColumnName = "MaxCertifiedInspectionFails";
				colvarMaxCertifiedInspectionFails.DataType = DbType.Int32;
				colvarMaxCertifiedInspectionFails.MaxLength = 0;
				colvarMaxCertifiedInspectionFails.AutoIncrement = false;
				colvarMaxCertifiedInspectionFails.IsNullable = true;
				colvarMaxCertifiedInspectionFails.IsPrimaryKey = false;
				colvarMaxCertifiedInspectionFails.IsForeignKey = false;
				colvarMaxCertifiedInspectionFails.IsReadOnly = false;
				colvarMaxCertifiedInspectionFails.DefaultSetting = @"";
				colvarMaxCertifiedInspectionFails.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxCertifiedInspectionFails);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendPaySchedules",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendPaySchedule LoadFrom(PR_BackendPaySchedule item)
		{
			PR_BackendPaySchedule result = new PR_BackendPaySchedule();
			if (item.BackendPayScheduleID != default(int)) {
				result.LoadByKey(item.BackendPayScheduleID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendPayScheduleID {
			get { return GetColumnValue<int>(Columns.BackendPayScheduleID); }
			set {
				SetColumnValue(Columns.BackendPayScheduleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPayScheduleID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public short PrimaryUserTypeID {
			get { return GetColumnValue<short>(Columns.PrimaryUserTypeID); }
			set {
				SetColumnValue(Columns.PrimaryUserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrimaryUserTypeID));
			}
		}
		[DataMember]
		public int PayScaleID {
			get { return GetColumnValue<int>(Columns.PayScaleID); }
			set {
				SetColumnValue(Columns.PayScaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScaleID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public int MinQualifyingAccounts {
			get { return GetColumnValue<int>(Columns.MinQualifyingAccounts); }
			set {
				SetColumnValue(Columns.MinQualifyingAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinQualifyingAccounts));
			}
		}
		[DataMember]
		public int MaxQualifyingAccounts {
			get { return GetColumnValue<int>(Columns.MaxQualifyingAccounts); }
			set {
				SetColumnValue(Columns.MaxQualifyingAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxQualifyingAccounts));
			}
		}
		[DataMember]
		public decimal AccountSaleRate {
			get { return GetColumnValue<decimal>(Columns.AccountSaleRate); }
			set {
				SetColumnValue(Columns.AccountSaleRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountSaleRate));
			}
		}
		[DataMember]
		public decimal SubAccountSaleRate {
			get { return GetColumnValue<decimal>(Columns.SubAccountSaleRate); }
			set {
				SetColumnValue(Columns.SubAccountSaleRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubAccountSaleRate));
			}
		}
		[DataMember]
		public decimal AccountInstallRate {
			get { return GetColumnValue<decimal>(Columns.AccountInstallRate); }
			set {
				SetColumnValue(Columns.AccountInstallRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountInstallRate));
			}
		}
		[DataMember]
		public decimal SigningBonusAmount {
			get { return GetColumnValue<decimal>(Columns.SigningBonusAmount); }
			set {
				SetColumnValue(Columns.SigningBonusAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SigningBonusAmount));
			}
		}
		[DataMember]
		public decimal RentBonusCap {
			get { return GetColumnValue<decimal>(Columns.RentBonusCap); }
			set {
				SetColumnValue(Columns.RentBonusCap, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentBonusCap));
			}
		}
		[DataMember]
		public double RentBonusMultiplier {
			get { return GetColumnValue<double>(Columns.RentBonusMultiplier); }
			set {
				SetColumnValue(Columns.RentBonusMultiplier, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentBonusMultiplier));
			}
		}
		[DataMember]
		public decimal VolumeBonusAmount {
			get { return GetColumnValue<decimal>(Columns.VolumeBonusAmount); }
			set {
				SetColumnValue(Columns.VolumeBonusAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VolumeBonusAmount));
			}
		}
		[DataMember]
		public double StartingPointBank {
			get { return GetColumnValue<double>(Columns.StartingPointBank); }
			set {
				SetColumnValue(Columns.StartingPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartingPointBank));
			}
		}
		[DataMember]
		public decimal PricePerPoint {
			get { return GetColumnValue<decimal>(Columns.PricePerPoint); }
			set {
				SetColumnValue(Columns.PricePerPoint, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PricePerPoint));
			}
		}
		[DataMember]
		public decimal StandardTravelAmount {
			get { return GetColumnValue<decimal>(Columns.StandardTravelAmount); }
			set {
				SetColumnValue(Columns.StandardTravelAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StandardTravelAmount));
			}
		}
		[DataMember]
		public decimal WaivedActivationDeduction {
			get { return GetColumnValue<decimal>(Columns.WaivedActivationDeduction); }
			set {
				SetColumnValue(Columns.WaivedActivationDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WaivedActivationDeduction));
			}
		}
		[DataMember]
		public decimal PassCreditDeduction {
			get { return GetColumnValue<decimal>(Columns.PassCreditDeduction); }
			set {
				SetColumnValue(Columns.PassCreditDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassCreditDeduction));
			}
		}
		[DataMember]
		public decimal ManualBillDeduction {
			get { return GetColumnValue<decimal>(Columns.ManualBillDeduction); }
			set {
				SetColumnValue(Columns.ManualBillDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManualBillDeduction));
			}
		}
		[DataMember]
		public decimal MissingInvoiceFeeDeduction {
			get { return GetColumnValue<decimal>(Columns.MissingInvoiceFeeDeduction); }
			set {
				SetColumnValue(Columns.MissingInvoiceFeeDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MissingInvoiceFeeDeduction));
			}
		}
		[DataMember]
		public decimal DigitalAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.DigitalAccountDeduction); }
			set {
				SetColumnValue(Columns.DigitalAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DigitalAccountDeduction));
			}
		}
		[DataMember]
		public decimal SavedAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.SavedAccountDeduction); }
			set {
				SetColumnValue(Columns.SavedAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SavedAccountDeduction));
			}
		}
		[DataMember]
		public decimal CommercialAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.CommercialAccountDeduction); }
			set {
				SetColumnValue(Columns.CommercialAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommercialAccountDeduction));
			}
		}
		[DataMember]
		public decimal ShortenedContractDeduction {
			get { return GetColumnValue<decimal>(Columns.ShortenedContractDeduction); }
			set {
				SetColumnValue(Columns.ShortenedContractDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortenedContractDeduction));
			}
		}
		[DataMember]
		public decimal RaisedRMRPerDollarBonus {
			get { return GetColumnValue<decimal>(Columns.RaisedRMRPerDollarBonus); }
			set {
				SetColumnValue(Columns.RaisedRMRPerDollarBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RaisedRMRPerDollarBonus));
			}
		}
		[DataMember]
		public decimal LoweredRMRAboveBaseDeduction {
			get { return GetColumnValue<decimal>(Columns.LoweredRMRAboveBaseDeduction); }
			set {
				SetColumnValue(Columns.LoweredRMRAboveBaseDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoweredRMRAboveBaseDeduction));
			}
		}
		[DataMember]
		public decimal LoweredRMRBelowBaseDeduction {
			get { return GetColumnValue<decimal>(Columns.LoweredRMRBelowBaseDeduction); }
			set {
				SetColumnValue(Columns.LoweredRMRBelowBaseDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoweredRMRBelowBaseDeduction));
			}
		}
		[DataMember]
		public decimal ExtendedContractBonus {
			get { return GetColumnValue<decimal>(Columns.ExtendedContractBonus); }
			set {
				SetColumnValue(Columns.ExtendedContractBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExtendedContractBonus));
			}
		}
		[DataMember]
		public decimal WeeklyCellPhoneAllowance {
			get { return GetColumnValue<decimal>(Columns.WeeklyCellPhoneAllowance); }
			set {
				SetColumnValue(Columns.WeeklyCellPhoneAllowance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WeeklyCellPhoneAllowance));
			}
		}
		[DataMember]
		public decimal WeeklyGasAllowance {
			get { return GetColumnValue<decimal>(Columns.WeeklyGasAllowance); }
			set {
				SetColumnValue(Columns.WeeklyGasAllowance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WeeklyGasAllowance));
			}
		}
		[DataMember]
		public decimal PlatinumCertifiedBonus {
			get { return GetColumnValue<decimal>(Columns.PlatinumCertifiedBonus); }
			set {
				SetColumnValue(Columns.PlatinumCertifiedBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PlatinumCertifiedBonus));
			}
		}
		[DataMember]
		public double MaxCertifiedServicePercentage {
			get { return GetColumnValue<double>(Columns.MaxCertifiedServicePercentage); }
			set {
				SetColumnValue(Columns.MaxCertifiedServicePercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxCertifiedServicePercentage));
			}
		}
		[DataMember]
		public double MinCertifiedInspectionPercentage {
			get { return GetColumnValue<double>(Columns.MinCertifiedInspectionPercentage); }
			set {
				SetColumnValue(Columns.MinCertifiedInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinCertifiedInspectionPercentage));
			}
		}
		[DataMember]
		public int? MaxCertifiedInspectionFails {
			get { return GetColumnValue<int?>(Columns.MaxCertifiedInspectionFails); }
			set {
				SetColumnValue(Columns.MaxCertifiedInspectionFails, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxCertifiedInspectionFails));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Payscale _PayScale;
		//Relationship: FK_PR_BackendPaySchedules_RU_Payscales
		public RU_Payscale PayScale
		{
			get
			{
				if(_PayScale == null) {
					_PayScale = RU_Payscale.FetchByID(this.PayScaleID);
				}
				return _PayScale;
			}
			set
			{
				SetColumnValue("PayScaleID", value.PayscaleID);
				_PayScale = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_BackendPaySchedules_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_UserType _PrimaryUserType;
		//Relationship: FK_PR_BackendPaySchedules_RU_UserType
		public RU_UserType PrimaryUserType
		{
			get
			{
				if(_PrimaryUserType == null) {
					_PrimaryUserType = RU_UserType.FetchByID(this.PrimaryUserTypeID);
				}
				return _PrimaryUserType;
			}
			set
			{
				SetColumnValue("PrimaryUserTypeID", value.UserTypeID);
				_PrimaryUserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendPayScheduleID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendPayScheduleIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PrimaryUserTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PayScaleIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MinQualifyingAccountsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MaxQualifyingAccountsColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AccountSaleRateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn SubAccountSaleRateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AccountInstallRateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn SigningBonusAmountColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn RentBonusCapColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn RentBonusMultiplierColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn VolumeBonusAmountColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn StartingPointBankColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PricePerPointColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn StandardTravelAmountColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn WaivedActivationDeductionColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn PassCreditDeductionColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn ManualBillDeductionColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn MissingInvoiceFeeDeductionColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn DigitalAccountDeductionColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn SavedAccountDeductionColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn CommercialAccountDeductionColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn ShortenedContractDeductionColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn RaisedRMRPerDollarBonusColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn LoweredRMRAboveBaseDeductionColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn LoweredRMRBelowBaseDeductionColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn ExtendedContractBonusColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn WeeklyCellPhoneAllowanceColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn WeeklyGasAllowanceColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn PlatinumCertifiedBonusColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn MaxCertifiedServicePercentageColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn MinCertifiedInspectionPercentageColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn MaxCertifiedInspectionFailsColumn
		{
			get { return Schema.Columns[34]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendPayScheduleID = @"BackendPayScheduleID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string PrimaryUserTypeID = @"PrimaryUserTypeID";
			public static readonly string PayScaleID = @"PayScaleID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string MinQualifyingAccounts = @"MinQualifyingAccounts";
			public static readonly string MaxQualifyingAccounts = @"MaxQualifyingAccounts";
			public static readonly string AccountSaleRate = @"AccountSaleRate";
			public static readonly string SubAccountSaleRate = @"SubAccountSaleRate";
			public static readonly string AccountInstallRate = @"AccountInstallRate";
			public static readonly string SigningBonusAmount = @"SigningBonusAmount";
			public static readonly string RentBonusCap = @"RentBonusCap";
			public static readonly string RentBonusMultiplier = @"RentBonusMultiplier";
			public static readonly string VolumeBonusAmount = @"VolumeBonusAmount";
			public static readonly string StartingPointBank = @"StartingPointBank";
			public static readonly string PricePerPoint = @"PricePerPoint";
			public static readonly string StandardTravelAmount = @"StandardTravelAmount";
			public static readonly string WaivedActivationDeduction = @"WaivedActivationDeduction";
			public static readonly string PassCreditDeduction = @"PassCreditDeduction";
			public static readonly string ManualBillDeduction = @"ManualBillDeduction";
			public static readonly string MissingInvoiceFeeDeduction = @"MissingInvoiceFeeDeduction";
			public static readonly string DigitalAccountDeduction = @"DigitalAccountDeduction";
			public static readonly string SavedAccountDeduction = @"SavedAccountDeduction";
			public static readonly string CommercialAccountDeduction = @"CommercialAccountDeduction";
			public static readonly string ShortenedContractDeduction = @"ShortenedContractDeduction";
			public static readonly string RaisedRMRPerDollarBonus = @"RaisedRMRPerDollarBonus";
			public static readonly string LoweredRMRAboveBaseDeduction = @"LoweredRMRAboveBaseDeduction";
			public static readonly string LoweredRMRBelowBaseDeduction = @"LoweredRMRBelowBaseDeduction";
			public static readonly string ExtendedContractBonus = @"ExtendedContractBonus";
			public static readonly string WeeklyCellPhoneAllowance = @"WeeklyCellPhoneAllowance";
			public static readonly string WeeklyGasAllowance = @"WeeklyGasAllowance";
			public static readonly string PlatinumCertifiedBonus = @"PlatinumCertifiedBonus";
			public static readonly string MaxCertifiedServicePercentage = @"MaxCertifiedServicePercentage";
			public static readonly string MinCertifiedInspectionPercentage = @"MinCertifiedInspectionPercentage";
			public static readonly string MaxCertifiedInspectionFails = @"MaxCertifiedInspectionFails";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendPayScheduleID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendCollection _PR_BackendsCol;
		//Relationship: FK_PR_Backends_PR_BackendPaySchedules
		public PR_BackendCollection PR_BackendsCol
		{
			get
			{
				if(_PR_BackendsCol == null) {
					_PR_BackendsCol = new PR_BackendCollection();
					_PR_BackendsCol.LoadAndCloseReader(PR_Backend.Query()
						.WHERE(PR_Backend.Columns.BackendPayScheduleID, BackendPayScheduleID).ExecuteReader());
				}
				return _PR_BackendsCol;
			}
		}

		private PR_BackendCollection _PR_Backends02Col;
		//Relationship: FK_PR_Backends_PR_BackendPaySchedules1
		public PR_BackendCollection PR_Backends02Col
		{
			get
			{
				if(_PR_Backends02Col == null) {
					_PR_Backends02Col = new PR_BackendCollection();
					_PR_Backends02Col.LoadAndCloseReader(PR_Backend.Query()
						.WHERE(PR_Backend.Columns.AlternatePayScheduleID, BackendPayScheduleID).ExecuteReader());
				}
				return _PR_Backends02Col;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendPeriod class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendPeriodCollection : ActiveList<PR_BackendPeriod, PR_BackendPeriodCollection>
	{
		public static PR_BackendPeriodCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendPeriodCollection result = new PR_BackendPeriodCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendPeriod item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendPeriods table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendPeriod : ActiveRecord<PR_BackendPeriod>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendPeriod()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendPeriods", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendPeriodID = new TableSchema.TableColumn(schema);
				colvarBackendPeriodID.ColumnName = "BackendPeriodID";
				colvarBackendPeriodID.DataType = DbType.Int32;
				colvarBackendPeriodID.MaxLength = 0;
				colvarBackendPeriodID.AutoIncrement = true;
				colvarBackendPeriodID.IsNullable = false;
				colvarBackendPeriodID.IsPrimaryKey = true;
				colvarBackendPeriodID.IsForeignKey = false;
				colvarBackendPeriodID.IsReadOnly = false;
				colvarBackendPeriodID.DefaultSetting = @"";
				colvarBackendPeriodID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendPeriodID);

				TableSchema.TableColumn colvarPreviousPeriodID = new TableSchema.TableColumn(schema);
				colvarPreviousPeriodID.ColumnName = "PreviousPeriodID";
				colvarPreviousPeriodID.DataType = DbType.Int32;
				colvarPreviousPeriodID.MaxLength = 0;
				colvarPreviousPeriodID.AutoIncrement = false;
				colvarPreviousPeriodID.IsNullable = true;
				colvarPreviousPeriodID.IsPrimaryKey = false;
				colvarPreviousPeriodID.IsForeignKey = true;
				colvarPreviousPeriodID.IsReadOnly = false;
				colvarPreviousPeriodID.DefaultSetting = @"";
				colvarPreviousPeriodID.ForeignKeyTableName = "PR_BackendPeriods";
				schema.Columns.Add(colvarPreviousPeriodID);

				TableSchema.TableColumn colvarSecondPortionPeriodID = new TableSchema.TableColumn(schema);
				colvarSecondPortionPeriodID.ColumnName = "SecondPortionPeriodID";
				colvarSecondPortionPeriodID.DataType = DbType.Int32;
				colvarSecondPortionPeriodID.MaxLength = 0;
				colvarSecondPortionPeriodID.AutoIncrement = false;
				colvarSecondPortionPeriodID.IsNullable = true;
				colvarSecondPortionPeriodID.IsPrimaryKey = false;
				colvarSecondPortionPeriodID.IsForeignKey = true;
				colvarSecondPortionPeriodID.IsReadOnly = false;
				colvarSecondPortionPeriodID.DefaultSetting = @"";
				colvarSecondPortionPeriodID.ForeignKeyTableName = "PR_BackendPeriods";
				schema.Columns.Add(colvarSecondPortionPeriodID);

				TableSchema.TableColumn colvarPrimarySeasonID = new TableSchema.TableColumn(schema);
				colvarPrimarySeasonID.ColumnName = "PrimarySeasonID";
				colvarPrimarySeasonID.DataType = DbType.Int32;
				colvarPrimarySeasonID.MaxLength = 0;
				colvarPrimarySeasonID.AutoIncrement = false;
				colvarPrimarySeasonID.IsNullable = false;
				colvarPrimarySeasonID.IsPrimaryKey = false;
				colvarPrimarySeasonID.IsForeignKey = true;
				colvarPrimarySeasonID.IsReadOnly = false;
				colvarPrimarySeasonID.DefaultSetting = @"";
				colvarPrimarySeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarPrimarySeasonID);

				TableSchema.TableColumn colvarPrimaryUserTypeID = new TableSchema.TableColumn(schema);
				colvarPrimaryUserTypeID.ColumnName = "PrimaryUserTypeID";
				colvarPrimaryUserTypeID.DataType = DbType.Int16;
				colvarPrimaryUserTypeID.MaxLength = 0;
				colvarPrimaryUserTypeID.AutoIncrement = false;
				colvarPrimaryUserTypeID.IsNullable = false;
				colvarPrimaryUserTypeID.IsPrimaryKey = false;
				colvarPrimaryUserTypeID.IsForeignKey = true;
				colvarPrimaryUserTypeID.IsReadOnly = false;
				colvarPrimaryUserTypeID.DefaultSetting = @"";
				colvarPrimaryUserTypeID.ForeignKeyTableName = "RU_UserType";
				schema.Columns.Add(colvarPrimaryUserTypeID);

				TableSchema.TableColumn colvarPercentToWithhold = new TableSchema.TableColumn(schema);
				colvarPercentToWithhold.ColumnName = "PercentToWithhold";
				colvarPercentToWithhold.DataType = DbType.Byte;
				colvarPercentToWithhold.MaxLength = 0;
				colvarPercentToWithhold.AutoIncrement = false;
				colvarPercentToWithhold.IsNullable = false;
				colvarPercentToWithhold.IsPrimaryKey = false;
				colvarPercentToWithhold.IsForeignKey = false;
				colvarPercentToWithhold.IsReadOnly = false;
				colvarPercentToWithhold.DefaultSetting = @"((0))";
				colvarPercentToWithhold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPercentToWithhold);

				TableSchema.TableColumn colvarBackendPeriodName = new TableSchema.TableColumn(schema);
				colvarBackendPeriodName.ColumnName = "BackendPeriodName";
				colvarBackendPeriodName.DataType = DbType.String;
				colvarBackendPeriodName.MaxLength = 50;
				colvarBackendPeriodName.AutoIncrement = false;
				colvarBackendPeriodName.IsNullable = false;
				colvarBackendPeriodName.IsPrimaryKey = false;
				colvarBackendPeriodName.IsForeignKey = false;
				colvarBackendPeriodName.IsReadOnly = false;
				colvarBackendPeriodName.DefaultSetting = @"";
				colvarBackendPeriodName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendPeriodName);

				TableSchema.TableColumn colvarDisplayName = new TableSchema.TableColumn(schema);
				colvarDisplayName.ColumnName = "DisplayName";
				colvarDisplayName.DataType = DbType.String;
				colvarDisplayName.MaxLength = 100;
				colvarDisplayName.AutoIncrement = false;
				colvarDisplayName.IsNullable = false;
				colvarDisplayName.IsPrimaryKey = false;
				colvarDisplayName.IsForeignKey = false;
				colvarDisplayName.IsReadOnly = false;
				colvarDisplayName.DefaultSetting = @"";
				colvarDisplayName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDisplayName);

				TableSchema.TableColumn colvarProcessDate = new TableSchema.TableColumn(schema);
				colvarProcessDate.ColumnName = "ProcessDate";
				colvarProcessDate.DataType = DbType.DateTime;
				colvarProcessDate.MaxLength = 0;
				colvarProcessDate.AutoIncrement = false;
				colvarProcessDate.IsNullable = false;
				colvarProcessDate.IsPrimaryKey = false;
				colvarProcessDate.IsForeignKey = false;
				colvarProcessDate.IsReadOnly = false;
				colvarProcessDate.DefaultSetting = @"";
				colvarProcessDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProcessDate);

				TableSchema.TableColumn colvarIsSecondPortion = new TableSchema.TableColumn(schema);
				colvarIsSecondPortion.ColumnName = "IsSecondPortion";
				colvarIsSecondPortion.DataType = DbType.Boolean;
				colvarIsSecondPortion.MaxLength = 0;
				colvarIsSecondPortion.AutoIncrement = false;
				colvarIsSecondPortion.IsNullable = false;
				colvarIsSecondPortion.IsPrimaryKey = false;
				colvarIsSecondPortion.IsForeignKey = false;
				colvarIsSecondPortion.IsReadOnly = false;
				colvarIsSecondPortion.DefaultSetting = @"((0))";
				colvarIsSecondPortion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSecondPortion);

				TableSchema.TableColumn colvarPayRecruitingBonus = new TableSchema.TableColumn(schema);
				colvarPayRecruitingBonus.ColumnName = "PayRecruitingBonus";
				colvarPayRecruitingBonus.DataType = DbType.Boolean;
				colvarPayRecruitingBonus.MaxLength = 0;
				colvarPayRecruitingBonus.AutoIncrement = false;
				colvarPayRecruitingBonus.IsNullable = false;
				colvarPayRecruitingBonus.IsPrimaryKey = false;
				colvarPayRecruitingBonus.IsForeignKey = false;
				colvarPayRecruitingBonus.IsReadOnly = false;
				colvarPayRecruitingBonus.DefaultSetting = @"((0))";
				colvarPayRecruitingBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayRecruitingBonus);

				TableSchema.TableColumn colvarMonthName = new TableSchema.TableColumn(schema);
				colvarMonthName.ColumnName = "MonthName";
				colvarMonthName.DataType = DbType.String;
				colvarMonthName.MaxLength = 50;
				colvarMonthName.AutoIncrement = false;
				colvarMonthName.IsNullable = true;
				colvarMonthName.IsPrimaryKey = false;
				colvarMonthName.IsForeignKey = false;
				colvarMonthName.IsReadOnly = false;
				colvarMonthName.DefaultSetting = @"";
				colvarMonthName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthName);

				TableSchema.TableColumn colvarGPTransactionStartDate = new TableSchema.TableColumn(schema);
				colvarGPTransactionStartDate.ColumnName = "GPTransactionStartDate";
				colvarGPTransactionStartDate.DataType = DbType.DateTime;
				colvarGPTransactionStartDate.MaxLength = 0;
				colvarGPTransactionStartDate.AutoIncrement = false;
				colvarGPTransactionStartDate.IsNullable = true;
				colvarGPTransactionStartDate.IsPrimaryKey = false;
				colvarGPTransactionStartDate.IsForeignKey = false;
				colvarGPTransactionStartDate.IsReadOnly = false;
				colvarGPTransactionStartDate.DefaultSetting = @"";
				colvarGPTransactionStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPTransactionStartDate);

				TableSchema.TableColumn colvarGPTransactionEndDate = new TableSchema.TableColumn(schema);
				colvarGPTransactionEndDate.ColumnName = "GPTransactionEndDate";
				colvarGPTransactionEndDate.DataType = DbType.DateTime;
				colvarGPTransactionEndDate.MaxLength = 0;
				colvarGPTransactionEndDate.AutoIncrement = false;
				colvarGPTransactionEndDate.IsNullable = true;
				colvarGPTransactionEndDate.IsPrimaryKey = false;
				colvarGPTransactionEndDate.IsForeignKey = false;
				colvarGPTransactionEndDate.IsReadOnly = false;
				colvarGPTransactionEndDate.DefaultSetting = @"";
				colvarGPTransactionEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPTransactionEndDate);

				TableSchema.TableColumn colvarIsVisible = new TableSchema.TableColumn(schema);
				colvarIsVisible.ColumnName = "IsVisible";
				colvarIsVisible.DataType = DbType.Boolean;
				colvarIsVisible.MaxLength = 0;
				colvarIsVisible.AutoIncrement = false;
				colvarIsVisible.IsNullable = false;
				colvarIsVisible.IsPrimaryKey = false;
				colvarIsVisible.IsForeignKey = false;
				colvarIsVisible.IsReadOnly = false;
				colvarIsVisible.DefaultSetting = @"((0))";
				colvarIsVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVisible);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendPeriods",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendPeriod LoadFrom(PR_BackendPeriod item)
		{
			PR_BackendPeriod result = new PR_BackendPeriod();
			if (item.BackendPeriodID != default(int)) {
				result.LoadByKey(item.BackendPeriodID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendPeriodID {
			get { return GetColumnValue<int>(Columns.BackendPeriodID); }
			set {
				SetColumnValue(Columns.BackendPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPeriodID));
			}
		}
		[DataMember]
		public int? PreviousPeriodID {
			get { return GetColumnValue<int?>(Columns.PreviousPeriodID); }
			set {
				SetColumnValue(Columns.PreviousPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreviousPeriodID));
			}
		}
		[DataMember]
		public int? SecondPortionPeriodID {
			get { return GetColumnValue<int?>(Columns.SecondPortionPeriodID); }
			set {
				SetColumnValue(Columns.SecondPortionPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SecondPortionPeriodID));
			}
		}
		[DataMember]
		public int PrimarySeasonID {
			get { return GetColumnValue<int>(Columns.PrimarySeasonID); }
			set {
				SetColumnValue(Columns.PrimarySeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrimarySeasonID));
			}
		}
		[DataMember]
		public short PrimaryUserTypeID {
			get { return GetColumnValue<short>(Columns.PrimaryUserTypeID); }
			set {
				SetColumnValue(Columns.PrimaryUserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrimaryUserTypeID));
			}
		}
		[DataMember]
		public byte PercentToWithhold {
			get { return GetColumnValue<byte>(Columns.PercentToWithhold); }
			set {
				SetColumnValue(Columns.PercentToWithhold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PercentToWithhold));
			}
		}
		[DataMember]
		public string BackendPeriodName {
			get { return GetColumnValue<string>(Columns.BackendPeriodName); }
			set {
				SetColumnValue(Columns.BackendPeriodName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPeriodName));
			}
		}
		[DataMember]
		public string DisplayName {
			get { return GetColumnValue<string>(Columns.DisplayName); }
			set {
				SetColumnValue(Columns.DisplayName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DisplayName));
			}
		}
		[DataMember]
		public DateTime ProcessDate {
			get { return GetColumnValue<DateTime>(Columns.ProcessDate); }
			set {
				SetColumnValue(Columns.ProcessDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProcessDate));
			}
		}
		[DataMember]
		public bool IsSecondPortion {
			get { return GetColumnValue<bool>(Columns.IsSecondPortion); }
			set {
				SetColumnValue(Columns.IsSecondPortion, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSecondPortion));
			}
		}
		[DataMember]
		public bool PayRecruitingBonus {
			get { return GetColumnValue<bool>(Columns.PayRecruitingBonus); }
			set {
				SetColumnValue(Columns.PayRecruitingBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayRecruitingBonus));
			}
		}
		[DataMember]
		public string MonthName {
			get { return GetColumnValue<string>(Columns.MonthName); }
			set {
				SetColumnValue(Columns.MonthName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonthName));
			}
		}
		[DataMember]
		public DateTime? GPTransactionStartDate {
			get { return GetColumnValue<DateTime?>(Columns.GPTransactionStartDate); }
			set {
				SetColumnValue(Columns.GPTransactionStartDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPTransactionStartDate));
			}
		}
		[DataMember]
		public DateTime? GPTransactionEndDate {
			get { return GetColumnValue<DateTime?>(Columns.GPTransactionEndDate); }
			set {
				SetColumnValue(Columns.GPTransactionEndDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPTransactionEndDate));
			}
		}
		[DataMember]
		public bool IsVisible {
			get { return GetColumnValue<bool>(Columns.IsVisible); }
			set {
				SetColumnValue(Columns.IsVisible, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsVisible));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_UserType _PrimaryUserType;
		//Relationship: FK_PR_BackendPeriods_PR_BackendPeriods
		public RU_UserType PrimaryUserType
		{
			get
			{
				if(_PrimaryUserType == null) {
					_PrimaryUserType = RU_UserType.FetchByID(this.PrimaryUserTypeID);
				}
				return _PrimaryUserType;
			}
			set
			{
				SetColumnValue("PrimaryUserTypeID", value.UserTypeID);
				_PrimaryUserType = value;
			}
		}

		private PR_BackendPeriod _PreviousPeriod;
		//Relationship: FK_PR_BackendPeriods_PR_BackendPeriods1
		public PR_BackendPeriod PreviousPeriod
		{
			get
			{
				if(_PreviousPeriod == null) {
					_PreviousPeriod = PR_BackendPeriod.FetchByID(this.PreviousPeriodID);
				}
				return _PreviousPeriod;
			}
			set
			{
				SetColumnValue("PreviousPeriodID", value.BackendPeriodID);
				_PreviousPeriod = value;
			}
		}

		private PR_BackendPeriod _SecondPortionPeriod;
		//Relationship: FK_PR_BackendPeriods_PR_BackendPeriods2
		public PR_BackendPeriod SecondPortionPeriod
		{
			get
			{
				if(_SecondPortionPeriod == null) {
					_SecondPortionPeriod = PR_BackendPeriod.FetchByID(this.SecondPortionPeriodID);
				}
				return _SecondPortionPeriod;
			}
			set
			{
				SetColumnValue("SecondPortionPeriodID", value.BackendPeriodID);
				_SecondPortionPeriod = value;
			}
		}

		private RU_Season _PrimarySeason;
		//Relationship: FK_PR_BackendPeriods_RU_Season
		public RU_Season PrimarySeason
		{
			get
			{
				if(_PrimarySeason == null) {
					_PrimarySeason = RU_Season.FetchByID(this.PrimarySeasonID);
				}
				return _PrimarySeason;
			}
			set
			{
				SetColumnValue("PrimarySeasonID", value.SeasonID);
				_PrimarySeason = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendPeriodID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendPeriodIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PreviousPeriodIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SecondPortionPeriodIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PrimarySeasonIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PrimaryUserTypeIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn PercentToWithholdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn BackendPeriodNameColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DisplayNameColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ProcessDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsSecondPortionColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn PayRecruitingBonusColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn MonthNameColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn GPTransactionStartDateColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn GPTransactionEndDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsVisibleColumn
		{
			get { return Schema.Columns[14]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendPeriodID = @"BackendPeriodID";
			public static readonly string PreviousPeriodID = @"PreviousPeriodID";
			public static readonly string SecondPortionPeriodID = @"SecondPortionPeriodID";
			public static readonly string PrimarySeasonID = @"PrimarySeasonID";
			public static readonly string PrimaryUserTypeID = @"PrimaryUserTypeID";
			public static readonly string PercentToWithhold = @"PercentToWithhold";
			public static readonly string BackendPeriodName = @"BackendPeriodName";
			public static readonly string DisplayName = @"DisplayName";
			public static readonly string ProcessDate = @"ProcessDate";
			public static readonly string IsSecondPortion = @"IsSecondPortion";
			public static readonly string PayRecruitingBonus = @"PayRecruitingBonus";
			public static readonly string MonthName = @"MonthName";
			public static readonly string GPTransactionStartDate = @"GPTransactionStartDate";
			public static readonly string GPTransactionEndDate = @"GPTransactionEndDate";
			public static readonly string IsVisible = @"IsVisible";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendPeriodID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendAccountExceptionCollection _PR_BackendAccountExceptionsCol;
		//Relationship: FK_PR_BackendAccountExceptions_PR_BackendPeriods
		public PR_BackendAccountExceptionCollection PR_BackendAccountExceptionsCol
		{
			get
			{
				if(_PR_BackendAccountExceptionsCol == null) {
					_PR_BackendAccountExceptionsCol = new PR_BackendAccountExceptionCollection();
					_PR_BackendAccountExceptionsCol.LoadAndCloseReader(PR_BackendAccountException.Query()
						.WHERE(PR_BackendAccountException.Columns.BackendPeriodID, BackendPeriodID).ExecuteReader());
				}
				return _PR_BackendAccountExceptionsCol;
			}
		}

		private PR_BackendAccountNumbersExceptionCollection _PR_BackendAccountNumbersExceptionsCol;
		//Relationship: FK_PR_BackendAccountNumbersExceptions_PR_BackendPeriods
		public PR_BackendAccountNumbersExceptionCollection PR_BackendAccountNumbersExceptionsCol
		{
			get
			{
				if(_PR_BackendAccountNumbersExceptionsCol == null) {
					_PR_BackendAccountNumbersExceptionsCol = new PR_BackendAccountNumbersExceptionCollection();
					_PR_BackendAccountNumbersExceptionsCol.LoadAndCloseReader(PR_BackendAccountNumbersException.Query()
						.WHERE(PR_BackendAccountNumbersException.Columns.BackendPeriodID, BackendPeriodID).ExecuteReader());
				}
				return _PR_BackendAccountNumbersExceptionsCol;
			}
		}

		private PR_BackendExceptionCollection _PR_BackendExceptionsCol;
		//Relationship: FK_PR_BackendExceptions_PR_BackendPeriods
		public PR_BackendExceptionCollection PR_BackendExceptionsCol
		{
			get
			{
				if(_PR_BackendExceptionsCol == null) {
					_PR_BackendExceptionsCol = new PR_BackendExceptionCollection();
					_PR_BackendExceptionsCol.LoadAndCloseReader(PR_BackendException.Query()
						.WHERE(PR_BackendException.Columns.BackendPeriodID, BackendPeriodID).ExecuteReader());
				}
				return _PR_BackendExceptionsCol;
			}
		}

		private PR_BackendPeriodCollection _ChildPR_BackendPeriodsCol;
		//Relationship: FK_PR_BackendPeriods_PR_BackendPeriods1
		public PR_BackendPeriodCollection ChildPR_BackendPeriodsCol
		{
			get
			{
				if(_ChildPR_BackendPeriodsCol == null) {
					_ChildPR_BackendPeriodsCol = new PR_BackendPeriodCollection();
					_ChildPR_BackendPeriodsCol.LoadAndCloseReader(PR_BackendPeriod.Query()
						.WHERE(PR_BackendPeriod.Columns.PreviousPeriodID, BackendPeriodID).ExecuteReader());
				}
				return _ChildPR_BackendPeriodsCol;
			}
		}

		private PR_BackendPeriodCollection _ChildPR_BackendPeriods02Col;
		//Relationship: FK_PR_BackendPeriods_PR_BackendPeriods2
		public PR_BackendPeriodCollection ChildPR_BackendPeriods02Col
		{
			get
			{
				if(_ChildPR_BackendPeriods02Col == null) {
					_ChildPR_BackendPeriods02Col = new PR_BackendPeriodCollection();
					_ChildPR_BackendPeriods02Col.LoadAndCloseReader(PR_BackendPeriod.Query()
						.WHERE(PR_BackendPeriod.Columns.SecondPortionPeriodID, BackendPeriodID).ExecuteReader());
				}
				return _ChildPR_BackendPeriods02Col;
			}
		}

		private PR_BackendPeriodSeasonMappingCollection _PR_BackendPeriodSeasonMappingsCol;
		//Relationship: FK_PR_BackendPeriodSeasonMappings_PR_BackendPeriods
		public PR_BackendPeriodSeasonMappingCollection PR_BackendPeriodSeasonMappingsCol
		{
			get
			{
				if(_PR_BackendPeriodSeasonMappingsCol == null) {
					_PR_BackendPeriodSeasonMappingsCol = new PR_BackendPeriodSeasonMappingCollection();
					_PR_BackendPeriodSeasonMappingsCol.LoadAndCloseReader(PR_BackendPeriodSeasonMapping.Query()
						.WHERE(PR_BackendPeriodSeasonMapping.Columns.BackendPeriodID, BackendPeriodID).ExecuteReader());
				}
				return _PR_BackendPeriodSeasonMappingsCol;
			}
		}

		private PR_BackendPeriodUserTypeMappingCollection _PR_BackendPeriodUserTypeMappingsCol;
		//Relationship: FK_PR_BackendPeriodUserTypeMappings_PR_BackendPeriods
		public PR_BackendPeriodUserTypeMappingCollection PR_BackendPeriodUserTypeMappingsCol
		{
			get
			{
				if(_PR_BackendPeriodUserTypeMappingsCol == null) {
					_PR_BackendPeriodUserTypeMappingsCol = new PR_BackendPeriodUserTypeMappingCollection();
					_PR_BackendPeriodUserTypeMappingsCol.LoadAndCloseReader(PR_BackendPeriodUserTypeMapping.Query()
						.WHERE(PR_BackendPeriodUserTypeMapping.Columns.BackendPeriodID, BackendPeriodID).ExecuteReader());
				}
				return _PR_BackendPeriodUserTypeMappingsCol;
			}
		}

		private PR_BackendQualificationExceptionCollection _PR_BackendQualificationExceptionsCol;
		//Relationship: FK_PR_BackendQualificationExceptions_PR_BackendPeriods
		public PR_BackendQualificationExceptionCollection PR_BackendQualificationExceptionsCol
		{
			get
			{
				if(_PR_BackendQualificationExceptionsCol == null) {
					_PR_BackendQualificationExceptionsCol = new PR_BackendQualificationExceptionCollection();
					_PR_BackendQualificationExceptionsCol.LoadAndCloseReader(PR_BackendQualificationException.Query()
						.WHERE(PR_BackendQualificationException.Columns.BackendPeriodID, BackendPeriodID).ExecuteReader());
				}
				return _PR_BackendQualificationExceptionsCol;
			}
		}

		private PR_BackendCollection _PR_BackendsCol;
		//Relationship: FK_PR_Backends_PR_BackendPeriods
		public PR_BackendCollection PR_BackendsCol
		{
			get
			{
				if(_PR_BackendsCol == null) {
					_PR_BackendsCol = new PR_BackendCollection();
					_PR_BackendsCol.LoadAndCloseReader(PR_Backend.Query()
						.WHERE(PR_Backend.Columns.BackendPeriodID, BackendPeriodID).ExecuteReader());
				}
				return _PR_BackendsCol;
			}
		}

		private PR_RegionalResidualPeriodCollection _PR_RegionalResidualPeriodsCol;
		//Relationship: FK_PR_RegionalResidualPeriods_PR_BackendPeriods
		public PR_RegionalResidualPeriodCollection PR_RegionalResidualPeriodsCol
		{
			get
			{
				if(_PR_RegionalResidualPeriodsCol == null) {
					_PR_RegionalResidualPeriodsCol = new PR_RegionalResidualPeriodCollection();
					_PR_RegionalResidualPeriodsCol.LoadAndCloseReader(PR_RegionalResidualPeriod.Query()
						.WHERE(PR_RegionalResidualPeriod.Columns.BackendPeriodID, BackendPeriodID).ExecuteReader());
				}
				return _PR_RegionalResidualPeriodsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendPeriodSeasonMapping class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendPeriodSeasonMappingCollection : ActiveList<PR_BackendPeriodSeasonMapping, PR_BackendPeriodSeasonMappingCollection>
	{
		public static PR_BackendPeriodSeasonMappingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendPeriodSeasonMappingCollection result = new PR_BackendPeriodSeasonMappingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendPeriodSeasonMapping item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendPeriodSeasonMappings table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendPeriodSeasonMapping : ActiveRecord<PR_BackendPeriodSeasonMapping>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendPeriodSeasonMapping()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendPeriodSeasonMappings", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendPeriodID = new TableSchema.TableColumn(schema);
				colvarBackendPeriodID.ColumnName = "BackendPeriodID";
				colvarBackendPeriodID.DataType = DbType.Int32;
				colvarBackendPeriodID.MaxLength = 0;
				colvarBackendPeriodID.AutoIncrement = false;
				colvarBackendPeriodID.IsNullable = false;
				colvarBackendPeriodID.IsPrimaryKey = true;
				colvarBackendPeriodID.IsForeignKey = false;
				colvarBackendPeriodID.IsReadOnly = false;
				colvarBackendPeriodID.DefaultSetting = @"";
				colvarBackendPeriodID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendPeriodID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarIncludeInRentBonus = new TableSchema.TableColumn(schema);
				colvarIncludeInRentBonus.ColumnName = "IncludeInRentBonus";
				colvarIncludeInRentBonus.DataType = DbType.Boolean;
				colvarIncludeInRentBonus.MaxLength = 0;
				colvarIncludeInRentBonus.AutoIncrement = false;
				colvarIncludeInRentBonus.IsNullable = false;
				colvarIncludeInRentBonus.IsPrimaryKey = false;
				colvarIncludeInRentBonus.IsForeignKey = false;
				colvarIncludeInRentBonus.IsReadOnly = false;
				colvarIncludeInRentBonus.DefaultSetting = @"((1))";
				colvarIncludeInRentBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncludeInRentBonus);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendPeriodSeasonMappings",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendPeriodSeasonMapping LoadFrom(PR_BackendPeriodSeasonMapping item)
		{
			PR_BackendPeriodSeasonMapping result = new PR_BackendPeriodSeasonMapping();
			if (item.BackendPeriodID != default(int)) {
				result.LoadByKey(item.BackendPeriodID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendPeriodID {
			get { return GetColumnValue<int>(Columns.BackendPeriodID); }
			set {
				SetColumnValue(Columns.BackendPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPeriodID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public bool IncludeInRentBonus {
			get { return GetColumnValue<bool>(Columns.IncludeInRentBonus); }
			set {
				SetColumnValue(Columns.IncludeInRentBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncludeInRentBonus));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendPeriod _BackendPeriod;
		//Relationship: FK_PR_BackendPeriodSeasonMappings_PR_BackendPeriods
		public PR_BackendPeriod BackendPeriod
		{
			get
			{
				if(_BackendPeriod == null) {
					_BackendPeriod = PR_BackendPeriod.FetchByID(this.BackendPeriodID);
				}
				return _BackendPeriod;
			}
			set
			{
				SetColumnValue("BackendPeriodID", value.BackendPeriodID);
				_BackendPeriod = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_BackendPeriodSeasonMappings_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendPeriodID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendPeriodIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IncludeInRentBonusColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendPeriodID = @"BackendPeriodID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string IncludeInRentBonus = @"IncludeInRentBonus";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendPeriodID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendPeriodUserTypeMapping class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendPeriodUserTypeMappingCollection : ActiveList<PR_BackendPeriodUserTypeMapping, PR_BackendPeriodUserTypeMappingCollection>
	{
		public static PR_BackendPeriodUserTypeMappingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendPeriodUserTypeMappingCollection result = new PR_BackendPeriodUserTypeMappingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendPeriodUserTypeMapping item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendPeriodUserTypeMappings table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendPeriodUserTypeMapping : ActiveRecord<PR_BackendPeriodUserTypeMapping>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendPeriodUserTypeMapping()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendPeriodUserTypeMappings", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendPeriodID = new TableSchema.TableColumn(schema);
				colvarBackendPeriodID.ColumnName = "BackendPeriodID";
				colvarBackendPeriodID.DataType = DbType.Int32;
				colvarBackendPeriodID.MaxLength = 0;
				colvarBackendPeriodID.AutoIncrement = false;
				colvarBackendPeriodID.IsNullable = false;
				colvarBackendPeriodID.IsPrimaryKey = true;
				colvarBackendPeriodID.IsForeignKey = false;
				colvarBackendPeriodID.IsReadOnly = false;
				colvarBackendPeriodID.DefaultSetting = @"";
				colvarBackendPeriodID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendPeriodID);

				TableSchema.TableColumn colvarUserTypeID = new TableSchema.TableColumn(schema);
				colvarUserTypeID.ColumnName = "UserTypeID";
				colvarUserTypeID.DataType = DbType.Int16;
				colvarUserTypeID.MaxLength = 0;
				colvarUserTypeID.AutoIncrement = false;
				colvarUserTypeID.IsNullable = false;
				colvarUserTypeID.IsPrimaryKey = false;
				colvarUserTypeID.IsForeignKey = true;
				colvarUserTypeID.IsReadOnly = false;
				colvarUserTypeID.DefaultSetting = @"";
				colvarUserTypeID.ForeignKeyTableName = "RU_UserType";
				schema.Columns.Add(colvarUserTypeID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendPeriodUserTypeMappings",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendPeriodUserTypeMapping LoadFrom(PR_BackendPeriodUserTypeMapping item)
		{
			PR_BackendPeriodUserTypeMapping result = new PR_BackendPeriodUserTypeMapping();
			if (item.BackendPeriodID != default(int)) {
				result.LoadByKey(item.BackendPeriodID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendPeriodID {
			get { return GetColumnValue<int>(Columns.BackendPeriodID); }
			set {
				SetColumnValue(Columns.BackendPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPeriodID));
			}
		}
		[DataMember]
		public short UserTypeID {
			get { return GetColumnValue<short>(Columns.UserTypeID); }
			set {
				SetColumnValue(Columns.UserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendPeriod _BackendPeriod;
		//Relationship: FK_PR_BackendPeriodUserTypeMappings_PR_BackendPeriods
		public PR_BackendPeriod BackendPeriod
		{
			get
			{
				if(_BackendPeriod == null) {
					_BackendPeriod = PR_BackendPeriod.FetchByID(this.BackendPeriodID);
				}
				return _BackendPeriod;
			}
			set
			{
				SetColumnValue("BackendPeriodID", value.BackendPeriodID);
				_BackendPeriod = value;
			}
		}

		private RU_UserType _UserType;
		//Relationship: FK_PR_BackendPeriodUserTypeMappings_RU_UserType
		public RU_UserType UserType
		{
			get
			{
				if(_UserType == null) {
					_UserType = RU_UserType.FetchByID(this.UserTypeID);
				}
				return _UserType;
			}
			set
			{
				SetColumnValue("UserTypeID", value.UserTypeID);
				_UserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendPeriodID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendPeriodIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendPeriodID = @"BackendPeriodID";
			public static readonly string UserTypeID = @"UserTypeID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendPeriodID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendQualificationException class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendQualificationExceptionCollection : ActiveList<PR_BackendQualificationException, PR_BackendQualificationExceptionCollection>
	{
		public static PR_BackendQualificationExceptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendQualificationExceptionCollection result = new PR_BackendQualificationExceptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendQualificationException item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendQualificationExceptions table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendQualificationException : ActiveRecord<PR_BackendQualificationException>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendQualificationException()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendQualificationExceptions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarQualificationExceptionID = new TableSchema.TableColumn(schema);
				colvarQualificationExceptionID.ColumnName = "QualificationExceptionID";
				colvarQualificationExceptionID.DataType = DbType.Int32;
				colvarQualificationExceptionID.MaxLength = 0;
				colvarQualificationExceptionID.AutoIncrement = true;
				colvarQualificationExceptionID.IsNullable = false;
				colvarQualificationExceptionID.IsPrimaryKey = true;
				colvarQualificationExceptionID.IsForeignKey = false;
				colvarQualificationExceptionID.IsReadOnly = false;
				colvarQualificationExceptionID.DefaultSetting = @"";
				colvarQualificationExceptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQualificationExceptionID);

				TableSchema.TableColumn colvarBackendPeriodID = new TableSchema.TableColumn(schema);
				colvarBackendPeriodID.ColumnName = "BackendPeriodID";
				colvarBackendPeriodID.DataType = DbType.Int32;
				colvarBackendPeriodID.MaxLength = 0;
				colvarBackendPeriodID.AutoIncrement = false;
				colvarBackendPeriodID.IsNullable = false;
				colvarBackendPeriodID.IsPrimaryKey = false;
				colvarBackendPeriodID.IsForeignKey = true;
				colvarBackendPeriodID.IsReadOnly = false;
				colvarBackendPeriodID.DefaultSetting = @"";
				colvarBackendPeriodID.ForeignKeyTableName = "PR_BackendPeriods";
				schema.Columns.Add(colvarBackendPeriodID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarRunBackend = new TableSchema.TableColumn(schema);
				colvarRunBackend.ColumnName = "RunBackend";
				colvarRunBackend.DataType = DbType.Boolean;
				colvarRunBackend.MaxLength = 0;
				colvarRunBackend.AutoIncrement = false;
				colvarRunBackend.IsNullable = false;
				colvarRunBackend.IsPrimaryKey = false;
				colvarRunBackend.IsForeignKey = false;
				colvarRunBackend.IsReadOnly = false;
				colvarRunBackend.DefaultSetting = @"((0))";
				colvarRunBackend.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRunBackend);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendQualificationExceptions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendQualificationException LoadFrom(PR_BackendQualificationException item)
		{
			PR_BackendQualificationException result = new PR_BackendQualificationException();
			if (item.QualificationExceptionID != default(int)) {
				result.LoadByKey(item.QualificationExceptionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int QualificationExceptionID {
			get { return GetColumnValue<int>(Columns.QualificationExceptionID); }
			set {
				SetColumnValue(Columns.QualificationExceptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QualificationExceptionID));
			}
		}
		[DataMember]
		public int BackendPeriodID {
			get { return GetColumnValue<int>(Columns.BackendPeriodID); }
			set {
				SetColumnValue(Columns.BackendPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPeriodID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public bool RunBackend {
			get { return GetColumnValue<bool>(Columns.RunBackend); }
			set {
				SetColumnValue(Columns.RunBackend, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RunBackend));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendPeriod _BackendPeriod;
		//Relationship: FK_PR_BackendQualificationExceptions_PR_BackendPeriods
		public PR_BackendPeriod BackendPeriod
		{
			get
			{
				if(_BackendPeriod == null) {
					_BackendPeriod = PR_BackendPeriod.FetchByID(this.BackendPeriodID);
				}
				return _BackendPeriod;
			}
			set
			{
				SetColumnValue("BackendPeriodID", value.BackendPeriodID);
				_BackendPeriod = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return QualificationExceptionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn QualificationExceptionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BackendPeriodIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RunBackendColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string QualificationExceptionID = @"QualificationExceptionID";
			public static readonly string BackendPeriodID = @"BackendPeriodID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string RunBackend = @"RunBackend";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return QualificationExceptionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendRentException class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendRentExceptionCollection : ActiveList<PR_BackendRentException, PR_BackendRentExceptionCollection>
	{
		public static PR_BackendRentExceptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendRentExceptionCollection result = new PR_BackendRentExceptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendRentException item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendRentExceptions table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendRentException : ActiveRecord<PR_BackendRentException>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendRentException()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendRentExceptions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTechRentExceptionID = new TableSchema.TableColumn(schema);
				colvarTechRentExceptionID.ColumnName = "TechRentExceptionID";
				colvarTechRentExceptionID.DataType = DbType.Int32;
				colvarTechRentExceptionID.MaxLength = 0;
				colvarTechRentExceptionID.AutoIncrement = true;
				colvarTechRentExceptionID.IsNullable = false;
				colvarTechRentExceptionID.IsPrimaryKey = true;
				colvarTechRentExceptionID.IsForeignKey = false;
				colvarTechRentExceptionID.IsReadOnly = false;
				colvarTechRentExceptionID.DefaultSetting = @"";
				colvarTechRentExceptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechRentExceptionID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarRentBonusMultiplier = new TableSchema.TableColumn(schema);
				colvarRentBonusMultiplier.ColumnName = "RentBonusMultiplier";
				colvarRentBonusMultiplier.DataType = DbType.Double;
				colvarRentBonusMultiplier.MaxLength = 0;
				colvarRentBonusMultiplier.AutoIncrement = false;
				colvarRentBonusMultiplier.IsNullable = false;
				colvarRentBonusMultiplier.IsPrimaryKey = false;
				colvarRentBonusMultiplier.IsForeignKey = false;
				colvarRentBonusMultiplier.IsReadOnly = false;
				colvarRentBonusMultiplier.DefaultSetting = @"";
				colvarRentBonusMultiplier.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentBonusMultiplier);

				TableSchema.TableColumn colvarRentBonusCap = new TableSchema.TableColumn(schema);
				colvarRentBonusCap.ColumnName = "RentBonusCap";
				colvarRentBonusCap.DataType = DbType.Currency;
				colvarRentBonusCap.MaxLength = 0;
				colvarRentBonusCap.AutoIncrement = false;
				colvarRentBonusCap.IsNullable = false;
				colvarRentBonusCap.IsPrimaryKey = false;
				colvarRentBonusCap.IsForeignKey = false;
				colvarRentBonusCap.IsReadOnly = false;
				colvarRentBonusCap.DefaultSetting = @"((0))";
				colvarRentBonusCap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentBonusCap);

				TableSchema.TableColumn colvarGetsMarriedRent = new TableSchema.TableColumn(schema);
				colvarGetsMarriedRent.ColumnName = "GetsMarriedRent";
				colvarGetsMarriedRent.DataType = DbType.Boolean;
				colvarGetsMarriedRent.MaxLength = 0;
				colvarGetsMarriedRent.AutoIncrement = false;
				colvarGetsMarriedRent.IsNullable = false;
				colvarGetsMarriedRent.IsPrimaryKey = false;
				colvarGetsMarriedRent.IsForeignKey = false;
				colvarGetsMarriedRent.IsReadOnly = false;
				colvarGetsMarriedRent.DefaultSetting = @"";
				colvarGetsMarriedRent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGetsMarriedRent);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendRentExceptions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendRentException LoadFrom(PR_BackendRentException item)
		{
			PR_BackendRentException result = new PR_BackendRentException();
			if (item.TechRentExceptionID != default(int)) {
				result.LoadByKey(item.TechRentExceptionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TechRentExceptionID {
			get { return GetColumnValue<int>(Columns.TechRentExceptionID); }
			set {
				SetColumnValue(Columns.TechRentExceptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechRentExceptionID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public double RentBonusMultiplier {
			get { return GetColumnValue<double>(Columns.RentBonusMultiplier); }
			set {
				SetColumnValue(Columns.RentBonusMultiplier, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentBonusMultiplier));
			}
		}
		[DataMember]
		public decimal RentBonusCap {
			get { return GetColumnValue<decimal>(Columns.RentBonusCap); }
			set {
				SetColumnValue(Columns.RentBonusCap, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentBonusCap));
			}
		}
		[DataMember]
		public bool GetsMarriedRent {
			get { return GetColumnValue<bool>(Columns.GetsMarriedRent); }
			set {
				SetColumnValue(Columns.GetsMarriedRent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GetsMarriedRent));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return TechRentExceptionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TechRentExceptionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RentBonusMultiplierColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RentBonusCapColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn GetsMarriedRentColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TechRentExceptionID = @"TechRentExceptionID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string RentBonusMultiplier = @"RentBonusMultiplier";
			public static readonly string RentBonusCap = @"RentBonusCap";
			public static readonly string GetsMarriedRent = @"GetsMarriedRent";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TechRentExceptionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_Backend class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendCollection : ActiveList<PR_Backend, PR_BackendCollection>
	{
		public static PR_BackendCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendCollection result = new PR_BackendCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_Backend item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_Backends table.
	/// </summary>
	[DataContract]
	public partial class PR_Backend : ActiveRecord<PR_Backend>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_Backend()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_Backends", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendID = new TableSchema.TableColumn(schema);
				colvarBackendID.ColumnName = "BackendID";
				colvarBackendID.DataType = DbType.Int32;
				colvarBackendID.MaxLength = 0;
				colvarBackendID.AutoIncrement = true;
				colvarBackendID.IsNullable = false;
				colvarBackendID.IsPrimaryKey = true;
				colvarBackendID.IsForeignKey = false;
				colvarBackendID.IsReadOnly = false;
				colvarBackendID.DefaultSetting = @"";
				colvarBackendID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendID);

				TableSchema.TableColumn colvarBackendPeriodID = new TableSchema.TableColumn(schema);
				colvarBackendPeriodID.ColumnName = "BackendPeriodID";
				colvarBackendPeriodID.DataType = DbType.Int32;
				colvarBackendPeriodID.MaxLength = 0;
				colvarBackendPeriodID.AutoIncrement = false;
				colvarBackendPeriodID.IsNullable = false;
				colvarBackendPeriodID.IsPrimaryKey = false;
				colvarBackendPeriodID.IsForeignKey = true;
				colvarBackendPeriodID.IsReadOnly = false;
				colvarBackendPeriodID.DefaultSetting = @"";
				colvarBackendPeriodID.ForeignKeyTableName = "PR_BackendPeriods";
				schema.Columns.Add(colvarBackendPeriodID);

				TableSchema.TableColumn colvarPayscaleID = new TableSchema.TableColumn(schema);
				colvarPayscaleID.ColumnName = "PayscaleID";
				colvarPayscaleID.DataType = DbType.Int32;
				colvarPayscaleID.MaxLength = 0;
				colvarPayscaleID.AutoIncrement = false;
				colvarPayscaleID.IsNullable = false;
				colvarPayscaleID.IsPrimaryKey = false;
				colvarPayscaleID.IsForeignKey = true;
				colvarPayscaleID.IsReadOnly = false;
				colvarPayscaleID.DefaultSetting = @"";
				colvarPayscaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayscaleID);

				TableSchema.TableColumn colvarBackendPayScheduleID = new TableSchema.TableColumn(schema);
				colvarBackendPayScheduleID.ColumnName = "BackendPayScheduleID";
				colvarBackendPayScheduleID.DataType = DbType.Int32;
				colvarBackendPayScheduleID.MaxLength = 0;
				colvarBackendPayScheduleID.AutoIncrement = false;
				colvarBackendPayScheduleID.IsNullable = true;
				colvarBackendPayScheduleID.IsPrimaryKey = false;
				colvarBackendPayScheduleID.IsForeignKey = true;
				colvarBackendPayScheduleID.IsReadOnly = false;
				colvarBackendPayScheduleID.DefaultSetting = @"";
				colvarBackendPayScheduleID.ForeignKeyTableName = "PR_BackendPaySchedules";
				schema.Columns.Add(colvarBackendPayScheduleID);

				TableSchema.TableColumn colvarBackendManagerPayScheduleID = new TableSchema.TableColumn(schema);
				colvarBackendManagerPayScheduleID.ColumnName = "BackendManagerPayScheduleID";
				colvarBackendManagerPayScheduleID.DataType = DbType.Int32;
				colvarBackendManagerPayScheduleID.MaxLength = 0;
				colvarBackendManagerPayScheduleID.AutoIncrement = false;
				colvarBackendManagerPayScheduleID.IsNullable = true;
				colvarBackendManagerPayScheduleID.IsPrimaryKey = false;
				colvarBackendManagerPayScheduleID.IsForeignKey = true;
				colvarBackendManagerPayScheduleID.IsReadOnly = false;
				colvarBackendManagerPayScheduleID.DefaultSetting = @"";
				colvarBackendManagerPayScheduleID.ForeignKeyTableName = "PR_BackendManagerPaySchedules";
				schema.Columns.Add(colvarBackendManagerPayScheduleID);

				TableSchema.TableColumn colvarBackendRegionalManagerPayScheduleID = new TableSchema.TableColumn(schema);
				colvarBackendRegionalManagerPayScheduleID.ColumnName = "BackendRegionalManagerPayScheduleID";
				colvarBackendRegionalManagerPayScheduleID.DataType = DbType.Int32;
				colvarBackendRegionalManagerPayScheduleID.MaxLength = 0;
				colvarBackendRegionalManagerPayScheduleID.AutoIncrement = false;
				colvarBackendRegionalManagerPayScheduleID.IsNullable = true;
				colvarBackendRegionalManagerPayScheduleID.IsPrimaryKey = false;
				colvarBackendRegionalManagerPayScheduleID.IsForeignKey = true;
				colvarBackendRegionalManagerPayScheduleID.IsReadOnly = false;
				colvarBackendRegionalManagerPayScheduleID.DefaultSetting = @"";
				colvarBackendRegionalManagerPayScheduleID.ForeignKeyTableName = "PR_BackendManagerPaySchedules";
				schema.Columns.Add(colvarBackendRegionalManagerPayScheduleID);

				TableSchema.TableColumn colvarAlternatePayscaleID = new TableSchema.TableColumn(schema);
				colvarAlternatePayscaleID.ColumnName = "AlternatePayscaleID";
				colvarAlternatePayscaleID.DataType = DbType.Int32;
				colvarAlternatePayscaleID.MaxLength = 0;
				colvarAlternatePayscaleID.AutoIncrement = false;
				colvarAlternatePayscaleID.IsNullable = true;
				colvarAlternatePayscaleID.IsPrimaryKey = false;
				colvarAlternatePayscaleID.IsForeignKey = true;
				colvarAlternatePayscaleID.IsReadOnly = false;
				colvarAlternatePayscaleID.DefaultSetting = @"";
				colvarAlternatePayscaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarAlternatePayscaleID);

				TableSchema.TableColumn colvarAlternatePayScheduleID = new TableSchema.TableColumn(schema);
				colvarAlternatePayScheduleID.ColumnName = "AlternatePayScheduleID";
				colvarAlternatePayScheduleID.DataType = DbType.Int32;
				colvarAlternatePayScheduleID.MaxLength = 0;
				colvarAlternatePayScheduleID.AutoIncrement = false;
				colvarAlternatePayScheduleID.IsNullable = true;
				colvarAlternatePayScheduleID.IsPrimaryKey = false;
				colvarAlternatePayScheduleID.IsForeignKey = true;
				colvarAlternatePayScheduleID.IsReadOnly = false;
				colvarAlternatePayScheduleID.DefaultSetting = @"";
				colvarAlternatePayScheduleID.ForeignKeyTableName = "PR_BackendPaySchedules";
				schema.Columns.Add(colvarAlternatePayScheduleID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = true;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarDetailFileID = new TableSchema.TableColumn(schema);
				colvarDetailFileID.ColumnName = "DetailFileID";
				colvarDetailFileID.DataType = DbType.Int32;
				colvarDetailFileID.MaxLength = 0;
				colvarDetailFileID.AutoIncrement = false;
				colvarDetailFileID.IsNullable = true;
				colvarDetailFileID.IsPrimaryKey = false;
				colvarDetailFileID.IsForeignKey = false;
				colvarDetailFileID.IsReadOnly = false;
				colvarDetailFileID.DefaultSetting = @"";
				colvarDetailFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetailFileID);

				TableSchema.TableColumn colvarPreviousBackendID = new TableSchema.TableColumn(schema);
				colvarPreviousBackendID.ColumnName = "PreviousBackendID";
				colvarPreviousBackendID.DataType = DbType.Int32;
				colvarPreviousBackendID.MaxLength = 0;
				colvarPreviousBackendID.AutoIncrement = false;
				colvarPreviousBackendID.IsNullable = true;
				colvarPreviousBackendID.IsPrimaryKey = false;
				colvarPreviousBackendID.IsForeignKey = true;
				colvarPreviousBackendID.IsReadOnly = false;
				colvarPreviousBackendID.DefaultSetting = @"";
				colvarPreviousBackendID.ForeignKeyTableName = "PR_Backends";
				schema.Columns.Add(colvarPreviousBackendID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarBalance = new TableSchema.TableColumn(schema);
				colvarBalance.ColumnName = "Balance";
				colvarBalance.DataType = DbType.Currency;
				colvarBalance.MaxLength = 0;
				colvarBalance.AutoIncrement = false;
				colvarBalance.IsNullable = false;
				colvarBalance.IsPrimaryKey = false;
				colvarBalance.IsForeignKey = false;
				colvarBalance.IsReadOnly = false;
				colvarBalance.DefaultSetting = @"((0))";
				colvarBalance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBalance);

				TableSchema.TableColumn colvarPercentWithheld = new TableSchema.TableColumn(schema);
				colvarPercentWithheld.ColumnName = "PercentWithheld";
				colvarPercentWithheld.DataType = DbType.Int32;
				colvarPercentWithheld.MaxLength = 0;
				colvarPercentWithheld.AutoIncrement = false;
				colvarPercentWithheld.IsNullable = false;
				colvarPercentWithheld.IsPrimaryKey = false;
				colvarPercentWithheld.IsForeignKey = false;
				colvarPercentWithheld.IsReadOnly = false;
				colvarPercentWithheld.DefaultSetting = @"((0))";
				colvarPercentWithheld.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPercentWithheld);

				TableSchema.TableColumn colvarIsVoided = new TableSchema.TableColumn(schema);
				colvarIsVoided.ColumnName = "IsVoided";
				colvarIsVoided.DataType = DbType.Boolean;
				colvarIsVoided.MaxLength = 0;
				colvarIsVoided.AutoIncrement = false;
				colvarIsVoided.IsNullable = false;
				colvarIsVoided.IsPrimaryKey = false;
				colvarIsVoided.IsForeignKey = false;
				colvarIsVoided.IsReadOnly = false;
				colvarIsVoided.DefaultSetting = @"((0))";
				colvarIsVoided.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVoided);

				TableSchema.TableColumn colvarIsDraft = new TableSchema.TableColumn(schema);
				colvarIsDraft.ColumnName = "IsDraft";
				colvarIsDraft.DataType = DbType.Boolean;
				colvarIsDraft.MaxLength = 0;
				colvarIsDraft.AutoIncrement = false;
				colvarIsDraft.IsNullable = false;
				colvarIsDraft.IsPrimaryKey = false;
				colvarIsDraft.IsForeignKey = false;
				colvarIsDraft.IsReadOnly = false;
				colvarIsDraft.DefaultSetting = @"((0))";
				colvarIsDraft.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDraft);

				TableSchema.TableColumn colvarAlernatePayScheduleUsed = new TableSchema.TableColumn(schema);
				colvarAlernatePayScheduleUsed.ColumnName = "AlernatePayScheduleUsed";
				colvarAlernatePayScheduleUsed.DataType = DbType.Boolean;
				colvarAlernatePayScheduleUsed.MaxLength = 0;
				colvarAlernatePayScheduleUsed.AutoIncrement = false;
				colvarAlernatePayScheduleUsed.IsNullable = false;
				colvarAlernatePayScheduleUsed.IsPrimaryKey = false;
				colvarAlernatePayScheduleUsed.IsForeignKey = false;
				colvarAlernatePayScheduleUsed.IsReadOnly = false;
				colvarAlernatePayScheduleUsed.DefaultSetting = @"((0))";
				colvarAlernatePayScheduleUsed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlernatePayScheduleUsed);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"(getdate())";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_Backends",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_Backend LoadFrom(PR_Backend item)
		{
			PR_Backend result = new PR_Backend();
			if (item.BackendID != default(int)) {
				result.LoadByKey(item.BackendID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendID {
			get { return GetColumnValue<int>(Columns.BackendID); }
			set {
				SetColumnValue(Columns.BackendID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendID));
			}
		}
		[DataMember]
		public int BackendPeriodID {
			get { return GetColumnValue<int>(Columns.BackendPeriodID); }
			set {
				SetColumnValue(Columns.BackendPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPeriodID));
			}
		}
		[DataMember]
		public int PayscaleID {
			get { return GetColumnValue<int>(Columns.PayscaleID); }
			set {
				SetColumnValue(Columns.PayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayscaleID));
			}
		}
		[DataMember]
		public int? BackendPayScheduleID {
			get { return GetColumnValue<int?>(Columns.BackendPayScheduleID); }
			set {
				SetColumnValue(Columns.BackendPayScheduleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPayScheduleID));
			}
		}
		[DataMember]
		public int? BackendManagerPayScheduleID {
			get { return GetColumnValue<int?>(Columns.BackendManagerPayScheduleID); }
			set {
				SetColumnValue(Columns.BackendManagerPayScheduleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendManagerPayScheduleID));
			}
		}
		[DataMember]
		public int? BackendRegionalManagerPayScheduleID {
			get { return GetColumnValue<int?>(Columns.BackendRegionalManagerPayScheduleID); }
			set {
				SetColumnValue(Columns.BackendRegionalManagerPayScheduleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendRegionalManagerPayScheduleID));
			}
		}
		[DataMember]
		public int? AlternatePayscaleID {
			get { return GetColumnValue<int?>(Columns.AlternatePayscaleID); }
			set {
				SetColumnValue(Columns.AlternatePayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AlternatePayscaleID));
			}
		}
		[DataMember]
		public int? AlternatePayScheduleID {
			get { return GetColumnValue<int?>(Columns.AlternatePayScheduleID); }
			set {
				SetColumnValue(Columns.AlternatePayScheduleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AlternatePayScheduleID));
			}
		}
		[DataMember]
		public int? TeamLocationID {
			get { return GetColumnValue<int?>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int? DetailFileID {
			get { return GetColumnValue<int?>(Columns.DetailFileID); }
			set {
				SetColumnValue(Columns.DetailFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DetailFileID));
			}
		}
		[DataMember]
		public int? PreviousBackendID {
			get { return GetColumnValue<int?>(Columns.PreviousBackendID); }
			set {
				SetColumnValue(Columns.PreviousBackendID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreviousBackendID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal Balance {
			get { return GetColumnValue<decimal>(Columns.Balance); }
			set {
				SetColumnValue(Columns.Balance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Balance));
			}
		}
		[DataMember]
		public int PercentWithheld {
			get { return GetColumnValue<int>(Columns.PercentWithheld); }
			set {
				SetColumnValue(Columns.PercentWithheld, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PercentWithheld));
			}
		}
		[DataMember]
		public bool IsVoided {
			get { return GetColumnValue<bool>(Columns.IsVoided); }
			set {
				SetColumnValue(Columns.IsVoided, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsVoided));
			}
		}
		[DataMember]
		public bool IsDraft {
			get { return GetColumnValue<bool>(Columns.IsDraft); }
			set {
				SetColumnValue(Columns.IsDraft, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDraft));
			}
		}
		[DataMember]
		public bool AlernatePayScheduleUsed {
			get { return GetColumnValue<bool>(Columns.AlernatePayScheduleUsed); }
			set {
				SetColumnValue(Columns.AlernatePayScheduleUsed, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AlernatePayScheduleUsed));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendManagerPaySchedule _BackendManagerPaySchedule;
		//Relationship: FK_PR_Backends_PR_BackendManagerPaySchedules
		public PR_BackendManagerPaySchedule BackendManagerPaySchedule
		{
			get
			{
				if(_BackendManagerPaySchedule == null) {
					_BackendManagerPaySchedule = PR_BackendManagerPaySchedule.FetchByID(this.BackendManagerPayScheduleID);
				}
				return _BackendManagerPaySchedule;
			}
			set
			{
				SetColumnValue("BackendManagerPayScheduleID", value.BackendManagerPayScheduleID);
				_BackendManagerPaySchedule = value;
			}
		}

		private PR_BackendManagerPaySchedule _BackendRegionalManagerPaySchedule;
		//Relationship: FK_PR_Backends_PR_BackendManagerPaySchedules1
		public PR_BackendManagerPaySchedule BackendRegionalManagerPaySchedule
		{
			get
			{
				if(_BackendRegionalManagerPaySchedule == null) {
					_BackendRegionalManagerPaySchedule = PR_BackendManagerPaySchedule.FetchByID(this.BackendRegionalManagerPayScheduleID);
				}
				return _BackendRegionalManagerPaySchedule;
			}
			set
			{
				SetColumnValue("BackendRegionalManagerPayScheduleID", value.BackendManagerPayScheduleID);
				_BackendRegionalManagerPaySchedule = value;
			}
		}

		private PR_BackendPaySchedule _BackendPaySchedule;
		//Relationship: FK_PR_Backends_PR_BackendPaySchedules
		public PR_BackendPaySchedule BackendPaySchedule
		{
			get
			{
				if(_BackendPaySchedule == null) {
					_BackendPaySchedule = PR_BackendPaySchedule.FetchByID(this.BackendPayScheduleID);
				}
				return _BackendPaySchedule;
			}
			set
			{
				SetColumnValue("BackendPayScheduleID", value.BackendPayScheduleID);
				_BackendPaySchedule = value;
			}
		}

		private PR_BackendPaySchedule _AlternatePaySchedule;
		//Relationship: FK_PR_Backends_PR_BackendPaySchedules1
		public PR_BackendPaySchedule AlternatePaySchedule
		{
			get
			{
				if(_AlternatePaySchedule == null) {
					_AlternatePaySchedule = PR_BackendPaySchedule.FetchByID(this.AlternatePayScheduleID);
				}
				return _AlternatePaySchedule;
			}
			set
			{
				SetColumnValue("AlternatePayScheduleID", value.BackendPayScheduleID);
				_AlternatePaySchedule = value;
			}
		}

		private PR_BackendPeriod _BackendPeriod;
		//Relationship: FK_PR_Backends_PR_BackendPeriods
		public PR_BackendPeriod BackendPeriod
		{
			get
			{
				if(_BackendPeriod == null) {
					_BackendPeriod = PR_BackendPeriod.FetchByID(this.BackendPeriodID);
				}
				return _BackendPeriod;
			}
			set
			{
				SetColumnValue("BackendPeriodID", value.BackendPeriodID);
				_BackendPeriod = value;
			}
		}

		private PR_Backend _PreviousBackend;
		//Relationship: FK_PR_Backends_PR_Backends
		public PR_Backend PreviousBackend
		{
			get
			{
				if(_PreviousBackend == null) {
					_PreviousBackend = PR_Backend.FetchByID(this.PreviousBackendID);
				}
				return _PreviousBackend;
			}
			set
			{
				SetColumnValue("PreviousBackendID", value.BackendID);
				_PreviousBackend = value;
			}
		}

		private RU_Payscale _Payscale;
		//Relationship: FK_PR_Backends_RU_Payscales
		public RU_Payscale Payscale
		{
			get
			{
				if(_Payscale == null) {
					_Payscale = RU_Payscale.FetchByID(this.PayscaleID);
				}
				return _Payscale;
			}
			set
			{
				SetColumnValue("PayscaleID", value.PayscaleID);
				_Payscale = value;
			}
		}

		private RU_Payscale _AlternatePayscale;
		//Relationship: FK_PR_Backends_RU_Payscales1
		public RU_Payscale AlternatePayscale
		{
			get
			{
				if(_AlternatePayscale == null) {
					_AlternatePayscale = RU_Payscale.FetchByID(this.AlternatePayscaleID);
				}
				return _AlternatePayscale;
			}
			set
			{
				SetColumnValue("AlternatePayscaleID", value.PayscaleID);
				_AlternatePayscale = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_PR_Backends_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BackendPeriodIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PayscaleIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BackendPayScheduleIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn BackendManagerPayScheduleIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn BackendRegionalManagerPayScheduleIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AlternatePayscaleIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AlternatePayScheduleIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DetailFileIDColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn PreviousBackendIDColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn BalanceColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn PercentWithheldColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsVoidedColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsDraftColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn AlernatePayScheduleUsedColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[17]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendID = @"BackendID";
			public static readonly string BackendPeriodID = @"BackendPeriodID";
			public static readonly string PayscaleID = @"PayscaleID";
			public static readonly string BackendPayScheduleID = @"BackendPayScheduleID";
			public static readonly string BackendManagerPayScheduleID = @"BackendManagerPayScheduleID";
			public static readonly string BackendRegionalManagerPayScheduleID = @"BackendRegionalManagerPayScheduleID";
			public static readonly string AlternatePayscaleID = @"AlternatePayscaleID";
			public static readonly string AlternatePayScheduleID = @"AlternatePayScheduleID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string DetailFileID = @"DetailFileID";
			public static readonly string PreviousBackendID = @"PreviousBackendID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Balance = @"Balance";
			public static readonly string PercentWithheld = @"PercentWithheld";
			public static readonly string IsVoided = @"IsVoided";
			public static readonly string IsDraft = @"IsDraft";
			public static readonly string AlernatePayScheduleUsed = @"AlernatePayScheduleUsed";
			public static readonly string CreatedByDate = @"CreatedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendAccountMappingCollection _PR_BackendAccountMappingsCol;
		//Relationship: FK_PR_BackendAccountMappings_PR_Backends
		public PR_BackendAccountMappingCollection PR_BackendAccountMappingsCol
		{
			get
			{
				if(_PR_BackendAccountMappingsCol == null) {
					_PR_BackendAccountMappingsCol = new PR_BackendAccountMappingCollection();
					_PR_BackendAccountMappingsCol.LoadAndCloseReader(PR_BackendAccountMapping.Query()
						.WHERE(PR_BackendAccountMapping.Columns.BackendID, BackendID).ExecuteReader());
				}
				return _PR_BackendAccountMappingsCol;
			}
		}

		private PR_BackendCollection _ChildPR_BackendsCol;
		//Relationship: FK_PR_Backends_PR_Backends
		public PR_BackendCollection ChildPR_BackendsCol
		{
			get
			{
				if(_ChildPR_BackendsCol == null) {
					_ChildPR_BackendsCol = new PR_BackendCollection();
					_ChildPR_BackendsCol.LoadAndCloseReader(PR_Backend.Query()
						.WHERE(PR_Backend.Columns.PreviousBackendID, BackendID).ExecuteReader());
				}
				return _ChildPR_BackendsCol;
			}
		}

		private PR_BackendTransactionCollection _PR_BackendTransactionsCol;
		//Relationship: FK_PR_BackendTransactions_PR_Backends
		public PR_BackendTransactionCollection PR_BackendTransactionsCol
		{
			get
			{
				if(_PR_BackendTransactionsCol == null) {
					_PR_BackendTransactionsCol = new PR_BackendTransactionCollection();
					_PR_BackendTransactionsCol.LoadAndCloseReader(PR_BackendTransaction.Query()
						.WHERE(PR_BackendTransaction.Columns.BackendID, BackendID).ExecuteReader());
				}
				return _PR_BackendTransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendTransactionCategory class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendTransactionCategoryCollection : ActiveList<PR_BackendTransactionCategory, PR_BackendTransactionCategoryCollection>
	{
		public static PR_BackendTransactionCategoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendTransactionCategoryCollection result = new PR_BackendTransactionCategoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendTransactionCategory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendTransactionCategories table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendTransactionCategory : ActiveRecord<PR_BackendTransactionCategory>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum BackendTransactionCategoryEnum : int
		{
			[EnumMember()] Earnings = 1,
			[EnumMember()] Deduction = 2,
			[EnumMember()] Miscellaneous = 3,
			[EnumMember()] YearToDatePaid = 4,
			[EnumMember()] OverrideSplit = 5,
		}

		//[DataMember]
		//public BackendTransactionCategoryEnum BackendTransactionCategoryCode
		//{
		//	get { return (BackendTransactionCategoryEnum)BackendTransactionCategoryID; }
		//	set { BackendTransactionCategoryID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendTransactionCategory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendTransactionCategories", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendTransactionCategoryID = new TableSchema.TableColumn(schema);
				colvarBackendTransactionCategoryID.ColumnName = "BackendTransactionCategoryID";
				colvarBackendTransactionCategoryID.DataType = DbType.Int32;
				colvarBackendTransactionCategoryID.MaxLength = 0;
				colvarBackendTransactionCategoryID.AutoIncrement = true;
				colvarBackendTransactionCategoryID.IsNullable = false;
				colvarBackendTransactionCategoryID.IsPrimaryKey = true;
				colvarBackendTransactionCategoryID.IsForeignKey = false;
				colvarBackendTransactionCategoryID.IsReadOnly = false;
				colvarBackendTransactionCategoryID.DefaultSetting = @"";
				colvarBackendTransactionCategoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendTransactionCategoryID);

				TableSchema.TableColumn colvarBackendTransactionCategoryName = new TableSchema.TableColumn(schema);
				colvarBackendTransactionCategoryName.ColumnName = "BackendTransactionCategoryName";
				colvarBackendTransactionCategoryName.DataType = DbType.String;
				colvarBackendTransactionCategoryName.MaxLength = 50;
				colvarBackendTransactionCategoryName.AutoIncrement = false;
				colvarBackendTransactionCategoryName.IsNullable = false;
				colvarBackendTransactionCategoryName.IsPrimaryKey = false;
				colvarBackendTransactionCategoryName.IsForeignKey = false;
				colvarBackendTransactionCategoryName.IsReadOnly = false;
				colvarBackendTransactionCategoryName.DefaultSetting = @"";
				colvarBackendTransactionCategoryName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendTransactionCategoryName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendTransactionCategories",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendTransactionCategory LoadFrom(PR_BackendTransactionCategory item)
		{
			PR_BackendTransactionCategory result = new PR_BackendTransactionCategory();
			if (item.BackendTransactionCategoryID != default(int)) {
				result.LoadByKey(item.BackendTransactionCategoryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendTransactionCategoryID {
			get { return GetColumnValue<int>(Columns.BackendTransactionCategoryID); }
			set {
				SetColumnValue(Columns.BackendTransactionCategoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendTransactionCategoryID));
			}
		}
		[DataMember]
		public string BackendTransactionCategoryName {
			get { return GetColumnValue<string>(Columns.BackendTransactionCategoryName); }
			set {
				SetColumnValue(Columns.BackendTransactionCategoryName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendTransactionCategoryName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return BackendTransactionCategoryName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendTransactionCategoryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BackendTransactionCategoryNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendTransactionCategoryID = @"BackendTransactionCategoryID";
			public static readonly string BackendTransactionCategoryName = @"BackendTransactionCategoryName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendTransactionCategoryID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendTransactionTypeCollection _PR_BackendTransactionTypesCol;
		//Relationship: FK_PR_BackendTransactionTypes_PR_BackendTransactionCategories
		public PR_BackendTransactionTypeCollection PR_BackendTransactionTypesCol
		{
			get
			{
				if(_PR_BackendTransactionTypesCol == null) {
					_PR_BackendTransactionTypesCol = new PR_BackendTransactionTypeCollection();
					_PR_BackendTransactionTypesCol.LoadAndCloseReader(PR_BackendTransactionType.Query()
						.WHERE(PR_BackendTransactionType.Columns.BackendTransactionCategoryID, BackendTransactionCategoryID).ExecuteReader());
				}
				return _PR_BackendTransactionTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendTransaction class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendTransactionCollection : ActiveList<PR_BackendTransaction, PR_BackendTransactionCollection>
	{
		public static PR_BackendTransactionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendTransactionCollection result = new PR_BackendTransactionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendTransaction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendTransactions table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendTransaction : ActiveRecord<PR_BackendTransaction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendTransaction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendTransactions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendTransactionID = new TableSchema.TableColumn(schema);
				colvarBackendTransactionID.ColumnName = "BackendTransactionID";
				colvarBackendTransactionID.DataType = DbType.Int32;
				colvarBackendTransactionID.MaxLength = 0;
				colvarBackendTransactionID.AutoIncrement = true;
				colvarBackendTransactionID.IsNullable = false;
				colvarBackendTransactionID.IsPrimaryKey = true;
				colvarBackendTransactionID.IsForeignKey = false;
				colvarBackendTransactionID.IsReadOnly = false;
				colvarBackendTransactionID.DefaultSetting = @"";
				colvarBackendTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendTransactionID);

				TableSchema.TableColumn colvarBackendTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarBackendTransactionTypeID.ColumnName = "BackendTransactionTypeID";
				colvarBackendTransactionTypeID.DataType = DbType.Int32;
				colvarBackendTransactionTypeID.MaxLength = 0;
				colvarBackendTransactionTypeID.AutoIncrement = false;
				colvarBackendTransactionTypeID.IsNullable = false;
				colvarBackendTransactionTypeID.IsPrimaryKey = false;
				colvarBackendTransactionTypeID.IsForeignKey = true;
				colvarBackendTransactionTypeID.IsReadOnly = false;
				colvarBackendTransactionTypeID.DefaultSetting = @"";
				colvarBackendTransactionTypeID.ForeignKeyTableName = "PR_BackendTransactionTypes";
				schema.Columns.Add(colvarBackendTransactionTypeID);

				TableSchema.TableColumn colvarBackendID = new TableSchema.TableColumn(schema);
				colvarBackendID.ColumnName = "BackendID";
				colvarBackendID.DataType = DbType.Int32;
				colvarBackendID.MaxLength = 0;
				colvarBackendID.AutoIncrement = false;
				colvarBackendID.IsNullable = true;
				colvarBackendID.IsPrimaryKey = false;
				colvarBackendID.IsForeignKey = true;
				colvarBackendID.IsReadOnly = false;
				colvarBackendID.DefaultSetting = @"";
				colvarBackendID.ForeignKeyTableName = "PR_Backends";
				schema.Columns.Add(colvarBackendID);

				TableSchema.TableColumn colvarAccountStateID = new TableSchema.TableColumn(schema);
				colvarAccountStateID.ColumnName = "AccountStateID";
				colvarAccountStateID.DataType = DbType.Int32;
				colvarAccountStateID.MaxLength = 0;
				colvarAccountStateID.AutoIncrement = false;
				colvarAccountStateID.IsNullable = true;
				colvarAccountStateID.IsPrimaryKey = false;
				colvarAccountStateID.IsForeignKey = true;
				colvarAccountStateID.IsReadOnly = false;
				colvarAccountStateID.DefaultSetting = @"";
				colvarAccountStateID.ForeignKeyTableName = "PR_AccountStates";
				schema.Columns.Add(colvarAccountStateID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = true;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);

				TableSchema.TableColumn colvarRate = new TableSchema.TableColumn(schema);
				colvarRate.ColumnName = "Rate";
				colvarRate.DataType = DbType.Currency;
				colvarRate.MaxLength = 0;
				colvarRate.AutoIncrement = false;
				colvarRate.IsNullable = true;
				colvarRate.IsPrimaryKey = false;
				colvarRate.IsForeignKey = false;
				colvarRate.IsReadOnly = false;
				colvarRate.DefaultSetting = @"";
				colvarRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRate);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarIsPending = new TableSchema.TableColumn(schema);
				colvarIsPending.ColumnName = "IsPending";
				colvarIsPending.DataType = DbType.Boolean;
				colvarIsPending.MaxLength = 0;
				colvarIsPending.AutoIncrement = false;
				colvarIsPending.IsNullable = false;
				colvarIsPending.IsPrimaryKey = false;
				colvarIsPending.IsForeignKey = false;
				colvarIsPending.IsReadOnly = false;
				colvarIsPending.DefaultSetting = @"((0))";
				colvarIsPending.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPending);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"(getdate())";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendTransactions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendTransaction LoadFrom(PR_BackendTransaction item)
		{
			PR_BackendTransaction result = new PR_BackendTransaction();
			if (item.BackendTransactionID != default(int)) {
				result.LoadByKey(item.BackendTransactionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendTransactionID {
			get { return GetColumnValue<int>(Columns.BackendTransactionID); }
			set {
				SetColumnValue(Columns.BackendTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendTransactionID));
			}
		}
		[DataMember]
		public int BackendTransactionTypeID {
			get { return GetColumnValue<int>(Columns.BackendTransactionTypeID); }
			set {
				SetColumnValue(Columns.BackendTransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendTransactionTypeID));
			}
		}
		[DataMember]
		public int? BackendID {
			get { return GetColumnValue<int?>(Columns.BackendID); }
			set {
				SetColumnValue(Columns.BackendID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendID));
			}
		}
		[DataMember]
		public int? AccountStateID {
			get { return GetColumnValue<int?>(Columns.AccountStateID); }
			set {
				SetColumnValue(Columns.AccountStateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountStateID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public int? Quantity {
			get { return GetColumnValue<int?>(Columns.Quantity); }
			set {
				SetColumnValue(Columns.Quantity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Quantity));
			}
		}
		[DataMember]
		public decimal? Rate {
			get { return GetColumnValue<decimal?>(Columns.Rate); }
			set {
				SetColumnValue(Columns.Rate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Rate));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}
		[DataMember]
		public bool IsPending {
			get { return GetColumnValue<bool>(Columns.IsPending); }
			set {
				SetColumnValue(Columns.IsPending, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPending));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_AccountState _AccountState;
		//Relationship: FK_PR_BackendTransactions_PR_AccountStates
		public PR_AccountState AccountState
		{
			get
			{
				if(_AccountState == null) {
					_AccountState = PR_AccountState.FetchByID(this.AccountStateID);
				}
				return _AccountState;
			}
			set
			{
				SetColumnValue("AccountStateID", value.AccountStateID);
				_AccountState = value;
			}
		}

		private PR_Backend _Backend;
		//Relationship: FK_PR_BackendTransactions_PR_Backends
		public PR_Backend Backend
		{
			get
			{
				if(_Backend == null) {
					_Backend = PR_Backend.FetchByID(this.BackendID);
				}
				return _Backend;
			}
			set
			{
				SetColumnValue("BackendID", value.BackendID);
				_Backend = value;
			}
		}

		private PR_BackendTransactionType _BackendTransactionType;
		//Relationship: FK_PR_BackendTransactions_PR_BackendTransactionTypes
		public PR_BackendTransactionType BackendTransactionType
		{
			get
			{
				if(_BackendTransactionType == null) {
					_BackendTransactionType = PR_BackendTransactionType.FetchByID(this.BackendTransactionTypeID);
				}
				return _BackendTransactionType;
			}
			set
			{
				SetColumnValue("BackendTransactionTypeID", value.BackendTransactionTypeID);
				_BackendTransactionType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return BackendTransactionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendTransactionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BackendTransactionTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BackendIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountStateIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn QuantityColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn RateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsPendingColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendTransactionID = @"BackendTransactionID";
			public static readonly string BackendTransactionTypeID = @"BackendTransactionTypeID";
			public static readonly string BackendID = @"BackendID";
			public static readonly string AccountStateID = @"AccountStateID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Amount = @"Amount";
			public static readonly string Quantity = @"Quantity";
			public static readonly string Rate = @"Rate";
			public static readonly string Comments = @"Comments";
			public static readonly string IsPending = @"IsPending";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendTransactionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_BackendTransactionType class.
	/// </summary>
	[DataContract]
	public partial class PR_BackendTransactionTypeCollection : ActiveList<PR_BackendTransactionType, PR_BackendTransactionTypeCollection>
	{
		public static PR_BackendTransactionTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BackendTransactionTypeCollection result = new PR_BackendTransactionTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BackendTransactionType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BackendTransactionTypes table.
	/// </summary>
	[DataContract]
	public partial class PR_BackendTransactionType : ActiveRecord<PR_BackendTransactionType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum BackendTransactionTypeEnum : int
		{
			[EnumMember()] Account_Sale_Commission = 1,
			[EnumMember()] Raised_Rmr_Bonus = 2,
			[EnumMember()] Extended_Contract_Bonus = 3,
			[EnumMember()] Waived_Activation_Deduction = 4,
			[EnumMember()] Pass_Credit_Deduction = 5,
			[EnumMember()] Manual_Bill_Deduction = 6,
			[EnumMember()] Missing_Invoice_Fee_Deduction = 7,
			[EnumMember()] Shortened_Contract_Deduction = 8,
			[EnumMember()] Lowered_Rmr_Deduction = 9,
			[EnumMember()] Digital_Account_Deduction = 10,
			[EnumMember()] Saved_Account_Deduction = 11,
			[EnumMember()] Commercial_Account_Deduction = 12,
			[EnumMember()] Point_Bank_Deduction = 13,
			[EnumMember()] Travel_Advance = 14,
			[EnumMember()] Travel_Bonus = 15,
			[EnumMember()] Recruiting_Bonus = 16,
			[EnumMember()] Volume_Bonus = 17,
			[EnumMember()] Signing_Bonus = 18,
			[EnumMember()] Rent_Bonus = 19,
			[EnumMember()] Account_Install_Pay = 20,
			[EnumMember()] Year_To_Date_Paid = 21,
			[EnumMember()] Incentives_Paid = 22,
			[EnumMember()] Misc_Deduction = 23,
			[EnumMember()] Apartment_Damages = 24,
			[EnumMember()] Tool_Charge = 25,
			[EnumMember()] Office_Budget_Overage = 26,
			[EnumMember()] Region_Budget_Overage = 27,
			[EnumMember()] Oa_Overages = 28,
			[EnumMember()] Health_Insurance = 29,
			[EnumMember()] Loan_Payment = 30,
			[EnumMember()] Platinum_Certification_Bonus = 31,
			[EnumMember()] Cell_Phone_Alowance = 32,
			[EnumMember()] Gas_Allowance = 33,
			[EnumMember()] Lost_Inventory = 34,
			[EnumMember()] Tech_Inspection_Deduction = 35,
			[EnumMember()] Tech_Service_Deduction = 36,
			[EnumMember()] Tech_Upgrade = 37,
			[EnumMember()] Office_Override = 38,
			[EnumMember()] Office_Waived_Activation_Deduction = 39,
			[EnumMember()] Office_Lowered_Rmr_Deduction = 40,
			[EnumMember()] Office_Pass_Credit_Deduction = 41,
			[EnumMember()] Manager_Salary = 42,
			[EnumMember()] Retention_Bonus = 43,
			[EnumMember()] First_Backend_Payment = 44,
			[EnumMember()] Backend_Adjustment = 45,
			[EnumMember()] Region_Override = 47,
			[EnumMember()] Regional_Activation_Bonus__Deduction = 48,
			[EnumMember()] National_Manager_Bonus = 49,
			[EnumMember()] Total_Residual_Paid = 50,
			[EnumMember()] Training_Bonus = 52,
			[EnumMember()] Misc_Adjustment = 53,
			[EnumMember()] Staffing_Bonus = 54,
			[EnumMember()] Service_Percentage_Bonus = 55,
			[EnumMember()] Serivce_Tickets_Closed_Bonus = 56,
			[EnumMember()] Inspections_Completed_Bonus = 57,
			[EnumMember()] Inspection_Score_Bonus = 58,
			[EnumMember()] Sameday_Bonus = 60,
			[EnumMember()] Texas_Certification_Bonus = 61,
			[EnumMember()] Office_Override_Split = 62,
			[EnumMember()] Legion_Override = 63,
			[EnumMember()] Apartment_Damanges_Hold = 64,
			[EnumMember()] Preseason_Training_Bonus = 65,
			[EnumMember()] Activations_Collected_Bonus = 66,
			[EnumMember()] Uncollected_Front_End_Deductions = 67,
			[EnumMember()] Backend_Advance = 68,
		}

		//[DataMember]
		//public BackendTransactionTypeEnum BackendTransactionTypeCode
		//{
		//	get { return (BackendTransactionTypeEnum)BackendTransactionTypeID; }
		//	set { BackendTransactionTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BackendTransactionType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BackendTransactionTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBackendTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarBackendTransactionTypeID.ColumnName = "BackendTransactionTypeID";
				colvarBackendTransactionTypeID.DataType = DbType.Int32;
				colvarBackendTransactionTypeID.MaxLength = 0;
				colvarBackendTransactionTypeID.AutoIncrement = true;
				colvarBackendTransactionTypeID.IsNullable = false;
				colvarBackendTransactionTypeID.IsPrimaryKey = true;
				colvarBackendTransactionTypeID.IsForeignKey = false;
				colvarBackendTransactionTypeID.IsReadOnly = false;
				colvarBackendTransactionTypeID.DefaultSetting = @"";
				colvarBackendTransactionTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendTransactionTypeID);

				TableSchema.TableColumn colvarTransactionTypeName = new TableSchema.TableColumn(schema);
				colvarTransactionTypeName.ColumnName = "TransactionTypeName";
				colvarTransactionTypeName.DataType = DbType.String;
				colvarTransactionTypeName.MaxLength = 255;
				colvarTransactionTypeName.AutoIncrement = false;
				colvarTransactionTypeName.IsNullable = false;
				colvarTransactionTypeName.IsPrimaryKey = false;
				colvarTransactionTypeName.IsForeignKey = false;
				colvarTransactionTypeName.IsReadOnly = false;
				colvarTransactionTypeName.DefaultSetting = @"";
				colvarTransactionTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionTypeName);

				TableSchema.TableColumn colvarBackendTransactionCategoryID = new TableSchema.TableColumn(schema);
				colvarBackendTransactionCategoryID.ColumnName = "BackendTransactionCategoryID";
				colvarBackendTransactionCategoryID.DataType = DbType.Int32;
				colvarBackendTransactionCategoryID.MaxLength = 0;
				colvarBackendTransactionCategoryID.AutoIncrement = false;
				colvarBackendTransactionCategoryID.IsNullable = false;
				colvarBackendTransactionCategoryID.IsPrimaryKey = false;
				colvarBackendTransactionCategoryID.IsForeignKey = true;
				colvarBackendTransactionCategoryID.IsReadOnly = false;
				colvarBackendTransactionCategoryID.DefaultSetting = @"";
				colvarBackendTransactionCategoryID.ForeignKeyTableName = "PR_BackendTransactionCategories";
				schema.Columns.Add(colvarBackendTransactionCategoryID);

				TableSchema.TableColumn colvarTransactionCodeID = new TableSchema.TableColumn(schema);
				colvarTransactionCodeID.ColumnName = "TransactionCodeID";
				colvarTransactionCodeID.DataType = DbType.Int32;
				colvarTransactionCodeID.MaxLength = 0;
				colvarTransactionCodeID.AutoIncrement = false;
				colvarTransactionCodeID.IsNullable = true;
				colvarTransactionCodeID.IsPrimaryKey = false;
				colvarTransactionCodeID.IsForeignKey = false;
				colvarTransactionCodeID.IsReadOnly = false;
				colvarTransactionCodeID.DefaultSetting = @"";
				colvarTransactionCodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionCodeID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BackendTransactionTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BackendTransactionType LoadFrom(PR_BackendTransactionType item)
		{
			PR_BackendTransactionType result = new PR_BackendTransactionType();
			if (item.BackendTransactionTypeID != default(int)) {
				result.LoadByKey(item.BackendTransactionTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BackendTransactionTypeID {
			get { return GetColumnValue<int>(Columns.BackendTransactionTypeID); }
			set {
				SetColumnValue(Columns.BackendTransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendTransactionTypeID));
			}
		}
		[DataMember]
		public string TransactionTypeName {
			get { return GetColumnValue<string>(Columns.TransactionTypeName); }
			set {
				SetColumnValue(Columns.TransactionTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionTypeName));
			}
		}
		[DataMember]
		public int BackendTransactionCategoryID {
			get { return GetColumnValue<int>(Columns.BackendTransactionCategoryID); }
			set {
				SetColumnValue(Columns.BackendTransactionCategoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendTransactionCategoryID));
			}
		}
		[DataMember]
		public int? TransactionCodeID {
			get { return GetColumnValue<int?>(Columns.TransactionCodeID); }
			set {
				SetColumnValue(Columns.TransactionCodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionCodeID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendTransactionCategory _BackendTransactionCategory;
		//Relationship: FK_PR_BackendTransactionTypes_PR_BackendTransactionCategories
		public PR_BackendTransactionCategory BackendTransactionCategory
		{
			get
			{
				if(_BackendTransactionCategory == null) {
					_BackendTransactionCategory = PR_BackendTransactionCategory.FetchByID(this.BackendTransactionCategoryID);
				}
				return _BackendTransactionCategory;
			}
			set
			{
				SetColumnValue("BackendTransactionCategoryID", value.BackendTransactionCategoryID);
				_BackendTransactionCategory = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TransactionTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BackendTransactionTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TransactionTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BackendTransactionCategoryIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TransactionCodeIDColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BackendTransactionTypeID = @"BackendTransactionTypeID";
			public static readonly string TransactionTypeName = @"TransactionTypeName";
			public static readonly string BackendTransactionCategoryID = @"BackendTransactionCategoryID";
			public static readonly string TransactionCodeID = @"TransactionCodeID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BackendTransactionTypeID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendExceptionCollection _PR_BackendExceptionsCol;
		//Relationship: FK_PR_BackendExceptions_PR_BackendTransactionTypes
		public PR_BackendExceptionCollection PR_BackendExceptionsCol
		{
			get
			{
				if(_PR_BackendExceptionsCol == null) {
					_PR_BackendExceptionsCol = new PR_BackendExceptionCollection();
					_PR_BackendExceptionsCol.LoadAndCloseReader(PR_BackendException.Query()
						.WHERE(PR_BackendException.Columns.BackendTransactionTypeID, BackendTransactionTypeID).ExecuteReader());
				}
				return _PR_BackendExceptionsCol;
			}
		}

		private PR_BackendTransactionCollection _PR_BackendTransactionsCol;
		//Relationship: FK_PR_BackendTransactions_PR_BackendTransactionTypes
		public PR_BackendTransactionCollection PR_BackendTransactionsCol
		{
			get
			{
				if(_PR_BackendTransactionsCol == null) {
					_PR_BackendTransactionsCol = new PR_BackendTransactionCollection();
					_PR_BackendTransactionsCol.LoadAndCloseReader(PR_BackendTransaction.Query()
						.WHERE(PR_BackendTransaction.Columns.BackendTransactionTypeID, BackendTransactionTypeID).ExecuteReader());
				}
				return _PR_BackendTransactionsCol;
			}
		}

		private PR_MiscBackendTransactionCollection _PR_MiscBackendTransactionsCol;
		//Relationship: FK_PR_MiscBackendTransactions_PR_BackendTransactionTypes
		public PR_MiscBackendTransactionCollection PR_MiscBackendTransactionsCol
		{
			get
			{
				if(_PR_MiscBackendTransactionsCol == null) {
					_PR_MiscBackendTransactionsCol = new PR_MiscBackendTransactionCollection();
					_PR_MiscBackendTransactionsCol.LoadAndCloseReader(PR_MiscBackendTransaction.Query()
						.WHERE(PR_MiscBackendTransaction.Columns.BackendTransactionTypeID, BackendTransactionTypeID).ExecuteReader());
				}
				return _PR_MiscBackendTransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_BarcodesToIgnore class.
	/// </summary>
	[DataContract]
	public partial class PR_BarcodesToIgnoreCollection : ActiveList<PR_BarcodesToIgnore, PR_BarcodesToIgnoreCollection>
	{
		public static PR_BarcodesToIgnoreCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BarcodesToIgnoreCollection result = new PR_BarcodesToIgnoreCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_BarcodesToIgnore item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_BarcodesToIgnore table.
	/// </summary>
	[DataContract]
	public partial class PR_BarcodesToIgnore : ActiveRecord<PR_BarcodesToIgnore>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_BarcodesToIgnore()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_BarcodesToIgnore", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBarcodeID = new TableSchema.TableColumn(schema);
				colvarBarcodeID.ColumnName = "BarcodeID";
				colvarBarcodeID.DataType = DbType.String;
				colvarBarcodeID.MaxLength = 25;
				colvarBarcodeID.AutoIncrement = false;
				colvarBarcodeID.IsNullable = false;
				colvarBarcodeID.IsPrimaryKey = true;
				colvarBarcodeID.IsForeignKey = false;
				colvarBarcodeID.IsReadOnly = false;
				colvarBarcodeID.DefaultSetting = @"";
				colvarBarcodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeID);

				TableSchema.TableColumn colvarIgnoreForDeduction = new TableSchema.TableColumn(schema);
				colvarIgnoreForDeduction.ColumnName = "IgnoreForDeduction";
				colvarIgnoreForDeduction.DataType = DbType.Boolean;
				colvarIgnoreForDeduction.MaxLength = 0;
				colvarIgnoreForDeduction.AutoIncrement = false;
				colvarIgnoreForDeduction.IsNullable = false;
				colvarIgnoreForDeduction.IsPrimaryKey = false;
				colvarIgnoreForDeduction.IsForeignKey = false;
				colvarIgnoreForDeduction.IsReadOnly = false;
				colvarIgnoreForDeduction.DefaultSetting = @"";
				colvarIgnoreForDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIgnoreForDeduction);

				TableSchema.TableColumn colvarIgnoreForReconciliation = new TableSchema.TableColumn(schema);
				colvarIgnoreForReconciliation.ColumnName = "IgnoreForReconciliation";
				colvarIgnoreForReconciliation.DataType = DbType.Boolean;
				colvarIgnoreForReconciliation.MaxLength = 0;
				colvarIgnoreForReconciliation.AutoIncrement = false;
				colvarIgnoreForReconciliation.IsNullable = false;
				colvarIgnoreForReconciliation.IsPrimaryKey = false;
				colvarIgnoreForReconciliation.IsForeignKey = false;
				colvarIgnoreForReconciliation.IsReadOnly = false;
				colvarIgnoreForReconciliation.DefaultSetting = @"";
				colvarIgnoreForReconciliation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIgnoreForReconciliation);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_BarcodesToIgnore",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_BarcodesToIgnore LoadFrom(PR_BarcodesToIgnore item)
		{
			PR_BarcodesToIgnore result = new PR_BarcodesToIgnore();
			if (item.BarcodeID != default(string)) {
				result.LoadByKey(item.BarcodeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string BarcodeID {
			get { return GetColumnValue<string>(Columns.BarcodeID); }
			set {
				SetColumnValue(Columns.BarcodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeID));
			}
		}
		[DataMember]
		public bool IgnoreForDeduction {
			get { return GetColumnValue<bool>(Columns.IgnoreForDeduction); }
			set {
				SetColumnValue(Columns.IgnoreForDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IgnoreForDeduction));
			}
		}
		[DataMember]
		public bool IgnoreForReconciliation {
			get { return GetColumnValue<bool>(Columns.IgnoreForReconciliation); }
			set {
				SetColumnValue(Columns.IgnoreForReconciliation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IgnoreForReconciliation));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return BarcodeID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BarcodeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IgnoreForDeductionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IgnoreForReconciliationColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BarcodeID = @"BarcodeID";
			public static readonly string IgnoreForDeduction = @"IgnoreForDeduction";
			public static readonly string IgnoreForReconciliation = @"IgnoreForReconciliation";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BarcodeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_Batch class.
	/// </summary>
	[DataContract]
	public partial class PR_BatchCollection : ActiveList<PR_Batch, PR_BatchCollection>
	{
		public static PR_BatchCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_BatchCollection result = new PR_BatchCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_Batch item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_Batches table.
	/// </summary>
	[DataContract]
	public partial class PR_Batch : ActiveRecord<PR_Batch>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_Batch()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_Batches", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBatchID = new TableSchema.TableColumn(schema);
				colvarBatchID.ColumnName = "BatchID";
				colvarBatchID.DataType = DbType.Int32;
				colvarBatchID.MaxLength = 0;
				colvarBatchID.AutoIncrement = true;
				colvarBatchID.IsNullable = false;
				colvarBatchID.IsPrimaryKey = true;
				colvarBatchID.IsForeignKey = false;
				colvarBatchID.IsReadOnly = false;
				colvarBatchID.DefaultSetting = @"";
				colvarBatchID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBatchID);

				TableSchema.TableColumn colvarBatchName = new TableSchema.TableColumn(schema);
				colvarBatchName.ColumnName = "BatchName";
				colvarBatchName.DataType = DbType.String;
				colvarBatchName.MaxLength = 50;
				colvarBatchName.AutoIncrement = false;
				colvarBatchName.IsNullable = false;
				colvarBatchName.IsPrimaryKey = false;
				colvarBatchName.IsForeignKey = false;
				colvarBatchName.IsReadOnly = false;
				colvarBatchName.DefaultSetting = @"";
				colvarBatchName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBatchName);

				TableSchema.TableColumn colvarClosedBy = new TableSchema.TableColumn(schema);
				colvarClosedBy.ColumnName = "ClosedBy";
				colvarClosedBy.DataType = DbType.String;
				colvarClosedBy.MaxLength = 50;
				colvarClosedBy.AutoIncrement = false;
				colvarClosedBy.IsNullable = true;
				colvarClosedBy.IsPrimaryKey = false;
				colvarClosedBy.IsForeignKey = false;
				colvarClosedBy.IsReadOnly = false;
				colvarClosedBy.DefaultSetting = @"";
				colvarClosedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClosedBy);

				TableSchema.TableColumn colvarClosedDate = new TableSchema.TableColumn(schema);
				colvarClosedDate.ColumnName = "ClosedDate";
				colvarClosedDate.DataType = DbType.DateTime;
				colvarClosedDate.MaxLength = 0;
				colvarClosedDate.AutoIncrement = false;
				colvarClosedDate.IsNullable = true;
				colvarClosedDate.IsPrimaryKey = false;
				colvarClosedDate.IsForeignKey = false;
				colvarClosedDate.IsReadOnly = false;
				colvarClosedDate.DefaultSetting = @"";
				colvarClosedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClosedDate);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_Batches",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_Batch LoadFrom(PR_Batch item)
		{
			PR_Batch result = new PR_Batch();
			if (item.BatchID != default(int)) {
				result.LoadByKey(item.BatchID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BatchID {
			get { return GetColumnValue<int>(Columns.BatchID); }
			set {
				SetColumnValue(Columns.BatchID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BatchID));
			}
		}
		[DataMember]
		public string BatchName {
			get { return GetColumnValue<string>(Columns.BatchName); }
			set {
				SetColumnValue(Columns.BatchName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BatchName));
			}
		}
		[DataMember]
		public string ClosedBy {
			get { return GetColumnValue<string>(Columns.ClosedBy); }
			set {
				SetColumnValue(Columns.ClosedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ClosedBy));
			}
		}
		[DataMember]
		public DateTime? ClosedDate {
			get { return GetColumnValue<DateTime?>(Columns.ClosedDate); }
			set {
				SetColumnValue(Columns.ClosedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ClosedDate));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return BatchName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BatchIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BatchNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ClosedByColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ClosedDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BatchID = @"BatchID";
			public static readonly string BatchName = @"BatchName";
			public static readonly string ClosedBy = @"ClosedBy";
			public static readonly string ClosedDate = @"ClosedDate";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BatchID; }
		}
		*/

		#region Foreign Collections

		private PR_PaycheckCollection _PR_PaychecksCol;
		//Relationship: FK_PR_Paychecks_PR_Batches
		public PR_PaycheckCollection PR_PaychecksCol
		{
			get
			{
				if(_PR_PaychecksCol == null) {
					_PR_PaychecksCol = new PR_PaycheckCollection();
					_PR_PaychecksCol.LoadAndCloseReader(PR_Paycheck.Query()
						.WHERE(PR_Paycheck.Columns.BatchID, BatchID).ExecuteReader());
				}
				return _PR_PaychecksCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_HistoricalPaycheck class.
	/// </summary>
	[DataContract]
	public partial class PR_HistoricalPaycheckCollection : ActiveList<PR_HistoricalPaycheck, PR_HistoricalPaycheckCollection>
	{
		public static PR_HistoricalPaycheckCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_HistoricalPaycheckCollection result = new PR_HistoricalPaycheckCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_HistoricalPaycheck item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_HistoricalPaychecks table.
	/// </summary>
	[DataContract]
	public partial class PR_HistoricalPaycheck : ActiveRecord<PR_HistoricalPaycheck>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_HistoricalPaycheck()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_HistoricalPaychecks", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPaycheckID = new TableSchema.TableColumn(schema);
				colvarPaycheckID.ColumnName = "PaycheckID";
				colvarPaycheckID.DataType = DbType.Int32;
				colvarPaycheckID.MaxLength = 0;
				colvarPaycheckID.AutoIncrement = true;
				colvarPaycheckID.IsNullable = false;
				colvarPaycheckID.IsPrimaryKey = true;
				colvarPaycheckID.IsForeignKey = false;
				colvarPaycheckID.IsReadOnly = false;
				colvarPaycheckID.DefaultSetting = @"";
				colvarPaycheckID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaycheckID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 20;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarPayPeriodID = new TableSchema.TableColumn(schema);
				colvarPayPeriodID.ColumnName = "PayPeriodID";
				colvarPayPeriodID.DataType = DbType.Int32;
				colvarPayPeriodID.MaxLength = 0;
				colvarPayPeriodID.AutoIncrement = false;
				colvarPayPeriodID.IsNullable = true;
				colvarPayPeriodID.IsPrimaryKey = false;
				colvarPayPeriodID.IsForeignKey = false;
				colvarPayPeriodID.IsReadOnly = false;
				colvarPayPeriodID.DefaultSetting = @"";
				colvarPayPeriodID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayPeriodID);

				TableSchema.TableColumn colvarDetailFileID = new TableSchema.TableColumn(schema);
				colvarDetailFileID.ColumnName = "DetailFileID";
				colvarDetailFileID.DataType = DbType.Int32;
				colvarDetailFileID.MaxLength = 0;
				colvarDetailFileID.AutoIncrement = false;
				colvarDetailFileID.IsNullable = true;
				colvarDetailFileID.IsPrimaryKey = false;
				colvarDetailFileID.IsForeignKey = false;
				colvarDetailFileID.IsReadOnly = false;
				colvarDetailFileID.DefaultSetting = @"";
				colvarDetailFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetailFileID);

				TableSchema.TableColumn colvarGPCheckNumber = new TableSchema.TableColumn(schema);
				colvarGPCheckNumber.ColumnName = "GPCheckNumber";
				colvarGPCheckNumber.DataType = DbType.String;
				colvarGPCheckNumber.MaxLength = 50;
				colvarGPCheckNumber.AutoIncrement = false;
				colvarGPCheckNumber.IsNullable = true;
				colvarGPCheckNumber.IsPrimaryKey = false;
				colvarGPCheckNumber.IsForeignKey = false;
				colvarGPCheckNumber.IsReadOnly = false;
				colvarGPCheckNumber.DefaultSetting = @"";
				colvarGPCheckNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPCheckNumber);

				TableSchema.TableColumn colvarBalance = new TableSchema.TableColumn(schema);
				colvarBalance.ColumnName = "Balance";
				colvarBalance.DataType = DbType.Currency;
				colvarBalance.MaxLength = 0;
				colvarBalance.AutoIncrement = false;
				colvarBalance.IsNullable = false;
				colvarBalance.IsPrimaryKey = false;
				colvarBalance.IsForeignKey = false;
				colvarBalance.IsReadOnly = false;
				colvarBalance.DefaultSetting = @"";
				colvarBalance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBalance);

				TableSchema.TableColumn colvarIsVoided = new TableSchema.TableColumn(schema);
				colvarIsVoided.ColumnName = "IsVoided";
				colvarIsVoided.DataType = DbType.Boolean;
				colvarIsVoided.MaxLength = 0;
				colvarIsVoided.AutoIncrement = false;
				colvarIsVoided.IsNullable = false;
				colvarIsVoided.IsPrimaryKey = false;
				colvarIsVoided.IsForeignKey = false;
				colvarIsVoided.IsReadOnly = false;
				colvarIsVoided.DefaultSetting = @"((0))";
				colvarIsVoided.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVoided);

				TableSchema.TableColumn colvarIsMismatched = new TableSchema.TableColumn(schema);
				colvarIsMismatched.ColumnName = "IsMismatched";
				colvarIsMismatched.DataType = DbType.Boolean;
				colvarIsMismatched.MaxLength = 0;
				colvarIsMismatched.AutoIncrement = false;
				colvarIsMismatched.IsNullable = false;
				colvarIsMismatched.IsPrimaryKey = false;
				colvarIsMismatched.IsForeignKey = false;
				colvarIsMismatched.IsReadOnly = false;
				colvarIsMismatched.DefaultSetting = @"";
				colvarIsMismatched.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMismatched);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_HistoricalPaychecks",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_HistoricalPaycheck LoadFrom(PR_HistoricalPaycheck item)
		{
			PR_HistoricalPaycheck result = new PR_HistoricalPaycheck();
			if (item.PaycheckID != default(int)) {
				result.LoadByKey(item.PaycheckID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PaycheckID {
			get { return GetColumnValue<int>(Columns.PaycheckID); }
			set {
				SetColumnValue(Columns.PaycheckID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaycheckID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public int? PayPeriodID {
			get { return GetColumnValue<int?>(Columns.PayPeriodID); }
			set {
				SetColumnValue(Columns.PayPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayPeriodID));
			}
		}
		[DataMember]
		public int? DetailFileID {
			get { return GetColumnValue<int?>(Columns.DetailFileID); }
			set {
				SetColumnValue(Columns.DetailFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DetailFileID));
			}
		}
		[DataMember]
		public string GPCheckNumber {
			get { return GetColumnValue<string>(Columns.GPCheckNumber); }
			set {
				SetColumnValue(Columns.GPCheckNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPCheckNumber));
			}
		}
		[DataMember]
		public decimal Balance {
			get { return GetColumnValue<decimal>(Columns.Balance); }
			set {
				SetColumnValue(Columns.Balance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Balance));
			}
		}
		[DataMember]
		public bool IsVoided {
			get { return GetColumnValue<bool>(Columns.IsVoided); }
			set {
				SetColumnValue(Columns.IsVoided, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsVoided));
			}
		}
		[DataMember]
		public bool IsMismatched {
			get { return GetColumnValue<bool>(Columns.IsMismatched); }
			set {
				SetColumnValue(Columns.IsMismatched, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsMismatched));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return GPEmployeeID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PaycheckIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PayPeriodIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DetailFileIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPCheckNumberColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn BalanceColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsVoidedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsMismatchedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PaycheckID = @"PaycheckID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string PayPeriodID = @"PayPeriodID";
			public static readonly string DetailFileID = @"DetailFileID";
			public static readonly string GPCheckNumber = @"GPCheckNumber";
			public static readonly string Balance = @"Balance";
			public static readonly string IsVoided = @"IsVoided";
			public static readonly string IsMismatched = @"IsMismatched";
			public static readonly string CreatedByDate = @"CreatedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PaycheckID; }
		}
		*/

		#region Foreign Collections

		private PR_HistoricalTransactionCollection _PR_HistoricalTransactionsCol;
		//Relationship: FK_PR_HistoricalTransactions_PR_HistoricalPaychecks
		public PR_HistoricalTransactionCollection PR_HistoricalTransactionsCol
		{
			get
			{
				if(_PR_HistoricalTransactionsCol == null) {
					_PR_HistoricalTransactionsCol = new PR_HistoricalTransactionCollection();
					_PR_HistoricalTransactionsCol.LoadAndCloseReader(PR_HistoricalTransaction.Query()
						.WHERE(PR_HistoricalTransaction.Columns.PaycheckID, PaycheckID).ExecuteReader());
				}
				return _PR_HistoricalTransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_HistoricalTransaction class.
	/// </summary>
	[DataContract]
	public partial class PR_HistoricalTransactionCollection : ActiveList<PR_HistoricalTransaction, PR_HistoricalTransactionCollection>
	{
		public static PR_HistoricalTransactionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_HistoricalTransactionCollection result = new PR_HistoricalTransactionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_HistoricalTransaction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_HistoricalTransactions table.
	/// </summary>
	[DataContract]
	public partial class PR_HistoricalTransaction : ActiveRecord<PR_HistoricalTransaction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_HistoricalTransaction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_HistoricalTransactions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTransactionID = new TableSchema.TableColumn(schema);
				colvarTransactionID.ColumnName = "TransactionID";
				colvarTransactionID.DataType = DbType.Int64;
				colvarTransactionID.MaxLength = 0;
				colvarTransactionID.AutoIncrement = true;
				colvarTransactionID.IsNullable = false;
				colvarTransactionID.IsPrimaryKey = true;
				colvarTransactionID.IsForeignKey = false;
				colvarTransactionID.IsReadOnly = false;
				colvarTransactionID.DefaultSetting = @"";
				colvarTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionID);

				TableSchema.TableColumn colvarTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarTransactionTypeID.ColumnName = "TransactionTypeID";
				colvarTransactionTypeID.DataType = DbType.Int32;
				colvarTransactionTypeID.MaxLength = 0;
				colvarTransactionTypeID.AutoIncrement = false;
				colvarTransactionTypeID.IsNullable = false;
				colvarTransactionTypeID.IsPrimaryKey = false;
				colvarTransactionTypeID.IsForeignKey = false;
				colvarTransactionTypeID.IsReadOnly = false;
				colvarTransactionTypeID.DefaultSetting = @"";
				colvarTransactionTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionTypeID);

				TableSchema.TableColumn colvarTargetPayPeriodID = new TableSchema.TableColumn(schema);
				colvarTargetPayPeriodID.ColumnName = "TargetPayPeriodID";
				colvarTargetPayPeriodID.DataType = DbType.Int32;
				colvarTargetPayPeriodID.MaxLength = 0;
				colvarTargetPayPeriodID.AutoIncrement = false;
				colvarTargetPayPeriodID.IsNullable = true;
				colvarTargetPayPeriodID.IsPrimaryKey = false;
				colvarTargetPayPeriodID.IsForeignKey = false;
				colvarTargetPayPeriodID.IsReadOnly = false;
				colvarTargetPayPeriodID.DefaultSetting = @"";
				colvarTargetPayPeriodID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTargetPayPeriodID);

				TableSchema.TableColumn colvarPaycheckID = new TableSchema.TableColumn(schema);
				colvarPaycheckID.ColumnName = "PaycheckID";
				colvarPaycheckID.DataType = DbType.Int32;
				colvarPaycheckID.MaxLength = 0;
				colvarPaycheckID.AutoIncrement = false;
				colvarPaycheckID.IsNullable = true;
				colvarPaycheckID.IsPrimaryKey = false;
				colvarPaycheckID.IsForeignKey = true;
				colvarPaycheckID.IsReadOnly = false;
				colvarPaycheckID.DefaultSetting = @"";
				colvarPaycheckID.ForeignKeyTableName = "PR_HistoricalPaychecks";
				schema.Columns.Add(colvarPaycheckID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = true;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarServiceTicketID = new TableSchema.TableColumn(schema);
				colvarServiceTicketID.ColumnName = "ServiceTicketID";
				colvarServiceTicketID.DataType = DbType.Int32;
				colvarServiceTicketID.MaxLength = 0;
				colvarServiceTicketID.AutoIncrement = false;
				colvarServiceTicketID.IsNullable = true;
				colvarServiceTicketID.IsPrimaryKey = false;
				colvarServiceTicketID.IsForeignKey = false;
				colvarServiceTicketID.IsReadOnly = false;
				colvarServiceTicketID.DefaultSetting = @"";
				colvarServiceTicketID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceTicketID);

				TableSchema.TableColumn colvarBarcodeID = new TableSchema.TableColumn(schema);
				colvarBarcodeID.ColumnName = "BarcodeID";
				colvarBarcodeID.DataType = DbType.Int32;
				colvarBarcodeID.MaxLength = 0;
				colvarBarcodeID.AutoIncrement = false;
				colvarBarcodeID.IsNullable = true;
				colvarBarcodeID.IsPrimaryKey = false;
				colvarBarcodeID.IsForeignKey = false;
				colvarBarcodeID.IsReadOnly = false;
				colvarBarcodeID.DefaultSetting = @"";
				colvarBarcodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeID);

				TableSchema.TableColumn colvarAutomaticTransactionID = new TableSchema.TableColumn(schema);
				colvarAutomaticTransactionID.ColumnName = "AutomaticTransactionID";
				colvarAutomaticTransactionID.DataType = DbType.Int32;
				colvarAutomaticTransactionID.MaxLength = 0;
				colvarAutomaticTransactionID.AutoIncrement = false;
				colvarAutomaticTransactionID.IsNullable = true;
				colvarAutomaticTransactionID.IsPrimaryKey = false;
				colvarAutomaticTransactionID.IsForeignKey = false;
				colvarAutomaticTransactionID.IsReadOnly = false;
				colvarAutomaticTransactionID.DefaultSetting = @"";
				colvarAutomaticTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAutomaticTransactionID);

				TableSchema.TableColumn colvarCalculationID = new TableSchema.TableColumn(schema);
				colvarCalculationID.ColumnName = "CalculationID";
				colvarCalculationID.DataType = DbType.Int64;
				colvarCalculationID.MaxLength = 0;
				colvarCalculationID.AutoIncrement = false;
				colvarCalculationID.IsNullable = true;
				colvarCalculationID.IsPrimaryKey = false;
				colvarCalculationID.IsForeignKey = false;
				colvarCalculationID.IsReadOnly = false;
				colvarCalculationID.DefaultSetting = @"";
				colvarCalculationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCalculationID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 25;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_HistoricalTransactions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_HistoricalTransaction LoadFrom(PR_HistoricalTransaction item)
		{
			PR_HistoricalTransaction result = new PR_HistoricalTransaction();
			if (item.TransactionID != default(long)) {
				result.LoadByKey(item.TransactionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long TransactionID {
			get { return GetColumnValue<long>(Columns.TransactionID); }
			set {
				SetColumnValue(Columns.TransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionID));
			}
		}
		[DataMember]
		public int TransactionTypeID {
			get { return GetColumnValue<int>(Columns.TransactionTypeID); }
			set {
				SetColumnValue(Columns.TransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionTypeID));
			}
		}
		[DataMember]
		public int? TargetPayPeriodID {
			get { return GetColumnValue<int?>(Columns.TargetPayPeriodID); }
			set {
				SetColumnValue(Columns.TargetPayPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TargetPayPeriodID));
			}
		}
		[DataMember]
		public int? PaycheckID {
			get { return GetColumnValue<int?>(Columns.PaycheckID); }
			set {
				SetColumnValue(Columns.PaycheckID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaycheckID));
			}
		}
		[DataMember]
		public int? AccountID {
			get { return GetColumnValue<int?>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public int? ServiceTicketID {
			get { return GetColumnValue<int?>(Columns.ServiceTicketID); }
			set {
				SetColumnValue(Columns.ServiceTicketID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServiceTicketID));
			}
		}
		[DataMember]
		public int? BarcodeID {
			get { return GetColumnValue<int?>(Columns.BarcodeID); }
			set {
				SetColumnValue(Columns.BarcodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeID));
			}
		}
		[DataMember]
		public int? AutomaticTransactionID {
			get { return GetColumnValue<int?>(Columns.AutomaticTransactionID); }
			set {
				SetColumnValue(Columns.AutomaticTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AutomaticTransactionID));
			}
		}
		[DataMember]
		public long? CalculationID {
			get { return GetColumnValue<long?>(Columns.CalculationID); }
			set {
				SetColumnValue(Columns.CalculationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CalculationID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_HistoricalPaycheck _Paycheck;
		//Relationship: FK_PR_HistoricalTransactions_PR_HistoricalPaychecks
		public PR_HistoricalPaycheck Paycheck
		{
			get
			{
				if(_Paycheck == null) {
					_Paycheck = PR_HistoricalPaycheck.FetchByID(this.PaycheckID);
				}
				return _Paycheck;
			}
			set
			{
				SetColumnValue("PaycheckID", value.PaycheckID);
				_Paycheck = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TransactionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TransactionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TransactionTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TargetPayPeriodIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PaycheckIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ServiceTicketIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn BarcodeIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AutomaticTransactionIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CalculationIDColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[14]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TransactionID = @"TransactionID";
			public static readonly string TransactionTypeID = @"TransactionTypeID";
			public static readonly string TargetPayPeriodID = @"TargetPayPeriodID";
			public static readonly string PaycheckID = @"PaycheckID";
			public static readonly string AccountID = @"AccountID";
			public static readonly string ServiceTicketID = @"ServiceTicketID";
			public static readonly string BarcodeID = @"BarcodeID";
			public static readonly string AutomaticTransactionID = @"AutomaticTransactionID";
			public static readonly string CalculationID = @"CalculationID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Comments = @"Comments";
			public static readonly string Amount = @"Amount";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TransactionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_LeadTechBackend class.
	/// </summary>
	[DataContract]
	public partial class PR_LeadTechBackendCollection : ActiveList<PR_LeadTechBackend, PR_LeadTechBackendCollection>
	{
		public static PR_LeadTechBackendCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_LeadTechBackendCollection result = new PR_LeadTechBackendCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_LeadTechBackend item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_LeadTechBackends table.
	/// </summary>
	[DataContract]
	public partial class PR_LeadTechBackend : ActiveRecord<PR_LeadTechBackend>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_LeadTechBackend()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_LeadTechBackends", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLeadTechBackendID = new TableSchema.TableColumn(schema);
				colvarLeadTechBackendID.ColumnName = "LeadTechBackendID";
				colvarLeadTechBackendID.DataType = DbType.Int32;
				colvarLeadTechBackendID.MaxLength = 0;
				colvarLeadTechBackendID.AutoIncrement = true;
				colvarLeadTechBackendID.IsNullable = false;
				colvarLeadTechBackendID.IsPrimaryKey = true;
				colvarLeadTechBackendID.IsForeignKey = false;
				colvarLeadTechBackendID.IsReadOnly = false;
				colvarLeadTechBackendID.DefaultSetting = @"";
				colvarLeadTechBackendID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadTechBackendID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarPayScaleID = new TableSchema.TableColumn(schema);
				colvarPayScaleID.ColumnName = "PayScaleID";
				colvarPayScaleID.DataType = DbType.Int32;
				colvarPayScaleID.MaxLength = 0;
				colvarPayScaleID.AutoIncrement = false;
				colvarPayScaleID.IsNullable = false;
				colvarPayScaleID.IsPrimaryKey = false;
				colvarPayScaleID.IsForeignKey = true;
				colvarPayScaleID.IsReadOnly = false;
				colvarPayScaleID.DefaultSetting = @"";
				colvarPayScaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayScaleID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarBackendPayscaleID = new TableSchema.TableColumn(schema);
				colvarBackendPayscaleID.ColumnName = "BackendPayscaleID";
				colvarBackendPayscaleID.DataType = DbType.Int32;
				colvarBackendPayscaleID.MaxLength = 0;
				colvarBackendPayscaleID.AutoIncrement = false;
				colvarBackendPayscaleID.IsNullable = true;
				colvarBackendPayscaleID.IsPrimaryKey = false;
				colvarBackendPayscaleID.IsForeignKey = true;
				colvarBackendPayscaleID.IsReadOnly = false;
				colvarBackendPayscaleID.DefaultSetting = @"";
				colvarBackendPayscaleID.ForeignKeyTableName = "PR_BackendPayscales";
				schema.Columns.Add(colvarBackendPayscaleID);

				TableSchema.TableColumn colvarDetailFileID = new TableSchema.TableColumn(schema);
				colvarDetailFileID.ColumnName = "DetailFileID";
				colvarDetailFileID.DataType = DbType.Int32;
				colvarDetailFileID.MaxLength = 0;
				colvarDetailFileID.AutoIncrement = false;
				colvarDetailFileID.IsNullable = true;
				colvarDetailFileID.IsPrimaryKey = false;
				colvarDetailFileID.IsForeignKey = false;
				colvarDetailFileID.IsReadOnly = false;
				colvarDetailFileID.DefaultSetting = @"";
				colvarDetailFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetailFileID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarNWeeksWorked = new TableSchema.TableColumn(schema);
				colvarNWeeksWorked.ColumnName = "NWeeksWorked";
				colvarNWeeksWorked.DataType = DbType.Int32;
				colvarNWeeksWorked.MaxLength = 0;
				colvarNWeeksWorked.AutoIncrement = false;
				colvarNWeeksWorked.IsNullable = false;
				colvarNWeeksWorked.IsPrimaryKey = false;
				colvarNWeeksWorked.IsForeignKey = false;
				colvarNWeeksWorked.IsReadOnly = false;
				colvarNWeeksWorked.DefaultSetting = @"((0))";
				colvarNWeeksWorked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNWeeksWorked);

				TableSchema.TableColumn colvarNPersonalInstalls = new TableSchema.TableColumn(schema);
				colvarNPersonalInstalls.ColumnName = "NPersonalInstalls";
				colvarNPersonalInstalls.DataType = DbType.Int32;
				colvarNPersonalInstalls.MaxLength = 0;
				colvarNPersonalInstalls.AutoIncrement = false;
				colvarNPersonalInstalls.IsNullable = false;
				colvarNPersonalInstalls.IsPrimaryKey = false;
				colvarNPersonalInstalls.IsForeignKey = false;
				colvarNPersonalInstalls.IsReadOnly = false;
				colvarNPersonalInstalls.DefaultSetting = @"((0))";
				colvarNPersonalInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPersonalInstalls);

				TableSchema.TableColumn colvarAccountPayRate = new TableSchema.TableColumn(schema);
				colvarAccountPayRate.ColumnName = "AccountPayRate";
				colvarAccountPayRate.DataType = DbType.Currency;
				colvarAccountPayRate.MaxLength = 0;
				colvarAccountPayRate.AutoIncrement = false;
				colvarAccountPayRate.IsNullable = false;
				colvarAccountPayRate.IsPrimaryKey = false;
				colvarAccountPayRate.IsForeignKey = false;
				colvarAccountPayRate.IsReadOnly = false;
				colvarAccountPayRate.DefaultSetting = @"((0))";
				colvarAccountPayRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountPayRate);

				TableSchema.TableColumn colvarPersonalInstallPay = new TableSchema.TableColumn(schema);
				colvarPersonalInstallPay.ColumnName = "PersonalInstallPay";
				colvarPersonalInstallPay.DataType = DbType.Currency;
				colvarPersonalInstallPay.MaxLength = 0;
				colvarPersonalInstallPay.AutoIncrement = false;
				colvarPersonalInstallPay.IsNullable = false;
				colvarPersonalInstallPay.IsPrimaryKey = false;
				colvarPersonalInstallPay.IsForeignKey = false;
				colvarPersonalInstallPay.IsReadOnly = false;
				colvarPersonalInstallPay.DefaultSetting = @"((0))";
				colvarPersonalInstallPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPersonalInstallPay);

				TableSchema.TableColumn colvarServiceBonus = new TableSchema.TableColumn(schema);
				colvarServiceBonus.ColumnName = "ServiceBonus";
				colvarServiceBonus.DataType = DbType.Currency;
				colvarServiceBonus.MaxLength = 0;
				colvarServiceBonus.AutoIncrement = false;
				colvarServiceBonus.IsNullable = false;
				colvarServiceBonus.IsPrimaryKey = false;
				colvarServiceBonus.IsForeignKey = false;
				colvarServiceBonus.IsReadOnly = false;
				colvarServiceBonus.DefaultSetting = @"((0))";
				colvarServiceBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceBonus);

				TableSchema.TableColumn colvarPersonalInspectionBonus = new TableSchema.TableColumn(schema);
				colvarPersonalInspectionBonus.ColumnName = "PersonalInspectionBonus";
				colvarPersonalInspectionBonus.DataType = DbType.Currency;
				colvarPersonalInspectionBonus.MaxLength = 0;
				colvarPersonalInspectionBonus.AutoIncrement = false;
				colvarPersonalInspectionBonus.IsNullable = false;
				colvarPersonalInspectionBonus.IsPrimaryKey = false;
				colvarPersonalInspectionBonus.IsForeignKey = false;
				colvarPersonalInspectionBonus.IsReadOnly = false;
				colvarPersonalInspectionBonus.DefaultSetting = @"((0))";
				colvarPersonalInspectionBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPersonalInspectionBonus);

				TableSchema.TableColumn colvarCompletedInspectionsBonus = new TableSchema.TableColumn(schema);
				colvarCompletedInspectionsBonus.ColumnName = "CompletedInspectionsBonus";
				colvarCompletedInspectionsBonus.DataType = DbType.Currency;
				colvarCompletedInspectionsBonus.MaxLength = 0;
				colvarCompletedInspectionsBonus.AutoIncrement = false;
				colvarCompletedInspectionsBonus.IsNullable = false;
				colvarCompletedInspectionsBonus.IsPrimaryKey = false;
				colvarCompletedInspectionsBonus.IsForeignKey = false;
				colvarCompletedInspectionsBonus.IsReadOnly = false;
				colvarCompletedInspectionsBonus.DefaultSetting = @"((0))";
				colvarCompletedInspectionsBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompletedInspectionsBonus);

				TableSchema.TableColumn colvarCorporateInspectionsBonus = new TableSchema.TableColumn(schema);
				colvarCorporateInspectionsBonus.ColumnName = "CorporateInspectionsBonus";
				colvarCorporateInspectionsBonus.DataType = DbType.Currency;
				colvarCorporateInspectionsBonus.MaxLength = 0;
				colvarCorporateInspectionsBonus.AutoIncrement = false;
				colvarCorporateInspectionsBonus.IsNullable = false;
				colvarCorporateInspectionsBonus.IsPrimaryKey = false;
				colvarCorporateInspectionsBonus.IsForeignKey = false;
				colvarCorporateInspectionsBonus.IsReadOnly = false;
				colvarCorporateInspectionsBonus.DefaultSetting = @"((0))";
				colvarCorporateInspectionsBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorporateInspectionsBonus);

				TableSchema.TableColumn colvarCorrelationBonus = new TableSchema.TableColumn(schema);
				colvarCorrelationBonus.ColumnName = "CorrelationBonus";
				colvarCorrelationBonus.DataType = DbType.Currency;
				colvarCorrelationBonus.MaxLength = 0;
				colvarCorrelationBonus.AutoIncrement = false;
				colvarCorrelationBonus.IsNullable = false;
				colvarCorrelationBonus.IsPrimaryKey = false;
				colvarCorrelationBonus.IsForeignKey = false;
				colvarCorrelationBonus.IsReadOnly = false;
				colvarCorrelationBonus.DefaultSetting = @"((0))";
				colvarCorrelationBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorrelationBonus);

				TableSchema.TableColumn colvarTrainingBonus = new TableSchema.TableColumn(schema);
				colvarTrainingBonus.ColumnName = "TrainingBonus";
				colvarTrainingBonus.DataType = DbType.Currency;
				colvarTrainingBonus.MaxLength = 0;
				colvarTrainingBonus.AutoIncrement = false;
				colvarTrainingBonus.IsNullable = false;
				colvarTrainingBonus.IsPrimaryKey = false;
				colvarTrainingBonus.IsForeignKey = false;
				colvarTrainingBonus.IsReadOnly = false;
				colvarTrainingBonus.DefaultSetting = @"((0))";
				colvarTrainingBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrainingBonus);

				TableSchema.TableColumn colvarSamedayBonus = new TableSchema.TableColumn(schema);
				colvarSamedayBonus.ColumnName = "SamedayBonus";
				colvarSamedayBonus.DataType = DbType.Currency;
				colvarSamedayBonus.MaxLength = 0;
				colvarSamedayBonus.AutoIncrement = false;
				colvarSamedayBonus.IsNullable = false;
				colvarSamedayBonus.IsPrimaryKey = false;
				colvarSamedayBonus.IsForeignKey = false;
				colvarSamedayBonus.IsReadOnly = false;
				colvarSamedayBonus.DefaultSetting = @"((0))";
				colvarSamedayBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSamedayBonus);

				TableSchema.TableColumn colvarRecruitingBonus = new TableSchema.TableColumn(schema);
				colvarRecruitingBonus.ColumnName = "RecruitingBonus";
				colvarRecruitingBonus.DataType = DbType.Currency;
				colvarRecruitingBonus.MaxLength = 0;
				colvarRecruitingBonus.AutoIncrement = false;
				colvarRecruitingBonus.IsNullable = false;
				colvarRecruitingBonus.IsPrimaryKey = false;
				colvarRecruitingBonus.IsForeignKey = false;
				colvarRecruitingBonus.IsReadOnly = false;
				colvarRecruitingBonus.DefaultSetting = @"((0))";
				colvarRecruitingBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitingBonus);

				TableSchema.TableColumn colvarPreSeasonSalaryPaid = new TableSchema.TableColumn(schema);
				colvarPreSeasonSalaryPaid.ColumnName = "PreSeasonSalaryPaid";
				colvarPreSeasonSalaryPaid.DataType = DbType.Currency;
				colvarPreSeasonSalaryPaid.MaxLength = 0;
				colvarPreSeasonSalaryPaid.AutoIncrement = false;
				colvarPreSeasonSalaryPaid.IsNullable = false;
				colvarPreSeasonSalaryPaid.IsPrimaryKey = false;
				colvarPreSeasonSalaryPaid.IsForeignKey = false;
				colvarPreSeasonSalaryPaid.IsReadOnly = false;
				colvarPreSeasonSalaryPaid.DefaultSetting = @"((0))";
				colvarPreSeasonSalaryPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreSeasonSalaryPaid);

				TableSchema.TableColumn colvarOtherSalaryPaid = new TableSchema.TableColumn(schema);
				colvarOtherSalaryPaid.ColumnName = "OtherSalaryPaid";
				colvarOtherSalaryPaid.DataType = DbType.Currency;
				colvarOtherSalaryPaid.MaxLength = 0;
				colvarOtherSalaryPaid.AutoIncrement = false;
				colvarOtherSalaryPaid.IsNullable = false;
				colvarOtherSalaryPaid.IsPrimaryKey = false;
				colvarOtherSalaryPaid.IsForeignKey = false;
				colvarOtherSalaryPaid.IsReadOnly = false;
				colvarOtherSalaryPaid.DefaultSetting = @"((0))";
				colvarOtherSalaryPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOtherSalaryPaid);

				TableSchema.TableColumn colvarStaffingBonus = new TableSchema.TableColumn(schema);
				colvarStaffingBonus.ColumnName = "StaffingBonus";
				colvarStaffingBonus.DataType = DbType.Currency;
				colvarStaffingBonus.MaxLength = 0;
				colvarStaffingBonus.AutoIncrement = false;
				colvarStaffingBonus.IsNullable = false;
				colvarStaffingBonus.IsPrimaryKey = false;
				colvarStaffingBonus.IsForeignKey = false;
				colvarStaffingBonus.IsReadOnly = false;
				colvarStaffingBonus.DefaultSetting = @"((0))";
				colvarStaffingBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStaffingBonus);

				TableSchema.TableColumn colvarSigningBonus = new TableSchema.TableColumn(schema);
				colvarSigningBonus.ColumnName = "SigningBonus";
				colvarSigningBonus.DataType = DbType.Currency;
				colvarSigningBonus.MaxLength = 0;
				colvarSigningBonus.AutoIncrement = false;
				colvarSigningBonus.IsNullable = false;
				colvarSigningBonus.IsPrimaryKey = false;
				colvarSigningBonus.IsForeignKey = false;
				colvarSigningBonus.IsReadOnly = false;
				colvarSigningBonus.DefaultSetting = @"((0))";
				colvarSigningBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSigningBonus);

				TableSchema.TableColumn colvarSigningBonusPaid = new TableSchema.TableColumn(schema);
				colvarSigningBonusPaid.ColumnName = "SigningBonusPaid";
				colvarSigningBonusPaid.DataType = DbType.Currency;
				colvarSigningBonusPaid.MaxLength = 0;
				colvarSigningBonusPaid.AutoIncrement = false;
				colvarSigningBonusPaid.IsNullable = false;
				colvarSigningBonusPaid.IsPrimaryKey = false;
				colvarSigningBonusPaid.IsForeignKey = false;
				colvarSigningBonusPaid.IsReadOnly = false;
				colvarSigningBonusPaid.DefaultSetting = @"((0))";
				colvarSigningBonusPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSigningBonusPaid);

				TableSchema.TableColumn colvarNUpgradePoints = new TableSchema.TableColumn(schema);
				colvarNUpgradePoints.ColumnName = "NUpgradePoints";
				colvarNUpgradePoints.DataType = DbType.Double;
				colvarNUpgradePoints.MaxLength = 0;
				colvarNUpgradePoints.AutoIncrement = false;
				colvarNUpgradePoints.IsNullable = false;
				colvarNUpgradePoints.IsPrimaryKey = false;
				colvarNUpgradePoints.IsForeignKey = false;
				colvarNUpgradePoints.IsReadOnly = false;
				colvarNUpgradePoints.DefaultSetting = @"((0))";
				colvarNUpgradePoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNUpgradePoints);

				TableSchema.TableColumn colvarNQualifyingInstalls = new TableSchema.TableColumn(schema);
				colvarNQualifyingInstalls.ColumnName = "NQualifyingInstalls";
				colvarNQualifyingInstalls.DataType = DbType.Int32;
				colvarNQualifyingInstalls.MaxLength = 0;
				colvarNQualifyingInstalls.AutoIncrement = false;
				colvarNQualifyingInstalls.IsNullable = false;
				colvarNQualifyingInstalls.IsPrimaryKey = false;
				colvarNQualifyingInstalls.IsForeignKey = false;
				colvarNQualifyingInstalls.IsReadOnly = false;
				colvarNQualifyingInstalls.DefaultSetting = @"((0))";
				colvarNQualifyingInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNQualifyingInstalls);

				TableSchema.TableColumn colvarNTotalInstalls = new TableSchema.TableColumn(schema);
				colvarNTotalInstalls.ColumnName = "NTotalInstalls";
				colvarNTotalInstalls.DataType = DbType.Int32;
				colvarNTotalInstalls.MaxLength = 0;
				colvarNTotalInstalls.AutoIncrement = false;
				colvarNTotalInstalls.IsNullable = false;
				colvarNTotalInstalls.IsPrimaryKey = false;
				colvarNTotalInstalls.IsForeignKey = false;
				colvarNTotalInstalls.IsReadOnly = false;
				colvarNTotalInstalls.DefaultSetting = @"((0))";
				colvarNTotalInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNTotalInstalls);

				TableSchema.TableColumn colvarServicePercentage = new TableSchema.TableColumn(schema);
				colvarServicePercentage.ColumnName = "ServicePercentage";
				colvarServicePercentage.DataType = DbType.Double;
				colvarServicePercentage.MaxLength = 0;
				colvarServicePercentage.AutoIncrement = false;
				colvarServicePercentage.IsNullable = false;
				colvarServicePercentage.IsPrimaryKey = false;
				colvarServicePercentage.IsForeignKey = false;
				colvarServicePercentage.IsReadOnly = false;
				colvarServicePercentage.DefaultSetting = @"((0))";
				colvarServicePercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServicePercentage);

				TableSchema.TableColumn colvarLeadInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarLeadInspectionPercentage.ColumnName = "LeadInspectionPercentage";
				colvarLeadInspectionPercentage.DataType = DbType.Double;
				colvarLeadInspectionPercentage.MaxLength = 0;
				colvarLeadInspectionPercentage.AutoIncrement = false;
				colvarLeadInspectionPercentage.IsNullable = false;
				colvarLeadInspectionPercentage.IsPrimaryKey = false;
				colvarLeadInspectionPercentage.IsForeignKey = false;
				colvarLeadInspectionPercentage.IsReadOnly = false;
				colvarLeadInspectionPercentage.DefaultSetting = @"((0))";
				colvarLeadInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadInspectionPercentage);

				TableSchema.TableColumn colvarCorporateInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarCorporateInspectionPercentage.ColumnName = "CorporateInspectionPercentage";
				colvarCorporateInspectionPercentage.DataType = DbType.Double;
				colvarCorporateInspectionPercentage.MaxLength = 0;
				colvarCorporateInspectionPercentage.AutoIncrement = false;
				colvarCorporateInspectionPercentage.IsNullable = false;
				colvarCorporateInspectionPercentage.IsPrimaryKey = false;
				colvarCorporateInspectionPercentage.IsForeignKey = false;
				colvarCorporateInspectionPercentage.IsReadOnly = false;
				colvarCorporateInspectionPercentage.DefaultSetting = @"((0))";
				colvarCorporateInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorporateInspectionPercentage);

				TableSchema.TableColumn colvarNCompletedInspections = new TableSchema.TableColumn(schema);
				colvarNCompletedInspections.ColumnName = "NCompletedInspections";
				colvarNCompletedInspections.DataType = DbType.Int32;
				colvarNCompletedInspections.MaxLength = 0;
				colvarNCompletedInspections.AutoIncrement = false;
				colvarNCompletedInspections.IsNullable = false;
				colvarNCompletedInspections.IsPrimaryKey = false;
				colvarNCompletedInspections.IsForeignKey = false;
				colvarNCompletedInspections.IsReadOnly = false;
				colvarNCompletedInspections.DefaultSetting = @"((0))";
				colvarNCompletedInspections.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNCompletedInspections);

				TableSchema.TableColumn colvarVolumeOverride = new TableSchema.TableColumn(schema);
				colvarVolumeOverride.ColumnName = "VolumeOverride";
				colvarVolumeOverride.DataType = DbType.Currency;
				colvarVolumeOverride.MaxLength = 0;
				colvarVolumeOverride.AutoIncrement = false;
				colvarVolumeOverride.IsNullable = false;
				colvarVolumeOverride.IsPrimaryKey = false;
				colvarVolumeOverride.IsForeignKey = false;
				colvarVolumeOverride.IsReadOnly = false;
				colvarVolumeOverride.DefaultSetting = @"((0))";
				colvarVolumeOverride.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVolumeOverride);

				TableSchema.TableColumn colvarTotalVolumeOverride = new TableSchema.TableColumn(schema);
				colvarTotalVolumeOverride.ColumnName = "TotalVolumeOverride";
				colvarTotalVolumeOverride.DataType = DbType.Currency;
				colvarTotalVolumeOverride.MaxLength = 0;
				colvarTotalVolumeOverride.AutoIncrement = false;
				colvarTotalVolumeOverride.IsNullable = false;
				colvarTotalVolumeOverride.IsPrimaryKey = false;
				colvarTotalVolumeOverride.IsForeignKey = false;
				colvarTotalVolumeOverride.IsReadOnly = false;
				colvarTotalVolumeOverride.DefaultSetting = @"((0))";
				colvarTotalVolumeOverride.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalVolumeOverride);

				TableSchema.TableColumn colvarUpgradeTotal = new TableSchema.TableColumn(schema);
				colvarUpgradeTotal.ColumnName = "UpgradeTotal";
				colvarUpgradeTotal.DataType = DbType.Currency;
				colvarUpgradeTotal.MaxLength = 0;
				colvarUpgradeTotal.AutoIncrement = false;
				colvarUpgradeTotal.IsNullable = false;
				colvarUpgradeTotal.IsPrimaryKey = false;
				colvarUpgradeTotal.IsForeignKey = false;
				colvarUpgradeTotal.IsReadOnly = false;
				colvarUpgradeTotal.DefaultSetting = @"((0))";
				colvarUpgradeTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpgradeTotal);

				TableSchema.TableColumn colvarMiscTotal = new TableSchema.TableColumn(schema);
				colvarMiscTotal.ColumnName = "MiscTotal";
				colvarMiscTotal.DataType = DbType.Currency;
				colvarMiscTotal.MaxLength = 0;
				colvarMiscTotal.AutoIncrement = false;
				colvarMiscTotal.IsNullable = false;
				colvarMiscTotal.IsPrimaryKey = false;
				colvarMiscTotal.IsForeignKey = false;
				colvarMiscTotal.IsReadOnly = false;
				colvarMiscTotal.DefaultSetting = @"((0))";
				colvarMiscTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiscTotal);

				TableSchema.TableColumn colvarSalesTotal = new TableSchema.TableColumn(schema);
				colvarSalesTotal.ColumnName = "SalesTotal";
				colvarSalesTotal.DataType = DbType.Currency;
				colvarSalesTotal.MaxLength = 0;
				colvarSalesTotal.AutoIncrement = false;
				colvarSalesTotal.IsNullable = false;
				colvarSalesTotal.IsPrimaryKey = false;
				colvarSalesTotal.IsForeignKey = false;
				colvarSalesTotal.IsReadOnly = false;
				colvarSalesTotal.DefaultSetting = @"((0))";
				colvarSalesTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesTotal);

				TableSchema.TableColumn colvarIncentivesPaid = new TableSchema.TableColumn(schema);
				colvarIncentivesPaid.ColumnName = "IncentivesPaid";
				colvarIncentivesPaid.DataType = DbType.Currency;
				colvarIncentivesPaid.MaxLength = 0;
				colvarIncentivesPaid.AutoIncrement = false;
				colvarIncentivesPaid.IsNullable = false;
				colvarIncentivesPaid.IsPrimaryKey = false;
				colvarIncentivesPaid.IsForeignKey = false;
				colvarIncentivesPaid.IsReadOnly = false;
				colvarIncentivesPaid.DefaultSetting = @"((0))";
				colvarIncentivesPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncentivesPaid);

				TableSchema.TableColumn colvarTotalCellPhoneAllowancePaid = new TableSchema.TableColumn(schema);
				colvarTotalCellPhoneAllowancePaid.ColumnName = "TotalCellPhoneAllowancePaid";
				colvarTotalCellPhoneAllowancePaid.DataType = DbType.Currency;
				colvarTotalCellPhoneAllowancePaid.MaxLength = 0;
				colvarTotalCellPhoneAllowancePaid.AutoIncrement = false;
				colvarTotalCellPhoneAllowancePaid.IsNullable = false;
				colvarTotalCellPhoneAllowancePaid.IsPrimaryKey = false;
				colvarTotalCellPhoneAllowancePaid.IsForeignKey = false;
				colvarTotalCellPhoneAllowancePaid.IsReadOnly = false;
				colvarTotalCellPhoneAllowancePaid.DefaultSetting = @"((0))";
				colvarTotalCellPhoneAllowancePaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalCellPhoneAllowancePaid);

				TableSchema.TableColumn colvarTotalGasAllowancePaid = new TableSchema.TableColumn(schema);
				colvarTotalGasAllowancePaid.ColumnName = "TotalGasAllowancePaid";
				colvarTotalGasAllowancePaid.DataType = DbType.Currency;
				colvarTotalGasAllowancePaid.MaxLength = 0;
				colvarTotalGasAllowancePaid.AutoIncrement = false;
				colvarTotalGasAllowancePaid.IsNullable = false;
				colvarTotalGasAllowancePaid.IsPrimaryKey = false;
				colvarTotalGasAllowancePaid.IsForeignKey = false;
				colvarTotalGasAllowancePaid.IsReadOnly = false;
				colvarTotalGasAllowancePaid.DefaultSetting = @"((0))";
				colvarTotalGasAllowancePaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalGasAllowancePaid);

				TableSchema.TableColumn colvarTotalCellPhoneAllowance = new TableSchema.TableColumn(schema);
				colvarTotalCellPhoneAllowance.ColumnName = "TotalCellPhoneAllowance";
				colvarTotalCellPhoneAllowance.DataType = DbType.Currency;
				colvarTotalCellPhoneAllowance.MaxLength = 0;
				colvarTotalCellPhoneAllowance.AutoIncrement = false;
				colvarTotalCellPhoneAllowance.IsNullable = false;
				colvarTotalCellPhoneAllowance.IsPrimaryKey = false;
				colvarTotalCellPhoneAllowance.IsForeignKey = false;
				colvarTotalCellPhoneAllowance.IsReadOnly = false;
				colvarTotalCellPhoneAllowance.DefaultSetting = @"((0))";
				colvarTotalCellPhoneAllowance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalCellPhoneAllowance);

				TableSchema.TableColumn colvarTotalGasAllowance = new TableSchema.TableColumn(schema);
				colvarTotalGasAllowance.ColumnName = "TotalGasAllowance";
				colvarTotalGasAllowance.DataType = DbType.Currency;
				colvarTotalGasAllowance.MaxLength = 0;
				colvarTotalGasAllowance.AutoIncrement = false;
				colvarTotalGasAllowance.IsNullable = false;
				colvarTotalGasAllowance.IsPrimaryKey = false;
				colvarTotalGasAllowance.IsForeignKey = false;
				colvarTotalGasAllowance.IsReadOnly = false;
				colvarTotalGasAllowance.DefaultSetting = @"((0))";
				colvarTotalGasAllowance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalGasAllowance);

				TableSchema.TableColumn colvarTotalEarnings = new TableSchema.TableColumn(schema);
				colvarTotalEarnings.ColumnName = "TotalEarnings";
				colvarTotalEarnings.DataType = DbType.Currency;
				colvarTotalEarnings.MaxLength = 0;
				colvarTotalEarnings.AutoIncrement = false;
				colvarTotalEarnings.IsNullable = false;
				colvarTotalEarnings.IsPrimaryKey = false;
				colvarTotalEarnings.IsForeignKey = false;
				colvarTotalEarnings.IsReadOnly = false;
				colvarTotalEarnings.DefaultSetting = @"((0))";
				colvarTotalEarnings.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalEarnings);

				TableSchema.TableColumn colvarTotalPaid = new TableSchema.TableColumn(schema);
				colvarTotalPaid.ColumnName = "TotalPaid";
				colvarTotalPaid.DataType = DbType.Currency;
				colvarTotalPaid.MaxLength = 0;
				colvarTotalPaid.AutoIncrement = false;
				colvarTotalPaid.IsNullable = false;
				colvarTotalPaid.IsPrimaryKey = false;
				colvarTotalPaid.IsForeignKey = false;
				colvarTotalPaid.IsReadOnly = false;
				colvarTotalPaid.DefaultSetting = @"((0))";
				colvarTotalPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPaid);

				TableSchema.TableColumn colvarBackendCheckAmount = new TableSchema.TableColumn(schema);
				colvarBackendCheckAmount.ColumnName = "BackendCheckAmount";
				colvarBackendCheckAmount.DataType = DbType.Currency;
				colvarBackendCheckAmount.MaxLength = 0;
				colvarBackendCheckAmount.AutoIncrement = false;
				colvarBackendCheckAmount.IsNullable = false;
				colvarBackendCheckAmount.IsPrimaryKey = false;
				colvarBackendCheckAmount.IsForeignKey = false;
				colvarBackendCheckAmount.IsReadOnly = false;
				colvarBackendCheckAmount.DefaultSetting = @"((0))";
				colvarBackendCheckAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendCheckAmount);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_LeadTechBackends",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_LeadTechBackend LoadFrom(PR_LeadTechBackend item)
		{
			PR_LeadTechBackend result = new PR_LeadTechBackend();
			if (item.LeadTechBackendID != default(int)) {
				result.LoadByKey(item.LeadTechBackendID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int LeadTechBackendID {
			get { return GetColumnValue<int>(Columns.LeadTechBackendID); }
			set {
				SetColumnValue(Columns.LeadTechBackendID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadTechBackendID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int PayScaleID {
			get { return GetColumnValue<int>(Columns.PayScaleID); }
			set {
				SetColumnValue(Columns.PayScaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScaleID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int? BackendPayscaleID {
			get { return GetColumnValue<int?>(Columns.BackendPayscaleID); }
			set {
				SetColumnValue(Columns.BackendPayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPayscaleID));
			}
		}
		[DataMember]
		public int? DetailFileID {
			get { return GetColumnValue<int?>(Columns.DetailFileID); }
			set {
				SetColumnValue(Columns.DetailFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DetailFileID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public int NWeeksWorked {
			get { return GetColumnValue<int>(Columns.NWeeksWorked); }
			set {
				SetColumnValue(Columns.NWeeksWorked, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NWeeksWorked));
			}
		}
		[DataMember]
		public int NPersonalInstalls {
			get { return GetColumnValue<int>(Columns.NPersonalInstalls); }
			set {
				SetColumnValue(Columns.NPersonalInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPersonalInstalls));
			}
		}
		[DataMember]
		public decimal AccountPayRate {
			get { return GetColumnValue<decimal>(Columns.AccountPayRate); }
			set {
				SetColumnValue(Columns.AccountPayRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountPayRate));
			}
		}
		[DataMember]
		public decimal PersonalInstallPay {
			get { return GetColumnValue<decimal>(Columns.PersonalInstallPay); }
			set {
				SetColumnValue(Columns.PersonalInstallPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PersonalInstallPay));
			}
		}
		[DataMember]
		public decimal ServiceBonus {
			get { return GetColumnValue<decimal>(Columns.ServiceBonus); }
			set {
				SetColumnValue(Columns.ServiceBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServiceBonus));
			}
		}
		[DataMember]
		public decimal PersonalInspectionBonus {
			get { return GetColumnValue<decimal>(Columns.PersonalInspectionBonus); }
			set {
				SetColumnValue(Columns.PersonalInspectionBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PersonalInspectionBonus));
			}
		}
		[DataMember]
		public decimal CompletedInspectionsBonus {
			get { return GetColumnValue<decimal>(Columns.CompletedInspectionsBonus); }
			set {
				SetColumnValue(Columns.CompletedInspectionsBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CompletedInspectionsBonus));
			}
		}
		[DataMember]
		public decimal CorporateInspectionsBonus {
			get { return GetColumnValue<decimal>(Columns.CorporateInspectionsBonus); }
			set {
				SetColumnValue(Columns.CorporateInspectionsBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateInspectionsBonus));
			}
		}
		[DataMember]
		public decimal CorrelationBonus {
			get { return GetColumnValue<decimal>(Columns.CorrelationBonus); }
			set {
				SetColumnValue(Columns.CorrelationBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorrelationBonus));
			}
		}
		[DataMember]
		public decimal TrainingBonus {
			get { return GetColumnValue<decimal>(Columns.TrainingBonus); }
			set {
				SetColumnValue(Columns.TrainingBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TrainingBonus));
			}
		}
		[DataMember]
		public decimal SamedayBonus {
			get { return GetColumnValue<decimal>(Columns.SamedayBonus); }
			set {
				SetColumnValue(Columns.SamedayBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SamedayBonus));
			}
		}
		[DataMember]
		public decimal RecruitingBonus {
			get { return GetColumnValue<decimal>(Columns.RecruitingBonus); }
			set {
				SetColumnValue(Columns.RecruitingBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitingBonus));
			}
		}
		[DataMember]
		public decimal PreSeasonSalaryPaid {
			get { return GetColumnValue<decimal>(Columns.PreSeasonSalaryPaid); }
			set {
				SetColumnValue(Columns.PreSeasonSalaryPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreSeasonSalaryPaid));
			}
		}
		[DataMember]
		public decimal OtherSalaryPaid {
			get { return GetColumnValue<decimal>(Columns.OtherSalaryPaid); }
			set {
				SetColumnValue(Columns.OtherSalaryPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OtherSalaryPaid));
			}
		}
		[DataMember]
		public decimal StaffingBonus {
			get { return GetColumnValue<decimal>(Columns.StaffingBonus); }
			set {
				SetColumnValue(Columns.StaffingBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StaffingBonus));
			}
		}
		[DataMember]
		public decimal SigningBonus {
			get { return GetColumnValue<decimal>(Columns.SigningBonus); }
			set {
				SetColumnValue(Columns.SigningBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SigningBonus));
			}
		}
		[DataMember]
		public decimal SigningBonusPaid {
			get { return GetColumnValue<decimal>(Columns.SigningBonusPaid); }
			set {
				SetColumnValue(Columns.SigningBonusPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SigningBonusPaid));
			}
		}
		[DataMember]
		public double NUpgradePoints {
			get { return GetColumnValue<double>(Columns.NUpgradePoints); }
			set {
				SetColumnValue(Columns.NUpgradePoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NUpgradePoints));
			}
		}
		[DataMember]
		public int NQualifyingInstalls {
			get { return GetColumnValue<int>(Columns.NQualifyingInstalls); }
			set {
				SetColumnValue(Columns.NQualifyingInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NQualifyingInstalls));
			}
		}
		[DataMember]
		public int NTotalInstalls {
			get { return GetColumnValue<int>(Columns.NTotalInstalls); }
			set {
				SetColumnValue(Columns.NTotalInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NTotalInstalls));
			}
		}
		[DataMember]
		public double ServicePercentage {
			get { return GetColumnValue<double>(Columns.ServicePercentage); }
			set {
				SetColumnValue(Columns.ServicePercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServicePercentage));
			}
		}
		[DataMember]
		public double LeadInspectionPercentage {
			get { return GetColumnValue<double>(Columns.LeadInspectionPercentage); }
			set {
				SetColumnValue(Columns.LeadInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadInspectionPercentage));
			}
		}
		[DataMember]
		public double CorporateInspectionPercentage {
			get { return GetColumnValue<double>(Columns.CorporateInspectionPercentage); }
			set {
				SetColumnValue(Columns.CorporateInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateInspectionPercentage));
			}
		}
		[DataMember]
		public int NCompletedInspections {
			get { return GetColumnValue<int>(Columns.NCompletedInspections); }
			set {
				SetColumnValue(Columns.NCompletedInspections, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NCompletedInspections));
			}
		}
		[DataMember]
		public decimal VolumeOverride {
			get { return GetColumnValue<decimal>(Columns.VolumeOverride); }
			set {
				SetColumnValue(Columns.VolumeOverride, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VolumeOverride));
			}
		}
		[DataMember]
		public decimal TotalVolumeOverride {
			get { return GetColumnValue<decimal>(Columns.TotalVolumeOverride); }
			set {
				SetColumnValue(Columns.TotalVolumeOverride, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalVolumeOverride));
			}
		}
		[DataMember]
		public decimal UpgradeTotal {
			get { return GetColumnValue<decimal>(Columns.UpgradeTotal); }
			set {
				SetColumnValue(Columns.UpgradeTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UpgradeTotal));
			}
		}
		[DataMember]
		public decimal MiscTotal {
			get { return GetColumnValue<decimal>(Columns.MiscTotal); }
			set {
				SetColumnValue(Columns.MiscTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiscTotal));
			}
		}
		[DataMember]
		public decimal SalesTotal {
			get { return GetColumnValue<decimal>(Columns.SalesTotal); }
			set {
				SetColumnValue(Columns.SalesTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesTotal));
			}
		}
		[DataMember]
		public decimal IncentivesPaid {
			get { return GetColumnValue<decimal>(Columns.IncentivesPaid); }
			set {
				SetColumnValue(Columns.IncentivesPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncentivesPaid));
			}
		}
		[DataMember]
		public decimal TotalCellPhoneAllowancePaid {
			get { return GetColumnValue<decimal>(Columns.TotalCellPhoneAllowancePaid); }
			set {
				SetColumnValue(Columns.TotalCellPhoneAllowancePaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalCellPhoneAllowancePaid));
			}
		}
		[DataMember]
		public decimal TotalGasAllowancePaid {
			get { return GetColumnValue<decimal>(Columns.TotalGasAllowancePaid); }
			set {
				SetColumnValue(Columns.TotalGasAllowancePaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalGasAllowancePaid));
			}
		}
		[DataMember]
		public decimal TotalCellPhoneAllowance {
			get { return GetColumnValue<decimal>(Columns.TotalCellPhoneAllowance); }
			set {
				SetColumnValue(Columns.TotalCellPhoneAllowance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalCellPhoneAllowance));
			}
		}
		[DataMember]
		public decimal TotalGasAllowance {
			get { return GetColumnValue<decimal>(Columns.TotalGasAllowance); }
			set {
				SetColumnValue(Columns.TotalGasAllowance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalGasAllowance));
			}
		}
		[DataMember]
		public decimal TotalEarnings {
			get { return GetColumnValue<decimal>(Columns.TotalEarnings); }
			set {
				SetColumnValue(Columns.TotalEarnings, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalEarnings));
			}
		}
		[DataMember]
		public decimal TotalPaid {
			get { return GetColumnValue<decimal>(Columns.TotalPaid); }
			set {
				SetColumnValue(Columns.TotalPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPaid));
			}
		}
		[DataMember]
		public decimal BackendCheckAmount {
			get { return GetColumnValue<decimal>(Columns.BackendCheckAmount); }
			set {
				SetColumnValue(Columns.BackendCheckAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendCheckAmount));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendPayscale _BackendPayscale;
		//Relationship: FK_PR_LeadTechBackends_PR_BackendPayscales
		public PR_BackendPayscale BackendPayscale
		{
			get
			{
				if(_BackendPayscale == null) {
					_BackendPayscale = PR_BackendPayscale.FetchByID(this.BackendPayscaleID);
				}
				return _BackendPayscale;
			}
			set
			{
				SetColumnValue("BackendPayscaleID", value.BackendPayscaleID);
				_BackendPayscale = value;
			}
		}

		private RU_Payscale _PayScale;
		//Relationship: FK_PR_LeadTechBackends_RU_Payscales
		public RU_Payscale PayScale
		{
			get
			{
				if(_PayScale == null) {
					_PayScale = RU_Payscale.FetchByID(this.PayScaleID);
				}
				return _PayScale;
			}
			set
			{
				SetColumnValue("PayScaleID", value.PayscaleID);
				_PayScale = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_LeadTechBackends_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_PR_LeadTechBackends_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return LeadTechBackendID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LeadTechBackendIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PayScaleIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn BackendPayscaleIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DetailFileIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn NWeeksWorkedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn NPersonalInstallsColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AccountPayRateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn PersonalInstallPayColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ServiceBonusColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn PersonalInspectionBonusColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CompletedInspectionsBonusColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CorporateInspectionsBonusColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CorrelationBonusColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn TrainingBonusColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn SamedayBonusColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn RecruitingBonusColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn PreSeasonSalaryPaidColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn OtherSalaryPaidColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn StaffingBonusColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn SigningBonusColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn SigningBonusPaidColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn NUpgradePointsColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn NQualifyingInstallsColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn NTotalInstallsColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn ServicePercentageColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn LeadInspectionPercentageColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn CorporateInspectionPercentageColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn NCompletedInspectionsColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn VolumeOverrideColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn TotalVolumeOverrideColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn UpgradeTotalColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn MiscTotalColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn SalesTotalColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn IncentivesPaidColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn TotalCellPhoneAllowancePaidColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn TotalGasAllowancePaidColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn TotalCellPhoneAllowanceColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn TotalGasAllowanceColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn TotalEarningsColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn TotalPaidColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn BackendCheckAmountColumn
		{
			get { return Schema.Columns[43]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LeadTechBackendID = @"LeadTechBackendID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string PayScaleID = @"PayScaleID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string BackendPayscaleID = @"BackendPayscaleID";
			public static readonly string DetailFileID = @"DetailFileID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string NWeeksWorked = @"NWeeksWorked";
			public static readonly string NPersonalInstalls = @"NPersonalInstalls";
			public static readonly string AccountPayRate = @"AccountPayRate";
			public static readonly string PersonalInstallPay = @"PersonalInstallPay";
			public static readonly string ServiceBonus = @"ServiceBonus";
			public static readonly string PersonalInspectionBonus = @"PersonalInspectionBonus";
			public static readonly string CompletedInspectionsBonus = @"CompletedInspectionsBonus";
			public static readonly string CorporateInspectionsBonus = @"CorporateInspectionsBonus";
			public static readonly string CorrelationBonus = @"CorrelationBonus";
			public static readonly string TrainingBonus = @"TrainingBonus";
			public static readonly string SamedayBonus = @"SamedayBonus";
			public static readonly string RecruitingBonus = @"RecruitingBonus";
			public static readonly string PreSeasonSalaryPaid = @"PreSeasonSalaryPaid";
			public static readonly string OtherSalaryPaid = @"OtherSalaryPaid";
			public static readonly string StaffingBonus = @"StaffingBonus";
			public static readonly string SigningBonus = @"SigningBonus";
			public static readonly string SigningBonusPaid = @"SigningBonusPaid";
			public static readonly string NUpgradePoints = @"NUpgradePoints";
			public static readonly string NQualifyingInstalls = @"NQualifyingInstalls";
			public static readonly string NTotalInstalls = @"NTotalInstalls";
			public static readonly string ServicePercentage = @"ServicePercentage";
			public static readonly string LeadInspectionPercentage = @"LeadInspectionPercentage";
			public static readonly string CorporateInspectionPercentage = @"CorporateInspectionPercentage";
			public static readonly string NCompletedInspections = @"NCompletedInspections";
			public static readonly string VolumeOverride = @"VolumeOverride";
			public static readonly string TotalVolumeOverride = @"TotalVolumeOverride";
			public static readonly string UpgradeTotal = @"UpgradeTotal";
			public static readonly string MiscTotal = @"MiscTotal";
			public static readonly string SalesTotal = @"SalesTotal";
			public static readonly string IncentivesPaid = @"IncentivesPaid";
			public static readonly string TotalCellPhoneAllowancePaid = @"TotalCellPhoneAllowancePaid";
			public static readonly string TotalGasAllowancePaid = @"TotalGasAllowancePaid";
			public static readonly string TotalCellPhoneAllowance = @"TotalCellPhoneAllowance";
			public static readonly string TotalGasAllowance = @"TotalGasAllowance";
			public static readonly string TotalEarnings = @"TotalEarnings";
			public static readonly string TotalPaid = @"TotalPaid";
			public static readonly string BackendCheckAmount = @"BackendCheckAmount";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LeadTechBackendID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_MiscBackendAmount class.
	/// </summary>
	[DataContract]
	public partial class PR_MiscBackendAmountCollection : ActiveList<PR_MiscBackendAmount, PR_MiscBackendAmountCollection>
	{
		public static PR_MiscBackendAmountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_MiscBackendAmountCollection result = new PR_MiscBackendAmountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_MiscBackendAmount item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_MiscBackendAmounts table.
	/// </summary>
	[DataContract]
	public partial class PR_MiscBackendAmount : ActiveRecord<PR_MiscBackendAmount>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_MiscBackendAmount()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_MiscBackendAmounts", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMiscAmountID = new TableSchema.TableColumn(schema);
				colvarMiscAmountID.ColumnName = "MiscAmountID";
				colvarMiscAmountID.DataType = DbType.Int32;
				colvarMiscAmountID.MaxLength = 0;
				colvarMiscAmountID.AutoIncrement = true;
				colvarMiscAmountID.IsNullable = false;
				colvarMiscAmountID.IsPrimaryKey = true;
				colvarMiscAmountID.IsForeignKey = false;
				colvarMiscAmountID.IsReadOnly = false;
				colvarMiscAmountID.DefaultSetting = @"";
				colvarMiscAmountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiscAmountID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarReason = new TableSchema.TableColumn(schema);
				colvarReason.ColumnName = "Reason";
				colvarReason.DataType = DbType.String;
				colvarReason.MaxLength = 500;
				colvarReason.AutoIncrement = false;
				colvarReason.IsNullable = false;
				colvarReason.IsPrimaryKey = false;
				colvarReason.IsForeignKey = false;
				colvarReason.IsReadOnly = false;
				colvarReason.DefaultSetting = @"";
				colvarReason.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReason);

				TableSchema.TableColumn colvarIsDeduction = new TableSchema.TableColumn(schema);
				colvarIsDeduction.ColumnName = "IsDeduction";
				colvarIsDeduction.DataType = DbType.Boolean;
				colvarIsDeduction.MaxLength = 0;
				colvarIsDeduction.AutoIncrement = false;
				colvarIsDeduction.IsNullable = false;
				colvarIsDeduction.IsPrimaryKey = false;
				colvarIsDeduction.IsForeignKey = false;
				colvarIsDeduction.IsReadOnly = false;
				colvarIsDeduction.DefaultSetting = @"((0))";
				colvarIsDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeduction);

				TableSchema.TableColumn colvarIsApartmentDeduction = new TableSchema.TableColumn(schema);
				colvarIsApartmentDeduction.ColumnName = "IsApartmentDeduction";
				colvarIsApartmentDeduction.DataType = DbType.Boolean;
				colvarIsApartmentDeduction.MaxLength = 0;
				colvarIsApartmentDeduction.AutoIncrement = false;
				colvarIsApartmentDeduction.IsNullable = false;
				colvarIsApartmentDeduction.IsPrimaryKey = false;
				colvarIsApartmentDeduction.IsForeignKey = false;
				colvarIsApartmentDeduction.IsReadOnly = false;
				colvarIsApartmentDeduction.DefaultSetting = @"((0))";
				colvarIsApartmentDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsApartmentDeduction);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"(getdate())";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_MiscBackendAmounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_MiscBackendAmount LoadFrom(PR_MiscBackendAmount item)
		{
			PR_MiscBackendAmount result = new PR_MiscBackendAmount();
			if (item.MiscAmountID != default(int)) {
				result.LoadByKey(item.MiscAmountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MiscAmountID {
			get { return GetColumnValue<int>(Columns.MiscAmountID); }
			set {
				SetColumnValue(Columns.MiscAmountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiscAmountID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public string Reason {
			get { return GetColumnValue<string>(Columns.Reason); }
			set {
				SetColumnValue(Columns.Reason, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Reason));
			}
		}
		[DataMember]
		public bool IsDeduction {
			get { return GetColumnValue<bool>(Columns.IsDeduction); }
			set {
				SetColumnValue(Columns.IsDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeduction));
			}
		}
		[DataMember]
		public bool IsApartmentDeduction {
			get { return GetColumnValue<bool>(Columns.IsApartmentDeduction); }
			set {
				SetColumnValue(Columns.IsApartmentDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsApartmentDeduction));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_MiscBackendAmount _MiscAmount;
		//Relationship: FK_PR_MiscBackendAmounts_PR_MiscBackendAmounts
		public PR_MiscBackendAmount MiscAmount
		{
			get
			{
				if(_MiscAmount == null) {
					_MiscAmount = PR_MiscBackendAmount.FetchByID(this.MiscAmountID);
				}
				return _MiscAmount;
			}
			set
			{
				SetColumnValue("MiscAmountID", value.MiscAmountID);
				_MiscAmount = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_MiscBackendAmounts_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MiscAmountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MiscAmountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ReasonColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeductionColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsApartmentDeductionColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MiscAmountID = @"MiscAmountID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Amount = @"Amount";
			public static readonly string Reason = @"Reason";
			public static readonly string IsDeduction = @"IsDeduction";
			public static readonly string IsApartmentDeduction = @"IsApartmentDeduction";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedByDate = @"CreatedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MiscAmountID; }
		}
		*/

		#region Foreign Collections

		private PR_MiscBackendAmountCollection _ChildPR_MiscBackendAmountsCol;
		//Relationship: FK_PR_MiscBackendAmounts_PR_MiscBackendAmounts
		public PR_MiscBackendAmountCollection ChildPR_MiscBackendAmountsCol
		{
			get
			{
				if(_ChildPR_MiscBackendAmountsCol == null) {
					_ChildPR_MiscBackendAmountsCol = new PR_MiscBackendAmountCollection();
					_ChildPR_MiscBackendAmountsCol.LoadAndCloseReader(PR_MiscBackendAmount.Query()
						.WHERE(PR_MiscBackendAmount.Columns.MiscAmountID, MiscAmountID).ExecuteReader());
				}
				return _ChildPR_MiscBackendAmountsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_MiscBackendTransaction class.
	/// </summary>
	[DataContract]
	public partial class PR_MiscBackendTransactionCollection : ActiveList<PR_MiscBackendTransaction, PR_MiscBackendTransactionCollection>
	{
		public static PR_MiscBackendTransactionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_MiscBackendTransactionCollection result = new PR_MiscBackendTransactionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_MiscBackendTransaction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_MiscBackendTransactions table.
	/// </summary>
	[DataContract]
	public partial class PR_MiscBackendTransaction : ActiveRecord<PR_MiscBackendTransaction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_MiscBackendTransaction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_MiscBackendTransactions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMiscBackendTransactionID = new TableSchema.TableColumn(schema);
				colvarMiscBackendTransactionID.ColumnName = "MiscBackendTransactionID";
				colvarMiscBackendTransactionID.DataType = DbType.Int32;
				colvarMiscBackendTransactionID.MaxLength = 0;
				colvarMiscBackendTransactionID.AutoIncrement = true;
				colvarMiscBackendTransactionID.IsNullable = false;
				colvarMiscBackendTransactionID.IsPrimaryKey = true;
				colvarMiscBackendTransactionID.IsForeignKey = false;
				colvarMiscBackendTransactionID.IsReadOnly = false;
				colvarMiscBackendTransactionID.DefaultSetting = @"";
				colvarMiscBackendTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiscBackendTransactionID);

				TableSchema.TableColumn colvarBackendTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarBackendTransactionTypeID.ColumnName = "BackendTransactionTypeID";
				colvarBackendTransactionTypeID.DataType = DbType.Int32;
				colvarBackendTransactionTypeID.MaxLength = 0;
				colvarBackendTransactionTypeID.AutoIncrement = false;
				colvarBackendTransactionTypeID.IsNullable = false;
				colvarBackendTransactionTypeID.IsPrimaryKey = false;
				colvarBackendTransactionTypeID.IsForeignKey = true;
				colvarBackendTransactionTypeID.IsReadOnly = false;
				colvarBackendTransactionTypeID.DefaultSetting = @"";
				colvarBackendTransactionTypeID.ForeignKeyTableName = "PR_BackendTransactionTypes";
				schema.Columns.Add(colvarBackendTransactionTypeID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = true;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);

				TableSchema.TableColumn colvarRate = new TableSchema.TableColumn(schema);
				colvarRate.ColumnName = "Rate";
				colvarRate.DataType = DbType.Currency;
				colvarRate.MaxLength = 0;
				colvarRate.AutoIncrement = false;
				colvarRate.IsNullable = true;
				colvarRate.IsPrimaryKey = false;
				colvarRate.IsForeignKey = false;
				colvarRate.IsReadOnly = false;
				colvarRate.DefaultSetting = @"";
				colvarRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRate);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_MiscBackendTransactions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_MiscBackendTransaction LoadFrom(PR_MiscBackendTransaction item)
		{
			PR_MiscBackendTransaction result = new PR_MiscBackendTransaction();
			if (item.MiscBackendTransactionID != default(int)) {
				result.LoadByKey(item.MiscBackendTransactionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MiscBackendTransactionID {
			get { return GetColumnValue<int>(Columns.MiscBackendTransactionID); }
			set {
				SetColumnValue(Columns.MiscBackendTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiscBackendTransactionID));
			}
		}
		[DataMember]
		public int BackendTransactionTypeID {
			get { return GetColumnValue<int>(Columns.BackendTransactionTypeID); }
			set {
				SetColumnValue(Columns.BackendTransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendTransactionTypeID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public int? Quantity {
			get { return GetColumnValue<int?>(Columns.Quantity); }
			set {
				SetColumnValue(Columns.Quantity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Quantity));
			}
		}
		[DataMember]
		public decimal? Rate {
			get { return GetColumnValue<decimal?>(Columns.Rate); }
			set {
				SetColumnValue(Columns.Rate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Rate));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendTransactionType _BackendTransactionType;
		//Relationship: FK_PR_MiscBackendTransactions_PR_BackendTransactionTypes
		public PR_BackendTransactionType BackendTransactionType
		{
			get
			{
				if(_BackendTransactionType == null) {
					_BackendTransactionType = PR_BackendTransactionType.FetchByID(this.BackendTransactionTypeID);
				}
				return _BackendTransactionType;
			}
			set
			{
				SetColumnValue("BackendTransactionTypeID", value.BackendTransactionTypeID);
				_BackendTransactionType = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_MiscBackendTransactions_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MiscBackendTransactionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MiscBackendTransactionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn BackendTransactionTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn QuantityColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MiscBackendTransactionID = @"MiscBackendTransactionID";
			public static readonly string BackendTransactionTypeID = @"BackendTransactionTypeID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Amount = @"Amount";
			public static readonly string Quantity = @"Quantity";
			public static readonly string Rate = @"Rate";
			public static readonly string Comments = @"Comments";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MiscBackendTransactionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_OfficeCheckRecipient class.
	/// </summary>
	[DataContract]
	public partial class PR_OfficeCheckRecipientCollection : ActiveList<PR_OfficeCheckRecipient, PR_OfficeCheckRecipientCollection>
	{
		public static PR_OfficeCheckRecipientCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_OfficeCheckRecipientCollection result = new PR_OfficeCheckRecipientCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_OfficeCheckRecipient item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_OfficeCheckRecipients table.
	/// </summary>
	[DataContract]
	public partial class PR_OfficeCheckRecipient : ActiveRecord<PR_OfficeCheckRecipient>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_OfficeCheckRecipient()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_OfficeCheckRecipients", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = true;
				colvarTeamLocationID.IsForeignKey = false;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_OfficeCheckRecipients",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_OfficeCheckRecipient LoadFrom(PR_OfficeCheckRecipient item)
		{
			PR_OfficeCheckRecipient result = new PR_OfficeCheckRecipient();
			if (item.TeamLocationID != default(int)) {
				result.LoadByKey(item.TeamLocationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_PR_OfficeCheckRecipients_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return GPEmployeeID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TeamLocationID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_OfficeCheck class.
	/// </summary>
	[DataContract]
	public partial class PR_OfficeCheckCollection : ActiveList<PR_OfficeCheck, PR_OfficeCheckCollection>
	{
		public static PR_OfficeCheckCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_OfficeCheckCollection result = new PR_OfficeCheckCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_OfficeCheck item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_OfficeChecks table.
	/// </summary>
	[DataContract]
	public partial class PR_OfficeCheck : ActiveRecord<PR_OfficeCheck>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_OfficeCheck()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_OfficeChecks", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarOfficeCheckID = new TableSchema.TableColumn(schema);
				colvarOfficeCheckID.ColumnName = "OfficeCheckID";
				colvarOfficeCheckID.DataType = DbType.Int32;
				colvarOfficeCheckID.MaxLength = 0;
				colvarOfficeCheckID.AutoIncrement = true;
				colvarOfficeCheckID.IsNullable = false;
				colvarOfficeCheckID.IsPrimaryKey = true;
				colvarOfficeCheckID.IsForeignKey = false;
				colvarOfficeCheckID.IsReadOnly = false;
				colvarOfficeCheckID.DefaultSetting = @"";
				colvarOfficeCheckID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeCheckID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarPayPeriodID = new TableSchema.TableColumn(schema);
				colvarPayPeriodID.ColumnName = "PayPeriodID";
				colvarPayPeriodID.DataType = DbType.Int32;
				colvarPayPeriodID.MaxLength = 0;
				colvarPayPeriodID.AutoIncrement = false;
				colvarPayPeriodID.IsNullable = false;
				colvarPayPeriodID.IsPrimaryKey = false;
				colvarPayPeriodID.IsForeignKey = true;
				colvarPayPeriodID.IsReadOnly = false;
				colvarPayPeriodID.DefaultSetting = @"";
				colvarPayPeriodID.ForeignKeyTableName = "PR_PayPeriods";
				schema.Columns.Add(colvarPayPeriodID);

				TableSchema.TableColumn colvarDetailFileID = new TableSchema.TableColumn(schema);
				colvarDetailFileID.ColumnName = "DetailFileID";
				colvarDetailFileID.DataType = DbType.Int32;
				colvarDetailFileID.MaxLength = 0;
				colvarDetailFileID.AutoIncrement = false;
				colvarDetailFileID.IsNullable = true;
				colvarDetailFileID.IsPrimaryKey = false;
				colvarDetailFileID.IsForeignKey = false;
				colvarDetailFileID.IsReadOnly = false;
				colvarDetailFileID.DefaultSetting = @"";
				colvarDetailFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetailFileID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarBalance = new TableSchema.TableColumn(schema);
				colvarBalance.ColumnName = "Balance";
				colvarBalance.DataType = DbType.Currency;
				colvarBalance.MaxLength = 0;
				colvarBalance.AutoIncrement = false;
				colvarBalance.IsNullable = false;
				colvarBalance.IsPrimaryKey = false;
				colvarBalance.IsForeignKey = false;
				colvarBalance.IsReadOnly = false;
				colvarBalance.DefaultSetting = @"";
				colvarBalance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBalance);

				TableSchema.TableColumn colvarIsVoided = new TableSchema.TableColumn(schema);
				colvarIsVoided.ColumnName = "IsVoided";
				colvarIsVoided.DataType = DbType.Boolean;
				colvarIsVoided.MaxLength = 0;
				colvarIsVoided.AutoIncrement = false;
				colvarIsVoided.IsNullable = false;
				colvarIsVoided.IsPrimaryKey = false;
				colvarIsVoided.IsForeignKey = false;
				colvarIsVoided.IsReadOnly = false;
				colvarIsVoided.DefaultSetting = @"((0))";
				colvarIsVoided.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVoided);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"(getdate())";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_OfficeChecks",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_OfficeCheck LoadFrom(PR_OfficeCheck item)
		{
			PR_OfficeCheck result = new PR_OfficeCheck();
			if (item.OfficeCheckID != default(int)) {
				result.LoadByKey(item.OfficeCheckID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int OfficeCheckID {
			get { return GetColumnValue<int>(Columns.OfficeCheckID); }
			set {
				SetColumnValue(Columns.OfficeCheckID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeCheckID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int PayPeriodID {
			get { return GetColumnValue<int>(Columns.PayPeriodID); }
			set {
				SetColumnValue(Columns.PayPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayPeriodID));
			}
		}
		[DataMember]
		public int? DetailFileID {
			get { return GetColumnValue<int?>(Columns.DetailFileID); }
			set {
				SetColumnValue(Columns.DetailFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DetailFileID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal Balance {
			get { return GetColumnValue<decimal>(Columns.Balance); }
			set {
				SetColumnValue(Columns.Balance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Balance));
			}
		}
		[DataMember]
		public bool IsVoided {
			get { return GetColumnValue<bool>(Columns.IsVoided); }
			set {
				SetColumnValue(Columns.IsVoided, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsVoided));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_PayPeriod _PayPeriod;
		//Relationship: FK_PR_OfficeChecks_PR_PayPeriods
		public PR_PayPeriod PayPeriod
		{
			get
			{
				if(_PayPeriod == null) {
					_PayPeriod = PR_PayPeriod.FetchByID(this.PayPeriodID);
				}
				return _PayPeriod;
			}
			set
			{
				SetColumnValue("PayPeriodID", value.PayPeriodID);
				_PayPeriod = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_PR_OfficeChecks_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return OfficeCheckID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn OfficeCheckIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PayPeriodIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DetailFileIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn BalanceColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsVoidedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string OfficeCheckID = @"OfficeCheckID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string PayPeriodID = @"PayPeriodID";
			public static readonly string DetailFileID = @"DetailFileID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Balance = @"Balance";
			public static readonly string IsVoided = @"IsVoided";
			public static readonly string CreatedByDate = @"CreatedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return OfficeCheckID; }
		}
		*/

		#region Foreign Collections

		private PR_OfficeTransactionCollection _PR_OfficeTransactionsCol;
		//Relationship: FK_PR_OfficeTransactions_PR_OfficeChecks
		public PR_OfficeTransactionCollection PR_OfficeTransactionsCol
		{
			get
			{
				if(_PR_OfficeTransactionsCol == null) {
					_PR_OfficeTransactionsCol = new PR_OfficeTransactionCollection();
					_PR_OfficeTransactionsCol.LoadAndCloseReader(PR_OfficeTransaction.Query()
						.WHERE(PR_OfficeTransaction.Columns.OfficeCheckID, OfficeCheckID).ExecuteReader());
				}
				return _PR_OfficeTransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_OfficeTransaction class.
	/// </summary>
	[DataContract]
	public partial class PR_OfficeTransactionCollection : ActiveList<PR_OfficeTransaction, PR_OfficeTransactionCollection>
	{
		public static PR_OfficeTransactionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_OfficeTransactionCollection result = new PR_OfficeTransactionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_OfficeTransaction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_OfficeTransactions table.
	/// </summary>
	[DataContract]
	public partial class PR_OfficeTransaction : ActiveRecord<PR_OfficeTransaction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_OfficeTransaction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_OfficeTransactions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarOfficeTransactionID = new TableSchema.TableColumn(schema);
				colvarOfficeTransactionID.ColumnName = "OfficeTransactionID";
				colvarOfficeTransactionID.DataType = DbType.Int64;
				colvarOfficeTransactionID.MaxLength = 0;
				colvarOfficeTransactionID.AutoIncrement = true;
				colvarOfficeTransactionID.IsNullable = false;
				colvarOfficeTransactionID.IsPrimaryKey = true;
				colvarOfficeTransactionID.IsForeignKey = false;
				colvarOfficeTransactionID.IsReadOnly = false;
				colvarOfficeTransactionID.DefaultSetting = @"";
				colvarOfficeTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeTransactionID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarOfficeTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarOfficeTransactionTypeID.ColumnName = "OfficeTransactionTypeID";
				colvarOfficeTransactionTypeID.DataType = DbType.Int32;
				colvarOfficeTransactionTypeID.MaxLength = 0;
				colvarOfficeTransactionTypeID.AutoIncrement = false;
				colvarOfficeTransactionTypeID.IsNullable = false;
				colvarOfficeTransactionTypeID.IsPrimaryKey = false;
				colvarOfficeTransactionTypeID.IsForeignKey = true;
				colvarOfficeTransactionTypeID.IsReadOnly = false;
				colvarOfficeTransactionTypeID.DefaultSetting = @"";
				colvarOfficeTransactionTypeID.ForeignKeyTableName = "PR_OfficeTransactionTypes";
				schema.Columns.Add(colvarOfficeTransactionTypeID);

				TableSchema.TableColumn colvarSourceTransactionID = new TableSchema.TableColumn(schema);
				colvarSourceTransactionID.ColumnName = "SourceTransactionID";
				colvarSourceTransactionID.DataType = DbType.Int64;
				colvarSourceTransactionID.MaxLength = 0;
				colvarSourceTransactionID.AutoIncrement = false;
				colvarSourceTransactionID.IsNullable = true;
				colvarSourceTransactionID.IsPrimaryKey = false;
				colvarSourceTransactionID.IsForeignKey = true;
				colvarSourceTransactionID.IsReadOnly = false;
				colvarSourceTransactionID.DefaultSetting = @"";
				colvarSourceTransactionID.ForeignKeyTableName = "PR_Transactions";
				schema.Columns.Add(colvarSourceTransactionID);

				TableSchema.TableColumn colvarOfficeCheckID = new TableSchema.TableColumn(schema);
				colvarOfficeCheckID.ColumnName = "OfficeCheckID";
				colvarOfficeCheckID.DataType = DbType.Int32;
				colvarOfficeCheckID.MaxLength = 0;
				colvarOfficeCheckID.AutoIncrement = false;
				colvarOfficeCheckID.IsNullable = true;
				colvarOfficeCheckID.IsPrimaryKey = false;
				colvarOfficeCheckID.IsForeignKey = true;
				colvarOfficeCheckID.IsReadOnly = false;
				colvarOfficeCheckID.DefaultSetting = @"";
				colvarOfficeCheckID.ForeignKeyTableName = "PR_OfficeChecks";
				schema.Columns.Add(colvarOfficeCheckID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = false;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"(getdate())";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_OfficeTransactions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_OfficeTransaction LoadFrom(PR_OfficeTransaction item)
		{
			PR_OfficeTransaction result = new PR_OfficeTransaction();
			if (item.OfficeTransactionID != default(long)) {
				result.LoadByKey(item.OfficeTransactionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long OfficeTransactionID {
			get { return GetColumnValue<long>(Columns.OfficeTransactionID); }
			set {
				SetColumnValue(Columns.OfficeTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeTransactionID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int OfficeTransactionTypeID {
			get { return GetColumnValue<int>(Columns.OfficeTransactionTypeID); }
			set {
				SetColumnValue(Columns.OfficeTransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeTransactionTypeID));
			}
		}
		[DataMember]
		public long? SourceTransactionID {
			get { return GetColumnValue<long?>(Columns.SourceTransactionID); }
			set {
				SetColumnValue(Columns.SourceTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SourceTransactionID));
			}
		}
		[DataMember]
		public int? OfficeCheckID {
			get { return GetColumnValue<int?>(Columns.OfficeCheckID); }
			set {
				SetColumnValue(Columns.OfficeCheckID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeCheckID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_OfficeCheck _OfficeCheck;
		//Relationship: FK_PR_OfficeTransactions_PR_OfficeChecks
		public PR_OfficeCheck OfficeCheck
		{
			get
			{
				if(_OfficeCheck == null) {
					_OfficeCheck = PR_OfficeCheck.FetchByID(this.OfficeCheckID);
				}
				return _OfficeCheck;
			}
			set
			{
				SetColumnValue("OfficeCheckID", value.OfficeCheckID);
				_OfficeCheck = value;
			}
		}

		private PR_OfficeTransactionType _OfficeTransactionType;
		//Relationship: FK_PR_OfficeTransactions_PR_OfficeTransactionTypes
		public PR_OfficeTransactionType OfficeTransactionType
		{
			get
			{
				if(_OfficeTransactionType == null) {
					_OfficeTransactionType = PR_OfficeTransactionType.FetchByID(this.OfficeTransactionTypeID);
				}
				return _OfficeTransactionType;
			}
			set
			{
				SetColumnValue("OfficeTransactionTypeID", value.OfficeTransactionTypeID);
				_OfficeTransactionType = value;
			}
		}

		private PR_Transaction _SourceTransaction;
		//Relationship: FK_PR_OfficeTransactions_PR_Transactions
		public PR_Transaction SourceTransaction
		{
			get
			{
				if(_SourceTransaction == null) {
					_SourceTransaction = PR_Transaction.FetchByID(this.SourceTransactionID);
				}
				return _SourceTransaction;
			}
			set
			{
				SetColumnValue("SourceTransactionID", value.TransactionID);
				_SourceTransaction = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_PR_OfficeTransactions_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return OfficeTransactionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn OfficeTransactionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn OfficeTransactionTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SourceTransactionIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn OfficeCheckIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string OfficeTransactionID = @"OfficeTransactionID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string OfficeTransactionTypeID = @"OfficeTransactionTypeID";
			public static readonly string SourceTransactionID = @"SourceTransactionID";
			public static readonly string OfficeCheckID = @"OfficeCheckID";
			public static readonly string Amount = @"Amount";
			public static readonly string Comments = @"Comments";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return OfficeTransactionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_OfficeTransactionType class.
	/// </summary>
	[DataContract]
	public partial class PR_OfficeTransactionTypeCollection : ActiveList<PR_OfficeTransactionType, PR_OfficeTransactionTypeCollection>
	{
		public static PR_OfficeTransactionTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_OfficeTransactionTypeCollection result = new PR_OfficeTransactionTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_OfficeTransactionType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_OfficeTransactionTypes table.
	/// </summary>
	[DataContract]
	public partial class PR_OfficeTransactionType : ActiveRecord<PR_OfficeTransactionType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum OfficeTransactionTypeEnum : int
		{
		}

		//[DataMember]
		//public OfficeTransactionTypeEnum OfficeTransactionTypeCode
		//{
		//	get { return (OfficeTransactionTypeEnum)OfficeTransactionTypeID; }
		//	set { OfficeTransactionTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_OfficeTransactionType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_OfficeTransactionTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarOfficeTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarOfficeTransactionTypeID.ColumnName = "OfficeTransactionTypeID";
				colvarOfficeTransactionTypeID.DataType = DbType.Int32;
				colvarOfficeTransactionTypeID.MaxLength = 0;
				colvarOfficeTransactionTypeID.AutoIncrement = true;
				colvarOfficeTransactionTypeID.IsNullable = false;
				colvarOfficeTransactionTypeID.IsPrimaryKey = true;
				colvarOfficeTransactionTypeID.IsForeignKey = false;
				colvarOfficeTransactionTypeID.IsReadOnly = false;
				colvarOfficeTransactionTypeID.DefaultSetting = @"";
				colvarOfficeTransactionTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeTransactionTypeID);

				TableSchema.TableColumn colvarOfficeTransactionTypeName = new TableSchema.TableColumn(schema);
				colvarOfficeTransactionTypeName.ColumnName = "OfficeTransactionTypeName";
				colvarOfficeTransactionTypeName.DataType = DbType.String;
				colvarOfficeTransactionTypeName.MaxLength = 100;
				colvarOfficeTransactionTypeName.AutoIncrement = false;
				colvarOfficeTransactionTypeName.IsNullable = false;
				colvarOfficeTransactionTypeName.IsPrimaryKey = false;
				colvarOfficeTransactionTypeName.IsForeignKey = false;
				colvarOfficeTransactionTypeName.IsReadOnly = false;
				colvarOfficeTransactionTypeName.DefaultSetting = @"";
				colvarOfficeTransactionTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeTransactionTypeName);

				TableSchema.TableColumn colvarGPTransactionCode = new TableSchema.TableColumn(schema);
				colvarGPTransactionCode.ColumnName = "GPTransactionCode";
				colvarGPTransactionCode.DataType = DbType.String;
				colvarGPTransactionCode.MaxLength = 50;
				colvarGPTransactionCode.AutoIncrement = false;
				colvarGPTransactionCode.IsNullable = true;
				colvarGPTransactionCode.IsPrimaryKey = false;
				colvarGPTransactionCode.IsForeignKey = false;
				colvarGPTransactionCode.IsReadOnly = false;
				colvarGPTransactionCode.DefaultSetting = @"";
				colvarGPTransactionCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPTransactionCode);

				TableSchema.TableColumn colvarGLCode = new TableSchema.TableColumn(schema);
				colvarGLCode.ColumnName = "GLCode";
				colvarGLCode.DataType = DbType.Int32;
				colvarGLCode.MaxLength = 0;
				colvarGLCode.AutoIncrement = false;
				colvarGLCode.IsNullable = true;
				colvarGLCode.IsPrimaryKey = false;
				colvarGLCode.IsForeignKey = false;
				colvarGLCode.IsReadOnly = false;
				colvarGLCode.DefaultSetting = @"";
				colvarGLCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGLCode);

				TableSchema.TableColumn colvarGPPurchaseOrderCode = new TableSchema.TableColumn(schema);
				colvarGPPurchaseOrderCode.ColumnName = "GPPurchaseOrderCode";
				colvarGPPurchaseOrderCode.DataType = DbType.String;
				colvarGPPurchaseOrderCode.MaxLength = 50;
				colvarGPPurchaseOrderCode.AutoIncrement = false;
				colvarGPPurchaseOrderCode.IsNullable = true;
				colvarGPPurchaseOrderCode.IsPrimaryKey = false;
				colvarGPPurchaseOrderCode.IsForeignKey = false;
				colvarGPPurchaseOrderCode.IsReadOnly = false;
				colvarGPPurchaseOrderCode.DefaultSetting = @"";
				colvarGPPurchaseOrderCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPPurchaseOrderCode);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_OfficeTransactionTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_OfficeTransactionType LoadFrom(PR_OfficeTransactionType item)
		{
			PR_OfficeTransactionType result = new PR_OfficeTransactionType();
			if (item.OfficeTransactionTypeID != default(int)) {
				result.LoadByKey(item.OfficeTransactionTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int OfficeTransactionTypeID {
			get { return GetColumnValue<int>(Columns.OfficeTransactionTypeID); }
			set {
				SetColumnValue(Columns.OfficeTransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeTransactionTypeID));
			}
		}
		[DataMember]
		public string OfficeTransactionTypeName {
			get { return GetColumnValue<string>(Columns.OfficeTransactionTypeName); }
			set {
				SetColumnValue(Columns.OfficeTransactionTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeTransactionTypeName));
			}
		}
		[DataMember]
		public string GPTransactionCode {
			get { return GetColumnValue<string>(Columns.GPTransactionCode); }
			set {
				SetColumnValue(Columns.GPTransactionCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPTransactionCode));
			}
		}
		[DataMember]
		public int? GLCode {
			get { return GetColumnValue<int?>(Columns.GLCode); }
			set {
				SetColumnValue(Columns.GLCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GLCode));
			}
		}
		[DataMember]
		public string GPPurchaseOrderCode {
			get { return GetColumnValue<string>(Columns.GPPurchaseOrderCode); }
			set {
				SetColumnValue(Columns.GPPurchaseOrderCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPPurchaseOrderCode));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return OfficeTransactionTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn OfficeTransactionTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn OfficeTransactionTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn GPTransactionCodeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GLCodeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPPurchaseOrderCodeColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string OfficeTransactionTypeID = @"OfficeTransactionTypeID";
			public static readonly string OfficeTransactionTypeName = @"OfficeTransactionTypeName";
			public static readonly string GPTransactionCode = @"GPTransactionCode";
			public static readonly string GLCode = @"GLCode";
			public static readonly string GPPurchaseOrderCode = @"GPPurchaseOrderCode";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return OfficeTransactionTypeID; }
		}
		*/

		#region Foreign Collections

		private PR_OfficeTransactionCollection _PR_OfficeTransactionsCol;
		//Relationship: FK_PR_OfficeTransactions_PR_OfficeTransactionTypes
		public PR_OfficeTransactionCollection PR_OfficeTransactionsCol
		{
			get
			{
				if(_PR_OfficeTransactionsCol == null) {
					_PR_OfficeTransactionsCol = new PR_OfficeTransactionCollection();
					_PR_OfficeTransactionsCol.LoadAndCloseReader(PR_OfficeTransaction.Query()
						.WHERE(PR_OfficeTransaction.Columns.OfficeTransactionTypeID, OfficeTransactionTypeID).ExecuteReader());
				}
				return _PR_OfficeTransactionsCol;
			}
		}

		private PR_TransactionTypeCollection _PR_TransactionTypesCol;
		//Relationship: FK_PR_TransactionTypes_PR_OfficeTransactionTypes
		public PR_TransactionTypeCollection PR_TransactionTypesCol
		{
			get
			{
				if(_PR_TransactionTypesCol == null) {
					_PR_TransactionTypesCol = new PR_TransactionTypeCollection();
					_PR_TransactionTypesCol.LoadAndCloseReader(PR_TransactionType.Query()
						.WHERE(PR_TransactionType.Columns.RepOfficeTransactionTypeID, OfficeTransactionTypeID).ExecuteReader());
				}
				return _PR_TransactionTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_Paycheck class.
	/// </summary>
	[DataContract]
	public partial class PR_PaycheckCollection : ActiveList<PR_Paycheck, PR_PaycheckCollection>
	{
		public static PR_PaycheckCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_PaycheckCollection result = new PR_PaycheckCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_Paycheck item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_Paychecks table.
	/// </summary>
	[DataContract]
	public partial class PR_Paycheck : ActiveRecord<PR_Paycheck>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_Paycheck()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_Paychecks", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPaycheckID = new TableSchema.TableColumn(schema);
				colvarPaycheckID.ColumnName = "PaycheckID";
				colvarPaycheckID.DataType = DbType.Int32;
				colvarPaycheckID.MaxLength = 0;
				colvarPaycheckID.AutoIncrement = true;
				colvarPaycheckID.IsNullable = false;
				colvarPaycheckID.IsPrimaryKey = true;
				colvarPaycheckID.IsForeignKey = false;
				colvarPaycheckID.IsReadOnly = false;
				colvarPaycheckID.DefaultSetting = @"";
				colvarPaycheckID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaycheckID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 20;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarPayPeriodID = new TableSchema.TableColumn(schema);
				colvarPayPeriodID.ColumnName = "PayPeriodID";
				colvarPayPeriodID.DataType = DbType.Int32;
				colvarPayPeriodID.MaxLength = 0;
				colvarPayPeriodID.AutoIncrement = false;
				colvarPayPeriodID.IsNullable = true;
				colvarPayPeriodID.IsPrimaryKey = false;
				colvarPayPeriodID.IsForeignKey = true;
				colvarPayPeriodID.IsReadOnly = false;
				colvarPayPeriodID.DefaultSetting = @"";
				colvarPayPeriodID.ForeignKeyTableName = "PR_PayPeriods";
				schema.Columns.Add(colvarPayPeriodID);

				TableSchema.TableColumn colvarDetailFileID = new TableSchema.TableColumn(schema);
				colvarDetailFileID.ColumnName = "DetailFileID";
				colvarDetailFileID.DataType = DbType.Int32;
				colvarDetailFileID.MaxLength = 0;
				colvarDetailFileID.AutoIncrement = false;
				colvarDetailFileID.IsNullable = true;
				colvarDetailFileID.IsPrimaryKey = false;
				colvarDetailFileID.IsForeignKey = false;
				colvarDetailFileID.IsReadOnly = false;
				colvarDetailFileID.DefaultSetting = @"";
				colvarDetailFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetailFileID);

				TableSchema.TableColumn colvarBatchID = new TableSchema.TableColumn(schema);
				colvarBatchID.ColumnName = "BatchID";
				colvarBatchID.DataType = DbType.Int32;
				colvarBatchID.MaxLength = 0;
				colvarBatchID.AutoIncrement = false;
				colvarBatchID.IsNullable = true;
				colvarBatchID.IsPrimaryKey = false;
				colvarBatchID.IsForeignKey = true;
				colvarBatchID.IsReadOnly = false;
				colvarBatchID.DefaultSetting = @"";
				colvarBatchID.ForeignKeyTableName = "PR_Batches";
				schema.Columns.Add(colvarBatchID);

				TableSchema.TableColumn colvarGPCheckNumber = new TableSchema.TableColumn(schema);
				colvarGPCheckNumber.ColumnName = "GPCheckNumber";
				colvarGPCheckNumber.DataType = DbType.String;
				colvarGPCheckNumber.MaxLength = 50;
				colvarGPCheckNumber.AutoIncrement = false;
				colvarGPCheckNumber.IsNullable = true;
				colvarGPCheckNumber.IsPrimaryKey = false;
				colvarGPCheckNumber.IsForeignKey = false;
				colvarGPCheckNumber.IsReadOnly = false;
				colvarGPCheckNumber.DefaultSetting = @"";
				colvarGPCheckNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPCheckNumber);

				TableSchema.TableColumn colvarBalance = new TableSchema.TableColumn(schema);
				colvarBalance.ColumnName = "Balance";
				colvarBalance.DataType = DbType.Currency;
				colvarBalance.MaxLength = 0;
				colvarBalance.AutoIncrement = false;
				colvarBalance.IsNullable = false;
				colvarBalance.IsPrimaryKey = false;
				colvarBalance.IsForeignKey = false;
				colvarBalance.IsReadOnly = false;
				colvarBalance.DefaultSetting = @"";
				colvarBalance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBalance);

				TableSchema.TableColumn colvarIsVoided = new TableSchema.TableColumn(schema);
				colvarIsVoided.ColumnName = "IsVoided";
				colvarIsVoided.DataType = DbType.Boolean;
				colvarIsVoided.MaxLength = 0;
				colvarIsVoided.AutoIncrement = false;
				colvarIsVoided.IsNullable = false;
				colvarIsVoided.IsPrimaryKey = false;
				colvarIsVoided.IsForeignKey = false;
				colvarIsVoided.IsReadOnly = false;
				colvarIsVoided.DefaultSetting = @"((0))";
				colvarIsVoided.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVoided);

				TableSchema.TableColumn colvarCurrentPointBank = new TableSchema.TableColumn(schema);
				colvarCurrentPointBank.ColumnName = "CurrentPointBank";
				colvarCurrentPointBank.DataType = DbType.Decimal;
				colvarCurrentPointBank.MaxLength = 0;
				colvarCurrentPointBank.AutoIncrement = false;
				colvarCurrentPointBank.IsNullable = true;
				colvarCurrentPointBank.IsPrimaryKey = false;
				colvarCurrentPointBank.IsForeignKey = false;
				colvarCurrentPointBank.IsReadOnly = false;
				colvarCurrentPointBank.DefaultSetting = @"";
				colvarCurrentPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentPointBank);

				TableSchema.TableColumn colvarCurrentActivationPointBank = new TableSchema.TableColumn(schema);
				colvarCurrentActivationPointBank.ColumnName = "CurrentActivationPointBank";
				colvarCurrentActivationPointBank.DataType = DbType.Decimal;
				colvarCurrentActivationPointBank.MaxLength = 0;
				colvarCurrentActivationPointBank.AutoIncrement = false;
				colvarCurrentActivationPointBank.IsNullable = true;
				colvarCurrentActivationPointBank.IsPrimaryKey = false;
				colvarCurrentActivationPointBank.IsForeignKey = false;
				colvarCurrentActivationPointBank.IsReadOnly = false;
				colvarCurrentActivationPointBank.DefaultSetting = @"";
				colvarCurrentActivationPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentActivationPointBank);

				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = -1;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = true;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_Paychecks",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_Paycheck LoadFrom(PR_Paycheck item)
		{
			PR_Paycheck result = new PR_Paycheck();
			if (item.PaycheckID != default(int)) {
				result.LoadByKey(item.PaycheckID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PaycheckID {
			get { return GetColumnValue<int>(Columns.PaycheckID); }
			set {
				SetColumnValue(Columns.PaycheckID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaycheckID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public int? PayPeriodID {
			get { return GetColumnValue<int?>(Columns.PayPeriodID); }
			set {
				SetColumnValue(Columns.PayPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayPeriodID));
			}
		}
		[DataMember]
		public int? DetailFileID {
			get { return GetColumnValue<int?>(Columns.DetailFileID); }
			set {
				SetColumnValue(Columns.DetailFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DetailFileID));
			}
		}
		[DataMember]
		public int? BatchID {
			get { return GetColumnValue<int?>(Columns.BatchID); }
			set {
				SetColumnValue(Columns.BatchID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BatchID));
			}
		}
		[DataMember]
		public string GPCheckNumber {
			get { return GetColumnValue<string>(Columns.GPCheckNumber); }
			set {
				SetColumnValue(Columns.GPCheckNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPCheckNumber));
			}
		}
		[DataMember]
		public decimal Balance {
			get { return GetColumnValue<decimal>(Columns.Balance); }
			set {
				SetColumnValue(Columns.Balance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Balance));
			}
		}
		[DataMember]
		public bool IsVoided {
			get { return GetColumnValue<bool>(Columns.IsVoided); }
			set {
				SetColumnValue(Columns.IsVoided, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsVoided));
			}
		}
		[DataMember]
		public decimal? CurrentPointBank {
			get { return GetColumnValue<decimal?>(Columns.CurrentPointBank); }
			set {
				SetColumnValue(Columns.CurrentPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CurrentPointBank));
			}
		}
		[DataMember]
		public decimal? CurrentActivationPointBank {
			get { return GetColumnValue<decimal?>(Columns.CurrentActivationPointBank); }
			set {
				SetColumnValue(Columns.CurrentActivationPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CurrentActivationPointBank));
			}
		}
		[DataMember]
		public string Note {
			get { return GetColumnValue<string>(Columns.Note); }
			set {
				SetColumnValue(Columns.Note, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Note));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_Batch _Batch;
		//Relationship: FK_PR_Paychecks_PR_Batches
		public PR_Batch Batch
		{
			get
			{
				if(_Batch == null) {
					_Batch = PR_Batch.FetchByID(this.BatchID);
				}
				return _Batch;
			}
			set
			{
				SetColumnValue("BatchID", value.BatchID);
				_Batch = value;
			}
		}

		private PR_PayPeriod _PayPeriod;
		//Relationship: FK_PR_Paychecks_PR_PayPeriods
		public PR_PayPeriod PayPeriod
		{
			get
			{
				if(_PayPeriod == null) {
					_PayPeriod = PR_PayPeriod.FetchByID(this.PayPeriodID);
				}
				return _PayPeriod;
			}
			set
			{
				SetColumnValue("PayPeriodID", value.PayPeriodID);
				_PayPeriod = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return GPEmployeeID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PaycheckIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PayPeriodIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DetailFileIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn BatchIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn GPCheckNumberColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn BalanceColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsVoidedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CurrentPointBankColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CurrentActivationPointBankColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn NoteColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PaycheckID = @"PaycheckID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string PayPeriodID = @"PayPeriodID";
			public static readonly string DetailFileID = @"DetailFileID";
			public static readonly string BatchID = @"BatchID";
			public static readonly string GPCheckNumber = @"GPCheckNumber";
			public static readonly string Balance = @"Balance";
			public static readonly string IsVoided = @"IsVoided";
			public static readonly string CurrentPointBank = @"CurrentPointBank";
			public static readonly string CurrentActivationPointBank = @"CurrentActivationPointBank";
			public static readonly string Note = @"Note";
			public static readonly string CreatedByDate = @"CreatedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PaycheckID; }
		}
		*/

		#region Foreign Collections

		private PR_RegionalResidualCollection _PR_RegionalResidualsCol;
		//Relationship: FK_PR_RegionalResiduals_PR_Paychecks
		public PR_RegionalResidualCollection PR_RegionalResidualsCol
		{
			get
			{
				if(_PR_RegionalResidualsCol == null) {
					_PR_RegionalResidualsCol = new PR_RegionalResidualCollection();
					_PR_RegionalResidualsCol.LoadAndCloseReader(PR_RegionalResidual.Query()
						.WHERE(PR_RegionalResidual.Columns.PaycheckID, PaycheckID).ExecuteReader());
				}
				return _PR_RegionalResidualsCol;
			}
		}

		private PR_RollingTransactionCollection _PR_RollingTransactionsCol;
		//Relationship: FK_PR_RollingTransactions_PR_Paychecks
		public PR_RollingTransactionCollection PR_RollingTransactionsCol
		{
			get
			{
				if(_PR_RollingTransactionsCol == null) {
					_PR_RollingTransactionsCol = new PR_RollingTransactionCollection();
					_PR_RollingTransactionsCol.LoadAndCloseReader(PR_RollingTransaction.Query()
						.WHERE(PR_RollingTransaction.Columns.PaycheckID, PaycheckID).ExecuteReader());
				}
				return _PR_RollingTransactionsCol;
			}
		}

		private PR_TransactionCollection _PR_TransactionsCol;
		//Relationship: FK_PR_Transactions_PR_Paychecks
		public PR_TransactionCollection PR_TransactionsCol
		{
			get
			{
				if(_PR_TransactionsCol == null) {
					_PR_TransactionsCol = new PR_TransactionCollection();
					_PR_TransactionsCol.LoadAndCloseReader(PR_Transaction.Query()
						.WHERE(PR_Transaction.Columns.PaycheckID, PaycheckID).ExecuteReader());
				}
				return _PR_TransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_PayPeriod class.
	/// </summary>
	[DataContract]
	public partial class PR_PayPeriodCollection : ActiveList<PR_PayPeriod, PR_PayPeriodCollection>
	{
		public static PR_PayPeriodCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_PayPeriodCollection result = new PR_PayPeriodCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_PayPeriod item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_PayPeriods table.
	/// </summary>
	[DataContract]
	public partial class PR_PayPeriod : ActiveRecord<PR_PayPeriod>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_PayPeriod()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_PayPeriods", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPayPeriodID = new TableSchema.TableColumn(schema);
				colvarPayPeriodID.ColumnName = "PayPeriodID";
				colvarPayPeriodID.DataType = DbType.Int32;
				colvarPayPeriodID.MaxLength = 0;
				colvarPayPeriodID.AutoIncrement = true;
				colvarPayPeriodID.IsNullable = false;
				colvarPayPeriodID.IsPrimaryKey = true;
				colvarPayPeriodID.IsForeignKey = false;
				colvarPayPeriodID.IsReadOnly = false;
				colvarPayPeriodID.DefaultSetting = @"";
				colvarPayPeriodID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayPeriodID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "StartDate";
				colvarStartDate.DataType = DbType.DateTime;
				colvarStartDate.MaxLength = 0;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = false;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);

				TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
				colvarEndDate.ColumnName = "EndDate";
				colvarEndDate.DataType = DbType.DateTime;
				colvarEndDate.MaxLength = 0;
				colvarEndDate.AutoIncrement = false;
				colvarEndDate.IsNullable = false;
				colvarEndDate.IsPrimaryKey = false;
				colvarEndDate.IsForeignKey = false;
				colvarEndDate.IsReadOnly = false;
				colvarEndDate.DefaultSetting = @"";
				colvarEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDate);

				TableSchema.TableColumn colvarProcessDate = new TableSchema.TableColumn(schema);
				colvarProcessDate.ColumnName = "ProcessDate";
				colvarProcessDate.DataType = DbType.DateTime;
				colvarProcessDate.MaxLength = 0;
				colvarProcessDate.AutoIncrement = false;
				colvarProcessDate.IsNullable = false;
				colvarProcessDate.IsPrimaryKey = false;
				colvarProcessDate.IsForeignKey = false;
				colvarProcessDate.IsReadOnly = false;
				colvarProcessDate.DefaultSetting = @"";
				colvarProcessDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProcessDate);

				TableSchema.TableColumn colvarCheckDate = new TableSchema.TableColumn(schema);
				colvarCheckDate.ColumnName = "CheckDate";
				colvarCheckDate.DataType = DbType.DateTime;
				colvarCheckDate.MaxLength = 0;
				colvarCheckDate.AutoIncrement = false;
				colvarCheckDate.IsNullable = false;
				colvarCheckDate.IsPrimaryKey = false;
				colvarCheckDate.IsForeignKey = false;
				colvarCheckDate.IsReadOnly = false;
				colvarCheckDate.DefaultSetting = @"";
				colvarCheckDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCheckDate);

				TableSchema.TableColumn colvarRunDate = new TableSchema.TableColumn(schema);
				colvarRunDate.ColumnName = "RunDate";
				colvarRunDate.DataType = DbType.DateTime;
				colvarRunDate.MaxLength = 0;
				colvarRunDate.AutoIncrement = false;
				colvarRunDate.IsNullable = true;
				colvarRunDate.IsPrimaryKey = false;
				colvarRunDate.IsForeignKey = false;
				colvarRunDate.IsReadOnly = false;
				colvarRunDate.DefaultSetting = @"(NULL)";
				colvarRunDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRunDate);

				TableSchema.TableColumn colvarHasRunAutomaticTransactions = new TableSchema.TableColumn(schema);
				colvarHasRunAutomaticTransactions.ColumnName = "HasRunAutomaticTransactions";
				colvarHasRunAutomaticTransactions.DataType = DbType.Boolean;
				colvarHasRunAutomaticTransactions.MaxLength = 0;
				colvarHasRunAutomaticTransactions.AutoIncrement = false;
				colvarHasRunAutomaticTransactions.IsNullable = false;
				colvarHasRunAutomaticTransactions.IsPrimaryKey = false;
				colvarHasRunAutomaticTransactions.IsForeignKey = false;
				colvarHasRunAutomaticTransactions.IsReadOnly = false;
				colvarHasRunAutomaticTransactions.DefaultSetting = @"((0))";
				colvarHasRunAutomaticTransactions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasRunAutomaticTransactions);

				TableSchema.TableColumn colvarHasRunOfficeChecks = new TableSchema.TableColumn(schema);
				colvarHasRunOfficeChecks.ColumnName = "HasRunOfficeChecks";
				colvarHasRunOfficeChecks.DataType = DbType.Boolean;
				colvarHasRunOfficeChecks.MaxLength = 0;
				colvarHasRunOfficeChecks.AutoIncrement = false;
				colvarHasRunOfficeChecks.IsNullable = false;
				colvarHasRunOfficeChecks.IsPrimaryKey = false;
				colvarHasRunOfficeChecks.IsForeignKey = false;
				colvarHasRunOfficeChecks.IsReadOnly = false;
				colvarHasRunOfficeChecks.DefaultSetting = @"((0))";
				colvarHasRunOfficeChecks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasRunOfficeChecks);

				TableSchema.TableColumn colvarPayOfficeNonGas = new TableSchema.TableColumn(schema);
				colvarPayOfficeNonGas.ColumnName = "PayOfficeNonGas";
				colvarPayOfficeNonGas.DataType = DbType.Boolean;
				colvarPayOfficeNonGas.MaxLength = 0;
				colvarPayOfficeNonGas.AutoIncrement = false;
				colvarPayOfficeNonGas.IsNullable = false;
				colvarPayOfficeNonGas.IsPrimaryKey = false;
				colvarPayOfficeNonGas.IsForeignKey = false;
				colvarPayOfficeNonGas.IsReadOnly = false;
				colvarPayOfficeNonGas.DefaultSetting = @"((0))";
				colvarPayOfficeNonGas.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayOfficeNonGas);

				TableSchema.TableColumn colvarAllowAdvances = new TableSchema.TableColumn(schema);
				colvarAllowAdvances.ColumnName = "AllowAdvances";
				colvarAllowAdvances.DataType = DbType.Boolean;
				colvarAllowAdvances.MaxLength = 0;
				colvarAllowAdvances.AutoIncrement = false;
				colvarAllowAdvances.IsNullable = false;
				colvarAllowAdvances.IsPrimaryKey = false;
				colvarAllowAdvances.IsForeignKey = false;
				colvarAllowAdvances.IsReadOnly = false;
				colvarAllowAdvances.DefaultSetting = @"((0))";
				colvarAllowAdvances.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowAdvances);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_PayPeriods",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_PayPeriod LoadFrom(PR_PayPeriod item)
		{
			PR_PayPeriod result = new PR_PayPeriod();
			if (item.PayPeriodID != default(int)) {
				result.LoadByKey(item.PayPeriodID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PayPeriodID {
			get { return GetColumnValue<int>(Columns.PayPeriodID); }
			set {
				SetColumnValue(Columns.PayPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayPeriodID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public DateTime StartDate {
			get { return GetColumnValue<DateTime>(Columns.StartDate); }
			set {
				SetColumnValue(Columns.StartDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartDate));
			}
		}
		[DataMember]
		public DateTime EndDate {
			get { return GetColumnValue<DateTime>(Columns.EndDate); }
			set {
				SetColumnValue(Columns.EndDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EndDate));
			}
		}
		[DataMember]
		public DateTime ProcessDate {
			get { return GetColumnValue<DateTime>(Columns.ProcessDate); }
			set {
				SetColumnValue(Columns.ProcessDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProcessDate));
			}
		}
		[DataMember]
		public DateTime CheckDate {
			get { return GetColumnValue<DateTime>(Columns.CheckDate); }
			set {
				SetColumnValue(Columns.CheckDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CheckDate));
			}
		}
		[DataMember]
		public DateTime? RunDate {
			get { return GetColumnValue<DateTime?>(Columns.RunDate); }
			set {
				SetColumnValue(Columns.RunDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RunDate));
			}
		}
		[DataMember]
		public bool HasRunAutomaticTransactions {
			get { return GetColumnValue<bool>(Columns.HasRunAutomaticTransactions); }
			set {
				SetColumnValue(Columns.HasRunAutomaticTransactions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasRunAutomaticTransactions));
			}
		}
		[DataMember]
		public bool HasRunOfficeChecks {
			get { return GetColumnValue<bool>(Columns.HasRunOfficeChecks); }
			set {
				SetColumnValue(Columns.HasRunOfficeChecks, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasRunOfficeChecks));
			}
		}
		[DataMember]
		public bool PayOfficeNonGas {
			get { return GetColumnValue<bool>(Columns.PayOfficeNonGas); }
			set {
				SetColumnValue(Columns.PayOfficeNonGas, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayOfficeNonGas));
			}
		}
		[DataMember]
		public bool AllowAdvances {
			get { return GetColumnValue<bool>(Columns.AllowAdvances); }
			set {
				SetColumnValue(Columns.AllowAdvances, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AllowAdvances));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _Season;
		//Relationship: FK_PR_PayPeriods_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PayPeriodID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PayPeriodIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn StartDateColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn EndDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ProcessDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CheckDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RunDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn HasRunAutomaticTransactionsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn HasRunOfficeChecksColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn PayOfficeNonGasColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn AllowAdvancesColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PayPeriodID = @"PayPeriodID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string StartDate = @"StartDate";
			public static readonly string EndDate = @"EndDate";
			public static readonly string ProcessDate = @"ProcessDate";
			public static readonly string CheckDate = @"CheckDate";
			public static readonly string RunDate = @"RunDate";
			public static readonly string HasRunAutomaticTransactions = @"HasRunAutomaticTransactions";
			public static readonly string HasRunOfficeChecks = @"HasRunOfficeChecks";
			public static readonly string PayOfficeNonGas = @"PayOfficeNonGas";
			public static readonly string AllowAdvances = @"AllowAdvances";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PayPeriodID; }
		}
		*/

		#region Foreign Collections

		private PR_OfficeCheckCollection _PR_OfficeChecksCol;
		//Relationship: FK_PR_OfficeChecks_PR_PayPeriods
		public PR_OfficeCheckCollection PR_OfficeChecksCol
		{
			get
			{
				if(_PR_OfficeChecksCol == null) {
					_PR_OfficeChecksCol = new PR_OfficeCheckCollection();
					_PR_OfficeChecksCol.LoadAndCloseReader(PR_OfficeCheck.Query()
						.WHERE(PR_OfficeCheck.Columns.PayPeriodID, PayPeriodID).ExecuteReader());
				}
				return _PR_OfficeChecksCol;
			}
		}

		private PR_PaycheckCollection _PR_PaychecksCol;
		//Relationship: FK_PR_Paychecks_PR_PayPeriods
		public PR_PaycheckCollection PR_PaychecksCol
		{
			get
			{
				if(_PR_PaychecksCol == null) {
					_PR_PaychecksCol = new PR_PaycheckCollection();
					_PR_PaychecksCol.LoadAndCloseReader(PR_Paycheck.Query()
						.WHERE(PR_Paycheck.Columns.PayPeriodID, PayPeriodID).ExecuteReader());
				}
				return _PR_PaychecksCol;
			}
		}

		private PR_PayPeriodSeasonMappingCollection _PR_PayPeriodSeasonMappingsCol;
		//Relationship: FK_PR_PayPeriodSeasonMappings_PR_PayPeriods
		public PR_PayPeriodSeasonMappingCollection PR_PayPeriodSeasonMappingsCol
		{
			get
			{
				if(_PR_PayPeriodSeasonMappingsCol == null) {
					_PR_PayPeriodSeasonMappingsCol = new PR_PayPeriodSeasonMappingCollection();
					_PR_PayPeriodSeasonMappingsCol.LoadAndCloseReader(PR_PayPeriodSeasonMapping.Query()
						.WHERE(PR_PayPeriodSeasonMapping.Columns.PayPeriodID, PayPeriodID).ExecuteReader());
				}
				return _PR_PayPeriodSeasonMappingsCol;
			}
		}

		private PR_PayPeriodValidAccountSeasonCollection _PR_PayPeriodValidAccountSeasonsCol;
		//Relationship: FK_PR_PayPeriodValidAccountSeasons_PR_PayPeriods
		public PR_PayPeriodValidAccountSeasonCollection PR_PayPeriodValidAccountSeasonsCol
		{
			get
			{
				if(_PR_PayPeriodValidAccountSeasonsCol == null) {
					_PR_PayPeriodValidAccountSeasonsCol = new PR_PayPeriodValidAccountSeasonCollection();
					_PR_PayPeriodValidAccountSeasonsCol.LoadAndCloseReader(PR_PayPeriodValidAccountSeason.Query()
						.WHERE(PR_PayPeriodValidAccountSeason.Columns.PayPeriodID, PayPeriodID).ExecuteReader());
				}
				return _PR_PayPeriodValidAccountSeasonsCol;
			}
		}

		private PR_TransactionCollection _PR_TransactionsCol;
		//Relationship: FK_PR_Transactions_PR_PayPeriods
		public PR_TransactionCollection PR_TransactionsCol
		{
			get
			{
				if(_PR_TransactionsCol == null) {
					_PR_TransactionsCol = new PR_TransactionCollection();
					_PR_TransactionsCol.LoadAndCloseReader(PR_Transaction.Query()
						.WHERE(PR_Transaction.Columns.TargetPayPeriodID, PayPeriodID).ExecuteReader());
				}
				return _PR_TransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_PayPeriodSeasonMapping class.
	/// </summary>
	[DataContract]
	public partial class PR_PayPeriodSeasonMappingCollection : ActiveList<PR_PayPeriodSeasonMapping, PR_PayPeriodSeasonMappingCollection>
	{
		public static PR_PayPeriodSeasonMappingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_PayPeriodSeasonMappingCollection result = new PR_PayPeriodSeasonMappingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_PayPeriodSeasonMapping item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_PayPeriodSeasonMappings table.
	/// </summary>
	[DataContract]
	public partial class PR_PayPeriodSeasonMapping : ActiveRecord<PR_PayPeriodSeasonMapping>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_PayPeriodSeasonMapping()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_PayPeriodSeasonMappings", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPayPeriodID = new TableSchema.TableColumn(schema);
				colvarPayPeriodID.ColumnName = "PayPeriodID";
				colvarPayPeriodID.DataType = DbType.Int32;
				colvarPayPeriodID.MaxLength = 0;
				colvarPayPeriodID.AutoIncrement = false;
				colvarPayPeriodID.IsNullable = false;
				colvarPayPeriodID.IsPrimaryKey = true;
				colvarPayPeriodID.IsForeignKey = false;
				colvarPayPeriodID.IsReadOnly = false;
				colvarPayPeriodID.DefaultSetting = @"";
				colvarPayPeriodID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayPeriodID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarIsValidAccountSeason = new TableSchema.TableColumn(schema);
				colvarIsValidAccountSeason.ColumnName = "IsValidAccountSeason";
				colvarIsValidAccountSeason.DataType = DbType.Boolean;
				colvarIsValidAccountSeason.MaxLength = 0;
				colvarIsValidAccountSeason.AutoIncrement = false;
				colvarIsValidAccountSeason.IsNullable = false;
				colvarIsValidAccountSeason.IsPrimaryKey = false;
				colvarIsValidAccountSeason.IsForeignKey = false;
				colvarIsValidAccountSeason.IsReadOnly = false;
				colvarIsValidAccountSeason.DefaultSetting = @"((1))";
				colvarIsValidAccountSeason.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsValidAccountSeason);

				TableSchema.TableColumn colvarIncludeInYearToDatePaid = new TableSchema.TableColumn(schema);
				colvarIncludeInYearToDatePaid.ColumnName = "IncludeInYearToDatePaid";
				colvarIncludeInYearToDatePaid.DataType = DbType.Boolean;
				colvarIncludeInYearToDatePaid.MaxLength = 0;
				colvarIncludeInYearToDatePaid.AutoIncrement = false;
				colvarIncludeInYearToDatePaid.IsNullable = false;
				colvarIncludeInYearToDatePaid.IsPrimaryKey = false;
				colvarIncludeInYearToDatePaid.IsForeignKey = false;
				colvarIncludeInYearToDatePaid.IsReadOnly = false;
				colvarIncludeInYearToDatePaid.DefaultSetting = @"((1))";
				colvarIncludeInYearToDatePaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncludeInYearToDatePaid);

				TableSchema.TableColumn colvarIncludeInPointBank = new TableSchema.TableColumn(schema);
				colvarIncludeInPointBank.ColumnName = "IncludeInPointBank";
				colvarIncludeInPointBank.DataType = DbType.Boolean;
				colvarIncludeInPointBank.MaxLength = 0;
				colvarIncludeInPointBank.AutoIncrement = false;
				colvarIncludeInPointBank.IsNullable = false;
				colvarIncludeInPointBank.IsPrimaryKey = false;
				colvarIncludeInPointBank.IsForeignKey = false;
				colvarIncludeInPointBank.IsReadOnly = false;
				colvarIncludeInPointBank.DefaultSetting = @"((1))";
				colvarIncludeInPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncludeInPointBank);

				TableSchema.TableColumn colvarIncludeRollingTransactions = new TableSchema.TableColumn(schema);
				colvarIncludeRollingTransactions.ColumnName = "IncludeRollingTransactions";
				colvarIncludeRollingTransactions.DataType = DbType.Boolean;
				colvarIncludeRollingTransactions.MaxLength = 0;
				colvarIncludeRollingTransactions.AutoIncrement = false;
				colvarIncludeRollingTransactions.IsNullable = false;
				colvarIncludeRollingTransactions.IsPrimaryKey = false;
				colvarIncludeRollingTransactions.IsForeignKey = false;
				colvarIncludeRollingTransactions.IsReadOnly = false;
				colvarIncludeRollingTransactions.DefaultSetting = @"((1))";
				colvarIncludeRollingTransactions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncludeRollingTransactions);

				TableSchema.TableColumn colvarIncludePayrollTransactions = new TableSchema.TableColumn(schema);
				colvarIncludePayrollTransactions.ColumnName = "IncludePayrollTransactions";
				colvarIncludePayrollTransactions.DataType = DbType.Boolean;
				colvarIncludePayrollTransactions.MaxLength = 0;
				colvarIncludePayrollTransactions.AutoIncrement = false;
				colvarIncludePayrollTransactions.IsNullable = false;
				colvarIncludePayrollTransactions.IsPrimaryKey = false;
				colvarIncludePayrollTransactions.IsForeignKey = false;
				colvarIncludePayrollTransactions.IsReadOnly = false;
				colvarIncludePayrollTransactions.DefaultSetting = @"((1))";
				colvarIncludePayrollTransactions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncludePayrollTransactions);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_PayPeriodSeasonMappings",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_PayPeriodSeasonMapping LoadFrom(PR_PayPeriodSeasonMapping item)
		{
			PR_PayPeriodSeasonMapping result = new PR_PayPeriodSeasonMapping();
			if (item.PayPeriodID != default(int)) {
				result.LoadByKey(item.PayPeriodID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PayPeriodID {
			get { return GetColumnValue<int>(Columns.PayPeriodID); }
			set {
				SetColumnValue(Columns.PayPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayPeriodID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public bool IsValidAccountSeason {
			get { return GetColumnValue<bool>(Columns.IsValidAccountSeason); }
			set {
				SetColumnValue(Columns.IsValidAccountSeason, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsValidAccountSeason));
			}
		}
		[DataMember]
		public bool IncludeInYearToDatePaid {
			get { return GetColumnValue<bool>(Columns.IncludeInYearToDatePaid); }
			set {
				SetColumnValue(Columns.IncludeInYearToDatePaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncludeInYearToDatePaid));
			}
		}
		[DataMember]
		public bool IncludeInPointBank {
			get { return GetColumnValue<bool>(Columns.IncludeInPointBank); }
			set {
				SetColumnValue(Columns.IncludeInPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncludeInPointBank));
			}
		}
		[DataMember]
		public bool IncludeRollingTransactions {
			get { return GetColumnValue<bool>(Columns.IncludeRollingTransactions); }
			set {
				SetColumnValue(Columns.IncludeRollingTransactions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncludeRollingTransactions));
			}
		}
		[DataMember]
		public bool IncludePayrollTransactions {
			get { return GetColumnValue<bool>(Columns.IncludePayrollTransactions); }
			set {
				SetColumnValue(Columns.IncludePayrollTransactions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncludePayrollTransactions));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_PayPeriod _PayPeriod;
		//Relationship: FK_PR_PayPeriodSeasonMappings_PR_PayPeriods
		public PR_PayPeriod PayPeriod
		{
			get
			{
				if(_PayPeriod == null) {
					_PayPeriod = PR_PayPeriod.FetchByID(this.PayPeriodID);
				}
				return _PayPeriod;
			}
			set
			{
				SetColumnValue("PayPeriodID", value.PayPeriodID);
				_PayPeriod = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_PayPeriodSeasonMappings_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PayPeriodID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PayPeriodIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsValidAccountSeasonColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IncludeInYearToDatePaidColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IncludeInPointBankColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IncludeRollingTransactionsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IncludePayrollTransactionsColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PayPeriodID = @"PayPeriodID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string IsValidAccountSeason = @"IsValidAccountSeason";
			public static readonly string IncludeInYearToDatePaid = @"IncludeInYearToDatePaid";
			public static readonly string IncludeInPointBank = @"IncludeInPointBank";
			public static readonly string IncludeRollingTransactions = @"IncludeRollingTransactions";
			public static readonly string IncludePayrollTransactions = @"IncludePayrollTransactions";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PayPeriodID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_PayPeriodValidAccountSeason class.
	/// </summary>
	[DataContract]
	public partial class PR_PayPeriodValidAccountSeasonCollection : ActiveList<PR_PayPeriodValidAccountSeason, PR_PayPeriodValidAccountSeasonCollection>
	{
		public static PR_PayPeriodValidAccountSeasonCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_PayPeriodValidAccountSeasonCollection result = new PR_PayPeriodValidAccountSeasonCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_PayPeriodValidAccountSeason item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_PayPeriodValidAccountSeasons table.
	/// </summary>
	[DataContract]
	public partial class PR_PayPeriodValidAccountSeason : ActiveRecord<PR_PayPeriodValidAccountSeason>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_PayPeriodValidAccountSeason()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_PayPeriodValidAccountSeasons", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPayPeriodID = new TableSchema.TableColumn(schema);
				colvarPayPeriodID.ColumnName = "PayPeriodID";
				colvarPayPeriodID.DataType = DbType.Int32;
				colvarPayPeriodID.MaxLength = 0;
				colvarPayPeriodID.AutoIncrement = false;
				colvarPayPeriodID.IsNullable = false;
				colvarPayPeriodID.IsPrimaryKey = true;
				colvarPayPeriodID.IsForeignKey = false;
				colvarPayPeriodID.IsReadOnly = false;
				colvarPayPeriodID.DefaultSetting = @"";
				colvarPayPeriodID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayPeriodID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_PayPeriodValidAccountSeasons",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_PayPeriodValidAccountSeason LoadFrom(PR_PayPeriodValidAccountSeason item)
		{
			PR_PayPeriodValidAccountSeason result = new PR_PayPeriodValidAccountSeason();
			if (item.PayPeriodID != default(int)) {
				result.LoadByKey(item.PayPeriodID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PayPeriodID {
			get { return GetColumnValue<int>(Columns.PayPeriodID); }
			set {
				SetColumnValue(Columns.PayPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayPeriodID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_PayPeriod _PayPeriod;
		//Relationship: FK_PR_PayPeriodValidAccountSeasons_PR_PayPeriods
		public PR_PayPeriod PayPeriod
		{
			get
			{
				if(_PayPeriod == null) {
					_PayPeriod = PR_PayPeriod.FetchByID(this.PayPeriodID);
				}
				return _PayPeriod;
			}
			set
			{
				SetColumnValue("PayPeriodID", value.PayPeriodID);
				_PayPeriod = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_PayPeriodValidAccountSeasons_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PayPeriodID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PayPeriodIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PayPeriodID = @"PayPeriodID";
			public static readonly string SeasonID = @"SeasonID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PayPeriodID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_PaySchedule class.
	/// </summary>
	[DataContract]
	public partial class PR_PayScheduleCollection : ActiveList<PR_PaySchedule, PR_PayScheduleCollection>
	{
		public static PR_PayScheduleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_PayScheduleCollection result = new PR_PayScheduleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_PaySchedule item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_PaySchedules table.
	/// </summary>
	[DataContract]
	public partial class PR_PaySchedule : ActiveRecord<PR_PaySchedule>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_PaySchedule()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_PaySchedules", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPayScheduleID = new TableSchema.TableColumn(schema);
				colvarPayScheduleID.ColumnName = "PayScheduleID";
				colvarPayScheduleID.DataType = DbType.Int32;
				colvarPayScheduleID.MaxLength = 0;
				colvarPayScheduleID.AutoIncrement = true;
				colvarPayScheduleID.IsNullable = false;
				colvarPayScheduleID.IsPrimaryKey = true;
				colvarPayScheduleID.IsForeignKey = false;
				colvarPayScheduleID.IsReadOnly = false;
				colvarPayScheduleID.DefaultSetting = @"";
				colvarPayScheduleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayScheduleID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarIsDefaultForSeason = new TableSchema.TableColumn(schema);
				colvarIsDefaultForSeason.ColumnName = "IsDefaultForSeason";
				colvarIsDefaultForSeason.DataType = DbType.Boolean;
				colvarIsDefaultForSeason.MaxLength = 0;
				colvarIsDefaultForSeason.AutoIncrement = false;
				colvarIsDefaultForSeason.IsNullable = false;
				colvarIsDefaultForSeason.IsPrimaryKey = false;
				colvarIsDefaultForSeason.IsForeignKey = false;
				colvarIsDefaultForSeason.IsReadOnly = false;
				colvarIsDefaultForSeason.DefaultSetting = @"((0))";
				colvarIsDefaultForSeason.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDefaultForSeason);

				TableSchema.TableColumn colvarUserTypeID = new TableSchema.TableColumn(schema);
				colvarUserTypeID.ColumnName = "UserTypeID";
				colvarUserTypeID.DataType = DbType.Int16;
				colvarUserTypeID.MaxLength = 0;
				colvarUserTypeID.AutoIncrement = false;
				colvarUserTypeID.IsNullable = true;
				colvarUserTypeID.IsPrimaryKey = false;
				colvarUserTypeID.IsForeignKey = true;
				colvarUserTypeID.IsReadOnly = false;
				colvarUserTypeID.DefaultSetting = @"";
				colvarUserTypeID.ForeignKeyTableName = "RU_UserType";
				schema.Columns.Add(colvarUserTypeID);

				TableSchema.TableColumn colvarFriendlyName = new TableSchema.TableColumn(schema);
				colvarFriendlyName.ColumnName = "FriendlyName";
				colvarFriendlyName.DataType = DbType.String;
				colvarFriendlyName.MaxLength = 100;
				colvarFriendlyName.AutoIncrement = false;
				colvarFriendlyName.IsNullable = true;
				colvarFriendlyName.IsPrimaryKey = false;
				colvarFriendlyName.IsForeignKey = false;
				colvarFriendlyName.IsReadOnly = false;
				colvarFriendlyName.DefaultSetting = @"";
				colvarFriendlyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFriendlyName);

				TableSchema.TableColumn colvarBaseSaleCommission = new TableSchema.TableColumn(schema);
				colvarBaseSaleCommission.ColumnName = "BaseSaleCommission";
				colvarBaseSaleCommission.DataType = DbType.Currency;
				colvarBaseSaleCommission.MaxLength = 0;
				colvarBaseSaleCommission.AutoIncrement = false;
				colvarBaseSaleCommission.IsNullable = false;
				colvarBaseSaleCommission.IsPrimaryKey = false;
				colvarBaseSaleCommission.IsForeignKey = false;
				colvarBaseSaleCommission.IsReadOnly = false;
				colvarBaseSaleCommission.DefaultSetting = @"";
				colvarBaseSaleCommission.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaseSaleCommission);

				TableSchema.TableColumn colvarBaseSubCommission = new TableSchema.TableColumn(schema);
				colvarBaseSubCommission.ColumnName = "BaseSubCommission";
				colvarBaseSubCommission.DataType = DbType.Currency;
				colvarBaseSubCommission.MaxLength = 0;
				colvarBaseSubCommission.AutoIncrement = false;
				colvarBaseSubCommission.IsNullable = false;
				colvarBaseSubCommission.IsPrimaryKey = false;
				colvarBaseSubCommission.IsForeignKey = false;
				colvarBaseSubCommission.IsReadOnly = false;
				colvarBaseSubCommission.DefaultSetting = @"";
				colvarBaseSubCommission.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaseSubCommission);

				TableSchema.TableColumn colvarRaisedRMRFrontendBonus = new TableSchema.TableColumn(schema);
				colvarRaisedRMRFrontendBonus.ColumnName = "RaisedRMRFrontendBonus";
				colvarRaisedRMRFrontendBonus.DataType = DbType.Currency;
				colvarRaisedRMRFrontendBonus.MaxLength = 0;
				colvarRaisedRMRFrontendBonus.AutoIncrement = false;
				colvarRaisedRMRFrontendBonus.IsNullable = false;
				colvarRaisedRMRFrontendBonus.IsPrimaryKey = false;
				colvarRaisedRMRFrontendBonus.IsForeignKey = false;
				colvarRaisedRMRFrontendBonus.IsReadOnly = false;
				colvarRaisedRMRFrontendBonus.DefaultSetting = @"";
				colvarRaisedRMRFrontendBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRaisedRMRFrontendBonus);

				TableSchema.TableColumn colvarExtendedContractFrontendBonus = new TableSchema.TableColumn(schema);
				colvarExtendedContractFrontendBonus.ColumnName = "ExtendedContractFrontendBonus";
				colvarExtendedContractFrontendBonus.DataType = DbType.Currency;
				colvarExtendedContractFrontendBonus.MaxLength = 0;
				colvarExtendedContractFrontendBonus.AutoIncrement = false;
				colvarExtendedContractFrontendBonus.IsNullable = false;
				colvarExtendedContractFrontendBonus.IsPrimaryKey = false;
				colvarExtendedContractFrontendBonus.IsForeignKey = false;
				colvarExtendedContractFrontendBonus.IsReadOnly = false;
				colvarExtendedContractFrontendBonus.DefaultSetting = @"";
				colvarExtendedContractFrontendBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtendedContractFrontendBonus);

				TableSchema.TableColumn colvarCombinedFrontendBonus = new TableSchema.TableColumn(schema);
				colvarCombinedFrontendBonus.ColumnName = "CombinedFrontendBonus";
				colvarCombinedFrontendBonus.DataType = DbType.Currency;
				colvarCombinedFrontendBonus.MaxLength = 0;
				colvarCombinedFrontendBonus.AutoIncrement = false;
				colvarCombinedFrontendBonus.IsNullable = false;
				colvarCombinedFrontendBonus.IsPrimaryKey = false;
				colvarCombinedFrontendBonus.IsForeignKey = false;
				colvarCombinedFrontendBonus.IsReadOnly = false;
				colvarCombinedFrontendBonus.DefaultSetting = @"";
				colvarCombinedFrontendBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCombinedFrontendBonus);

				TableSchema.TableColumn colvarActivationWaiveDeduction = new TableSchema.TableColumn(schema);
				colvarActivationWaiveDeduction.ColumnName = "ActivationWaiveDeduction";
				colvarActivationWaiveDeduction.DataType = DbType.Currency;
				colvarActivationWaiveDeduction.MaxLength = 0;
				colvarActivationWaiveDeduction.AutoIncrement = false;
				colvarActivationWaiveDeduction.IsNullable = false;
				colvarActivationWaiveDeduction.IsPrimaryKey = false;
				colvarActivationWaiveDeduction.IsForeignKey = false;
				colvarActivationWaiveDeduction.IsReadOnly = false;
				colvarActivationWaiveDeduction.DefaultSetting = @"";
				colvarActivationWaiveDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationWaiveDeduction);

				TableSchema.TableColumn colvarPricePerPoint = new TableSchema.TableColumn(schema);
				colvarPricePerPoint.ColumnName = "PricePerPoint";
				colvarPricePerPoint.DataType = DbType.Currency;
				colvarPricePerPoint.MaxLength = 0;
				colvarPricePerPoint.AutoIncrement = false;
				colvarPricePerPoint.IsNullable = false;
				colvarPricePerPoint.IsPrimaryKey = false;
				colvarPricePerPoint.IsForeignKey = false;
				colvarPricePerPoint.IsReadOnly = false;
				colvarPricePerPoint.DefaultSetting = @"((0))";
				colvarPricePerPoint.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPricePerPoint);

				TableSchema.TableColumn colvarFullPricePerPoint = new TableSchema.TableColumn(schema);
				colvarFullPricePerPoint.ColumnName = "FullPricePerPoint";
				colvarFullPricePerPoint.DataType = DbType.Currency;
				colvarFullPricePerPoint.MaxLength = 0;
				colvarFullPricePerPoint.AutoIncrement = false;
				colvarFullPricePerPoint.IsNullable = false;
				colvarFullPricePerPoint.IsPrimaryKey = false;
				colvarFullPricePerPoint.IsForeignKey = false;
				colvarFullPricePerPoint.IsReadOnly = false;
				colvarFullPricePerPoint.DefaultSetting = @"((30))";
				colvarFullPricePerPoint.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullPricePerPoint);

				TableSchema.TableColumn colvarUpfrontPricePerPoint = new TableSchema.TableColumn(schema);
				colvarUpfrontPricePerPoint.ColumnName = "UpfrontPricePerPoint";
				colvarUpfrontPricePerPoint.DataType = DbType.Currency;
				colvarUpfrontPricePerPoint.MaxLength = 0;
				colvarUpfrontPricePerPoint.AutoIncrement = false;
				colvarUpfrontPricePerPoint.IsNullable = false;
				colvarUpfrontPricePerPoint.IsPrimaryKey = false;
				colvarUpfrontPricePerPoint.IsForeignKey = false;
				colvarUpfrontPricePerPoint.IsReadOnly = false;
				colvarUpfrontPricePerPoint.DefaultSetting = @"((15))";
				colvarUpfrontPricePerPoint.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpfrontPricePerPoint);

				TableSchema.TableColumn colvarInvoiceBillDeduction = new TableSchema.TableColumn(schema);
				colvarInvoiceBillDeduction.ColumnName = "InvoiceBillDeduction";
				colvarInvoiceBillDeduction.DataType = DbType.Currency;
				colvarInvoiceBillDeduction.MaxLength = 0;
				colvarInvoiceBillDeduction.AutoIncrement = false;
				colvarInvoiceBillDeduction.IsNullable = false;
				colvarInvoiceBillDeduction.IsPrimaryKey = false;
				colvarInvoiceBillDeduction.IsForeignKey = false;
				colvarInvoiceBillDeduction.IsReadOnly = false;
				colvarInvoiceBillDeduction.DefaultSetting = @"((0))";
				colvarInvoiceBillDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceBillDeduction);

				TableSchema.TableColumn colvarPassCreditDeduction = new TableSchema.TableColumn(schema);
				colvarPassCreditDeduction.ColumnName = "PassCreditDeduction";
				colvarPassCreditDeduction.DataType = DbType.Currency;
				colvarPassCreditDeduction.MaxLength = 0;
				colvarPassCreditDeduction.AutoIncrement = false;
				colvarPassCreditDeduction.IsNullable = false;
				colvarPassCreditDeduction.IsPrimaryKey = false;
				colvarPassCreditDeduction.IsForeignKey = false;
				colvarPassCreditDeduction.IsReadOnly = false;
				colvarPassCreditDeduction.DefaultSetting = @"((0))";
				colvarPassCreditDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassCreditDeduction);

				TableSchema.TableColumn colvarShortenedContractDeduction = new TableSchema.TableColumn(schema);
				colvarShortenedContractDeduction.ColumnName = "ShortenedContractDeduction";
				colvarShortenedContractDeduction.DataType = DbType.Currency;
				colvarShortenedContractDeduction.MaxLength = 0;
				colvarShortenedContractDeduction.AutoIncrement = false;
				colvarShortenedContractDeduction.IsNullable = false;
				colvarShortenedContractDeduction.IsPrimaryKey = false;
				colvarShortenedContractDeduction.IsForeignKey = false;
				colvarShortenedContractDeduction.IsReadOnly = false;
				colvarShortenedContractDeduction.DefaultSetting = @"((0))";
				colvarShortenedContractDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortenedContractDeduction);

				TableSchema.TableColumn colvarLoweredRMRAboveMinimumDeduction = new TableSchema.TableColumn(schema);
				colvarLoweredRMRAboveMinimumDeduction.ColumnName = "LoweredRMRAboveMinimumDeduction";
				colvarLoweredRMRAboveMinimumDeduction.DataType = DbType.Currency;
				colvarLoweredRMRAboveMinimumDeduction.MaxLength = 0;
				colvarLoweredRMRAboveMinimumDeduction.AutoIncrement = false;
				colvarLoweredRMRAboveMinimumDeduction.IsNullable = false;
				colvarLoweredRMRAboveMinimumDeduction.IsPrimaryKey = false;
				colvarLoweredRMRAboveMinimumDeduction.IsForeignKey = false;
				colvarLoweredRMRAboveMinimumDeduction.IsReadOnly = false;
				colvarLoweredRMRAboveMinimumDeduction.DefaultSetting = @"((0))";
				colvarLoweredRMRAboveMinimumDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoweredRMRAboveMinimumDeduction);

				TableSchema.TableColumn colvarLoweredRMRBelowMinimumDeduction = new TableSchema.TableColumn(schema);
				colvarLoweredRMRBelowMinimumDeduction.ColumnName = "LoweredRMRBelowMinimumDeduction";
				colvarLoweredRMRBelowMinimumDeduction.DataType = DbType.Currency;
				colvarLoweredRMRBelowMinimumDeduction.MaxLength = 0;
				colvarLoweredRMRBelowMinimumDeduction.AutoIncrement = false;
				colvarLoweredRMRBelowMinimumDeduction.IsNullable = false;
				colvarLoweredRMRBelowMinimumDeduction.IsPrimaryKey = false;
				colvarLoweredRMRBelowMinimumDeduction.IsForeignKey = false;
				colvarLoweredRMRBelowMinimumDeduction.IsReadOnly = false;
				colvarLoweredRMRBelowMinimumDeduction.DefaultSetting = @"((0))";
				colvarLoweredRMRBelowMinimumDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoweredRMRBelowMinimumDeduction);

				TableSchema.TableColumn colvarBaseInstallPay = new TableSchema.TableColumn(schema);
				colvarBaseInstallPay.ColumnName = "BaseInstallPay";
				colvarBaseInstallPay.DataType = DbType.Currency;
				colvarBaseInstallPay.MaxLength = 0;
				colvarBaseInstallPay.AutoIncrement = false;
				colvarBaseInstallPay.IsNullable = false;
				colvarBaseInstallPay.IsPrimaryKey = false;
				colvarBaseInstallPay.IsForeignKey = false;
				colvarBaseInstallPay.IsReadOnly = false;
				colvarBaseInstallPay.DefaultSetting = @"";
				colvarBaseInstallPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaseInstallPay);

				TableSchema.TableColumn colvarBaseContractLength = new TableSchema.TableColumn(schema);
				colvarBaseContractLength.ColumnName = "BaseContractLength";
				colvarBaseContractLength.DataType = DbType.Int32;
				colvarBaseContractLength.MaxLength = 0;
				colvarBaseContractLength.AutoIncrement = false;
				colvarBaseContractLength.IsNullable = false;
				colvarBaseContractLength.IsPrimaryKey = false;
				colvarBaseContractLength.IsForeignKey = false;
				colvarBaseContractLength.IsReadOnly = false;
				colvarBaseContractLength.DefaultSetting = @"";
				colvarBaseContractLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaseContractLength);

				TableSchema.TableColumn colvarFullCellRMR = new TableSchema.TableColumn(schema);
				colvarFullCellRMR.ColumnName = "FullCellRMR";
				colvarFullCellRMR.DataType = DbType.Currency;
				colvarFullCellRMR.MaxLength = 0;
				colvarFullCellRMR.AutoIncrement = false;
				colvarFullCellRMR.IsNullable = false;
				colvarFullCellRMR.IsPrimaryKey = false;
				colvarFullCellRMR.IsForeignKey = false;
				colvarFullCellRMR.IsReadOnly = false;
				colvarFullCellRMR.DefaultSetting = @"((0))";
				colvarFullCellRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullCellRMR);

				TableSchema.TableColumn colvarFullNonCellRMR = new TableSchema.TableColumn(schema);
				colvarFullNonCellRMR.ColumnName = "FullNonCellRMR";
				colvarFullNonCellRMR.DataType = DbType.Currency;
				colvarFullNonCellRMR.MaxLength = 0;
				colvarFullNonCellRMR.AutoIncrement = false;
				colvarFullNonCellRMR.IsNullable = false;
				colvarFullNonCellRMR.IsPrimaryKey = false;
				colvarFullNonCellRMR.IsForeignKey = false;
				colvarFullNonCellRMR.IsReadOnly = false;
				colvarFullNonCellRMR.DefaultSetting = @"((0))";
				colvarFullNonCellRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullNonCellRMR);

				TableSchema.TableColumn colvarBaseCellRMR = new TableSchema.TableColumn(schema);
				colvarBaseCellRMR.ColumnName = "BaseCellRMR";
				colvarBaseCellRMR.DataType = DbType.Currency;
				colvarBaseCellRMR.MaxLength = 0;
				colvarBaseCellRMR.AutoIncrement = false;
				colvarBaseCellRMR.IsNullable = false;
				colvarBaseCellRMR.IsPrimaryKey = false;
				colvarBaseCellRMR.IsForeignKey = false;
				colvarBaseCellRMR.IsReadOnly = false;
				colvarBaseCellRMR.DefaultSetting = @"";
				colvarBaseCellRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaseCellRMR);

				TableSchema.TableColumn colvarBaseNonCellRMR = new TableSchema.TableColumn(schema);
				colvarBaseNonCellRMR.ColumnName = "BaseNonCellRMR";
				colvarBaseNonCellRMR.DataType = DbType.Currency;
				colvarBaseNonCellRMR.MaxLength = 0;
				colvarBaseNonCellRMR.AutoIncrement = false;
				colvarBaseNonCellRMR.IsNullable = false;
				colvarBaseNonCellRMR.IsPrimaryKey = false;
				colvarBaseNonCellRMR.IsForeignKey = false;
				colvarBaseNonCellRMR.IsReadOnly = false;
				colvarBaseNonCellRMR.DefaultSetting = @"";
				colvarBaseNonCellRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaseNonCellRMR);

				TableSchema.TableColumn colvarMinimumCellRMR = new TableSchema.TableColumn(schema);
				colvarMinimumCellRMR.ColumnName = "MinimumCellRMR";
				colvarMinimumCellRMR.DataType = DbType.Currency;
				colvarMinimumCellRMR.MaxLength = 0;
				colvarMinimumCellRMR.AutoIncrement = false;
				colvarMinimumCellRMR.IsNullable = false;
				colvarMinimumCellRMR.IsPrimaryKey = false;
				colvarMinimumCellRMR.IsForeignKey = false;
				colvarMinimumCellRMR.IsReadOnly = false;
				colvarMinimumCellRMR.DefaultSetting = @"";
				colvarMinimumCellRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinimumCellRMR);

				TableSchema.TableColumn colvarMinimumNonCellRMR = new TableSchema.TableColumn(schema);
				colvarMinimumNonCellRMR.ColumnName = "MinimumNonCellRMR";
				colvarMinimumNonCellRMR.DataType = DbType.Currency;
				colvarMinimumNonCellRMR.MaxLength = 0;
				colvarMinimumNonCellRMR.AutoIncrement = false;
				colvarMinimumNonCellRMR.IsNullable = false;
				colvarMinimumNonCellRMR.IsPrimaryKey = false;
				colvarMinimumNonCellRMR.IsForeignKey = false;
				colvarMinimumNonCellRMR.IsReadOnly = false;
				colvarMinimumNonCellRMR.DefaultSetting = @"";
				colvarMinimumNonCellRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinimumNonCellRMR);

				TableSchema.TableColumn colvarMinimumActivationFee = new TableSchema.TableColumn(schema);
				colvarMinimumActivationFee.ColumnName = "MinimumActivationFee";
				colvarMinimumActivationFee.DataType = DbType.Currency;
				colvarMinimumActivationFee.MaxLength = 0;
				colvarMinimumActivationFee.AutoIncrement = false;
				colvarMinimumActivationFee.IsNullable = false;
				colvarMinimumActivationFee.IsPrimaryKey = false;
				colvarMinimumActivationFee.IsForeignKey = false;
				colvarMinimumActivationFee.IsReadOnly = false;
				colvarMinimumActivationFee.DefaultSetting = @"";
				colvarMinimumActivationFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinimumActivationFee);

				TableSchema.TableColumn colvarMaximumRMR = new TableSchema.TableColumn(schema);
				colvarMaximumRMR.ColumnName = "MaximumRMR";
				colvarMaximumRMR.DataType = DbType.Currency;
				colvarMaximumRMR.MaxLength = 0;
				colvarMaximumRMR.AutoIncrement = false;
				colvarMaximumRMR.IsNullable = false;
				colvarMaximumRMR.IsPrimaryKey = false;
				colvarMaximumRMR.IsForeignKey = false;
				colvarMaximumRMR.IsReadOnly = false;
				colvarMaximumRMR.DefaultSetting = @"((0))";
				colvarMaximumRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaximumRMR);

				TableSchema.TableColumn colvarFrontendRaisedRMRBonusOffset = new TableSchema.TableColumn(schema);
				colvarFrontendRaisedRMRBonusOffset.ColumnName = "FrontendRaisedRMRBonusOffset";
				colvarFrontendRaisedRMRBonusOffset.DataType = DbType.Currency;
				colvarFrontendRaisedRMRBonusOffset.MaxLength = 0;
				colvarFrontendRaisedRMRBonusOffset.AutoIncrement = false;
				colvarFrontendRaisedRMRBonusOffset.IsNullable = false;
				colvarFrontendRaisedRMRBonusOffset.IsPrimaryKey = false;
				colvarFrontendRaisedRMRBonusOffset.IsForeignKey = false;
				colvarFrontendRaisedRMRBonusOffset.IsReadOnly = false;
				colvarFrontendRaisedRMRBonusOffset.DefaultSetting = @"";
				colvarFrontendRaisedRMRBonusOffset.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFrontendRaisedRMRBonusOffset);

				TableSchema.TableColumn colvarPlatinumInteractiveRMROffset = new TableSchema.TableColumn(schema);
				colvarPlatinumInteractiveRMROffset.ColumnName = "PlatinumInteractiveRMROffset";
				colvarPlatinumInteractiveRMROffset.DataType = DbType.Currency;
				colvarPlatinumInteractiveRMROffset.MaxLength = 0;
				colvarPlatinumInteractiveRMROffset.AutoIncrement = false;
				colvarPlatinumInteractiveRMROffset.IsNullable = false;
				colvarPlatinumInteractiveRMROffset.IsPrimaryKey = false;
				colvarPlatinumInteractiveRMROffset.IsForeignKey = false;
				colvarPlatinumInteractiveRMROffset.IsReadOnly = false;
				colvarPlatinumInteractiveRMROffset.DefaultSetting = @"";
				colvarPlatinumInteractiveRMROffset.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlatinumInteractiveRMROffset);

				TableSchema.TableColumn colvarTwoWayCellRMROffset = new TableSchema.TableColumn(schema);
				colvarTwoWayCellRMROffset.ColumnName = "TwoWayCellRMROffset";
				colvarTwoWayCellRMROffset.DataType = DbType.Currency;
				colvarTwoWayCellRMROffset.MaxLength = 0;
				colvarTwoWayCellRMROffset.AutoIncrement = false;
				colvarTwoWayCellRMROffset.IsNullable = false;
				colvarTwoWayCellRMROffset.IsPrimaryKey = false;
				colvarTwoWayCellRMROffset.IsForeignKey = false;
				colvarTwoWayCellRMROffset.IsReadOnly = false;
				colvarTwoWayCellRMROffset.DefaultSetting = @"((0))";
				colvarTwoWayCellRMROffset.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTwoWayCellRMROffset);

				TableSchema.TableColumn colvarWeeklyAdvanceAmount = new TableSchema.TableColumn(schema);
				colvarWeeklyAdvanceAmount.ColumnName = "WeeklyAdvanceAmount";
				colvarWeeklyAdvanceAmount.DataType = DbType.Currency;
				colvarWeeklyAdvanceAmount.MaxLength = 0;
				colvarWeeklyAdvanceAmount.AutoIncrement = false;
				colvarWeeklyAdvanceAmount.IsNullable = false;
				colvarWeeklyAdvanceAmount.IsPrimaryKey = false;
				colvarWeeklyAdvanceAmount.IsForeignKey = false;
				colvarWeeklyAdvanceAmount.IsReadOnly = false;
				colvarWeeklyAdvanceAmount.DefaultSetting = @"((0))";
				colvarWeeklyAdvanceAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeeklyAdvanceAmount);

				TableSchema.TableColumn colvarWeeklyMinimumPay = new TableSchema.TableColumn(schema);
				colvarWeeklyMinimumPay.ColumnName = "WeeklyMinimumPay";
				colvarWeeklyMinimumPay.DataType = DbType.Currency;
				colvarWeeklyMinimumPay.MaxLength = 0;
				colvarWeeklyMinimumPay.AutoIncrement = false;
				colvarWeeklyMinimumPay.IsNullable = false;
				colvarWeeklyMinimumPay.IsPrimaryKey = false;
				colvarWeeklyMinimumPay.IsForeignKey = false;
				colvarWeeklyMinimumPay.IsReadOnly = false;
				colvarWeeklyMinimumPay.DefaultSetting = @"((0))";
				colvarWeeklyMinimumPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeeklyMinimumPay);

				TableSchema.TableColumn colvarMinimumSystemPoints = new TableSchema.TableColumn(schema);
				colvarMinimumSystemPoints.ColumnName = "MinimumSystemPoints";
				colvarMinimumSystemPoints.DataType = DbType.Decimal;
				colvarMinimumSystemPoints.MaxLength = 0;
				colvarMinimumSystemPoints.AutoIncrement = false;
				colvarMinimumSystemPoints.IsNullable = false;
				colvarMinimumSystemPoints.IsPrimaryKey = false;
				colvarMinimumSystemPoints.IsForeignKey = false;
				colvarMinimumSystemPoints.IsReadOnly = false;
				colvarMinimumSystemPoints.DefaultSetting = @"((0))";
				colvarMinimumSystemPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinimumSystemPoints);

				TableSchema.TableColumn colvarBasicSystemPoints = new TableSchema.TableColumn(schema);
				colvarBasicSystemPoints.ColumnName = "BasicSystemPoints";
				colvarBasicSystemPoints.DataType = DbType.Decimal;
				colvarBasicSystemPoints.MaxLength = 0;
				colvarBasicSystemPoints.AutoIncrement = false;
				colvarBasicSystemPoints.IsNullable = false;
				colvarBasicSystemPoints.IsPrimaryKey = false;
				colvarBasicSystemPoints.IsForeignKey = false;
				colvarBasicSystemPoints.IsReadOnly = false;
				colvarBasicSystemPoints.DefaultSetting = @"((0))";
				colvarBasicSystemPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBasicSystemPoints);

				TableSchema.TableColumn colvarUpgradedSystemPoints = new TableSchema.TableColumn(schema);
				colvarUpgradedSystemPoints.ColumnName = "UpgradedSystemPoints";
				colvarUpgradedSystemPoints.DataType = DbType.Decimal;
				colvarUpgradedSystemPoints.MaxLength = 0;
				colvarUpgradedSystemPoints.AutoIncrement = false;
				colvarUpgradedSystemPoints.IsNullable = false;
				colvarUpgradedSystemPoints.IsPrimaryKey = false;
				colvarUpgradedSystemPoints.IsForeignKey = false;
				colvarUpgradedSystemPoints.IsReadOnly = false;
				colvarUpgradedSystemPoints.DefaultSetting = @"((0))";
				colvarUpgradedSystemPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpgradedSystemPoints);

				TableSchema.TableColumn colvarPlatinumInteractivePoints = new TableSchema.TableColumn(schema);
				colvarPlatinumInteractivePoints.ColumnName = "PlatinumInteractivePoints";
				colvarPlatinumInteractivePoints.DataType = DbType.Decimal;
				colvarPlatinumInteractivePoints.MaxLength = 0;
				colvarPlatinumInteractivePoints.AutoIncrement = false;
				colvarPlatinumInteractivePoints.IsNullable = false;
				colvarPlatinumInteractivePoints.IsPrimaryKey = false;
				colvarPlatinumInteractivePoints.IsForeignKey = false;
				colvarPlatinumInteractivePoints.IsReadOnly = false;
				colvarPlatinumInteractivePoints.DefaultSetting = @"((0))";
				colvarPlatinumInteractivePoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlatinumInteractivePoints);

				TableSchema.TableColumn colvarTwoWayCellPoints = new TableSchema.TableColumn(schema);
				colvarTwoWayCellPoints.ColumnName = "TwoWayCellPoints";
				colvarTwoWayCellPoints.DataType = DbType.Decimal;
				colvarTwoWayCellPoints.MaxLength = 0;
				colvarTwoWayCellPoints.AutoIncrement = false;
				colvarTwoWayCellPoints.IsNullable = false;
				colvarTwoWayCellPoints.IsPrimaryKey = false;
				colvarTwoWayCellPoints.IsForeignKey = false;
				colvarTwoWayCellPoints.IsReadOnly = false;
				colvarTwoWayCellPoints.DefaultSetting = @"((0))";
				colvarTwoWayCellPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTwoWayCellPoints);

				TableSchema.TableColumn colvarInvoiceBillPoints = new TableSchema.TableColumn(schema);
				colvarInvoiceBillPoints.ColumnName = "InvoiceBillPoints";
				colvarInvoiceBillPoints.DataType = DbType.Decimal;
				colvarInvoiceBillPoints.MaxLength = 0;
				colvarInvoiceBillPoints.AutoIncrement = false;
				colvarInvoiceBillPoints.IsNullable = false;
				colvarInvoiceBillPoints.IsPrimaryKey = false;
				colvarInvoiceBillPoints.IsForeignKey = false;
				colvarInvoiceBillPoints.IsReadOnly = false;
				colvarInvoiceBillPoints.DefaultSetting = @"((0))";
				colvarInvoiceBillPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvoiceBillPoints);

				TableSchema.TableColumn colvarActivationWaivePoints = new TableSchema.TableColumn(schema);
				colvarActivationWaivePoints.ColumnName = "ActivationWaivePoints";
				colvarActivationWaivePoints.DataType = DbType.Decimal;
				colvarActivationWaivePoints.MaxLength = 0;
				colvarActivationWaivePoints.AutoIncrement = false;
				colvarActivationWaivePoints.IsNullable = false;
				colvarActivationWaivePoints.IsPrimaryKey = false;
				colvarActivationWaivePoints.IsForeignKey = false;
				colvarActivationWaivePoints.IsReadOnly = false;
				colvarActivationWaivePoints.DefaultSetting = @"((0))";
				colvarActivationWaivePoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationWaivePoints);

				TableSchema.TableColumn colvarMinimumPassAccountActivation = new TableSchema.TableColumn(schema);
				colvarMinimumPassAccountActivation.ColumnName = "MinimumPassAccountActivation";
				colvarMinimumPassAccountActivation.DataType = DbType.Currency;
				colvarMinimumPassAccountActivation.MaxLength = 0;
				colvarMinimumPassAccountActivation.AutoIncrement = false;
				colvarMinimumPassAccountActivation.IsNullable = false;
				colvarMinimumPassAccountActivation.IsPrimaryKey = false;
				colvarMinimumPassAccountActivation.IsForeignKey = false;
				colvarMinimumPassAccountActivation.IsReadOnly = false;
				colvarMinimumPassAccountActivation.DefaultSetting = @"((199))";
				colvarMinimumPassAccountActivation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinimumPassAccountActivation);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_PaySchedules",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_PaySchedule LoadFrom(PR_PaySchedule item)
		{
			PR_PaySchedule result = new PR_PaySchedule();
			if (item.PayScheduleID != default(int)) {
				result.LoadByKey(item.PayScheduleID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PayScheduleID {
			get { return GetColumnValue<int>(Columns.PayScheduleID); }
			set {
				SetColumnValue(Columns.PayScheduleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScheduleID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public bool IsDefaultForSeason {
			get { return GetColumnValue<bool>(Columns.IsDefaultForSeason); }
			set {
				SetColumnValue(Columns.IsDefaultForSeason, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDefaultForSeason));
			}
		}
		[DataMember]
		public short? UserTypeID {
			get { return GetColumnValue<short?>(Columns.UserTypeID); }
			set {
				SetColumnValue(Columns.UserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeID));
			}
		}
		[DataMember]
		public string FriendlyName {
			get { return GetColumnValue<string>(Columns.FriendlyName); }
			set {
				SetColumnValue(Columns.FriendlyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FriendlyName));
			}
		}
		[DataMember]
		public decimal BaseSaleCommission {
			get { return GetColumnValue<decimal>(Columns.BaseSaleCommission); }
			set {
				SetColumnValue(Columns.BaseSaleCommission, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BaseSaleCommission));
			}
		}
		[DataMember]
		public decimal BaseSubCommission {
			get { return GetColumnValue<decimal>(Columns.BaseSubCommission); }
			set {
				SetColumnValue(Columns.BaseSubCommission, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BaseSubCommission));
			}
		}
		[DataMember]
		public decimal RaisedRMRFrontendBonus {
			get { return GetColumnValue<decimal>(Columns.RaisedRMRFrontendBonus); }
			set {
				SetColumnValue(Columns.RaisedRMRFrontendBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RaisedRMRFrontendBonus));
			}
		}
		[DataMember]
		public decimal ExtendedContractFrontendBonus {
			get { return GetColumnValue<decimal>(Columns.ExtendedContractFrontendBonus); }
			set {
				SetColumnValue(Columns.ExtendedContractFrontendBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExtendedContractFrontendBonus));
			}
		}
		[DataMember]
		public decimal CombinedFrontendBonus {
			get { return GetColumnValue<decimal>(Columns.CombinedFrontendBonus); }
			set {
				SetColumnValue(Columns.CombinedFrontendBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CombinedFrontendBonus));
			}
		}
		[DataMember]
		public decimal ActivationWaiveDeduction {
			get { return GetColumnValue<decimal>(Columns.ActivationWaiveDeduction); }
			set {
				SetColumnValue(Columns.ActivationWaiveDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationWaiveDeduction));
			}
		}
		[DataMember]
		public decimal PricePerPoint {
			get { return GetColumnValue<decimal>(Columns.PricePerPoint); }
			set {
				SetColumnValue(Columns.PricePerPoint, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PricePerPoint));
			}
		}
		[DataMember]
		public decimal FullPricePerPoint {
			get { return GetColumnValue<decimal>(Columns.FullPricePerPoint); }
			set {
				SetColumnValue(Columns.FullPricePerPoint, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullPricePerPoint));
			}
		}
		[DataMember]
		public decimal UpfrontPricePerPoint {
			get { return GetColumnValue<decimal>(Columns.UpfrontPricePerPoint); }
			set {
				SetColumnValue(Columns.UpfrontPricePerPoint, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UpfrontPricePerPoint));
			}
		}
		[DataMember]
		public decimal InvoiceBillDeduction {
			get { return GetColumnValue<decimal>(Columns.InvoiceBillDeduction); }
			set {
				SetColumnValue(Columns.InvoiceBillDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceBillDeduction));
			}
		}
		[DataMember]
		public decimal PassCreditDeduction {
			get { return GetColumnValue<decimal>(Columns.PassCreditDeduction); }
			set {
				SetColumnValue(Columns.PassCreditDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassCreditDeduction));
			}
		}
		[DataMember]
		public decimal ShortenedContractDeduction {
			get { return GetColumnValue<decimal>(Columns.ShortenedContractDeduction); }
			set {
				SetColumnValue(Columns.ShortenedContractDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortenedContractDeduction));
			}
		}
		[DataMember]
		public decimal LoweredRMRAboveMinimumDeduction {
			get { return GetColumnValue<decimal>(Columns.LoweredRMRAboveMinimumDeduction); }
			set {
				SetColumnValue(Columns.LoweredRMRAboveMinimumDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoweredRMRAboveMinimumDeduction));
			}
		}
		[DataMember]
		public decimal LoweredRMRBelowMinimumDeduction {
			get { return GetColumnValue<decimal>(Columns.LoweredRMRBelowMinimumDeduction); }
			set {
				SetColumnValue(Columns.LoweredRMRBelowMinimumDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoweredRMRBelowMinimumDeduction));
			}
		}
		[DataMember]
		public decimal BaseInstallPay {
			get { return GetColumnValue<decimal>(Columns.BaseInstallPay); }
			set {
				SetColumnValue(Columns.BaseInstallPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BaseInstallPay));
			}
		}
		[DataMember]
		public int BaseContractLength {
			get { return GetColumnValue<int>(Columns.BaseContractLength); }
			set {
				SetColumnValue(Columns.BaseContractLength, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BaseContractLength));
			}
		}
		[DataMember]
		public decimal FullCellRMR {
			get { return GetColumnValue<decimal>(Columns.FullCellRMR); }
			set {
				SetColumnValue(Columns.FullCellRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullCellRMR));
			}
		}
		[DataMember]
		public decimal FullNonCellRMR {
			get { return GetColumnValue<decimal>(Columns.FullNonCellRMR); }
			set {
				SetColumnValue(Columns.FullNonCellRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullNonCellRMR));
			}
		}
		[DataMember]
		public decimal BaseCellRMR {
			get { return GetColumnValue<decimal>(Columns.BaseCellRMR); }
			set {
				SetColumnValue(Columns.BaseCellRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BaseCellRMR));
			}
		}
		[DataMember]
		public decimal BaseNonCellRMR {
			get { return GetColumnValue<decimal>(Columns.BaseNonCellRMR); }
			set {
				SetColumnValue(Columns.BaseNonCellRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BaseNonCellRMR));
			}
		}
		[DataMember]
		public decimal MinimumCellRMR {
			get { return GetColumnValue<decimal>(Columns.MinimumCellRMR); }
			set {
				SetColumnValue(Columns.MinimumCellRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinimumCellRMR));
			}
		}
		[DataMember]
		public decimal MinimumNonCellRMR {
			get { return GetColumnValue<decimal>(Columns.MinimumNonCellRMR); }
			set {
				SetColumnValue(Columns.MinimumNonCellRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinimumNonCellRMR));
			}
		}
		[DataMember]
		public decimal MinimumActivationFee {
			get { return GetColumnValue<decimal>(Columns.MinimumActivationFee); }
			set {
				SetColumnValue(Columns.MinimumActivationFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinimumActivationFee));
			}
		}
		[DataMember]
		public decimal MaximumRMR {
			get { return GetColumnValue<decimal>(Columns.MaximumRMR); }
			set {
				SetColumnValue(Columns.MaximumRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaximumRMR));
			}
		}
		[DataMember]
		public decimal FrontendRaisedRMRBonusOffset {
			get { return GetColumnValue<decimal>(Columns.FrontendRaisedRMRBonusOffset); }
			set {
				SetColumnValue(Columns.FrontendRaisedRMRBonusOffset, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FrontendRaisedRMRBonusOffset));
			}
		}
		[DataMember]
		public decimal PlatinumInteractiveRMROffset {
			get { return GetColumnValue<decimal>(Columns.PlatinumInteractiveRMROffset); }
			set {
				SetColumnValue(Columns.PlatinumInteractiveRMROffset, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PlatinumInteractiveRMROffset));
			}
		}
		[DataMember]
		public decimal TwoWayCellRMROffset {
			get { return GetColumnValue<decimal>(Columns.TwoWayCellRMROffset); }
			set {
				SetColumnValue(Columns.TwoWayCellRMROffset, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TwoWayCellRMROffset));
			}
		}
		[DataMember]
		public decimal WeeklyAdvanceAmount {
			get { return GetColumnValue<decimal>(Columns.WeeklyAdvanceAmount); }
			set {
				SetColumnValue(Columns.WeeklyAdvanceAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WeeklyAdvanceAmount));
			}
		}
		[DataMember]
		public decimal WeeklyMinimumPay {
			get { return GetColumnValue<decimal>(Columns.WeeklyMinimumPay); }
			set {
				SetColumnValue(Columns.WeeklyMinimumPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WeeklyMinimumPay));
			}
		}
		[DataMember]
		public decimal MinimumSystemPoints {
			get { return GetColumnValue<decimal>(Columns.MinimumSystemPoints); }
			set {
				SetColumnValue(Columns.MinimumSystemPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinimumSystemPoints));
			}
		}
		[DataMember]
		public decimal BasicSystemPoints {
			get { return GetColumnValue<decimal>(Columns.BasicSystemPoints); }
			set {
				SetColumnValue(Columns.BasicSystemPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BasicSystemPoints));
			}
		}
		[DataMember]
		public decimal UpgradedSystemPoints {
			get { return GetColumnValue<decimal>(Columns.UpgradedSystemPoints); }
			set {
				SetColumnValue(Columns.UpgradedSystemPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UpgradedSystemPoints));
			}
		}
		[DataMember]
		public decimal PlatinumInteractivePoints {
			get { return GetColumnValue<decimal>(Columns.PlatinumInteractivePoints); }
			set {
				SetColumnValue(Columns.PlatinumInteractivePoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PlatinumInteractivePoints));
			}
		}
		[DataMember]
		public decimal TwoWayCellPoints {
			get { return GetColumnValue<decimal>(Columns.TwoWayCellPoints); }
			set {
				SetColumnValue(Columns.TwoWayCellPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TwoWayCellPoints));
			}
		}
		[DataMember]
		public decimal InvoiceBillPoints {
			get { return GetColumnValue<decimal>(Columns.InvoiceBillPoints); }
			set {
				SetColumnValue(Columns.InvoiceBillPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvoiceBillPoints));
			}
		}
		[DataMember]
		public decimal ActivationWaivePoints {
			get { return GetColumnValue<decimal>(Columns.ActivationWaivePoints); }
			set {
				SetColumnValue(Columns.ActivationWaivePoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationWaivePoints));
			}
		}
		[DataMember]
		public decimal MinimumPassAccountActivation {
			get { return GetColumnValue<decimal>(Columns.MinimumPassAccountActivation); }
			set {
				SetColumnValue(Columns.MinimumPassAccountActivation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinimumPassAccountActivation));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _Season;
		//Relationship: FK_PR_PaySchedules_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_UserType _UserType;
		//Relationship: FK_PR_PaySchedules_RU_UserType
		public RU_UserType UserType
		{
			get
			{
				if(_UserType == null) {
					_UserType = RU_UserType.FetchByID(this.UserTypeID);
				}
				return _UserType;
			}
			set
			{
				SetColumnValue("UserTypeID", value.UserTypeID);
				_UserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PayScheduleID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PayScheduleIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDefaultForSeasonColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UserTypeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn FriendlyNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn BaseSaleCommissionColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn BaseSubCommissionColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn RaisedRMRFrontendBonusColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ExtendedContractFrontendBonusColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CombinedFrontendBonusColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ActivationWaiveDeductionColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PricePerPointColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn FullPricePerPointColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn UpfrontPricePerPointColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn InvoiceBillDeductionColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn PassCreditDeductionColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ShortenedContractDeductionColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn LoweredRMRAboveMinimumDeductionColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn LoweredRMRBelowMinimumDeductionColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn BaseInstallPayColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn BaseContractLengthColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn FullCellRMRColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn FullNonCellRMRColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn BaseCellRMRColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn BaseNonCellRMRColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn MinimumCellRMRColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn MinimumNonCellRMRColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn MinimumActivationFeeColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn MaximumRMRColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn FrontendRaisedRMRBonusOffsetColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn PlatinumInteractiveRMROffsetColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn TwoWayCellRMROffsetColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn WeeklyAdvanceAmountColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn WeeklyMinimumPayColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn MinimumSystemPointsColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn BasicSystemPointsColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn UpgradedSystemPointsColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn PlatinumInteractivePointsColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn TwoWayCellPointsColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn InvoiceBillPointsColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn ActivationWaivePointsColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn MinimumPassAccountActivationColumn
		{
			get { return Schema.Columns[41]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PayScheduleID = @"PayScheduleID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string IsDefaultForSeason = @"IsDefaultForSeason";
			public static readonly string UserTypeID = @"UserTypeID";
			public static readonly string FriendlyName = @"FriendlyName";
			public static readonly string BaseSaleCommission = @"BaseSaleCommission";
			public static readonly string BaseSubCommission = @"BaseSubCommission";
			public static readonly string RaisedRMRFrontendBonus = @"RaisedRMRFrontendBonus";
			public static readonly string ExtendedContractFrontendBonus = @"ExtendedContractFrontendBonus";
			public static readonly string CombinedFrontendBonus = @"CombinedFrontendBonus";
			public static readonly string ActivationWaiveDeduction = @"ActivationWaiveDeduction";
			public static readonly string PricePerPoint = @"PricePerPoint";
			public static readonly string FullPricePerPoint = @"FullPricePerPoint";
			public static readonly string UpfrontPricePerPoint = @"UpfrontPricePerPoint";
			public static readonly string InvoiceBillDeduction = @"InvoiceBillDeduction";
			public static readonly string PassCreditDeduction = @"PassCreditDeduction";
			public static readonly string ShortenedContractDeduction = @"ShortenedContractDeduction";
			public static readonly string LoweredRMRAboveMinimumDeduction = @"LoweredRMRAboveMinimumDeduction";
			public static readonly string LoweredRMRBelowMinimumDeduction = @"LoweredRMRBelowMinimumDeduction";
			public static readonly string BaseInstallPay = @"BaseInstallPay";
			public static readonly string BaseContractLength = @"BaseContractLength";
			public static readonly string FullCellRMR = @"FullCellRMR";
			public static readonly string FullNonCellRMR = @"FullNonCellRMR";
			public static readonly string BaseCellRMR = @"BaseCellRMR";
			public static readonly string BaseNonCellRMR = @"BaseNonCellRMR";
			public static readonly string MinimumCellRMR = @"MinimumCellRMR";
			public static readonly string MinimumNonCellRMR = @"MinimumNonCellRMR";
			public static readonly string MinimumActivationFee = @"MinimumActivationFee";
			public static readonly string MaximumRMR = @"MaximumRMR";
			public static readonly string FrontendRaisedRMRBonusOffset = @"FrontendRaisedRMRBonusOffset";
			public static readonly string PlatinumInteractiveRMROffset = @"PlatinumInteractiveRMROffset";
			public static readonly string TwoWayCellRMROffset = @"TwoWayCellRMROffset";
			public static readonly string WeeklyAdvanceAmount = @"WeeklyAdvanceAmount";
			public static readonly string WeeklyMinimumPay = @"WeeklyMinimumPay";
			public static readonly string MinimumSystemPoints = @"MinimumSystemPoints";
			public static readonly string BasicSystemPoints = @"BasicSystemPoints";
			public static readonly string UpgradedSystemPoints = @"UpgradedSystemPoints";
			public static readonly string PlatinumInteractivePoints = @"PlatinumInteractivePoints";
			public static readonly string TwoWayCellPoints = @"TwoWayCellPoints";
			public static readonly string InvoiceBillPoints = @"InvoiceBillPoints";
			public static readonly string ActivationWaivePoints = @"ActivationWaivePoints";
			public static readonly string MinimumPassAccountActivation = @"MinimumPassAccountActivation";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PayScheduleID; }
		}
		*/

		#region Foreign Collections

		private PR_AccountCalculationCollection _PR_AccountCalculationsCol;
		//Relationship: FK_PR_AccountCalculations_PR_AccountCalculations
		public PR_AccountCalculationCollection PR_AccountCalculationsCol
		{
			get
			{
				if(_PR_AccountCalculationsCol == null) {
					_PR_AccountCalculationsCol = new PR_AccountCalculationCollection();
					_PR_AccountCalculationsCol.LoadAndCloseReader(PR_AccountCalculation.Query()
						.WHERE(PR_AccountCalculation.Columns.PayScheduleID, PayScheduleID).ExecuteReader());
				}
				return _PR_AccountCalculationsCol;
			}
		}

		private RU_RecruitCollection _RU_RecruitsCol;
		//Relationship: FK_RU_Recruits_PR_PaySchedules
		public RU_RecruitCollection RU_RecruitsCol
		{
			get
			{
				if(_RU_RecruitsCol == null) {
					_RU_RecruitsCol = new RU_RecruitCollection();
					_RU_RecruitsCol.LoadAndCloseReader(RU_Recruit.Query()
						.WHERE(RU_Recruit.Columns.AlternatePayScheduleId, PayScheduleID).ExecuteReader());
				}
				return _RU_RecruitsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_RegionalResidualAccountMapping class.
	/// </summary>
	[DataContract]
	public partial class PR_RegionalResidualAccountMappingCollection : ActiveList<PR_RegionalResidualAccountMapping, PR_RegionalResidualAccountMappingCollection>
	{
		public static PR_RegionalResidualAccountMappingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_RegionalResidualAccountMappingCollection result = new PR_RegionalResidualAccountMappingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_RegionalResidualAccountMapping item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_RegionalResidualAccountMappings table.
	/// </summary>
	[DataContract]
	public partial class PR_RegionalResidualAccountMapping : ActiveRecord<PR_RegionalResidualAccountMapping>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_RegionalResidualAccountMapping()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_RegionalResidualAccountMappings", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRegionalResidualID = new TableSchema.TableColumn(schema);
				colvarRegionalResidualID.ColumnName = "RegionalResidualID";
				colvarRegionalResidualID.DataType = DbType.Int32;
				colvarRegionalResidualID.MaxLength = 0;
				colvarRegionalResidualID.AutoIncrement = false;
				colvarRegionalResidualID.IsNullable = false;
				colvarRegionalResidualID.IsPrimaryKey = true;
				colvarRegionalResidualID.IsForeignKey = false;
				colvarRegionalResidualID.IsReadOnly = false;
				colvarRegionalResidualID.DefaultSetting = @"";
				colvarRegionalResidualID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegionalResidualID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_RegionalResidualAccountMappings",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_RegionalResidualAccountMapping LoadFrom(PR_RegionalResidualAccountMapping item)
		{
			PR_RegionalResidualAccountMapping result = new PR_RegionalResidualAccountMapping();
			if (item.RegionalResidualID != default(int)) {
				result.LoadByKey(item.RegionalResidualID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RegionalResidualID {
			get { return GetColumnValue<int>(Columns.RegionalResidualID); }
			set {
				SetColumnValue(Columns.RegionalResidualID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalResidualID));
			}
		}
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return RegionalResidualID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RegionalResidualIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RegionalResidualID = @"RegionalResidualID";
			public static readonly string AccountID = @"AccountID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RegionalResidualID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_RegionalResidualPayee class.
	/// </summary>
	[DataContract]
	public partial class PR_RegionalResidualPayeeCollection : ActiveList<PR_RegionalResidualPayee, PR_RegionalResidualPayeeCollection>
	{
		public static PR_RegionalResidualPayeeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_RegionalResidualPayeeCollection result = new PR_RegionalResidualPayeeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_RegionalResidualPayee item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_RegionalResidualPayees table.
	/// </summary>
	[DataContract]
	public partial class PR_RegionalResidualPayee : ActiveRecord<PR_RegionalResidualPayee>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_RegionalResidualPayee()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_RegionalResidualPayees", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRegionalResidualPayeeID = new TableSchema.TableColumn(schema);
				colvarRegionalResidualPayeeID.ColumnName = "RegionalResidualPayeeID";
				colvarRegionalResidualPayeeID.DataType = DbType.Int32;
				colvarRegionalResidualPayeeID.MaxLength = 0;
				colvarRegionalResidualPayeeID.AutoIncrement = true;
				colvarRegionalResidualPayeeID.IsNullable = false;
				colvarRegionalResidualPayeeID.IsPrimaryKey = true;
				colvarRegionalResidualPayeeID.IsForeignKey = false;
				colvarRegionalResidualPayeeID.IsReadOnly = false;
				colvarRegionalResidualPayeeID.DefaultSetting = @"";
				colvarRegionalResidualPayeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegionalResidualPayeeID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 50;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarAccountPayRate = new TableSchema.TableColumn(schema);
				colvarAccountPayRate.ColumnName = "AccountPayRate";
				colvarAccountPayRate.DataType = DbType.Currency;
				colvarAccountPayRate.MaxLength = 0;
				colvarAccountPayRate.AutoIncrement = false;
				colvarAccountPayRate.IsNullable = false;
				colvarAccountPayRate.IsPrimaryKey = false;
				colvarAccountPayRate.IsForeignKey = false;
				colvarAccountPayRate.IsReadOnly = false;
				colvarAccountPayRate.DefaultSetting = @"";
				colvarAccountPayRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountPayRate);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_RegionalResidualPayees",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_RegionalResidualPayee LoadFrom(PR_RegionalResidualPayee item)
		{
			PR_RegionalResidualPayee result = new PR_RegionalResidualPayee();
			if (item.RegionalResidualPayeeID != default(int)) {
				result.LoadByKey(item.RegionalResidualPayeeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RegionalResidualPayeeID {
			get { return GetColumnValue<int>(Columns.RegionalResidualPayeeID); }
			set {
				SetColumnValue(Columns.RegionalResidualPayeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalResidualPayeeID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal AccountPayRate {
			get { return GetColumnValue<decimal>(Columns.AccountPayRate); }
			set {
				SetColumnValue(Columns.AccountPayRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountPayRate));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _Season;
		//Relationship: FK_PR_RegionalResidualPayees_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RegionalResidualPayeeID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RegionalResidualPayeeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AccountPayRateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RegionalResidualPayeeID = @"RegionalResidualPayeeID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string AccountPayRate = @"AccountPayRate";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RegionalResidualPayeeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_RegionalResidualPeriod class.
	/// </summary>
	[DataContract]
	public partial class PR_RegionalResidualPeriodCollection : ActiveList<PR_RegionalResidualPeriod, PR_RegionalResidualPeriodCollection>
	{
		public static PR_RegionalResidualPeriodCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_RegionalResidualPeriodCollection result = new PR_RegionalResidualPeriodCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_RegionalResidualPeriod item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_RegionalResidualPeriods table.
	/// </summary>
	[DataContract]
	public partial class PR_RegionalResidualPeriod : ActiveRecord<PR_RegionalResidualPeriod>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_RegionalResidualPeriod()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_RegionalResidualPeriods", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRegionalResidualPeriodID = new TableSchema.TableColumn(schema);
				colvarRegionalResidualPeriodID.ColumnName = "RegionalResidualPeriodID";
				colvarRegionalResidualPeriodID.DataType = DbType.Int32;
				colvarRegionalResidualPeriodID.MaxLength = 0;
				colvarRegionalResidualPeriodID.AutoIncrement = true;
				colvarRegionalResidualPeriodID.IsNullable = false;
				colvarRegionalResidualPeriodID.IsPrimaryKey = true;
				colvarRegionalResidualPeriodID.IsForeignKey = false;
				colvarRegionalResidualPeriodID.IsReadOnly = false;
				colvarRegionalResidualPeriodID.DefaultSetting = @"";
				colvarRegionalResidualPeriodID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegionalResidualPeriodID);

				TableSchema.TableColumn colvarPrimarySeasonID = new TableSchema.TableColumn(schema);
				colvarPrimarySeasonID.ColumnName = "PrimarySeasonID";
				colvarPrimarySeasonID.DataType = DbType.Int32;
				colvarPrimarySeasonID.MaxLength = 0;
				colvarPrimarySeasonID.AutoIncrement = false;
				colvarPrimarySeasonID.IsNullable = false;
				colvarPrimarySeasonID.IsPrimaryKey = false;
				colvarPrimarySeasonID.IsForeignKey = true;
				colvarPrimarySeasonID.IsReadOnly = false;
				colvarPrimarySeasonID.DefaultSetting = @"";
				colvarPrimarySeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarPrimarySeasonID);

				TableSchema.TableColumn colvarBackendPeriodID = new TableSchema.TableColumn(schema);
				colvarBackendPeriodID.ColumnName = "BackendPeriodID";
				colvarBackendPeriodID.DataType = DbType.Int32;
				colvarBackendPeriodID.MaxLength = 0;
				colvarBackendPeriodID.AutoIncrement = false;
				colvarBackendPeriodID.IsNullable = true;
				colvarBackendPeriodID.IsPrimaryKey = false;
				colvarBackendPeriodID.IsForeignKey = true;
				colvarBackendPeriodID.IsReadOnly = false;
				colvarBackendPeriodID.DefaultSetting = @"";
				colvarBackendPeriodID.ForeignKeyTableName = "PR_BackendPeriods";
				schema.Columns.Add(colvarBackendPeriodID);

				TableSchema.TableColumn colvarProcessDate = new TableSchema.TableColumn(schema);
				colvarProcessDate.ColumnName = "ProcessDate";
				colvarProcessDate.DataType = DbType.DateTime;
				colvarProcessDate.MaxLength = 0;
				colvarProcessDate.AutoIncrement = false;
				colvarProcessDate.IsNullable = false;
				colvarProcessDate.IsPrimaryKey = false;
				colvarProcessDate.IsForeignKey = false;
				colvarProcessDate.IsReadOnly = false;
				colvarProcessDate.DefaultSetting = @"";
				colvarProcessDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProcessDate);

				TableSchema.TableColumn colvarRunDate = new TableSchema.TableColumn(schema);
				colvarRunDate.ColumnName = "RunDate";
				colvarRunDate.DataType = DbType.DateTime;
				colvarRunDate.MaxLength = 0;
				colvarRunDate.AutoIncrement = false;
				colvarRunDate.IsNullable = true;
				colvarRunDate.IsPrimaryKey = false;
				colvarRunDate.IsForeignKey = false;
				colvarRunDate.IsReadOnly = false;
				colvarRunDate.DefaultSetting = @"";
				colvarRunDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRunDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_RegionalResidualPeriods",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_RegionalResidualPeriod LoadFrom(PR_RegionalResidualPeriod item)
		{
			PR_RegionalResidualPeriod result = new PR_RegionalResidualPeriod();
			if (item.RegionalResidualPeriodID != default(int)) {
				result.LoadByKey(item.RegionalResidualPeriodID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RegionalResidualPeriodID {
			get { return GetColumnValue<int>(Columns.RegionalResidualPeriodID); }
			set {
				SetColumnValue(Columns.RegionalResidualPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalResidualPeriodID));
			}
		}
		[DataMember]
		public int PrimarySeasonID {
			get { return GetColumnValue<int>(Columns.PrimarySeasonID); }
			set {
				SetColumnValue(Columns.PrimarySeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PrimarySeasonID));
			}
		}
		[DataMember]
		public int? BackendPeriodID {
			get { return GetColumnValue<int?>(Columns.BackendPeriodID); }
			set {
				SetColumnValue(Columns.BackendPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPeriodID));
			}
		}
		[DataMember]
		public DateTime ProcessDate {
			get { return GetColumnValue<DateTime>(Columns.ProcessDate); }
			set {
				SetColumnValue(Columns.ProcessDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ProcessDate));
			}
		}
		[DataMember]
		public DateTime? RunDate {
			get { return GetColumnValue<DateTime?>(Columns.RunDate); }
			set {
				SetColumnValue(Columns.RunDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RunDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendPeriod _BackendPeriod;
		//Relationship: FK_PR_RegionalResidualPeriods_PR_BackendPeriods
		public PR_BackendPeriod BackendPeriod
		{
			get
			{
				if(_BackendPeriod == null) {
					_BackendPeriod = PR_BackendPeriod.FetchByID(this.BackendPeriodID);
				}
				return _BackendPeriod;
			}
			set
			{
				SetColumnValue("BackendPeriodID", value.BackendPeriodID);
				_BackendPeriod = value;
			}
		}

		private RU_Season _PrimarySeason;
		//Relationship: FK_PR_RegionalResidualPeriods_RU_Season
		public RU_Season PrimarySeason
		{
			get
			{
				if(_PrimarySeason == null) {
					_PrimarySeason = RU_Season.FetchByID(this.PrimarySeasonID);
				}
				return _PrimarySeason;
			}
			set
			{
				SetColumnValue("PrimarySeasonID", value.SeasonID);
				_PrimarySeason = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RegionalResidualPeriodID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RegionalResidualPeriodIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PrimarySeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BackendPeriodIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ProcessDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RunDateColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RegionalResidualPeriodID = @"RegionalResidualPeriodID";
			public static readonly string PrimarySeasonID = @"PrimarySeasonID";
			public static readonly string BackendPeriodID = @"BackendPeriodID";
			public static readonly string ProcessDate = @"ProcessDate";
			public static readonly string RunDate = @"RunDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RegionalResidualPeriodID; }
		}
		*/

		#region Foreign Collections

		private PR_RegionalResidualCollection _PR_RegionalResidualsCol;
		//Relationship: FK_PR_RegionalResiduals_PR_RegionalResiduals
		public PR_RegionalResidualCollection PR_RegionalResidualsCol
		{
			get
			{
				if(_PR_RegionalResidualsCol == null) {
					_PR_RegionalResidualsCol = new PR_RegionalResidualCollection();
					_PR_RegionalResidualsCol.LoadAndCloseReader(PR_RegionalResidual.Query()
						.WHERE(PR_RegionalResidual.Columns.RegionalResidualPeriodID, RegionalResidualPeriodID).ExecuteReader());
				}
				return _PR_RegionalResidualsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_RegionalResidual class.
	/// </summary>
	[DataContract]
	public partial class PR_RegionalResidualCollection : ActiveList<PR_RegionalResidual, PR_RegionalResidualCollection>
	{
		public static PR_RegionalResidualCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_RegionalResidualCollection result = new PR_RegionalResidualCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_RegionalResidual item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_RegionalResiduals table.
	/// </summary>
	[DataContract]
	public partial class PR_RegionalResidual : ActiveRecord<PR_RegionalResidual>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_RegionalResidual()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_RegionalResiduals", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRegionalResidualID = new TableSchema.TableColumn(schema);
				colvarRegionalResidualID.ColumnName = "RegionalResidualID";
				colvarRegionalResidualID.DataType = DbType.Int32;
				colvarRegionalResidualID.MaxLength = 0;
				colvarRegionalResidualID.AutoIncrement = true;
				colvarRegionalResidualID.IsNullable = false;
				colvarRegionalResidualID.IsPrimaryKey = true;
				colvarRegionalResidualID.IsForeignKey = false;
				colvarRegionalResidualID.IsReadOnly = false;
				colvarRegionalResidualID.DefaultSetting = @"";
				colvarRegionalResidualID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegionalResidualID);

				TableSchema.TableColumn colvarRegionalResidualPeriodID = new TableSchema.TableColumn(schema);
				colvarRegionalResidualPeriodID.ColumnName = "RegionalResidualPeriodID";
				colvarRegionalResidualPeriodID.DataType = DbType.Int32;
				colvarRegionalResidualPeriodID.MaxLength = 0;
				colvarRegionalResidualPeriodID.AutoIncrement = false;
				colvarRegionalResidualPeriodID.IsNullable = false;
				colvarRegionalResidualPeriodID.IsPrimaryKey = false;
				colvarRegionalResidualPeriodID.IsForeignKey = true;
				colvarRegionalResidualPeriodID.IsReadOnly = false;
				colvarRegionalResidualPeriodID.DefaultSetting = @"";
				colvarRegionalResidualPeriodID.ForeignKeyTableName = "PR_RegionalResidualPeriods";
				schema.Columns.Add(colvarRegionalResidualPeriodID);

				TableSchema.TableColumn colvarPaycheckID = new TableSchema.TableColumn(schema);
				colvarPaycheckID.ColumnName = "PaycheckID";
				colvarPaycheckID.DataType = DbType.Int32;
				colvarPaycheckID.MaxLength = 0;
				colvarPaycheckID.AutoIncrement = false;
				colvarPaycheckID.IsNullable = true;
				colvarPaycheckID.IsPrimaryKey = false;
				colvarPaycheckID.IsForeignKey = true;
				colvarPaycheckID.IsReadOnly = false;
				colvarPaycheckID.DefaultSetting = @"";
				colvarPaycheckID.ForeignKeyTableName = "PR_Paychecks";
				schema.Columns.Add(colvarPaycheckID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarAccountPayRate = new TableSchema.TableColumn(schema);
				colvarAccountPayRate.ColumnName = "AccountPayRate";
				colvarAccountPayRate.DataType = DbType.Currency;
				colvarAccountPayRate.MaxLength = 0;
				colvarAccountPayRate.AutoIncrement = false;
				colvarAccountPayRate.IsNullable = false;
				colvarAccountPayRate.IsPrimaryKey = false;
				colvarAccountPayRate.IsForeignKey = false;
				colvarAccountPayRate.IsReadOnly = false;
				colvarAccountPayRate.DefaultSetting = @"";
				colvarAccountPayRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountPayRate);

				TableSchema.TableColumn colvarTotalPayment = new TableSchema.TableColumn(schema);
				colvarTotalPayment.ColumnName = "TotalPayment";
				colvarTotalPayment.DataType = DbType.Currency;
				colvarTotalPayment.MaxLength = 0;
				colvarTotalPayment.AutoIncrement = false;
				colvarTotalPayment.IsNullable = false;
				colvarTotalPayment.IsPrimaryKey = false;
				colvarTotalPayment.IsForeignKey = false;
				colvarTotalPayment.IsReadOnly = false;
				colvarTotalPayment.DefaultSetting = @"";
				colvarTotalPayment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPayment);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_RegionalResiduals",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_RegionalResidual LoadFrom(PR_RegionalResidual item)
		{
			PR_RegionalResidual result = new PR_RegionalResidual();
			if (item.RegionalResidualID != default(int)) {
				result.LoadByKey(item.RegionalResidualID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RegionalResidualID {
			get { return GetColumnValue<int>(Columns.RegionalResidualID); }
			set {
				SetColumnValue(Columns.RegionalResidualID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalResidualID));
			}
		}
		[DataMember]
		public int RegionalResidualPeriodID {
			get { return GetColumnValue<int>(Columns.RegionalResidualPeriodID); }
			set {
				SetColumnValue(Columns.RegionalResidualPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalResidualPeriodID));
			}
		}
		[DataMember]
		public int? PaycheckID {
			get { return GetColumnValue<int?>(Columns.PaycheckID); }
			set {
				SetColumnValue(Columns.PaycheckID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaycheckID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal AccountPayRate {
			get { return GetColumnValue<decimal>(Columns.AccountPayRate); }
			set {
				SetColumnValue(Columns.AccountPayRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountPayRate));
			}
		}
		[DataMember]
		public decimal TotalPayment {
			get { return GetColumnValue<decimal>(Columns.TotalPayment); }
			set {
				SetColumnValue(Columns.TotalPayment, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPayment));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_Paycheck _Paycheck;
		//Relationship: FK_PR_RegionalResiduals_PR_Paychecks
		public PR_Paycheck Paycheck
		{
			get
			{
				if(_Paycheck == null) {
					_Paycheck = PR_Paycheck.FetchByID(this.PaycheckID);
				}
				return _Paycheck;
			}
			set
			{
				SetColumnValue("PaycheckID", value.PaycheckID);
				_Paycheck = value;
			}
		}

		private PR_RegionalResidualPeriod _RegionalResidualPeriod;
		//Relationship: FK_PR_RegionalResiduals_PR_RegionalResiduals
		public PR_RegionalResidualPeriod RegionalResidualPeriod
		{
			get
			{
				if(_RegionalResidualPeriod == null) {
					_RegionalResidualPeriod = PR_RegionalResidualPeriod.FetchByID(this.RegionalResidualPeriodID);
				}
				return _RegionalResidualPeriod;
			}
			set
			{
				SetColumnValue("RegionalResidualPeriodID", value.RegionalResidualPeriodID);
				_RegionalResidualPeriod = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RegionalResidualID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RegionalResidualIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RegionalResidualPeriodIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PaycheckIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AccountPayRateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TotalPaymentColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RegionalResidualID = @"RegionalResidualID";
			public static readonly string RegionalResidualPeriodID = @"RegionalResidualPeriodID";
			public static readonly string PaycheckID = @"PaycheckID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string AccountPayRate = @"AccountPayRate";
			public static readonly string TotalPayment = @"TotalPayment";
			public static readonly string CreatedByDate = @"CreatedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RegionalResidualID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_RollingTransaction class.
	/// </summary>
	[DataContract]
	public partial class PR_RollingTransactionCollection : ActiveList<PR_RollingTransaction, PR_RollingTransactionCollection>
	{
		public static PR_RollingTransactionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_RollingTransactionCollection result = new PR_RollingTransactionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_RollingTransaction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_RollingTransactions table.
	/// </summary>
	[DataContract]
	public partial class PR_RollingTransaction : ActiveRecord<PR_RollingTransaction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_RollingTransaction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_RollingTransactions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRollingTransactionID = new TableSchema.TableColumn(schema);
				colvarRollingTransactionID.ColumnName = "RollingTransactionID";
				colvarRollingTransactionID.DataType = DbType.Int32;
				colvarRollingTransactionID.MaxLength = 0;
				colvarRollingTransactionID.AutoIncrement = true;
				colvarRollingTransactionID.IsNullable = false;
				colvarRollingTransactionID.IsPrimaryKey = true;
				colvarRollingTransactionID.IsForeignKey = false;
				colvarRollingTransactionID.IsReadOnly = false;
				colvarRollingTransactionID.DefaultSetting = @"";
				colvarRollingTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRollingTransactionID);

				TableSchema.TableColumn colvarRollingTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarRollingTransactionTypeID.ColumnName = "RollingTransactionTypeID";
				colvarRollingTransactionTypeID.DataType = DbType.Int32;
				colvarRollingTransactionTypeID.MaxLength = 0;
				colvarRollingTransactionTypeID.AutoIncrement = false;
				colvarRollingTransactionTypeID.IsNullable = false;
				colvarRollingTransactionTypeID.IsPrimaryKey = false;
				colvarRollingTransactionTypeID.IsForeignKey = true;
				colvarRollingTransactionTypeID.IsReadOnly = false;
				colvarRollingTransactionTypeID.DefaultSetting = @"";
				colvarRollingTransactionTypeID.ForeignKeyTableName = "PR_RollingTransactionTypes";
				schema.Columns.Add(colvarRollingTransactionTypeID);

				TableSchema.TableColumn colvarPaycheckID = new TableSchema.TableColumn(schema);
				colvarPaycheckID.ColumnName = "PaycheckID";
				colvarPaycheckID.DataType = DbType.Int32;
				colvarPaycheckID.MaxLength = 0;
				colvarPaycheckID.AutoIncrement = false;
				colvarPaycheckID.IsNullable = false;
				colvarPaycheckID.IsPrimaryKey = false;
				colvarPaycheckID.IsForeignKey = true;
				colvarPaycheckID.IsReadOnly = false;
				colvarPaycheckID.DefaultSetting = @"";
				colvarPaycheckID.ForeignKeyTableName = "PR_Paychecks";
				schema.Columns.Add(colvarPaycheckID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = 1073741823;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_RollingTransactions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_RollingTransaction LoadFrom(PR_RollingTransaction item)
		{
			PR_RollingTransaction result = new PR_RollingTransaction();
			if (item.RollingTransactionID != default(int)) {
				result.LoadByKey(item.RollingTransactionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RollingTransactionID {
			get { return GetColumnValue<int>(Columns.RollingTransactionID); }
			set {
				SetColumnValue(Columns.RollingTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RollingTransactionID));
			}
		}
		[DataMember]
		public int RollingTransactionTypeID {
			get { return GetColumnValue<int>(Columns.RollingTransactionTypeID); }
			set {
				SetColumnValue(Columns.RollingTransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RollingTransactionTypeID));
			}
		}
		[DataMember]
		public int PaycheckID {
			get { return GetColumnValue<int>(Columns.PaycheckID); }
			set {
				SetColumnValue(Columns.PaycheckID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaycheckID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_Paycheck _Paycheck;
		//Relationship: FK_PR_RollingTransactions_PR_Paychecks
		public PR_Paycheck Paycheck
		{
			get
			{
				if(_Paycheck == null) {
					_Paycheck = PR_Paycheck.FetchByID(this.PaycheckID);
				}
				return _Paycheck;
			}
			set
			{
				SetColumnValue("PaycheckID", value.PaycheckID);
				_Paycheck = value;
			}
		}

		private PR_RollingTransactionType _RollingTransactionType;
		//Relationship: FK_PR_RollingTransactions_PR_RollingTransactionTypes
		public PR_RollingTransactionType RollingTransactionType
		{
			get
			{
				if(_RollingTransactionType == null) {
					_RollingTransactionType = PR_RollingTransactionType.FetchByID(this.RollingTransactionTypeID);
				}
				return _RollingTransactionType;
			}
			set
			{
				SetColumnValue("RollingTransactionTypeID", value.RollingTransactionTypeID);
				_RollingTransactionType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RollingTransactionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RollingTransactionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RollingTransactionTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PaycheckIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RollingTransactionID = @"RollingTransactionID";
			public static readonly string RollingTransactionTypeID = @"RollingTransactionTypeID";
			public static readonly string PaycheckID = @"PaycheckID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Amount = @"Amount";
			public static readonly string Comments = @"Comments";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RollingTransactionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_RollingTransactionType class.
	/// </summary>
	[DataContract]
	public partial class PR_RollingTransactionTypeCollection : ActiveList<PR_RollingTransactionType, PR_RollingTransactionTypeCollection>
	{
		public static PR_RollingTransactionTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_RollingTransactionTypeCollection result = new PR_RollingTransactionTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_RollingTransactionType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_RollingTransactionTypes table.
	/// </summary>
	[DataContract]
	public partial class PR_RollingTransactionType : ActiveRecord<PR_RollingTransactionType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum RollingTransactionTypeEnum : int
		{
		}

		//[DataMember]
		//public RollingTransactionTypeEnum RollingTransactionTypeCode
		//{
		//	get { return (RollingTransactionTypeEnum)RollingTransactionTypeID; }
		//	set { RollingTransactionTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_RollingTransactionType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_RollingTransactionTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRollingTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarRollingTransactionTypeID.ColumnName = "RollingTransactionTypeID";
				colvarRollingTransactionTypeID.DataType = DbType.Int32;
				colvarRollingTransactionTypeID.MaxLength = 0;
				colvarRollingTransactionTypeID.AutoIncrement = true;
				colvarRollingTransactionTypeID.IsNullable = false;
				colvarRollingTransactionTypeID.IsPrimaryKey = true;
				colvarRollingTransactionTypeID.IsForeignKey = false;
				colvarRollingTransactionTypeID.IsReadOnly = false;
				colvarRollingTransactionTypeID.DefaultSetting = @"";
				colvarRollingTransactionTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRollingTransactionTypeID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_RollingTransactionTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_RollingTransactionType LoadFrom(PR_RollingTransactionType item)
		{
			PR_RollingTransactionType result = new PR_RollingTransactionType();
			if (item.RollingTransactionTypeID != default(int)) {
				result.LoadByKey(item.RollingTransactionTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RollingTransactionTypeID {
			get { return GetColumnValue<int>(Columns.RollingTransactionTypeID); }
			set {
				SetColumnValue(Columns.RollingTransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RollingTransactionTypeID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn RollingTransactionTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RollingTransactionTypeID = @"RollingTransactionTypeID";
			public static readonly string Name = @"Name";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RollingTransactionTypeID; }
		}
		*/

		#region Foreign Collections

		private PR_RollingTransactionCollection _PR_RollingTransactionsCol;
		//Relationship: FK_PR_RollingTransactions_PR_RollingTransactionTypes
		public PR_RollingTransactionCollection PR_RollingTransactionsCol
		{
			get
			{
				if(_PR_RollingTransactionsCol == null) {
					_PR_RollingTransactionsCol = new PR_RollingTransactionCollection();
					_PR_RollingTransactionsCol.LoadAndCloseReader(PR_RollingTransaction.Query()
						.WHERE(PR_RollingTransaction.Columns.RollingTransactionTypeID, RollingTransactionTypeID).ExecuteReader());
				}
				return _PR_RollingTransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_SalesManagerBackend class.
	/// </summary>
	[DataContract]
	public partial class PR_SalesManagerBackendCollection : ActiveList<PR_SalesManagerBackend, PR_SalesManagerBackendCollection>
	{
		public static PR_SalesManagerBackendCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_SalesManagerBackendCollection result = new PR_SalesManagerBackendCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_SalesManagerBackend item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_SalesManagerBackends table.
	/// </summary>
	[DataContract]
	public partial class PR_SalesManagerBackend : ActiveRecord<PR_SalesManagerBackend>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_SalesManagerBackend()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_SalesManagerBackends", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSalesManagerBackendID = new TableSchema.TableColumn(schema);
				colvarSalesManagerBackendID.ColumnName = "SalesManagerBackendID";
				colvarSalesManagerBackendID.DataType = DbType.Int32;
				colvarSalesManagerBackendID.MaxLength = 0;
				colvarSalesManagerBackendID.AutoIncrement = true;
				colvarSalesManagerBackendID.IsNullable = false;
				colvarSalesManagerBackendID.IsPrimaryKey = true;
				colvarSalesManagerBackendID.IsForeignKey = false;
				colvarSalesManagerBackendID.IsReadOnly = false;
				colvarSalesManagerBackendID.DefaultSetting = @"";
				colvarSalesManagerBackendID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesManagerBackendID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarPayScaleID = new TableSchema.TableColumn(schema);
				colvarPayScaleID.ColumnName = "PayScaleID";
				colvarPayScaleID.DataType = DbType.Int32;
				colvarPayScaleID.MaxLength = 0;
				colvarPayScaleID.AutoIncrement = false;
				colvarPayScaleID.IsNullable = false;
				colvarPayScaleID.IsPrimaryKey = false;
				colvarPayScaleID.IsForeignKey = true;
				colvarPayScaleID.IsReadOnly = false;
				colvarPayScaleID.DefaultSetting = @"";
				colvarPayScaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayScaleID);

				TableSchema.TableColumn colvarPersonalPayScaleID = new TableSchema.TableColumn(schema);
				colvarPersonalPayScaleID.ColumnName = "PersonalPayScaleID";
				colvarPersonalPayScaleID.DataType = DbType.Int32;
				colvarPersonalPayScaleID.MaxLength = 0;
				colvarPersonalPayScaleID.AutoIncrement = false;
				colvarPersonalPayScaleID.IsNullable = false;
				colvarPersonalPayScaleID.IsPrimaryKey = false;
				colvarPersonalPayScaleID.IsForeignKey = true;
				colvarPersonalPayScaleID.IsReadOnly = false;
				colvarPersonalPayScaleID.DefaultSetting = @"";
				colvarPersonalPayScaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPersonalPayScaleID);

				TableSchema.TableColumn colvarBackendManagerPayscaleID = new TableSchema.TableColumn(schema);
				colvarBackendManagerPayscaleID.ColumnName = "BackendManagerPayscaleID";
				colvarBackendManagerPayscaleID.DataType = DbType.Int32;
				colvarBackendManagerPayscaleID.MaxLength = 0;
				colvarBackendManagerPayscaleID.AutoIncrement = false;
				colvarBackendManagerPayscaleID.IsNullable = true;
				colvarBackendManagerPayscaleID.IsPrimaryKey = false;
				colvarBackendManagerPayscaleID.IsForeignKey = true;
				colvarBackendManagerPayscaleID.IsReadOnly = false;
				colvarBackendManagerPayscaleID.DefaultSetting = @"";
				colvarBackendManagerPayscaleID.ForeignKeyTableName = "PR_BackendManagerPayscales";
				schema.Columns.Add(colvarBackendManagerPayscaleID);

				TableSchema.TableColumn colvarBackendPayscaleID = new TableSchema.TableColumn(schema);
				colvarBackendPayscaleID.ColumnName = "BackendPayscaleID";
				colvarBackendPayscaleID.DataType = DbType.Int32;
				colvarBackendPayscaleID.MaxLength = 0;
				colvarBackendPayscaleID.AutoIncrement = false;
				colvarBackendPayscaleID.IsNullable = true;
				colvarBackendPayscaleID.IsPrimaryKey = false;
				colvarBackendPayscaleID.IsForeignKey = true;
				colvarBackendPayscaleID.IsReadOnly = false;
				colvarBackendPayscaleID.DefaultSetting = @"";
				colvarBackendPayscaleID.ForeignKeyTableName = "PR_BackendPayscales";
				schema.Columns.Add(colvarBackendPayscaleID);

				TableSchema.TableColumn colvarPersonalBackendPayscaleID = new TableSchema.TableColumn(schema);
				colvarPersonalBackendPayscaleID.ColumnName = "PersonalBackendPayscaleID";
				colvarPersonalBackendPayscaleID.DataType = DbType.Int32;
				colvarPersonalBackendPayscaleID.MaxLength = 0;
				colvarPersonalBackendPayscaleID.AutoIncrement = false;
				colvarPersonalBackendPayscaleID.IsNullable = true;
				colvarPersonalBackendPayscaleID.IsPrimaryKey = false;
				colvarPersonalBackendPayscaleID.IsForeignKey = true;
				colvarPersonalBackendPayscaleID.IsReadOnly = false;
				colvarPersonalBackendPayscaleID.DefaultSetting = @"";
				colvarPersonalBackendPayscaleID.ForeignKeyTableName = "PR_BackendPayscales";
				schema.Columns.Add(colvarPersonalBackendPayscaleID);

				TableSchema.TableColumn colvarDetailFileID = new TableSchema.TableColumn(schema);
				colvarDetailFileID.ColumnName = "DetailFileID";
				colvarDetailFileID.DataType = DbType.Int32;
				colvarDetailFileID.MaxLength = 0;
				colvarDetailFileID.AutoIncrement = false;
				colvarDetailFileID.IsNullable = true;
				colvarDetailFileID.IsPrimaryKey = false;
				colvarDetailFileID.IsForeignKey = false;
				colvarDetailFileID.IsReadOnly = false;
				colvarDetailFileID.DefaultSetting = @"";
				colvarDetailFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetailFileID);

				TableSchema.TableColumn colvarRegionalUserID = new TableSchema.TableColumn(schema);
				colvarRegionalUserID.ColumnName = "RegionalUserID";
				colvarRegionalUserID.DataType = DbType.Int32;
				colvarRegionalUserID.MaxLength = 0;
				colvarRegionalUserID.AutoIncrement = false;
				colvarRegionalUserID.IsNullable = true;
				colvarRegionalUserID.IsPrimaryKey = false;
				colvarRegionalUserID.IsForeignKey = true;
				colvarRegionalUserID.IsReadOnly = false;
				colvarRegionalUserID.DefaultSetting = @"";
				colvarRegionalUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarRegionalUserID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarIsCoManager = new TableSchema.TableColumn(schema);
				colvarIsCoManager.ColumnName = "IsCoManager";
				colvarIsCoManager.DataType = DbType.Boolean;
				colvarIsCoManager.MaxLength = 0;
				colvarIsCoManager.AutoIncrement = false;
				colvarIsCoManager.IsNullable = false;
				colvarIsCoManager.IsPrimaryKey = false;
				colvarIsCoManager.IsForeignKey = false;
				colvarIsCoManager.IsReadOnly = false;
				colvarIsCoManager.DefaultSetting = @"";
				colvarIsCoManager.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCoManager);

				TableSchema.TableColumn colvarNGoodAccountsSold = new TableSchema.TableColumn(schema);
				colvarNGoodAccountsSold.ColumnName = "NGoodAccountsSold";
				colvarNGoodAccountsSold.DataType = DbType.Int32;
				colvarNGoodAccountsSold.MaxLength = 0;
				colvarNGoodAccountsSold.AutoIncrement = false;
				colvarNGoodAccountsSold.IsNullable = false;
				colvarNGoodAccountsSold.IsPrimaryKey = false;
				colvarNGoodAccountsSold.IsForeignKey = false;
				colvarNGoodAccountsSold.IsReadOnly = false;
				colvarNGoodAccountsSold.DefaultSetting = @"((0))";
				colvarNGoodAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodAccountsSold);

				TableSchema.TableColumn colvarNExcellentAccountsSold = new TableSchema.TableColumn(schema);
				colvarNExcellentAccountsSold.ColumnName = "NExcellentAccountsSold";
				colvarNExcellentAccountsSold.DataType = DbType.Int32;
				colvarNExcellentAccountsSold.MaxLength = 0;
				colvarNExcellentAccountsSold.AutoIncrement = false;
				colvarNExcellentAccountsSold.IsNullable = false;
				colvarNExcellentAccountsSold.IsPrimaryKey = false;
				colvarNExcellentAccountsSold.IsForeignKey = false;
				colvarNExcellentAccountsSold.IsReadOnly = false;
				colvarNExcellentAccountsSold.DefaultSetting = @"((0))";
				colvarNExcellentAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNExcellentAccountsSold);

				TableSchema.TableColumn colvarNPassAccountsSold = new TableSchema.TableColumn(schema);
				colvarNPassAccountsSold.ColumnName = "NPassAccountsSold";
				colvarNPassAccountsSold.DataType = DbType.Int32;
				colvarNPassAccountsSold.MaxLength = 0;
				colvarNPassAccountsSold.AutoIncrement = false;
				colvarNPassAccountsSold.IsNullable = false;
				colvarNPassAccountsSold.IsPrimaryKey = false;
				colvarNPassAccountsSold.IsForeignKey = false;
				colvarNPassAccountsSold.IsReadOnly = false;
				colvarNPassAccountsSold.DefaultSetting = @"((0))";
				colvarNPassAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPassAccountsSold);

				TableSchema.TableColumn colvarNSubAccountsSold = new TableSchema.TableColumn(schema);
				colvarNSubAccountsSold.ColumnName = "NSubAccountsSold";
				colvarNSubAccountsSold.DataType = DbType.Int32;
				colvarNSubAccountsSold.MaxLength = 0;
				colvarNSubAccountsSold.AutoIncrement = false;
				colvarNSubAccountsSold.IsNullable = false;
				colvarNSubAccountsSold.IsPrimaryKey = false;
				colvarNSubAccountsSold.IsForeignKey = false;
				colvarNSubAccountsSold.IsReadOnly = false;
				colvarNSubAccountsSold.DefaultSetting = @"((0))";
				colvarNSubAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubAccountsSold);

				TableSchema.TableColumn colvarNBadAccountsSold = new TableSchema.TableColumn(schema);
				colvarNBadAccountsSold.ColumnName = "NBadAccountsSold";
				colvarNBadAccountsSold.DataType = DbType.Int32;
				colvarNBadAccountsSold.MaxLength = 0;
				colvarNBadAccountsSold.AutoIncrement = false;
				colvarNBadAccountsSold.IsNullable = false;
				colvarNBadAccountsSold.IsPrimaryKey = false;
				colvarNBadAccountsSold.IsForeignKey = false;
				colvarNBadAccountsSold.IsReadOnly = false;
				colvarNBadAccountsSold.DefaultSetting = @"((0))";
				colvarNBadAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNBadAccountsSold);

				TableSchema.TableColumn colvarNGoodCancels = new TableSchema.TableColumn(schema);
				colvarNGoodCancels.ColumnName = "NGoodCancels";
				colvarNGoodCancels.DataType = DbType.Int32;
				colvarNGoodCancels.MaxLength = 0;
				colvarNGoodCancels.AutoIncrement = false;
				colvarNGoodCancels.IsNullable = false;
				colvarNGoodCancels.IsPrimaryKey = false;
				colvarNGoodCancels.IsForeignKey = false;
				colvarNGoodCancels.IsReadOnly = false;
				colvarNGoodCancels.DefaultSetting = @"((0))";
				colvarNGoodCancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodCancels);

				TableSchema.TableColumn colvarNGoodWithHolds = new TableSchema.TableColumn(schema);
				colvarNGoodWithHolds.ColumnName = "NGoodWithHolds";
				colvarNGoodWithHolds.DataType = DbType.Int32;
				colvarNGoodWithHolds.MaxLength = 0;
				colvarNGoodWithHolds.AutoIncrement = false;
				colvarNGoodWithHolds.IsNullable = false;
				colvarNGoodWithHolds.IsPrimaryKey = false;
				colvarNGoodWithHolds.IsForeignKey = false;
				colvarNGoodWithHolds.IsReadOnly = false;
				colvarNGoodWithHolds.DefaultSetting = @"((0))";
				colvarNGoodWithHolds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodWithHolds);

				TableSchema.TableColumn colvarNGoodDelinquent = new TableSchema.TableColumn(schema);
				colvarNGoodDelinquent.ColumnName = "NGoodDelinquent";
				colvarNGoodDelinquent.DataType = DbType.Int32;
				colvarNGoodDelinquent.MaxLength = 0;
				colvarNGoodDelinquent.AutoIncrement = false;
				colvarNGoodDelinquent.IsNullable = false;
				colvarNGoodDelinquent.IsPrimaryKey = false;
				colvarNGoodDelinquent.IsForeignKey = false;
				colvarNGoodDelinquent.IsReadOnly = false;
				colvarNGoodDelinquent.DefaultSetting = @"((0))";
				colvarNGoodDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodDelinquent);

				TableSchema.TableColumn colvarNGoodFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarNGoodFriendsAndFamily.ColumnName = "NGoodFriendsAndFamily";
				colvarNGoodFriendsAndFamily.DataType = DbType.Int32;
				colvarNGoodFriendsAndFamily.MaxLength = 0;
				colvarNGoodFriendsAndFamily.AutoIncrement = false;
				colvarNGoodFriendsAndFamily.IsNullable = false;
				colvarNGoodFriendsAndFamily.IsPrimaryKey = false;
				colvarNGoodFriendsAndFamily.IsForeignKey = false;
				colvarNGoodFriendsAndFamily.IsReadOnly = false;
				colvarNGoodFriendsAndFamily.DefaultSetting = @"((0))";
				colvarNGoodFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodFriendsAndFamily);

				TableSchema.TableColumn colvarNSubCancels = new TableSchema.TableColumn(schema);
				colvarNSubCancels.ColumnName = "NSubCancels";
				colvarNSubCancels.DataType = DbType.Int32;
				colvarNSubCancels.MaxLength = 0;
				colvarNSubCancels.AutoIncrement = false;
				colvarNSubCancels.IsNullable = false;
				colvarNSubCancels.IsPrimaryKey = false;
				colvarNSubCancels.IsForeignKey = false;
				colvarNSubCancels.IsReadOnly = false;
				colvarNSubCancels.DefaultSetting = @"((0))";
				colvarNSubCancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubCancels);

				TableSchema.TableColumn colvarNSubWithHolds = new TableSchema.TableColumn(schema);
				colvarNSubWithHolds.ColumnName = "NSubWithHolds";
				colvarNSubWithHolds.DataType = DbType.Int32;
				colvarNSubWithHolds.MaxLength = 0;
				colvarNSubWithHolds.AutoIncrement = false;
				colvarNSubWithHolds.IsNullable = false;
				colvarNSubWithHolds.IsPrimaryKey = false;
				colvarNSubWithHolds.IsForeignKey = false;
				colvarNSubWithHolds.IsReadOnly = false;
				colvarNSubWithHolds.DefaultSetting = @"((0))";
				colvarNSubWithHolds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubWithHolds);

				TableSchema.TableColumn colvarNSubMissingActivationOrAutoPay = new TableSchema.TableColumn(schema);
				colvarNSubMissingActivationOrAutoPay.ColumnName = "NSubMissingActivationOrAutoPay";
				colvarNSubMissingActivationOrAutoPay.DataType = DbType.Int32;
				colvarNSubMissingActivationOrAutoPay.MaxLength = 0;
				colvarNSubMissingActivationOrAutoPay.AutoIncrement = false;
				colvarNSubMissingActivationOrAutoPay.IsNullable = false;
				colvarNSubMissingActivationOrAutoPay.IsPrimaryKey = false;
				colvarNSubMissingActivationOrAutoPay.IsForeignKey = false;
				colvarNSubMissingActivationOrAutoPay.IsReadOnly = false;
				colvarNSubMissingActivationOrAutoPay.DefaultSetting = @"((0))";
				colvarNSubMissingActivationOrAutoPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubMissingActivationOrAutoPay);

				TableSchema.TableColumn colvarNSubDelinquent = new TableSchema.TableColumn(schema);
				colvarNSubDelinquent.ColumnName = "NSubDelinquent";
				colvarNSubDelinquent.DataType = DbType.Int32;
				colvarNSubDelinquent.MaxLength = 0;
				colvarNSubDelinquent.AutoIncrement = false;
				colvarNSubDelinquent.IsNullable = false;
				colvarNSubDelinquent.IsPrimaryKey = false;
				colvarNSubDelinquent.IsForeignKey = false;
				colvarNSubDelinquent.IsReadOnly = false;
				colvarNSubDelinquent.DefaultSetting = @"((0))";
				colvarNSubDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubDelinquent);

				TableSchema.TableColumn colvarNSubFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarNSubFriendsAndFamily.ColumnName = "NSubFriendsAndFamily";
				colvarNSubFriendsAndFamily.DataType = DbType.Int32;
				colvarNSubFriendsAndFamily.MaxLength = 0;
				colvarNSubFriendsAndFamily.AutoIncrement = false;
				colvarNSubFriendsAndFamily.IsNullable = false;
				colvarNSubFriendsAndFamily.IsPrimaryKey = false;
				colvarNSubFriendsAndFamily.IsForeignKey = false;
				colvarNSubFriendsAndFamily.IsReadOnly = false;
				colvarNSubFriendsAndFamily.DefaultSetting = @"((0))";
				colvarNSubFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubFriendsAndFamily);

				TableSchema.TableColumn colvarNetGoodAccounts = new TableSchema.TableColumn(schema);
				colvarNetGoodAccounts.ColumnName = "NetGoodAccounts";
				colvarNetGoodAccounts.DataType = DbType.Int32;
				colvarNetGoodAccounts.MaxLength = 0;
				colvarNetGoodAccounts.AutoIncrement = false;
				colvarNetGoodAccounts.IsNullable = false;
				colvarNetGoodAccounts.IsPrimaryKey = false;
				colvarNetGoodAccounts.IsForeignKey = false;
				colvarNetGoodAccounts.IsReadOnly = false;
				colvarNetGoodAccounts.DefaultSetting = @"((0))";
				colvarNetGoodAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetGoodAccounts);

				TableSchema.TableColumn colvarNetSubAccounts = new TableSchema.TableColumn(schema);
				colvarNetSubAccounts.ColumnName = "NetSubAccounts";
				colvarNetSubAccounts.DataType = DbType.Int32;
				colvarNetSubAccounts.MaxLength = 0;
				colvarNetSubAccounts.AutoIncrement = false;
				colvarNetSubAccounts.IsNullable = false;
				colvarNetSubAccounts.IsPrimaryKey = false;
				colvarNetSubAccounts.IsForeignKey = false;
				colvarNetSubAccounts.IsReadOnly = false;
				colvarNetSubAccounts.DefaultSetting = @"((0))";
				colvarNetSubAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetSubAccounts);

				TableSchema.TableColumn colvarNetPassAccounts = new TableSchema.TableColumn(schema);
				colvarNetPassAccounts.ColumnName = "NetPassAccounts";
				colvarNetPassAccounts.DataType = DbType.Int32;
				colvarNetPassAccounts.MaxLength = 0;
				colvarNetPassAccounts.AutoIncrement = false;
				colvarNetPassAccounts.IsNullable = false;
				colvarNetPassAccounts.IsPrimaryKey = false;
				colvarNetPassAccounts.IsForeignKey = false;
				colvarNetPassAccounts.IsReadOnly = false;
				colvarNetPassAccounts.DefaultSetting = @"((0))";
				colvarNetPassAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetPassAccounts);

				TableSchema.TableColumn colvarNGoodWithheld = new TableSchema.TableColumn(schema);
				colvarNGoodWithheld.ColumnName = "NGoodWithheld";
				colvarNGoodWithheld.DataType = DbType.Int32;
				colvarNGoodWithheld.MaxLength = 0;
				colvarNGoodWithheld.AutoIncrement = false;
				colvarNGoodWithheld.IsNullable = false;
				colvarNGoodWithheld.IsPrimaryKey = false;
				colvarNGoodWithheld.IsForeignKey = false;
				colvarNGoodWithheld.IsReadOnly = false;
				colvarNGoodWithheld.DefaultSetting = @"((0))";
				colvarNGoodWithheld.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodWithheld);

				TableSchema.TableColumn colvarNSubWithheld = new TableSchema.TableColumn(schema);
				colvarNSubWithheld.ColumnName = "NSubWithheld";
				colvarNSubWithheld.DataType = DbType.Int32;
				colvarNSubWithheld.MaxLength = 0;
				colvarNSubWithheld.AutoIncrement = false;
				colvarNSubWithheld.IsNullable = false;
				colvarNSubWithheld.IsPrimaryKey = false;
				colvarNSubWithheld.IsForeignKey = false;
				colvarNSubWithheld.IsReadOnly = false;
				colvarNSubWithheld.DefaultSetting = @"((0))";
				colvarNSubWithheld.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubWithheld);

				TableSchema.TableColumn colvarNGoodWaivedActivations = new TableSchema.TableColumn(schema);
				colvarNGoodWaivedActivations.ColumnName = "NGoodWaivedActivations";
				colvarNGoodWaivedActivations.DataType = DbType.Int32;
				colvarNGoodWaivedActivations.MaxLength = 0;
				colvarNGoodWaivedActivations.AutoIncrement = false;
				colvarNGoodWaivedActivations.IsNullable = false;
				colvarNGoodWaivedActivations.IsPrimaryKey = false;
				colvarNGoodWaivedActivations.IsForeignKey = false;
				colvarNGoodWaivedActivations.IsReadOnly = false;
				colvarNGoodWaivedActivations.DefaultSetting = @"((0))";
				colvarNGoodWaivedActivations.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodWaivedActivations);

				TableSchema.TableColumn colvarNGoodManualBill = new TableSchema.TableColumn(schema);
				colvarNGoodManualBill.ColumnName = "NGoodManualBill";
				colvarNGoodManualBill.DataType = DbType.Int32;
				colvarNGoodManualBill.MaxLength = 0;
				colvarNGoodManualBill.AutoIncrement = false;
				colvarNGoodManualBill.IsNullable = false;
				colvarNGoodManualBill.IsPrimaryKey = false;
				colvarNGoodManualBill.IsForeignKey = false;
				colvarNGoodManualBill.IsReadOnly = false;
				colvarNGoodManualBill.DefaultSetting = @"((0))";
				colvarNGoodManualBill.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodManualBill);

				TableSchema.TableColumn colvarNGoodMissingInvoiceFee = new TableSchema.TableColumn(schema);
				colvarNGoodMissingInvoiceFee.ColumnName = "NGoodMissingInvoiceFee";
				colvarNGoodMissingInvoiceFee.DataType = DbType.Int32;
				colvarNGoodMissingInvoiceFee.MaxLength = 0;
				colvarNGoodMissingInvoiceFee.AutoIncrement = false;
				colvarNGoodMissingInvoiceFee.IsNullable = false;
				colvarNGoodMissingInvoiceFee.IsPrimaryKey = false;
				colvarNGoodMissingInvoiceFee.IsForeignKey = false;
				colvarNGoodMissingInvoiceFee.IsReadOnly = false;
				colvarNGoodMissingInvoiceFee.DefaultSetting = @"((0))";
				colvarNGoodMissingInvoiceFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodMissingInvoiceFee);

				TableSchema.TableColumn colvarNGoodExtendedContracts = new TableSchema.TableColumn(schema);
				colvarNGoodExtendedContracts.ColumnName = "NGoodExtendedContracts";
				colvarNGoodExtendedContracts.DataType = DbType.Int32;
				colvarNGoodExtendedContracts.MaxLength = 0;
				colvarNGoodExtendedContracts.AutoIncrement = false;
				colvarNGoodExtendedContracts.IsNullable = false;
				colvarNGoodExtendedContracts.IsPrimaryKey = false;
				colvarNGoodExtendedContracts.IsForeignKey = false;
				colvarNGoodExtendedContracts.IsReadOnly = false;
				colvarNGoodExtendedContracts.DefaultSetting = @"((0))";
				colvarNGoodExtendedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodExtendedContracts);

				TableSchema.TableColumn colvarNGoodShortenedContracts = new TableSchema.TableColumn(schema);
				colvarNGoodShortenedContracts.ColumnName = "NGoodShortenedContracts";
				colvarNGoodShortenedContracts.DataType = DbType.Int32;
				colvarNGoodShortenedContracts.MaxLength = 0;
				colvarNGoodShortenedContracts.AutoIncrement = false;
				colvarNGoodShortenedContracts.IsNullable = false;
				colvarNGoodShortenedContracts.IsPrimaryKey = false;
				colvarNGoodShortenedContracts.IsForeignKey = false;
				colvarNGoodShortenedContracts.IsReadOnly = false;
				colvarNGoodShortenedContracts.DefaultSetting = @"((0))";
				colvarNGoodShortenedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodShortenedContracts);

				TableSchema.TableColumn colvarNGoodLoweredRMR = new TableSchema.TableColumn(schema);
				colvarNGoodLoweredRMR.ColumnName = "NGoodLoweredRMR";
				colvarNGoodLoweredRMR.DataType = DbType.Int32;
				colvarNGoodLoweredRMR.MaxLength = 0;
				colvarNGoodLoweredRMR.AutoIncrement = false;
				colvarNGoodLoweredRMR.IsNullable = false;
				colvarNGoodLoweredRMR.IsPrimaryKey = false;
				colvarNGoodLoweredRMR.IsForeignKey = false;
				colvarNGoodLoweredRMR.IsReadOnly = false;
				colvarNGoodLoweredRMR.DefaultSetting = @"((0))";
				colvarNGoodLoweredRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodLoweredRMR);

				TableSchema.TableColumn colvarNGoodDigitalAccounts = new TableSchema.TableColumn(schema);
				colvarNGoodDigitalAccounts.ColumnName = "NGoodDigitalAccounts";
				colvarNGoodDigitalAccounts.DataType = DbType.Int32;
				colvarNGoodDigitalAccounts.MaxLength = 0;
				colvarNGoodDigitalAccounts.AutoIncrement = false;
				colvarNGoodDigitalAccounts.IsNullable = false;
				colvarNGoodDigitalAccounts.IsPrimaryKey = false;
				colvarNGoodDigitalAccounts.IsForeignKey = false;
				colvarNGoodDigitalAccounts.IsReadOnly = false;
				colvarNGoodDigitalAccounts.DefaultSetting = @"((0))";
				colvarNGoodDigitalAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodDigitalAccounts);

				TableSchema.TableColumn colvarNGoodCommercial = new TableSchema.TableColumn(schema);
				colvarNGoodCommercial.ColumnName = "NGoodCommercial";
				colvarNGoodCommercial.DataType = DbType.Int32;
				colvarNGoodCommercial.MaxLength = 0;
				colvarNGoodCommercial.AutoIncrement = false;
				colvarNGoodCommercial.IsNullable = false;
				colvarNGoodCommercial.IsPrimaryKey = false;
				colvarNGoodCommercial.IsForeignKey = false;
				colvarNGoodCommercial.IsReadOnly = false;
				colvarNGoodCommercial.DefaultSetting = @"((0))";
				colvarNGoodCommercial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodCommercial);

				TableSchema.TableColumn colvarNRaisedRMROneDollar = new TableSchema.TableColumn(schema);
				colvarNRaisedRMROneDollar.ColumnName = "NRaisedRMROneDollar";
				colvarNRaisedRMROneDollar.DataType = DbType.Int32;
				colvarNRaisedRMROneDollar.MaxLength = 0;
				colvarNRaisedRMROneDollar.AutoIncrement = false;
				colvarNRaisedRMROneDollar.IsNullable = false;
				colvarNRaisedRMROneDollar.IsPrimaryKey = false;
				colvarNRaisedRMROneDollar.IsForeignKey = false;
				colvarNRaisedRMROneDollar.IsReadOnly = false;
				colvarNRaisedRMROneDollar.DefaultSetting = @"((0))";
				colvarNRaisedRMROneDollar.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNRaisedRMROneDollar);

				TableSchema.TableColumn colvarNRaisedRMRTwoDollars = new TableSchema.TableColumn(schema);
				colvarNRaisedRMRTwoDollars.ColumnName = "NRaisedRMRTwoDollars";
				colvarNRaisedRMRTwoDollars.DataType = DbType.Int32;
				colvarNRaisedRMRTwoDollars.MaxLength = 0;
				colvarNRaisedRMRTwoDollars.AutoIncrement = false;
				colvarNRaisedRMRTwoDollars.IsNullable = false;
				colvarNRaisedRMRTwoDollars.IsPrimaryKey = false;
				colvarNRaisedRMRTwoDollars.IsForeignKey = false;
				colvarNRaisedRMRTwoDollars.IsReadOnly = false;
				colvarNRaisedRMRTwoDollars.DefaultSetting = @"((0))";
				colvarNRaisedRMRTwoDollars.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNRaisedRMRTwoDollars);

				TableSchema.TableColumn colvarNRaisedRMRThreeDollars = new TableSchema.TableColumn(schema);
				colvarNRaisedRMRThreeDollars.ColumnName = "NRaisedRMRThreeDollars";
				colvarNRaisedRMRThreeDollars.DataType = DbType.Int32;
				colvarNRaisedRMRThreeDollars.MaxLength = 0;
				colvarNRaisedRMRThreeDollars.AutoIncrement = false;
				colvarNRaisedRMRThreeDollars.IsNullable = false;
				colvarNRaisedRMRThreeDollars.IsPrimaryKey = false;
				colvarNRaisedRMRThreeDollars.IsForeignKey = false;
				colvarNRaisedRMRThreeDollars.IsReadOnly = false;
				colvarNRaisedRMRThreeDollars.DefaultSetting = @"((0))";
				colvarNRaisedRMRThreeDollars.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNRaisedRMRThreeDollars);

				TableSchema.TableColumn colvarNGoodSaves = new TableSchema.TableColumn(schema);
				colvarNGoodSaves.ColumnName = "NGoodSaves";
				colvarNGoodSaves.DataType = DbType.Int32;
				colvarNGoodSaves.MaxLength = 0;
				colvarNGoodSaves.AutoIncrement = false;
				colvarNGoodSaves.IsNullable = false;
				colvarNGoodSaves.IsPrimaryKey = false;
				colvarNGoodSaves.IsForeignKey = false;
				colvarNGoodSaves.IsReadOnly = false;
				colvarNGoodSaves.DefaultSetting = @"((0))";
				colvarNGoodSaves.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodSaves);

				TableSchema.TableColumn colvarNCoManagerQualifyingAccounts = new TableSchema.TableColumn(schema);
				colvarNCoManagerQualifyingAccounts.ColumnName = "NCoManagerQualifyingAccounts";
				colvarNCoManagerQualifyingAccounts.DataType = DbType.Int32;
				colvarNCoManagerQualifyingAccounts.MaxLength = 0;
				colvarNCoManagerQualifyingAccounts.AutoIncrement = false;
				colvarNCoManagerQualifyingAccounts.IsNullable = false;
				colvarNCoManagerQualifyingAccounts.IsPrimaryKey = false;
				colvarNCoManagerQualifyingAccounts.IsForeignKey = false;
				colvarNCoManagerQualifyingAccounts.IsReadOnly = false;
				colvarNCoManagerQualifyingAccounts.DefaultSetting = @"((0))";
				colvarNCoManagerQualifyingAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNCoManagerQualifyingAccounts);

				TableSchema.TableColumn colvarTotalPointBank = new TableSchema.TableColumn(schema);
				colvarTotalPointBank.ColumnName = "TotalPointBank";
				colvarTotalPointBank.DataType = DbType.Double;
				colvarTotalPointBank.MaxLength = 0;
				colvarTotalPointBank.AutoIncrement = false;
				colvarTotalPointBank.IsNullable = false;
				colvarTotalPointBank.IsPrimaryKey = false;
				colvarTotalPointBank.IsForeignKey = false;
				colvarTotalPointBank.IsReadOnly = false;
				colvarTotalPointBank.DefaultSetting = @"((0))";
				colvarTotalPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPointBank);

				TableSchema.TableColumn colvarFinalPointBank = new TableSchema.TableColumn(schema);
				colvarFinalPointBank.ColumnName = "FinalPointBank";
				colvarFinalPointBank.DataType = DbType.Double;
				colvarFinalPointBank.MaxLength = 0;
				colvarFinalPointBank.AutoIncrement = false;
				colvarFinalPointBank.IsNullable = false;
				colvarFinalPointBank.IsPrimaryKey = false;
				colvarFinalPointBank.IsForeignKey = false;
				colvarFinalPointBank.IsReadOnly = false;
				colvarFinalPointBank.DefaultSetting = @"((0))";
				colvarFinalPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFinalPointBank);

				TableSchema.TableColumn colvarAccountPayRate = new TableSchema.TableColumn(schema);
				colvarAccountPayRate.ColumnName = "AccountPayRate";
				colvarAccountPayRate.DataType = DbType.Currency;
				colvarAccountPayRate.MaxLength = 0;
				colvarAccountPayRate.AutoIncrement = false;
				colvarAccountPayRate.IsNullable = false;
				colvarAccountPayRate.IsPrimaryKey = false;
				colvarAccountPayRate.IsForeignKey = false;
				colvarAccountPayRate.IsReadOnly = false;
				colvarAccountPayRate.DefaultSetting = @"((0))";
				colvarAccountPayRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountPayRate);

				TableSchema.TableColumn colvarSubAccountPayRate = new TableSchema.TableColumn(schema);
				colvarSubAccountPayRate.ColumnName = "SubAccountPayRate";
				colvarSubAccountPayRate.DataType = DbType.Currency;
				colvarSubAccountPayRate.MaxLength = 0;
				colvarSubAccountPayRate.AutoIncrement = false;
				colvarSubAccountPayRate.IsNullable = false;
				colvarSubAccountPayRate.IsPrimaryKey = false;
				colvarSubAccountPayRate.IsForeignKey = false;
				colvarSubAccountPayRate.IsReadOnly = false;
				colvarSubAccountPayRate.DefaultSetting = @"((0))";
				colvarSubAccountPayRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubAccountPayRate);

				TableSchema.TableColumn colvarSigningBonus = new TableSchema.TableColumn(schema);
				colvarSigningBonus.ColumnName = "SigningBonus";
				colvarSigningBonus.DataType = DbType.Currency;
				colvarSigningBonus.MaxLength = 0;
				colvarSigningBonus.AutoIncrement = false;
				colvarSigningBonus.IsNullable = false;
				colvarSigningBonus.IsPrimaryKey = false;
				colvarSigningBonus.IsForeignKey = false;
				colvarSigningBonus.IsReadOnly = false;
				colvarSigningBonus.DefaultSetting = @"((0))";
				colvarSigningBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSigningBonus);

				TableSchema.TableColumn colvarRecruitingBonus = new TableSchema.TableColumn(schema);
				colvarRecruitingBonus.ColumnName = "RecruitingBonus";
				colvarRecruitingBonus.DataType = DbType.Currency;
				colvarRecruitingBonus.MaxLength = 0;
				colvarRecruitingBonus.AutoIncrement = false;
				colvarRecruitingBonus.IsNullable = false;
				colvarRecruitingBonus.IsPrimaryKey = false;
				colvarRecruitingBonus.IsForeignKey = false;
				colvarRecruitingBonus.IsReadOnly = false;
				colvarRecruitingBonus.DefaultSetting = @"((0))";
				colvarRecruitingBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitingBonus);

				TableSchema.TableColumn colvarRentBonus = new TableSchema.TableColumn(schema);
				colvarRentBonus.ColumnName = "RentBonus";
				colvarRentBonus.DataType = DbType.Currency;
				colvarRentBonus.MaxLength = 0;
				colvarRentBonus.AutoIncrement = false;
				colvarRentBonus.IsNullable = false;
				colvarRentBonus.IsPrimaryKey = false;
				colvarRentBonus.IsForeignKey = false;
				colvarRentBonus.IsReadOnly = false;
				colvarRentBonus.DefaultSetting = @"((0))";
				colvarRentBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentBonus);

				TableSchema.TableColumn colvarRaisedRMRBonus = new TableSchema.TableColumn(schema);
				colvarRaisedRMRBonus.ColumnName = "RaisedRMRBonus";
				colvarRaisedRMRBonus.DataType = DbType.Currency;
				colvarRaisedRMRBonus.MaxLength = 0;
				colvarRaisedRMRBonus.AutoIncrement = false;
				colvarRaisedRMRBonus.IsNullable = false;
				colvarRaisedRMRBonus.IsPrimaryKey = false;
				colvarRaisedRMRBonus.IsForeignKey = false;
				colvarRaisedRMRBonus.IsReadOnly = false;
				colvarRaisedRMRBonus.DefaultSetting = @"((0))";
				colvarRaisedRMRBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRaisedRMRBonus);

				TableSchema.TableColumn colvarExtendedContractBonus = new TableSchema.TableColumn(schema);
				colvarExtendedContractBonus.ColumnName = "ExtendedContractBonus";
				colvarExtendedContractBonus.DataType = DbType.Currency;
				colvarExtendedContractBonus.MaxLength = 0;
				colvarExtendedContractBonus.AutoIncrement = false;
				colvarExtendedContractBonus.IsNullable = false;
				colvarExtendedContractBonus.IsPrimaryKey = false;
				colvarExtendedContractBonus.IsForeignKey = false;
				colvarExtendedContractBonus.IsReadOnly = false;
				colvarExtendedContractBonus.DefaultSetting = @"((0))";
				colvarExtendedContractBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtendedContractBonus);

				TableSchema.TableColumn colvarTravelMoney = new TableSchema.TableColumn(schema);
				colvarTravelMoney.ColumnName = "TravelMoney";
				colvarTravelMoney.DataType = DbType.Currency;
				colvarTravelMoney.MaxLength = 0;
				colvarTravelMoney.AutoIncrement = false;
				colvarTravelMoney.IsNullable = false;
				colvarTravelMoney.IsPrimaryKey = false;
				colvarTravelMoney.IsForeignKey = false;
				colvarTravelMoney.IsReadOnly = false;
				colvarTravelMoney.DefaultSetting = @"((0))";
				colvarTravelMoney.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTravelMoney);

				TableSchema.TableColumn colvarTravelMoneyIsBonus = new TableSchema.TableColumn(schema);
				colvarTravelMoneyIsBonus.ColumnName = "TravelMoneyIsBonus";
				colvarTravelMoneyIsBonus.DataType = DbType.Boolean;
				colvarTravelMoneyIsBonus.MaxLength = 0;
				colvarTravelMoneyIsBonus.AutoIncrement = false;
				colvarTravelMoneyIsBonus.IsNullable = false;
				colvarTravelMoneyIsBonus.IsPrimaryKey = false;
				colvarTravelMoneyIsBonus.IsForeignKey = false;
				colvarTravelMoneyIsBonus.IsReadOnly = false;
				colvarTravelMoneyIsBonus.DefaultSetting = @"((0))";
				colvarTravelMoneyIsBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTravelMoneyIsBonus);

				TableSchema.TableColumn colvarRepAccountPayRate = new TableSchema.TableColumn(schema);
				colvarRepAccountPayRate.ColumnName = "RepAccountPayRate";
				colvarRepAccountPayRate.DataType = DbType.Currency;
				colvarRepAccountPayRate.MaxLength = 0;
				colvarRepAccountPayRate.AutoIncrement = false;
				colvarRepAccountPayRate.IsNullable = false;
				colvarRepAccountPayRate.IsPrimaryKey = false;
				colvarRepAccountPayRate.IsForeignKey = false;
				colvarRepAccountPayRate.IsReadOnly = false;
				colvarRepAccountPayRate.DefaultSetting = @"((0))";
				colvarRepAccountPayRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRepAccountPayRate);

				TableSchema.TableColumn colvarRepCashBonus = new TableSchema.TableColumn(schema);
				colvarRepCashBonus.ColumnName = "RepCashBonus";
				colvarRepCashBonus.DataType = DbType.Currency;
				colvarRepCashBonus.MaxLength = 0;
				colvarRepCashBonus.AutoIncrement = false;
				colvarRepCashBonus.IsNullable = false;
				colvarRepCashBonus.IsPrimaryKey = false;
				colvarRepCashBonus.IsForeignKey = false;
				colvarRepCashBonus.IsReadOnly = false;
				colvarRepCashBonus.DefaultSetting = @"((0))";
				colvarRepCashBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRepCashBonus);

				TableSchema.TableColumn colvarRepCommissionsTotal = new TableSchema.TableColumn(schema);
				colvarRepCommissionsTotal.ColumnName = "RepCommissionsTotal";
				colvarRepCommissionsTotal.DataType = DbType.Currency;
				colvarRepCommissionsTotal.MaxLength = 0;
				colvarRepCommissionsTotal.AutoIncrement = false;
				colvarRepCommissionsTotal.IsNullable = false;
				colvarRepCommissionsTotal.IsPrimaryKey = false;
				colvarRepCommissionsTotal.IsForeignKey = false;
				colvarRepCommissionsTotal.IsReadOnly = false;
				colvarRepCommissionsTotal.DefaultSetting = @"((0))";
				colvarRepCommissionsTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRepCommissionsTotal);

				TableSchema.TableColumn colvarIsRepTotalHigher = new TableSchema.TableColumn(schema);
				colvarIsRepTotalHigher.ColumnName = "IsRepTotalHigher";
				colvarIsRepTotalHigher.DataType = DbType.Boolean;
				colvarIsRepTotalHigher.MaxLength = 0;
				colvarIsRepTotalHigher.AutoIncrement = false;
				colvarIsRepTotalHigher.IsNullable = false;
				colvarIsRepTotalHigher.IsPrimaryKey = false;
				colvarIsRepTotalHigher.IsForeignKey = false;
				colvarIsRepTotalHigher.IsReadOnly = false;
				colvarIsRepTotalHigher.DefaultSetting = @"((0))";
				colvarIsRepTotalHigher.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsRepTotalHigher);

				TableSchema.TableColumn colvarMiscTotal = new TableSchema.TableColumn(schema);
				colvarMiscTotal.ColumnName = "MiscTotal";
				colvarMiscTotal.DataType = DbType.Currency;
				colvarMiscTotal.MaxLength = 0;
				colvarMiscTotal.AutoIncrement = false;
				colvarMiscTotal.IsNullable = false;
				colvarMiscTotal.IsPrimaryKey = false;
				colvarMiscTotal.IsForeignKey = false;
				colvarMiscTotal.IsReadOnly = false;
				colvarMiscTotal.DefaultSetting = @"((0))";
				colvarMiscTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiscTotal);

				TableSchema.TableColumn colvarIncentivesPaid = new TableSchema.TableColumn(schema);
				colvarIncentivesPaid.ColumnName = "IncentivesPaid";
				colvarIncentivesPaid.DataType = DbType.Currency;
				colvarIncentivesPaid.MaxLength = 0;
				colvarIncentivesPaid.AutoIncrement = false;
				colvarIncentivesPaid.IsNullable = false;
				colvarIncentivesPaid.IsPrimaryKey = false;
				colvarIncentivesPaid.IsForeignKey = false;
				colvarIncentivesPaid.IsReadOnly = false;
				colvarIncentivesPaid.DefaultSetting = @"((0))";
				colvarIncentivesPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncentivesPaid);

				TableSchema.TableColumn colvarWaivedActivationDeduction = new TableSchema.TableColumn(schema);
				colvarWaivedActivationDeduction.ColumnName = "WaivedActivationDeduction";
				colvarWaivedActivationDeduction.DataType = DbType.Currency;
				colvarWaivedActivationDeduction.MaxLength = 0;
				colvarWaivedActivationDeduction.AutoIncrement = false;
				colvarWaivedActivationDeduction.IsNullable = false;
				colvarWaivedActivationDeduction.IsPrimaryKey = false;
				colvarWaivedActivationDeduction.IsForeignKey = false;
				colvarWaivedActivationDeduction.IsReadOnly = false;
				colvarWaivedActivationDeduction.DefaultSetting = @"((0))";
				colvarWaivedActivationDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWaivedActivationDeduction);

				TableSchema.TableColumn colvarPassCreditDeduction = new TableSchema.TableColumn(schema);
				colvarPassCreditDeduction.ColumnName = "PassCreditDeduction";
				colvarPassCreditDeduction.DataType = DbType.Currency;
				colvarPassCreditDeduction.MaxLength = 0;
				colvarPassCreditDeduction.AutoIncrement = false;
				colvarPassCreditDeduction.IsNullable = false;
				colvarPassCreditDeduction.IsPrimaryKey = false;
				colvarPassCreditDeduction.IsForeignKey = false;
				colvarPassCreditDeduction.IsReadOnly = false;
				colvarPassCreditDeduction.DefaultSetting = @"((0))";
				colvarPassCreditDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassCreditDeduction);

				TableSchema.TableColumn colvarManualBillDeduction = new TableSchema.TableColumn(schema);
				colvarManualBillDeduction.ColumnName = "ManualBillDeduction";
				colvarManualBillDeduction.DataType = DbType.Currency;
				colvarManualBillDeduction.MaxLength = 0;
				colvarManualBillDeduction.AutoIncrement = false;
				colvarManualBillDeduction.IsNullable = false;
				colvarManualBillDeduction.IsPrimaryKey = false;
				colvarManualBillDeduction.IsForeignKey = false;
				colvarManualBillDeduction.IsReadOnly = false;
				colvarManualBillDeduction.DefaultSetting = @"((0))";
				colvarManualBillDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManualBillDeduction);

				TableSchema.TableColumn colvarMissingInvoiceFeeDeduction = new TableSchema.TableColumn(schema);
				colvarMissingInvoiceFeeDeduction.ColumnName = "MissingInvoiceFeeDeduction";
				colvarMissingInvoiceFeeDeduction.DataType = DbType.Currency;
				colvarMissingInvoiceFeeDeduction.MaxLength = 0;
				colvarMissingInvoiceFeeDeduction.AutoIncrement = false;
				colvarMissingInvoiceFeeDeduction.IsNullable = false;
				colvarMissingInvoiceFeeDeduction.IsPrimaryKey = false;
				colvarMissingInvoiceFeeDeduction.IsForeignKey = false;
				colvarMissingInvoiceFeeDeduction.IsReadOnly = false;
				colvarMissingInvoiceFeeDeduction.DefaultSetting = @"((0))";
				colvarMissingInvoiceFeeDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMissingInvoiceFeeDeduction);

				TableSchema.TableColumn colvarShortenedContractDeduction = new TableSchema.TableColumn(schema);
				colvarShortenedContractDeduction.ColumnName = "ShortenedContractDeduction";
				colvarShortenedContractDeduction.DataType = DbType.Currency;
				colvarShortenedContractDeduction.MaxLength = 0;
				colvarShortenedContractDeduction.AutoIncrement = false;
				colvarShortenedContractDeduction.IsNullable = false;
				colvarShortenedContractDeduction.IsPrimaryKey = false;
				colvarShortenedContractDeduction.IsForeignKey = false;
				colvarShortenedContractDeduction.IsReadOnly = false;
				colvarShortenedContractDeduction.DefaultSetting = @"((0))";
				colvarShortenedContractDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortenedContractDeduction);

				TableSchema.TableColumn colvarLoweredRMRDeduction = new TableSchema.TableColumn(schema);
				colvarLoweredRMRDeduction.ColumnName = "LoweredRMRDeduction";
				colvarLoweredRMRDeduction.DataType = DbType.Currency;
				colvarLoweredRMRDeduction.MaxLength = 0;
				colvarLoweredRMRDeduction.AutoIncrement = false;
				colvarLoweredRMRDeduction.IsNullable = false;
				colvarLoweredRMRDeduction.IsPrimaryKey = false;
				colvarLoweredRMRDeduction.IsForeignKey = false;
				colvarLoweredRMRDeduction.IsReadOnly = false;
				colvarLoweredRMRDeduction.DefaultSetting = @"((0))";
				colvarLoweredRMRDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoweredRMRDeduction);

				TableSchema.TableColumn colvarDigitalAccountDeduction = new TableSchema.TableColumn(schema);
				colvarDigitalAccountDeduction.ColumnName = "DigitalAccountDeduction";
				colvarDigitalAccountDeduction.DataType = DbType.Currency;
				colvarDigitalAccountDeduction.MaxLength = 0;
				colvarDigitalAccountDeduction.AutoIncrement = false;
				colvarDigitalAccountDeduction.IsNullable = false;
				colvarDigitalAccountDeduction.IsPrimaryKey = false;
				colvarDigitalAccountDeduction.IsForeignKey = false;
				colvarDigitalAccountDeduction.IsReadOnly = false;
				colvarDigitalAccountDeduction.DefaultSetting = @"((0))";
				colvarDigitalAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDigitalAccountDeduction);

				TableSchema.TableColumn colvarSavedAccountDeduction = new TableSchema.TableColumn(schema);
				colvarSavedAccountDeduction.ColumnName = "SavedAccountDeduction";
				colvarSavedAccountDeduction.DataType = DbType.Currency;
				colvarSavedAccountDeduction.MaxLength = 0;
				colvarSavedAccountDeduction.AutoIncrement = false;
				colvarSavedAccountDeduction.IsNullable = false;
				colvarSavedAccountDeduction.IsPrimaryKey = false;
				colvarSavedAccountDeduction.IsForeignKey = false;
				colvarSavedAccountDeduction.IsReadOnly = false;
				colvarSavedAccountDeduction.DefaultSetting = @"((0))";
				colvarSavedAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSavedAccountDeduction);

				TableSchema.TableColumn colvarCommercialAccountDeduction = new TableSchema.TableColumn(schema);
				colvarCommercialAccountDeduction.ColumnName = "CommercialAccountDeduction";
				colvarCommercialAccountDeduction.DataType = DbType.Currency;
				colvarCommercialAccountDeduction.MaxLength = 0;
				colvarCommercialAccountDeduction.AutoIncrement = false;
				colvarCommercialAccountDeduction.IsNullable = false;
				colvarCommercialAccountDeduction.IsPrimaryKey = false;
				colvarCommercialAccountDeduction.IsForeignKey = false;
				colvarCommercialAccountDeduction.IsReadOnly = false;
				colvarCommercialAccountDeduction.DefaultSetting = @"((0))";
				colvarCommercialAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommercialAccountDeduction);

				TableSchema.TableColumn colvarPointBankDollarAmount = new TableSchema.TableColumn(schema);
				colvarPointBankDollarAmount.ColumnName = "PointBankDollarAmount";
				colvarPointBankDollarAmount.DataType = DbType.Currency;
				colvarPointBankDollarAmount.MaxLength = 0;
				colvarPointBankDollarAmount.AutoIncrement = false;
				colvarPointBankDollarAmount.IsNullable = false;
				colvarPointBankDollarAmount.IsPrimaryKey = false;
				colvarPointBankDollarAmount.IsForeignKey = false;
				colvarPointBankDollarAmount.IsReadOnly = false;
				colvarPointBankDollarAmount.DefaultSetting = @"((0))";
				colvarPointBankDollarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPointBankDollarAmount);

				TableSchema.TableColumn colvarNOfficeGoodAccountsSold = new TableSchema.TableColumn(schema);
				colvarNOfficeGoodAccountsSold.ColumnName = "NOfficeGoodAccountsSold";
				colvarNOfficeGoodAccountsSold.DataType = DbType.Int32;
				colvarNOfficeGoodAccountsSold.MaxLength = 0;
				colvarNOfficeGoodAccountsSold.AutoIncrement = false;
				colvarNOfficeGoodAccountsSold.IsNullable = false;
				colvarNOfficeGoodAccountsSold.IsPrimaryKey = false;
				colvarNOfficeGoodAccountsSold.IsForeignKey = false;
				colvarNOfficeGoodAccountsSold.IsReadOnly = false;
				colvarNOfficeGoodAccountsSold.DefaultSetting = @"((0))";
				colvarNOfficeGoodAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeGoodAccountsSold);

				TableSchema.TableColumn colvarNOfficeExcellentAccountsSold = new TableSchema.TableColumn(schema);
				colvarNOfficeExcellentAccountsSold.ColumnName = "NOfficeExcellentAccountsSold";
				colvarNOfficeExcellentAccountsSold.DataType = DbType.Int32;
				colvarNOfficeExcellentAccountsSold.MaxLength = 0;
				colvarNOfficeExcellentAccountsSold.AutoIncrement = false;
				colvarNOfficeExcellentAccountsSold.IsNullable = false;
				colvarNOfficeExcellentAccountsSold.IsPrimaryKey = false;
				colvarNOfficeExcellentAccountsSold.IsForeignKey = false;
				colvarNOfficeExcellentAccountsSold.IsReadOnly = false;
				colvarNOfficeExcellentAccountsSold.DefaultSetting = @"((0))";
				colvarNOfficeExcellentAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeExcellentAccountsSold);

				TableSchema.TableColumn colvarNOfficePassAccountsSold = new TableSchema.TableColumn(schema);
				colvarNOfficePassAccountsSold.ColumnName = "NOfficePassAccountsSold";
				colvarNOfficePassAccountsSold.DataType = DbType.Int32;
				colvarNOfficePassAccountsSold.MaxLength = 0;
				colvarNOfficePassAccountsSold.AutoIncrement = false;
				colvarNOfficePassAccountsSold.IsNullable = false;
				colvarNOfficePassAccountsSold.IsPrimaryKey = false;
				colvarNOfficePassAccountsSold.IsForeignKey = false;
				colvarNOfficePassAccountsSold.IsReadOnly = false;
				colvarNOfficePassAccountsSold.DefaultSetting = @"((0))";
				colvarNOfficePassAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficePassAccountsSold);

				TableSchema.TableColumn colvarNOfficeSubAccountsSold = new TableSchema.TableColumn(schema);
				colvarNOfficeSubAccountsSold.ColumnName = "NOfficeSubAccountsSold";
				colvarNOfficeSubAccountsSold.DataType = DbType.Int32;
				colvarNOfficeSubAccountsSold.MaxLength = 0;
				colvarNOfficeSubAccountsSold.AutoIncrement = false;
				colvarNOfficeSubAccountsSold.IsNullable = false;
				colvarNOfficeSubAccountsSold.IsPrimaryKey = false;
				colvarNOfficeSubAccountsSold.IsForeignKey = false;
				colvarNOfficeSubAccountsSold.IsReadOnly = false;
				colvarNOfficeSubAccountsSold.DefaultSetting = @"((0))";
				colvarNOfficeSubAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeSubAccountsSold);

				TableSchema.TableColumn colvarNOfficeBadAccountsSold = new TableSchema.TableColumn(schema);
				colvarNOfficeBadAccountsSold.ColumnName = "NOfficeBadAccountsSold";
				colvarNOfficeBadAccountsSold.DataType = DbType.Int32;
				colvarNOfficeBadAccountsSold.MaxLength = 0;
				colvarNOfficeBadAccountsSold.AutoIncrement = false;
				colvarNOfficeBadAccountsSold.IsNullable = false;
				colvarNOfficeBadAccountsSold.IsPrimaryKey = false;
				colvarNOfficeBadAccountsSold.IsForeignKey = false;
				colvarNOfficeBadAccountsSold.IsReadOnly = false;
				colvarNOfficeBadAccountsSold.DefaultSetting = @"((0))";
				colvarNOfficeBadAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeBadAccountsSold);

				TableSchema.TableColumn colvarNOfficeGoodCancels = new TableSchema.TableColumn(schema);
				colvarNOfficeGoodCancels.ColumnName = "NOfficeGoodCancels";
				colvarNOfficeGoodCancels.DataType = DbType.Int32;
				colvarNOfficeGoodCancels.MaxLength = 0;
				colvarNOfficeGoodCancels.AutoIncrement = false;
				colvarNOfficeGoodCancels.IsNullable = false;
				colvarNOfficeGoodCancels.IsPrimaryKey = false;
				colvarNOfficeGoodCancels.IsForeignKey = false;
				colvarNOfficeGoodCancels.IsReadOnly = false;
				colvarNOfficeGoodCancels.DefaultSetting = @"((0))";
				colvarNOfficeGoodCancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeGoodCancels);

				TableSchema.TableColumn colvarNOfficeGoodWithHolds = new TableSchema.TableColumn(schema);
				colvarNOfficeGoodWithHolds.ColumnName = "NOfficeGoodWithHolds";
				colvarNOfficeGoodWithHolds.DataType = DbType.Int32;
				colvarNOfficeGoodWithHolds.MaxLength = 0;
				colvarNOfficeGoodWithHolds.AutoIncrement = false;
				colvarNOfficeGoodWithHolds.IsNullable = false;
				colvarNOfficeGoodWithHolds.IsPrimaryKey = false;
				colvarNOfficeGoodWithHolds.IsForeignKey = false;
				colvarNOfficeGoodWithHolds.IsReadOnly = false;
				colvarNOfficeGoodWithHolds.DefaultSetting = @"((0))";
				colvarNOfficeGoodWithHolds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeGoodWithHolds);

				TableSchema.TableColumn colvarNOfficeGoodDelinquent = new TableSchema.TableColumn(schema);
				colvarNOfficeGoodDelinquent.ColumnName = "NOfficeGoodDelinquent";
				colvarNOfficeGoodDelinquent.DataType = DbType.Int32;
				colvarNOfficeGoodDelinquent.MaxLength = 0;
				colvarNOfficeGoodDelinquent.AutoIncrement = false;
				colvarNOfficeGoodDelinquent.IsNullable = false;
				colvarNOfficeGoodDelinquent.IsPrimaryKey = false;
				colvarNOfficeGoodDelinquent.IsForeignKey = false;
				colvarNOfficeGoodDelinquent.IsReadOnly = false;
				colvarNOfficeGoodDelinquent.DefaultSetting = @"((0))";
				colvarNOfficeGoodDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeGoodDelinquent);

				TableSchema.TableColumn colvarNOfficeGoodFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarNOfficeGoodFriendsAndFamily.ColumnName = "NOfficeGoodFriendsAndFamily";
				colvarNOfficeGoodFriendsAndFamily.DataType = DbType.Int32;
				colvarNOfficeGoodFriendsAndFamily.MaxLength = 0;
				colvarNOfficeGoodFriendsAndFamily.AutoIncrement = false;
				colvarNOfficeGoodFriendsAndFamily.IsNullable = false;
				colvarNOfficeGoodFriendsAndFamily.IsPrimaryKey = false;
				colvarNOfficeGoodFriendsAndFamily.IsForeignKey = false;
				colvarNOfficeGoodFriendsAndFamily.IsReadOnly = false;
				colvarNOfficeGoodFriendsAndFamily.DefaultSetting = @"((0))";
				colvarNOfficeGoodFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeGoodFriendsAndFamily);

				TableSchema.TableColumn colvarNOfficeSubCancels = new TableSchema.TableColumn(schema);
				colvarNOfficeSubCancels.ColumnName = "NOfficeSubCancels";
				colvarNOfficeSubCancels.DataType = DbType.Int32;
				colvarNOfficeSubCancels.MaxLength = 0;
				colvarNOfficeSubCancels.AutoIncrement = false;
				colvarNOfficeSubCancels.IsNullable = false;
				colvarNOfficeSubCancels.IsPrimaryKey = false;
				colvarNOfficeSubCancels.IsForeignKey = false;
				colvarNOfficeSubCancels.IsReadOnly = false;
				colvarNOfficeSubCancels.DefaultSetting = @"((0))";
				colvarNOfficeSubCancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeSubCancels);

				TableSchema.TableColumn colvarNOfficeSubWithHolds = new TableSchema.TableColumn(schema);
				colvarNOfficeSubWithHolds.ColumnName = "NOfficeSubWithHolds";
				colvarNOfficeSubWithHolds.DataType = DbType.Int32;
				colvarNOfficeSubWithHolds.MaxLength = 0;
				colvarNOfficeSubWithHolds.AutoIncrement = false;
				colvarNOfficeSubWithHolds.IsNullable = false;
				colvarNOfficeSubWithHolds.IsPrimaryKey = false;
				colvarNOfficeSubWithHolds.IsForeignKey = false;
				colvarNOfficeSubWithHolds.IsReadOnly = false;
				colvarNOfficeSubWithHolds.DefaultSetting = @"((0))";
				colvarNOfficeSubWithHolds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeSubWithHolds);

				TableSchema.TableColumn colvarNOfficeSubMissingActivationOrAutoPay = new TableSchema.TableColumn(schema);
				colvarNOfficeSubMissingActivationOrAutoPay.ColumnName = "NOfficeSubMissingActivationOrAutoPay";
				colvarNOfficeSubMissingActivationOrAutoPay.DataType = DbType.Int32;
				colvarNOfficeSubMissingActivationOrAutoPay.MaxLength = 0;
				colvarNOfficeSubMissingActivationOrAutoPay.AutoIncrement = false;
				colvarNOfficeSubMissingActivationOrAutoPay.IsNullable = false;
				colvarNOfficeSubMissingActivationOrAutoPay.IsPrimaryKey = false;
				colvarNOfficeSubMissingActivationOrAutoPay.IsForeignKey = false;
				colvarNOfficeSubMissingActivationOrAutoPay.IsReadOnly = false;
				colvarNOfficeSubMissingActivationOrAutoPay.DefaultSetting = @"((0))";
				colvarNOfficeSubMissingActivationOrAutoPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeSubMissingActivationOrAutoPay);

				TableSchema.TableColumn colvarNOfficeSubDelinquent = new TableSchema.TableColumn(schema);
				colvarNOfficeSubDelinquent.ColumnName = "NOfficeSubDelinquent";
				colvarNOfficeSubDelinquent.DataType = DbType.Int32;
				colvarNOfficeSubDelinquent.MaxLength = 0;
				colvarNOfficeSubDelinquent.AutoIncrement = false;
				colvarNOfficeSubDelinquent.IsNullable = false;
				colvarNOfficeSubDelinquent.IsPrimaryKey = false;
				colvarNOfficeSubDelinquent.IsForeignKey = false;
				colvarNOfficeSubDelinquent.IsReadOnly = false;
				colvarNOfficeSubDelinquent.DefaultSetting = @"((0))";
				colvarNOfficeSubDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeSubDelinquent);

				TableSchema.TableColumn colvarNOfficeSubFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarNOfficeSubFriendsAndFamily.ColumnName = "NOfficeSubFriendsAndFamily";
				colvarNOfficeSubFriendsAndFamily.DataType = DbType.Int32;
				colvarNOfficeSubFriendsAndFamily.MaxLength = 0;
				colvarNOfficeSubFriendsAndFamily.AutoIncrement = false;
				colvarNOfficeSubFriendsAndFamily.IsNullable = false;
				colvarNOfficeSubFriendsAndFamily.IsPrimaryKey = false;
				colvarNOfficeSubFriendsAndFamily.IsForeignKey = false;
				colvarNOfficeSubFriendsAndFamily.IsReadOnly = false;
				colvarNOfficeSubFriendsAndFamily.DefaultSetting = @"((0))";
				colvarNOfficeSubFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeSubFriendsAndFamily);

				TableSchema.TableColumn colvarNetOfficeGoodAccounts = new TableSchema.TableColumn(schema);
				colvarNetOfficeGoodAccounts.ColumnName = "NetOfficeGoodAccounts";
				colvarNetOfficeGoodAccounts.DataType = DbType.Int32;
				colvarNetOfficeGoodAccounts.MaxLength = 0;
				colvarNetOfficeGoodAccounts.AutoIncrement = false;
				colvarNetOfficeGoodAccounts.IsNullable = false;
				colvarNetOfficeGoodAccounts.IsPrimaryKey = false;
				colvarNetOfficeGoodAccounts.IsForeignKey = false;
				colvarNetOfficeGoodAccounts.IsReadOnly = false;
				colvarNetOfficeGoodAccounts.DefaultSetting = @"((0))";
				colvarNetOfficeGoodAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetOfficeGoodAccounts);

				TableSchema.TableColumn colvarNetOfficeSubAccounts = new TableSchema.TableColumn(schema);
				colvarNetOfficeSubAccounts.ColumnName = "NetOfficeSubAccounts";
				colvarNetOfficeSubAccounts.DataType = DbType.Int32;
				colvarNetOfficeSubAccounts.MaxLength = 0;
				colvarNetOfficeSubAccounts.AutoIncrement = false;
				colvarNetOfficeSubAccounts.IsNullable = false;
				colvarNetOfficeSubAccounts.IsPrimaryKey = false;
				colvarNetOfficeSubAccounts.IsForeignKey = false;
				colvarNetOfficeSubAccounts.IsReadOnly = false;
				colvarNetOfficeSubAccounts.DefaultSetting = @"((0))";
				colvarNetOfficeSubAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetOfficeSubAccounts);

				TableSchema.TableColumn colvarNetOfficePassAccounts = new TableSchema.TableColumn(schema);
				colvarNetOfficePassAccounts.ColumnName = "NetOfficePassAccounts";
				colvarNetOfficePassAccounts.DataType = DbType.Int32;
				colvarNetOfficePassAccounts.MaxLength = 0;
				colvarNetOfficePassAccounts.AutoIncrement = false;
				colvarNetOfficePassAccounts.IsNullable = false;
				colvarNetOfficePassAccounts.IsPrimaryKey = false;
				colvarNetOfficePassAccounts.IsForeignKey = false;
				colvarNetOfficePassAccounts.IsReadOnly = false;
				colvarNetOfficePassAccounts.DefaultSetting = @"((0))";
				colvarNetOfficePassAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetOfficePassAccounts);

				TableSchema.TableColumn colvarNOfficeLoweredRMR = new TableSchema.TableColumn(schema);
				colvarNOfficeLoweredRMR.ColumnName = "NOfficeLoweredRMR";
				colvarNOfficeLoweredRMR.DataType = DbType.Int32;
				colvarNOfficeLoweredRMR.MaxLength = 0;
				colvarNOfficeLoweredRMR.AutoIncrement = false;
				colvarNOfficeLoweredRMR.IsNullable = false;
				colvarNOfficeLoweredRMR.IsPrimaryKey = false;
				colvarNOfficeLoweredRMR.IsForeignKey = false;
				colvarNOfficeLoweredRMR.IsReadOnly = false;
				colvarNOfficeLoweredRMR.DefaultSetting = @"((0))";
				colvarNOfficeLoweredRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeLoweredRMR);

				TableSchema.TableColumn colvarNOfficeActivationsWaived = new TableSchema.TableColumn(schema);
				colvarNOfficeActivationsWaived.ColumnName = "NOfficeActivationsWaived";
				colvarNOfficeActivationsWaived.DataType = DbType.Int32;
				colvarNOfficeActivationsWaived.MaxLength = 0;
				colvarNOfficeActivationsWaived.AutoIncrement = false;
				colvarNOfficeActivationsWaived.IsNullable = false;
				colvarNOfficeActivationsWaived.IsPrimaryKey = false;
				colvarNOfficeActivationsWaived.IsForeignKey = false;
				colvarNOfficeActivationsWaived.IsReadOnly = false;
				colvarNOfficeActivationsWaived.DefaultSetting = @"((0))";
				colvarNOfficeActivationsWaived.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeActivationsWaived);

				TableSchema.TableColumn colvarNOfficeWithheld = new TableSchema.TableColumn(schema);
				colvarNOfficeWithheld.ColumnName = "NOfficeWithheld";
				colvarNOfficeWithheld.DataType = DbType.Int32;
				colvarNOfficeWithheld.MaxLength = 0;
				colvarNOfficeWithheld.AutoIncrement = false;
				colvarNOfficeWithheld.IsNullable = false;
				colvarNOfficeWithheld.IsPrimaryKey = false;
				colvarNOfficeWithheld.IsForeignKey = false;
				colvarNOfficeWithheld.IsReadOnly = false;
				colvarNOfficeWithheld.DefaultSetting = @"((0))";
				colvarNOfficeWithheld.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeWithheld);

				TableSchema.TableColumn colvarNOfficeSubWithheld = new TableSchema.TableColumn(schema);
				colvarNOfficeSubWithheld.ColumnName = "NOfficeSubWithheld";
				colvarNOfficeSubWithheld.DataType = DbType.Int32;
				colvarNOfficeSubWithheld.MaxLength = 0;
				colvarNOfficeSubWithheld.AutoIncrement = false;
				colvarNOfficeSubWithheld.IsNullable = false;
				colvarNOfficeSubWithheld.IsPrimaryKey = false;
				colvarNOfficeSubWithheld.IsForeignKey = false;
				colvarNOfficeSubWithheld.IsReadOnly = false;
				colvarNOfficeSubWithheld.DefaultSetting = @"((0))";
				colvarNOfficeSubWithheld.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOfficeSubWithheld);

				TableSchema.TableColumn colvarRetentionBonus = new TableSchema.TableColumn(schema);
				colvarRetentionBonus.ColumnName = "RetentionBonus";
				colvarRetentionBonus.DataType = DbType.Currency;
				colvarRetentionBonus.MaxLength = 0;
				colvarRetentionBonus.AutoIncrement = false;
				colvarRetentionBonus.IsNullable = false;
				colvarRetentionBonus.IsPrimaryKey = false;
				colvarRetentionBonus.IsForeignKey = false;
				colvarRetentionBonus.IsReadOnly = false;
				colvarRetentionBonus.DefaultSetting = @"((0))";
				colvarRetentionBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRetentionBonus);

				TableSchema.TableColumn colvarAccountOverrideRate = new TableSchema.TableColumn(schema);
				colvarAccountOverrideRate.ColumnName = "AccountOverrideRate";
				colvarAccountOverrideRate.DataType = DbType.Currency;
				colvarAccountOverrideRate.MaxLength = 0;
				colvarAccountOverrideRate.AutoIncrement = false;
				colvarAccountOverrideRate.IsNullable = false;
				colvarAccountOverrideRate.IsPrimaryKey = false;
				colvarAccountOverrideRate.IsForeignKey = false;
				colvarAccountOverrideRate.IsReadOnly = false;
				colvarAccountOverrideRate.DefaultSetting = @"((0))";
				colvarAccountOverrideRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountOverrideRate);

				TableSchema.TableColumn colvarSubAccountOverrideRate = new TableSchema.TableColumn(schema);
				colvarSubAccountOverrideRate.ColumnName = "SubAccountOverrideRate";
				colvarSubAccountOverrideRate.DataType = DbType.Currency;
				colvarSubAccountOverrideRate.MaxLength = 0;
				colvarSubAccountOverrideRate.AutoIncrement = false;
				colvarSubAccountOverrideRate.IsNullable = false;
				colvarSubAccountOverrideRate.IsPrimaryKey = false;
				colvarSubAccountOverrideRate.IsForeignKey = false;
				colvarSubAccountOverrideRate.IsReadOnly = false;
				colvarSubAccountOverrideRate.DefaultSetting = @"((0))";
				colvarSubAccountOverrideRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubAccountOverrideRate);

				TableSchema.TableColumn colvarOfficeLoweredRMRDeduction = new TableSchema.TableColumn(schema);
				colvarOfficeLoweredRMRDeduction.ColumnName = "OfficeLoweredRMRDeduction";
				colvarOfficeLoweredRMRDeduction.DataType = DbType.Currency;
				colvarOfficeLoweredRMRDeduction.MaxLength = 0;
				colvarOfficeLoweredRMRDeduction.AutoIncrement = false;
				colvarOfficeLoweredRMRDeduction.IsNullable = false;
				colvarOfficeLoweredRMRDeduction.IsPrimaryKey = false;
				colvarOfficeLoweredRMRDeduction.IsForeignKey = false;
				colvarOfficeLoweredRMRDeduction.IsReadOnly = false;
				colvarOfficeLoweredRMRDeduction.DefaultSetting = @"((0))";
				colvarOfficeLoweredRMRDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeLoweredRMRDeduction);

				TableSchema.TableColumn colvarOfficePassCreditScoreDeduction = new TableSchema.TableColumn(schema);
				colvarOfficePassCreditScoreDeduction.ColumnName = "OfficePassCreditScoreDeduction";
				colvarOfficePassCreditScoreDeduction.DataType = DbType.Currency;
				colvarOfficePassCreditScoreDeduction.MaxLength = 0;
				colvarOfficePassCreditScoreDeduction.AutoIncrement = false;
				colvarOfficePassCreditScoreDeduction.IsNullable = false;
				colvarOfficePassCreditScoreDeduction.IsPrimaryKey = false;
				colvarOfficePassCreditScoreDeduction.IsForeignKey = false;
				colvarOfficePassCreditScoreDeduction.IsReadOnly = false;
				colvarOfficePassCreditScoreDeduction.DefaultSetting = @"((0))";
				colvarOfficePassCreditScoreDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficePassCreditScoreDeduction);

				TableSchema.TableColumn colvarOfficeActivationWaivesDeduction = new TableSchema.TableColumn(schema);
				colvarOfficeActivationWaivesDeduction.ColumnName = "OfficeActivationWaivesDeduction";
				colvarOfficeActivationWaivesDeduction.DataType = DbType.Currency;
				colvarOfficeActivationWaivesDeduction.MaxLength = 0;
				colvarOfficeActivationWaivesDeduction.AutoIncrement = false;
				colvarOfficeActivationWaivesDeduction.IsNullable = false;
				colvarOfficeActivationWaivesDeduction.IsPrimaryKey = false;
				colvarOfficeActivationWaivesDeduction.IsForeignKey = false;
				colvarOfficeActivationWaivesDeduction.IsReadOnly = false;
				colvarOfficeActivationWaivesDeduction.DefaultSetting = @"((0))";
				colvarOfficeActivationWaivesDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeActivationWaivesDeduction);

				TableSchema.TableColumn colvarTotalRentPaid = new TableSchema.TableColumn(schema);
				colvarTotalRentPaid.ColumnName = "TotalRentPaid";
				colvarTotalRentPaid.DataType = DbType.Currency;
				colvarTotalRentPaid.MaxLength = 0;
				colvarTotalRentPaid.AutoIncrement = false;
				colvarTotalRentPaid.IsNullable = false;
				colvarTotalRentPaid.IsPrimaryKey = false;
				colvarTotalRentPaid.IsForeignKey = false;
				colvarTotalRentPaid.IsReadOnly = false;
				colvarTotalRentPaid.DefaultSetting = @"((0))";
				colvarTotalRentPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalRentPaid);

				TableSchema.TableColumn colvarTotalPersonalCommissions = new TableSchema.TableColumn(schema);
				colvarTotalPersonalCommissions.ColumnName = "TotalPersonalCommissions";
				colvarTotalPersonalCommissions.DataType = DbType.Currency;
				colvarTotalPersonalCommissions.MaxLength = 0;
				colvarTotalPersonalCommissions.AutoIncrement = false;
				colvarTotalPersonalCommissions.IsNullable = false;
				colvarTotalPersonalCommissions.IsPrimaryKey = false;
				colvarTotalPersonalCommissions.IsForeignKey = false;
				colvarTotalPersonalCommissions.IsReadOnly = false;
				colvarTotalPersonalCommissions.DefaultSetting = @"((0))";
				colvarTotalPersonalCommissions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPersonalCommissions);

				TableSchema.TableColumn colvarTotalPersonalBonuses = new TableSchema.TableColumn(schema);
				colvarTotalPersonalBonuses.ColumnName = "TotalPersonalBonuses";
				colvarTotalPersonalBonuses.DataType = DbType.Currency;
				colvarTotalPersonalBonuses.MaxLength = 0;
				colvarTotalPersonalBonuses.AutoIncrement = false;
				colvarTotalPersonalBonuses.IsNullable = false;
				colvarTotalPersonalBonuses.IsPrimaryKey = false;
				colvarTotalPersonalBonuses.IsForeignKey = false;
				colvarTotalPersonalBonuses.IsReadOnly = false;
				colvarTotalPersonalBonuses.DefaultSetting = @"((0))";
				colvarTotalPersonalBonuses.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPersonalBonuses);

				TableSchema.TableColumn colvarTotalPersonalDeductions = new TableSchema.TableColumn(schema);
				colvarTotalPersonalDeductions.ColumnName = "TotalPersonalDeductions";
				colvarTotalPersonalDeductions.DataType = DbType.Currency;
				colvarTotalPersonalDeductions.MaxLength = 0;
				colvarTotalPersonalDeductions.AutoIncrement = false;
				colvarTotalPersonalDeductions.IsNullable = false;
				colvarTotalPersonalDeductions.IsPrimaryKey = false;
				colvarTotalPersonalDeductions.IsForeignKey = false;
				colvarTotalPersonalDeductions.IsReadOnly = false;
				colvarTotalPersonalDeductions.DefaultSetting = @"((0))";
				colvarTotalPersonalDeductions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPersonalDeductions);

				TableSchema.TableColumn colvarTotalOfficeCommissions = new TableSchema.TableColumn(schema);
				colvarTotalOfficeCommissions.ColumnName = "TotalOfficeCommissions";
				colvarTotalOfficeCommissions.DataType = DbType.Currency;
				colvarTotalOfficeCommissions.MaxLength = 0;
				colvarTotalOfficeCommissions.AutoIncrement = false;
				colvarTotalOfficeCommissions.IsNullable = false;
				colvarTotalOfficeCommissions.IsPrimaryKey = false;
				colvarTotalOfficeCommissions.IsForeignKey = false;
				colvarTotalOfficeCommissions.IsReadOnly = false;
				colvarTotalOfficeCommissions.DefaultSetting = @"((0))";
				colvarTotalOfficeCommissions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalOfficeCommissions);

				TableSchema.TableColumn colvarTotalOfficeDeductions = new TableSchema.TableColumn(schema);
				colvarTotalOfficeDeductions.ColumnName = "TotalOfficeDeductions";
				colvarTotalOfficeDeductions.DataType = DbType.Currency;
				colvarTotalOfficeDeductions.MaxLength = 0;
				colvarTotalOfficeDeductions.AutoIncrement = false;
				colvarTotalOfficeDeductions.IsNullable = false;
				colvarTotalOfficeDeductions.IsPrimaryKey = false;
				colvarTotalOfficeDeductions.IsForeignKey = false;
				colvarTotalOfficeDeductions.IsReadOnly = false;
				colvarTotalOfficeDeductions.DefaultSetting = @"((0))";
				colvarTotalOfficeDeductions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalOfficeDeductions);

				TableSchema.TableColumn colvarManagerSalary = new TableSchema.TableColumn(schema);
				colvarManagerSalary.ColumnName = "ManagerSalary";
				colvarManagerSalary.DataType = DbType.Currency;
				colvarManagerSalary.MaxLength = 0;
				colvarManagerSalary.AutoIncrement = false;
				colvarManagerSalary.IsNullable = false;
				colvarManagerSalary.IsPrimaryKey = false;
				colvarManagerSalary.IsForeignKey = false;
				colvarManagerSalary.IsReadOnly = false;
				colvarManagerSalary.DefaultSetting = @"((0))";
				colvarManagerSalary.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManagerSalary);

				TableSchema.TableColumn colvarTotalEarnings = new TableSchema.TableColumn(schema);
				colvarTotalEarnings.ColumnName = "TotalEarnings";
				colvarTotalEarnings.DataType = DbType.Currency;
				colvarTotalEarnings.MaxLength = 0;
				colvarTotalEarnings.AutoIncrement = false;
				colvarTotalEarnings.IsNullable = false;
				colvarTotalEarnings.IsPrimaryKey = false;
				colvarTotalEarnings.IsForeignKey = false;
				colvarTotalEarnings.IsReadOnly = false;
				colvarTotalEarnings.DefaultSetting = @"((0))";
				colvarTotalEarnings.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalEarnings);

				TableSchema.TableColumn colvarTotalPaid = new TableSchema.TableColumn(schema);
				colvarTotalPaid.ColumnName = "TotalPaid";
				colvarTotalPaid.DataType = DbType.Currency;
				colvarTotalPaid.MaxLength = 0;
				colvarTotalPaid.AutoIncrement = false;
				colvarTotalPaid.IsNullable = false;
				colvarTotalPaid.IsPrimaryKey = false;
				colvarTotalPaid.IsForeignKey = false;
				colvarTotalPaid.IsReadOnly = false;
				colvarTotalPaid.DefaultSetting = @"((0))";
				colvarTotalPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPaid);

				TableSchema.TableColumn colvarTotalBonuses = new TableSchema.TableColumn(schema);
				colvarTotalBonuses.ColumnName = "TotalBonuses";
				colvarTotalBonuses.DataType = DbType.Currency;
				colvarTotalBonuses.MaxLength = 0;
				colvarTotalBonuses.AutoIncrement = false;
				colvarTotalBonuses.IsNullable = false;
				colvarTotalBonuses.IsPrimaryKey = false;
				colvarTotalBonuses.IsForeignKey = false;
				colvarTotalBonuses.IsReadOnly = false;
				colvarTotalBonuses.DefaultSetting = @"((0))";
				colvarTotalBonuses.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalBonuses);

				TableSchema.TableColumn colvarTotalDeductions = new TableSchema.TableColumn(schema);
				colvarTotalDeductions.ColumnName = "TotalDeductions";
				colvarTotalDeductions.DataType = DbType.Currency;
				colvarTotalDeductions.MaxLength = 0;
				colvarTotalDeductions.AutoIncrement = false;
				colvarTotalDeductions.IsNullable = false;
				colvarTotalDeductions.IsPrimaryKey = false;
				colvarTotalDeductions.IsForeignKey = false;
				colvarTotalDeductions.IsReadOnly = false;
				colvarTotalDeductions.DefaultSetting = @"((0))";
				colvarTotalDeductions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalDeductions);

				TableSchema.TableColumn colvarBackendCheckAmount = new TableSchema.TableColumn(schema);
				colvarBackendCheckAmount.ColumnName = "BackendCheckAmount";
				colvarBackendCheckAmount.DataType = DbType.Currency;
				colvarBackendCheckAmount.MaxLength = 0;
				colvarBackendCheckAmount.AutoIncrement = false;
				colvarBackendCheckAmount.IsNullable = false;
				colvarBackendCheckAmount.IsPrimaryKey = false;
				colvarBackendCheckAmount.IsForeignKey = false;
				colvarBackendCheckAmount.IsReadOnly = false;
				colvarBackendCheckAmount.DefaultSetting = @"((0))";
				colvarBackendCheckAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendCheckAmount);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_SalesManagerBackends",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_SalesManagerBackend LoadFrom(PR_SalesManagerBackend item)
		{
			PR_SalesManagerBackend result = new PR_SalesManagerBackend();
			if (item.SalesManagerBackendID != default(int)) {
				result.LoadByKey(item.SalesManagerBackendID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SalesManagerBackendID {
			get { return GetColumnValue<int>(Columns.SalesManagerBackendID); }
			set {
				SetColumnValue(Columns.SalesManagerBackendID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesManagerBackendID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int PayScaleID {
			get { return GetColumnValue<int>(Columns.PayScaleID); }
			set {
				SetColumnValue(Columns.PayScaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScaleID));
			}
		}
		[DataMember]
		public int PersonalPayScaleID {
			get { return GetColumnValue<int>(Columns.PersonalPayScaleID); }
			set {
				SetColumnValue(Columns.PersonalPayScaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PersonalPayScaleID));
			}
		}
		[DataMember]
		public int? BackendManagerPayscaleID {
			get { return GetColumnValue<int?>(Columns.BackendManagerPayscaleID); }
			set {
				SetColumnValue(Columns.BackendManagerPayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendManagerPayscaleID));
			}
		}
		[DataMember]
		public int? BackendPayscaleID {
			get { return GetColumnValue<int?>(Columns.BackendPayscaleID); }
			set {
				SetColumnValue(Columns.BackendPayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPayscaleID));
			}
		}
		[DataMember]
		public int? PersonalBackendPayscaleID {
			get { return GetColumnValue<int?>(Columns.PersonalBackendPayscaleID); }
			set {
				SetColumnValue(Columns.PersonalBackendPayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PersonalBackendPayscaleID));
			}
		}
		[DataMember]
		public int? DetailFileID {
			get { return GetColumnValue<int?>(Columns.DetailFileID); }
			set {
				SetColumnValue(Columns.DetailFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DetailFileID));
			}
		}
		[DataMember]
		public int? RegionalUserID {
			get { return GetColumnValue<int?>(Columns.RegionalUserID); }
			set {
				SetColumnValue(Columns.RegionalUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalUserID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public bool IsCoManager {
			get { return GetColumnValue<bool>(Columns.IsCoManager); }
			set {
				SetColumnValue(Columns.IsCoManager, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCoManager));
			}
		}
		[DataMember]
		public int NGoodAccountsSold {
			get { return GetColumnValue<int>(Columns.NGoodAccountsSold); }
			set {
				SetColumnValue(Columns.NGoodAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodAccountsSold));
			}
		}
		[DataMember]
		public int NExcellentAccountsSold {
			get { return GetColumnValue<int>(Columns.NExcellentAccountsSold); }
			set {
				SetColumnValue(Columns.NExcellentAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NExcellentAccountsSold));
			}
		}
		[DataMember]
		public int NPassAccountsSold {
			get { return GetColumnValue<int>(Columns.NPassAccountsSold); }
			set {
				SetColumnValue(Columns.NPassAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPassAccountsSold));
			}
		}
		[DataMember]
		public int NSubAccountsSold {
			get { return GetColumnValue<int>(Columns.NSubAccountsSold); }
			set {
				SetColumnValue(Columns.NSubAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubAccountsSold));
			}
		}
		[DataMember]
		public int NBadAccountsSold {
			get { return GetColumnValue<int>(Columns.NBadAccountsSold); }
			set {
				SetColumnValue(Columns.NBadAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NBadAccountsSold));
			}
		}
		[DataMember]
		public int NGoodCancels {
			get { return GetColumnValue<int>(Columns.NGoodCancels); }
			set {
				SetColumnValue(Columns.NGoodCancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodCancels));
			}
		}
		[DataMember]
		public int NGoodWithHolds {
			get { return GetColumnValue<int>(Columns.NGoodWithHolds); }
			set {
				SetColumnValue(Columns.NGoodWithHolds, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodWithHolds));
			}
		}
		[DataMember]
		public int NGoodDelinquent {
			get { return GetColumnValue<int>(Columns.NGoodDelinquent); }
			set {
				SetColumnValue(Columns.NGoodDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodDelinquent));
			}
		}
		[DataMember]
		public int NGoodFriendsAndFamily {
			get { return GetColumnValue<int>(Columns.NGoodFriendsAndFamily); }
			set {
				SetColumnValue(Columns.NGoodFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodFriendsAndFamily));
			}
		}
		[DataMember]
		public int NSubCancels {
			get { return GetColumnValue<int>(Columns.NSubCancels); }
			set {
				SetColumnValue(Columns.NSubCancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubCancels));
			}
		}
		[DataMember]
		public int NSubWithHolds {
			get { return GetColumnValue<int>(Columns.NSubWithHolds); }
			set {
				SetColumnValue(Columns.NSubWithHolds, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubWithHolds));
			}
		}
		[DataMember]
		public int NSubMissingActivationOrAutoPay {
			get { return GetColumnValue<int>(Columns.NSubMissingActivationOrAutoPay); }
			set {
				SetColumnValue(Columns.NSubMissingActivationOrAutoPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubMissingActivationOrAutoPay));
			}
		}
		[DataMember]
		public int NSubDelinquent {
			get { return GetColumnValue<int>(Columns.NSubDelinquent); }
			set {
				SetColumnValue(Columns.NSubDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubDelinquent));
			}
		}
		[DataMember]
		public int NSubFriendsAndFamily {
			get { return GetColumnValue<int>(Columns.NSubFriendsAndFamily); }
			set {
				SetColumnValue(Columns.NSubFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubFriendsAndFamily));
			}
		}
		[DataMember]
		public int NetGoodAccounts {
			get { return GetColumnValue<int>(Columns.NetGoodAccounts); }
			set {
				SetColumnValue(Columns.NetGoodAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetGoodAccounts));
			}
		}
		[DataMember]
		public int NetSubAccounts {
			get { return GetColumnValue<int>(Columns.NetSubAccounts); }
			set {
				SetColumnValue(Columns.NetSubAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetSubAccounts));
			}
		}
		[DataMember]
		public int NetPassAccounts {
			get { return GetColumnValue<int>(Columns.NetPassAccounts); }
			set {
				SetColumnValue(Columns.NetPassAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetPassAccounts));
			}
		}
		[DataMember]
		public int NGoodWithheld {
			get { return GetColumnValue<int>(Columns.NGoodWithheld); }
			set {
				SetColumnValue(Columns.NGoodWithheld, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodWithheld));
			}
		}
		[DataMember]
		public int NSubWithheld {
			get { return GetColumnValue<int>(Columns.NSubWithheld); }
			set {
				SetColumnValue(Columns.NSubWithheld, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubWithheld));
			}
		}
		[DataMember]
		public int NGoodWaivedActivations {
			get { return GetColumnValue<int>(Columns.NGoodWaivedActivations); }
			set {
				SetColumnValue(Columns.NGoodWaivedActivations, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodWaivedActivations));
			}
		}
		[DataMember]
		public int NGoodManualBill {
			get { return GetColumnValue<int>(Columns.NGoodManualBill); }
			set {
				SetColumnValue(Columns.NGoodManualBill, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodManualBill));
			}
		}
		[DataMember]
		public int NGoodMissingInvoiceFee {
			get { return GetColumnValue<int>(Columns.NGoodMissingInvoiceFee); }
			set {
				SetColumnValue(Columns.NGoodMissingInvoiceFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodMissingInvoiceFee));
			}
		}
		[DataMember]
		public int NGoodExtendedContracts {
			get { return GetColumnValue<int>(Columns.NGoodExtendedContracts); }
			set {
				SetColumnValue(Columns.NGoodExtendedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodExtendedContracts));
			}
		}
		[DataMember]
		public int NGoodShortenedContracts {
			get { return GetColumnValue<int>(Columns.NGoodShortenedContracts); }
			set {
				SetColumnValue(Columns.NGoodShortenedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodShortenedContracts));
			}
		}
		[DataMember]
		public int NGoodLoweredRMR {
			get { return GetColumnValue<int>(Columns.NGoodLoweredRMR); }
			set {
				SetColumnValue(Columns.NGoodLoweredRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodLoweredRMR));
			}
		}
		[DataMember]
		public int NGoodDigitalAccounts {
			get { return GetColumnValue<int>(Columns.NGoodDigitalAccounts); }
			set {
				SetColumnValue(Columns.NGoodDigitalAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodDigitalAccounts));
			}
		}
		[DataMember]
		public int NGoodCommercial {
			get { return GetColumnValue<int>(Columns.NGoodCommercial); }
			set {
				SetColumnValue(Columns.NGoodCommercial, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodCommercial));
			}
		}
		[DataMember]
		public int NRaisedRMROneDollar {
			get { return GetColumnValue<int>(Columns.NRaisedRMROneDollar); }
			set {
				SetColumnValue(Columns.NRaisedRMROneDollar, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NRaisedRMROneDollar));
			}
		}
		[DataMember]
		public int NRaisedRMRTwoDollars {
			get { return GetColumnValue<int>(Columns.NRaisedRMRTwoDollars); }
			set {
				SetColumnValue(Columns.NRaisedRMRTwoDollars, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NRaisedRMRTwoDollars));
			}
		}
		[DataMember]
		public int NRaisedRMRThreeDollars {
			get { return GetColumnValue<int>(Columns.NRaisedRMRThreeDollars); }
			set {
				SetColumnValue(Columns.NRaisedRMRThreeDollars, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NRaisedRMRThreeDollars));
			}
		}
		[DataMember]
		public int NGoodSaves {
			get { return GetColumnValue<int>(Columns.NGoodSaves); }
			set {
				SetColumnValue(Columns.NGoodSaves, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodSaves));
			}
		}
		[DataMember]
		public int NCoManagerQualifyingAccounts {
			get { return GetColumnValue<int>(Columns.NCoManagerQualifyingAccounts); }
			set {
				SetColumnValue(Columns.NCoManagerQualifyingAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NCoManagerQualifyingAccounts));
			}
		}
		[DataMember]
		public double TotalPointBank {
			get { return GetColumnValue<double>(Columns.TotalPointBank); }
			set {
				SetColumnValue(Columns.TotalPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPointBank));
			}
		}
		[DataMember]
		public double FinalPointBank {
			get { return GetColumnValue<double>(Columns.FinalPointBank); }
			set {
				SetColumnValue(Columns.FinalPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FinalPointBank));
			}
		}
		[DataMember]
		public decimal AccountPayRate {
			get { return GetColumnValue<decimal>(Columns.AccountPayRate); }
			set {
				SetColumnValue(Columns.AccountPayRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountPayRate));
			}
		}
		[DataMember]
		public decimal SubAccountPayRate {
			get { return GetColumnValue<decimal>(Columns.SubAccountPayRate); }
			set {
				SetColumnValue(Columns.SubAccountPayRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubAccountPayRate));
			}
		}
		[DataMember]
		public decimal SigningBonus {
			get { return GetColumnValue<decimal>(Columns.SigningBonus); }
			set {
				SetColumnValue(Columns.SigningBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SigningBonus));
			}
		}
		[DataMember]
		public decimal RecruitingBonus {
			get { return GetColumnValue<decimal>(Columns.RecruitingBonus); }
			set {
				SetColumnValue(Columns.RecruitingBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitingBonus));
			}
		}
		[DataMember]
		public decimal RentBonus {
			get { return GetColumnValue<decimal>(Columns.RentBonus); }
			set {
				SetColumnValue(Columns.RentBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentBonus));
			}
		}
		[DataMember]
		public decimal RaisedRMRBonus {
			get { return GetColumnValue<decimal>(Columns.RaisedRMRBonus); }
			set {
				SetColumnValue(Columns.RaisedRMRBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RaisedRMRBonus));
			}
		}
		[DataMember]
		public decimal ExtendedContractBonus {
			get { return GetColumnValue<decimal>(Columns.ExtendedContractBonus); }
			set {
				SetColumnValue(Columns.ExtendedContractBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExtendedContractBonus));
			}
		}
		[DataMember]
		public decimal TravelMoney {
			get { return GetColumnValue<decimal>(Columns.TravelMoney); }
			set {
				SetColumnValue(Columns.TravelMoney, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TravelMoney));
			}
		}
		[DataMember]
		public bool TravelMoneyIsBonus {
			get { return GetColumnValue<bool>(Columns.TravelMoneyIsBonus); }
			set {
				SetColumnValue(Columns.TravelMoneyIsBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TravelMoneyIsBonus));
			}
		}
		[DataMember]
		public decimal RepAccountPayRate {
			get { return GetColumnValue<decimal>(Columns.RepAccountPayRate); }
			set {
				SetColumnValue(Columns.RepAccountPayRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RepAccountPayRate));
			}
		}
		[DataMember]
		public decimal RepCashBonus {
			get { return GetColumnValue<decimal>(Columns.RepCashBonus); }
			set {
				SetColumnValue(Columns.RepCashBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RepCashBonus));
			}
		}
		[DataMember]
		public decimal RepCommissionsTotal {
			get { return GetColumnValue<decimal>(Columns.RepCommissionsTotal); }
			set {
				SetColumnValue(Columns.RepCommissionsTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RepCommissionsTotal));
			}
		}
		[DataMember]
		public bool IsRepTotalHigher {
			get { return GetColumnValue<bool>(Columns.IsRepTotalHigher); }
			set {
				SetColumnValue(Columns.IsRepTotalHigher, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsRepTotalHigher));
			}
		}
		[DataMember]
		public decimal MiscTotal {
			get { return GetColumnValue<decimal>(Columns.MiscTotal); }
			set {
				SetColumnValue(Columns.MiscTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiscTotal));
			}
		}
		[DataMember]
		public decimal IncentivesPaid {
			get { return GetColumnValue<decimal>(Columns.IncentivesPaid); }
			set {
				SetColumnValue(Columns.IncentivesPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncentivesPaid));
			}
		}
		[DataMember]
		public decimal WaivedActivationDeduction {
			get { return GetColumnValue<decimal>(Columns.WaivedActivationDeduction); }
			set {
				SetColumnValue(Columns.WaivedActivationDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WaivedActivationDeduction));
			}
		}
		[DataMember]
		public decimal PassCreditDeduction {
			get { return GetColumnValue<decimal>(Columns.PassCreditDeduction); }
			set {
				SetColumnValue(Columns.PassCreditDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassCreditDeduction));
			}
		}
		[DataMember]
		public decimal ManualBillDeduction {
			get { return GetColumnValue<decimal>(Columns.ManualBillDeduction); }
			set {
				SetColumnValue(Columns.ManualBillDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManualBillDeduction));
			}
		}
		[DataMember]
		public decimal MissingInvoiceFeeDeduction {
			get { return GetColumnValue<decimal>(Columns.MissingInvoiceFeeDeduction); }
			set {
				SetColumnValue(Columns.MissingInvoiceFeeDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MissingInvoiceFeeDeduction));
			}
		}
		[DataMember]
		public decimal ShortenedContractDeduction {
			get { return GetColumnValue<decimal>(Columns.ShortenedContractDeduction); }
			set {
				SetColumnValue(Columns.ShortenedContractDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortenedContractDeduction));
			}
		}
		[DataMember]
		public decimal LoweredRMRDeduction {
			get { return GetColumnValue<decimal>(Columns.LoweredRMRDeduction); }
			set {
				SetColumnValue(Columns.LoweredRMRDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoweredRMRDeduction));
			}
		}
		[DataMember]
		public decimal DigitalAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.DigitalAccountDeduction); }
			set {
				SetColumnValue(Columns.DigitalAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DigitalAccountDeduction));
			}
		}
		[DataMember]
		public decimal SavedAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.SavedAccountDeduction); }
			set {
				SetColumnValue(Columns.SavedAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SavedAccountDeduction));
			}
		}
		[DataMember]
		public decimal CommercialAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.CommercialAccountDeduction); }
			set {
				SetColumnValue(Columns.CommercialAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommercialAccountDeduction));
			}
		}
		[DataMember]
		public decimal PointBankDollarAmount {
			get { return GetColumnValue<decimal>(Columns.PointBankDollarAmount); }
			set {
				SetColumnValue(Columns.PointBankDollarAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PointBankDollarAmount));
			}
		}
		[DataMember]
		public int NOfficeGoodAccountsSold {
			get { return GetColumnValue<int>(Columns.NOfficeGoodAccountsSold); }
			set {
				SetColumnValue(Columns.NOfficeGoodAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeGoodAccountsSold));
			}
		}
		[DataMember]
		public int NOfficeExcellentAccountsSold {
			get { return GetColumnValue<int>(Columns.NOfficeExcellentAccountsSold); }
			set {
				SetColumnValue(Columns.NOfficeExcellentAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeExcellentAccountsSold));
			}
		}
		[DataMember]
		public int NOfficePassAccountsSold {
			get { return GetColumnValue<int>(Columns.NOfficePassAccountsSold); }
			set {
				SetColumnValue(Columns.NOfficePassAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficePassAccountsSold));
			}
		}
		[DataMember]
		public int NOfficeSubAccountsSold {
			get { return GetColumnValue<int>(Columns.NOfficeSubAccountsSold); }
			set {
				SetColumnValue(Columns.NOfficeSubAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeSubAccountsSold));
			}
		}
		[DataMember]
		public int NOfficeBadAccountsSold {
			get { return GetColumnValue<int>(Columns.NOfficeBadAccountsSold); }
			set {
				SetColumnValue(Columns.NOfficeBadAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeBadAccountsSold));
			}
		}
		[DataMember]
		public int NOfficeGoodCancels {
			get { return GetColumnValue<int>(Columns.NOfficeGoodCancels); }
			set {
				SetColumnValue(Columns.NOfficeGoodCancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeGoodCancels));
			}
		}
		[DataMember]
		public int NOfficeGoodWithHolds {
			get { return GetColumnValue<int>(Columns.NOfficeGoodWithHolds); }
			set {
				SetColumnValue(Columns.NOfficeGoodWithHolds, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeGoodWithHolds));
			}
		}
		[DataMember]
		public int NOfficeGoodDelinquent {
			get { return GetColumnValue<int>(Columns.NOfficeGoodDelinquent); }
			set {
				SetColumnValue(Columns.NOfficeGoodDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeGoodDelinquent));
			}
		}
		[DataMember]
		public int NOfficeGoodFriendsAndFamily {
			get { return GetColumnValue<int>(Columns.NOfficeGoodFriendsAndFamily); }
			set {
				SetColumnValue(Columns.NOfficeGoodFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeGoodFriendsAndFamily));
			}
		}
		[DataMember]
		public int NOfficeSubCancels {
			get { return GetColumnValue<int>(Columns.NOfficeSubCancels); }
			set {
				SetColumnValue(Columns.NOfficeSubCancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeSubCancels));
			}
		}
		[DataMember]
		public int NOfficeSubWithHolds {
			get { return GetColumnValue<int>(Columns.NOfficeSubWithHolds); }
			set {
				SetColumnValue(Columns.NOfficeSubWithHolds, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeSubWithHolds));
			}
		}
		[DataMember]
		public int NOfficeSubMissingActivationOrAutoPay {
			get { return GetColumnValue<int>(Columns.NOfficeSubMissingActivationOrAutoPay); }
			set {
				SetColumnValue(Columns.NOfficeSubMissingActivationOrAutoPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeSubMissingActivationOrAutoPay));
			}
		}
		[DataMember]
		public int NOfficeSubDelinquent {
			get { return GetColumnValue<int>(Columns.NOfficeSubDelinquent); }
			set {
				SetColumnValue(Columns.NOfficeSubDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeSubDelinquent));
			}
		}
		[DataMember]
		public int NOfficeSubFriendsAndFamily {
			get { return GetColumnValue<int>(Columns.NOfficeSubFriendsAndFamily); }
			set {
				SetColumnValue(Columns.NOfficeSubFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeSubFriendsAndFamily));
			}
		}
		[DataMember]
		public int NetOfficeGoodAccounts {
			get { return GetColumnValue<int>(Columns.NetOfficeGoodAccounts); }
			set {
				SetColumnValue(Columns.NetOfficeGoodAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetOfficeGoodAccounts));
			}
		}
		[DataMember]
		public int NetOfficeSubAccounts {
			get { return GetColumnValue<int>(Columns.NetOfficeSubAccounts); }
			set {
				SetColumnValue(Columns.NetOfficeSubAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetOfficeSubAccounts));
			}
		}
		[DataMember]
		public int NetOfficePassAccounts {
			get { return GetColumnValue<int>(Columns.NetOfficePassAccounts); }
			set {
				SetColumnValue(Columns.NetOfficePassAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetOfficePassAccounts));
			}
		}
		[DataMember]
		public int NOfficeLoweredRMR {
			get { return GetColumnValue<int>(Columns.NOfficeLoweredRMR); }
			set {
				SetColumnValue(Columns.NOfficeLoweredRMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeLoweredRMR));
			}
		}
		[DataMember]
		public int NOfficeActivationsWaived {
			get { return GetColumnValue<int>(Columns.NOfficeActivationsWaived); }
			set {
				SetColumnValue(Columns.NOfficeActivationsWaived, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeActivationsWaived));
			}
		}
		[DataMember]
		public int NOfficeWithheld {
			get { return GetColumnValue<int>(Columns.NOfficeWithheld); }
			set {
				SetColumnValue(Columns.NOfficeWithheld, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeWithheld));
			}
		}
		[DataMember]
		public int NOfficeSubWithheld {
			get { return GetColumnValue<int>(Columns.NOfficeSubWithheld); }
			set {
				SetColumnValue(Columns.NOfficeSubWithheld, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOfficeSubWithheld));
			}
		}
		[DataMember]
		public decimal RetentionBonus {
			get { return GetColumnValue<decimal>(Columns.RetentionBonus); }
			set {
				SetColumnValue(Columns.RetentionBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RetentionBonus));
			}
		}
		[DataMember]
		public decimal AccountOverrideRate {
			get { return GetColumnValue<decimal>(Columns.AccountOverrideRate); }
			set {
				SetColumnValue(Columns.AccountOverrideRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountOverrideRate));
			}
		}
		[DataMember]
		public decimal SubAccountOverrideRate {
			get { return GetColumnValue<decimal>(Columns.SubAccountOverrideRate); }
			set {
				SetColumnValue(Columns.SubAccountOverrideRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubAccountOverrideRate));
			}
		}
		[DataMember]
		public decimal OfficeLoweredRMRDeduction {
			get { return GetColumnValue<decimal>(Columns.OfficeLoweredRMRDeduction); }
			set {
				SetColumnValue(Columns.OfficeLoweredRMRDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeLoweredRMRDeduction));
			}
		}
		[DataMember]
		public decimal OfficePassCreditScoreDeduction {
			get { return GetColumnValue<decimal>(Columns.OfficePassCreditScoreDeduction); }
			set {
				SetColumnValue(Columns.OfficePassCreditScoreDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficePassCreditScoreDeduction));
			}
		}
		[DataMember]
		public decimal OfficeActivationWaivesDeduction {
			get { return GetColumnValue<decimal>(Columns.OfficeActivationWaivesDeduction); }
			set {
				SetColumnValue(Columns.OfficeActivationWaivesDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeActivationWaivesDeduction));
			}
		}
		[DataMember]
		public decimal TotalRentPaid {
			get { return GetColumnValue<decimal>(Columns.TotalRentPaid); }
			set {
				SetColumnValue(Columns.TotalRentPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalRentPaid));
			}
		}
		[DataMember]
		public decimal TotalPersonalCommissions {
			get { return GetColumnValue<decimal>(Columns.TotalPersonalCommissions); }
			set {
				SetColumnValue(Columns.TotalPersonalCommissions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPersonalCommissions));
			}
		}
		[DataMember]
		public decimal TotalPersonalBonuses {
			get { return GetColumnValue<decimal>(Columns.TotalPersonalBonuses); }
			set {
				SetColumnValue(Columns.TotalPersonalBonuses, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPersonalBonuses));
			}
		}
		[DataMember]
		public decimal TotalPersonalDeductions {
			get { return GetColumnValue<decimal>(Columns.TotalPersonalDeductions); }
			set {
				SetColumnValue(Columns.TotalPersonalDeductions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPersonalDeductions));
			}
		}
		[DataMember]
		public decimal TotalOfficeCommissions {
			get { return GetColumnValue<decimal>(Columns.TotalOfficeCommissions); }
			set {
				SetColumnValue(Columns.TotalOfficeCommissions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalOfficeCommissions));
			}
		}
		[DataMember]
		public decimal TotalOfficeDeductions {
			get { return GetColumnValue<decimal>(Columns.TotalOfficeDeductions); }
			set {
				SetColumnValue(Columns.TotalOfficeDeductions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalOfficeDeductions));
			}
		}
		[DataMember]
		public decimal ManagerSalary {
			get { return GetColumnValue<decimal>(Columns.ManagerSalary); }
			set {
				SetColumnValue(Columns.ManagerSalary, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagerSalary));
			}
		}
		[DataMember]
		public decimal TotalEarnings {
			get { return GetColumnValue<decimal>(Columns.TotalEarnings); }
			set {
				SetColumnValue(Columns.TotalEarnings, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalEarnings));
			}
		}
		[DataMember]
		public decimal TotalPaid {
			get { return GetColumnValue<decimal>(Columns.TotalPaid); }
			set {
				SetColumnValue(Columns.TotalPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPaid));
			}
		}
		[DataMember]
		public decimal TotalBonuses {
			get { return GetColumnValue<decimal>(Columns.TotalBonuses); }
			set {
				SetColumnValue(Columns.TotalBonuses, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalBonuses));
			}
		}
		[DataMember]
		public decimal TotalDeductions {
			get { return GetColumnValue<decimal>(Columns.TotalDeductions); }
			set {
				SetColumnValue(Columns.TotalDeductions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalDeductions));
			}
		}
		[DataMember]
		public decimal BackendCheckAmount {
			get { return GetColumnValue<decimal>(Columns.BackendCheckAmount); }
			set {
				SetColumnValue(Columns.BackendCheckAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendCheckAmount));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendManagerPayscale _BackendManagerPayscale;
		//Relationship: FK_PR_SalesManagerBackends_PR_BackendManagerPayscales
		public PR_BackendManagerPayscale BackendManagerPayscale
		{
			get
			{
				if(_BackendManagerPayscale == null) {
					_BackendManagerPayscale = PR_BackendManagerPayscale.FetchByID(this.BackendManagerPayscaleID);
				}
				return _BackendManagerPayscale;
			}
			set
			{
				SetColumnValue("BackendManagerPayscaleID", value.BackendManagerPayscaleID);
				_BackendManagerPayscale = value;
			}
		}

		private PR_BackendPayscale _BackendPayscale;
		//Relationship: FK_PR_SalesManagerBackends_PR_BackendPayscales
		public PR_BackendPayscale BackendPayscale
		{
			get
			{
				if(_BackendPayscale == null) {
					_BackendPayscale = PR_BackendPayscale.FetchByID(this.BackendPayscaleID);
				}
				return _BackendPayscale;
			}
			set
			{
				SetColumnValue("BackendPayscaleID", value.BackendPayscaleID);
				_BackendPayscale = value;
			}
		}

		private PR_BackendPayscale _PersonalBackendPayscale;
		//Relationship: FK_PR_SalesManagerBackends_PR_BackendPayscales1
		public PR_BackendPayscale PersonalBackendPayscale
		{
			get
			{
				if(_PersonalBackendPayscale == null) {
					_PersonalBackendPayscale = PR_BackendPayscale.FetchByID(this.PersonalBackendPayscaleID);
				}
				return _PersonalBackendPayscale;
			}
			set
			{
				SetColumnValue("PersonalBackendPayscaleID", value.BackendPayscaleID);
				_PersonalBackendPayscale = value;
			}
		}

		private RU_Payscale _PayScale;
		//Relationship: FK_PR_SalesManagerBackends_RU_Payscales
		public RU_Payscale PayScale
		{
			get
			{
				if(_PayScale == null) {
					_PayScale = RU_Payscale.FetchByID(this.PayScaleID);
				}
				return _PayScale;
			}
			set
			{
				SetColumnValue("PayScaleID", value.PayscaleID);
				_PayScale = value;
			}
		}

		private RU_Payscale _PersonalPayScale;
		//Relationship: FK_PR_SalesManagerBackends_RU_Payscales1
		public RU_Payscale PersonalPayScale
		{
			get
			{
				if(_PersonalPayScale == null) {
					_PersonalPayScale = RU_Payscale.FetchByID(this.PersonalPayScaleID);
				}
				return _PersonalPayScale;
			}
			set
			{
				SetColumnValue("PersonalPayScaleID", value.PayscaleID);
				_PersonalPayScale = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_SalesManagerBackends_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_PR_SalesManagerBackends_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		private RU_User _RegionalUser;
		//Relationship: FK_PR_SalesManagerBackends_RU_Users
		public RU_User RegionalUser
		{
			get
			{
				if(_RegionalUser == null) {
					_RegionalUser = RU_User.FetchByID(this.RegionalUserID);
				}
				return _RegionalUser;
			}
			set
			{
				SetColumnValue("RegionalUserID", value.UserID);
				_RegionalUser = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SalesManagerBackendID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SalesManagerBackendIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PayScaleIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PersonalPayScaleIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn BackendManagerPayscaleIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn BackendPayscaleIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PersonalBackendPayscaleIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DetailFileIDColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn RegionalUserIDColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsCoManagerColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn NGoodAccountsSoldColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn NExcellentAccountsSoldColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn NPassAccountsSoldColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn NSubAccountsSoldColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn NBadAccountsSoldColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn NGoodCancelsColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn NGoodWithHoldsColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn NGoodDelinquentColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn NGoodFriendsAndFamilyColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn NSubCancelsColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn NSubWithHoldsColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn NSubMissingActivationOrAutoPayColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn NSubDelinquentColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn NSubFriendsAndFamilyColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn NetGoodAccountsColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn NetSubAccountsColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn NetPassAccountsColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn NGoodWithheldColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn NSubWithheldColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn NGoodWaivedActivationsColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn NGoodManualBillColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn NGoodMissingInvoiceFeeColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn NGoodExtendedContractsColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn NGoodShortenedContractsColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn NGoodLoweredRMRColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn NGoodDigitalAccountsColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn NGoodCommercialColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn NRaisedRMROneDollarColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn NRaisedRMRTwoDollarsColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn NRaisedRMRThreeDollarsColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn NGoodSavesColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn NCoManagerQualifyingAccountsColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn TotalPointBankColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn FinalPointBankColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn AccountPayRateColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn SubAccountPayRateColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn SigningBonusColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn RecruitingBonusColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn RentBonusColumn
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn RaisedRMRBonusColumn
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn ExtendedContractBonusColumn
		{
			get { return Schema.Columns[52]; }
		}
		public static TableSchema.TableColumn TravelMoneyColumn
		{
			get { return Schema.Columns[53]; }
		}
		public static TableSchema.TableColumn TravelMoneyIsBonusColumn
		{
			get { return Schema.Columns[54]; }
		}
		public static TableSchema.TableColumn RepAccountPayRateColumn
		{
			get { return Schema.Columns[55]; }
		}
		public static TableSchema.TableColumn RepCashBonusColumn
		{
			get { return Schema.Columns[56]; }
		}
		public static TableSchema.TableColumn RepCommissionsTotalColumn
		{
			get { return Schema.Columns[57]; }
		}
		public static TableSchema.TableColumn IsRepTotalHigherColumn
		{
			get { return Schema.Columns[58]; }
		}
		public static TableSchema.TableColumn MiscTotalColumn
		{
			get { return Schema.Columns[59]; }
		}
		public static TableSchema.TableColumn IncentivesPaidColumn
		{
			get { return Schema.Columns[60]; }
		}
		public static TableSchema.TableColumn WaivedActivationDeductionColumn
		{
			get { return Schema.Columns[61]; }
		}
		public static TableSchema.TableColumn PassCreditDeductionColumn
		{
			get { return Schema.Columns[62]; }
		}
		public static TableSchema.TableColumn ManualBillDeductionColumn
		{
			get { return Schema.Columns[63]; }
		}
		public static TableSchema.TableColumn MissingInvoiceFeeDeductionColumn
		{
			get { return Schema.Columns[64]; }
		}
		public static TableSchema.TableColumn ShortenedContractDeductionColumn
		{
			get { return Schema.Columns[65]; }
		}
		public static TableSchema.TableColumn LoweredRMRDeductionColumn
		{
			get { return Schema.Columns[66]; }
		}
		public static TableSchema.TableColumn DigitalAccountDeductionColumn
		{
			get { return Schema.Columns[67]; }
		}
		public static TableSchema.TableColumn SavedAccountDeductionColumn
		{
			get { return Schema.Columns[68]; }
		}
		public static TableSchema.TableColumn CommercialAccountDeductionColumn
		{
			get { return Schema.Columns[69]; }
		}
		public static TableSchema.TableColumn PointBankDollarAmountColumn
		{
			get { return Schema.Columns[70]; }
		}
		public static TableSchema.TableColumn NOfficeGoodAccountsSoldColumn
		{
			get { return Schema.Columns[71]; }
		}
		public static TableSchema.TableColumn NOfficeExcellentAccountsSoldColumn
		{
			get { return Schema.Columns[72]; }
		}
		public static TableSchema.TableColumn NOfficePassAccountsSoldColumn
		{
			get { return Schema.Columns[73]; }
		}
		public static TableSchema.TableColumn NOfficeSubAccountsSoldColumn
		{
			get { return Schema.Columns[74]; }
		}
		public static TableSchema.TableColumn NOfficeBadAccountsSoldColumn
		{
			get { return Schema.Columns[75]; }
		}
		public static TableSchema.TableColumn NOfficeGoodCancelsColumn
		{
			get { return Schema.Columns[76]; }
		}
		public static TableSchema.TableColumn NOfficeGoodWithHoldsColumn
		{
			get { return Schema.Columns[77]; }
		}
		public static TableSchema.TableColumn NOfficeGoodDelinquentColumn
		{
			get { return Schema.Columns[78]; }
		}
		public static TableSchema.TableColumn NOfficeGoodFriendsAndFamilyColumn
		{
			get { return Schema.Columns[79]; }
		}
		public static TableSchema.TableColumn NOfficeSubCancelsColumn
		{
			get { return Schema.Columns[80]; }
		}
		public static TableSchema.TableColumn NOfficeSubWithHoldsColumn
		{
			get { return Schema.Columns[81]; }
		}
		public static TableSchema.TableColumn NOfficeSubMissingActivationOrAutoPayColumn
		{
			get { return Schema.Columns[82]; }
		}
		public static TableSchema.TableColumn NOfficeSubDelinquentColumn
		{
			get { return Schema.Columns[83]; }
		}
		public static TableSchema.TableColumn NOfficeSubFriendsAndFamilyColumn
		{
			get { return Schema.Columns[84]; }
		}
		public static TableSchema.TableColumn NetOfficeGoodAccountsColumn
		{
			get { return Schema.Columns[85]; }
		}
		public static TableSchema.TableColumn NetOfficeSubAccountsColumn
		{
			get { return Schema.Columns[86]; }
		}
		public static TableSchema.TableColumn NetOfficePassAccountsColumn
		{
			get { return Schema.Columns[87]; }
		}
		public static TableSchema.TableColumn NOfficeLoweredRMRColumn
		{
			get { return Schema.Columns[88]; }
		}
		public static TableSchema.TableColumn NOfficeActivationsWaivedColumn
		{
			get { return Schema.Columns[89]; }
		}
		public static TableSchema.TableColumn NOfficeWithheldColumn
		{
			get { return Schema.Columns[90]; }
		}
		public static TableSchema.TableColumn NOfficeSubWithheldColumn
		{
			get { return Schema.Columns[91]; }
		}
		public static TableSchema.TableColumn RetentionBonusColumn
		{
			get { return Schema.Columns[92]; }
		}
		public static TableSchema.TableColumn AccountOverrideRateColumn
		{
			get { return Schema.Columns[93]; }
		}
		public static TableSchema.TableColumn SubAccountOverrideRateColumn
		{
			get { return Schema.Columns[94]; }
		}
		public static TableSchema.TableColumn OfficeLoweredRMRDeductionColumn
		{
			get { return Schema.Columns[95]; }
		}
		public static TableSchema.TableColumn OfficePassCreditScoreDeductionColumn
		{
			get { return Schema.Columns[96]; }
		}
		public static TableSchema.TableColumn OfficeActivationWaivesDeductionColumn
		{
			get { return Schema.Columns[97]; }
		}
		public static TableSchema.TableColumn TotalRentPaidColumn
		{
			get { return Schema.Columns[98]; }
		}
		public static TableSchema.TableColumn TotalPersonalCommissionsColumn
		{
			get { return Schema.Columns[99]; }
		}
		public static TableSchema.TableColumn TotalPersonalBonusesColumn
		{
			get { return Schema.Columns[100]; }
		}
		public static TableSchema.TableColumn TotalPersonalDeductionsColumn
		{
			get { return Schema.Columns[101]; }
		}
		public static TableSchema.TableColumn TotalOfficeCommissionsColumn
		{
			get { return Schema.Columns[102]; }
		}
		public static TableSchema.TableColumn TotalOfficeDeductionsColumn
		{
			get { return Schema.Columns[103]; }
		}
		public static TableSchema.TableColumn ManagerSalaryColumn
		{
			get { return Schema.Columns[104]; }
		}
		public static TableSchema.TableColumn TotalEarningsColumn
		{
			get { return Schema.Columns[105]; }
		}
		public static TableSchema.TableColumn TotalPaidColumn
		{
			get { return Schema.Columns[106]; }
		}
		public static TableSchema.TableColumn TotalBonusesColumn
		{
			get { return Schema.Columns[107]; }
		}
		public static TableSchema.TableColumn TotalDeductionsColumn
		{
			get { return Schema.Columns[108]; }
		}
		public static TableSchema.TableColumn BackendCheckAmountColumn
		{
			get { return Schema.Columns[109]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SalesManagerBackendID = @"SalesManagerBackendID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string PayScaleID = @"PayScaleID";
			public static readonly string PersonalPayScaleID = @"PersonalPayScaleID";
			public static readonly string BackendManagerPayscaleID = @"BackendManagerPayscaleID";
			public static readonly string BackendPayscaleID = @"BackendPayscaleID";
			public static readonly string PersonalBackendPayscaleID = @"PersonalBackendPayscaleID";
			public static readonly string DetailFileID = @"DetailFileID";
			public static readonly string RegionalUserID = @"RegionalUserID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string IsCoManager = @"IsCoManager";
			public static readonly string NGoodAccountsSold = @"NGoodAccountsSold";
			public static readonly string NExcellentAccountsSold = @"NExcellentAccountsSold";
			public static readonly string NPassAccountsSold = @"NPassAccountsSold";
			public static readonly string NSubAccountsSold = @"NSubAccountsSold";
			public static readonly string NBadAccountsSold = @"NBadAccountsSold";
			public static readonly string NGoodCancels = @"NGoodCancels";
			public static readonly string NGoodWithHolds = @"NGoodWithHolds";
			public static readonly string NGoodDelinquent = @"NGoodDelinquent";
			public static readonly string NGoodFriendsAndFamily = @"NGoodFriendsAndFamily";
			public static readonly string NSubCancels = @"NSubCancels";
			public static readonly string NSubWithHolds = @"NSubWithHolds";
			public static readonly string NSubMissingActivationOrAutoPay = @"NSubMissingActivationOrAutoPay";
			public static readonly string NSubDelinquent = @"NSubDelinquent";
			public static readonly string NSubFriendsAndFamily = @"NSubFriendsAndFamily";
			public static readonly string NetGoodAccounts = @"NetGoodAccounts";
			public static readonly string NetSubAccounts = @"NetSubAccounts";
			public static readonly string NetPassAccounts = @"NetPassAccounts";
			public static readonly string NGoodWithheld = @"NGoodWithheld";
			public static readonly string NSubWithheld = @"NSubWithheld";
			public static readonly string NGoodWaivedActivations = @"NGoodWaivedActivations";
			public static readonly string NGoodManualBill = @"NGoodManualBill";
			public static readonly string NGoodMissingInvoiceFee = @"NGoodMissingInvoiceFee";
			public static readonly string NGoodExtendedContracts = @"NGoodExtendedContracts";
			public static readonly string NGoodShortenedContracts = @"NGoodShortenedContracts";
			public static readonly string NGoodLoweredRMR = @"NGoodLoweredRMR";
			public static readonly string NGoodDigitalAccounts = @"NGoodDigitalAccounts";
			public static readonly string NGoodCommercial = @"NGoodCommercial";
			public static readonly string NRaisedRMROneDollar = @"NRaisedRMROneDollar";
			public static readonly string NRaisedRMRTwoDollars = @"NRaisedRMRTwoDollars";
			public static readonly string NRaisedRMRThreeDollars = @"NRaisedRMRThreeDollars";
			public static readonly string NGoodSaves = @"NGoodSaves";
			public static readonly string NCoManagerQualifyingAccounts = @"NCoManagerQualifyingAccounts";
			public static readonly string TotalPointBank = @"TotalPointBank";
			public static readonly string FinalPointBank = @"FinalPointBank";
			public static readonly string AccountPayRate = @"AccountPayRate";
			public static readonly string SubAccountPayRate = @"SubAccountPayRate";
			public static readonly string SigningBonus = @"SigningBonus";
			public static readonly string RecruitingBonus = @"RecruitingBonus";
			public static readonly string RentBonus = @"RentBonus";
			public static readonly string RaisedRMRBonus = @"RaisedRMRBonus";
			public static readonly string ExtendedContractBonus = @"ExtendedContractBonus";
			public static readonly string TravelMoney = @"TravelMoney";
			public static readonly string TravelMoneyIsBonus = @"TravelMoneyIsBonus";
			public static readonly string RepAccountPayRate = @"RepAccountPayRate";
			public static readonly string RepCashBonus = @"RepCashBonus";
			public static readonly string RepCommissionsTotal = @"RepCommissionsTotal";
			public static readonly string IsRepTotalHigher = @"IsRepTotalHigher";
			public static readonly string MiscTotal = @"MiscTotal";
			public static readonly string IncentivesPaid = @"IncentivesPaid";
			public static readonly string WaivedActivationDeduction = @"WaivedActivationDeduction";
			public static readonly string PassCreditDeduction = @"PassCreditDeduction";
			public static readonly string ManualBillDeduction = @"ManualBillDeduction";
			public static readonly string MissingInvoiceFeeDeduction = @"MissingInvoiceFeeDeduction";
			public static readonly string ShortenedContractDeduction = @"ShortenedContractDeduction";
			public static readonly string LoweredRMRDeduction = @"LoweredRMRDeduction";
			public static readonly string DigitalAccountDeduction = @"DigitalAccountDeduction";
			public static readonly string SavedAccountDeduction = @"SavedAccountDeduction";
			public static readonly string CommercialAccountDeduction = @"CommercialAccountDeduction";
			public static readonly string PointBankDollarAmount = @"PointBankDollarAmount";
			public static readonly string NOfficeGoodAccountsSold = @"NOfficeGoodAccountsSold";
			public static readonly string NOfficeExcellentAccountsSold = @"NOfficeExcellentAccountsSold";
			public static readonly string NOfficePassAccountsSold = @"NOfficePassAccountsSold";
			public static readonly string NOfficeSubAccountsSold = @"NOfficeSubAccountsSold";
			public static readonly string NOfficeBadAccountsSold = @"NOfficeBadAccountsSold";
			public static readonly string NOfficeGoodCancels = @"NOfficeGoodCancels";
			public static readonly string NOfficeGoodWithHolds = @"NOfficeGoodWithHolds";
			public static readonly string NOfficeGoodDelinquent = @"NOfficeGoodDelinquent";
			public static readonly string NOfficeGoodFriendsAndFamily = @"NOfficeGoodFriendsAndFamily";
			public static readonly string NOfficeSubCancels = @"NOfficeSubCancels";
			public static readonly string NOfficeSubWithHolds = @"NOfficeSubWithHolds";
			public static readonly string NOfficeSubMissingActivationOrAutoPay = @"NOfficeSubMissingActivationOrAutoPay";
			public static readonly string NOfficeSubDelinquent = @"NOfficeSubDelinquent";
			public static readonly string NOfficeSubFriendsAndFamily = @"NOfficeSubFriendsAndFamily";
			public static readonly string NetOfficeGoodAccounts = @"NetOfficeGoodAccounts";
			public static readonly string NetOfficeSubAccounts = @"NetOfficeSubAccounts";
			public static readonly string NetOfficePassAccounts = @"NetOfficePassAccounts";
			public static readonly string NOfficeLoweredRMR = @"NOfficeLoweredRMR";
			public static readonly string NOfficeActivationsWaived = @"NOfficeActivationsWaived";
			public static readonly string NOfficeWithheld = @"NOfficeWithheld";
			public static readonly string NOfficeSubWithheld = @"NOfficeSubWithheld";
			public static readonly string RetentionBonus = @"RetentionBonus";
			public static readonly string AccountOverrideRate = @"AccountOverrideRate";
			public static readonly string SubAccountOverrideRate = @"SubAccountOverrideRate";
			public static readonly string OfficeLoweredRMRDeduction = @"OfficeLoweredRMRDeduction";
			public static readonly string OfficePassCreditScoreDeduction = @"OfficePassCreditScoreDeduction";
			public static readonly string OfficeActivationWaivesDeduction = @"OfficeActivationWaivesDeduction";
			public static readonly string TotalRentPaid = @"TotalRentPaid";
			public static readonly string TotalPersonalCommissions = @"TotalPersonalCommissions";
			public static readonly string TotalPersonalBonuses = @"TotalPersonalBonuses";
			public static readonly string TotalPersonalDeductions = @"TotalPersonalDeductions";
			public static readonly string TotalOfficeCommissions = @"TotalOfficeCommissions";
			public static readonly string TotalOfficeDeductions = @"TotalOfficeDeductions";
			public static readonly string ManagerSalary = @"ManagerSalary";
			public static readonly string TotalEarnings = @"TotalEarnings";
			public static readonly string TotalPaid = @"TotalPaid";
			public static readonly string TotalBonuses = @"TotalBonuses";
			public static readonly string TotalDeductions = @"TotalDeductions";
			public static readonly string BackendCheckAmount = @"BackendCheckAmount";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SalesManagerBackendID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_SalesRegionalBackend class.
	/// </summary>
	[DataContract]
	public partial class PR_SalesRegionalBackendCollection : ActiveList<PR_SalesRegionalBackend, PR_SalesRegionalBackendCollection>
	{
		public static PR_SalesRegionalBackendCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_SalesRegionalBackendCollection result = new PR_SalesRegionalBackendCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_SalesRegionalBackend item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_SalesRegionalBackends table.
	/// </summary>
	[DataContract]
	public partial class PR_SalesRegionalBackend : ActiveRecord<PR_SalesRegionalBackend>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_SalesRegionalBackend()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_SalesRegionalBackends", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSalesRegionalBackendID = new TableSchema.TableColumn(schema);
				colvarSalesRegionalBackendID.ColumnName = "SalesRegionalBackendID";
				colvarSalesRegionalBackendID.DataType = DbType.Int32;
				colvarSalesRegionalBackendID.MaxLength = 0;
				colvarSalesRegionalBackendID.AutoIncrement = true;
				colvarSalesRegionalBackendID.IsNullable = false;
				colvarSalesRegionalBackendID.IsPrimaryKey = true;
				colvarSalesRegionalBackendID.IsForeignKey = false;
				colvarSalesRegionalBackendID.IsReadOnly = false;
				colvarSalesRegionalBackendID.DefaultSetting = @"";
				colvarSalesRegionalBackendID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRegionalBackendID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarPayScaleID = new TableSchema.TableColumn(schema);
				colvarPayScaleID.ColumnName = "PayScaleID";
				colvarPayScaleID.DataType = DbType.Int32;
				colvarPayScaleID.MaxLength = 0;
				colvarPayScaleID.AutoIncrement = false;
				colvarPayScaleID.IsNullable = false;
				colvarPayScaleID.IsPrimaryKey = false;
				colvarPayScaleID.IsForeignKey = true;
				colvarPayScaleID.IsReadOnly = false;
				colvarPayScaleID.DefaultSetting = @"";
				colvarPayScaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayScaleID);

				TableSchema.TableColumn colvarBackendPayscaleID = new TableSchema.TableColumn(schema);
				colvarBackendPayscaleID.ColumnName = "BackendPayscaleID";
				colvarBackendPayscaleID.DataType = DbType.Int32;
				colvarBackendPayscaleID.MaxLength = 0;
				colvarBackendPayscaleID.AutoIncrement = false;
				colvarBackendPayscaleID.IsNullable = true;
				colvarBackendPayscaleID.IsPrimaryKey = false;
				colvarBackendPayscaleID.IsForeignKey = true;
				colvarBackendPayscaleID.IsReadOnly = false;
				colvarBackendPayscaleID.DefaultSetting = @"";
				colvarBackendPayscaleID.ForeignKeyTableName = "PR_BackendPayscales";
				schema.Columns.Add(colvarBackendPayscaleID);

				TableSchema.TableColumn colvarEstimatedPayscaleID = new TableSchema.TableColumn(schema);
				colvarEstimatedPayscaleID.ColumnName = "EstimatedPayscaleID";
				colvarEstimatedPayscaleID.DataType = DbType.Int32;
				colvarEstimatedPayscaleID.MaxLength = 0;
				colvarEstimatedPayscaleID.AutoIncrement = false;
				colvarEstimatedPayscaleID.IsNullable = true;
				colvarEstimatedPayscaleID.IsPrimaryKey = false;
				colvarEstimatedPayscaleID.IsForeignKey = true;
				colvarEstimatedPayscaleID.IsReadOnly = false;
				colvarEstimatedPayscaleID.DefaultSetting = @"";
				colvarEstimatedPayscaleID.ForeignKeyTableName = "PR_BackendPayscales";
				schema.Columns.Add(colvarEstimatedPayscaleID);

				TableSchema.TableColumn colvarDetailFileID = new TableSchema.TableColumn(schema);
				colvarDetailFileID.ColumnName = "DetailFileID";
				colvarDetailFileID.DataType = DbType.Int32;
				colvarDetailFileID.MaxLength = 0;
				colvarDetailFileID.AutoIncrement = false;
				colvarDetailFileID.IsNullable = true;
				colvarDetailFileID.IsPrimaryKey = false;
				colvarDetailFileID.IsForeignKey = false;
				colvarDetailFileID.IsReadOnly = false;
				colvarDetailFileID.DefaultSetting = @"";
				colvarDetailFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetailFileID);

				TableSchema.TableColumn colvarRegionalUserID = new TableSchema.TableColumn(schema);
				colvarRegionalUserID.ColumnName = "RegionalUserID";
				colvarRegionalUserID.DataType = DbType.Int32;
				colvarRegionalUserID.MaxLength = 0;
				colvarRegionalUserID.AutoIncrement = false;
				colvarRegionalUserID.IsNullable = true;
				colvarRegionalUserID.IsPrimaryKey = false;
				colvarRegionalUserID.IsForeignKey = false;
				colvarRegionalUserID.IsReadOnly = false;
				colvarRegionalUserID.DefaultSetting = @"";
				colvarRegionalUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegionalUserID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarNGoodAccountsSold = new TableSchema.TableColumn(schema);
				colvarNGoodAccountsSold.ColumnName = "NGoodAccountsSold";
				colvarNGoodAccountsSold.DataType = DbType.Int32;
				colvarNGoodAccountsSold.MaxLength = 0;
				colvarNGoodAccountsSold.AutoIncrement = false;
				colvarNGoodAccountsSold.IsNullable = false;
				colvarNGoodAccountsSold.IsPrimaryKey = false;
				colvarNGoodAccountsSold.IsForeignKey = false;
				colvarNGoodAccountsSold.IsReadOnly = false;
				colvarNGoodAccountsSold.DefaultSetting = @"((0))";
				colvarNGoodAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodAccountsSold);

				TableSchema.TableColumn colvarNExcellentAccountsSold = new TableSchema.TableColumn(schema);
				colvarNExcellentAccountsSold.ColumnName = "NExcellentAccountsSold";
				colvarNExcellentAccountsSold.DataType = DbType.Int32;
				colvarNExcellentAccountsSold.MaxLength = 0;
				colvarNExcellentAccountsSold.AutoIncrement = false;
				colvarNExcellentAccountsSold.IsNullable = false;
				colvarNExcellentAccountsSold.IsPrimaryKey = false;
				colvarNExcellentAccountsSold.IsForeignKey = false;
				colvarNExcellentAccountsSold.IsReadOnly = false;
				colvarNExcellentAccountsSold.DefaultSetting = @"((0))";
				colvarNExcellentAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNExcellentAccountsSold);

				TableSchema.TableColumn colvarNPassAccountsSold = new TableSchema.TableColumn(schema);
				colvarNPassAccountsSold.ColumnName = "NPassAccountsSold";
				colvarNPassAccountsSold.DataType = DbType.Int32;
				colvarNPassAccountsSold.MaxLength = 0;
				colvarNPassAccountsSold.AutoIncrement = false;
				colvarNPassAccountsSold.IsNullable = false;
				colvarNPassAccountsSold.IsPrimaryKey = false;
				colvarNPassAccountsSold.IsForeignKey = false;
				colvarNPassAccountsSold.IsReadOnly = false;
				colvarNPassAccountsSold.DefaultSetting = @"((0))";
				colvarNPassAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPassAccountsSold);

				TableSchema.TableColumn colvarNSubAccountsSold = new TableSchema.TableColumn(schema);
				colvarNSubAccountsSold.ColumnName = "NSubAccountsSold";
				colvarNSubAccountsSold.DataType = DbType.Int32;
				colvarNSubAccountsSold.MaxLength = 0;
				colvarNSubAccountsSold.AutoIncrement = false;
				colvarNSubAccountsSold.IsNullable = false;
				colvarNSubAccountsSold.IsPrimaryKey = false;
				colvarNSubAccountsSold.IsForeignKey = false;
				colvarNSubAccountsSold.IsReadOnly = false;
				colvarNSubAccountsSold.DefaultSetting = @"((0))";
				colvarNSubAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubAccountsSold);

				TableSchema.TableColumn colvarNBadAccountsSold = new TableSchema.TableColumn(schema);
				colvarNBadAccountsSold.ColumnName = "NBadAccountsSold";
				colvarNBadAccountsSold.DataType = DbType.Int32;
				colvarNBadAccountsSold.MaxLength = 0;
				colvarNBadAccountsSold.AutoIncrement = false;
				colvarNBadAccountsSold.IsNullable = false;
				colvarNBadAccountsSold.IsPrimaryKey = false;
				colvarNBadAccountsSold.IsForeignKey = false;
				colvarNBadAccountsSold.IsReadOnly = false;
				colvarNBadAccountsSold.DefaultSetting = @"((0))";
				colvarNBadAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNBadAccountsSold);

				TableSchema.TableColumn colvarNGoodCancels = new TableSchema.TableColumn(schema);
				colvarNGoodCancels.ColumnName = "NGoodCancels";
				colvarNGoodCancels.DataType = DbType.Int32;
				colvarNGoodCancels.MaxLength = 0;
				colvarNGoodCancels.AutoIncrement = false;
				colvarNGoodCancels.IsNullable = false;
				colvarNGoodCancels.IsPrimaryKey = false;
				colvarNGoodCancels.IsForeignKey = false;
				colvarNGoodCancels.IsReadOnly = false;
				colvarNGoodCancels.DefaultSetting = @"((0))";
				colvarNGoodCancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodCancels);

				TableSchema.TableColumn colvarNGoodWithHolds = new TableSchema.TableColumn(schema);
				colvarNGoodWithHolds.ColumnName = "NGoodWithHolds";
				colvarNGoodWithHolds.DataType = DbType.Int32;
				colvarNGoodWithHolds.MaxLength = 0;
				colvarNGoodWithHolds.AutoIncrement = false;
				colvarNGoodWithHolds.IsNullable = false;
				colvarNGoodWithHolds.IsPrimaryKey = false;
				colvarNGoodWithHolds.IsForeignKey = false;
				colvarNGoodWithHolds.IsReadOnly = false;
				colvarNGoodWithHolds.DefaultSetting = @"((0))";
				colvarNGoodWithHolds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodWithHolds);

				TableSchema.TableColumn colvarNGoodDelinquent = new TableSchema.TableColumn(schema);
				colvarNGoodDelinquent.ColumnName = "NGoodDelinquent";
				colvarNGoodDelinquent.DataType = DbType.Int32;
				colvarNGoodDelinquent.MaxLength = 0;
				colvarNGoodDelinquent.AutoIncrement = false;
				colvarNGoodDelinquent.IsNullable = false;
				colvarNGoodDelinquent.IsPrimaryKey = false;
				colvarNGoodDelinquent.IsForeignKey = false;
				colvarNGoodDelinquent.IsReadOnly = false;
				colvarNGoodDelinquent.DefaultSetting = @"((0))";
				colvarNGoodDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodDelinquent);

				TableSchema.TableColumn colvarNGoodFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarNGoodFriendsAndFamily.ColumnName = "NGoodFriendsAndFamily";
				colvarNGoodFriendsAndFamily.DataType = DbType.Int32;
				colvarNGoodFriendsAndFamily.MaxLength = 0;
				colvarNGoodFriendsAndFamily.AutoIncrement = false;
				colvarNGoodFriendsAndFamily.IsNullable = false;
				colvarNGoodFriendsAndFamily.IsPrimaryKey = false;
				colvarNGoodFriendsAndFamily.IsForeignKey = false;
				colvarNGoodFriendsAndFamily.IsReadOnly = false;
				colvarNGoodFriendsAndFamily.DefaultSetting = @"((0))";
				colvarNGoodFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodFriendsAndFamily);

				TableSchema.TableColumn colvarNSubCancels = new TableSchema.TableColumn(schema);
				colvarNSubCancels.ColumnName = "NSubCancels";
				colvarNSubCancels.DataType = DbType.Int32;
				colvarNSubCancels.MaxLength = 0;
				colvarNSubCancels.AutoIncrement = false;
				colvarNSubCancels.IsNullable = false;
				colvarNSubCancels.IsPrimaryKey = false;
				colvarNSubCancels.IsForeignKey = false;
				colvarNSubCancels.IsReadOnly = false;
				colvarNSubCancels.DefaultSetting = @"((0))";
				colvarNSubCancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubCancels);

				TableSchema.TableColumn colvarNSubWithHolds = new TableSchema.TableColumn(schema);
				colvarNSubWithHolds.ColumnName = "NSubWithHolds";
				colvarNSubWithHolds.DataType = DbType.Int32;
				colvarNSubWithHolds.MaxLength = 0;
				colvarNSubWithHolds.AutoIncrement = false;
				colvarNSubWithHolds.IsNullable = false;
				colvarNSubWithHolds.IsPrimaryKey = false;
				colvarNSubWithHolds.IsForeignKey = false;
				colvarNSubWithHolds.IsReadOnly = false;
				colvarNSubWithHolds.DefaultSetting = @"((0))";
				colvarNSubWithHolds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubWithHolds);

				TableSchema.TableColumn colvarNSubMissingActivationOrAutoPay = new TableSchema.TableColumn(schema);
				colvarNSubMissingActivationOrAutoPay.ColumnName = "NSubMissingActivationOrAutoPay";
				colvarNSubMissingActivationOrAutoPay.DataType = DbType.Int32;
				colvarNSubMissingActivationOrAutoPay.MaxLength = 0;
				colvarNSubMissingActivationOrAutoPay.AutoIncrement = false;
				colvarNSubMissingActivationOrAutoPay.IsNullable = false;
				colvarNSubMissingActivationOrAutoPay.IsPrimaryKey = false;
				colvarNSubMissingActivationOrAutoPay.IsForeignKey = false;
				colvarNSubMissingActivationOrAutoPay.IsReadOnly = false;
				colvarNSubMissingActivationOrAutoPay.DefaultSetting = @"((0))";
				colvarNSubMissingActivationOrAutoPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubMissingActivationOrAutoPay);

				TableSchema.TableColumn colvarNSubDelinquent = new TableSchema.TableColumn(schema);
				colvarNSubDelinquent.ColumnName = "NSubDelinquent";
				colvarNSubDelinquent.DataType = DbType.Int32;
				colvarNSubDelinquent.MaxLength = 0;
				colvarNSubDelinquent.AutoIncrement = false;
				colvarNSubDelinquent.IsNullable = false;
				colvarNSubDelinquent.IsPrimaryKey = false;
				colvarNSubDelinquent.IsForeignKey = false;
				colvarNSubDelinquent.IsReadOnly = false;
				colvarNSubDelinquent.DefaultSetting = @"((0))";
				colvarNSubDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubDelinquent);

				TableSchema.TableColumn colvarNSubFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarNSubFriendsAndFamily.ColumnName = "NSubFriendsAndFamily";
				colvarNSubFriendsAndFamily.DataType = DbType.Int32;
				colvarNSubFriendsAndFamily.MaxLength = 0;
				colvarNSubFriendsAndFamily.AutoIncrement = false;
				colvarNSubFriendsAndFamily.IsNullable = false;
				colvarNSubFriendsAndFamily.IsPrimaryKey = false;
				colvarNSubFriendsAndFamily.IsForeignKey = false;
				colvarNSubFriendsAndFamily.IsReadOnly = false;
				colvarNSubFriendsAndFamily.DefaultSetting = @"((0))";
				colvarNSubFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubFriendsAndFamily);

				TableSchema.TableColumn colvarNetGoodAccounts = new TableSchema.TableColumn(schema);
				colvarNetGoodAccounts.ColumnName = "NetGoodAccounts";
				colvarNetGoodAccounts.DataType = DbType.Int32;
				colvarNetGoodAccounts.MaxLength = 0;
				colvarNetGoodAccounts.AutoIncrement = false;
				colvarNetGoodAccounts.IsNullable = false;
				colvarNetGoodAccounts.IsPrimaryKey = false;
				colvarNetGoodAccounts.IsForeignKey = false;
				colvarNetGoodAccounts.IsReadOnly = false;
				colvarNetGoodAccounts.DefaultSetting = @"((0))";
				colvarNetGoodAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetGoodAccounts);

				TableSchema.TableColumn colvarNetSubAccounts = new TableSchema.TableColumn(schema);
				colvarNetSubAccounts.ColumnName = "NetSubAccounts";
				colvarNetSubAccounts.DataType = DbType.Int32;
				colvarNetSubAccounts.MaxLength = 0;
				colvarNetSubAccounts.AutoIncrement = false;
				colvarNetSubAccounts.IsNullable = false;
				colvarNetSubAccounts.IsPrimaryKey = false;
				colvarNetSubAccounts.IsForeignKey = false;
				colvarNetSubAccounts.IsReadOnly = false;
				colvarNetSubAccounts.DefaultSetting = @"((0))";
				colvarNetSubAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetSubAccounts);

				TableSchema.TableColumn colvarNetPassAccounts = new TableSchema.TableColumn(schema);
				colvarNetPassAccounts.ColumnName = "NetPassAccounts";
				colvarNetPassAccounts.DataType = DbType.Int32;
				colvarNetPassAccounts.MaxLength = 0;
				colvarNetPassAccounts.AutoIncrement = false;
				colvarNetPassAccounts.IsNullable = false;
				colvarNetPassAccounts.IsPrimaryKey = false;
				colvarNetPassAccounts.IsForeignKey = false;
				colvarNetPassAccounts.IsReadOnly = false;
				colvarNetPassAccounts.DefaultSetting = @"((0))";
				colvarNetPassAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetPassAccounts);

				TableSchema.TableColumn colvarNGoodWithheld = new TableSchema.TableColumn(schema);
				colvarNGoodWithheld.ColumnName = "NGoodWithheld";
				colvarNGoodWithheld.DataType = DbType.Int32;
				colvarNGoodWithheld.MaxLength = 0;
				colvarNGoodWithheld.AutoIncrement = false;
				colvarNGoodWithheld.IsNullable = false;
				colvarNGoodWithheld.IsPrimaryKey = false;
				colvarNGoodWithheld.IsForeignKey = false;
				colvarNGoodWithheld.IsReadOnly = false;
				colvarNGoodWithheld.DefaultSetting = @"((0))";
				colvarNGoodWithheld.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodWithheld);

				TableSchema.TableColumn colvarNSubWithheld = new TableSchema.TableColumn(schema);
				colvarNSubWithheld.ColumnName = "NSubWithheld";
				colvarNSubWithheld.DataType = DbType.Int32;
				colvarNSubWithheld.MaxLength = 0;
				colvarNSubWithheld.AutoIncrement = false;
				colvarNSubWithheld.IsNullable = false;
				colvarNSubWithheld.IsPrimaryKey = false;
				colvarNSubWithheld.IsForeignKey = false;
				colvarNSubWithheld.IsReadOnly = false;
				colvarNSubWithheld.DefaultSetting = @"((0))";
				colvarNSubWithheld.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubWithheld);

				TableSchema.TableColumn colvarNGoodWaivedActivations = new TableSchema.TableColumn(schema);
				colvarNGoodWaivedActivations.ColumnName = "NGoodWaivedActivations";
				colvarNGoodWaivedActivations.DataType = DbType.Int32;
				colvarNGoodWaivedActivations.MaxLength = 0;
				colvarNGoodWaivedActivations.AutoIncrement = false;
				colvarNGoodWaivedActivations.IsNullable = false;
				colvarNGoodWaivedActivations.IsPrimaryKey = false;
				colvarNGoodWaivedActivations.IsForeignKey = false;
				colvarNGoodWaivedActivations.IsReadOnly = false;
				colvarNGoodWaivedActivations.DefaultSetting = @"((0))";
				colvarNGoodWaivedActivations.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodWaivedActivations);

				TableSchema.TableColumn colvarNGoodManualBill = new TableSchema.TableColumn(schema);
				colvarNGoodManualBill.ColumnName = "NGoodManualBill";
				colvarNGoodManualBill.DataType = DbType.Int32;
				colvarNGoodManualBill.MaxLength = 0;
				colvarNGoodManualBill.AutoIncrement = false;
				colvarNGoodManualBill.IsNullable = false;
				colvarNGoodManualBill.IsPrimaryKey = false;
				colvarNGoodManualBill.IsForeignKey = false;
				colvarNGoodManualBill.IsReadOnly = false;
				colvarNGoodManualBill.DefaultSetting = @"((0))";
				colvarNGoodManualBill.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodManualBill);

				TableSchema.TableColumn colvarNGoodMissingInvoiceFee = new TableSchema.TableColumn(schema);
				colvarNGoodMissingInvoiceFee.ColumnName = "NGoodMissingInvoiceFee";
				colvarNGoodMissingInvoiceFee.DataType = DbType.Int32;
				colvarNGoodMissingInvoiceFee.MaxLength = 0;
				colvarNGoodMissingInvoiceFee.AutoIncrement = false;
				colvarNGoodMissingInvoiceFee.IsNullable = false;
				colvarNGoodMissingInvoiceFee.IsPrimaryKey = false;
				colvarNGoodMissingInvoiceFee.IsForeignKey = false;
				colvarNGoodMissingInvoiceFee.IsReadOnly = false;
				colvarNGoodMissingInvoiceFee.DefaultSetting = @"((0))";
				colvarNGoodMissingInvoiceFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodMissingInvoiceFee);

				TableSchema.TableColumn colvarNGoodExtendedContracts = new TableSchema.TableColumn(schema);
				colvarNGoodExtendedContracts.ColumnName = "NGoodExtendedContracts";
				colvarNGoodExtendedContracts.DataType = DbType.Int32;
				colvarNGoodExtendedContracts.MaxLength = 0;
				colvarNGoodExtendedContracts.AutoIncrement = false;
				colvarNGoodExtendedContracts.IsNullable = false;
				colvarNGoodExtendedContracts.IsPrimaryKey = false;
				colvarNGoodExtendedContracts.IsForeignKey = false;
				colvarNGoodExtendedContracts.IsReadOnly = false;
				colvarNGoodExtendedContracts.DefaultSetting = @"((0))";
				colvarNGoodExtendedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodExtendedContracts);

				TableSchema.TableColumn colvarNGoodShortenedContracts = new TableSchema.TableColumn(schema);
				colvarNGoodShortenedContracts.ColumnName = "NGoodShortenedContracts";
				colvarNGoodShortenedContracts.DataType = DbType.Int32;
				colvarNGoodShortenedContracts.MaxLength = 0;
				colvarNGoodShortenedContracts.AutoIncrement = false;
				colvarNGoodShortenedContracts.IsNullable = false;
				colvarNGoodShortenedContracts.IsPrimaryKey = false;
				colvarNGoodShortenedContracts.IsForeignKey = false;
				colvarNGoodShortenedContracts.IsReadOnly = false;
				colvarNGoodShortenedContracts.DefaultSetting = @"((0))";
				colvarNGoodShortenedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodShortenedContracts);

				TableSchema.TableColumn colvarNGoodDigitalAccounts = new TableSchema.TableColumn(schema);
				colvarNGoodDigitalAccounts.ColumnName = "NGoodDigitalAccounts";
				colvarNGoodDigitalAccounts.DataType = DbType.Int32;
				colvarNGoodDigitalAccounts.MaxLength = 0;
				colvarNGoodDigitalAccounts.AutoIncrement = false;
				colvarNGoodDigitalAccounts.IsNullable = false;
				colvarNGoodDigitalAccounts.IsPrimaryKey = false;
				colvarNGoodDigitalAccounts.IsForeignKey = false;
				colvarNGoodDigitalAccounts.IsReadOnly = false;
				colvarNGoodDigitalAccounts.DefaultSetting = @"((0))";
				colvarNGoodDigitalAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodDigitalAccounts);

				TableSchema.TableColumn colvarNGoodCommercial = new TableSchema.TableColumn(schema);
				colvarNGoodCommercial.ColumnName = "NGoodCommercial";
				colvarNGoodCommercial.DataType = DbType.Int32;
				colvarNGoodCommercial.MaxLength = 0;
				colvarNGoodCommercial.AutoIncrement = false;
				colvarNGoodCommercial.IsNullable = false;
				colvarNGoodCommercial.IsPrimaryKey = false;
				colvarNGoodCommercial.IsForeignKey = false;
				colvarNGoodCommercial.IsReadOnly = false;
				colvarNGoodCommercial.DefaultSetting = @"((0))";
				colvarNGoodCommercial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodCommercial);

				TableSchema.TableColumn colvarNRaisedRMROneDollar = new TableSchema.TableColumn(schema);
				colvarNRaisedRMROneDollar.ColumnName = "NRaisedRMROneDollar";
				colvarNRaisedRMROneDollar.DataType = DbType.Int32;
				colvarNRaisedRMROneDollar.MaxLength = 0;
				colvarNRaisedRMROneDollar.AutoIncrement = false;
				colvarNRaisedRMROneDollar.IsNullable = false;
				colvarNRaisedRMROneDollar.IsPrimaryKey = false;
				colvarNRaisedRMROneDollar.IsForeignKey = false;
				colvarNRaisedRMROneDollar.IsReadOnly = false;
				colvarNRaisedRMROneDollar.DefaultSetting = @"((0))";
				colvarNRaisedRMROneDollar.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNRaisedRMROneDollar);

				TableSchema.TableColumn colvarNRaisedRMRTwoDollars = new TableSchema.TableColumn(schema);
				colvarNRaisedRMRTwoDollars.ColumnName = "NRaisedRMRTwoDollars";
				colvarNRaisedRMRTwoDollars.DataType = DbType.Int32;
				colvarNRaisedRMRTwoDollars.MaxLength = 0;
				colvarNRaisedRMRTwoDollars.AutoIncrement = false;
				colvarNRaisedRMRTwoDollars.IsNullable = false;
				colvarNRaisedRMRTwoDollars.IsPrimaryKey = false;
				colvarNRaisedRMRTwoDollars.IsForeignKey = false;
				colvarNRaisedRMRTwoDollars.IsReadOnly = false;
				colvarNRaisedRMRTwoDollars.DefaultSetting = @"((0))";
				colvarNRaisedRMRTwoDollars.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNRaisedRMRTwoDollars);

				TableSchema.TableColumn colvarNRaisedRMRThreeDollars = new TableSchema.TableColumn(schema);
				colvarNRaisedRMRThreeDollars.ColumnName = "NRaisedRMRThreeDollars";
				colvarNRaisedRMRThreeDollars.DataType = DbType.Int32;
				colvarNRaisedRMRThreeDollars.MaxLength = 0;
				colvarNRaisedRMRThreeDollars.AutoIncrement = false;
				colvarNRaisedRMRThreeDollars.IsNullable = false;
				colvarNRaisedRMRThreeDollars.IsPrimaryKey = false;
				colvarNRaisedRMRThreeDollars.IsForeignKey = false;
				colvarNRaisedRMRThreeDollars.IsReadOnly = false;
				colvarNRaisedRMRThreeDollars.DefaultSetting = @"((0))";
				colvarNRaisedRMRThreeDollars.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNRaisedRMRThreeDollars);

				TableSchema.TableColumn colvarNGoodSaves = new TableSchema.TableColumn(schema);
				colvarNGoodSaves.ColumnName = "NGoodSaves";
				colvarNGoodSaves.DataType = DbType.Int32;
				colvarNGoodSaves.MaxLength = 0;
				colvarNGoodSaves.AutoIncrement = false;
				colvarNGoodSaves.IsNullable = false;
				colvarNGoodSaves.IsPrimaryKey = false;
				colvarNGoodSaves.IsForeignKey = false;
				colvarNGoodSaves.IsReadOnly = false;
				colvarNGoodSaves.DefaultSetting = @"((0))";
				colvarNGoodSaves.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodSaves);

				TableSchema.TableColumn colvarTotalPointBank = new TableSchema.TableColumn(schema);
				colvarTotalPointBank.ColumnName = "TotalPointBank";
				colvarTotalPointBank.DataType = DbType.Double;
				colvarTotalPointBank.MaxLength = 0;
				colvarTotalPointBank.AutoIncrement = false;
				colvarTotalPointBank.IsNullable = false;
				colvarTotalPointBank.IsPrimaryKey = false;
				colvarTotalPointBank.IsForeignKey = false;
				colvarTotalPointBank.IsReadOnly = false;
				colvarTotalPointBank.DefaultSetting = @"((0))";
				colvarTotalPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPointBank);

				TableSchema.TableColumn colvarFinalPointBank = new TableSchema.TableColumn(schema);
				colvarFinalPointBank.ColumnName = "FinalPointBank";
				colvarFinalPointBank.DataType = DbType.Double;
				colvarFinalPointBank.MaxLength = 0;
				colvarFinalPointBank.AutoIncrement = false;
				colvarFinalPointBank.IsNullable = false;
				colvarFinalPointBank.IsPrimaryKey = false;
				colvarFinalPointBank.IsForeignKey = false;
				colvarFinalPointBank.IsReadOnly = false;
				colvarFinalPointBank.DefaultSetting = @"((0))";
				colvarFinalPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFinalPointBank);

				TableSchema.TableColumn colvarAccountPayRate = new TableSchema.TableColumn(schema);
				colvarAccountPayRate.ColumnName = "AccountPayRate";
				colvarAccountPayRate.DataType = DbType.Currency;
				colvarAccountPayRate.MaxLength = 0;
				colvarAccountPayRate.AutoIncrement = false;
				colvarAccountPayRate.IsNullable = false;
				colvarAccountPayRate.IsPrimaryKey = false;
				colvarAccountPayRate.IsForeignKey = false;
				colvarAccountPayRate.IsReadOnly = false;
				colvarAccountPayRate.DefaultSetting = @"((0))";
				colvarAccountPayRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountPayRate);

				TableSchema.TableColumn colvarSubAccountPayRate = new TableSchema.TableColumn(schema);
				colvarSubAccountPayRate.ColumnName = "SubAccountPayRate";
				colvarSubAccountPayRate.DataType = DbType.Currency;
				colvarSubAccountPayRate.MaxLength = 0;
				colvarSubAccountPayRate.AutoIncrement = false;
				colvarSubAccountPayRate.IsNullable = false;
				colvarSubAccountPayRate.IsPrimaryKey = false;
				colvarSubAccountPayRate.IsForeignKey = false;
				colvarSubAccountPayRate.IsReadOnly = false;
				colvarSubAccountPayRate.DefaultSetting = @"((0))";
				colvarSubAccountPayRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubAccountPayRate);

				TableSchema.TableColumn colvarSigningBonus = new TableSchema.TableColumn(schema);
				colvarSigningBonus.ColumnName = "SigningBonus";
				colvarSigningBonus.DataType = DbType.Currency;
				colvarSigningBonus.MaxLength = 0;
				colvarSigningBonus.AutoIncrement = false;
				colvarSigningBonus.IsNullable = false;
				colvarSigningBonus.IsPrimaryKey = false;
				colvarSigningBonus.IsForeignKey = false;
				colvarSigningBonus.IsReadOnly = false;
				colvarSigningBonus.DefaultSetting = @"((0))";
				colvarSigningBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSigningBonus);

				TableSchema.TableColumn colvarCashBonus = new TableSchema.TableColumn(schema);
				colvarCashBonus.ColumnName = "CashBonus";
				colvarCashBonus.DataType = DbType.Currency;
				colvarCashBonus.MaxLength = 0;
				colvarCashBonus.AutoIncrement = false;
				colvarCashBonus.IsNullable = false;
				colvarCashBonus.IsPrimaryKey = false;
				colvarCashBonus.IsForeignKey = false;
				colvarCashBonus.IsReadOnly = false;
				colvarCashBonus.DefaultSetting = @"((0))";
				colvarCashBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCashBonus);

				TableSchema.TableColumn colvarRecruitingBonus = new TableSchema.TableColumn(schema);
				colvarRecruitingBonus.ColumnName = "RecruitingBonus";
				colvarRecruitingBonus.DataType = DbType.Currency;
				colvarRecruitingBonus.MaxLength = 0;
				colvarRecruitingBonus.AutoIncrement = false;
				colvarRecruitingBonus.IsNullable = false;
				colvarRecruitingBonus.IsPrimaryKey = false;
				colvarRecruitingBonus.IsForeignKey = false;
				colvarRecruitingBonus.IsReadOnly = false;
				colvarRecruitingBonus.DefaultSetting = @"((0))";
				colvarRecruitingBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitingBonus);

				TableSchema.TableColumn colvarRentBonus = new TableSchema.TableColumn(schema);
				colvarRentBonus.ColumnName = "RentBonus";
				colvarRentBonus.DataType = DbType.Currency;
				colvarRentBonus.MaxLength = 0;
				colvarRentBonus.AutoIncrement = false;
				colvarRentBonus.IsNullable = false;
				colvarRentBonus.IsPrimaryKey = false;
				colvarRentBonus.IsForeignKey = false;
				colvarRentBonus.IsReadOnly = false;
				colvarRentBonus.DefaultSetting = @"((0))";
				colvarRentBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentBonus);

				TableSchema.TableColumn colvarRaisedRMRBonus = new TableSchema.TableColumn(schema);
				colvarRaisedRMRBonus.ColumnName = "RaisedRMRBonus";
				colvarRaisedRMRBonus.DataType = DbType.Currency;
				colvarRaisedRMRBonus.MaxLength = 0;
				colvarRaisedRMRBonus.AutoIncrement = false;
				colvarRaisedRMRBonus.IsNullable = false;
				colvarRaisedRMRBonus.IsPrimaryKey = false;
				colvarRaisedRMRBonus.IsForeignKey = false;
				colvarRaisedRMRBonus.IsReadOnly = false;
				colvarRaisedRMRBonus.DefaultSetting = @"((0))";
				colvarRaisedRMRBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRaisedRMRBonus);

				TableSchema.TableColumn colvarExtendedContractBonus = new TableSchema.TableColumn(schema);
				colvarExtendedContractBonus.ColumnName = "ExtendedContractBonus";
				colvarExtendedContractBonus.DataType = DbType.Currency;
				colvarExtendedContractBonus.MaxLength = 0;
				colvarExtendedContractBonus.AutoIncrement = false;
				colvarExtendedContractBonus.IsNullable = false;
				colvarExtendedContractBonus.IsPrimaryKey = false;
				colvarExtendedContractBonus.IsForeignKey = false;
				colvarExtendedContractBonus.IsReadOnly = false;
				colvarExtendedContractBonus.DefaultSetting = @"((0))";
				colvarExtendedContractBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtendedContractBonus);

				TableSchema.TableColumn colvarTravelMoney = new TableSchema.TableColumn(schema);
				colvarTravelMoney.ColumnName = "TravelMoney";
				colvarTravelMoney.DataType = DbType.Currency;
				colvarTravelMoney.MaxLength = 0;
				colvarTravelMoney.AutoIncrement = false;
				colvarTravelMoney.IsNullable = false;
				colvarTravelMoney.IsPrimaryKey = false;
				colvarTravelMoney.IsForeignKey = false;
				colvarTravelMoney.IsReadOnly = false;
				colvarTravelMoney.DefaultSetting = @"((0))";
				colvarTravelMoney.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTravelMoney);

				TableSchema.TableColumn colvarTravelMoneyIsBonus = new TableSchema.TableColumn(schema);
				colvarTravelMoneyIsBonus.ColumnName = "TravelMoneyIsBonus";
				colvarTravelMoneyIsBonus.DataType = DbType.Boolean;
				colvarTravelMoneyIsBonus.MaxLength = 0;
				colvarTravelMoneyIsBonus.AutoIncrement = false;
				colvarTravelMoneyIsBonus.IsNullable = false;
				colvarTravelMoneyIsBonus.IsPrimaryKey = false;
				colvarTravelMoneyIsBonus.IsForeignKey = false;
				colvarTravelMoneyIsBonus.IsReadOnly = false;
				colvarTravelMoneyIsBonus.DefaultSetting = @"((0))";
				colvarTravelMoneyIsBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTravelMoneyIsBonus);

				TableSchema.TableColumn colvarNGood2008 = new TableSchema.TableColumn(schema);
				colvarNGood2008.ColumnName = "NGood2008";
				colvarNGood2008.DataType = DbType.Int32;
				colvarNGood2008.MaxLength = 0;
				colvarNGood2008.AutoIncrement = false;
				colvarNGood2008.IsNullable = false;
				colvarNGood2008.IsPrimaryKey = false;
				colvarNGood2008.IsForeignKey = false;
				colvarNGood2008.IsReadOnly = false;
				colvarNGood2008.DefaultSetting = @"((0))";
				colvarNGood2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGood2008);

				TableSchema.TableColumn colvarNSub2008 = new TableSchema.TableColumn(schema);
				colvarNSub2008.ColumnName = "NSub2008";
				colvarNSub2008.DataType = DbType.Int32;
				colvarNSub2008.MaxLength = 0;
				colvarNSub2008.AutoIncrement = false;
				colvarNSub2008.IsNullable = false;
				colvarNSub2008.IsPrimaryKey = false;
				colvarNSub2008.IsForeignKey = false;
				colvarNSub2008.IsReadOnly = false;
				colvarNSub2008.DefaultSetting = @"((0))";
				colvarNSub2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSub2008);

				TableSchema.TableColumn colvarNCancels2008 = new TableSchema.TableColumn(schema);
				colvarNCancels2008.ColumnName = "NCancels2008";
				colvarNCancels2008.DataType = DbType.Int32;
				colvarNCancels2008.MaxLength = 0;
				colvarNCancels2008.AutoIncrement = false;
				colvarNCancels2008.IsNullable = false;
				colvarNCancels2008.IsPrimaryKey = false;
				colvarNCancels2008.IsForeignKey = false;
				colvarNCancels2008.IsReadOnly = false;
				colvarNCancels2008.DefaultSetting = @"((0))";
				colvarNCancels2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNCancels2008);

				TableSchema.TableColumn colvarNQualifyingAccounts2008 = new TableSchema.TableColumn(schema);
				colvarNQualifyingAccounts2008.ColumnName = "NQualifyingAccounts2008";
				colvarNQualifyingAccounts2008.DataType = DbType.Int32;
				colvarNQualifyingAccounts2008.MaxLength = 0;
				colvarNQualifyingAccounts2008.AutoIncrement = false;
				colvarNQualifyingAccounts2008.IsNullable = false;
				colvarNQualifyingAccounts2008.IsPrimaryKey = false;
				colvarNQualifyingAccounts2008.IsForeignKey = false;
				colvarNQualifyingAccounts2008.IsReadOnly = false;
				colvarNQualifyingAccounts2008.DefaultSetting = @"((0))";
				colvarNQualifyingAccounts2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNQualifyingAccounts2008);

				TableSchema.TableColumn colvarOfficeAverage2008 = new TableSchema.TableColumn(schema);
				colvarOfficeAverage2008.ColumnName = "OfficeAverage2008";
				colvarOfficeAverage2008.DataType = DbType.Int32;
				colvarOfficeAverage2008.MaxLength = 0;
				colvarOfficeAverage2008.AutoIncrement = false;
				colvarOfficeAverage2008.IsNullable = false;
				colvarOfficeAverage2008.IsPrimaryKey = false;
				colvarOfficeAverage2008.IsForeignKey = false;
				colvarOfficeAverage2008.IsReadOnly = false;
				colvarOfficeAverage2008.DefaultSetting = @"((0))";
				colvarOfficeAverage2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeAverage2008);

				TableSchema.TableColumn colvarNQualifyingWithheld2008 = new TableSchema.TableColumn(schema);
				colvarNQualifyingWithheld2008.ColumnName = "NQualifyingWithheld2008";
				colvarNQualifyingWithheld2008.DataType = DbType.Int32;
				colvarNQualifyingWithheld2008.MaxLength = 0;
				colvarNQualifyingWithheld2008.AutoIncrement = false;
				colvarNQualifyingWithheld2008.IsNullable = false;
				colvarNQualifyingWithheld2008.IsPrimaryKey = false;
				colvarNQualifyingWithheld2008.IsForeignKey = false;
				colvarNQualifyingWithheld2008.IsReadOnly = false;
				colvarNQualifyingWithheld2008.DefaultSetting = @"((0))";
				colvarNQualifyingWithheld2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNQualifyingWithheld2008);

				TableSchema.TableColumn colvarOfficeAverageWithheld2008 = new TableSchema.TableColumn(schema);
				colvarOfficeAverageWithheld2008.ColumnName = "OfficeAverageWithheld2008";
				colvarOfficeAverageWithheld2008.DataType = DbType.Int32;
				colvarOfficeAverageWithheld2008.MaxLength = 0;
				colvarOfficeAverageWithheld2008.AutoIncrement = false;
				colvarOfficeAverageWithheld2008.IsNullable = false;
				colvarOfficeAverageWithheld2008.IsPrimaryKey = false;
				colvarOfficeAverageWithheld2008.IsForeignKey = false;
				colvarOfficeAverageWithheld2008.IsReadOnly = false;
				colvarOfficeAverageWithheld2008.DefaultSetting = @"((0))";
				colvarOfficeAverageWithheld2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeAverageWithheld2008);

				TableSchema.TableColumn colvarOverrideRate2008 = new TableSchema.TableColumn(schema);
				colvarOverrideRate2008.ColumnName = "OverrideRate2008";
				colvarOverrideRate2008.DataType = DbType.Currency;
				colvarOverrideRate2008.MaxLength = 0;
				colvarOverrideRate2008.AutoIncrement = false;
				colvarOverrideRate2008.IsNullable = false;
				colvarOverrideRate2008.IsPrimaryKey = false;
				colvarOverrideRate2008.IsForeignKey = false;
				colvarOverrideRate2008.IsReadOnly = false;
				colvarOverrideRate2008.DefaultSetting = @"((0))";
				colvarOverrideRate2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOverrideRate2008);

				TableSchema.TableColumn colvarNQualifyingAccounts2009 = new TableSchema.TableColumn(schema);
				colvarNQualifyingAccounts2009.ColumnName = "NQualifyingAccounts2009";
				colvarNQualifyingAccounts2009.DataType = DbType.Int32;
				colvarNQualifyingAccounts2009.MaxLength = 0;
				colvarNQualifyingAccounts2009.AutoIncrement = false;
				colvarNQualifyingAccounts2009.IsNullable = false;
				colvarNQualifyingAccounts2009.IsPrimaryKey = false;
				colvarNQualifyingAccounts2009.IsForeignKey = false;
				colvarNQualifyingAccounts2009.IsReadOnly = false;
				colvarNQualifyingAccounts2009.DefaultSetting = @"((0))";
				colvarNQualifyingAccounts2009.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNQualifyingAccounts2009);

				TableSchema.TableColumn colvarNQualifyingWithheld2009 = new TableSchema.TableColumn(schema);
				colvarNQualifyingWithheld2009.ColumnName = "NQualifyingWithheld2009";
				colvarNQualifyingWithheld2009.DataType = DbType.Int32;
				colvarNQualifyingWithheld2009.MaxLength = 0;
				colvarNQualifyingWithheld2009.AutoIncrement = false;
				colvarNQualifyingWithheld2009.IsNullable = false;
				colvarNQualifyingWithheld2009.IsPrimaryKey = false;
				colvarNQualifyingWithheld2009.IsForeignKey = false;
				colvarNQualifyingWithheld2009.IsReadOnly = false;
				colvarNQualifyingWithheld2009.DefaultSetting = @"((0))";
				colvarNQualifyingWithheld2009.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNQualifyingWithheld2009);

				TableSchema.TableColumn colvarNOffices2009 = new TableSchema.TableColumn(schema);
				colvarNOffices2009.ColumnName = "NOffices2009";
				colvarNOffices2009.DataType = DbType.Int32;
				colvarNOffices2009.MaxLength = 0;
				colvarNOffices2009.AutoIncrement = false;
				colvarNOffices2009.IsNullable = false;
				colvarNOffices2009.IsPrimaryKey = false;
				colvarNOffices2009.IsForeignKey = false;
				colvarNOffices2009.IsReadOnly = false;
				colvarNOffices2009.DefaultSetting = @"((0))";
				colvarNOffices2009.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOffices2009);

				TableSchema.TableColumn colvarOverrideRate2009 = new TableSchema.TableColumn(schema);
				colvarOverrideRate2009.ColumnName = "OverrideRate2009";
				colvarOverrideRate2009.DataType = DbType.Currency;
				colvarOverrideRate2009.MaxLength = 0;
				colvarOverrideRate2009.AutoIncrement = false;
				colvarOverrideRate2009.IsNullable = false;
				colvarOverrideRate2009.IsPrimaryKey = false;
				colvarOverrideRate2009.IsForeignKey = false;
				colvarOverrideRate2009.IsReadOnly = false;
				colvarOverrideRate2009.DefaultSetting = @"((0))";
				colvarOverrideRate2009.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOverrideRate2009);

				TableSchema.TableColumn colvarRegionalBonus2008 = new TableSchema.TableColumn(schema);
				colvarRegionalBonus2008.ColumnName = "RegionalBonus2008";
				colvarRegionalBonus2008.DataType = DbType.Currency;
				colvarRegionalBonus2008.MaxLength = 0;
				colvarRegionalBonus2008.AutoIncrement = false;
				colvarRegionalBonus2008.IsNullable = false;
				colvarRegionalBonus2008.IsPrimaryKey = false;
				colvarRegionalBonus2008.IsForeignKey = false;
				colvarRegionalBonus2008.IsReadOnly = false;
				colvarRegionalBonus2008.DefaultSetting = @"((0))";
				colvarRegionalBonus2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegionalBonus2008);

				TableSchema.TableColumn colvarRegionalBonus2009 = new TableSchema.TableColumn(schema);
				colvarRegionalBonus2009.ColumnName = "RegionalBonus2009";
				colvarRegionalBonus2009.DataType = DbType.Currency;
				colvarRegionalBonus2009.MaxLength = 0;
				colvarRegionalBonus2009.AutoIncrement = false;
				colvarRegionalBonus2009.IsNullable = false;
				colvarRegionalBonus2009.IsPrimaryKey = false;
				colvarRegionalBonus2009.IsForeignKey = false;
				colvarRegionalBonus2009.IsReadOnly = false;
				colvarRegionalBonus2009.DefaultSetting = @"((0))";
				colvarRegionalBonus2009.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegionalBonus2009);

				TableSchema.TableColumn colvarNActivationWaives2009 = new TableSchema.TableColumn(schema);
				colvarNActivationWaives2009.ColumnName = "NActivationWaives2009";
				colvarNActivationWaives2009.DataType = DbType.Int32;
				colvarNActivationWaives2009.MaxLength = 0;
				colvarNActivationWaives2009.AutoIncrement = false;
				colvarNActivationWaives2009.IsNullable = false;
				colvarNActivationWaives2009.IsPrimaryKey = false;
				colvarNActivationWaives2009.IsForeignKey = false;
				colvarNActivationWaives2009.IsReadOnly = false;
				colvarNActivationWaives2009.DefaultSetting = @"((0))";
				colvarNActivationWaives2009.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNActivationWaives2009);

				TableSchema.TableColumn colvarActivationWaiveRate = new TableSchema.TableColumn(schema);
				colvarActivationWaiveRate.ColumnName = "ActivationWaiveRate";
				colvarActivationWaiveRate.DataType = DbType.Currency;
				colvarActivationWaiveRate.MaxLength = 0;
				colvarActivationWaiveRate.AutoIncrement = false;
				colvarActivationWaiveRate.IsNullable = false;
				colvarActivationWaiveRate.IsPrimaryKey = false;
				colvarActivationWaiveRate.IsForeignKey = false;
				colvarActivationWaiveRate.IsReadOnly = false;
				colvarActivationWaiveRate.DefaultSetting = @"((0))";
				colvarActivationWaiveRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationWaiveRate);

				TableSchema.TableColumn colvarActivationWaiveTotal = new TableSchema.TableColumn(schema);
				colvarActivationWaiveTotal.ColumnName = "ActivationWaiveTotal";
				colvarActivationWaiveTotal.DataType = DbType.Currency;
				colvarActivationWaiveTotal.MaxLength = 0;
				colvarActivationWaiveTotal.AutoIncrement = false;
				colvarActivationWaiveTotal.IsNullable = false;
				colvarActivationWaiveTotal.IsPrimaryKey = false;
				colvarActivationWaiveTotal.IsForeignKey = false;
				colvarActivationWaiveTotal.IsReadOnly = false;
				colvarActivationWaiveTotal.DefaultSetting = @"((0))";
				colvarActivationWaiveTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationWaiveTotal);

				TableSchema.TableColumn colvarNationalBonusRate = new TableSchema.TableColumn(schema);
				colvarNationalBonusRate.ColumnName = "NationalBonusRate";
				colvarNationalBonusRate.DataType = DbType.Currency;
				colvarNationalBonusRate.MaxLength = 0;
				colvarNationalBonusRate.AutoIncrement = false;
				colvarNationalBonusRate.IsNullable = false;
				colvarNationalBonusRate.IsPrimaryKey = false;
				colvarNationalBonusRate.IsForeignKey = false;
				colvarNationalBonusRate.IsReadOnly = false;
				colvarNationalBonusRate.DefaultSetting = @"((0))";
				colvarNationalBonusRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNationalBonusRate);

				TableSchema.TableColumn colvarNationalBonusAmount = new TableSchema.TableColumn(schema);
				colvarNationalBonusAmount.ColumnName = "NationalBonusAmount";
				colvarNationalBonusAmount.DataType = DbType.Currency;
				colvarNationalBonusAmount.MaxLength = 0;
				colvarNationalBonusAmount.AutoIncrement = false;
				colvarNationalBonusAmount.IsNullable = false;
				colvarNationalBonusAmount.IsPrimaryKey = false;
				colvarNationalBonusAmount.IsForeignKey = false;
				colvarNationalBonusAmount.IsReadOnly = false;
				colvarNationalBonusAmount.DefaultSetting = @"((0))";
				colvarNationalBonusAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNationalBonusAmount);

				TableSchema.TableColumn colvarMiscTotal = new TableSchema.TableColumn(schema);
				colvarMiscTotal.ColumnName = "MiscTotal";
				colvarMiscTotal.DataType = DbType.Currency;
				colvarMiscTotal.MaxLength = 0;
				colvarMiscTotal.AutoIncrement = false;
				colvarMiscTotal.IsNullable = false;
				colvarMiscTotal.IsPrimaryKey = false;
				colvarMiscTotal.IsForeignKey = false;
				colvarMiscTotal.IsReadOnly = false;
				colvarMiscTotal.DefaultSetting = @"((0))";
				colvarMiscTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiscTotal);

				TableSchema.TableColumn colvarIncentivesPaid = new TableSchema.TableColumn(schema);
				colvarIncentivesPaid.ColumnName = "IncentivesPaid";
				colvarIncentivesPaid.DataType = DbType.Currency;
				colvarIncentivesPaid.MaxLength = 0;
				colvarIncentivesPaid.AutoIncrement = false;
				colvarIncentivesPaid.IsNullable = false;
				colvarIncentivesPaid.IsPrimaryKey = false;
				colvarIncentivesPaid.IsForeignKey = false;
				colvarIncentivesPaid.IsReadOnly = false;
				colvarIncentivesPaid.DefaultSetting = @"((0))";
				colvarIncentivesPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncentivesPaid);

				TableSchema.TableColumn colvarWaivedActivationDeduction = new TableSchema.TableColumn(schema);
				colvarWaivedActivationDeduction.ColumnName = "WaivedActivationDeduction";
				colvarWaivedActivationDeduction.DataType = DbType.Currency;
				colvarWaivedActivationDeduction.MaxLength = 0;
				colvarWaivedActivationDeduction.AutoIncrement = false;
				colvarWaivedActivationDeduction.IsNullable = false;
				colvarWaivedActivationDeduction.IsPrimaryKey = false;
				colvarWaivedActivationDeduction.IsForeignKey = false;
				colvarWaivedActivationDeduction.IsReadOnly = false;
				colvarWaivedActivationDeduction.DefaultSetting = @"((0))";
				colvarWaivedActivationDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWaivedActivationDeduction);

				TableSchema.TableColumn colvarPassCreditDeduction = new TableSchema.TableColumn(schema);
				colvarPassCreditDeduction.ColumnName = "PassCreditDeduction";
				colvarPassCreditDeduction.DataType = DbType.Currency;
				colvarPassCreditDeduction.MaxLength = 0;
				colvarPassCreditDeduction.AutoIncrement = false;
				colvarPassCreditDeduction.IsNullable = false;
				colvarPassCreditDeduction.IsPrimaryKey = false;
				colvarPassCreditDeduction.IsForeignKey = false;
				colvarPassCreditDeduction.IsReadOnly = false;
				colvarPassCreditDeduction.DefaultSetting = @"((0))";
				colvarPassCreditDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassCreditDeduction);

				TableSchema.TableColumn colvarManualBillDeduction = new TableSchema.TableColumn(schema);
				colvarManualBillDeduction.ColumnName = "ManualBillDeduction";
				colvarManualBillDeduction.DataType = DbType.Currency;
				colvarManualBillDeduction.MaxLength = 0;
				colvarManualBillDeduction.AutoIncrement = false;
				colvarManualBillDeduction.IsNullable = false;
				colvarManualBillDeduction.IsPrimaryKey = false;
				colvarManualBillDeduction.IsForeignKey = false;
				colvarManualBillDeduction.IsReadOnly = false;
				colvarManualBillDeduction.DefaultSetting = @"((0))";
				colvarManualBillDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManualBillDeduction);

				TableSchema.TableColumn colvarMissingInvoiceFeeDeduction = new TableSchema.TableColumn(schema);
				colvarMissingInvoiceFeeDeduction.ColumnName = "MissingInvoiceFeeDeduction";
				colvarMissingInvoiceFeeDeduction.DataType = DbType.Currency;
				colvarMissingInvoiceFeeDeduction.MaxLength = 0;
				colvarMissingInvoiceFeeDeduction.AutoIncrement = false;
				colvarMissingInvoiceFeeDeduction.IsNullable = false;
				colvarMissingInvoiceFeeDeduction.IsPrimaryKey = false;
				colvarMissingInvoiceFeeDeduction.IsForeignKey = false;
				colvarMissingInvoiceFeeDeduction.IsReadOnly = false;
				colvarMissingInvoiceFeeDeduction.DefaultSetting = @"((0))";
				colvarMissingInvoiceFeeDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMissingInvoiceFeeDeduction);

				TableSchema.TableColumn colvarShortenedContractDeduction = new TableSchema.TableColumn(schema);
				colvarShortenedContractDeduction.ColumnName = "ShortenedContractDeduction";
				colvarShortenedContractDeduction.DataType = DbType.Currency;
				colvarShortenedContractDeduction.MaxLength = 0;
				colvarShortenedContractDeduction.AutoIncrement = false;
				colvarShortenedContractDeduction.IsNullable = false;
				colvarShortenedContractDeduction.IsPrimaryKey = false;
				colvarShortenedContractDeduction.IsForeignKey = false;
				colvarShortenedContractDeduction.IsReadOnly = false;
				colvarShortenedContractDeduction.DefaultSetting = @"((0))";
				colvarShortenedContractDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortenedContractDeduction);

				TableSchema.TableColumn colvarLoweredRMRDeduction = new TableSchema.TableColumn(schema);
				colvarLoweredRMRDeduction.ColumnName = "LoweredRMRDeduction";
				colvarLoweredRMRDeduction.DataType = DbType.Currency;
				colvarLoweredRMRDeduction.MaxLength = 0;
				colvarLoweredRMRDeduction.AutoIncrement = false;
				colvarLoweredRMRDeduction.IsNullable = false;
				colvarLoweredRMRDeduction.IsPrimaryKey = false;
				colvarLoweredRMRDeduction.IsForeignKey = false;
				colvarLoweredRMRDeduction.IsReadOnly = false;
				colvarLoweredRMRDeduction.DefaultSetting = @"((0))";
				colvarLoweredRMRDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoweredRMRDeduction);

				TableSchema.TableColumn colvarDigitalAccountDeduction = new TableSchema.TableColumn(schema);
				colvarDigitalAccountDeduction.ColumnName = "DigitalAccountDeduction";
				colvarDigitalAccountDeduction.DataType = DbType.Currency;
				colvarDigitalAccountDeduction.MaxLength = 0;
				colvarDigitalAccountDeduction.AutoIncrement = false;
				colvarDigitalAccountDeduction.IsNullable = false;
				colvarDigitalAccountDeduction.IsPrimaryKey = false;
				colvarDigitalAccountDeduction.IsForeignKey = false;
				colvarDigitalAccountDeduction.IsReadOnly = false;
				colvarDigitalAccountDeduction.DefaultSetting = @"((0))";
				colvarDigitalAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDigitalAccountDeduction);

				TableSchema.TableColumn colvarSavedAccountDeduction = new TableSchema.TableColumn(schema);
				colvarSavedAccountDeduction.ColumnName = "SavedAccountDeduction";
				colvarSavedAccountDeduction.DataType = DbType.Currency;
				colvarSavedAccountDeduction.MaxLength = 0;
				colvarSavedAccountDeduction.AutoIncrement = false;
				colvarSavedAccountDeduction.IsNullable = false;
				colvarSavedAccountDeduction.IsPrimaryKey = false;
				colvarSavedAccountDeduction.IsForeignKey = false;
				colvarSavedAccountDeduction.IsReadOnly = false;
				colvarSavedAccountDeduction.DefaultSetting = @"((0))";
				colvarSavedAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSavedAccountDeduction);

				TableSchema.TableColumn colvarCommercialAccountDeduction = new TableSchema.TableColumn(schema);
				colvarCommercialAccountDeduction.ColumnName = "CommercialAccountDeduction";
				colvarCommercialAccountDeduction.DataType = DbType.Currency;
				colvarCommercialAccountDeduction.MaxLength = 0;
				colvarCommercialAccountDeduction.AutoIncrement = false;
				colvarCommercialAccountDeduction.IsNullable = false;
				colvarCommercialAccountDeduction.IsPrimaryKey = false;
				colvarCommercialAccountDeduction.IsForeignKey = false;
				colvarCommercialAccountDeduction.IsReadOnly = false;
				colvarCommercialAccountDeduction.DefaultSetting = @"((0))";
				colvarCommercialAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommercialAccountDeduction);

				TableSchema.TableColumn colvarPointBankDollarAmount = new TableSchema.TableColumn(schema);
				colvarPointBankDollarAmount.ColumnName = "PointBankDollarAmount";
				colvarPointBankDollarAmount.DataType = DbType.Currency;
				colvarPointBankDollarAmount.MaxLength = 0;
				colvarPointBankDollarAmount.AutoIncrement = false;
				colvarPointBankDollarAmount.IsNullable = false;
				colvarPointBankDollarAmount.IsPrimaryKey = false;
				colvarPointBankDollarAmount.IsForeignKey = false;
				colvarPointBankDollarAmount.IsReadOnly = false;
				colvarPointBankDollarAmount.DefaultSetting = @"((0))";
				colvarPointBankDollarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPointBankDollarAmount);

				TableSchema.TableColumn colvarTotalRentPaid = new TableSchema.TableColumn(schema);
				colvarTotalRentPaid.ColumnName = "TotalRentPaid";
				colvarTotalRentPaid.DataType = DbType.Currency;
				colvarTotalRentPaid.MaxLength = 0;
				colvarTotalRentPaid.AutoIncrement = false;
				colvarTotalRentPaid.IsNullable = false;
				colvarTotalRentPaid.IsPrimaryKey = false;
				colvarTotalRentPaid.IsForeignKey = false;
				colvarTotalRentPaid.IsReadOnly = false;
				colvarTotalRentPaid.DefaultSetting = @"((0))";
				colvarTotalRentPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalRentPaid);

				TableSchema.TableColumn colvarTotalPersonalCommissions = new TableSchema.TableColumn(schema);
				colvarTotalPersonalCommissions.ColumnName = "TotalPersonalCommissions";
				colvarTotalPersonalCommissions.DataType = DbType.Currency;
				colvarTotalPersonalCommissions.MaxLength = 0;
				colvarTotalPersonalCommissions.AutoIncrement = false;
				colvarTotalPersonalCommissions.IsNullable = false;
				colvarTotalPersonalCommissions.IsPrimaryKey = false;
				colvarTotalPersonalCommissions.IsForeignKey = false;
				colvarTotalPersonalCommissions.IsReadOnly = false;
				colvarTotalPersonalCommissions.DefaultSetting = @"((0))";
				colvarTotalPersonalCommissions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPersonalCommissions);

				TableSchema.TableColumn colvarTotalPersonalBonuses = new TableSchema.TableColumn(schema);
				colvarTotalPersonalBonuses.ColumnName = "TotalPersonalBonuses";
				colvarTotalPersonalBonuses.DataType = DbType.Currency;
				colvarTotalPersonalBonuses.MaxLength = 0;
				colvarTotalPersonalBonuses.AutoIncrement = false;
				colvarTotalPersonalBonuses.IsNullable = false;
				colvarTotalPersonalBonuses.IsPrimaryKey = false;
				colvarTotalPersonalBonuses.IsForeignKey = false;
				colvarTotalPersonalBonuses.IsReadOnly = false;
				colvarTotalPersonalBonuses.DefaultSetting = @"((0))";
				colvarTotalPersonalBonuses.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPersonalBonuses);

				TableSchema.TableColumn colvarTotalPersonalDeductions = new TableSchema.TableColumn(schema);
				colvarTotalPersonalDeductions.ColumnName = "TotalPersonalDeductions";
				colvarTotalPersonalDeductions.DataType = DbType.Currency;
				colvarTotalPersonalDeductions.MaxLength = 0;
				colvarTotalPersonalDeductions.AutoIncrement = false;
				colvarTotalPersonalDeductions.IsNullable = false;
				colvarTotalPersonalDeductions.IsPrimaryKey = false;
				colvarTotalPersonalDeductions.IsForeignKey = false;
				colvarTotalPersonalDeductions.IsReadOnly = false;
				colvarTotalPersonalDeductions.DefaultSetting = @"((0))";
				colvarTotalPersonalDeductions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPersonalDeductions);

				TableSchema.TableColumn colvarManagerSalary2008 = new TableSchema.TableColumn(schema);
				colvarManagerSalary2008.ColumnName = "ManagerSalary2008";
				colvarManagerSalary2008.DataType = DbType.Currency;
				colvarManagerSalary2008.MaxLength = 0;
				colvarManagerSalary2008.AutoIncrement = false;
				colvarManagerSalary2008.IsNullable = false;
				colvarManagerSalary2008.IsPrimaryKey = false;
				colvarManagerSalary2008.IsForeignKey = false;
				colvarManagerSalary2008.IsReadOnly = false;
				colvarManagerSalary2008.DefaultSetting = @"((0))";
				colvarManagerSalary2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManagerSalary2008);

				TableSchema.TableColumn colvarManagerSalary2009 = new TableSchema.TableColumn(schema);
				colvarManagerSalary2009.ColumnName = "ManagerSalary2009";
				colvarManagerSalary2009.DataType = DbType.Currency;
				colvarManagerSalary2009.MaxLength = 0;
				colvarManagerSalary2009.AutoIncrement = false;
				colvarManagerSalary2009.IsNullable = false;
				colvarManagerSalary2009.IsPrimaryKey = false;
				colvarManagerSalary2009.IsForeignKey = false;
				colvarManagerSalary2009.IsReadOnly = false;
				colvarManagerSalary2009.DefaultSetting = @"((0))";
				colvarManagerSalary2009.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManagerSalary2009);

				TableSchema.TableColumn colvarTotalEarnings2008 = new TableSchema.TableColumn(schema);
				colvarTotalEarnings2008.ColumnName = "TotalEarnings2008";
				colvarTotalEarnings2008.DataType = DbType.Currency;
				colvarTotalEarnings2008.MaxLength = 0;
				colvarTotalEarnings2008.AutoIncrement = false;
				colvarTotalEarnings2008.IsNullable = false;
				colvarTotalEarnings2008.IsPrimaryKey = false;
				colvarTotalEarnings2008.IsForeignKey = false;
				colvarTotalEarnings2008.IsReadOnly = false;
				colvarTotalEarnings2008.DefaultSetting = @"((0))";
				colvarTotalEarnings2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalEarnings2008);

				TableSchema.TableColumn colvarTotalEarnings2009 = new TableSchema.TableColumn(schema);
				colvarTotalEarnings2009.ColumnName = "TotalEarnings2009";
				colvarTotalEarnings2009.DataType = DbType.Currency;
				colvarTotalEarnings2009.MaxLength = 0;
				colvarTotalEarnings2009.AutoIncrement = false;
				colvarTotalEarnings2009.IsNullable = false;
				colvarTotalEarnings2009.IsPrimaryKey = false;
				colvarTotalEarnings2009.IsForeignKey = false;
				colvarTotalEarnings2009.IsReadOnly = false;
				colvarTotalEarnings2009.DefaultSetting = @"((0))";
				colvarTotalEarnings2009.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalEarnings2009);

				TableSchema.TableColumn colvarTotalPaid = new TableSchema.TableColumn(schema);
				colvarTotalPaid.ColumnName = "TotalPaid";
				colvarTotalPaid.DataType = DbType.Currency;
				colvarTotalPaid.MaxLength = 0;
				colvarTotalPaid.AutoIncrement = false;
				colvarTotalPaid.IsNullable = false;
				colvarTotalPaid.IsPrimaryKey = false;
				colvarTotalPaid.IsForeignKey = false;
				colvarTotalPaid.IsReadOnly = false;
				colvarTotalPaid.DefaultSetting = @"((0))";
				colvarTotalPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPaid);

				TableSchema.TableColumn colvarTotalBonuses = new TableSchema.TableColumn(schema);
				colvarTotalBonuses.ColumnName = "TotalBonuses";
				colvarTotalBonuses.DataType = DbType.Currency;
				colvarTotalBonuses.MaxLength = 0;
				colvarTotalBonuses.AutoIncrement = false;
				colvarTotalBonuses.IsNullable = false;
				colvarTotalBonuses.IsPrimaryKey = false;
				colvarTotalBonuses.IsForeignKey = false;
				colvarTotalBonuses.IsReadOnly = false;
				colvarTotalBonuses.DefaultSetting = @"((0))";
				colvarTotalBonuses.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalBonuses);

				TableSchema.TableColumn colvarTotalDeductions2008 = new TableSchema.TableColumn(schema);
				colvarTotalDeductions2008.ColumnName = "TotalDeductions2008";
				colvarTotalDeductions2008.DataType = DbType.Currency;
				colvarTotalDeductions2008.MaxLength = 0;
				colvarTotalDeductions2008.AutoIncrement = false;
				colvarTotalDeductions2008.IsNullable = false;
				colvarTotalDeductions2008.IsPrimaryKey = false;
				colvarTotalDeductions2008.IsForeignKey = false;
				colvarTotalDeductions2008.IsReadOnly = false;
				colvarTotalDeductions2008.DefaultSetting = @"((0))";
				colvarTotalDeductions2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalDeductions2008);

				TableSchema.TableColumn colvarTotalDeductions2009 = new TableSchema.TableColumn(schema);
				colvarTotalDeductions2009.ColumnName = "TotalDeductions2009";
				colvarTotalDeductions2009.DataType = DbType.Currency;
				colvarTotalDeductions2009.MaxLength = 0;
				colvarTotalDeductions2009.AutoIncrement = false;
				colvarTotalDeductions2009.IsNullable = false;
				colvarTotalDeductions2009.IsPrimaryKey = false;
				colvarTotalDeductions2009.IsForeignKey = false;
				colvarTotalDeductions2009.IsReadOnly = false;
				colvarTotalDeductions2009.DefaultSetting = @"((0))";
				colvarTotalDeductions2009.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalDeductions2009);

				TableSchema.TableColumn colvarBackendCheckAmount2008 = new TableSchema.TableColumn(schema);
				colvarBackendCheckAmount2008.ColumnName = "BackendCheckAmount2008";
				colvarBackendCheckAmount2008.DataType = DbType.Currency;
				colvarBackendCheckAmount2008.MaxLength = 0;
				colvarBackendCheckAmount2008.AutoIncrement = false;
				colvarBackendCheckAmount2008.IsNullable = false;
				colvarBackendCheckAmount2008.IsPrimaryKey = false;
				colvarBackendCheckAmount2008.IsForeignKey = false;
				colvarBackendCheckAmount2008.IsReadOnly = false;
				colvarBackendCheckAmount2008.DefaultSetting = @"((0))";
				colvarBackendCheckAmount2008.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendCheckAmount2008);

				TableSchema.TableColumn colvarBackendCheckAmount2009 = new TableSchema.TableColumn(schema);
				colvarBackendCheckAmount2009.ColumnName = "BackendCheckAmount2009";
				colvarBackendCheckAmount2009.DataType = DbType.Currency;
				colvarBackendCheckAmount2009.MaxLength = 0;
				colvarBackendCheckAmount2009.AutoIncrement = false;
				colvarBackendCheckAmount2009.IsNullable = false;
				colvarBackendCheckAmount2009.IsPrimaryKey = false;
				colvarBackendCheckAmount2009.IsForeignKey = false;
				colvarBackendCheckAmount2009.IsReadOnly = false;
				colvarBackendCheckAmount2009.DefaultSetting = @"((0))";
				colvarBackendCheckAmount2009.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendCheckAmount2009);

				TableSchema.TableColumn colvarBackendCheckAmount = new TableSchema.TableColumn(schema);
				colvarBackendCheckAmount.ColumnName = "BackendCheckAmount";
				colvarBackendCheckAmount.DataType = DbType.Currency;
				colvarBackendCheckAmount.MaxLength = 0;
				colvarBackendCheckAmount.AutoIncrement = false;
				colvarBackendCheckAmount.IsNullable = false;
				colvarBackendCheckAmount.IsPrimaryKey = false;
				colvarBackendCheckAmount.IsForeignKey = false;
				colvarBackendCheckAmount.IsReadOnly = false;
				colvarBackendCheckAmount.DefaultSetting = @"((0))";
				colvarBackendCheckAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendCheckAmount);

				TableSchema.TableColumn colvarMonthlyBonusRate = new TableSchema.TableColumn(schema);
				colvarMonthlyBonusRate.ColumnName = "MonthlyBonusRate";
				colvarMonthlyBonusRate.DataType = DbType.Currency;
				colvarMonthlyBonusRate.MaxLength = 0;
				colvarMonthlyBonusRate.AutoIncrement = false;
				colvarMonthlyBonusRate.IsNullable = false;
				colvarMonthlyBonusRate.IsPrimaryKey = false;
				colvarMonthlyBonusRate.IsForeignKey = false;
				colvarMonthlyBonusRate.IsReadOnly = false;
				colvarMonthlyBonusRate.DefaultSetting = @"((0))";
				colvarMonthlyBonusRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthlyBonusRate);

				TableSchema.TableColumn colvarEstimatedMonthlyBonus = new TableSchema.TableColumn(schema);
				colvarEstimatedMonthlyBonus.ColumnName = "EstimatedMonthlyBonus";
				colvarEstimatedMonthlyBonus.DataType = DbType.Currency;
				colvarEstimatedMonthlyBonus.MaxLength = 0;
				colvarEstimatedMonthlyBonus.AutoIncrement = false;
				colvarEstimatedMonthlyBonus.IsNullable = false;
				colvarEstimatedMonthlyBonus.IsPrimaryKey = false;
				colvarEstimatedMonthlyBonus.IsForeignKey = false;
				colvarEstimatedMonthlyBonus.IsReadOnly = false;
				colvarEstimatedMonthlyBonus.DefaultSetting = @"((0))";
				colvarEstimatedMonthlyBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimatedMonthlyBonus);

				TableSchema.TableColumn colvarEstimatedRecruitingBonus = new TableSchema.TableColumn(schema);
				colvarEstimatedRecruitingBonus.ColumnName = "EstimatedRecruitingBonus";
				colvarEstimatedRecruitingBonus.DataType = DbType.Currency;
				colvarEstimatedRecruitingBonus.MaxLength = 0;
				colvarEstimatedRecruitingBonus.AutoIncrement = false;
				colvarEstimatedRecruitingBonus.IsNullable = false;
				colvarEstimatedRecruitingBonus.IsPrimaryKey = false;
				colvarEstimatedRecruitingBonus.IsForeignKey = false;
				colvarEstimatedRecruitingBonus.IsReadOnly = false;
				colvarEstimatedRecruitingBonus.DefaultSetting = @"((0))";
				colvarEstimatedRecruitingBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimatedRecruitingBonus);

				TableSchema.TableColumn colvarEstimatedDecemberTotal = new TableSchema.TableColumn(schema);
				colvarEstimatedDecemberTotal.ColumnName = "EstimatedDecemberTotal";
				colvarEstimatedDecemberTotal.DataType = DbType.Currency;
				colvarEstimatedDecemberTotal.MaxLength = 0;
				colvarEstimatedDecemberTotal.AutoIncrement = false;
				colvarEstimatedDecemberTotal.IsNullable = false;
				colvarEstimatedDecemberTotal.IsPrimaryKey = false;
				colvarEstimatedDecemberTotal.IsForeignKey = false;
				colvarEstimatedDecemberTotal.IsReadOnly = false;
				colvarEstimatedDecemberTotal.DefaultSetting = @"((0))";
				colvarEstimatedDecemberTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimatedDecemberTotal);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((0))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_SalesRegionalBackends",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_SalesRegionalBackend LoadFrom(PR_SalesRegionalBackend item)
		{
			PR_SalesRegionalBackend result = new PR_SalesRegionalBackend();
			if (item.SalesRegionalBackendID != default(int)) {
				result.LoadByKey(item.SalesRegionalBackendID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SalesRegionalBackendID {
			get { return GetColumnValue<int>(Columns.SalesRegionalBackendID); }
			set {
				SetColumnValue(Columns.SalesRegionalBackendID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesRegionalBackendID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int PayScaleID {
			get { return GetColumnValue<int>(Columns.PayScaleID); }
			set {
				SetColumnValue(Columns.PayScaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScaleID));
			}
		}
		[DataMember]
		public int? BackendPayscaleID {
			get { return GetColumnValue<int?>(Columns.BackendPayscaleID); }
			set {
				SetColumnValue(Columns.BackendPayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPayscaleID));
			}
		}
		[DataMember]
		public int? EstimatedPayscaleID {
			get { return GetColumnValue<int?>(Columns.EstimatedPayscaleID); }
			set {
				SetColumnValue(Columns.EstimatedPayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EstimatedPayscaleID));
			}
		}
		[DataMember]
		public int? DetailFileID {
			get { return GetColumnValue<int?>(Columns.DetailFileID); }
			set {
				SetColumnValue(Columns.DetailFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DetailFileID));
			}
		}
		[DataMember]
		public int? RegionalUserID {
			get { return GetColumnValue<int?>(Columns.RegionalUserID); }
			set {
				SetColumnValue(Columns.RegionalUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalUserID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public int NGoodAccountsSold {
			get { return GetColumnValue<int>(Columns.NGoodAccountsSold); }
			set {
				SetColumnValue(Columns.NGoodAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodAccountsSold));
			}
		}
		[DataMember]
		public int NExcellentAccountsSold {
			get { return GetColumnValue<int>(Columns.NExcellentAccountsSold); }
			set {
				SetColumnValue(Columns.NExcellentAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NExcellentAccountsSold));
			}
		}
		[DataMember]
		public int NPassAccountsSold {
			get { return GetColumnValue<int>(Columns.NPassAccountsSold); }
			set {
				SetColumnValue(Columns.NPassAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPassAccountsSold));
			}
		}
		[DataMember]
		public int NSubAccountsSold {
			get { return GetColumnValue<int>(Columns.NSubAccountsSold); }
			set {
				SetColumnValue(Columns.NSubAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubAccountsSold));
			}
		}
		[DataMember]
		public int NBadAccountsSold {
			get { return GetColumnValue<int>(Columns.NBadAccountsSold); }
			set {
				SetColumnValue(Columns.NBadAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NBadAccountsSold));
			}
		}
		[DataMember]
		public int NGoodCancels {
			get { return GetColumnValue<int>(Columns.NGoodCancels); }
			set {
				SetColumnValue(Columns.NGoodCancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodCancels));
			}
		}
		[DataMember]
		public int NGoodWithHolds {
			get { return GetColumnValue<int>(Columns.NGoodWithHolds); }
			set {
				SetColumnValue(Columns.NGoodWithHolds, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodWithHolds));
			}
		}
		[DataMember]
		public int NGoodDelinquent {
			get { return GetColumnValue<int>(Columns.NGoodDelinquent); }
			set {
				SetColumnValue(Columns.NGoodDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodDelinquent));
			}
		}
		[DataMember]
		public int NGoodFriendsAndFamily {
			get { return GetColumnValue<int>(Columns.NGoodFriendsAndFamily); }
			set {
				SetColumnValue(Columns.NGoodFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodFriendsAndFamily));
			}
		}
		[DataMember]
		public int NSubCancels {
			get { return GetColumnValue<int>(Columns.NSubCancels); }
			set {
				SetColumnValue(Columns.NSubCancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubCancels));
			}
		}
		[DataMember]
		public int NSubWithHolds {
			get { return GetColumnValue<int>(Columns.NSubWithHolds); }
			set {
				SetColumnValue(Columns.NSubWithHolds, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubWithHolds));
			}
		}
		[DataMember]
		public int NSubMissingActivationOrAutoPay {
			get { return GetColumnValue<int>(Columns.NSubMissingActivationOrAutoPay); }
			set {
				SetColumnValue(Columns.NSubMissingActivationOrAutoPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubMissingActivationOrAutoPay));
			}
		}
		[DataMember]
		public int NSubDelinquent {
			get { return GetColumnValue<int>(Columns.NSubDelinquent); }
			set {
				SetColumnValue(Columns.NSubDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubDelinquent));
			}
		}
		[DataMember]
		public int NSubFriendsAndFamily {
			get { return GetColumnValue<int>(Columns.NSubFriendsAndFamily); }
			set {
				SetColumnValue(Columns.NSubFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubFriendsAndFamily));
			}
		}
		[DataMember]
		public int NetGoodAccounts {
			get { return GetColumnValue<int>(Columns.NetGoodAccounts); }
			set {
				SetColumnValue(Columns.NetGoodAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetGoodAccounts));
			}
		}
		[DataMember]
		public int NetSubAccounts {
			get { return GetColumnValue<int>(Columns.NetSubAccounts); }
			set {
				SetColumnValue(Columns.NetSubAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetSubAccounts));
			}
		}
		[DataMember]
		public int NetPassAccounts {
			get { return GetColumnValue<int>(Columns.NetPassAccounts); }
			set {
				SetColumnValue(Columns.NetPassAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetPassAccounts));
			}
		}
		[DataMember]
		public int NGoodWithheld {
			get { return GetColumnValue<int>(Columns.NGoodWithheld); }
			set {
				SetColumnValue(Columns.NGoodWithheld, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodWithheld));
			}
		}
		[DataMember]
		public int NSubWithheld {
			get { return GetColumnValue<int>(Columns.NSubWithheld); }
			set {
				SetColumnValue(Columns.NSubWithheld, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubWithheld));
			}
		}
		[DataMember]
		public int NGoodWaivedActivations {
			get { return GetColumnValue<int>(Columns.NGoodWaivedActivations); }
			set {
				SetColumnValue(Columns.NGoodWaivedActivations, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodWaivedActivations));
			}
		}
		[DataMember]
		public int NGoodManualBill {
			get { return GetColumnValue<int>(Columns.NGoodManualBill); }
			set {
				SetColumnValue(Columns.NGoodManualBill, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodManualBill));
			}
		}
		[DataMember]
		public int NGoodMissingInvoiceFee {
			get { return GetColumnValue<int>(Columns.NGoodMissingInvoiceFee); }
			set {
				SetColumnValue(Columns.NGoodMissingInvoiceFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodMissingInvoiceFee));
			}
		}
		[DataMember]
		public int NGoodExtendedContracts {
			get { return GetColumnValue<int>(Columns.NGoodExtendedContracts); }
			set {
				SetColumnValue(Columns.NGoodExtendedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodExtendedContracts));
			}
		}
		[DataMember]
		public int NGoodShortenedContracts {
			get { return GetColumnValue<int>(Columns.NGoodShortenedContracts); }
			set {
				SetColumnValue(Columns.NGoodShortenedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodShortenedContracts));
			}
		}
		[DataMember]
		public int NGoodDigitalAccounts {
			get { return GetColumnValue<int>(Columns.NGoodDigitalAccounts); }
			set {
				SetColumnValue(Columns.NGoodDigitalAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodDigitalAccounts));
			}
		}
		[DataMember]
		public int NGoodCommercial {
			get { return GetColumnValue<int>(Columns.NGoodCommercial); }
			set {
				SetColumnValue(Columns.NGoodCommercial, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodCommercial));
			}
		}
		[DataMember]
		public int NRaisedRMROneDollar {
			get { return GetColumnValue<int>(Columns.NRaisedRMROneDollar); }
			set {
				SetColumnValue(Columns.NRaisedRMROneDollar, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NRaisedRMROneDollar));
			}
		}
		[DataMember]
		public int NRaisedRMRTwoDollars {
			get { return GetColumnValue<int>(Columns.NRaisedRMRTwoDollars); }
			set {
				SetColumnValue(Columns.NRaisedRMRTwoDollars, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NRaisedRMRTwoDollars));
			}
		}
		[DataMember]
		public int NRaisedRMRThreeDollars {
			get { return GetColumnValue<int>(Columns.NRaisedRMRThreeDollars); }
			set {
				SetColumnValue(Columns.NRaisedRMRThreeDollars, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NRaisedRMRThreeDollars));
			}
		}
		[DataMember]
		public int NGoodSaves {
			get { return GetColumnValue<int>(Columns.NGoodSaves); }
			set {
				SetColumnValue(Columns.NGoodSaves, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodSaves));
			}
		}
		[DataMember]
		public double TotalPointBank {
			get { return GetColumnValue<double>(Columns.TotalPointBank); }
			set {
				SetColumnValue(Columns.TotalPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPointBank));
			}
		}
		[DataMember]
		public double FinalPointBank {
			get { return GetColumnValue<double>(Columns.FinalPointBank); }
			set {
				SetColumnValue(Columns.FinalPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FinalPointBank));
			}
		}
		[DataMember]
		public decimal AccountPayRate {
			get { return GetColumnValue<decimal>(Columns.AccountPayRate); }
			set {
				SetColumnValue(Columns.AccountPayRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountPayRate));
			}
		}
		[DataMember]
		public decimal SubAccountPayRate {
			get { return GetColumnValue<decimal>(Columns.SubAccountPayRate); }
			set {
				SetColumnValue(Columns.SubAccountPayRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubAccountPayRate));
			}
		}
		[DataMember]
		public decimal SigningBonus {
			get { return GetColumnValue<decimal>(Columns.SigningBonus); }
			set {
				SetColumnValue(Columns.SigningBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SigningBonus));
			}
		}
		[DataMember]
		public decimal CashBonus {
			get { return GetColumnValue<decimal>(Columns.CashBonus); }
			set {
				SetColumnValue(Columns.CashBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CashBonus));
			}
		}
		[DataMember]
		public decimal RecruitingBonus {
			get { return GetColumnValue<decimal>(Columns.RecruitingBonus); }
			set {
				SetColumnValue(Columns.RecruitingBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitingBonus));
			}
		}
		[DataMember]
		public decimal RentBonus {
			get { return GetColumnValue<decimal>(Columns.RentBonus); }
			set {
				SetColumnValue(Columns.RentBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentBonus));
			}
		}
		[DataMember]
		public decimal RaisedRMRBonus {
			get { return GetColumnValue<decimal>(Columns.RaisedRMRBonus); }
			set {
				SetColumnValue(Columns.RaisedRMRBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RaisedRMRBonus));
			}
		}
		[DataMember]
		public decimal ExtendedContractBonus {
			get { return GetColumnValue<decimal>(Columns.ExtendedContractBonus); }
			set {
				SetColumnValue(Columns.ExtendedContractBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExtendedContractBonus));
			}
		}
		[DataMember]
		public decimal TravelMoney {
			get { return GetColumnValue<decimal>(Columns.TravelMoney); }
			set {
				SetColumnValue(Columns.TravelMoney, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TravelMoney));
			}
		}
		[DataMember]
		public bool TravelMoneyIsBonus {
			get { return GetColumnValue<bool>(Columns.TravelMoneyIsBonus); }
			set {
				SetColumnValue(Columns.TravelMoneyIsBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TravelMoneyIsBonus));
			}
		}
		[DataMember]
		public int NGood2008 {
			get { return GetColumnValue<int>(Columns.NGood2008); }
			set {
				SetColumnValue(Columns.NGood2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGood2008));
			}
		}
		[DataMember]
		public int NSub2008 {
			get { return GetColumnValue<int>(Columns.NSub2008); }
			set {
				SetColumnValue(Columns.NSub2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSub2008));
			}
		}
		[DataMember]
		public int NCancels2008 {
			get { return GetColumnValue<int>(Columns.NCancels2008); }
			set {
				SetColumnValue(Columns.NCancels2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NCancels2008));
			}
		}
		[DataMember]
		public int NQualifyingAccounts2008 {
			get { return GetColumnValue<int>(Columns.NQualifyingAccounts2008); }
			set {
				SetColumnValue(Columns.NQualifyingAccounts2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NQualifyingAccounts2008));
			}
		}
		[DataMember]
		public int OfficeAverage2008 {
			get { return GetColumnValue<int>(Columns.OfficeAverage2008); }
			set {
				SetColumnValue(Columns.OfficeAverage2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeAverage2008));
			}
		}
		[DataMember]
		public int NQualifyingWithheld2008 {
			get { return GetColumnValue<int>(Columns.NQualifyingWithheld2008); }
			set {
				SetColumnValue(Columns.NQualifyingWithheld2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NQualifyingWithheld2008));
			}
		}
		[DataMember]
		public int OfficeAverageWithheld2008 {
			get { return GetColumnValue<int>(Columns.OfficeAverageWithheld2008); }
			set {
				SetColumnValue(Columns.OfficeAverageWithheld2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeAverageWithheld2008));
			}
		}
		[DataMember]
		public decimal OverrideRate2008 {
			get { return GetColumnValue<decimal>(Columns.OverrideRate2008); }
			set {
				SetColumnValue(Columns.OverrideRate2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OverrideRate2008));
			}
		}
		[DataMember]
		public int NQualifyingAccounts2009 {
			get { return GetColumnValue<int>(Columns.NQualifyingAccounts2009); }
			set {
				SetColumnValue(Columns.NQualifyingAccounts2009, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NQualifyingAccounts2009));
			}
		}
		[DataMember]
		public int NQualifyingWithheld2009 {
			get { return GetColumnValue<int>(Columns.NQualifyingWithheld2009); }
			set {
				SetColumnValue(Columns.NQualifyingWithheld2009, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NQualifyingWithheld2009));
			}
		}
		[DataMember]
		public int NOffices2009 {
			get { return GetColumnValue<int>(Columns.NOffices2009); }
			set {
				SetColumnValue(Columns.NOffices2009, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOffices2009));
			}
		}
		[DataMember]
		public decimal OverrideRate2009 {
			get { return GetColumnValue<decimal>(Columns.OverrideRate2009); }
			set {
				SetColumnValue(Columns.OverrideRate2009, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OverrideRate2009));
			}
		}
		[DataMember]
		public decimal RegionalBonus2008 {
			get { return GetColumnValue<decimal>(Columns.RegionalBonus2008); }
			set {
				SetColumnValue(Columns.RegionalBonus2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalBonus2008));
			}
		}
		[DataMember]
		public decimal RegionalBonus2009 {
			get { return GetColumnValue<decimal>(Columns.RegionalBonus2009); }
			set {
				SetColumnValue(Columns.RegionalBonus2009, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalBonus2009));
			}
		}
		[DataMember]
		public int NActivationWaives2009 {
			get { return GetColumnValue<int>(Columns.NActivationWaives2009); }
			set {
				SetColumnValue(Columns.NActivationWaives2009, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NActivationWaives2009));
			}
		}
		[DataMember]
		public decimal ActivationWaiveRate {
			get { return GetColumnValue<decimal>(Columns.ActivationWaiveRate); }
			set {
				SetColumnValue(Columns.ActivationWaiveRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationWaiveRate));
			}
		}
		[DataMember]
		public decimal ActivationWaiveTotal {
			get { return GetColumnValue<decimal>(Columns.ActivationWaiveTotal); }
			set {
				SetColumnValue(Columns.ActivationWaiveTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationWaiveTotal));
			}
		}
		[DataMember]
		public decimal NationalBonusRate {
			get { return GetColumnValue<decimal>(Columns.NationalBonusRate); }
			set {
				SetColumnValue(Columns.NationalBonusRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NationalBonusRate));
			}
		}
		[DataMember]
		public decimal NationalBonusAmount {
			get { return GetColumnValue<decimal>(Columns.NationalBonusAmount); }
			set {
				SetColumnValue(Columns.NationalBonusAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NationalBonusAmount));
			}
		}
		[DataMember]
		public decimal MiscTotal {
			get { return GetColumnValue<decimal>(Columns.MiscTotal); }
			set {
				SetColumnValue(Columns.MiscTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiscTotal));
			}
		}
		[DataMember]
		public decimal IncentivesPaid {
			get { return GetColumnValue<decimal>(Columns.IncentivesPaid); }
			set {
				SetColumnValue(Columns.IncentivesPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncentivesPaid));
			}
		}
		[DataMember]
		public decimal WaivedActivationDeduction {
			get { return GetColumnValue<decimal>(Columns.WaivedActivationDeduction); }
			set {
				SetColumnValue(Columns.WaivedActivationDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WaivedActivationDeduction));
			}
		}
		[DataMember]
		public decimal PassCreditDeduction {
			get { return GetColumnValue<decimal>(Columns.PassCreditDeduction); }
			set {
				SetColumnValue(Columns.PassCreditDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassCreditDeduction));
			}
		}
		[DataMember]
		public decimal ManualBillDeduction {
			get { return GetColumnValue<decimal>(Columns.ManualBillDeduction); }
			set {
				SetColumnValue(Columns.ManualBillDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManualBillDeduction));
			}
		}
		[DataMember]
		public decimal MissingInvoiceFeeDeduction {
			get { return GetColumnValue<decimal>(Columns.MissingInvoiceFeeDeduction); }
			set {
				SetColumnValue(Columns.MissingInvoiceFeeDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MissingInvoiceFeeDeduction));
			}
		}
		[DataMember]
		public decimal ShortenedContractDeduction {
			get { return GetColumnValue<decimal>(Columns.ShortenedContractDeduction); }
			set {
				SetColumnValue(Columns.ShortenedContractDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortenedContractDeduction));
			}
		}
		[DataMember]
		public decimal LoweredRMRDeduction {
			get { return GetColumnValue<decimal>(Columns.LoweredRMRDeduction); }
			set {
				SetColumnValue(Columns.LoweredRMRDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoweredRMRDeduction));
			}
		}
		[DataMember]
		public decimal DigitalAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.DigitalAccountDeduction); }
			set {
				SetColumnValue(Columns.DigitalAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DigitalAccountDeduction));
			}
		}
		[DataMember]
		public decimal SavedAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.SavedAccountDeduction); }
			set {
				SetColumnValue(Columns.SavedAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SavedAccountDeduction));
			}
		}
		[DataMember]
		public decimal CommercialAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.CommercialAccountDeduction); }
			set {
				SetColumnValue(Columns.CommercialAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommercialAccountDeduction));
			}
		}
		[DataMember]
		public decimal PointBankDollarAmount {
			get { return GetColumnValue<decimal>(Columns.PointBankDollarAmount); }
			set {
				SetColumnValue(Columns.PointBankDollarAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PointBankDollarAmount));
			}
		}
		[DataMember]
		public decimal TotalRentPaid {
			get { return GetColumnValue<decimal>(Columns.TotalRentPaid); }
			set {
				SetColumnValue(Columns.TotalRentPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalRentPaid));
			}
		}
		[DataMember]
		public decimal TotalPersonalCommissions {
			get { return GetColumnValue<decimal>(Columns.TotalPersonalCommissions); }
			set {
				SetColumnValue(Columns.TotalPersonalCommissions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPersonalCommissions));
			}
		}
		[DataMember]
		public decimal TotalPersonalBonuses {
			get { return GetColumnValue<decimal>(Columns.TotalPersonalBonuses); }
			set {
				SetColumnValue(Columns.TotalPersonalBonuses, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPersonalBonuses));
			}
		}
		[DataMember]
		public decimal TotalPersonalDeductions {
			get { return GetColumnValue<decimal>(Columns.TotalPersonalDeductions); }
			set {
				SetColumnValue(Columns.TotalPersonalDeductions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPersonalDeductions));
			}
		}
		[DataMember]
		public decimal ManagerSalary2008 {
			get { return GetColumnValue<decimal>(Columns.ManagerSalary2008); }
			set {
				SetColumnValue(Columns.ManagerSalary2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagerSalary2008));
			}
		}
		[DataMember]
		public decimal ManagerSalary2009 {
			get { return GetColumnValue<decimal>(Columns.ManagerSalary2009); }
			set {
				SetColumnValue(Columns.ManagerSalary2009, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagerSalary2009));
			}
		}
		[DataMember]
		public decimal TotalEarnings2008 {
			get { return GetColumnValue<decimal>(Columns.TotalEarnings2008); }
			set {
				SetColumnValue(Columns.TotalEarnings2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalEarnings2008));
			}
		}
		[DataMember]
		public decimal TotalEarnings2009 {
			get { return GetColumnValue<decimal>(Columns.TotalEarnings2009); }
			set {
				SetColumnValue(Columns.TotalEarnings2009, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalEarnings2009));
			}
		}
		[DataMember]
		public decimal TotalPaid {
			get { return GetColumnValue<decimal>(Columns.TotalPaid); }
			set {
				SetColumnValue(Columns.TotalPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPaid));
			}
		}
		[DataMember]
		public decimal TotalBonuses {
			get { return GetColumnValue<decimal>(Columns.TotalBonuses); }
			set {
				SetColumnValue(Columns.TotalBonuses, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalBonuses));
			}
		}
		[DataMember]
		public decimal TotalDeductions2008 {
			get { return GetColumnValue<decimal>(Columns.TotalDeductions2008); }
			set {
				SetColumnValue(Columns.TotalDeductions2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalDeductions2008));
			}
		}
		[DataMember]
		public decimal TotalDeductions2009 {
			get { return GetColumnValue<decimal>(Columns.TotalDeductions2009); }
			set {
				SetColumnValue(Columns.TotalDeductions2009, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalDeductions2009));
			}
		}
		[DataMember]
		public decimal BackendCheckAmount2008 {
			get { return GetColumnValue<decimal>(Columns.BackendCheckAmount2008); }
			set {
				SetColumnValue(Columns.BackendCheckAmount2008, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendCheckAmount2008));
			}
		}
		[DataMember]
		public decimal BackendCheckAmount2009 {
			get { return GetColumnValue<decimal>(Columns.BackendCheckAmount2009); }
			set {
				SetColumnValue(Columns.BackendCheckAmount2009, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendCheckAmount2009));
			}
		}
		[DataMember]
		public decimal BackendCheckAmount {
			get { return GetColumnValue<decimal>(Columns.BackendCheckAmount); }
			set {
				SetColumnValue(Columns.BackendCheckAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendCheckAmount));
			}
		}
		[DataMember]
		public decimal MonthlyBonusRate {
			get { return GetColumnValue<decimal>(Columns.MonthlyBonusRate); }
			set {
				SetColumnValue(Columns.MonthlyBonusRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonthlyBonusRate));
			}
		}
		[DataMember]
		public decimal EstimatedMonthlyBonus {
			get { return GetColumnValue<decimal>(Columns.EstimatedMonthlyBonus); }
			set {
				SetColumnValue(Columns.EstimatedMonthlyBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EstimatedMonthlyBonus));
			}
		}
		[DataMember]
		public decimal EstimatedRecruitingBonus {
			get { return GetColumnValue<decimal>(Columns.EstimatedRecruitingBonus); }
			set {
				SetColumnValue(Columns.EstimatedRecruitingBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EstimatedRecruitingBonus));
			}
		}
		[DataMember]
		public decimal EstimatedDecemberTotal {
			get { return GetColumnValue<decimal>(Columns.EstimatedDecemberTotal); }
			set {
				SetColumnValue(Columns.EstimatedDecemberTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EstimatedDecemberTotal));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendPayscale _BackendPayscale;
		//Relationship: FK_PR_SalesRegionalBackends_PR_BackendPayscales
		public PR_BackendPayscale BackendPayscale
		{
			get
			{
				if(_BackendPayscale == null) {
					_BackendPayscale = PR_BackendPayscale.FetchByID(this.BackendPayscaleID);
				}
				return _BackendPayscale;
			}
			set
			{
				SetColumnValue("BackendPayscaleID", value.BackendPayscaleID);
				_BackendPayscale = value;
			}
		}

		private PR_BackendPayscale _EstimatedPayscale;
		//Relationship: FK_PR_SalesRegionalBackends_PR_BackendPayscales1
		public PR_BackendPayscale EstimatedPayscale
		{
			get
			{
				if(_EstimatedPayscale == null) {
					_EstimatedPayscale = PR_BackendPayscale.FetchByID(this.EstimatedPayscaleID);
				}
				return _EstimatedPayscale;
			}
			set
			{
				SetColumnValue("EstimatedPayscaleID", value.BackendPayscaleID);
				_EstimatedPayscale = value;
			}
		}

		private RU_Payscale _PayScale;
		//Relationship: FK_PR_SalesRegionalBackends_RU_Payscales
		public RU_Payscale PayScale
		{
			get
			{
				if(_PayScale == null) {
					_PayScale = RU_Payscale.FetchByID(this.PayScaleID);
				}
				return _PayScale;
			}
			set
			{
				SetColumnValue("PayScaleID", value.PayscaleID);
				_PayScale = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_SalesRegionalBackends_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SalesRegionalBackendID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SalesRegionalBackendIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PayScaleIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BackendPayscaleIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn EstimatedPayscaleIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DetailFileIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RegionalUserIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn NGoodAccountsSoldColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn NExcellentAccountsSoldColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn NPassAccountsSoldColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn NSubAccountsSoldColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn NBadAccountsSoldColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn NGoodCancelsColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn NGoodWithHoldsColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn NGoodDelinquentColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn NGoodFriendsAndFamilyColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn NSubCancelsColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn NSubWithHoldsColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn NSubMissingActivationOrAutoPayColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn NSubDelinquentColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn NSubFriendsAndFamilyColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn NetGoodAccountsColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn NetSubAccountsColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn NetPassAccountsColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn NGoodWithheldColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn NSubWithheldColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn NGoodWaivedActivationsColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn NGoodManualBillColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn NGoodMissingInvoiceFeeColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn NGoodExtendedContractsColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn NGoodShortenedContractsColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn NGoodDigitalAccountsColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn NGoodCommercialColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn NRaisedRMROneDollarColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn NRaisedRMRTwoDollarsColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn NRaisedRMRThreeDollarsColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn NGoodSavesColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn TotalPointBankColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn FinalPointBankColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn AccountPayRateColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn SubAccountPayRateColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn SigningBonusColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn CashBonusColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn RecruitingBonusColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn RentBonusColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn RaisedRMRBonusColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn ExtendedContractBonusColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn TravelMoneyColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn TravelMoneyIsBonusColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn NGood2008Column
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn NSub2008Column
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn NCancels2008Column
		{
			get { return Schema.Columns[52]; }
		}
		public static TableSchema.TableColumn NQualifyingAccounts2008Column
		{
			get { return Schema.Columns[53]; }
		}
		public static TableSchema.TableColumn OfficeAverage2008Column
		{
			get { return Schema.Columns[54]; }
		}
		public static TableSchema.TableColumn NQualifyingWithheld2008Column
		{
			get { return Schema.Columns[55]; }
		}
		public static TableSchema.TableColumn OfficeAverageWithheld2008Column
		{
			get { return Schema.Columns[56]; }
		}
		public static TableSchema.TableColumn OverrideRate2008Column
		{
			get { return Schema.Columns[57]; }
		}
		public static TableSchema.TableColumn NQualifyingAccounts2009Column
		{
			get { return Schema.Columns[58]; }
		}
		public static TableSchema.TableColumn NQualifyingWithheld2009Column
		{
			get { return Schema.Columns[59]; }
		}
		public static TableSchema.TableColumn NOffices2009Column
		{
			get { return Schema.Columns[60]; }
		}
		public static TableSchema.TableColumn OverrideRate2009Column
		{
			get { return Schema.Columns[61]; }
		}
		public static TableSchema.TableColumn RegionalBonus2008Column
		{
			get { return Schema.Columns[62]; }
		}
		public static TableSchema.TableColumn RegionalBonus2009Column
		{
			get { return Schema.Columns[63]; }
		}
		public static TableSchema.TableColumn NActivationWaives2009Column
		{
			get { return Schema.Columns[64]; }
		}
		public static TableSchema.TableColumn ActivationWaiveRateColumn
		{
			get { return Schema.Columns[65]; }
		}
		public static TableSchema.TableColumn ActivationWaiveTotalColumn
		{
			get { return Schema.Columns[66]; }
		}
		public static TableSchema.TableColumn NationalBonusRateColumn
		{
			get { return Schema.Columns[67]; }
		}
		public static TableSchema.TableColumn NationalBonusAmountColumn
		{
			get { return Schema.Columns[68]; }
		}
		public static TableSchema.TableColumn MiscTotalColumn
		{
			get { return Schema.Columns[69]; }
		}
		public static TableSchema.TableColumn IncentivesPaidColumn
		{
			get { return Schema.Columns[70]; }
		}
		public static TableSchema.TableColumn WaivedActivationDeductionColumn
		{
			get { return Schema.Columns[71]; }
		}
		public static TableSchema.TableColumn PassCreditDeductionColumn
		{
			get { return Schema.Columns[72]; }
		}
		public static TableSchema.TableColumn ManualBillDeductionColumn
		{
			get { return Schema.Columns[73]; }
		}
		public static TableSchema.TableColumn MissingInvoiceFeeDeductionColumn
		{
			get { return Schema.Columns[74]; }
		}
		public static TableSchema.TableColumn ShortenedContractDeductionColumn
		{
			get { return Schema.Columns[75]; }
		}
		public static TableSchema.TableColumn LoweredRMRDeductionColumn
		{
			get { return Schema.Columns[76]; }
		}
		public static TableSchema.TableColumn DigitalAccountDeductionColumn
		{
			get { return Schema.Columns[77]; }
		}
		public static TableSchema.TableColumn SavedAccountDeductionColumn
		{
			get { return Schema.Columns[78]; }
		}
		public static TableSchema.TableColumn CommercialAccountDeductionColumn
		{
			get { return Schema.Columns[79]; }
		}
		public static TableSchema.TableColumn PointBankDollarAmountColumn
		{
			get { return Schema.Columns[80]; }
		}
		public static TableSchema.TableColumn TotalRentPaidColumn
		{
			get { return Schema.Columns[81]; }
		}
		public static TableSchema.TableColumn TotalPersonalCommissionsColumn
		{
			get { return Schema.Columns[82]; }
		}
		public static TableSchema.TableColumn TotalPersonalBonusesColumn
		{
			get { return Schema.Columns[83]; }
		}
		public static TableSchema.TableColumn TotalPersonalDeductionsColumn
		{
			get { return Schema.Columns[84]; }
		}
		public static TableSchema.TableColumn ManagerSalary2008Column
		{
			get { return Schema.Columns[85]; }
		}
		public static TableSchema.TableColumn ManagerSalary2009Column
		{
			get { return Schema.Columns[86]; }
		}
		public static TableSchema.TableColumn TotalEarnings2008Column
		{
			get { return Schema.Columns[87]; }
		}
		public static TableSchema.TableColumn TotalEarnings2009Column
		{
			get { return Schema.Columns[88]; }
		}
		public static TableSchema.TableColumn TotalPaidColumn
		{
			get { return Schema.Columns[89]; }
		}
		public static TableSchema.TableColumn TotalBonusesColumn
		{
			get { return Schema.Columns[90]; }
		}
		public static TableSchema.TableColumn TotalDeductions2008Column
		{
			get { return Schema.Columns[91]; }
		}
		public static TableSchema.TableColumn TotalDeductions2009Column
		{
			get { return Schema.Columns[92]; }
		}
		public static TableSchema.TableColumn BackendCheckAmount2008Column
		{
			get { return Schema.Columns[93]; }
		}
		public static TableSchema.TableColumn BackendCheckAmount2009Column
		{
			get { return Schema.Columns[94]; }
		}
		public static TableSchema.TableColumn BackendCheckAmountColumn
		{
			get { return Schema.Columns[95]; }
		}
		public static TableSchema.TableColumn MonthlyBonusRateColumn
		{
			get { return Schema.Columns[96]; }
		}
		public static TableSchema.TableColumn EstimatedMonthlyBonusColumn
		{
			get { return Schema.Columns[97]; }
		}
		public static TableSchema.TableColumn EstimatedRecruitingBonusColumn
		{
			get { return Schema.Columns[98]; }
		}
		public static TableSchema.TableColumn EstimatedDecemberTotalColumn
		{
			get { return Schema.Columns[99]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[100]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SalesRegionalBackendID = @"SalesRegionalBackendID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string PayScaleID = @"PayScaleID";
			public static readonly string BackendPayscaleID = @"BackendPayscaleID";
			public static readonly string EstimatedPayscaleID = @"EstimatedPayscaleID";
			public static readonly string DetailFileID = @"DetailFileID";
			public static readonly string RegionalUserID = @"RegionalUserID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string NGoodAccountsSold = @"NGoodAccountsSold";
			public static readonly string NExcellentAccountsSold = @"NExcellentAccountsSold";
			public static readonly string NPassAccountsSold = @"NPassAccountsSold";
			public static readonly string NSubAccountsSold = @"NSubAccountsSold";
			public static readonly string NBadAccountsSold = @"NBadAccountsSold";
			public static readonly string NGoodCancels = @"NGoodCancels";
			public static readonly string NGoodWithHolds = @"NGoodWithHolds";
			public static readonly string NGoodDelinquent = @"NGoodDelinquent";
			public static readonly string NGoodFriendsAndFamily = @"NGoodFriendsAndFamily";
			public static readonly string NSubCancels = @"NSubCancels";
			public static readonly string NSubWithHolds = @"NSubWithHolds";
			public static readonly string NSubMissingActivationOrAutoPay = @"NSubMissingActivationOrAutoPay";
			public static readonly string NSubDelinquent = @"NSubDelinquent";
			public static readonly string NSubFriendsAndFamily = @"NSubFriendsAndFamily";
			public static readonly string NetGoodAccounts = @"NetGoodAccounts";
			public static readonly string NetSubAccounts = @"NetSubAccounts";
			public static readonly string NetPassAccounts = @"NetPassAccounts";
			public static readonly string NGoodWithheld = @"NGoodWithheld";
			public static readonly string NSubWithheld = @"NSubWithheld";
			public static readonly string NGoodWaivedActivations = @"NGoodWaivedActivations";
			public static readonly string NGoodManualBill = @"NGoodManualBill";
			public static readonly string NGoodMissingInvoiceFee = @"NGoodMissingInvoiceFee";
			public static readonly string NGoodExtendedContracts = @"NGoodExtendedContracts";
			public static readonly string NGoodShortenedContracts = @"NGoodShortenedContracts";
			public static readonly string NGoodDigitalAccounts = @"NGoodDigitalAccounts";
			public static readonly string NGoodCommercial = @"NGoodCommercial";
			public static readonly string NRaisedRMROneDollar = @"NRaisedRMROneDollar";
			public static readonly string NRaisedRMRTwoDollars = @"NRaisedRMRTwoDollars";
			public static readonly string NRaisedRMRThreeDollars = @"NRaisedRMRThreeDollars";
			public static readonly string NGoodSaves = @"NGoodSaves";
			public static readonly string TotalPointBank = @"TotalPointBank";
			public static readonly string FinalPointBank = @"FinalPointBank";
			public static readonly string AccountPayRate = @"AccountPayRate";
			public static readonly string SubAccountPayRate = @"SubAccountPayRate";
			public static readonly string SigningBonus = @"SigningBonus";
			public static readonly string CashBonus = @"CashBonus";
			public static readonly string RecruitingBonus = @"RecruitingBonus";
			public static readonly string RentBonus = @"RentBonus";
			public static readonly string RaisedRMRBonus = @"RaisedRMRBonus";
			public static readonly string ExtendedContractBonus = @"ExtendedContractBonus";
			public static readonly string TravelMoney = @"TravelMoney";
			public static readonly string TravelMoneyIsBonus = @"TravelMoneyIsBonus";
			public static readonly string NGood2008 = @"NGood2008";
			public static readonly string NSub2008 = @"NSub2008";
			public static readonly string NCancels2008 = @"NCancels2008";
			public static readonly string NQualifyingAccounts2008 = @"NQualifyingAccounts2008";
			public static readonly string OfficeAverage2008 = @"OfficeAverage2008";
			public static readonly string NQualifyingWithheld2008 = @"NQualifyingWithheld2008";
			public static readonly string OfficeAverageWithheld2008 = @"OfficeAverageWithheld2008";
			public static readonly string OverrideRate2008 = @"OverrideRate2008";
			public static readonly string NQualifyingAccounts2009 = @"NQualifyingAccounts2009";
			public static readonly string NQualifyingWithheld2009 = @"NQualifyingWithheld2009";
			public static readonly string NOffices2009 = @"NOffices2009";
			public static readonly string OverrideRate2009 = @"OverrideRate2009";
			public static readonly string RegionalBonus2008 = @"RegionalBonus2008";
			public static readonly string RegionalBonus2009 = @"RegionalBonus2009";
			public static readonly string NActivationWaives2009 = @"NActivationWaives2009";
			public static readonly string ActivationWaiveRate = @"ActivationWaiveRate";
			public static readonly string ActivationWaiveTotal = @"ActivationWaiveTotal";
			public static readonly string NationalBonusRate = @"NationalBonusRate";
			public static readonly string NationalBonusAmount = @"NationalBonusAmount";
			public static readonly string MiscTotal = @"MiscTotal";
			public static readonly string IncentivesPaid = @"IncentivesPaid";
			public static readonly string WaivedActivationDeduction = @"WaivedActivationDeduction";
			public static readonly string PassCreditDeduction = @"PassCreditDeduction";
			public static readonly string ManualBillDeduction = @"ManualBillDeduction";
			public static readonly string MissingInvoiceFeeDeduction = @"MissingInvoiceFeeDeduction";
			public static readonly string ShortenedContractDeduction = @"ShortenedContractDeduction";
			public static readonly string LoweredRMRDeduction = @"LoweredRMRDeduction";
			public static readonly string DigitalAccountDeduction = @"DigitalAccountDeduction";
			public static readonly string SavedAccountDeduction = @"SavedAccountDeduction";
			public static readonly string CommercialAccountDeduction = @"CommercialAccountDeduction";
			public static readonly string PointBankDollarAmount = @"PointBankDollarAmount";
			public static readonly string TotalRentPaid = @"TotalRentPaid";
			public static readonly string TotalPersonalCommissions = @"TotalPersonalCommissions";
			public static readonly string TotalPersonalBonuses = @"TotalPersonalBonuses";
			public static readonly string TotalPersonalDeductions = @"TotalPersonalDeductions";
			public static readonly string ManagerSalary2008 = @"ManagerSalary2008";
			public static readonly string ManagerSalary2009 = @"ManagerSalary2009";
			public static readonly string TotalEarnings2008 = @"TotalEarnings2008";
			public static readonly string TotalEarnings2009 = @"TotalEarnings2009";
			public static readonly string TotalPaid = @"TotalPaid";
			public static readonly string TotalBonuses = @"TotalBonuses";
			public static readonly string TotalDeductions2008 = @"TotalDeductions2008";
			public static readonly string TotalDeductions2009 = @"TotalDeductions2009";
			public static readonly string BackendCheckAmount2008 = @"BackendCheckAmount2008";
			public static readonly string BackendCheckAmount2009 = @"BackendCheckAmount2009";
			public static readonly string BackendCheckAmount = @"BackendCheckAmount";
			public static readonly string MonthlyBonusRate = @"MonthlyBonusRate";
			public static readonly string EstimatedMonthlyBonus = @"EstimatedMonthlyBonus";
			public static readonly string EstimatedRecruitingBonus = @"EstimatedRecruitingBonus";
			public static readonly string EstimatedDecemberTotal = @"EstimatedDecemberTotal";
			public static readonly string IsActive = @"IsActive";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SalesRegionalBackendID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_SalesRegionalBackendTotal class.
	/// </summary>
	[DataContract]
	public partial class PR_SalesRegionalBackendTotalCollection : ActiveList<PR_SalesRegionalBackendTotal, PR_SalesRegionalBackendTotalCollection>
	{
		public static PR_SalesRegionalBackendTotalCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_SalesRegionalBackendTotalCollection result = new PR_SalesRegionalBackendTotalCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_SalesRegionalBackendTotal item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_SalesRegionalBackendTotals table.
	/// </summary>
	[DataContract]
	public partial class PR_SalesRegionalBackendTotal : ActiveRecord<PR_SalesRegionalBackendTotal>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_SalesRegionalBackendTotal()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_SalesRegionalBackendTotals", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRegionalTotalID = new TableSchema.TableColumn(schema);
				colvarRegionalTotalID.ColumnName = "RegionalTotalID";
				colvarRegionalTotalID.DataType = DbType.Int32;
				colvarRegionalTotalID.MaxLength = 0;
				colvarRegionalTotalID.AutoIncrement = true;
				colvarRegionalTotalID.IsNullable = false;
				colvarRegionalTotalID.IsPrimaryKey = true;
				colvarRegionalTotalID.IsForeignKey = false;
				colvarRegionalTotalID.IsReadOnly = false;
				colvarRegionalTotalID.DefaultSetting = @"";
				colvarRegionalTotalID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegionalTotalID);

				TableSchema.TableColumn colvarSalesRegionalBackendID = new TableSchema.TableColumn(schema);
				colvarSalesRegionalBackendID.ColumnName = "SalesRegionalBackendID";
				colvarSalesRegionalBackendID.DataType = DbType.Int32;
				colvarSalesRegionalBackendID.MaxLength = 0;
				colvarSalesRegionalBackendID.AutoIncrement = false;
				colvarSalesRegionalBackendID.IsNullable = false;
				colvarSalesRegionalBackendID.IsPrimaryKey = false;
				colvarSalesRegionalBackendID.IsForeignKey = false;
				colvarSalesRegionalBackendID.IsReadOnly = false;
				colvarSalesRegionalBackendID.DefaultSetting = @"";
				colvarSalesRegionalBackendID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRegionalBackendID);

				TableSchema.TableColumn colvarOfficeName = new TableSchema.TableColumn(schema);
				colvarOfficeName.ColumnName = "OfficeName";
				colvarOfficeName.DataType = DbType.String;
				colvarOfficeName.MaxLength = 50;
				colvarOfficeName.AutoIncrement = false;
				colvarOfficeName.IsNullable = false;
				colvarOfficeName.IsPrimaryKey = false;
				colvarOfficeName.IsForeignKey = false;
				colvarOfficeName.IsReadOnly = false;
				colvarOfficeName.DefaultSetting = @"";
				colvarOfficeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeName);

				TableSchema.TableColumn colvarNetGoodAccounts = new TableSchema.TableColumn(schema);
				colvarNetGoodAccounts.ColumnName = "NetGoodAccounts";
				colvarNetGoodAccounts.DataType = DbType.Int32;
				colvarNetGoodAccounts.MaxLength = 0;
				colvarNetGoodAccounts.AutoIncrement = false;
				colvarNetGoodAccounts.IsNullable = false;
				colvarNetGoodAccounts.IsPrimaryKey = false;
				colvarNetGoodAccounts.IsForeignKey = false;
				colvarNetGoodAccounts.IsReadOnly = false;
				colvarNetGoodAccounts.DefaultSetting = @"";
				colvarNetGoodAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetGoodAccounts);

				TableSchema.TableColumn colvarNGoodCancels = new TableSchema.TableColumn(schema);
				colvarNGoodCancels.ColumnName = "NGoodCancels";
				colvarNGoodCancels.DataType = DbType.Int32;
				colvarNGoodCancels.MaxLength = 0;
				colvarNGoodCancels.AutoIncrement = false;
				colvarNGoodCancels.IsNullable = false;
				colvarNGoodCancels.IsPrimaryKey = false;
				colvarNGoodCancels.IsForeignKey = false;
				colvarNGoodCancels.IsReadOnly = false;
				colvarNGoodCancels.DefaultSetting = @"";
				colvarNGoodCancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodCancels);

				TableSchema.TableColumn colvarNetSubAccounts = new TableSchema.TableColumn(schema);
				colvarNetSubAccounts.ColumnName = "NetSubAccounts";
				colvarNetSubAccounts.DataType = DbType.Int32;
				colvarNetSubAccounts.MaxLength = 0;
				colvarNetSubAccounts.AutoIncrement = false;
				colvarNetSubAccounts.IsNullable = false;
				colvarNetSubAccounts.IsPrimaryKey = false;
				colvarNetSubAccounts.IsForeignKey = false;
				colvarNetSubAccounts.IsReadOnly = false;
				colvarNetSubAccounts.DefaultSetting = @"";
				colvarNetSubAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetSubAccounts);

				TableSchema.TableColumn colvarNGoodActivationWaives = new TableSchema.TableColumn(schema);
				colvarNGoodActivationWaives.ColumnName = "NGoodActivationWaives";
				colvarNGoodActivationWaives.DataType = DbType.Int32;
				colvarNGoodActivationWaives.MaxLength = 0;
				colvarNGoodActivationWaives.AutoIncrement = false;
				colvarNGoodActivationWaives.IsNullable = false;
				colvarNGoodActivationWaives.IsPrimaryKey = false;
				colvarNGoodActivationWaives.IsForeignKey = false;
				colvarNGoodActivationWaives.IsReadOnly = false;
				colvarNGoodActivationWaives.DefaultSetting = @"";
				colvarNGoodActivationWaives.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodActivationWaives);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_SalesRegionalBackendTotals",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_SalesRegionalBackendTotal LoadFrom(PR_SalesRegionalBackendTotal item)
		{
			PR_SalesRegionalBackendTotal result = new PR_SalesRegionalBackendTotal();
			if (item.RegionalTotalID != default(int)) {
				result.LoadByKey(item.RegionalTotalID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RegionalTotalID {
			get { return GetColumnValue<int>(Columns.RegionalTotalID); }
			set {
				SetColumnValue(Columns.RegionalTotalID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalTotalID));
			}
		}
		[DataMember]
		public int SalesRegionalBackendID {
			get { return GetColumnValue<int>(Columns.SalesRegionalBackendID); }
			set {
				SetColumnValue(Columns.SalesRegionalBackendID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesRegionalBackendID));
			}
		}
		[DataMember]
		public string OfficeName {
			get { return GetColumnValue<string>(Columns.OfficeName); }
			set {
				SetColumnValue(Columns.OfficeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeName));
			}
		}
		[DataMember]
		public int NetGoodAccounts {
			get { return GetColumnValue<int>(Columns.NetGoodAccounts); }
			set {
				SetColumnValue(Columns.NetGoodAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetGoodAccounts));
			}
		}
		[DataMember]
		public int NGoodCancels {
			get { return GetColumnValue<int>(Columns.NGoodCancels); }
			set {
				SetColumnValue(Columns.NGoodCancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodCancels));
			}
		}
		[DataMember]
		public int NetSubAccounts {
			get { return GetColumnValue<int>(Columns.NetSubAccounts); }
			set {
				SetColumnValue(Columns.NetSubAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetSubAccounts));
			}
		}
		[DataMember]
		public int NGoodActivationWaives {
			get { return GetColumnValue<int>(Columns.NGoodActivationWaives); }
			set {
				SetColumnValue(Columns.NGoodActivationWaives, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodActivationWaives));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return RegionalTotalID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RegionalTotalIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SalesRegionalBackendIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn OfficeNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn NetGoodAccountsColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn NGoodCancelsColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn NetSubAccountsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn NGoodActivationWaivesColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RegionalTotalID = @"RegionalTotalID";
			public static readonly string SalesRegionalBackendID = @"SalesRegionalBackendID";
			public static readonly string OfficeName = @"OfficeName";
			public static readonly string NetGoodAccounts = @"NetGoodAccounts";
			public static readonly string NGoodCancels = @"NGoodCancels";
			public static readonly string NetSubAccounts = @"NetSubAccounts";
			public static readonly string NGoodActivationWaives = @"NGoodActivationWaives";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RegionalTotalID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_SalesRepBackend class.
	/// </summary>
	[DataContract]
	public partial class PR_SalesRepBackendCollection : ActiveList<PR_SalesRepBackend, PR_SalesRepBackendCollection>
	{
		public static PR_SalesRepBackendCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_SalesRepBackendCollection result = new PR_SalesRepBackendCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_SalesRepBackend item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_SalesRepBackends table.
	/// </summary>
	[DataContract]
	public partial class PR_SalesRepBackend : ActiveRecord<PR_SalesRepBackend>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_SalesRepBackend()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_SalesRepBackends", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSalesRepBackendID = new TableSchema.TableColumn(schema);
				colvarSalesRepBackendID.ColumnName = "SalesRepBackendID";
				colvarSalesRepBackendID.DataType = DbType.Int32;
				colvarSalesRepBackendID.MaxLength = 0;
				colvarSalesRepBackendID.AutoIncrement = true;
				colvarSalesRepBackendID.IsNullable = false;
				colvarSalesRepBackendID.IsPrimaryKey = true;
				colvarSalesRepBackendID.IsForeignKey = false;
				colvarSalesRepBackendID.IsReadOnly = false;
				colvarSalesRepBackendID.DefaultSetting = @"";
				colvarSalesRepBackendID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepBackendID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarPayScaleID = new TableSchema.TableColumn(schema);
				colvarPayScaleID.ColumnName = "PayScaleID";
				colvarPayScaleID.DataType = DbType.Int32;
				colvarPayScaleID.MaxLength = 0;
				colvarPayScaleID.AutoIncrement = false;
				colvarPayScaleID.IsNullable = false;
				colvarPayScaleID.IsPrimaryKey = false;
				colvarPayScaleID.IsForeignKey = true;
				colvarPayScaleID.IsReadOnly = false;
				colvarPayScaleID.DefaultSetting = @"";
				colvarPayScaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayScaleID);

				TableSchema.TableColumn colvarBackendPayscaleID = new TableSchema.TableColumn(schema);
				colvarBackendPayscaleID.ColumnName = "BackendPayscaleID";
				colvarBackendPayscaleID.DataType = DbType.Int32;
				colvarBackendPayscaleID.MaxLength = 0;
				colvarBackendPayscaleID.AutoIncrement = false;
				colvarBackendPayscaleID.IsNullable = true;
				colvarBackendPayscaleID.IsPrimaryKey = false;
				colvarBackendPayscaleID.IsForeignKey = true;
				colvarBackendPayscaleID.IsReadOnly = false;
				colvarBackendPayscaleID.DefaultSetting = @"";
				colvarBackendPayscaleID.ForeignKeyTableName = "PR_BackendPayscales";
				schema.Columns.Add(colvarBackendPayscaleID);

				TableSchema.TableColumn colvarEstimatePayscaleID = new TableSchema.TableColumn(schema);
				colvarEstimatePayscaleID.ColumnName = "EstimatePayscaleID";
				colvarEstimatePayscaleID.DataType = DbType.Int32;
				colvarEstimatePayscaleID.MaxLength = 0;
				colvarEstimatePayscaleID.AutoIncrement = false;
				colvarEstimatePayscaleID.IsNullable = true;
				colvarEstimatePayscaleID.IsPrimaryKey = false;
				colvarEstimatePayscaleID.IsForeignKey = true;
				colvarEstimatePayscaleID.IsReadOnly = false;
				colvarEstimatePayscaleID.DefaultSetting = @"";
				colvarEstimatePayscaleID.ForeignKeyTableName = "PR_BackendPayscales";
				schema.Columns.Add(colvarEstimatePayscaleID);

				TableSchema.TableColumn colvarDetailFileID = new TableSchema.TableColumn(schema);
				colvarDetailFileID.ColumnName = "DetailFileID";
				colvarDetailFileID.DataType = DbType.Int32;
				colvarDetailFileID.MaxLength = 0;
				colvarDetailFileID.AutoIncrement = false;
				colvarDetailFileID.IsNullable = true;
				colvarDetailFileID.IsPrimaryKey = false;
				colvarDetailFileID.IsForeignKey = false;
				colvarDetailFileID.IsReadOnly = false;
				colvarDetailFileID.DefaultSetting = @"";
				colvarDetailFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetailFileID);

				TableSchema.TableColumn colvarRegionalUserID = new TableSchema.TableColumn(schema);
				colvarRegionalUserID.ColumnName = "RegionalUserID";
				colvarRegionalUserID.DataType = DbType.Int32;
				colvarRegionalUserID.MaxLength = 0;
				colvarRegionalUserID.AutoIncrement = false;
				colvarRegionalUserID.IsNullable = true;
				colvarRegionalUserID.IsPrimaryKey = false;
				colvarRegionalUserID.IsForeignKey = false;
				colvarRegionalUserID.IsReadOnly = false;
				colvarRegionalUserID.DefaultSetting = @"";
				colvarRegionalUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegionalUserID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarNGoodAccountsSold = new TableSchema.TableColumn(schema);
				colvarNGoodAccountsSold.ColumnName = "NGoodAccountsSold";
				colvarNGoodAccountsSold.DataType = DbType.Int32;
				colvarNGoodAccountsSold.MaxLength = 0;
				colvarNGoodAccountsSold.AutoIncrement = false;
				colvarNGoodAccountsSold.IsNullable = false;
				colvarNGoodAccountsSold.IsPrimaryKey = false;
				colvarNGoodAccountsSold.IsForeignKey = false;
				colvarNGoodAccountsSold.IsReadOnly = false;
				colvarNGoodAccountsSold.DefaultSetting = @"((0))";
				colvarNGoodAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodAccountsSold);

				TableSchema.TableColumn colvarNExcellentAccountsSold = new TableSchema.TableColumn(schema);
				colvarNExcellentAccountsSold.ColumnName = "NExcellentAccountsSold";
				colvarNExcellentAccountsSold.DataType = DbType.Int32;
				colvarNExcellentAccountsSold.MaxLength = 0;
				colvarNExcellentAccountsSold.AutoIncrement = false;
				colvarNExcellentAccountsSold.IsNullable = false;
				colvarNExcellentAccountsSold.IsPrimaryKey = false;
				colvarNExcellentAccountsSold.IsForeignKey = false;
				colvarNExcellentAccountsSold.IsReadOnly = false;
				colvarNExcellentAccountsSold.DefaultSetting = @"((0))";
				colvarNExcellentAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNExcellentAccountsSold);

				TableSchema.TableColumn colvarNPassAccountsSold = new TableSchema.TableColumn(schema);
				colvarNPassAccountsSold.ColumnName = "NPassAccountsSold";
				colvarNPassAccountsSold.DataType = DbType.Int32;
				colvarNPassAccountsSold.MaxLength = 0;
				colvarNPassAccountsSold.AutoIncrement = false;
				colvarNPassAccountsSold.IsNullable = false;
				colvarNPassAccountsSold.IsPrimaryKey = false;
				colvarNPassAccountsSold.IsForeignKey = false;
				colvarNPassAccountsSold.IsReadOnly = false;
				colvarNPassAccountsSold.DefaultSetting = @"((0))";
				colvarNPassAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPassAccountsSold);

				TableSchema.TableColumn colvarNSubAccountsSold = new TableSchema.TableColumn(schema);
				colvarNSubAccountsSold.ColumnName = "NSubAccountsSold";
				colvarNSubAccountsSold.DataType = DbType.Int32;
				colvarNSubAccountsSold.MaxLength = 0;
				colvarNSubAccountsSold.AutoIncrement = false;
				colvarNSubAccountsSold.IsNullable = false;
				colvarNSubAccountsSold.IsPrimaryKey = false;
				colvarNSubAccountsSold.IsForeignKey = false;
				colvarNSubAccountsSold.IsReadOnly = false;
				colvarNSubAccountsSold.DefaultSetting = @"((0))";
				colvarNSubAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubAccountsSold);

				TableSchema.TableColumn colvarNBadAccountsSold = new TableSchema.TableColumn(schema);
				colvarNBadAccountsSold.ColumnName = "NBadAccountsSold";
				colvarNBadAccountsSold.DataType = DbType.Int32;
				colvarNBadAccountsSold.MaxLength = 0;
				colvarNBadAccountsSold.AutoIncrement = false;
				colvarNBadAccountsSold.IsNullable = false;
				colvarNBadAccountsSold.IsPrimaryKey = false;
				colvarNBadAccountsSold.IsForeignKey = false;
				colvarNBadAccountsSold.IsReadOnly = false;
				colvarNBadAccountsSold.DefaultSetting = @"((0))";
				colvarNBadAccountsSold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNBadAccountsSold);

				TableSchema.TableColumn colvarNGoodCancels = new TableSchema.TableColumn(schema);
				colvarNGoodCancels.ColumnName = "NGoodCancels";
				colvarNGoodCancels.DataType = DbType.Int32;
				colvarNGoodCancels.MaxLength = 0;
				colvarNGoodCancels.AutoIncrement = false;
				colvarNGoodCancels.IsNullable = false;
				colvarNGoodCancels.IsPrimaryKey = false;
				colvarNGoodCancels.IsForeignKey = false;
				colvarNGoodCancels.IsReadOnly = false;
				colvarNGoodCancels.DefaultSetting = @"((0))";
				colvarNGoodCancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodCancels);

				TableSchema.TableColumn colvarNGoodWithHolds = new TableSchema.TableColumn(schema);
				colvarNGoodWithHolds.ColumnName = "NGoodWithHolds";
				colvarNGoodWithHolds.DataType = DbType.Int32;
				colvarNGoodWithHolds.MaxLength = 0;
				colvarNGoodWithHolds.AutoIncrement = false;
				colvarNGoodWithHolds.IsNullable = false;
				colvarNGoodWithHolds.IsPrimaryKey = false;
				colvarNGoodWithHolds.IsForeignKey = false;
				colvarNGoodWithHolds.IsReadOnly = false;
				colvarNGoodWithHolds.DefaultSetting = @"((0))";
				colvarNGoodWithHolds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodWithHolds);

				TableSchema.TableColumn colvarNGoodDelinquent = new TableSchema.TableColumn(schema);
				colvarNGoodDelinquent.ColumnName = "NGoodDelinquent";
				colvarNGoodDelinquent.DataType = DbType.Int32;
				colvarNGoodDelinquent.MaxLength = 0;
				colvarNGoodDelinquent.AutoIncrement = false;
				colvarNGoodDelinquent.IsNullable = false;
				colvarNGoodDelinquent.IsPrimaryKey = false;
				colvarNGoodDelinquent.IsForeignKey = false;
				colvarNGoodDelinquent.IsReadOnly = false;
				colvarNGoodDelinquent.DefaultSetting = @"((0))";
				colvarNGoodDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodDelinquent);

				TableSchema.TableColumn colvarNGoodFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarNGoodFriendsAndFamily.ColumnName = "NGoodFriendsAndFamily";
				colvarNGoodFriendsAndFamily.DataType = DbType.Int32;
				colvarNGoodFriendsAndFamily.MaxLength = 0;
				colvarNGoodFriendsAndFamily.AutoIncrement = false;
				colvarNGoodFriendsAndFamily.IsNullable = false;
				colvarNGoodFriendsAndFamily.IsPrimaryKey = false;
				colvarNGoodFriendsAndFamily.IsForeignKey = false;
				colvarNGoodFriendsAndFamily.IsReadOnly = false;
				colvarNGoodFriendsAndFamily.DefaultSetting = @"((0))";
				colvarNGoodFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodFriendsAndFamily);

				TableSchema.TableColumn colvarNSubCancels = new TableSchema.TableColumn(schema);
				colvarNSubCancels.ColumnName = "NSubCancels";
				colvarNSubCancels.DataType = DbType.Int32;
				colvarNSubCancels.MaxLength = 0;
				colvarNSubCancels.AutoIncrement = false;
				colvarNSubCancels.IsNullable = false;
				colvarNSubCancels.IsPrimaryKey = false;
				colvarNSubCancels.IsForeignKey = false;
				colvarNSubCancels.IsReadOnly = false;
				colvarNSubCancels.DefaultSetting = @"((0))";
				colvarNSubCancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubCancels);

				TableSchema.TableColumn colvarNSubWithHolds = new TableSchema.TableColumn(schema);
				colvarNSubWithHolds.ColumnName = "NSubWithHolds";
				colvarNSubWithHolds.DataType = DbType.Int32;
				colvarNSubWithHolds.MaxLength = 0;
				colvarNSubWithHolds.AutoIncrement = false;
				colvarNSubWithHolds.IsNullable = false;
				colvarNSubWithHolds.IsPrimaryKey = false;
				colvarNSubWithHolds.IsForeignKey = false;
				colvarNSubWithHolds.IsReadOnly = false;
				colvarNSubWithHolds.DefaultSetting = @"((0))";
				colvarNSubWithHolds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubWithHolds);

				TableSchema.TableColumn colvarNSubMissingActivationOrAutoPay = new TableSchema.TableColumn(schema);
				colvarNSubMissingActivationOrAutoPay.ColumnName = "NSubMissingActivationOrAutoPay";
				colvarNSubMissingActivationOrAutoPay.DataType = DbType.Int32;
				colvarNSubMissingActivationOrAutoPay.MaxLength = 0;
				colvarNSubMissingActivationOrAutoPay.AutoIncrement = false;
				colvarNSubMissingActivationOrAutoPay.IsNullable = false;
				colvarNSubMissingActivationOrAutoPay.IsPrimaryKey = false;
				colvarNSubMissingActivationOrAutoPay.IsForeignKey = false;
				colvarNSubMissingActivationOrAutoPay.IsReadOnly = false;
				colvarNSubMissingActivationOrAutoPay.DefaultSetting = @"((0))";
				colvarNSubMissingActivationOrAutoPay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubMissingActivationOrAutoPay);

				TableSchema.TableColumn colvarNSubDelinquent = new TableSchema.TableColumn(schema);
				colvarNSubDelinquent.ColumnName = "NSubDelinquent";
				colvarNSubDelinquent.DataType = DbType.Int32;
				colvarNSubDelinquent.MaxLength = 0;
				colvarNSubDelinquent.AutoIncrement = false;
				colvarNSubDelinquent.IsNullable = false;
				colvarNSubDelinquent.IsPrimaryKey = false;
				colvarNSubDelinquent.IsForeignKey = false;
				colvarNSubDelinquent.IsReadOnly = false;
				colvarNSubDelinquent.DefaultSetting = @"((0))";
				colvarNSubDelinquent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubDelinquent);

				TableSchema.TableColumn colvarNSubFriendsAndFamily = new TableSchema.TableColumn(schema);
				colvarNSubFriendsAndFamily.ColumnName = "NSubFriendsAndFamily";
				colvarNSubFriendsAndFamily.DataType = DbType.Int32;
				colvarNSubFriendsAndFamily.MaxLength = 0;
				colvarNSubFriendsAndFamily.AutoIncrement = false;
				colvarNSubFriendsAndFamily.IsNullable = false;
				colvarNSubFriendsAndFamily.IsPrimaryKey = false;
				colvarNSubFriendsAndFamily.IsForeignKey = false;
				colvarNSubFriendsAndFamily.IsReadOnly = false;
				colvarNSubFriendsAndFamily.DefaultSetting = @"((0))";
				colvarNSubFriendsAndFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubFriendsAndFamily);

				TableSchema.TableColumn colvarNetGoodAccounts = new TableSchema.TableColumn(schema);
				colvarNetGoodAccounts.ColumnName = "NetGoodAccounts";
				colvarNetGoodAccounts.DataType = DbType.Int32;
				colvarNetGoodAccounts.MaxLength = 0;
				colvarNetGoodAccounts.AutoIncrement = false;
				colvarNetGoodAccounts.IsNullable = false;
				colvarNetGoodAccounts.IsPrimaryKey = false;
				colvarNetGoodAccounts.IsForeignKey = false;
				colvarNetGoodAccounts.IsReadOnly = false;
				colvarNetGoodAccounts.DefaultSetting = @"((0))";
				colvarNetGoodAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetGoodAccounts);

				TableSchema.TableColumn colvarNetSubAccounts = new TableSchema.TableColumn(schema);
				colvarNetSubAccounts.ColumnName = "NetSubAccounts";
				colvarNetSubAccounts.DataType = DbType.Int32;
				colvarNetSubAccounts.MaxLength = 0;
				colvarNetSubAccounts.AutoIncrement = false;
				colvarNetSubAccounts.IsNullable = false;
				colvarNetSubAccounts.IsPrimaryKey = false;
				colvarNetSubAccounts.IsForeignKey = false;
				colvarNetSubAccounts.IsReadOnly = false;
				colvarNetSubAccounts.DefaultSetting = @"((0))";
				colvarNetSubAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetSubAccounts);

				TableSchema.TableColumn colvarNetPassAccounts = new TableSchema.TableColumn(schema);
				colvarNetPassAccounts.ColumnName = "NetPassAccounts";
				colvarNetPassAccounts.DataType = DbType.Int32;
				colvarNetPassAccounts.MaxLength = 0;
				colvarNetPassAccounts.AutoIncrement = false;
				colvarNetPassAccounts.IsNullable = false;
				colvarNetPassAccounts.IsPrimaryKey = false;
				colvarNetPassAccounts.IsForeignKey = false;
				colvarNetPassAccounts.IsReadOnly = false;
				colvarNetPassAccounts.DefaultSetting = @"((0))";
				colvarNetPassAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetPassAccounts);

				TableSchema.TableColumn colvarNGoodWithheld = new TableSchema.TableColumn(schema);
				colvarNGoodWithheld.ColumnName = "NGoodWithheld";
				colvarNGoodWithheld.DataType = DbType.Int32;
				colvarNGoodWithheld.MaxLength = 0;
				colvarNGoodWithheld.AutoIncrement = false;
				colvarNGoodWithheld.IsNullable = false;
				colvarNGoodWithheld.IsPrimaryKey = false;
				colvarNGoodWithheld.IsForeignKey = false;
				colvarNGoodWithheld.IsReadOnly = false;
				colvarNGoodWithheld.DefaultSetting = @"((0))";
				colvarNGoodWithheld.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodWithheld);

				TableSchema.TableColumn colvarNSubWithheld = new TableSchema.TableColumn(schema);
				colvarNSubWithheld.ColumnName = "NSubWithheld";
				colvarNSubWithheld.DataType = DbType.Int32;
				colvarNSubWithheld.MaxLength = 0;
				colvarNSubWithheld.AutoIncrement = false;
				colvarNSubWithheld.IsNullable = false;
				colvarNSubWithheld.IsPrimaryKey = false;
				colvarNSubWithheld.IsForeignKey = false;
				colvarNSubWithheld.IsReadOnly = false;
				colvarNSubWithheld.DefaultSetting = @"((0))";
				colvarNSubWithheld.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSubWithheld);

				TableSchema.TableColumn colvarNGoodWaivedActivations = new TableSchema.TableColumn(schema);
				colvarNGoodWaivedActivations.ColumnName = "NGoodWaivedActivations";
				colvarNGoodWaivedActivations.DataType = DbType.Int32;
				colvarNGoodWaivedActivations.MaxLength = 0;
				colvarNGoodWaivedActivations.AutoIncrement = false;
				colvarNGoodWaivedActivations.IsNullable = false;
				colvarNGoodWaivedActivations.IsPrimaryKey = false;
				colvarNGoodWaivedActivations.IsForeignKey = false;
				colvarNGoodWaivedActivations.IsReadOnly = false;
				colvarNGoodWaivedActivations.DefaultSetting = @"((0))";
				colvarNGoodWaivedActivations.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodWaivedActivations);

				TableSchema.TableColumn colvarNGoodManualBill = new TableSchema.TableColumn(schema);
				colvarNGoodManualBill.ColumnName = "NGoodManualBill";
				colvarNGoodManualBill.DataType = DbType.Int32;
				colvarNGoodManualBill.MaxLength = 0;
				colvarNGoodManualBill.AutoIncrement = false;
				colvarNGoodManualBill.IsNullable = false;
				colvarNGoodManualBill.IsPrimaryKey = false;
				colvarNGoodManualBill.IsForeignKey = false;
				colvarNGoodManualBill.IsReadOnly = false;
				colvarNGoodManualBill.DefaultSetting = @"((0))";
				colvarNGoodManualBill.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodManualBill);

				TableSchema.TableColumn colvarNGoodMissingInvoiceFee = new TableSchema.TableColumn(schema);
				colvarNGoodMissingInvoiceFee.ColumnName = "NGoodMissingInvoiceFee";
				colvarNGoodMissingInvoiceFee.DataType = DbType.Int32;
				colvarNGoodMissingInvoiceFee.MaxLength = 0;
				colvarNGoodMissingInvoiceFee.AutoIncrement = false;
				colvarNGoodMissingInvoiceFee.IsNullable = false;
				colvarNGoodMissingInvoiceFee.IsPrimaryKey = false;
				colvarNGoodMissingInvoiceFee.IsForeignKey = false;
				colvarNGoodMissingInvoiceFee.IsReadOnly = false;
				colvarNGoodMissingInvoiceFee.DefaultSetting = @"((0))";
				colvarNGoodMissingInvoiceFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodMissingInvoiceFee);

				TableSchema.TableColumn colvarNGoodExtendedContracts = new TableSchema.TableColumn(schema);
				colvarNGoodExtendedContracts.ColumnName = "NGoodExtendedContracts";
				colvarNGoodExtendedContracts.DataType = DbType.Int32;
				colvarNGoodExtendedContracts.MaxLength = 0;
				colvarNGoodExtendedContracts.AutoIncrement = false;
				colvarNGoodExtendedContracts.IsNullable = false;
				colvarNGoodExtendedContracts.IsPrimaryKey = false;
				colvarNGoodExtendedContracts.IsForeignKey = false;
				colvarNGoodExtendedContracts.IsReadOnly = false;
				colvarNGoodExtendedContracts.DefaultSetting = @"((0))";
				colvarNGoodExtendedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodExtendedContracts);

				TableSchema.TableColumn colvarNGoodShortenedContracts = new TableSchema.TableColumn(schema);
				colvarNGoodShortenedContracts.ColumnName = "NGoodShortenedContracts";
				colvarNGoodShortenedContracts.DataType = DbType.Int32;
				colvarNGoodShortenedContracts.MaxLength = 0;
				colvarNGoodShortenedContracts.AutoIncrement = false;
				colvarNGoodShortenedContracts.IsNullable = false;
				colvarNGoodShortenedContracts.IsPrimaryKey = false;
				colvarNGoodShortenedContracts.IsForeignKey = false;
				colvarNGoodShortenedContracts.IsReadOnly = false;
				colvarNGoodShortenedContracts.DefaultSetting = @"((0))";
				colvarNGoodShortenedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodShortenedContracts);

				TableSchema.TableColumn colvarNGoodDigitalAccounts = new TableSchema.TableColumn(schema);
				colvarNGoodDigitalAccounts.ColumnName = "NGoodDigitalAccounts";
				colvarNGoodDigitalAccounts.DataType = DbType.Int32;
				colvarNGoodDigitalAccounts.MaxLength = 0;
				colvarNGoodDigitalAccounts.AutoIncrement = false;
				colvarNGoodDigitalAccounts.IsNullable = false;
				colvarNGoodDigitalAccounts.IsPrimaryKey = false;
				colvarNGoodDigitalAccounts.IsForeignKey = false;
				colvarNGoodDigitalAccounts.IsReadOnly = false;
				colvarNGoodDigitalAccounts.DefaultSetting = @"((0))";
				colvarNGoodDigitalAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodDigitalAccounts);

				TableSchema.TableColumn colvarNGoodCommercial = new TableSchema.TableColumn(schema);
				colvarNGoodCommercial.ColumnName = "NGoodCommercial";
				colvarNGoodCommercial.DataType = DbType.Int32;
				colvarNGoodCommercial.MaxLength = 0;
				colvarNGoodCommercial.AutoIncrement = false;
				colvarNGoodCommercial.IsNullable = false;
				colvarNGoodCommercial.IsPrimaryKey = false;
				colvarNGoodCommercial.IsForeignKey = false;
				colvarNGoodCommercial.IsReadOnly = false;
				colvarNGoodCommercial.DefaultSetting = @"((0))";
				colvarNGoodCommercial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodCommercial);

				TableSchema.TableColumn colvarNRaisedRMROneDollar = new TableSchema.TableColumn(schema);
				colvarNRaisedRMROneDollar.ColumnName = "NRaisedRMROneDollar";
				colvarNRaisedRMROneDollar.DataType = DbType.Int32;
				colvarNRaisedRMROneDollar.MaxLength = 0;
				colvarNRaisedRMROneDollar.AutoIncrement = false;
				colvarNRaisedRMROneDollar.IsNullable = false;
				colvarNRaisedRMROneDollar.IsPrimaryKey = false;
				colvarNRaisedRMROneDollar.IsForeignKey = false;
				colvarNRaisedRMROneDollar.IsReadOnly = false;
				colvarNRaisedRMROneDollar.DefaultSetting = @"((0))";
				colvarNRaisedRMROneDollar.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNRaisedRMROneDollar);

				TableSchema.TableColumn colvarNRaisedRMRTwoDollars = new TableSchema.TableColumn(schema);
				colvarNRaisedRMRTwoDollars.ColumnName = "NRaisedRMRTwoDollars";
				colvarNRaisedRMRTwoDollars.DataType = DbType.Int32;
				colvarNRaisedRMRTwoDollars.MaxLength = 0;
				colvarNRaisedRMRTwoDollars.AutoIncrement = false;
				colvarNRaisedRMRTwoDollars.IsNullable = false;
				colvarNRaisedRMRTwoDollars.IsPrimaryKey = false;
				colvarNRaisedRMRTwoDollars.IsForeignKey = false;
				colvarNRaisedRMRTwoDollars.IsReadOnly = false;
				colvarNRaisedRMRTwoDollars.DefaultSetting = @"((0))";
				colvarNRaisedRMRTwoDollars.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNRaisedRMRTwoDollars);

				TableSchema.TableColumn colvarNRaisedRMRThreeDollars = new TableSchema.TableColumn(schema);
				colvarNRaisedRMRThreeDollars.ColumnName = "NRaisedRMRThreeDollars";
				colvarNRaisedRMRThreeDollars.DataType = DbType.Int32;
				colvarNRaisedRMRThreeDollars.MaxLength = 0;
				colvarNRaisedRMRThreeDollars.AutoIncrement = false;
				colvarNRaisedRMRThreeDollars.IsNullable = false;
				colvarNRaisedRMRThreeDollars.IsPrimaryKey = false;
				colvarNRaisedRMRThreeDollars.IsForeignKey = false;
				colvarNRaisedRMRThreeDollars.IsReadOnly = false;
				colvarNRaisedRMRThreeDollars.DefaultSetting = @"((0))";
				colvarNRaisedRMRThreeDollars.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNRaisedRMRThreeDollars);

				TableSchema.TableColumn colvarNGoodSaves = new TableSchema.TableColumn(schema);
				colvarNGoodSaves.ColumnName = "NGoodSaves";
				colvarNGoodSaves.DataType = DbType.Int32;
				colvarNGoodSaves.MaxLength = 0;
				colvarNGoodSaves.AutoIncrement = false;
				colvarNGoodSaves.IsNullable = false;
				colvarNGoodSaves.IsPrimaryKey = false;
				colvarNGoodSaves.IsForeignKey = false;
				colvarNGoodSaves.IsReadOnly = false;
				colvarNGoodSaves.DefaultSetting = @"((0))";
				colvarNGoodSaves.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGoodSaves);

				TableSchema.TableColumn colvarTotalPointBank = new TableSchema.TableColumn(schema);
				colvarTotalPointBank.ColumnName = "TotalPointBank";
				colvarTotalPointBank.DataType = DbType.Double;
				colvarTotalPointBank.MaxLength = 0;
				colvarTotalPointBank.AutoIncrement = false;
				colvarTotalPointBank.IsNullable = false;
				colvarTotalPointBank.IsPrimaryKey = false;
				colvarTotalPointBank.IsForeignKey = false;
				colvarTotalPointBank.IsReadOnly = false;
				colvarTotalPointBank.DefaultSetting = @"((0))";
				colvarTotalPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPointBank);

				TableSchema.TableColumn colvarFinalPointBank = new TableSchema.TableColumn(schema);
				colvarFinalPointBank.ColumnName = "FinalPointBank";
				colvarFinalPointBank.DataType = DbType.Double;
				colvarFinalPointBank.MaxLength = 0;
				colvarFinalPointBank.AutoIncrement = false;
				colvarFinalPointBank.IsNullable = false;
				colvarFinalPointBank.IsPrimaryKey = false;
				colvarFinalPointBank.IsForeignKey = false;
				colvarFinalPointBank.IsReadOnly = false;
				colvarFinalPointBank.DefaultSetting = @"((0))";
				colvarFinalPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFinalPointBank);

				TableSchema.TableColumn colvarAccountPayRate = new TableSchema.TableColumn(schema);
				colvarAccountPayRate.ColumnName = "AccountPayRate";
				colvarAccountPayRate.DataType = DbType.Currency;
				colvarAccountPayRate.MaxLength = 0;
				colvarAccountPayRate.AutoIncrement = false;
				colvarAccountPayRate.IsNullable = false;
				colvarAccountPayRate.IsPrimaryKey = false;
				colvarAccountPayRate.IsForeignKey = false;
				colvarAccountPayRate.IsReadOnly = false;
				colvarAccountPayRate.DefaultSetting = @"((0))";
				colvarAccountPayRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountPayRate);

				TableSchema.TableColumn colvarSubAccountPayRate = new TableSchema.TableColumn(schema);
				colvarSubAccountPayRate.ColumnName = "SubAccountPayRate";
				colvarSubAccountPayRate.DataType = DbType.Currency;
				colvarSubAccountPayRate.MaxLength = 0;
				colvarSubAccountPayRate.AutoIncrement = false;
				colvarSubAccountPayRate.IsNullable = false;
				colvarSubAccountPayRate.IsPrimaryKey = false;
				colvarSubAccountPayRate.IsForeignKey = false;
				colvarSubAccountPayRate.IsReadOnly = false;
				colvarSubAccountPayRate.DefaultSetting = @"((0))";
				colvarSubAccountPayRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubAccountPayRate);

				TableSchema.TableColumn colvarSigningBonus = new TableSchema.TableColumn(schema);
				colvarSigningBonus.ColumnName = "SigningBonus";
				colvarSigningBonus.DataType = DbType.Currency;
				colvarSigningBonus.MaxLength = 0;
				colvarSigningBonus.AutoIncrement = false;
				colvarSigningBonus.IsNullable = false;
				colvarSigningBonus.IsPrimaryKey = false;
				colvarSigningBonus.IsForeignKey = false;
				colvarSigningBonus.IsReadOnly = false;
				colvarSigningBonus.DefaultSetting = @"((0))";
				colvarSigningBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSigningBonus);

				TableSchema.TableColumn colvarCashBonus = new TableSchema.TableColumn(schema);
				colvarCashBonus.ColumnName = "CashBonus";
				colvarCashBonus.DataType = DbType.Currency;
				colvarCashBonus.MaxLength = 0;
				colvarCashBonus.AutoIncrement = false;
				colvarCashBonus.IsNullable = false;
				colvarCashBonus.IsPrimaryKey = false;
				colvarCashBonus.IsForeignKey = false;
				colvarCashBonus.IsReadOnly = false;
				colvarCashBonus.DefaultSetting = @"((0))";
				colvarCashBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCashBonus);

				TableSchema.TableColumn colvarRecruitingBonus = new TableSchema.TableColumn(schema);
				colvarRecruitingBonus.ColumnName = "RecruitingBonus";
				colvarRecruitingBonus.DataType = DbType.Currency;
				colvarRecruitingBonus.MaxLength = 0;
				colvarRecruitingBonus.AutoIncrement = false;
				colvarRecruitingBonus.IsNullable = false;
				colvarRecruitingBonus.IsPrimaryKey = false;
				colvarRecruitingBonus.IsForeignKey = false;
				colvarRecruitingBonus.IsReadOnly = false;
				colvarRecruitingBonus.DefaultSetting = @"((0))";
				colvarRecruitingBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitingBonus);

				TableSchema.TableColumn colvarRentBonus = new TableSchema.TableColumn(schema);
				colvarRentBonus.ColumnName = "RentBonus";
				colvarRentBonus.DataType = DbType.Currency;
				colvarRentBonus.MaxLength = 0;
				colvarRentBonus.AutoIncrement = false;
				colvarRentBonus.IsNullable = false;
				colvarRentBonus.IsPrimaryKey = false;
				colvarRentBonus.IsForeignKey = false;
				colvarRentBonus.IsReadOnly = false;
				colvarRentBonus.DefaultSetting = @"((0))";
				colvarRentBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentBonus);

				TableSchema.TableColumn colvarRaisedRMRBonus = new TableSchema.TableColumn(schema);
				colvarRaisedRMRBonus.ColumnName = "RaisedRMRBonus";
				colvarRaisedRMRBonus.DataType = DbType.Currency;
				colvarRaisedRMRBonus.MaxLength = 0;
				colvarRaisedRMRBonus.AutoIncrement = false;
				colvarRaisedRMRBonus.IsNullable = false;
				colvarRaisedRMRBonus.IsPrimaryKey = false;
				colvarRaisedRMRBonus.IsForeignKey = false;
				colvarRaisedRMRBonus.IsReadOnly = false;
				colvarRaisedRMRBonus.DefaultSetting = @"((0))";
				colvarRaisedRMRBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRaisedRMRBonus);

				TableSchema.TableColumn colvarExtendedContractBonus = new TableSchema.TableColumn(schema);
				colvarExtendedContractBonus.ColumnName = "ExtendedContractBonus";
				colvarExtendedContractBonus.DataType = DbType.Currency;
				colvarExtendedContractBonus.MaxLength = 0;
				colvarExtendedContractBonus.AutoIncrement = false;
				colvarExtendedContractBonus.IsNullable = false;
				colvarExtendedContractBonus.IsPrimaryKey = false;
				colvarExtendedContractBonus.IsForeignKey = false;
				colvarExtendedContractBonus.IsReadOnly = false;
				colvarExtendedContractBonus.DefaultSetting = @"((0))";
				colvarExtendedContractBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExtendedContractBonus);

				TableSchema.TableColumn colvarTravelMoney = new TableSchema.TableColumn(schema);
				colvarTravelMoney.ColumnName = "TravelMoney";
				colvarTravelMoney.DataType = DbType.Currency;
				colvarTravelMoney.MaxLength = 0;
				colvarTravelMoney.AutoIncrement = false;
				colvarTravelMoney.IsNullable = false;
				colvarTravelMoney.IsPrimaryKey = false;
				colvarTravelMoney.IsForeignKey = false;
				colvarTravelMoney.IsReadOnly = false;
				colvarTravelMoney.DefaultSetting = @"((0))";
				colvarTravelMoney.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTravelMoney);

				TableSchema.TableColumn colvarTravelMoneyIsBonus = new TableSchema.TableColumn(schema);
				colvarTravelMoneyIsBonus.ColumnName = "TravelMoneyIsBonus";
				colvarTravelMoneyIsBonus.DataType = DbType.Boolean;
				colvarTravelMoneyIsBonus.MaxLength = 0;
				colvarTravelMoneyIsBonus.AutoIncrement = false;
				colvarTravelMoneyIsBonus.IsNullable = false;
				colvarTravelMoneyIsBonus.IsPrimaryKey = false;
				colvarTravelMoneyIsBonus.IsForeignKey = false;
				colvarTravelMoneyIsBonus.IsReadOnly = false;
				colvarTravelMoneyIsBonus.DefaultSetting = @"((0))";
				colvarTravelMoneyIsBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTravelMoneyIsBonus);

				TableSchema.TableColumn colvarMiscTotal = new TableSchema.TableColumn(schema);
				colvarMiscTotal.ColumnName = "MiscTotal";
				colvarMiscTotal.DataType = DbType.Currency;
				colvarMiscTotal.MaxLength = 0;
				colvarMiscTotal.AutoIncrement = false;
				colvarMiscTotal.IsNullable = false;
				colvarMiscTotal.IsPrimaryKey = false;
				colvarMiscTotal.IsForeignKey = false;
				colvarMiscTotal.IsReadOnly = false;
				colvarMiscTotal.DefaultSetting = @"((0))";
				colvarMiscTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiscTotal);

				TableSchema.TableColumn colvarIncentivesPaid = new TableSchema.TableColumn(schema);
				colvarIncentivesPaid.ColumnName = "IncentivesPaid";
				colvarIncentivesPaid.DataType = DbType.Currency;
				colvarIncentivesPaid.MaxLength = 0;
				colvarIncentivesPaid.AutoIncrement = false;
				colvarIncentivesPaid.IsNullable = false;
				colvarIncentivesPaid.IsPrimaryKey = false;
				colvarIncentivesPaid.IsForeignKey = false;
				colvarIncentivesPaid.IsReadOnly = false;
				colvarIncentivesPaid.DefaultSetting = @"((0))";
				colvarIncentivesPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncentivesPaid);

				TableSchema.TableColumn colvarWaivedActivationDeduction = new TableSchema.TableColumn(schema);
				colvarWaivedActivationDeduction.ColumnName = "WaivedActivationDeduction";
				colvarWaivedActivationDeduction.DataType = DbType.Currency;
				colvarWaivedActivationDeduction.MaxLength = 0;
				colvarWaivedActivationDeduction.AutoIncrement = false;
				colvarWaivedActivationDeduction.IsNullable = false;
				colvarWaivedActivationDeduction.IsPrimaryKey = false;
				colvarWaivedActivationDeduction.IsForeignKey = false;
				colvarWaivedActivationDeduction.IsReadOnly = false;
				colvarWaivedActivationDeduction.DefaultSetting = @"((0))";
				colvarWaivedActivationDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWaivedActivationDeduction);

				TableSchema.TableColumn colvarPassCreditDeduction = new TableSchema.TableColumn(schema);
				colvarPassCreditDeduction.ColumnName = "PassCreditDeduction";
				colvarPassCreditDeduction.DataType = DbType.Currency;
				colvarPassCreditDeduction.MaxLength = 0;
				colvarPassCreditDeduction.AutoIncrement = false;
				colvarPassCreditDeduction.IsNullable = false;
				colvarPassCreditDeduction.IsPrimaryKey = false;
				colvarPassCreditDeduction.IsForeignKey = false;
				colvarPassCreditDeduction.IsReadOnly = false;
				colvarPassCreditDeduction.DefaultSetting = @"((0))";
				colvarPassCreditDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassCreditDeduction);

				TableSchema.TableColumn colvarManualBillDeduction = new TableSchema.TableColumn(schema);
				colvarManualBillDeduction.ColumnName = "ManualBillDeduction";
				colvarManualBillDeduction.DataType = DbType.Currency;
				colvarManualBillDeduction.MaxLength = 0;
				colvarManualBillDeduction.AutoIncrement = false;
				colvarManualBillDeduction.IsNullable = false;
				colvarManualBillDeduction.IsPrimaryKey = false;
				colvarManualBillDeduction.IsForeignKey = false;
				colvarManualBillDeduction.IsReadOnly = false;
				colvarManualBillDeduction.DefaultSetting = @"((0))";
				colvarManualBillDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManualBillDeduction);

				TableSchema.TableColumn colvarMissingInvoiceFeeDeduction = new TableSchema.TableColumn(schema);
				colvarMissingInvoiceFeeDeduction.ColumnName = "MissingInvoiceFeeDeduction";
				colvarMissingInvoiceFeeDeduction.DataType = DbType.Currency;
				colvarMissingInvoiceFeeDeduction.MaxLength = 0;
				colvarMissingInvoiceFeeDeduction.AutoIncrement = false;
				colvarMissingInvoiceFeeDeduction.IsNullable = false;
				colvarMissingInvoiceFeeDeduction.IsPrimaryKey = false;
				colvarMissingInvoiceFeeDeduction.IsForeignKey = false;
				colvarMissingInvoiceFeeDeduction.IsReadOnly = false;
				colvarMissingInvoiceFeeDeduction.DefaultSetting = @"((0))";
				colvarMissingInvoiceFeeDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMissingInvoiceFeeDeduction);

				TableSchema.TableColumn colvarShortenedContractDeduction = new TableSchema.TableColumn(schema);
				colvarShortenedContractDeduction.ColumnName = "ShortenedContractDeduction";
				colvarShortenedContractDeduction.DataType = DbType.Currency;
				colvarShortenedContractDeduction.MaxLength = 0;
				colvarShortenedContractDeduction.AutoIncrement = false;
				colvarShortenedContractDeduction.IsNullable = false;
				colvarShortenedContractDeduction.IsPrimaryKey = false;
				colvarShortenedContractDeduction.IsForeignKey = false;
				colvarShortenedContractDeduction.IsReadOnly = false;
				colvarShortenedContractDeduction.DefaultSetting = @"((0))";
				colvarShortenedContractDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortenedContractDeduction);

				TableSchema.TableColumn colvarLoweredRMRDeduction = new TableSchema.TableColumn(schema);
				colvarLoweredRMRDeduction.ColumnName = "LoweredRMRDeduction";
				colvarLoweredRMRDeduction.DataType = DbType.Currency;
				colvarLoweredRMRDeduction.MaxLength = 0;
				colvarLoweredRMRDeduction.AutoIncrement = false;
				colvarLoweredRMRDeduction.IsNullable = false;
				colvarLoweredRMRDeduction.IsPrimaryKey = false;
				colvarLoweredRMRDeduction.IsForeignKey = false;
				colvarLoweredRMRDeduction.IsReadOnly = false;
				colvarLoweredRMRDeduction.DefaultSetting = @"((0))";
				colvarLoweredRMRDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoweredRMRDeduction);

				TableSchema.TableColumn colvarDigitalAccountDeduction = new TableSchema.TableColumn(schema);
				colvarDigitalAccountDeduction.ColumnName = "DigitalAccountDeduction";
				colvarDigitalAccountDeduction.DataType = DbType.Currency;
				colvarDigitalAccountDeduction.MaxLength = 0;
				colvarDigitalAccountDeduction.AutoIncrement = false;
				colvarDigitalAccountDeduction.IsNullable = false;
				colvarDigitalAccountDeduction.IsPrimaryKey = false;
				colvarDigitalAccountDeduction.IsForeignKey = false;
				colvarDigitalAccountDeduction.IsReadOnly = false;
				colvarDigitalAccountDeduction.DefaultSetting = @"((0))";
				colvarDigitalAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDigitalAccountDeduction);

				TableSchema.TableColumn colvarSavedAccountDeduction = new TableSchema.TableColumn(schema);
				colvarSavedAccountDeduction.ColumnName = "SavedAccountDeduction";
				colvarSavedAccountDeduction.DataType = DbType.Currency;
				colvarSavedAccountDeduction.MaxLength = 0;
				colvarSavedAccountDeduction.AutoIncrement = false;
				colvarSavedAccountDeduction.IsNullable = false;
				colvarSavedAccountDeduction.IsPrimaryKey = false;
				colvarSavedAccountDeduction.IsForeignKey = false;
				colvarSavedAccountDeduction.IsReadOnly = false;
				colvarSavedAccountDeduction.DefaultSetting = @"((0))";
				colvarSavedAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSavedAccountDeduction);

				TableSchema.TableColumn colvarCommercialAccountDeduction = new TableSchema.TableColumn(schema);
				colvarCommercialAccountDeduction.ColumnName = "CommercialAccountDeduction";
				colvarCommercialAccountDeduction.DataType = DbType.Currency;
				colvarCommercialAccountDeduction.MaxLength = 0;
				colvarCommercialAccountDeduction.AutoIncrement = false;
				colvarCommercialAccountDeduction.IsNullable = false;
				colvarCommercialAccountDeduction.IsPrimaryKey = false;
				colvarCommercialAccountDeduction.IsForeignKey = false;
				colvarCommercialAccountDeduction.IsReadOnly = false;
				colvarCommercialAccountDeduction.DefaultSetting = @"((0))";
				colvarCommercialAccountDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommercialAccountDeduction);

				TableSchema.TableColumn colvarPointBankDollarAmount = new TableSchema.TableColumn(schema);
				colvarPointBankDollarAmount.ColumnName = "PointBankDollarAmount";
				colvarPointBankDollarAmount.DataType = DbType.Currency;
				colvarPointBankDollarAmount.MaxLength = 0;
				colvarPointBankDollarAmount.AutoIncrement = false;
				colvarPointBankDollarAmount.IsNullable = false;
				colvarPointBankDollarAmount.IsPrimaryKey = false;
				colvarPointBankDollarAmount.IsForeignKey = false;
				colvarPointBankDollarAmount.IsReadOnly = false;
				colvarPointBankDollarAmount.DefaultSetting = @"((0))";
				colvarPointBankDollarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPointBankDollarAmount);

				TableSchema.TableColumn colvarTotalRentPaid = new TableSchema.TableColumn(schema);
				colvarTotalRentPaid.ColumnName = "TotalRentPaid";
				colvarTotalRentPaid.DataType = DbType.Currency;
				colvarTotalRentPaid.MaxLength = 0;
				colvarTotalRentPaid.AutoIncrement = false;
				colvarTotalRentPaid.IsNullable = false;
				colvarTotalRentPaid.IsPrimaryKey = false;
				colvarTotalRentPaid.IsForeignKey = false;
				colvarTotalRentPaid.IsReadOnly = false;
				colvarTotalRentPaid.DefaultSetting = @"((0))";
				colvarTotalRentPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalRentPaid);

				TableSchema.TableColumn colvarTotalEarnings = new TableSchema.TableColumn(schema);
				colvarTotalEarnings.ColumnName = "TotalEarnings";
				colvarTotalEarnings.DataType = DbType.Currency;
				colvarTotalEarnings.MaxLength = 0;
				colvarTotalEarnings.AutoIncrement = false;
				colvarTotalEarnings.IsNullable = false;
				colvarTotalEarnings.IsPrimaryKey = false;
				colvarTotalEarnings.IsForeignKey = false;
				colvarTotalEarnings.IsReadOnly = false;
				colvarTotalEarnings.DefaultSetting = @"((0))";
				colvarTotalEarnings.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalEarnings);

				TableSchema.TableColumn colvarTotalPaid = new TableSchema.TableColumn(schema);
				colvarTotalPaid.ColumnName = "TotalPaid";
				colvarTotalPaid.DataType = DbType.Currency;
				colvarTotalPaid.MaxLength = 0;
				colvarTotalPaid.AutoIncrement = false;
				colvarTotalPaid.IsNullable = false;
				colvarTotalPaid.IsPrimaryKey = false;
				colvarTotalPaid.IsForeignKey = false;
				colvarTotalPaid.IsReadOnly = false;
				colvarTotalPaid.DefaultSetting = @"((0))";
				colvarTotalPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPaid);

				TableSchema.TableColumn colvarTotalBonuses = new TableSchema.TableColumn(schema);
				colvarTotalBonuses.ColumnName = "TotalBonuses";
				colvarTotalBonuses.DataType = DbType.Currency;
				colvarTotalBonuses.MaxLength = 0;
				colvarTotalBonuses.AutoIncrement = false;
				colvarTotalBonuses.IsNullable = false;
				colvarTotalBonuses.IsPrimaryKey = false;
				colvarTotalBonuses.IsForeignKey = false;
				colvarTotalBonuses.IsReadOnly = false;
				colvarTotalBonuses.DefaultSetting = @"((0))";
				colvarTotalBonuses.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalBonuses);

				TableSchema.TableColumn colvarTotalDeductions = new TableSchema.TableColumn(schema);
				colvarTotalDeductions.ColumnName = "TotalDeductions";
				colvarTotalDeductions.DataType = DbType.Currency;
				colvarTotalDeductions.MaxLength = 0;
				colvarTotalDeductions.AutoIncrement = false;
				colvarTotalDeductions.IsNullable = false;
				colvarTotalDeductions.IsPrimaryKey = false;
				colvarTotalDeductions.IsForeignKey = false;
				colvarTotalDeductions.IsReadOnly = false;
				colvarTotalDeductions.DefaultSetting = @"((0))";
				colvarTotalDeductions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalDeductions);

				TableSchema.TableColumn colvarBackendCheckAmount = new TableSchema.TableColumn(schema);
				colvarBackendCheckAmount.ColumnName = "BackendCheckAmount";
				colvarBackendCheckAmount.DataType = DbType.Currency;
				colvarBackendCheckAmount.MaxLength = 0;
				colvarBackendCheckAmount.AutoIncrement = false;
				colvarBackendCheckAmount.IsNullable = false;
				colvarBackendCheckAmount.IsPrimaryKey = false;
				colvarBackendCheckAmount.IsForeignKey = false;
				colvarBackendCheckAmount.IsReadOnly = false;
				colvarBackendCheckAmount.DefaultSetting = @"((0))";
				colvarBackendCheckAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendCheckAmount);

				TableSchema.TableColumn colvarEstimateCheckAmount = new TableSchema.TableColumn(schema);
				colvarEstimateCheckAmount.ColumnName = "EstimateCheckAmount";
				colvarEstimateCheckAmount.DataType = DbType.Currency;
				colvarEstimateCheckAmount.MaxLength = 0;
				colvarEstimateCheckAmount.AutoIncrement = false;
				colvarEstimateCheckAmount.IsNullable = false;
				colvarEstimateCheckAmount.IsPrimaryKey = false;
				colvarEstimateCheckAmount.IsForeignKey = false;
				colvarEstimateCheckAmount.IsReadOnly = false;
				colvarEstimateCheckAmount.DefaultSetting = @"((0))";
				colvarEstimateCheckAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateCheckAmount);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((0))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_SalesRepBackends",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_SalesRepBackend LoadFrom(PR_SalesRepBackend item)
		{
			PR_SalesRepBackend result = new PR_SalesRepBackend();
			if (item.SalesRepBackendID != default(int)) {
				result.LoadByKey(item.SalesRepBackendID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SalesRepBackendID {
			get { return GetColumnValue<int>(Columns.SalesRepBackendID); }
			set {
				SetColumnValue(Columns.SalesRepBackendID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesRepBackendID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int PayScaleID {
			get { return GetColumnValue<int>(Columns.PayScaleID); }
			set {
				SetColumnValue(Columns.PayScaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScaleID));
			}
		}
		[DataMember]
		public int? BackendPayscaleID {
			get { return GetColumnValue<int?>(Columns.BackendPayscaleID); }
			set {
				SetColumnValue(Columns.BackendPayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPayscaleID));
			}
		}
		[DataMember]
		public int? EstimatePayscaleID {
			get { return GetColumnValue<int?>(Columns.EstimatePayscaleID); }
			set {
				SetColumnValue(Columns.EstimatePayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EstimatePayscaleID));
			}
		}
		[DataMember]
		public int? DetailFileID {
			get { return GetColumnValue<int?>(Columns.DetailFileID); }
			set {
				SetColumnValue(Columns.DetailFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DetailFileID));
			}
		}
		[DataMember]
		public int? RegionalUserID {
			get { return GetColumnValue<int?>(Columns.RegionalUserID); }
			set {
				SetColumnValue(Columns.RegionalUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalUserID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public int NGoodAccountsSold {
			get { return GetColumnValue<int>(Columns.NGoodAccountsSold); }
			set {
				SetColumnValue(Columns.NGoodAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodAccountsSold));
			}
		}
		[DataMember]
		public int NExcellentAccountsSold {
			get { return GetColumnValue<int>(Columns.NExcellentAccountsSold); }
			set {
				SetColumnValue(Columns.NExcellentAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NExcellentAccountsSold));
			}
		}
		[DataMember]
		public int NPassAccountsSold {
			get { return GetColumnValue<int>(Columns.NPassAccountsSold); }
			set {
				SetColumnValue(Columns.NPassAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPassAccountsSold));
			}
		}
		[DataMember]
		public int NSubAccountsSold {
			get { return GetColumnValue<int>(Columns.NSubAccountsSold); }
			set {
				SetColumnValue(Columns.NSubAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubAccountsSold));
			}
		}
		[DataMember]
		public int NBadAccountsSold {
			get { return GetColumnValue<int>(Columns.NBadAccountsSold); }
			set {
				SetColumnValue(Columns.NBadAccountsSold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NBadAccountsSold));
			}
		}
		[DataMember]
		public int NGoodCancels {
			get { return GetColumnValue<int>(Columns.NGoodCancels); }
			set {
				SetColumnValue(Columns.NGoodCancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodCancels));
			}
		}
		[DataMember]
		public int NGoodWithHolds {
			get { return GetColumnValue<int>(Columns.NGoodWithHolds); }
			set {
				SetColumnValue(Columns.NGoodWithHolds, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodWithHolds));
			}
		}
		[DataMember]
		public int NGoodDelinquent {
			get { return GetColumnValue<int>(Columns.NGoodDelinquent); }
			set {
				SetColumnValue(Columns.NGoodDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodDelinquent));
			}
		}
		[DataMember]
		public int NGoodFriendsAndFamily {
			get { return GetColumnValue<int>(Columns.NGoodFriendsAndFamily); }
			set {
				SetColumnValue(Columns.NGoodFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodFriendsAndFamily));
			}
		}
		[DataMember]
		public int NSubCancels {
			get { return GetColumnValue<int>(Columns.NSubCancels); }
			set {
				SetColumnValue(Columns.NSubCancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubCancels));
			}
		}
		[DataMember]
		public int NSubWithHolds {
			get { return GetColumnValue<int>(Columns.NSubWithHolds); }
			set {
				SetColumnValue(Columns.NSubWithHolds, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubWithHolds));
			}
		}
		[DataMember]
		public int NSubMissingActivationOrAutoPay {
			get { return GetColumnValue<int>(Columns.NSubMissingActivationOrAutoPay); }
			set {
				SetColumnValue(Columns.NSubMissingActivationOrAutoPay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubMissingActivationOrAutoPay));
			}
		}
		[DataMember]
		public int NSubDelinquent {
			get { return GetColumnValue<int>(Columns.NSubDelinquent); }
			set {
				SetColumnValue(Columns.NSubDelinquent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubDelinquent));
			}
		}
		[DataMember]
		public int NSubFriendsAndFamily {
			get { return GetColumnValue<int>(Columns.NSubFriendsAndFamily); }
			set {
				SetColumnValue(Columns.NSubFriendsAndFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubFriendsAndFamily));
			}
		}
		[DataMember]
		public int NetGoodAccounts {
			get { return GetColumnValue<int>(Columns.NetGoodAccounts); }
			set {
				SetColumnValue(Columns.NetGoodAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetGoodAccounts));
			}
		}
		[DataMember]
		public int NetSubAccounts {
			get { return GetColumnValue<int>(Columns.NetSubAccounts); }
			set {
				SetColumnValue(Columns.NetSubAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetSubAccounts));
			}
		}
		[DataMember]
		public int NetPassAccounts {
			get { return GetColumnValue<int>(Columns.NetPassAccounts); }
			set {
				SetColumnValue(Columns.NetPassAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetPassAccounts));
			}
		}
		[DataMember]
		public int NGoodWithheld {
			get { return GetColumnValue<int>(Columns.NGoodWithheld); }
			set {
				SetColumnValue(Columns.NGoodWithheld, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodWithheld));
			}
		}
		[DataMember]
		public int NSubWithheld {
			get { return GetColumnValue<int>(Columns.NSubWithheld); }
			set {
				SetColumnValue(Columns.NSubWithheld, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSubWithheld));
			}
		}
		[DataMember]
		public int NGoodWaivedActivations {
			get { return GetColumnValue<int>(Columns.NGoodWaivedActivations); }
			set {
				SetColumnValue(Columns.NGoodWaivedActivations, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodWaivedActivations));
			}
		}
		[DataMember]
		public int NGoodManualBill {
			get { return GetColumnValue<int>(Columns.NGoodManualBill); }
			set {
				SetColumnValue(Columns.NGoodManualBill, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodManualBill));
			}
		}
		[DataMember]
		public int NGoodMissingInvoiceFee {
			get { return GetColumnValue<int>(Columns.NGoodMissingInvoiceFee); }
			set {
				SetColumnValue(Columns.NGoodMissingInvoiceFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodMissingInvoiceFee));
			}
		}
		[DataMember]
		public int NGoodExtendedContracts {
			get { return GetColumnValue<int>(Columns.NGoodExtendedContracts); }
			set {
				SetColumnValue(Columns.NGoodExtendedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodExtendedContracts));
			}
		}
		[DataMember]
		public int NGoodShortenedContracts {
			get { return GetColumnValue<int>(Columns.NGoodShortenedContracts); }
			set {
				SetColumnValue(Columns.NGoodShortenedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodShortenedContracts));
			}
		}
		[DataMember]
		public int NGoodDigitalAccounts {
			get { return GetColumnValue<int>(Columns.NGoodDigitalAccounts); }
			set {
				SetColumnValue(Columns.NGoodDigitalAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodDigitalAccounts));
			}
		}
		[DataMember]
		public int NGoodCommercial {
			get { return GetColumnValue<int>(Columns.NGoodCommercial); }
			set {
				SetColumnValue(Columns.NGoodCommercial, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodCommercial));
			}
		}
		[DataMember]
		public int NRaisedRMROneDollar {
			get { return GetColumnValue<int>(Columns.NRaisedRMROneDollar); }
			set {
				SetColumnValue(Columns.NRaisedRMROneDollar, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NRaisedRMROneDollar));
			}
		}
		[DataMember]
		public int NRaisedRMRTwoDollars {
			get { return GetColumnValue<int>(Columns.NRaisedRMRTwoDollars); }
			set {
				SetColumnValue(Columns.NRaisedRMRTwoDollars, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NRaisedRMRTwoDollars));
			}
		}
		[DataMember]
		public int NRaisedRMRThreeDollars {
			get { return GetColumnValue<int>(Columns.NRaisedRMRThreeDollars); }
			set {
				SetColumnValue(Columns.NRaisedRMRThreeDollars, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NRaisedRMRThreeDollars));
			}
		}
		[DataMember]
		public int NGoodSaves {
			get { return GetColumnValue<int>(Columns.NGoodSaves); }
			set {
				SetColumnValue(Columns.NGoodSaves, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGoodSaves));
			}
		}
		[DataMember]
		public double TotalPointBank {
			get { return GetColumnValue<double>(Columns.TotalPointBank); }
			set {
				SetColumnValue(Columns.TotalPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPointBank));
			}
		}
		[DataMember]
		public double FinalPointBank {
			get { return GetColumnValue<double>(Columns.FinalPointBank); }
			set {
				SetColumnValue(Columns.FinalPointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FinalPointBank));
			}
		}
		[DataMember]
		public decimal AccountPayRate {
			get { return GetColumnValue<decimal>(Columns.AccountPayRate); }
			set {
				SetColumnValue(Columns.AccountPayRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountPayRate));
			}
		}
		[DataMember]
		public decimal SubAccountPayRate {
			get { return GetColumnValue<decimal>(Columns.SubAccountPayRate); }
			set {
				SetColumnValue(Columns.SubAccountPayRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubAccountPayRate));
			}
		}
		[DataMember]
		public decimal SigningBonus {
			get { return GetColumnValue<decimal>(Columns.SigningBonus); }
			set {
				SetColumnValue(Columns.SigningBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SigningBonus));
			}
		}
		[DataMember]
		public decimal CashBonus {
			get { return GetColumnValue<decimal>(Columns.CashBonus); }
			set {
				SetColumnValue(Columns.CashBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CashBonus));
			}
		}
		[DataMember]
		public decimal RecruitingBonus {
			get { return GetColumnValue<decimal>(Columns.RecruitingBonus); }
			set {
				SetColumnValue(Columns.RecruitingBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitingBonus));
			}
		}
		[DataMember]
		public decimal RentBonus {
			get { return GetColumnValue<decimal>(Columns.RentBonus); }
			set {
				SetColumnValue(Columns.RentBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentBonus));
			}
		}
		[DataMember]
		public decimal RaisedRMRBonus {
			get { return GetColumnValue<decimal>(Columns.RaisedRMRBonus); }
			set {
				SetColumnValue(Columns.RaisedRMRBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RaisedRMRBonus));
			}
		}
		[DataMember]
		public decimal ExtendedContractBonus {
			get { return GetColumnValue<decimal>(Columns.ExtendedContractBonus); }
			set {
				SetColumnValue(Columns.ExtendedContractBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExtendedContractBonus));
			}
		}
		[DataMember]
		public decimal TravelMoney {
			get { return GetColumnValue<decimal>(Columns.TravelMoney); }
			set {
				SetColumnValue(Columns.TravelMoney, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TravelMoney));
			}
		}
		[DataMember]
		public bool TravelMoneyIsBonus {
			get { return GetColumnValue<bool>(Columns.TravelMoneyIsBonus); }
			set {
				SetColumnValue(Columns.TravelMoneyIsBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TravelMoneyIsBonus));
			}
		}
		[DataMember]
		public decimal MiscTotal {
			get { return GetColumnValue<decimal>(Columns.MiscTotal); }
			set {
				SetColumnValue(Columns.MiscTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiscTotal));
			}
		}
		[DataMember]
		public decimal IncentivesPaid {
			get { return GetColumnValue<decimal>(Columns.IncentivesPaid); }
			set {
				SetColumnValue(Columns.IncentivesPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncentivesPaid));
			}
		}
		[DataMember]
		public decimal WaivedActivationDeduction {
			get { return GetColumnValue<decimal>(Columns.WaivedActivationDeduction); }
			set {
				SetColumnValue(Columns.WaivedActivationDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WaivedActivationDeduction));
			}
		}
		[DataMember]
		public decimal PassCreditDeduction {
			get { return GetColumnValue<decimal>(Columns.PassCreditDeduction); }
			set {
				SetColumnValue(Columns.PassCreditDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassCreditDeduction));
			}
		}
		[DataMember]
		public decimal ManualBillDeduction {
			get { return GetColumnValue<decimal>(Columns.ManualBillDeduction); }
			set {
				SetColumnValue(Columns.ManualBillDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManualBillDeduction));
			}
		}
		[DataMember]
		public decimal MissingInvoiceFeeDeduction {
			get { return GetColumnValue<decimal>(Columns.MissingInvoiceFeeDeduction); }
			set {
				SetColumnValue(Columns.MissingInvoiceFeeDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MissingInvoiceFeeDeduction));
			}
		}
		[DataMember]
		public decimal ShortenedContractDeduction {
			get { return GetColumnValue<decimal>(Columns.ShortenedContractDeduction); }
			set {
				SetColumnValue(Columns.ShortenedContractDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortenedContractDeduction));
			}
		}
		[DataMember]
		public decimal LoweredRMRDeduction {
			get { return GetColumnValue<decimal>(Columns.LoweredRMRDeduction); }
			set {
				SetColumnValue(Columns.LoweredRMRDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoweredRMRDeduction));
			}
		}
		[DataMember]
		public decimal DigitalAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.DigitalAccountDeduction); }
			set {
				SetColumnValue(Columns.DigitalAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DigitalAccountDeduction));
			}
		}
		[DataMember]
		public decimal SavedAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.SavedAccountDeduction); }
			set {
				SetColumnValue(Columns.SavedAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SavedAccountDeduction));
			}
		}
		[DataMember]
		public decimal CommercialAccountDeduction {
			get { return GetColumnValue<decimal>(Columns.CommercialAccountDeduction); }
			set {
				SetColumnValue(Columns.CommercialAccountDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommercialAccountDeduction));
			}
		}
		[DataMember]
		public decimal PointBankDollarAmount {
			get { return GetColumnValue<decimal>(Columns.PointBankDollarAmount); }
			set {
				SetColumnValue(Columns.PointBankDollarAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PointBankDollarAmount));
			}
		}
		[DataMember]
		public decimal TotalRentPaid {
			get { return GetColumnValue<decimal>(Columns.TotalRentPaid); }
			set {
				SetColumnValue(Columns.TotalRentPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalRentPaid));
			}
		}
		[DataMember]
		public decimal TotalEarnings {
			get { return GetColumnValue<decimal>(Columns.TotalEarnings); }
			set {
				SetColumnValue(Columns.TotalEarnings, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalEarnings));
			}
		}
		[DataMember]
		public decimal TotalPaid {
			get { return GetColumnValue<decimal>(Columns.TotalPaid); }
			set {
				SetColumnValue(Columns.TotalPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPaid));
			}
		}
		[DataMember]
		public decimal TotalBonuses {
			get { return GetColumnValue<decimal>(Columns.TotalBonuses); }
			set {
				SetColumnValue(Columns.TotalBonuses, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalBonuses));
			}
		}
		[DataMember]
		public decimal TotalDeductions {
			get { return GetColumnValue<decimal>(Columns.TotalDeductions); }
			set {
				SetColumnValue(Columns.TotalDeductions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalDeductions));
			}
		}
		[DataMember]
		public decimal BackendCheckAmount {
			get { return GetColumnValue<decimal>(Columns.BackendCheckAmount); }
			set {
				SetColumnValue(Columns.BackendCheckAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendCheckAmount));
			}
		}
		[DataMember]
		public decimal EstimateCheckAmount {
			get { return GetColumnValue<decimal>(Columns.EstimateCheckAmount); }
			set {
				SetColumnValue(Columns.EstimateCheckAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EstimateCheckAmount));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendPayscale _BackendPayscale;
		//Relationship: FK_PR_SalesRepBackends_PR_BackendPayscales
		public PR_BackendPayscale BackendPayscale
		{
			get
			{
				if(_BackendPayscale == null) {
					_BackendPayscale = PR_BackendPayscale.FetchByID(this.BackendPayscaleID);
				}
				return _BackendPayscale;
			}
			set
			{
				SetColumnValue("BackendPayscaleID", value.BackendPayscaleID);
				_BackendPayscale = value;
			}
		}

		private PR_BackendPayscale _EstimatePayscale;
		//Relationship: FK_PR_SalesRepBackends_PR_BackendPayscales1
		public PR_BackendPayscale EstimatePayscale
		{
			get
			{
				if(_EstimatePayscale == null) {
					_EstimatePayscale = PR_BackendPayscale.FetchByID(this.EstimatePayscaleID);
				}
				return _EstimatePayscale;
			}
			set
			{
				SetColumnValue("EstimatePayscaleID", value.BackendPayscaleID);
				_EstimatePayscale = value;
			}
		}

		private RU_Payscale _PayScale;
		//Relationship: FK_PR_SalesRepBackends_RU_Payscales
		public RU_Payscale PayScale
		{
			get
			{
				if(_PayScale == null) {
					_PayScale = RU_Payscale.FetchByID(this.PayScaleID);
				}
				return _PayScale;
			}
			set
			{
				SetColumnValue("PayScaleID", value.PayscaleID);
				_PayScale = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_SalesRepBackends_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SalesRepBackendID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SalesRepBackendIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PayScaleIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BackendPayscaleIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn EstimatePayscaleIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DetailFileIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RegionalUserIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn NGoodAccountsSoldColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn NExcellentAccountsSoldColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn NPassAccountsSoldColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn NSubAccountsSoldColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn NBadAccountsSoldColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn NGoodCancelsColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn NGoodWithHoldsColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn NGoodDelinquentColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn NGoodFriendsAndFamilyColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn NSubCancelsColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn NSubWithHoldsColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn NSubMissingActivationOrAutoPayColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn NSubDelinquentColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn NSubFriendsAndFamilyColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn NetGoodAccountsColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn NetSubAccountsColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn NetPassAccountsColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn NGoodWithheldColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn NSubWithheldColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn NGoodWaivedActivationsColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn NGoodManualBillColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn NGoodMissingInvoiceFeeColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn NGoodExtendedContractsColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn NGoodShortenedContractsColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn NGoodDigitalAccountsColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn NGoodCommercialColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn NRaisedRMROneDollarColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn NRaisedRMRTwoDollarsColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn NRaisedRMRThreeDollarsColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn NGoodSavesColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn TotalPointBankColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn FinalPointBankColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn AccountPayRateColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn SubAccountPayRateColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn SigningBonusColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn CashBonusColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn RecruitingBonusColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn RentBonusColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn RaisedRMRBonusColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn ExtendedContractBonusColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn TravelMoneyColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn TravelMoneyIsBonusColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn MiscTotalColumn
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn IncentivesPaidColumn
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn WaivedActivationDeductionColumn
		{
			get { return Schema.Columns[52]; }
		}
		public static TableSchema.TableColumn PassCreditDeductionColumn
		{
			get { return Schema.Columns[53]; }
		}
		public static TableSchema.TableColumn ManualBillDeductionColumn
		{
			get { return Schema.Columns[54]; }
		}
		public static TableSchema.TableColumn MissingInvoiceFeeDeductionColumn
		{
			get { return Schema.Columns[55]; }
		}
		public static TableSchema.TableColumn ShortenedContractDeductionColumn
		{
			get { return Schema.Columns[56]; }
		}
		public static TableSchema.TableColumn LoweredRMRDeductionColumn
		{
			get { return Schema.Columns[57]; }
		}
		public static TableSchema.TableColumn DigitalAccountDeductionColumn
		{
			get { return Schema.Columns[58]; }
		}
		public static TableSchema.TableColumn SavedAccountDeductionColumn
		{
			get { return Schema.Columns[59]; }
		}
		public static TableSchema.TableColumn CommercialAccountDeductionColumn
		{
			get { return Schema.Columns[60]; }
		}
		public static TableSchema.TableColumn PointBankDollarAmountColumn
		{
			get { return Schema.Columns[61]; }
		}
		public static TableSchema.TableColumn TotalRentPaidColumn
		{
			get { return Schema.Columns[62]; }
		}
		public static TableSchema.TableColumn TotalEarningsColumn
		{
			get { return Schema.Columns[63]; }
		}
		public static TableSchema.TableColumn TotalPaidColumn
		{
			get { return Schema.Columns[64]; }
		}
		public static TableSchema.TableColumn TotalBonusesColumn
		{
			get { return Schema.Columns[65]; }
		}
		public static TableSchema.TableColumn TotalDeductionsColumn
		{
			get { return Schema.Columns[66]; }
		}
		public static TableSchema.TableColumn BackendCheckAmountColumn
		{
			get { return Schema.Columns[67]; }
		}
		public static TableSchema.TableColumn EstimateCheckAmountColumn
		{
			get { return Schema.Columns[68]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[69]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SalesRepBackendID = @"SalesRepBackendID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string PayScaleID = @"PayScaleID";
			public static readonly string BackendPayscaleID = @"BackendPayscaleID";
			public static readonly string EstimatePayscaleID = @"EstimatePayscaleID";
			public static readonly string DetailFileID = @"DetailFileID";
			public static readonly string RegionalUserID = @"RegionalUserID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string NGoodAccountsSold = @"NGoodAccountsSold";
			public static readonly string NExcellentAccountsSold = @"NExcellentAccountsSold";
			public static readonly string NPassAccountsSold = @"NPassAccountsSold";
			public static readonly string NSubAccountsSold = @"NSubAccountsSold";
			public static readonly string NBadAccountsSold = @"NBadAccountsSold";
			public static readonly string NGoodCancels = @"NGoodCancels";
			public static readonly string NGoodWithHolds = @"NGoodWithHolds";
			public static readonly string NGoodDelinquent = @"NGoodDelinquent";
			public static readonly string NGoodFriendsAndFamily = @"NGoodFriendsAndFamily";
			public static readonly string NSubCancels = @"NSubCancels";
			public static readonly string NSubWithHolds = @"NSubWithHolds";
			public static readonly string NSubMissingActivationOrAutoPay = @"NSubMissingActivationOrAutoPay";
			public static readonly string NSubDelinquent = @"NSubDelinquent";
			public static readonly string NSubFriendsAndFamily = @"NSubFriendsAndFamily";
			public static readonly string NetGoodAccounts = @"NetGoodAccounts";
			public static readonly string NetSubAccounts = @"NetSubAccounts";
			public static readonly string NetPassAccounts = @"NetPassAccounts";
			public static readonly string NGoodWithheld = @"NGoodWithheld";
			public static readonly string NSubWithheld = @"NSubWithheld";
			public static readonly string NGoodWaivedActivations = @"NGoodWaivedActivations";
			public static readonly string NGoodManualBill = @"NGoodManualBill";
			public static readonly string NGoodMissingInvoiceFee = @"NGoodMissingInvoiceFee";
			public static readonly string NGoodExtendedContracts = @"NGoodExtendedContracts";
			public static readonly string NGoodShortenedContracts = @"NGoodShortenedContracts";
			public static readonly string NGoodDigitalAccounts = @"NGoodDigitalAccounts";
			public static readonly string NGoodCommercial = @"NGoodCommercial";
			public static readonly string NRaisedRMROneDollar = @"NRaisedRMROneDollar";
			public static readonly string NRaisedRMRTwoDollars = @"NRaisedRMRTwoDollars";
			public static readonly string NRaisedRMRThreeDollars = @"NRaisedRMRThreeDollars";
			public static readonly string NGoodSaves = @"NGoodSaves";
			public static readonly string TotalPointBank = @"TotalPointBank";
			public static readonly string FinalPointBank = @"FinalPointBank";
			public static readonly string AccountPayRate = @"AccountPayRate";
			public static readonly string SubAccountPayRate = @"SubAccountPayRate";
			public static readonly string SigningBonus = @"SigningBonus";
			public static readonly string CashBonus = @"CashBonus";
			public static readonly string RecruitingBonus = @"RecruitingBonus";
			public static readonly string RentBonus = @"RentBonus";
			public static readonly string RaisedRMRBonus = @"RaisedRMRBonus";
			public static readonly string ExtendedContractBonus = @"ExtendedContractBonus";
			public static readonly string TravelMoney = @"TravelMoney";
			public static readonly string TravelMoneyIsBonus = @"TravelMoneyIsBonus";
			public static readonly string MiscTotal = @"MiscTotal";
			public static readonly string IncentivesPaid = @"IncentivesPaid";
			public static readonly string WaivedActivationDeduction = @"WaivedActivationDeduction";
			public static readonly string PassCreditDeduction = @"PassCreditDeduction";
			public static readonly string ManualBillDeduction = @"ManualBillDeduction";
			public static readonly string MissingInvoiceFeeDeduction = @"MissingInvoiceFeeDeduction";
			public static readonly string ShortenedContractDeduction = @"ShortenedContractDeduction";
			public static readonly string LoweredRMRDeduction = @"LoweredRMRDeduction";
			public static readonly string DigitalAccountDeduction = @"DigitalAccountDeduction";
			public static readonly string SavedAccountDeduction = @"SavedAccountDeduction";
			public static readonly string CommercialAccountDeduction = @"CommercialAccountDeduction";
			public static readonly string PointBankDollarAmount = @"PointBankDollarAmount";
			public static readonly string TotalRentPaid = @"TotalRentPaid";
			public static readonly string TotalEarnings = @"TotalEarnings";
			public static readonly string TotalPaid = @"TotalPaid";
			public static readonly string TotalBonuses = @"TotalBonuses";
			public static readonly string TotalDeductions = @"TotalDeductions";
			public static readonly string BackendCheckAmount = @"BackendCheckAmount";
			public static readonly string EstimateCheckAmount = @"EstimateCheckAmount";
			public static readonly string IsActive = @"IsActive";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SalesRepBackendID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_SigningBonusAmount class.
	/// </summary>
	[DataContract]
	public partial class PR_SigningBonusAmountCollection : ActiveList<PR_SigningBonusAmount, PR_SigningBonusAmountCollection>
	{
		public static PR_SigningBonusAmountCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_SigningBonusAmountCollection result = new PR_SigningBonusAmountCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_SigningBonusAmount item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_SigningBonusAmounts table.
	/// </summary>
	[DataContract]
	public partial class PR_SigningBonusAmount : ActiveRecord<PR_SigningBonusAmount>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_SigningBonusAmount()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_SigningBonusAmounts", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSigningBonusAmountID = new TableSchema.TableColumn(schema);
				colvarSigningBonusAmountID.ColumnName = "SigningBonusAmountID";
				colvarSigningBonusAmountID.DataType = DbType.Int32;
				colvarSigningBonusAmountID.MaxLength = 0;
				colvarSigningBonusAmountID.AutoIncrement = true;
				colvarSigningBonusAmountID.IsNullable = false;
				colvarSigningBonusAmountID.IsPrimaryKey = true;
				colvarSigningBonusAmountID.IsForeignKey = false;
				colvarSigningBonusAmountID.IsReadOnly = false;
				colvarSigningBonusAmountID.DefaultSetting = @"";
				colvarSigningBonusAmountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSigningBonusAmountID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarPayscaleID = new TableSchema.TableColumn(schema);
				colvarPayscaleID.ColumnName = "PayscaleID";
				colvarPayscaleID.DataType = DbType.Int32;
				colvarPayscaleID.MaxLength = 0;
				colvarPayscaleID.AutoIncrement = false;
				colvarPayscaleID.IsNullable = false;
				colvarPayscaleID.IsPrimaryKey = false;
				colvarPayscaleID.IsForeignKey = true;
				colvarPayscaleID.IsReadOnly = false;
				colvarPayscaleID.DefaultSetting = @"";
				colvarPayscaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayscaleID);

				TableSchema.TableColumn colvarUserTypeID = new TableSchema.TableColumn(schema);
				colvarUserTypeID.ColumnName = "UserTypeID";
				colvarUserTypeID.DataType = DbType.Int16;
				colvarUserTypeID.MaxLength = 0;
				colvarUserTypeID.AutoIncrement = false;
				colvarUserTypeID.IsNullable = false;
				colvarUserTypeID.IsPrimaryKey = false;
				colvarUserTypeID.IsForeignKey = true;
				colvarUserTypeID.IsReadOnly = false;
				colvarUserTypeID.DefaultSetting = @"";
				colvarUserTypeID.ForeignKeyTableName = "RU_UserType";
				schema.Columns.Add(colvarUserTypeID);

				TableSchema.TableColumn colvarRoleLocationID = new TableSchema.TableColumn(schema);
				colvarRoleLocationID.ColumnName = "RoleLocationID";
				colvarRoleLocationID.DataType = DbType.Int32;
				colvarRoleLocationID.MaxLength = 0;
				colvarRoleLocationID.AutoIncrement = false;
				colvarRoleLocationID.IsNullable = false;
				colvarRoleLocationID.IsPrimaryKey = false;
				colvarRoleLocationID.IsForeignKey = true;
				colvarRoleLocationID.IsReadOnly = false;
				colvarRoleLocationID.DefaultSetting = @"";
				colvarRoleLocationID.ForeignKeyTableName = "RU_RoleLocations";
				schema.Columns.Add(colvarRoleLocationID);

				TableSchema.TableColumn colvarMinQualifyingAccounts = new TableSchema.TableColumn(schema);
				colvarMinQualifyingAccounts.ColumnName = "MinQualifyingAccounts";
				colvarMinQualifyingAccounts.DataType = DbType.Int32;
				colvarMinQualifyingAccounts.MaxLength = 0;
				colvarMinQualifyingAccounts.AutoIncrement = false;
				colvarMinQualifyingAccounts.IsNullable = false;
				colvarMinQualifyingAccounts.IsPrimaryKey = false;
				colvarMinQualifyingAccounts.IsForeignKey = false;
				colvarMinQualifyingAccounts.IsReadOnly = false;
				colvarMinQualifyingAccounts.DefaultSetting = @"";
				colvarMinQualifyingAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMinQualifyingAccounts);

				TableSchema.TableColumn colvarSigningBonusAmount = new TableSchema.TableColumn(schema);
				colvarSigningBonusAmount.ColumnName = "SigningBonusAmount";
				colvarSigningBonusAmount.DataType = DbType.Currency;
				colvarSigningBonusAmount.MaxLength = 0;
				colvarSigningBonusAmount.AutoIncrement = false;
				colvarSigningBonusAmount.IsNullable = false;
				colvarSigningBonusAmount.IsPrimaryKey = false;
				colvarSigningBonusAmount.IsForeignKey = false;
				colvarSigningBonusAmount.IsReadOnly = false;
				colvarSigningBonusAmount.DefaultSetting = @"";
				colvarSigningBonusAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSigningBonusAmount);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_SigningBonusAmounts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_SigningBonusAmount LoadFrom(PR_SigningBonusAmount item)
		{
			PR_SigningBonusAmount result = new PR_SigningBonusAmount();
			if (item.SigningBonusAmountID != default(int)) {
				result.LoadByKey(item.SigningBonusAmountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SigningBonusAmountID {
			get { return GetColumnValue<int>(Columns.SigningBonusAmountID); }
			set {
				SetColumnValue(Columns.SigningBonusAmountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SigningBonusAmountID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int PayscaleID {
			get { return GetColumnValue<int>(Columns.PayscaleID); }
			set {
				SetColumnValue(Columns.PayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayscaleID));
			}
		}
		[DataMember]
		public short UserTypeID {
			get { return GetColumnValue<short>(Columns.UserTypeID); }
			set {
				SetColumnValue(Columns.UserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeID));
			}
		}
		[DataMember]
		public int RoleLocationID {
			get { return GetColumnValue<int>(Columns.RoleLocationID); }
			set {
				SetColumnValue(Columns.RoleLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RoleLocationID));
			}
		}
		[DataMember]
		public int MinQualifyingAccounts {
			get { return GetColumnValue<int>(Columns.MinQualifyingAccounts); }
			set {
				SetColumnValue(Columns.MinQualifyingAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MinQualifyingAccounts));
			}
		}
		[DataMember]
		public decimal SigningBonusAmount {
			get { return GetColumnValue<decimal>(Columns.SigningBonusAmount); }
			set {
				SetColumnValue(Columns.SigningBonusAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SigningBonusAmount));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Payscale _Payscale;
		//Relationship: FK_PR_SigningBonusAmounts_RU_Payscales
		public RU_Payscale Payscale
		{
			get
			{
				if(_Payscale == null) {
					_Payscale = RU_Payscale.FetchByID(this.PayscaleID);
				}
				return _Payscale;
			}
			set
			{
				SetColumnValue("PayscaleID", value.PayscaleID);
				_Payscale = value;
			}
		}

		private RU_RoleLocation _RoleLocation;
		//Relationship: FK_PR_SigningBonusAmounts_RU_RoleLocations
		public RU_RoleLocation RoleLocation
		{
			get
			{
				if(_RoleLocation == null) {
					_RoleLocation = RU_RoleLocation.FetchByID(this.RoleLocationID);
				}
				return _RoleLocation;
			}
			set
			{
				SetColumnValue("RoleLocationID", value.RoleLocationID);
				_RoleLocation = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_SigningBonusAmounts_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_UserType _UserType;
		//Relationship: FK_PR_SigningBonusAmounts_RU_UserType
		public RU_UserType UserType
		{
			get
			{
				if(_UserType == null) {
					_UserType = RU_UserType.FetchByID(this.UserTypeID);
				}
				return _UserType;
			}
			set
			{
				SetColumnValue("UserTypeID", value.UserTypeID);
				_UserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SigningBonusAmountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SigningBonusAmountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PayscaleIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UserTypeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RoleLocationIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MinQualifyingAccountsColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SigningBonusAmountColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SigningBonusAmountID = @"SigningBonusAmountID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string PayscaleID = @"PayscaleID";
			public static readonly string UserTypeID = @"UserTypeID";
			public static readonly string RoleLocationID = @"RoleLocationID";
			public static readonly string MinQualifyingAccounts = @"MinQualifyingAccounts";
			public static readonly string SigningBonusAmount = @"SigningBonusAmount";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SigningBonusAmountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_TechBackend class.
	/// </summary>
	[DataContract]
	public partial class PR_TechBackendCollection : ActiveList<PR_TechBackend, PR_TechBackendCollection>
	{
		public static PR_TechBackendCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_TechBackendCollection result = new PR_TechBackendCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_TechBackend item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_TechBackends table.
	/// </summary>
	[DataContract]
	public partial class PR_TechBackend : ActiveRecord<PR_TechBackend>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_TechBackend()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_TechBackends", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTechBackendID = new TableSchema.TableColumn(schema);
				colvarTechBackendID.ColumnName = "TechBackendID";
				colvarTechBackendID.DataType = DbType.Int32;
				colvarTechBackendID.MaxLength = 0;
				colvarTechBackendID.AutoIncrement = true;
				colvarTechBackendID.IsNullable = false;
				colvarTechBackendID.IsPrimaryKey = true;
				colvarTechBackendID.IsForeignKey = false;
				colvarTechBackendID.IsReadOnly = false;
				colvarTechBackendID.DefaultSetting = @"";
				colvarTechBackendID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechBackendID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarPayScaleID = new TableSchema.TableColumn(schema);
				colvarPayScaleID.ColumnName = "PayScaleID";
				colvarPayScaleID.DataType = DbType.Int32;
				colvarPayScaleID.MaxLength = 0;
				colvarPayScaleID.AutoIncrement = false;
				colvarPayScaleID.IsNullable = false;
				colvarPayScaleID.IsPrimaryKey = false;
				colvarPayScaleID.IsForeignKey = true;
				colvarPayScaleID.IsReadOnly = false;
				colvarPayScaleID.DefaultSetting = @"";
				colvarPayScaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayScaleID);

				TableSchema.TableColumn colvarBackendPayscaleID = new TableSchema.TableColumn(schema);
				colvarBackendPayscaleID.ColumnName = "BackendPayscaleID";
				colvarBackendPayscaleID.DataType = DbType.Int32;
				colvarBackendPayscaleID.MaxLength = 0;
				colvarBackendPayscaleID.AutoIncrement = false;
				colvarBackendPayscaleID.IsNullable = true;
				colvarBackendPayscaleID.IsPrimaryKey = false;
				colvarBackendPayscaleID.IsForeignKey = true;
				colvarBackendPayscaleID.IsReadOnly = false;
				colvarBackendPayscaleID.DefaultSetting = @"";
				colvarBackendPayscaleID.ForeignKeyTableName = "PR_BackendPayscales";
				schema.Columns.Add(colvarBackendPayscaleID);

				TableSchema.TableColumn colvarDetailFileID = new TableSchema.TableColumn(schema);
				colvarDetailFileID.ColumnName = "DetailFileID";
				colvarDetailFileID.DataType = DbType.Int32;
				colvarDetailFileID.MaxLength = 0;
				colvarDetailFileID.AutoIncrement = false;
				colvarDetailFileID.IsNullable = true;
				colvarDetailFileID.IsPrimaryKey = false;
				colvarDetailFileID.IsForeignKey = false;
				colvarDetailFileID.IsReadOnly = false;
				colvarDetailFileID.DefaultSetting = @"";
				colvarDetailFileID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDetailFileID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarNTotalInstalls = new TableSchema.TableColumn(schema);
				colvarNTotalInstalls.ColumnName = "NTotalInstalls";
				colvarNTotalInstalls.DataType = DbType.Int32;
				colvarNTotalInstalls.MaxLength = 0;
				colvarNTotalInstalls.AutoIncrement = false;
				colvarNTotalInstalls.IsNullable = false;
				colvarNTotalInstalls.IsPrimaryKey = false;
				colvarNTotalInstalls.IsForeignKey = false;
				colvarNTotalInstalls.IsReadOnly = false;
				colvarNTotalInstalls.DefaultSetting = @"((0))";
				colvarNTotalInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNTotalInstalls);

				TableSchema.TableColumn colvarNBackendHolds = new TableSchema.TableColumn(schema);
				colvarNBackendHolds.ColumnName = "NBackendHolds";
				colvarNBackendHolds.DataType = DbType.Int32;
				colvarNBackendHolds.MaxLength = 0;
				colvarNBackendHolds.AutoIncrement = false;
				colvarNBackendHolds.IsNullable = false;
				colvarNBackendHolds.IsPrimaryKey = false;
				colvarNBackendHolds.IsForeignKey = false;
				colvarNBackendHolds.IsReadOnly = false;
				colvarNBackendHolds.DefaultSetting = @"((0))";
				colvarNBackendHolds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNBackendHolds);

				TableSchema.TableColumn colvarNetInstalls = new TableSchema.TableColumn(schema);
				colvarNetInstalls.ColumnName = "NetInstalls";
				colvarNetInstalls.DataType = DbType.Int32;
				colvarNetInstalls.MaxLength = 0;
				colvarNetInstalls.AutoIncrement = false;
				colvarNetInstalls.IsNullable = false;
				colvarNetInstalls.IsPrimaryKey = false;
				colvarNetInstalls.IsForeignKey = false;
				colvarNetInstalls.IsReadOnly = false;
				colvarNetInstalls.DefaultSetting = @"((0))";
				colvarNetInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetInstalls);

				TableSchema.TableColumn colvarNWithServiceTickets = new TableSchema.TableColumn(schema);
				colvarNWithServiceTickets.ColumnName = "NWithServiceTickets";
				colvarNWithServiceTickets.DataType = DbType.Int32;
				colvarNWithServiceTickets.MaxLength = 0;
				colvarNWithServiceTickets.AutoIncrement = false;
				colvarNWithServiceTickets.IsNullable = false;
				colvarNWithServiceTickets.IsPrimaryKey = false;
				colvarNWithServiceTickets.IsForeignKey = false;
				colvarNWithServiceTickets.IsReadOnly = false;
				colvarNWithServiceTickets.DefaultSetting = @"((0))";
				colvarNWithServiceTickets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNWithServiceTickets);

				TableSchema.TableColumn colvarNInstallsWithheld = new TableSchema.TableColumn(schema);
				colvarNInstallsWithheld.ColumnName = "NInstallsWithheld";
				colvarNInstallsWithheld.DataType = DbType.Int32;
				colvarNInstallsWithheld.MaxLength = 0;
				colvarNInstallsWithheld.AutoIncrement = false;
				colvarNInstallsWithheld.IsNullable = false;
				colvarNInstallsWithheld.IsPrimaryKey = false;
				colvarNInstallsWithheld.IsForeignKey = false;
				colvarNInstallsWithheld.IsReadOnly = false;
				colvarNInstallsWithheld.DefaultSetting = @"((0))";
				colvarNInstallsWithheld.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNInstallsWithheld);

				TableSchema.TableColumn colvarIsPlatinumCertified = new TableSchema.TableColumn(schema);
				colvarIsPlatinumCertified.ColumnName = "IsPlatinumCertified";
				colvarIsPlatinumCertified.DataType = DbType.Boolean;
				colvarIsPlatinumCertified.MaxLength = 0;
				colvarIsPlatinumCertified.AutoIncrement = false;
				colvarIsPlatinumCertified.IsNullable = false;
				colvarIsPlatinumCertified.IsPrimaryKey = false;
				colvarIsPlatinumCertified.IsForeignKey = false;
				colvarIsPlatinumCertified.IsReadOnly = false;
				colvarIsPlatinumCertified.DefaultSetting = @"((0))";
				colvarIsPlatinumCertified.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPlatinumCertified);

				TableSchema.TableColumn colvarServicePercentage = new TableSchema.TableColumn(schema);
				colvarServicePercentage.ColumnName = "ServicePercentage";
				colvarServicePercentage.DataType = DbType.Double;
				colvarServicePercentage.MaxLength = 0;
				colvarServicePercentage.AutoIncrement = false;
				colvarServicePercentage.IsNullable = false;
				colvarServicePercentage.IsPrimaryKey = false;
				colvarServicePercentage.IsForeignKey = false;
				colvarServicePercentage.IsReadOnly = false;
				colvarServicePercentage.DefaultSetting = @"((0))";
				colvarServicePercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServicePercentage);

				TableSchema.TableColumn colvarInspectionScorePercentage = new TableSchema.TableColumn(schema);
				colvarInspectionScorePercentage.ColumnName = "InspectionScorePercentage";
				colvarInspectionScorePercentage.DataType = DbType.Double;
				colvarInspectionScorePercentage.MaxLength = 0;
				colvarInspectionScorePercentage.AutoIncrement = false;
				colvarInspectionScorePercentage.IsNullable = false;
				colvarInspectionScorePercentage.IsPrimaryKey = false;
				colvarInspectionScorePercentage.IsForeignKey = false;
				colvarInspectionScorePercentage.IsReadOnly = false;
				colvarInspectionScorePercentage.DefaultSetting = @"((0))";
				colvarInspectionScorePercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInspectionScorePercentage);

				TableSchema.TableColumn colvarAccountPayRate = new TableSchema.TableColumn(schema);
				colvarAccountPayRate.ColumnName = "AccountPayRate";
				colvarAccountPayRate.DataType = DbType.Currency;
				colvarAccountPayRate.MaxLength = 0;
				colvarAccountPayRate.AutoIncrement = false;
				colvarAccountPayRate.IsNullable = false;
				colvarAccountPayRate.IsPrimaryKey = false;
				colvarAccountPayRate.IsForeignKey = false;
				colvarAccountPayRate.IsReadOnly = false;
				colvarAccountPayRate.DefaultSetting = @"((0))";
				colvarAccountPayRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountPayRate);

				TableSchema.TableColumn colvarNWeeksWorked = new TableSchema.TableColumn(schema);
				colvarNWeeksWorked.ColumnName = "NWeeksWorked";
				colvarNWeeksWorked.DataType = DbType.Int32;
				colvarNWeeksWorked.MaxLength = 0;
				colvarNWeeksWorked.AutoIncrement = false;
				colvarNWeeksWorked.IsNullable = false;
				colvarNWeeksWorked.IsPrimaryKey = false;
				colvarNWeeksWorked.IsForeignKey = false;
				colvarNWeeksWorked.IsReadOnly = false;
				colvarNWeeksWorked.DefaultSetting = @"((0))";
				colvarNWeeksWorked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNWeeksWorked);

				TableSchema.TableColumn colvarTotalRentPaid = new TableSchema.TableColumn(schema);
				colvarTotalRentPaid.ColumnName = "TotalRentPaid";
				colvarTotalRentPaid.DataType = DbType.Currency;
				colvarTotalRentPaid.MaxLength = 0;
				colvarTotalRentPaid.AutoIncrement = false;
				colvarTotalRentPaid.IsNullable = false;
				colvarTotalRentPaid.IsPrimaryKey = false;
				colvarTotalRentPaid.IsForeignKey = false;
				colvarTotalRentPaid.IsReadOnly = false;
				colvarTotalRentPaid.DefaultSetting = @"((0))";
				colvarTotalRentPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalRentPaid);

				TableSchema.TableColumn colvarRentBonus = new TableSchema.TableColumn(schema);
				colvarRentBonus.ColumnName = "RentBonus";
				colvarRentBonus.DataType = DbType.Currency;
				colvarRentBonus.MaxLength = 0;
				colvarRentBonus.AutoIncrement = false;
				colvarRentBonus.IsNullable = false;
				colvarRentBonus.IsPrimaryKey = false;
				colvarRentBonus.IsForeignKey = false;
				colvarRentBonus.IsReadOnly = false;
				colvarRentBonus.DefaultSetting = @"((0))";
				colvarRentBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentBonus);

				TableSchema.TableColumn colvarSigningBonus = new TableSchema.TableColumn(schema);
				colvarSigningBonus.ColumnName = "SigningBonus";
				colvarSigningBonus.DataType = DbType.Currency;
				colvarSigningBonus.MaxLength = 0;
				colvarSigningBonus.AutoIncrement = false;
				colvarSigningBonus.IsNullable = false;
				colvarSigningBonus.IsPrimaryKey = false;
				colvarSigningBonus.IsForeignKey = false;
				colvarSigningBonus.IsReadOnly = false;
				colvarSigningBonus.DefaultSetting = @"((0))";
				colvarSigningBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSigningBonus);

				TableSchema.TableColumn colvarLostInventory = new TableSchema.TableColumn(schema);
				colvarLostInventory.ColumnName = "LostInventory";
				colvarLostInventory.DataType = DbType.Currency;
				colvarLostInventory.MaxLength = 0;
				colvarLostInventory.AutoIncrement = false;
				colvarLostInventory.IsNullable = false;
				colvarLostInventory.IsPrimaryKey = false;
				colvarLostInventory.IsForeignKey = false;
				colvarLostInventory.IsReadOnly = false;
				colvarLostInventory.DefaultSetting = @"((0))";
				colvarLostInventory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLostInventory);

				TableSchema.TableColumn colvarTotalCellPhoneAllowance = new TableSchema.TableColumn(schema);
				colvarTotalCellPhoneAllowance.ColumnName = "TotalCellPhoneAllowance";
				colvarTotalCellPhoneAllowance.DataType = DbType.Currency;
				colvarTotalCellPhoneAllowance.MaxLength = 0;
				colvarTotalCellPhoneAllowance.AutoIncrement = false;
				colvarTotalCellPhoneAllowance.IsNullable = false;
				colvarTotalCellPhoneAllowance.IsPrimaryKey = false;
				colvarTotalCellPhoneAllowance.IsForeignKey = false;
				colvarTotalCellPhoneAllowance.IsReadOnly = false;
				colvarTotalCellPhoneAllowance.DefaultSetting = @"((0))";
				colvarTotalCellPhoneAllowance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalCellPhoneAllowance);

				TableSchema.TableColumn colvarTotalGasAllowance = new TableSchema.TableColumn(schema);
				colvarTotalGasAllowance.ColumnName = "TotalGasAllowance";
				colvarTotalGasAllowance.DataType = DbType.Currency;
				colvarTotalGasAllowance.MaxLength = 0;
				colvarTotalGasAllowance.AutoIncrement = false;
				colvarTotalGasAllowance.IsNullable = false;
				colvarTotalGasAllowance.IsPrimaryKey = false;
				colvarTotalGasAllowance.IsForeignKey = false;
				colvarTotalGasAllowance.IsReadOnly = false;
				colvarTotalGasAllowance.DefaultSetting = @"((0))";
				colvarTotalGasAllowance.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalGasAllowance);

				TableSchema.TableColumn colvarTravelMoneyPaid = new TableSchema.TableColumn(schema);
				colvarTravelMoneyPaid.ColumnName = "TravelMoneyPaid";
				colvarTravelMoneyPaid.DataType = DbType.Currency;
				colvarTravelMoneyPaid.MaxLength = 0;
				colvarTravelMoneyPaid.AutoIncrement = false;
				colvarTravelMoneyPaid.IsNullable = false;
				colvarTravelMoneyPaid.IsPrimaryKey = false;
				colvarTravelMoneyPaid.IsForeignKey = false;
				colvarTravelMoneyPaid.IsReadOnly = false;
				colvarTravelMoneyPaid.DefaultSetting = @"((0))";
				colvarTravelMoneyPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTravelMoneyPaid);

				TableSchema.TableColumn colvarMiscTotal = new TableSchema.TableColumn(schema);
				colvarMiscTotal.ColumnName = "MiscTotal";
				colvarMiscTotal.DataType = DbType.Currency;
				colvarMiscTotal.MaxLength = 0;
				colvarMiscTotal.AutoIncrement = false;
				colvarMiscTotal.IsNullable = false;
				colvarMiscTotal.IsPrimaryKey = false;
				colvarMiscTotal.IsForeignKey = false;
				colvarMiscTotal.IsReadOnly = false;
				colvarMiscTotal.DefaultSetting = @"((0))";
				colvarMiscTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiscTotal);

				TableSchema.TableColumn colvarIncentivesPaid = new TableSchema.TableColumn(schema);
				colvarIncentivesPaid.ColumnName = "IncentivesPaid";
				colvarIncentivesPaid.DataType = DbType.Currency;
				colvarIncentivesPaid.MaxLength = 0;
				colvarIncentivesPaid.AutoIncrement = false;
				colvarIncentivesPaid.IsNullable = false;
				colvarIncentivesPaid.IsPrimaryKey = false;
				colvarIncentivesPaid.IsForeignKey = false;
				colvarIncentivesPaid.IsReadOnly = false;
				colvarIncentivesPaid.DefaultSetting = @"((0))";
				colvarIncentivesPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncentivesPaid);

				TableSchema.TableColumn colvarSalesTotal = new TableSchema.TableColumn(schema);
				colvarSalesTotal.ColumnName = "SalesTotal";
				colvarSalesTotal.DataType = DbType.Currency;
				colvarSalesTotal.MaxLength = 0;
				colvarSalesTotal.AutoIncrement = false;
				colvarSalesTotal.IsNullable = false;
				colvarSalesTotal.IsPrimaryKey = false;
				colvarSalesTotal.IsForeignKey = false;
				colvarSalesTotal.IsReadOnly = false;
				colvarSalesTotal.DefaultSetting = @"((0))";
				colvarSalesTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesTotal);

				TableSchema.TableColumn colvarCertificationBonus = new TableSchema.TableColumn(schema);
				colvarCertificationBonus.ColumnName = "CertificationBonus";
				colvarCertificationBonus.DataType = DbType.Currency;
				colvarCertificationBonus.MaxLength = 0;
				colvarCertificationBonus.AutoIncrement = false;
				colvarCertificationBonus.IsNullable = false;
				colvarCertificationBonus.IsPrimaryKey = false;
				colvarCertificationBonus.IsForeignKey = false;
				colvarCertificationBonus.IsReadOnly = false;
				colvarCertificationBonus.DefaultSetting = @"((0))";
				colvarCertificationBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCertificationBonus);

				TableSchema.TableColumn colvarUpgradeTotal = new TableSchema.TableColumn(schema);
				colvarUpgradeTotal.ColumnName = "UpgradeTotal";
				colvarUpgradeTotal.DataType = DbType.Currency;
				colvarUpgradeTotal.MaxLength = 0;
				colvarUpgradeTotal.AutoIncrement = false;
				colvarUpgradeTotal.IsNullable = false;
				colvarUpgradeTotal.IsPrimaryKey = false;
				colvarUpgradeTotal.IsForeignKey = false;
				colvarUpgradeTotal.IsReadOnly = false;
				colvarUpgradeTotal.DefaultSetting = @"((0))";
				colvarUpgradeTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpgradeTotal);

				TableSchema.TableColumn colvarServicePercentageDeductionRate = new TableSchema.TableColumn(schema);
				colvarServicePercentageDeductionRate.ColumnName = "ServicePercentageDeductionRate";
				colvarServicePercentageDeductionRate.DataType = DbType.Currency;
				colvarServicePercentageDeductionRate.MaxLength = 0;
				colvarServicePercentageDeductionRate.AutoIncrement = false;
				colvarServicePercentageDeductionRate.IsNullable = false;
				colvarServicePercentageDeductionRate.IsPrimaryKey = false;
				colvarServicePercentageDeductionRate.IsForeignKey = false;
				colvarServicePercentageDeductionRate.IsReadOnly = false;
				colvarServicePercentageDeductionRate.DefaultSetting = @"((0))";
				colvarServicePercentageDeductionRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServicePercentageDeductionRate);

				TableSchema.TableColumn colvarInspectionPercentageDeductionRate = new TableSchema.TableColumn(schema);
				colvarInspectionPercentageDeductionRate.ColumnName = "InspectionPercentageDeductionRate";
				colvarInspectionPercentageDeductionRate.DataType = DbType.Currency;
				colvarInspectionPercentageDeductionRate.MaxLength = 0;
				colvarInspectionPercentageDeductionRate.AutoIncrement = false;
				colvarInspectionPercentageDeductionRate.IsNullable = false;
				colvarInspectionPercentageDeductionRate.IsPrimaryKey = false;
				colvarInspectionPercentageDeductionRate.IsForeignKey = false;
				colvarInspectionPercentageDeductionRate.IsReadOnly = false;
				colvarInspectionPercentageDeductionRate.DefaultSetting = @"((0))";
				colvarInspectionPercentageDeductionRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInspectionPercentageDeductionRate);

				TableSchema.TableColumn colvarServicePercentageDeduction = new TableSchema.TableColumn(schema);
				colvarServicePercentageDeduction.ColumnName = "ServicePercentageDeduction";
				colvarServicePercentageDeduction.DataType = DbType.Currency;
				colvarServicePercentageDeduction.MaxLength = 0;
				colvarServicePercentageDeduction.AutoIncrement = false;
				colvarServicePercentageDeduction.IsNullable = false;
				colvarServicePercentageDeduction.IsPrimaryKey = false;
				colvarServicePercentageDeduction.IsForeignKey = false;
				colvarServicePercentageDeduction.IsReadOnly = false;
				colvarServicePercentageDeduction.DefaultSetting = @"((0))";
				colvarServicePercentageDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServicePercentageDeduction);

				TableSchema.TableColumn colvarInspectionPercentageDeduction = new TableSchema.TableColumn(schema);
				colvarInspectionPercentageDeduction.ColumnName = "InspectionPercentageDeduction";
				colvarInspectionPercentageDeduction.DataType = DbType.Currency;
				colvarInspectionPercentageDeduction.MaxLength = 0;
				colvarInspectionPercentageDeduction.AutoIncrement = false;
				colvarInspectionPercentageDeduction.IsNullable = false;
				colvarInspectionPercentageDeduction.IsPrimaryKey = false;
				colvarInspectionPercentageDeduction.IsForeignKey = false;
				colvarInspectionPercentageDeduction.IsReadOnly = false;
				colvarInspectionPercentageDeduction.DefaultSetting = @"((0))";
				colvarInspectionPercentageDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInspectionPercentageDeduction);

				TableSchema.TableColumn colvarRecruitingBonus = new TableSchema.TableColumn(schema);
				colvarRecruitingBonus.ColumnName = "RecruitingBonus";
				colvarRecruitingBonus.DataType = DbType.Currency;
				colvarRecruitingBonus.MaxLength = 0;
				colvarRecruitingBonus.AutoIncrement = false;
				colvarRecruitingBonus.IsNullable = false;
				colvarRecruitingBonus.IsPrimaryKey = false;
				colvarRecruitingBonus.IsForeignKey = false;
				colvarRecruitingBonus.IsReadOnly = false;
				colvarRecruitingBonus.DefaultSetting = @"((0))";
				colvarRecruitingBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitingBonus);

				TableSchema.TableColumn colvarTotalEarnings = new TableSchema.TableColumn(schema);
				colvarTotalEarnings.ColumnName = "TotalEarnings";
				colvarTotalEarnings.DataType = DbType.Currency;
				colvarTotalEarnings.MaxLength = 0;
				colvarTotalEarnings.AutoIncrement = false;
				colvarTotalEarnings.IsNullable = false;
				colvarTotalEarnings.IsPrimaryKey = false;
				colvarTotalEarnings.IsForeignKey = false;
				colvarTotalEarnings.IsReadOnly = false;
				colvarTotalEarnings.DefaultSetting = @"((0))";
				colvarTotalEarnings.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalEarnings);

				TableSchema.TableColumn colvarTotalYearToDatePaid = new TableSchema.TableColumn(schema);
				colvarTotalYearToDatePaid.ColumnName = "TotalYearToDatePaid";
				colvarTotalYearToDatePaid.DataType = DbType.Currency;
				colvarTotalYearToDatePaid.MaxLength = 0;
				colvarTotalYearToDatePaid.AutoIncrement = false;
				colvarTotalYearToDatePaid.IsNullable = false;
				colvarTotalYearToDatePaid.IsPrimaryKey = false;
				colvarTotalYearToDatePaid.IsForeignKey = false;
				colvarTotalYearToDatePaid.IsReadOnly = false;
				colvarTotalYearToDatePaid.DefaultSetting = @"((0))";
				colvarTotalYearToDatePaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalYearToDatePaid);

				TableSchema.TableColumn colvarTotalCellPhonePaid = new TableSchema.TableColumn(schema);
				colvarTotalCellPhonePaid.ColumnName = "TotalCellPhonePaid";
				colvarTotalCellPhonePaid.DataType = DbType.Currency;
				colvarTotalCellPhonePaid.MaxLength = 0;
				colvarTotalCellPhonePaid.AutoIncrement = false;
				colvarTotalCellPhonePaid.IsNullable = false;
				colvarTotalCellPhonePaid.IsPrimaryKey = false;
				colvarTotalCellPhonePaid.IsForeignKey = false;
				colvarTotalCellPhonePaid.IsReadOnly = false;
				colvarTotalCellPhonePaid.DefaultSetting = @"((0))";
				colvarTotalCellPhonePaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalCellPhonePaid);

				TableSchema.TableColumn colvarTotalGasPaid = new TableSchema.TableColumn(schema);
				colvarTotalGasPaid.ColumnName = "TotalGasPaid";
				colvarTotalGasPaid.DataType = DbType.Currency;
				colvarTotalGasPaid.MaxLength = 0;
				colvarTotalGasPaid.AutoIncrement = false;
				colvarTotalGasPaid.IsNullable = false;
				colvarTotalGasPaid.IsPrimaryKey = false;
				colvarTotalGasPaid.IsForeignKey = false;
				colvarTotalGasPaid.IsReadOnly = false;
				colvarTotalGasPaid.DefaultSetting = @"((0))";
				colvarTotalGasPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalGasPaid);

				TableSchema.TableColumn colvarTotalDeductions = new TableSchema.TableColumn(schema);
				colvarTotalDeductions.ColumnName = "TotalDeductions";
				colvarTotalDeductions.DataType = DbType.Currency;
				colvarTotalDeductions.MaxLength = 0;
				colvarTotalDeductions.AutoIncrement = false;
				colvarTotalDeductions.IsNullable = false;
				colvarTotalDeductions.IsPrimaryKey = false;
				colvarTotalDeductions.IsForeignKey = false;
				colvarTotalDeductions.IsReadOnly = false;
				colvarTotalDeductions.DefaultSetting = @"((0))";
				colvarTotalDeductions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalDeductions);

				TableSchema.TableColumn colvarBackendCheckAmount = new TableSchema.TableColumn(schema);
				colvarBackendCheckAmount.ColumnName = "BackendCheckAmount";
				colvarBackendCheckAmount.DataType = DbType.Currency;
				colvarBackendCheckAmount.MaxLength = 0;
				colvarBackendCheckAmount.AutoIncrement = false;
				colvarBackendCheckAmount.IsNullable = false;
				colvarBackendCheckAmount.IsPrimaryKey = false;
				colvarBackendCheckAmount.IsForeignKey = false;
				colvarBackendCheckAmount.IsReadOnly = false;
				colvarBackendCheckAmount.DefaultSetting = @"((0))";
				colvarBackendCheckAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendCheckAmount);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((0))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_TechBackends",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_TechBackend LoadFrom(PR_TechBackend item)
		{
			PR_TechBackend result = new PR_TechBackend();
			if (item.TechBackendID != default(int)) {
				result.LoadByKey(item.TechBackendID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TechBackendID {
			get { return GetColumnValue<int>(Columns.TechBackendID); }
			set {
				SetColumnValue(Columns.TechBackendID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechBackendID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int PayScaleID {
			get { return GetColumnValue<int>(Columns.PayScaleID); }
			set {
				SetColumnValue(Columns.PayScaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScaleID));
			}
		}
		[DataMember]
		public int? BackendPayscaleID {
			get { return GetColumnValue<int?>(Columns.BackendPayscaleID); }
			set {
				SetColumnValue(Columns.BackendPayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendPayscaleID));
			}
		}
		[DataMember]
		public int? DetailFileID {
			get { return GetColumnValue<int?>(Columns.DetailFileID); }
			set {
				SetColumnValue(Columns.DetailFileID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DetailFileID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public int NTotalInstalls {
			get { return GetColumnValue<int>(Columns.NTotalInstalls); }
			set {
				SetColumnValue(Columns.NTotalInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NTotalInstalls));
			}
		}
		[DataMember]
		public int NBackendHolds {
			get { return GetColumnValue<int>(Columns.NBackendHolds); }
			set {
				SetColumnValue(Columns.NBackendHolds, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NBackendHolds));
			}
		}
		[DataMember]
		public int NetInstalls {
			get { return GetColumnValue<int>(Columns.NetInstalls); }
			set {
				SetColumnValue(Columns.NetInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetInstalls));
			}
		}
		[DataMember]
		public int NWithServiceTickets {
			get { return GetColumnValue<int>(Columns.NWithServiceTickets); }
			set {
				SetColumnValue(Columns.NWithServiceTickets, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NWithServiceTickets));
			}
		}
		[DataMember]
		public int NInstallsWithheld {
			get { return GetColumnValue<int>(Columns.NInstallsWithheld); }
			set {
				SetColumnValue(Columns.NInstallsWithheld, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NInstallsWithheld));
			}
		}
		[DataMember]
		public bool IsPlatinumCertified {
			get { return GetColumnValue<bool>(Columns.IsPlatinumCertified); }
			set {
				SetColumnValue(Columns.IsPlatinumCertified, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPlatinumCertified));
			}
		}
		[DataMember]
		public double ServicePercentage {
			get { return GetColumnValue<double>(Columns.ServicePercentage); }
			set {
				SetColumnValue(Columns.ServicePercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServicePercentage));
			}
		}
		[DataMember]
		public double InspectionScorePercentage {
			get { return GetColumnValue<double>(Columns.InspectionScorePercentage); }
			set {
				SetColumnValue(Columns.InspectionScorePercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InspectionScorePercentage));
			}
		}
		[DataMember]
		public decimal AccountPayRate {
			get { return GetColumnValue<decimal>(Columns.AccountPayRate); }
			set {
				SetColumnValue(Columns.AccountPayRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountPayRate));
			}
		}
		[DataMember]
		public int NWeeksWorked {
			get { return GetColumnValue<int>(Columns.NWeeksWorked); }
			set {
				SetColumnValue(Columns.NWeeksWorked, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NWeeksWorked));
			}
		}
		[DataMember]
		public decimal TotalRentPaid {
			get { return GetColumnValue<decimal>(Columns.TotalRentPaid); }
			set {
				SetColumnValue(Columns.TotalRentPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalRentPaid));
			}
		}
		[DataMember]
		public decimal RentBonus {
			get { return GetColumnValue<decimal>(Columns.RentBonus); }
			set {
				SetColumnValue(Columns.RentBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentBonus));
			}
		}
		[DataMember]
		public decimal SigningBonus {
			get { return GetColumnValue<decimal>(Columns.SigningBonus); }
			set {
				SetColumnValue(Columns.SigningBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SigningBonus));
			}
		}
		[DataMember]
		public decimal LostInventory {
			get { return GetColumnValue<decimal>(Columns.LostInventory); }
			set {
				SetColumnValue(Columns.LostInventory, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LostInventory));
			}
		}
		[DataMember]
		public decimal TotalCellPhoneAllowance {
			get { return GetColumnValue<decimal>(Columns.TotalCellPhoneAllowance); }
			set {
				SetColumnValue(Columns.TotalCellPhoneAllowance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalCellPhoneAllowance));
			}
		}
		[DataMember]
		public decimal TotalGasAllowance {
			get { return GetColumnValue<decimal>(Columns.TotalGasAllowance); }
			set {
				SetColumnValue(Columns.TotalGasAllowance, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalGasAllowance));
			}
		}
		[DataMember]
		public decimal TravelMoneyPaid {
			get { return GetColumnValue<decimal>(Columns.TravelMoneyPaid); }
			set {
				SetColumnValue(Columns.TravelMoneyPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TravelMoneyPaid));
			}
		}
		[DataMember]
		public decimal MiscTotal {
			get { return GetColumnValue<decimal>(Columns.MiscTotal); }
			set {
				SetColumnValue(Columns.MiscTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiscTotal));
			}
		}
		[DataMember]
		public decimal IncentivesPaid {
			get { return GetColumnValue<decimal>(Columns.IncentivesPaid); }
			set {
				SetColumnValue(Columns.IncentivesPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncentivesPaid));
			}
		}
		[DataMember]
		public decimal SalesTotal {
			get { return GetColumnValue<decimal>(Columns.SalesTotal); }
			set {
				SetColumnValue(Columns.SalesTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesTotal));
			}
		}
		[DataMember]
		public decimal CertificationBonus {
			get { return GetColumnValue<decimal>(Columns.CertificationBonus); }
			set {
				SetColumnValue(Columns.CertificationBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CertificationBonus));
			}
		}
		[DataMember]
		public decimal UpgradeTotal {
			get { return GetColumnValue<decimal>(Columns.UpgradeTotal); }
			set {
				SetColumnValue(Columns.UpgradeTotal, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UpgradeTotal));
			}
		}
		[DataMember]
		public decimal ServicePercentageDeductionRate {
			get { return GetColumnValue<decimal>(Columns.ServicePercentageDeductionRate); }
			set {
				SetColumnValue(Columns.ServicePercentageDeductionRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServicePercentageDeductionRate));
			}
		}
		[DataMember]
		public decimal InspectionPercentageDeductionRate {
			get { return GetColumnValue<decimal>(Columns.InspectionPercentageDeductionRate); }
			set {
				SetColumnValue(Columns.InspectionPercentageDeductionRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InspectionPercentageDeductionRate));
			}
		}
		[DataMember]
		public decimal ServicePercentageDeduction {
			get { return GetColumnValue<decimal>(Columns.ServicePercentageDeduction); }
			set {
				SetColumnValue(Columns.ServicePercentageDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServicePercentageDeduction));
			}
		}
		[DataMember]
		public decimal InspectionPercentageDeduction {
			get { return GetColumnValue<decimal>(Columns.InspectionPercentageDeduction); }
			set {
				SetColumnValue(Columns.InspectionPercentageDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InspectionPercentageDeduction));
			}
		}
		[DataMember]
		public decimal RecruitingBonus {
			get { return GetColumnValue<decimal>(Columns.RecruitingBonus); }
			set {
				SetColumnValue(Columns.RecruitingBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitingBonus));
			}
		}
		[DataMember]
		public decimal TotalEarnings {
			get { return GetColumnValue<decimal>(Columns.TotalEarnings); }
			set {
				SetColumnValue(Columns.TotalEarnings, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalEarnings));
			}
		}
		[DataMember]
		public decimal TotalYearToDatePaid {
			get { return GetColumnValue<decimal>(Columns.TotalYearToDatePaid); }
			set {
				SetColumnValue(Columns.TotalYearToDatePaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalYearToDatePaid));
			}
		}
		[DataMember]
		public decimal TotalCellPhonePaid {
			get { return GetColumnValue<decimal>(Columns.TotalCellPhonePaid); }
			set {
				SetColumnValue(Columns.TotalCellPhonePaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalCellPhonePaid));
			}
		}
		[DataMember]
		public decimal TotalGasPaid {
			get { return GetColumnValue<decimal>(Columns.TotalGasPaid); }
			set {
				SetColumnValue(Columns.TotalGasPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalGasPaid));
			}
		}
		[DataMember]
		public decimal TotalDeductions {
			get { return GetColumnValue<decimal>(Columns.TotalDeductions); }
			set {
				SetColumnValue(Columns.TotalDeductions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalDeductions));
			}
		}
		[DataMember]
		public decimal BackendCheckAmount {
			get { return GetColumnValue<decimal>(Columns.BackendCheckAmount); }
			set {
				SetColumnValue(Columns.BackendCheckAmount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendCheckAmount));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_BackendPayscale _BackendPayscale;
		//Relationship: FK_PR_TechBackends_PR_BackendPayscales
		public PR_BackendPayscale BackendPayscale
		{
			get
			{
				if(_BackendPayscale == null) {
					_BackendPayscale = PR_BackendPayscale.FetchByID(this.BackendPayscaleID);
				}
				return _BackendPayscale;
			}
			set
			{
				SetColumnValue("BackendPayscaleID", value.BackendPayscaleID);
				_BackendPayscale = value;
			}
		}

		private RU_Payscale _PayScale;
		//Relationship: FK_PR_TechBackends_RU_Payscales
		public RU_Payscale PayScale
		{
			get
			{
				if(_PayScale == null) {
					_PayScale = RU_Payscale.FetchByID(this.PayScaleID);
				}
				return _PayScale;
			}
			set
			{
				SetColumnValue("PayScaleID", value.PayscaleID);
				_PayScale = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_TechBackends_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TechBackendID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TechBackendIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PayScaleIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BackendPayscaleIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DetailFileIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn NTotalInstallsColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn NBackendHoldsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn NetInstallsColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn NWithServiceTicketsColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn NInstallsWithheldColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsPlatinumCertifiedColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ServicePercentageColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn InspectionScorePercentageColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn AccountPayRateColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn NWeeksWorkedColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn TotalRentPaidColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn RentBonusColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn SigningBonusColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn LostInventoryColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn TotalCellPhoneAllowanceColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn TotalGasAllowanceColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn TravelMoneyPaidColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn MiscTotalColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn IncentivesPaidColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn SalesTotalColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn CertificationBonusColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn UpgradeTotalColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn ServicePercentageDeductionRateColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn InspectionPercentageDeductionRateColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn ServicePercentageDeductionColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn InspectionPercentageDeductionColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn RecruitingBonusColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn TotalEarningsColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn TotalYearToDatePaidColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn TotalCellPhonePaidColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn TotalGasPaidColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn TotalDeductionsColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn BackendCheckAmountColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[39]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TechBackendID = @"TechBackendID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string PayScaleID = @"PayScaleID";
			public static readonly string BackendPayscaleID = @"BackendPayscaleID";
			public static readonly string DetailFileID = @"DetailFileID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string NTotalInstalls = @"NTotalInstalls";
			public static readonly string NBackendHolds = @"NBackendHolds";
			public static readonly string NetInstalls = @"NetInstalls";
			public static readonly string NWithServiceTickets = @"NWithServiceTickets";
			public static readonly string NInstallsWithheld = @"NInstallsWithheld";
			public static readonly string IsPlatinumCertified = @"IsPlatinumCertified";
			public static readonly string ServicePercentage = @"ServicePercentage";
			public static readonly string InspectionScorePercentage = @"InspectionScorePercentage";
			public static readonly string AccountPayRate = @"AccountPayRate";
			public static readonly string NWeeksWorked = @"NWeeksWorked";
			public static readonly string TotalRentPaid = @"TotalRentPaid";
			public static readonly string RentBonus = @"RentBonus";
			public static readonly string SigningBonus = @"SigningBonus";
			public static readonly string LostInventory = @"LostInventory";
			public static readonly string TotalCellPhoneAllowance = @"TotalCellPhoneAllowance";
			public static readonly string TotalGasAllowance = @"TotalGasAllowance";
			public static readonly string TravelMoneyPaid = @"TravelMoneyPaid";
			public static readonly string MiscTotal = @"MiscTotal";
			public static readonly string IncentivesPaid = @"IncentivesPaid";
			public static readonly string SalesTotal = @"SalesTotal";
			public static readonly string CertificationBonus = @"CertificationBonus";
			public static readonly string UpgradeTotal = @"UpgradeTotal";
			public static readonly string ServicePercentageDeductionRate = @"ServicePercentageDeductionRate";
			public static readonly string InspectionPercentageDeductionRate = @"InspectionPercentageDeductionRate";
			public static readonly string ServicePercentageDeduction = @"ServicePercentageDeduction";
			public static readonly string InspectionPercentageDeduction = @"InspectionPercentageDeduction";
			public static readonly string RecruitingBonus = @"RecruitingBonus";
			public static readonly string TotalEarnings = @"TotalEarnings";
			public static readonly string TotalYearToDatePaid = @"TotalYearToDatePaid";
			public static readonly string TotalCellPhonePaid = @"TotalCellPhonePaid";
			public static readonly string TotalGasPaid = @"TotalGasPaid";
			public static readonly string TotalDeductions = @"TotalDeductions";
			public static readonly string BackendCheckAmount = @"BackendCheckAmount";
			public static readonly string IsActive = @"IsActive";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TechBackendID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_TechRecruitingBonuse class.
	/// </summary>
	[DataContract]
	public partial class PR_TechRecruitingBonuseCollection : ActiveList<PR_TechRecruitingBonuse, PR_TechRecruitingBonuseCollection>
	{
		public static PR_TechRecruitingBonuseCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_TechRecruitingBonuseCollection result = new PR_TechRecruitingBonuseCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_TechRecruitingBonuse item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_TechRecruitingBonuses table.
	/// </summary>
	[DataContract]
	public partial class PR_TechRecruitingBonuse : ActiveRecord<PR_TechRecruitingBonuse>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_TechRecruitingBonuse()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_TechRecruitingBonuses", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTechRecruitingBonusID = new TableSchema.TableColumn(schema);
				colvarTechRecruitingBonusID.ColumnName = "TechRecruitingBonusID";
				colvarTechRecruitingBonusID.DataType = DbType.Int32;
				colvarTechRecruitingBonusID.MaxLength = 0;
				colvarTechRecruitingBonusID.AutoIncrement = true;
				colvarTechRecruitingBonusID.IsNullable = false;
				colvarTechRecruitingBonusID.IsPrimaryKey = true;
				colvarTechRecruitingBonusID.IsForeignKey = false;
				colvarTechRecruitingBonusID.IsReadOnly = false;
				colvarTechRecruitingBonusID.DefaultSetting = @"";
				colvarTechRecruitingBonusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechRecruitingBonusID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarBonusRecipientUserID = new TableSchema.TableColumn(schema);
				colvarBonusRecipientUserID.ColumnName = "BonusRecipientUserID";
				colvarBonusRecipientUserID.DataType = DbType.Int32;
				colvarBonusRecipientUserID.MaxLength = 0;
				colvarBonusRecipientUserID.AutoIncrement = false;
				colvarBonusRecipientUserID.IsNullable = false;
				colvarBonusRecipientUserID.IsPrimaryKey = false;
				colvarBonusRecipientUserID.IsForeignKey = true;
				colvarBonusRecipientUserID.IsReadOnly = false;
				colvarBonusRecipientUserID.DefaultSetting = @"";
				colvarBonusRecipientUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarBonusRecipientUserID);

				TableSchema.TableColumn colvarInstallerUserID = new TableSchema.TableColumn(schema);
				colvarInstallerUserID.ColumnName = "InstallerUserID";
				colvarInstallerUserID.DataType = DbType.Int32;
				colvarInstallerUserID.MaxLength = 0;
				colvarInstallerUserID.AutoIncrement = false;
				colvarInstallerUserID.IsNullable = false;
				colvarInstallerUserID.IsPrimaryKey = false;
				colvarInstallerUserID.IsForeignKey = true;
				colvarInstallerUserID.IsReadOnly = false;
				colvarInstallerUserID.DefaultSetting = @"";
				colvarInstallerUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarInstallerUserID);

				TableSchema.TableColumn colvarNInstalls = new TableSchema.TableColumn(schema);
				colvarNInstalls.ColumnName = "NInstalls";
				colvarNInstalls.DataType = DbType.Int32;
				colvarNInstalls.MaxLength = 0;
				colvarNInstalls.AutoIncrement = false;
				colvarNInstalls.IsNullable = false;
				colvarNInstalls.IsPrimaryKey = false;
				colvarNInstalls.IsForeignKey = false;
				colvarNInstalls.IsReadOnly = false;
				colvarNInstalls.DefaultSetting = @"";
				colvarNInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNInstalls);

				TableSchema.TableColumn colvarAmountPerInstall = new TableSchema.TableColumn(schema);
				colvarAmountPerInstall.ColumnName = "AmountPerInstall";
				colvarAmountPerInstall.DataType = DbType.Currency;
				colvarAmountPerInstall.MaxLength = 0;
				colvarAmountPerInstall.AutoIncrement = false;
				colvarAmountPerInstall.IsNullable = false;
				colvarAmountPerInstall.IsPrimaryKey = false;
				colvarAmountPerInstall.IsForeignKey = false;
				colvarAmountPerInstall.IsReadOnly = false;
				colvarAmountPerInstall.DefaultSetting = @"";
				colvarAmountPerInstall.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmountPerInstall);

				TableSchema.TableColumn colvarTotalBonus = new TableSchema.TableColumn(schema);
				colvarTotalBonus.ColumnName = "TotalBonus";
				colvarTotalBonus.DataType = DbType.Currency;
				colvarTotalBonus.MaxLength = 0;
				colvarTotalBonus.AutoIncrement = false;
				colvarTotalBonus.IsNullable = false;
				colvarTotalBonus.IsPrimaryKey = false;
				colvarTotalBonus.IsForeignKey = false;
				colvarTotalBonus.IsReadOnly = false;
				colvarTotalBonus.DefaultSetting = @"";
				colvarTotalBonus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalBonus);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_TechRecruitingBonuses",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_TechRecruitingBonuse LoadFrom(PR_TechRecruitingBonuse item)
		{
			PR_TechRecruitingBonuse result = new PR_TechRecruitingBonuse();
			if (item.TechRecruitingBonusID != default(int)) {
				result.LoadByKey(item.TechRecruitingBonusID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TechRecruitingBonusID {
			get { return GetColumnValue<int>(Columns.TechRecruitingBonusID); }
			set {
				SetColumnValue(Columns.TechRecruitingBonusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechRecruitingBonusID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int BonusRecipientUserID {
			get { return GetColumnValue<int>(Columns.BonusRecipientUserID); }
			set {
				SetColumnValue(Columns.BonusRecipientUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BonusRecipientUserID));
			}
		}
		[DataMember]
		public int InstallerUserID {
			get { return GetColumnValue<int>(Columns.InstallerUserID); }
			set {
				SetColumnValue(Columns.InstallerUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InstallerUserID));
			}
		}
		[DataMember]
		public int NInstalls {
			get { return GetColumnValue<int>(Columns.NInstalls); }
			set {
				SetColumnValue(Columns.NInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NInstalls));
			}
		}
		[DataMember]
		public decimal AmountPerInstall {
			get { return GetColumnValue<decimal>(Columns.AmountPerInstall); }
			set {
				SetColumnValue(Columns.AmountPerInstall, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AmountPerInstall));
			}
		}
		[DataMember]
		public decimal TotalBonus {
			get { return GetColumnValue<decimal>(Columns.TotalBonus); }
			set {
				SetColumnValue(Columns.TotalBonus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalBonus));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _Season;
		//Relationship: FK_PR_TechRecruitingBonuses_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_User _BonusRecipientUser;
		//Relationship: FK_PR_TechRecruitingBonuses_RU_Users
		public RU_User BonusRecipientUser
		{
			get
			{
				if(_BonusRecipientUser == null) {
					_BonusRecipientUser = RU_User.FetchByID(this.BonusRecipientUserID);
				}
				return _BonusRecipientUser;
			}
			set
			{
				SetColumnValue("BonusRecipientUserID", value.UserID);
				_BonusRecipientUser = value;
			}
		}

		private RU_User _InstallerUser;
		//Relationship: FK_PR_TechRecruitingBonuses_RU_Users1
		public RU_User InstallerUser
		{
			get
			{
				if(_InstallerUser == null) {
					_InstallerUser = RU_User.FetchByID(this.InstallerUserID);
				}
				return _InstallerUser;
			}
			set
			{
				SetColumnValue("InstallerUserID", value.UserID);
				_InstallerUser = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TechRecruitingBonusID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TechRecruitingBonusIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BonusRecipientUserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn InstallerUserIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn NInstallsColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AmountPerInstallColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TotalBonusColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TechRecruitingBonusID = @"TechRecruitingBonusID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string BonusRecipientUserID = @"BonusRecipientUserID";
			public static readonly string InstallerUserID = @"InstallerUserID";
			public static readonly string NInstalls = @"NInstalls";
			public static readonly string AmountPerInstall = @"AmountPerInstall";
			public static readonly string TotalBonus = @"TotalBonus";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TechRecruitingBonusID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_TechRecruitingBonusTree class.
	/// </summary>
	[DataContract]
	public partial class PR_TechRecruitingBonusTreeCollection : ActiveList<PR_TechRecruitingBonusTree, PR_TechRecruitingBonusTreeCollection>
	{
		public static PR_TechRecruitingBonusTreeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_TechRecruitingBonusTreeCollection result = new PR_TechRecruitingBonusTreeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_TechRecruitingBonusTree item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_TechRecruitingBonusTree table.
	/// </summary>
	[DataContract]
	public partial class PR_TechRecruitingBonusTree : ActiveRecord<PR_TechRecruitingBonusTree>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_TechRecruitingBonusTree()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_TechRecruitingBonusTree", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTechUserID = new TableSchema.TableColumn(schema);
				colvarTechUserID.ColumnName = "TechUserID";
				colvarTechUserID.DataType = DbType.Int32;
				colvarTechUserID.MaxLength = 0;
				colvarTechUserID.AutoIncrement = false;
				colvarTechUserID.IsNullable = false;
				colvarTechUserID.IsPrimaryKey = true;
				colvarTechUserID.IsForeignKey = false;
				colvarTechUserID.IsReadOnly = false;
				colvarTechUserID.DefaultSetting = @"";
				colvarTechUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechUserID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarRecruiterUserID = new TableSchema.TableColumn(schema);
				colvarRecruiterUserID.ColumnName = "RecruiterUserID";
				colvarRecruiterUserID.DataType = DbType.Int32;
				colvarRecruiterUserID.MaxLength = 0;
				colvarRecruiterUserID.AutoIncrement = false;
				colvarRecruiterUserID.IsNullable = true;
				colvarRecruiterUserID.IsPrimaryKey = false;
				colvarRecruiterUserID.IsForeignKey = true;
				colvarRecruiterUserID.IsReadOnly = false;
				colvarRecruiterUserID.DefaultSetting = @"";
				colvarRecruiterUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarRecruiterUserID);

				TableSchema.TableColumn colvarGetsOwnFromRecruiter = new TableSchema.TableColumn(schema);
				colvarGetsOwnFromRecruiter.ColumnName = "GetsOwnFromRecruiter";
				colvarGetsOwnFromRecruiter.DataType = DbType.Boolean;
				colvarGetsOwnFromRecruiter.MaxLength = 0;
				colvarGetsOwnFromRecruiter.AutoIncrement = false;
				colvarGetsOwnFromRecruiter.IsNullable = false;
				colvarGetsOwnFromRecruiter.IsPrimaryKey = false;
				colvarGetsOwnFromRecruiter.IsForeignKey = false;
				colvarGetsOwnFromRecruiter.IsReadOnly = false;
				colvarGetsOwnFromRecruiter.DefaultSetting = @"((0))";
				colvarGetsOwnFromRecruiter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGetsOwnFromRecruiter);

				TableSchema.TableColumn colvarTreeLevel = new TableSchema.TableColumn(schema);
				colvarTreeLevel.ColumnName = "TreeLevel";
				colvarTreeLevel.DataType = DbType.Int32;
				colvarTreeLevel.MaxLength = 0;
				colvarTreeLevel.AutoIncrement = false;
				colvarTreeLevel.IsNullable = false;
				colvarTreeLevel.IsPrimaryKey = false;
				colvarTreeLevel.IsForeignKey = false;
				colvarTreeLevel.IsReadOnly = false;
				colvarTreeLevel.DefaultSetting = @"((0))";
				colvarTreeLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTreeLevel);

				TableSchema.TableColumn colvarNQualifyingInstalls = new TableSchema.TableColumn(schema);
				colvarNQualifyingInstalls.ColumnName = "NQualifyingInstalls";
				colvarNQualifyingInstalls.DataType = DbType.Int32;
				colvarNQualifyingInstalls.MaxLength = 0;
				colvarNQualifyingInstalls.AutoIncrement = false;
				colvarNQualifyingInstalls.IsNullable = false;
				colvarNQualifyingInstalls.IsPrimaryKey = false;
				colvarNQualifyingInstalls.IsForeignKey = false;
				colvarNQualifyingInstalls.IsReadOnly = false;
				colvarNQualifyingInstalls.DefaultSetting = @"((0))";
				colvarNQualifyingInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNQualifyingInstalls);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_TechRecruitingBonusTree",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_TechRecruitingBonusTree LoadFrom(PR_TechRecruitingBonusTree item)
		{
			PR_TechRecruitingBonusTree result = new PR_TechRecruitingBonusTree();
			if (item.TechUserID != default(int)) {
				result.LoadByKey(item.TechUserID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TechUserID {
			get { return GetColumnValue<int>(Columns.TechUserID); }
			set {
				SetColumnValue(Columns.TechUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechUserID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int? RecruiterUserID {
			get { return GetColumnValue<int?>(Columns.RecruiterUserID); }
			set {
				SetColumnValue(Columns.RecruiterUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruiterUserID));
			}
		}
		[DataMember]
		public bool GetsOwnFromRecruiter {
			get { return GetColumnValue<bool>(Columns.GetsOwnFromRecruiter); }
			set {
				SetColumnValue(Columns.GetsOwnFromRecruiter, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GetsOwnFromRecruiter));
			}
		}
		[DataMember]
		public int TreeLevel {
			get { return GetColumnValue<int>(Columns.TreeLevel); }
			set {
				SetColumnValue(Columns.TreeLevel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TreeLevel));
			}
		}
		[DataMember]
		public int NQualifyingInstalls {
			get { return GetColumnValue<int>(Columns.NQualifyingInstalls); }
			set {
				SetColumnValue(Columns.NQualifyingInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NQualifyingInstalls));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _Season;
		//Relationship: FK_PR_TechRecruitingBonusTree_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_User _TechUser;
		//Relationship: FK_PR_TechRecruitingBonusTree_RU_Users
		public RU_User TechUser
		{
			get
			{
				if(_TechUser == null) {
					_TechUser = RU_User.FetchByID(this.TechUserID);
				}
				return _TechUser;
			}
			set
			{
				SetColumnValue("TechUserID", value.UserID);
				_TechUser = value;
			}
		}

		private RU_User _RecruiterUser;
		//Relationship: FK_PR_TechRecruitingBonusTree_RU_Users1
		public RU_User RecruiterUser
		{
			get
			{
				if(_RecruiterUser == null) {
					_RecruiterUser = RU_User.FetchByID(this.RecruiterUserID);
				}
				return _RecruiterUser;
			}
			set
			{
				SetColumnValue("RecruiterUserID", value.UserID);
				_RecruiterUser = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TechUserID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TechUserIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RecruiterUserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GetsOwnFromRecruiterColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TreeLevelColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn NQualifyingInstallsColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TechUserID = @"TechUserID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string RecruiterUserID = @"RecruiterUserID";
			public static readonly string GetsOwnFromRecruiter = @"GetsOwnFromRecruiter";
			public static readonly string TreeLevel = @"TreeLevel";
			public static readonly string NQualifyingInstalls = @"NQualifyingInstalls";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TechUserID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_TransactionCategory class.
	/// </summary>
	[DataContract]
	public partial class PR_TransactionCategoryCollection : ActiveList<PR_TransactionCategory, PR_TransactionCategoryCollection>
	{
		public static PR_TransactionCategoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_TransactionCategoryCollection result = new PR_TransactionCategoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_TransactionCategory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_TransactionCategories table.
	/// </summary>
	[DataContract]
	public partial class PR_TransactionCategory : ActiveRecord<PR_TransactionCategory>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum TransactionCategoryEnum : int
		{
			[EnumMember()] Sales_Commission = 1,
			[EnumMember()] Install_Commission = 2,
			[EnumMember()] Advance = 3,
			[EnumMember()] Rent = 4,
			[EnumMember()] Incentives = 5,
			[EnumMember()] Travel = 6,
			[EnumMember()] Sales_Deduction = 7,
		}

		//[DataMember]
		//public TransactionCategoryEnum TransactionCategoryCode
		//{
		//	get { return (TransactionCategoryEnum)TransactionCategoryID; }
		//	set { TransactionCategoryID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_TransactionCategory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_TransactionCategories", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTransactionCategoryID = new TableSchema.TableColumn(schema);
				colvarTransactionCategoryID.ColumnName = "TransactionCategoryID";
				colvarTransactionCategoryID.DataType = DbType.Int32;
				colvarTransactionCategoryID.MaxLength = 0;
				colvarTransactionCategoryID.AutoIncrement = true;
				colvarTransactionCategoryID.IsNullable = false;
				colvarTransactionCategoryID.IsPrimaryKey = true;
				colvarTransactionCategoryID.IsForeignKey = false;
				colvarTransactionCategoryID.IsReadOnly = false;
				colvarTransactionCategoryID.DefaultSetting = @"";
				colvarTransactionCategoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionCategoryID);

				TableSchema.TableColumn colvarTransactionCategory = new TableSchema.TableColumn(schema);
				colvarTransactionCategory.ColumnName = "TransactionCategory";
				colvarTransactionCategory.DataType = DbType.String;
				colvarTransactionCategory.MaxLength = 50;
				colvarTransactionCategory.AutoIncrement = false;
				colvarTransactionCategory.IsNullable = false;
				colvarTransactionCategory.IsPrimaryKey = false;
				colvarTransactionCategory.IsForeignKey = false;
				colvarTransactionCategory.IsReadOnly = false;
				colvarTransactionCategory.DefaultSetting = @"";
				colvarTransactionCategory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionCategory);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_TransactionCategories",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_TransactionCategory LoadFrom(PR_TransactionCategory item)
		{
			PR_TransactionCategory result = new PR_TransactionCategory();
			if (item.TransactionCategoryID != default(int)) {
				result.LoadByKey(item.TransactionCategoryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TransactionCategoryID {
			get { return GetColumnValue<int>(Columns.TransactionCategoryID); }
			set {
				SetColumnValue(Columns.TransactionCategoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionCategoryID));
			}
		}
		[DataMember]
		public string TransactionCategory {
			get { return GetColumnValue<string>(Columns.TransactionCategory); }
			set {
				SetColumnValue(Columns.TransactionCategory, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionCategory));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return TransactionCategory;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TransactionCategoryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TransactionCategoryColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TransactionCategoryID = @"TransactionCategoryID";
			public static readonly string TransactionCategory = @"TransactionCategory";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TransactionCategoryID; }
		}
		*/

		#region Foreign Collections

		private PR_TransactionTypeCollection _PR_TransactionTypesCol;
		//Relationship: FK_PR_TransactionTypes_PR_TransactionCategories
		public PR_TransactionTypeCollection PR_TransactionTypesCol
		{
			get
			{
				if(_PR_TransactionTypesCol == null) {
					_PR_TransactionTypesCol = new PR_TransactionTypeCollection();
					_PR_TransactionTypesCol.LoadAndCloseReader(PR_TransactionType.Query()
						.WHERE(PR_TransactionType.Columns.TransactionCategoryID, TransactionCategoryID).ExecuteReader());
				}
				return _PR_TransactionTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_TransactionCode class.
	/// </summary>
	[DataContract]
	public partial class PR_TransactionCodeCollection : ActiveList<PR_TransactionCode, PR_TransactionCodeCollection>
	{
		public static PR_TransactionCodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_TransactionCodeCollection result = new PR_TransactionCodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_TransactionCode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_TransactionCodes table.
	/// </summary>
	[DataContract]
	public partial class PR_TransactionCode : ActiveRecord<PR_TransactionCode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_TransactionCode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_TransactionCodes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTransactionCodeID = new TableSchema.TableColumn(schema);
				colvarTransactionCodeID.ColumnName = "TransactionCodeID";
				colvarTransactionCodeID.DataType = DbType.Int32;
				colvarTransactionCodeID.MaxLength = 0;
				colvarTransactionCodeID.AutoIncrement = true;
				colvarTransactionCodeID.IsNullable = false;
				colvarTransactionCodeID.IsPrimaryKey = true;
				colvarTransactionCodeID.IsForeignKey = false;
				colvarTransactionCodeID.IsReadOnly = false;
				colvarTransactionCodeID.DefaultSetting = @"";
				colvarTransactionCodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionCodeID);

				TableSchema.TableColumn colvarGPPayCode = new TableSchema.TableColumn(schema);
				colvarGPPayCode.ColumnName = "GPPayCode";
				colvarGPPayCode.DataType = DbType.String;
				colvarGPPayCode.MaxLength = 10;
				colvarGPPayCode.AutoIncrement = false;
				colvarGPPayCode.IsNullable = true;
				colvarGPPayCode.IsPrimaryKey = false;
				colvarGPPayCode.IsForeignKey = false;
				colvarGPPayCode.IsReadOnly = false;
				colvarGPPayCode.DefaultSetting = @"";
				colvarGPPayCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPPayCode);

				TableSchema.TableColumn colvarGPDeductionCode = new TableSchema.TableColumn(schema);
				colvarGPDeductionCode.ColumnName = "GPDeductionCode";
				colvarGPDeductionCode.DataType = DbType.String;
				colvarGPDeductionCode.MaxLength = 10;
				colvarGPDeductionCode.AutoIncrement = false;
				colvarGPDeductionCode.IsNullable = true;
				colvarGPDeductionCode.IsPrimaryKey = false;
				colvarGPDeductionCode.IsForeignKey = false;
				colvarGPDeductionCode.IsReadOnly = false;
				colvarGPDeductionCode.DefaultSetting = @"";
				colvarGPDeductionCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPDeductionCode);

				TableSchema.TableColumn colvarGPDocumentNumberCode = new TableSchema.TableColumn(schema);
				colvarGPDocumentNumberCode.ColumnName = "GPDocumentNumberCode";
				colvarGPDocumentNumberCode.DataType = DbType.String;
				colvarGPDocumentNumberCode.MaxLength = 20;
				colvarGPDocumentNumberCode.AutoIncrement = false;
				colvarGPDocumentNumberCode.IsNullable = false;
				colvarGPDocumentNumberCode.IsPrimaryKey = false;
				colvarGPDocumentNumberCode.IsForeignKey = false;
				colvarGPDocumentNumberCode.IsReadOnly = false;
				colvarGPDocumentNumberCode.DefaultSetting = @"";
				colvarGPDocumentNumberCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPDocumentNumberCode);

				TableSchema.TableColumn colvarGPPurchaseOrderCode = new TableSchema.TableColumn(schema);
				colvarGPPurchaseOrderCode.ColumnName = "GPPurchaseOrderCode";
				colvarGPPurchaseOrderCode.DataType = DbType.String;
				colvarGPPurchaseOrderCode.MaxLength = 50;
				colvarGPPurchaseOrderCode.AutoIncrement = false;
				colvarGPPurchaseOrderCode.IsNullable = false;
				colvarGPPurchaseOrderCode.IsPrimaryKey = false;
				colvarGPPurchaseOrderCode.IsForeignKey = false;
				colvarGPPurchaseOrderCode.IsReadOnly = false;
				colvarGPPurchaseOrderCode.DefaultSetting = @"";
				colvarGPPurchaseOrderCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPPurchaseOrderCode);

				TableSchema.TableColumn colvarGLCode = new TableSchema.TableColumn(schema);
				colvarGLCode.ColumnName = "GLCode";
				colvarGLCode.DataType = DbType.String;
				colvarGLCode.MaxLength = 10;
				colvarGLCode.AutoIncrement = false;
				colvarGLCode.IsNullable = false;
				colvarGLCode.IsPrimaryKey = false;
				colvarGLCode.IsForeignKey = false;
				colvarGLCode.IsReadOnly = false;
				colvarGLCode.DefaultSetting = @"";
				colvarGLCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGLCode);

				TableSchema.TableColumn colvarIsAmountValid1099 = new TableSchema.TableColumn(schema);
				colvarIsAmountValid1099.ColumnName = "IsAmountValid1099";
				colvarIsAmountValid1099.DataType = DbType.Boolean;
				colvarIsAmountValid1099.MaxLength = 0;
				colvarIsAmountValid1099.AutoIncrement = false;
				colvarIsAmountValid1099.IsNullable = false;
				colvarIsAmountValid1099.IsPrimaryKey = false;
				colvarIsAmountValid1099.IsForeignKey = false;
				colvarIsAmountValid1099.IsReadOnly = false;
				colvarIsAmountValid1099.DefaultSetting = @"";
				colvarIsAmountValid1099.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAmountValid1099);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_TransactionCodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_TransactionCode LoadFrom(PR_TransactionCode item)
		{
			PR_TransactionCode result = new PR_TransactionCode();
			if (item.TransactionCodeID != default(int)) {
				result.LoadByKey(item.TransactionCodeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TransactionCodeID {
			get { return GetColumnValue<int>(Columns.TransactionCodeID); }
			set {
				SetColumnValue(Columns.TransactionCodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionCodeID));
			}
		}
		[DataMember]
		public string GPPayCode {
			get { return GetColumnValue<string>(Columns.GPPayCode); }
			set {
				SetColumnValue(Columns.GPPayCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPPayCode));
			}
		}
		[DataMember]
		public string GPDeductionCode {
			get { return GetColumnValue<string>(Columns.GPDeductionCode); }
			set {
				SetColumnValue(Columns.GPDeductionCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPDeductionCode));
			}
		}
		[DataMember]
		public string GPDocumentNumberCode {
			get { return GetColumnValue<string>(Columns.GPDocumentNumberCode); }
			set {
				SetColumnValue(Columns.GPDocumentNumberCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPDocumentNumberCode));
			}
		}
		[DataMember]
		public string GPPurchaseOrderCode {
			get { return GetColumnValue<string>(Columns.GPPurchaseOrderCode); }
			set {
				SetColumnValue(Columns.GPPurchaseOrderCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPPurchaseOrderCode));
			}
		}
		[DataMember]
		public string GLCode {
			get { return GetColumnValue<string>(Columns.GLCode); }
			set {
				SetColumnValue(Columns.GLCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GLCode));
			}
		}
		[DataMember]
		public bool IsAmountValid1099 {
			get { return GetColumnValue<bool>(Columns.IsAmountValid1099); }
			set {
				SetColumnValue(Columns.IsAmountValid1099, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAmountValid1099));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return GPPayCode;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TransactionCodeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn GPPayCodeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn GPDeductionCodeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GPDocumentNumberCodeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPPurchaseOrderCodeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn GLCodeColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsAmountValid1099Column
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TransactionCodeID = @"TransactionCodeID";
			public static readonly string GPPayCode = @"GPPayCode";
			public static readonly string GPDeductionCode = @"GPDeductionCode";
			public static readonly string GPDocumentNumberCode = @"GPDocumentNumberCode";
			public static readonly string GPPurchaseOrderCode = @"GPPurchaseOrderCode";
			public static readonly string GLCode = @"GLCode";
			public static readonly string IsAmountValid1099 = @"IsAmountValid1099";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TransactionCodeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PR_Transaction class.
	/// </summary>
	[DataContract]
	public partial class PR_TransactionCollection : ActiveList<PR_Transaction, PR_TransactionCollection>
	{
		public static PR_TransactionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_TransactionCollection result = new PR_TransactionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_Transaction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_Transactions table.
	/// </summary>
	[DataContract]
	public partial class PR_Transaction : ActiveRecord<PR_Transaction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_Transaction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_Transactions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTransactionID = new TableSchema.TableColumn(schema);
				colvarTransactionID.ColumnName = "TransactionID";
				colvarTransactionID.DataType = DbType.Int64;
				colvarTransactionID.MaxLength = 0;
				colvarTransactionID.AutoIncrement = true;
				colvarTransactionID.IsNullable = false;
				colvarTransactionID.IsPrimaryKey = true;
				colvarTransactionID.IsForeignKey = false;
				colvarTransactionID.IsReadOnly = false;
				colvarTransactionID.DefaultSetting = @"";
				colvarTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionID);

				TableSchema.TableColumn colvarTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarTransactionTypeID.ColumnName = "TransactionTypeID";
				colvarTransactionTypeID.DataType = DbType.Int32;
				colvarTransactionTypeID.MaxLength = 0;
				colvarTransactionTypeID.AutoIncrement = false;
				colvarTransactionTypeID.IsNullable = false;
				colvarTransactionTypeID.IsPrimaryKey = false;
				colvarTransactionTypeID.IsForeignKey = true;
				colvarTransactionTypeID.IsReadOnly = false;
				colvarTransactionTypeID.DefaultSetting = @"";
				colvarTransactionTypeID.ForeignKeyTableName = "PR_TransactionTypes";
				schema.Columns.Add(colvarTransactionTypeID);

				TableSchema.TableColumn colvarTargetPayPeriodID = new TableSchema.TableColumn(schema);
				colvarTargetPayPeriodID.ColumnName = "TargetPayPeriodID";
				colvarTargetPayPeriodID.DataType = DbType.Int32;
				colvarTargetPayPeriodID.MaxLength = 0;
				colvarTargetPayPeriodID.AutoIncrement = false;
				colvarTargetPayPeriodID.IsNullable = false;
				colvarTargetPayPeriodID.IsPrimaryKey = false;
				colvarTargetPayPeriodID.IsForeignKey = true;
				colvarTargetPayPeriodID.IsReadOnly = false;
				colvarTargetPayPeriodID.DefaultSetting = @"";
				colvarTargetPayPeriodID.ForeignKeyTableName = "PR_PayPeriods";
				schema.Columns.Add(colvarTargetPayPeriodID);

				TableSchema.TableColumn colvarPaycheckID = new TableSchema.TableColumn(schema);
				colvarPaycheckID.ColumnName = "PaycheckID";
				colvarPaycheckID.DataType = DbType.Int32;
				colvarPaycheckID.MaxLength = 0;
				colvarPaycheckID.AutoIncrement = false;
				colvarPaycheckID.IsNullable = true;
				colvarPaycheckID.IsPrimaryKey = false;
				colvarPaycheckID.IsForeignKey = true;
				colvarPaycheckID.IsReadOnly = false;
				colvarPaycheckID.DefaultSetting = @"";
				colvarPaycheckID.ForeignKeyTableName = "PR_Paychecks";
				schema.Columns.Add(colvarPaycheckID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = true;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarServiceTicketID = new TableSchema.TableColumn(schema);
				colvarServiceTicketID.ColumnName = "ServiceTicketID";
				colvarServiceTicketID.DataType = DbType.Int32;
				colvarServiceTicketID.MaxLength = 0;
				colvarServiceTicketID.AutoIncrement = false;
				colvarServiceTicketID.IsNullable = true;
				colvarServiceTicketID.IsPrimaryKey = false;
				colvarServiceTicketID.IsForeignKey = false;
				colvarServiceTicketID.IsReadOnly = false;
				colvarServiceTicketID.DefaultSetting = @"";
				colvarServiceTicketID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceTicketID);

				TableSchema.TableColumn colvarBarcodeID = new TableSchema.TableColumn(schema);
				colvarBarcodeID.ColumnName = "BarcodeID";
				colvarBarcodeID.DataType = DbType.String;
				colvarBarcodeID.MaxLength = 25;
				colvarBarcodeID.AutoIncrement = false;
				colvarBarcodeID.IsNullable = true;
				colvarBarcodeID.IsPrimaryKey = false;
				colvarBarcodeID.IsForeignKey = false;
				colvarBarcodeID.IsReadOnly = false;
				colvarBarcodeID.DefaultSetting = @"";
				colvarBarcodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcodeID);

				TableSchema.TableColumn colvarAutomaticTransactionID = new TableSchema.TableColumn(schema);
				colvarAutomaticTransactionID.ColumnName = "AutomaticTransactionID";
				colvarAutomaticTransactionID.DataType = DbType.Int32;
				colvarAutomaticTransactionID.MaxLength = 0;
				colvarAutomaticTransactionID.AutoIncrement = false;
				colvarAutomaticTransactionID.IsNullable = true;
				colvarAutomaticTransactionID.IsPrimaryKey = false;
				colvarAutomaticTransactionID.IsForeignKey = false;
				colvarAutomaticTransactionID.IsReadOnly = false;
				colvarAutomaticTransactionID.DefaultSetting = @"";
				colvarAutomaticTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAutomaticTransactionID);

				TableSchema.TableColumn colvarWeeklyTransactionID = new TableSchema.TableColumn(schema);
				colvarWeeklyTransactionID.ColumnName = "WeeklyTransactionID";
				colvarWeeklyTransactionID.DataType = DbType.Int32;
				colvarWeeklyTransactionID.MaxLength = 0;
				colvarWeeklyTransactionID.AutoIncrement = false;
				colvarWeeklyTransactionID.IsNullable = true;
				colvarWeeklyTransactionID.IsPrimaryKey = false;
				colvarWeeklyTransactionID.IsForeignKey = true;
				colvarWeeklyTransactionID.IsReadOnly = false;
				colvarWeeklyTransactionID.DefaultSetting = @"";
				colvarWeeklyTransactionID.ForeignKeyTableName = "PR_WeeklyTransactions";
				schema.Columns.Add(colvarWeeklyTransactionID);

				TableSchema.TableColumn colvarCalculationID = new TableSchema.TableColumn(schema);
				colvarCalculationID.ColumnName = "CalculationID";
				colvarCalculationID.DataType = DbType.Int64;
				colvarCalculationID.MaxLength = 0;
				colvarCalculationID.AutoIncrement = false;
				colvarCalculationID.IsNullable = true;
				colvarCalculationID.IsPrimaryKey = false;
				colvarCalculationID.IsForeignKey = true;
				colvarCalculationID.IsReadOnly = false;
				colvarCalculationID.DefaultSetting = @"";
				colvarCalculationID.ForeignKeyTableName = "PR_AccountCalculations";
				schema.Columns.Add(colvarCalculationID);

				TableSchema.TableColumn colvarAccountStateID = new TableSchema.TableColumn(schema);
				colvarAccountStateID.ColumnName = "AccountStateID";
				colvarAccountStateID.DataType = DbType.Int32;
				colvarAccountStateID.MaxLength = 0;
				colvarAccountStateID.AutoIncrement = false;
				colvarAccountStateID.IsNullable = true;
				colvarAccountStateID.IsPrimaryKey = false;
				colvarAccountStateID.IsForeignKey = true;
				colvarAccountStateID.IsReadOnly = false;
				colvarAccountStateID.DefaultSetting = @"";
				colvarAccountStateID.ForeignKeyTableName = "PR_AccountStates";
				schema.Columns.Add(colvarAccountStateID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 25;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarSalesPointsDelta = new TableSchema.TableColumn(schema);
				colvarSalesPointsDelta.ColumnName = "SalesPointsDelta";
				colvarSalesPointsDelta.DataType = DbType.Decimal;
				colvarSalesPointsDelta.MaxLength = 0;
				colvarSalesPointsDelta.AutoIncrement = false;
				colvarSalesPointsDelta.IsNullable = true;
				colvarSalesPointsDelta.IsPrimaryKey = false;
				colvarSalesPointsDelta.IsForeignKey = false;
				colvarSalesPointsDelta.IsReadOnly = false;
				colvarSalesPointsDelta.DefaultSetting = @"";
				colvarSalesPointsDelta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesPointsDelta);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_Transactions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_Transaction LoadFrom(PR_Transaction item)
		{
			PR_Transaction result = new PR_Transaction();
			if (item.TransactionID != default(long)) {
				result.LoadByKey(item.TransactionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long TransactionID {
			get { return GetColumnValue<long>(Columns.TransactionID); }
			set {
				SetColumnValue(Columns.TransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionID));
			}
		}
		[DataMember]
		public int TransactionTypeID {
			get { return GetColumnValue<int>(Columns.TransactionTypeID); }
			set {
				SetColumnValue(Columns.TransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionTypeID));
			}
		}
		[DataMember]
		public int TargetPayPeriodID {
			get { return GetColumnValue<int>(Columns.TargetPayPeriodID); }
			set {
				SetColumnValue(Columns.TargetPayPeriodID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TargetPayPeriodID));
			}
		}
		[DataMember]
		public int? PaycheckID {
			get { return GetColumnValue<int?>(Columns.PaycheckID); }
			set {
				SetColumnValue(Columns.PaycheckID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PaycheckID));
			}
		}
		[DataMember]
		public int? AccountID {
			get { return GetColumnValue<int?>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public int? ServiceTicketID {
			get { return GetColumnValue<int?>(Columns.ServiceTicketID); }
			set {
				SetColumnValue(Columns.ServiceTicketID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ServiceTicketID));
			}
		}
		[DataMember]
		public string BarcodeID {
			get { return GetColumnValue<string>(Columns.BarcodeID); }
			set {
				SetColumnValue(Columns.BarcodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BarcodeID));
			}
		}
		[DataMember]
		public int? AutomaticTransactionID {
			get { return GetColumnValue<int?>(Columns.AutomaticTransactionID); }
			set {
				SetColumnValue(Columns.AutomaticTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AutomaticTransactionID));
			}
		}
		[DataMember]
		public int? WeeklyTransactionID {
			get { return GetColumnValue<int?>(Columns.WeeklyTransactionID); }
			set {
				SetColumnValue(Columns.WeeklyTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WeeklyTransactionID));
			}
		}
		[DataMember]
		public long? CalculationID {
			get { return GetColumnValue<long?>(Columns.CalculationID); }
			set {
				SetColumnValue(Columns.CalculationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CalculationID));
			}
		}
		[DataMember]
		public int? AccountStateID {
			get { return GetColumnValue<int?>(Columns.AccountStateID); }
			set {
				SetColumnValue(Columns.AccountStateID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountStateID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public decimal? SalesPointsDelta {
			get { return GetColumnValue<decimal?>(Columns.SalesPointsDelta); }
			set {
				SetColumnValue(Columns.SalesPointsDelta, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesPointsDelta));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_AccountCalculation _Calculation;
		//Relationship: FK_PR_Transactions_PR_AccountCalculations
		public PR_AccountCalculation Calculation
		{
			get
			{
				if(_Calculation == null) {
					_Calculation = PR_AccountCalculation.FetchByID(this.CalculationID);
				}
				return _Calculation;
			}
			set
			{
				SetColumnValue("CalculationID", value.CalculationID);
				_Calculation = value;
			}
		}

		private PR_AccountState _AccountState;
		//Relationship: FK_PR_Transactions_PR_AccountStates
		public PR_AccountState AccountState
		{
			get
			{
				if(_AccountState == null) {
					_AccountState = PR_AccountState.FetchByID(this.AccountStateID);
				}
				return _AccountState;
			}
			set
			{
				SetColumnValue("AccountStateID", value.AccountStateID);
				_AccountState = value;
			}
		}

		private PR_Paycheck _Paycheck;
		//Relationship: FK_PR_Transactions_PR_Paychecks
		public PR_Paycheck Paycheck
		{
			get
			{
				if(_Paycheck == null) {
					_Paycheck = PR_Paycheck.FetchByID(this.PaycheckID);
				}
				return _Paycheck;
			}
			set
			{
				SetColumnValue("PaycheckID", value.PaycheckID);
				_Paycheck = value;
			}
		}

		private PR_PayPeriod _TargetPayPeriod;
		//Relationship: FK_PR_Transactions_PR_PayPeriods
		public PR_PayPeriod TargetPayPeriod
		{
			get
			{
				if(_TargetPayPeriod == null) {
					_TargetPayPeriod = PR_PayPeriod.FetchByID(this.TargetPayPeriodID);
				}
				return _TargetPayPeriod;
			}
			set
			{
				SetColumnValue("TargetPayPeriodID", value.PayPeriodID);
				_TargetPayPeriod = value;
			}
		}

		private PR_TransactionType _TransactionType;
		//Relationship: FK_PR_Transactions_PR_TransactionTypes
		public PR_TransactionType TransactionType
		{
			get
			{
				if(_TransactionType == null) {
					_TransactionType = PR_TransactionType.FetchByID(this.TransactionTypeID);
				}
				return _TransactionType;
			}
			set
			{
				SetColumnValue("TransactionTypeID", value.TransactionTypeID);
				_TransactionType = value;
			}
		}

		private PR_WeeklyTransaction _WeeklyTransaction;
		//Relationship: FK_PR_Transactions_PR_WeeklyTransactions
		public PR_WeeklyTransaction WeeklyTransaction
		{
			get
			{
				if(_WeeklyTransaction == null) {
					_WeeklyTransaction = PR_WeeklyTransaction.FetchByID(this.WeeklyTransactionID);
				}
				return _WeeklyTransaction;
			}
			set
			{
				SetColumnValue("WeeklyTransactionID", value.WeeklyTransactionID);
				_WeeklyTransaction = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TransactionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TransactionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TransactionTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TargetPayPeriodIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PaycheckIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ServiceTicketIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn BarcodeIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AutomaticTransactionIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn WeeklyTransactionIDColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CalculationIDColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn AccountStateIDColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn SalesPointsDeltaColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[17]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TransactionID = @"TransactionID";
			public static readonly string TransactionTypeID = @"TransactionTypeID";
			public static readonly string TargetPayPeriodID = @"TargetPayPeriodID";
			public static readonly string PaycheckID = @"PaycheckID";
			public static readonly string AccountID = @"AccountID";
			public static readonly string ServiceTicketID = @"ServiceTicketID";
			public static readonly string BarcodeID = @"BarcodeID";
			public static readonly string AutomaticTransactionID = @"AutomaticTransactionID";
			public static readonly string WeeklyTransactionID = @"WeeklyTransactionID";
			public static readonly string CalculationID = @"CalculationID";
			public static readonly string AccountStateID = @"AccountStateID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Comments = @"Comments";
			public static readonly string Amount = @"Amount";
			public static readonly string SalesPointsDelta = @"SalesPointsDelta";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TransactionID; }
		}
		*/

		#region Foreign Collections

		private PR_OfficeTransactionCollection _PR_OfficeTransactionsCol;
		//Relationship: FK_PR_OfficeTransactions_PR_Transactions
		public PR_OfficeTransactionCollection PR_OfficeTransactionsCol
		{
			get
			{
				if(_PR_OfficeTransactionsCol == null) {
					_PR_OfficeTransactionsCol = new PR_OfficeTransactionCollection();
					_PR_OfficeTransactionsCol.LoadAndCloseReader(PR_OfficeTransaction.Query()
						.WHERE(PR_OfficeTransaction.Columns.SourceTransactionID, TransactionID).ExecuteReader());
				}
				return _PR_OfficeTransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_TransactionType class.
	/// </summary>
	[DataContract]
	public partial class PR_TransactionTypeCollection : ActiveList<PR_TransactionType, PR_TransactionTypeCollection>
	{
		public static PR_TransactionTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_TransactionTypeCollection result = new PR_TransactionTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_TransactionType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_TransactionTypes table.
	/// </summary>
	[DataContract]
	public partial class PR_TransactionType : ActiveRecord<PR_TransactionType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum TransactionTypeEnum : int
		{
			[EnumMember()] Account_Sale_Commission = 1,
			[EnumMember()] Account_Sale_Adjustment = 2,
			[EnumMember()] Account_Sale_Bonus = 3,
			[EnumMember()] Account_Sale_Deduction = 4,
			[EnumMember()] Account_Install = 5,
			[EnumMember()] Account_Install_Adjustment = 6,
			[EnumMember()] Account_Install_Bonus = 7,
			[EnumMember()] Account_Install_Deduction = 8,
			[EnumMember()] Advance = 9,
			[EnumMember()] Rent_Deduction = 10,
			[EnumMember()] Pet_Rent = 12,
			[EnumMember()] Gas_Deduction = 13,
			[EnumMember()] Utilities_Deduction = 14,
			[EnumMember()] Cell_Phone_Reimbursement = 15,
			[EnumMember()] Gas_Reimbursement = 16,
			[EnumMember()] Service_Call = 17,
			[EnumMember()] Lost_Inventory_Charge = 18,
			[EnumMember()] Late_To_Meeting = 19,
			[EnumMember()] Miscellaneous_Deduction = 20,
			[EnumMember()] Missed_Meeting = 22,
			[EnumMember()] Missed_Conference_Call = 23,
			[EnumMember()] Bonus = 24,
			[EnumMember()] Memorial_Day_Incentive = 28,
			[EnumMember()] Service_Call_Deduction = 29,
			[EnumMember()] Manual_Gas_Deduction = 32,
			[EnumMember()] Fee_Adjustment = 33,
			[EnumMember()] Lunch_Deduction = 39,
			[EnumMember()] Late_Or_Incorrect_Paperwork = 40,
			[EnumMember()] Missed_Work = 41,
			[EnumMember()] Improper_Uniform = 42,
			[EnumMember()] Apartment_Fine = 46,
			[EnumMember()] Service_Call_No_Show = 48,
			[EnumMember()] Independence_Day_Incentive = 49,
			[EnumMember()] Lost_Inventory_Adjustment = 51,
			[EnumMember()] Not_Riding_In_The_Assigned_Car_Group = 52,
			[EnumMember()] Rental_Car = 53,
			[EnumMember()] Platinum_Open = 54,
			[EnumMember()] Service_Tech_Salary = 55,
			[EnumMember()] Lead_Tech_Salary = 56,
			[EnumMember()] Furniture_Deduction = 57,
			[EnumMember()] Signing_Bonus = 58,
			[EnumMember()] Residual = 59,
			[EnumMember()] Travel_Money = 60,
			[EnumMember()] Extra_Travel_Money = 61,
			[EnumMember()] Lowered_Mmr_Deduction = 62,
			[EnumMember()] Activation_Waive_Deduction = 63,
			[EnumMember()] Invoice_Bill_Deduction = 64,
			[EnumMember()] Pass_Credit_Deduction = 66,
			[EnumMember()] Shortened_Contract_Deduction = 67,
			[EnumMember()] Point_Bank = 68,
			[EnumMember()] Training_Money = 69,
			[EnumMember()] Uncollected_Deductions = 70,
			[EnumMember()] Garnishment = 71,
			[EnumMember()] Rent_Refund = 72,
			[EnumMember()] Utilities_Refund = 73,
			[EnumMember()] Advance_Adjustment = 74,
			[EnumMember()] Laundry_Money = 75,
			[EnumMember()] Pet_Deposit = 77,
			[EnumMember()] Apartment_Damages = 78,
			[EnumMember()] Preseason_Recruiting_Incentive = 79,
			[EnumMember()] Activation_Point_Bank = 80,
			[EnumMember()] Commission_Adjustment = 81,
		}

		//[DataMember]
		//public TransactionTypeEnum TransactionTypeCode
		//{
		//	get { return (TransactionTypeEnum)TransactionTypeID; }
		//	set { TransactionTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_TransactionType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_TransactionTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarTransactionTypeID.ColumnName = "TransactionTypeID";
				colvarTransactionTypeID.DataType = DbType.Int32;
				colvarTransactionTypeID.MaxLength = 0;
				colvarTransactionTypeID.AutoIncrement = true;
				colvarTransactionTypeID.IsNullable = false;
				colvarTransactionTypeID.IsPrimaryKey = true;
				colvarTransactionTypeID.IsForeignKey = false;
				colvarTransactionTypeID.IsReadOnly = false;
				colvarTransactionTypeID.DefaultSetting = @"";
				colvarTransactionTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionTypeID);

				TableSchema.TableColumn colvarTransactionTypeName = new TableSchema.TableColumn(schema);
				colvarTransactionTypeName.ColumnName = "TransactionTypeName";
				colvarTransactionTypeName.DataType = DbType.String;
				colvarTransactionTypeName.MaxLength = 100;
				colvarTransactionTypeName.AutoIncrement = false;
				colvarTransactionTypeName.IsNullable = false;
				colvarTransactionTypeName.IsPrimaryKey = false;
				colvarTransactionTypeName.IsForeignKey = false;
				colvarTransactionTypeName.IsReadOnly = false;
				colvarTransactionTypeName.DefaultSetting = @"";
				colvarTransactionTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTransactionTypeName);

				TableSchema.TableColumn colvarTransactionCategoryID = new TableSchema.TableColumn(schema);
				colvarTransactionCategoryID.ColumnName = "TransactionCategoryID";
				colvarTransactionCategoryID.DataType = DbType.Int32;
				colvarTransactionCategoryID.MaxLength = 0;
				colvarTransactionCategoryID.AutoIncrement = false;
				colvarTransactionCategoryID.IsNullable = true;
				colvarTransactionCategoryID.IsPrimaryKey = false;
				colvarTransactionCategoryID.IsForeignKey = true;
				colvarTransactionCategoryID.IsReadOnly = false;
				colvarTransactionCategoryID.DefaultSetting = @"";
				colvarTransactionCategoryID.ForeignKeyTableName = "PR_TransactionCategories";
				schema.Columns.Add(colvarTransactionCategoryID);

				TableSchema.TableColumn colvarFriendlyName = new TableSchema.TableColumn(schema);
				colvarFriendlyName.ColumnName = "FriendlyName";
				colvarFriendlyName.DataType = DbType.String;
				colvarFriendlyName.MaxLength = 100;
				colvarFriendlyName.AutoIncrement = false;
				colvarFriendlyName.IsNullable = false;
				colvarFriendlyName.IsPrimaryKey = false;
				colvarFriendlyName.IsForeignKey = false;
				colvarFriendlyName.IsReadOnly = false;
				colvarFriendlyName.DefaultSetting = @"";
				colvarFriendlyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFriendlyName);

				TableSchema.TableColumn colvarBackendTypeName = new TableSchema.TableColumn(schema);
				colvarBackendTypeName.ColumnName = "BackendTypeName";
				colvarBackendTypeName.DataType = DbType.String;
				colvarBackendTypeName.MaxLength = 100;
				colvarBackendTypeName.AutoIncrement = false;
				colvarBackendTypeName.IsNullable = false;
				colvarBackendTypeName.IsPrimaryKey = false;
				colvarBackendTypeName.IsForeignKey = false;
				colvarBackendTypeName.IsReadOnly = false;
				colvarBackendTypeName.DefaultSetting = @"";
				colvarBackendTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendTypeName);

				TableSchema.TableColumn colvarIsAlwaysDeduction = new TableSchema.TableColumn(schema);
				colvarIsAlwaysDeduction.ColumnName = "IsAlwaysDeduction";
				colvarIsAlwaysDeduction.DataType = DbType.Boolean;
				colvarIsAlwaysDeduction.MaxLength = 0;
				colvarIsAlwaysDeduction.AutoIncrement = false;
				colvarIsAlwaysDeduction.IsNullable = false;
				colvarIsAlwaysDeduction.IsPrimaryKey = false;
				colvarIsAlwaysDeduction.IsForeignKey = false;
				colvarIsAlwaysDeduction.IsReadOnly = false;
				colvarIsAlwaysDeduction.DefaultSetting = @"";
				colvarIsAlwaysDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAlwaysDeduction);

				TableSchema.TableColumn colvarIsAlwaysCredit = new TableSchema.TableColumn(schema);
				colvarIsAlwaysCredit.ColumnName = "IsAlwaysCredit";
				colvarIsAlwaysCredit.DataType = DbType.Boolean;
				colvarIsAlwaysCredit.MaxLength = 0;
				colvarIsAlwaysCredit.AutoIncrement = false;
				colvarIsAlwaysCredit.IsNullable = false;
				colvarIsAlwaysCredit.IsPrimaryKey = false;
				colvarIsAlwaysCredit.IsForeignKey = false;
				colvarIsAlwaysCredit.IsReadOnly = false;
				colvarIsAlwaysCredit.DefaultSetting = @"((0))";
				colvarIsAlwaysCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAlwaysCredit);

				TableSchema.TableColumn colvarRequiresCorporateUser = new TableSchema.TableColumn(schema);
				colvarRequiresCorporateUser.ColumnName = "RequiresCorporateUser";
				colvarRequiresCorporateUser.DataType = DbType.Boolean;
				colvarRequiresCorporateUser.MaxLength = 0;
				colvarRequiresCorporateUser.AutoIncrement = false;
				colvarRequiresCorporateUser.IsNullable = false;
				colvarRequiresCorporateUser.IsPrimaryKey = false;
				colvarRequiresCorporateUser.IsForeignKey = false;
				colvarRequiresCorporateUser.IsReadOnly = false;
				colvarRequiresCorporateUser.DefaultSetting = @"((1))";
				colvarRequiresCorporateUser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequiresCorporateUser);

				TableSchema.TableColumn colvarIsSalesTransaction = new TableSchema.TableColumn(schema);
				colvarIsSalesTransaction.ColumnName = "IsSalesTransaction";
				colvarIsSalesTransaction.DataType = DbType.Boolean;
				colvarIsSalesTransaction.MaxLength = 0;
				colvarIsSalesTransaction.AutoIncrement = false;
				colvarIsSalesTransaction.IsNullable = false;
				colvarIsSalesTransaction.IsPrimaryKey = false;
				colvarIsSalesTransaction.IsForeignKey = false;
				colvarIsSalesTransaction.IsReadOnly = false;
				colvarIsSalesTransaction.DefaultSetting = @"((0))";
				colvarIsSalesTransaction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSalesTransaction);

				TableSchema.TableColumn colvarIsInstallTransaction = new TableSchema.TableColumn(schema);
				colvarIsInstallTransaction.ColumnName = "IsInstallTransaction";
				colvarIsInstallTransaction.DataType = DbType.Boolean;
				colvarIsInstallTransaction.MaxLength = 0;
				colvarIsInstallTransaction.AutoIncrement = false;
				colvarIsInstallTransaction.IsNullable = false;
				colvarIsInstallTransaction.IsPrimaryKey = false;
				colvarIsInstallTransaction.IsForeignKey = false;
				colvarIsInstallTransaction.IsReadOnly = false;
				colvarIsInstallTransaction.DefaultSetting = @"((0))";
				colvarIsInstallTransaction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsInstallTransaction);

				TableSchema.TableColumn colvarIsAutomaticOnly = new TableSchema.TableColumn(schema);
				colvarIsAutomaticOnly.ColumnName = "IsAutomaticOnly";
				colvarIsAutomaticOnly.DataType = DbType.Boolean;
				colvarIsAutomaticOnly.MaxLength = 0;
				colvarIsAutomaticOnly.AutoIncrement = false;
				colvarIsAutomaticOnly.IsNullable = false;
				colvarIsAutomaticOnly.IsPrimaryKey = false;
				colvarIsAutomaticOnly.IsForeignKey = false;
				colvarIsAutomaticOnly.IsReadOnly = false;
				colvarIsAutomaticOnly.DefaultSetting = @"((0))";
				colvarIsAutomaticOnly.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAutomaticOnly);

				TableSchema.TableColumn colvarRequiresComments = new TableSchema.TableColumn(schema);
				colvarRequiresComments.ColumnName = "RequiresComments";
				colvarRequiresComments.DataType = DbType.Boolean;
				colvarRequiresComments.MaxLength = 0;
				colvarRequiresComments.AutoIncrement = false;
				colvarRequiresComments.IsNullable = false;
				colvarRequiresComments.IsPrimaryKey = false;
				colvarRequiresComments.IsForeignKey = false;
				colvarRequiresComments.IsReadOnly = false;
				colvarRequiresComments.DefaultSetting = @"((0))";
				colvarRequiresComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequiresComments);

				TableSchema.TableColumn colvarRepOfficeTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarRepOfficeTransactionTypeID.ColumnName = "RepOfficeTransactionTypeID";
				colvarRepOfficeTransactionTypeID.DataType = DbType.Int32;
				colvarRepOfficeTransactionTypeID.MaxLength = 0;
				colvarRepOfficeTransactionTypeID.AutoIncrement = false;
				colvarRepOfficeTransactionTypeID.IsNullable = true;
				colvarRepOfficeTransactionTypeID.IsPrimaryKey = false;
				colvarRepOfficeTransactionTypeID.IsForeignKey = true;
				colvarRepOfficeTransactionTypeID.IsReadOnly = false;
				colvarRepOfficeTransactionTypeID.DefaultSetting = @"";
				colvarRepOfficeTransactionTypeID.ForeignKeyTableName = "PR_OfficeTransactionTypes";
				schema.Columns.Add(colvarRepOfficeTransactionTypeID);

				TableSchema.TableColumn colvarGPTransactionCode = new TableSchema.TableColumn(schema);
				colvarGPTransactionCode.ColumnName = "GPTransactionCode";
				colvarGPTransactionCode.DataType = DbType.String;
				colvarGPTransactionCode.MaxLength = 50;
				colvarGPTransactionCode.AutoIncrement = false;
				colvarGPTransactionCode.IsNullable = true;
				colvarGPTransactionCode.IsPrimaryKey = false;
				colvarGPTransactionCode.IsForeignKey = false;
				colvarGPTransactionCode.IsReadOnly = false;
				colvarGPTransactionCode.DefaultSetting = @"";
				colvarGPTransactionCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPTransactionCode);

				TableSchema.TableColumn colvarGLCode = new TableSchema.TableColumn(schema);
				colvarGLCode.ColumnName = "GLCode";
				colvarGLCode.DataType = DbType.Int32;
				colvarGLCode.MaxLength = 0;
				colvarGLCode.AutoIncrement = false;
				colvarGLCode.IsNullable = true;
				colvarGLCode.IsPrimaryKey = false;
				colvarGLCode.IsForeignKey = false;
				colvarGLCode.IsReadOnly = false;
				colvarGLCode.DefaultSetting = @"";
				colvarGLCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGLCode);

				TableSchema.TableColumn colvarGPPurchaseOrderCode = new TableSchema.TableColumn(schema);
				colvarGPPurchaseOrderCode.ColumnName = "GPPurchaseOrderCode";
				colvarGPPurchaseOrderCode.DataType = DbType.String;
				colvarGPPurchaseOrderCode.MaxLength = 50;
				colvarGPPurchaseOrderCode.AutoIncrement = false;
				colvarGPPurchaseOrderCode.IsNullable = true;
				colvarGPPurchaseOrderCode.IsPrimaryKey = false;
				colvarGPPurchaseOrderCode.IsForeignKey = false;
				colvarGPPurchaseOrderCode.IsReadOnly = false;
				colvarGPPurchaseOrderCode.DefaultSetting = @"";
				colvarGPPurchaseOrderCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPPurchaseOrderCode);

				TableSchema.TableColumn colvarIncludeInBackendTotalPaid = new TableSchema.TableColumn(schema);
				colvarIncludeInBackendTotalPaid.ColumnName = "IncludeInBackendTotalPaid";
				colvarIncludeInBackendTotalPaid.DataType = DbType.Boolean;
				colvarIncludeInBackendTotalPaid.MaxLength = 0;
				colvarIncludeInBackendTotalPaid.AutoIncrement = false;
				colvarIncludeInBackendTotalPaid.IsNullable = false;
				colvarIncludeInBackendTotalPaid.IsPrimaryKey = false;
				colvarIncludeInBackendTotalPaid.IsForeignKey = false;
				colvarIncludeInBackendTotalPaid.IsReadOnly = false;
				colvarIncludeInBackendTotalPaid.DefaultSetting = @"((0))";
				colvarIncludeInBackendTotalPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIncludeInBackendTotalPaid);

				TableSchema.TableColumn colvarIsIncentive = new TableSchema.TableColumn(schema);
				colvarIsIncentive.ColumnName = "IsIncentive";
				colvarIsIncentive.DataType = DbType.Boolean;
				colvarIsIncentive.MaxLength = 0;
				colvarIsIncentive.AutoIncrement = false;
				colvarIsIncentive.IsNullable = false;
				colvarIsIncentive.IsPrimaryKey = false;
				colvarIsIncentive.IsForeignKey = false;
				colvarIsIncentive.IsReadOnly = false;
				colvarIsIncentive.DefaultSetting = @"((0))";
				colvarIsIncentive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsIncentive);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_TransactionTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_TransactionType LoadFrom(PR_TransactionType item)
		{
			PR_TransactionType result = new PR_TransactionType();
			if (item.TransactionTypeID != default(int)) {
				result.LoadByKey(item.TransactionTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TransactionTypeID {
			get { return GetColumnValue<int>(Columns.TransactionTypeID); }
			set {
				SetColumnValue(Columns.TransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionTypeID));
			}
		}
		[DataMember]
		public string TransactionTypeName {
			get { return GetColumnValue<string>(Columns.TransactionTypeName); }
			set {
				SetColumnValue(Columns.TransactionTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionTypeName));
			}
		}
		[DataMember]
		public int? TransactionCategoryID {
			get { return GetColumnValue<int?>(Columns.TransactionCategoryID); }
			set {
				SetColumnValue(Columns.TransactionCategoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionCategoryID));
			}
		}
		[DataMember]
		public string FriendlyName {
			get { return GetColumnValue<string>(Columns.FriendlyName); }
			set {
				SetColumnValue(Columns.FriendlyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FriendlyName));
			}
		}
		[DataMember]
		public string BackendTypeName {
			get { return GetColumnValue<string>(Columns.BackendTypeName); }
			set {
				SetColumnValue(Columns.BackendTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendTypeName));
			}
		}
		[DataMember]
		public bool IsAlwaysDeduction {
			get { return GetColumnValue<bool>(Columns.IsAlwaysDeduction); }
			set {
				SetColumnValue(Columns.IsAlwaysDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAlwaysDeduction));
			}
		}
		[DataMember]
		public bool IsAlwaysCredit {
			get { return GetColumnValue<bool>(Columns.IsAlwaysCredit); }
			set {
				SetColumnValue(Columns.IsAlwaysCredit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAlwaysCredit));
			}
		}
		[DataMember]
		public bool RequiresCorporateUser {
			get { return GetColumnValue<bool>(Columns.RequiresCorporateUser); }
			set {
				SetColumnValue(Columns.RequiresCorporateUser, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiresCorporateUser));
			}
		}
		[DataMember]
		public bool IsSalesTransaction {
			get { return GetColumnValue<bool>(Columns.IsSalesTransaction); }
			set {
				SetColumnValue(Columns.IsSalesTransaction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSalesTransaction));
			}
		}
		[DataMember]
		public bool IsInstallTransaction {
			get { return GetColumnValue<bool>(Columns.IsInstallTransaction); }
			set {
				SetColumnValue(Columns.IsInstallTransaction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsInstallTransaction));
			}
		}
		[DataMember]
		public bool IsAutomaticOnly {
			get { return GetColumnValue<bool>(Columns.IsAutomaticOnly); }
			set {
				SetColumnValue(Columns.IsAutomaticOnly, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsAutomaticOnly));
			}
		}
		[DataMember]
		public bool RequiresComments {
			get { return GetColumnValue<bool>(Columns.RequiresComments); }
			set {
				SetColumnValue(Columns.RequiresComments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiresComments));
			}
		}
		[DataMember]
		public int? RepOfficeTransactionTypeID {
			get { return GetColumnValue<int?>(Columns.RepOfficeTransactionTypeID); }
			set {
				SetColumnValue(Columns.RepOfficeTransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RepOfficeTransactionTypeID));
			}
		}
		[DataMember]
		public string GPTransactionCode {
			get { return GetColumnValue<string>(Columns.GPTransactionCode); }
			set {
				SetColumnValue(Columns.GPTransactionCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPTransactionCode));
			}
		}
		[DataMember]
		public int? GLCode {
			get { return GetColumnValue<int?>(Columns.GLCode); }
			set {
				SetColumnValue(Columns.GLCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GLCode));
			}
		}
		[DataMember]
		public string GPPurchaseOrderCode {
			get { return GetColumnValue<string>(Columns.GPPurchaseOrderCode); }
			set {
				SetColumnValue(Columns.GPPurchaseOrderCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPPurchaseOrderCode));
			}
		}
		[DataMember]
		public bool IncludeInBackendTotalPaid {
			get { return GetColumnValue<bool>(Columns.IncludeInBackendTotalPaid); }
			set {
				SetColumnValue(Columns.IncludeInBackendTotalPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IncludeInBackendTotalPaid));
			}
		}
		[DataMember]
		public bool IsIncentive {
			get { return GetColumnValue<bool>(Columns.IsIncentive); }
			set {
				SetColumnValue(Columns.IsIncentive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsIncentive));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_OfficeTransactionType _RepOfficeTransactionType;
		//Relationship: FK_PR_TransactionTypes_PR_OfficeTransactionTypes
		public PR_OfficeTransactionType RepOfficeTransactionType
		{
			get
			{
				if(_RepOfficeTransactionType == null) {
					_RepOfficeTransactionType = PR_OfficeTransactionType.FetchByID(this.RepOfficeTransactionTypeID);
				}
				return _RepOfficeTransactionType;
			}
			set
			{
				SetColumnValue("RepOfficeTransactionTypeID", value.OfficeTransactionTypeID);
				_RepOfficeTransactionType = value;
			}
		}

		private PR_TransactionCategory _TransactionCategory;
		//Relationship: FK_PR_TransactionTypes_PR_TransactionCategories
		public PR_TransactionCategory TransactionCategory
		{
			get
			{
				if(_TransactionCategory == null) {
					_TransactionCategory = PR_TransactionCategory.FetchByID(this.TransactionCategoryID);
				}
				return _TransactionCategory;
			}
			set
			{
				SetColumnValue("TransactionCategoryID", value.TransactionCategoryID);
				_TransactionCategory = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TransactionTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TransactionTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TransactionTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TransactionCategoryIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn FriendlyNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn BackendTypeNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsAlwaysDeductionColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsAlwaysCreditColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn RequiresCorporateUserColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsSalesTransactionColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsInstallTransactionColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsAutomaticOnlyColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn RequiresCommentsColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn RepOfficeTransactionTypeIDColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn GPTransactionCodeColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn GLCodeColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn GPPurchaseOrderCodeColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn IncludeInBackendTotalPaidColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn IsIncentiveColumn
		{
			get { return Schema.Columns[17]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TransactionTypeID = @"TransactionTypeID";
			public static readonly string TransactionTypeName = @"TransactionTypeName";
			public static readonly string TransactionCategoryID = @"TransactionCategoryID";
			public static readonly string FriendlyName = @"FriendlyName";
			public static readonly string BackendTypeName = @"BackendTypeName";
			public static readonly string IsAlwaysDeduction = @"IsAlwaysDeduction";
			public static readonly string IsAlwaysCredit = @"IsAlwaysCredit";
			public static readonly string RequiresCorporateUser = @"RequiresCorporateUser";
			public static readonly string IsSalesTransaction = @"IsSalesTransaction";
			public static readonly string IsInstallTransaction = @"IsInstallTransaction";
			public static readonly string IsAutomaticOnly = @"IsAutomaticOnly";
			public static readonly string RequiresComments = @"RequiresComments";
			public static readonly string RepOfficeTransactionTypeID = @"RepOfficeTransactionTypeID";
			public static readonly string GPTransactionCode = @"GPTransactionCode";
			public static readonly string GLCode = @"GLCode";
			public static readonly string GPPurchaseOrderCode = @"GPPurchaseOrderCode";
			public static readonly string IncludeInBackendTotalPaid = @"IncludeInBackendTotalPaid";
			public static readonly string IsIncentive = @"IsIncentive";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TransactionTypeID; }
		}
		*/

		#region Foreign Collections

		private PR_TransactionCollection _PR_TransactionsCol;
		//Relationship: FK_PR_Transactions_PR_TransactionTypes
		public PR_TransactionCollection PR_TransactionsCol
		{
			get
			{
				if(_PR_TransactionsCol == null) {
					_PR_TransactionsCol = new PR_TransactionCollection();
					_PR_TransactionsCol.LoadAndCloseReader(PR_Transaction.Query()
						.WHERE(PR_Transaction.Columns.TransactionTypeID, TransactionTypeID).ExecuteReader());
				}
				return _PR_TransactionsCol;
			}
		}

		private PR_WeeklyTransactionCollection _PR_WeeklyTransactionsCol;
		//Relationship: FK_PR_WeeklyTransactions_PR_TransactionTypes
		public PR_WeeklyTransactionCollection PR_WeeklyTransactionsCol
		{
			get
			{
				if(_PR_WeeklyTransactionsCol == null) {
					_PR_WeeklyTransactionsCol = new PR_WeeklyTransactionCollection();
					_PR_WeeklyTransactionsCol.LoadAndCloseReader(PR_WeeklyTransaction.Query()
						.WHERE(PR_WeeklyTransaction.Columns.TransactionTypeID, TransactionTypeID).ExecuteReader());
				}
				return _PR_WeeklyTransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PR_WeeklyTransaction class.
	/// </summary>
	[DataContract]
	public partial class PR_WeeklyTransactionCollection : ActiveList<PR_WeeklyTransaction, PR_WeeklyTransactionCollection>
	{
		public static PR_WeeklyTransactionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PR_WeeklyTransactionCollection result = new PR_WeeklyTransactionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PR_WeeklyTransaction item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PR_WeeklyTransactions table.
	/// </summary>
	[DataContract]
	public partial class PR_WeeklyTransaction : ActiveRecord<PR_WeeklyTransaction>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PR_WeeklyTransaction()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PR_WeeklyTransactions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarWeeklyTransactionID = new TableSchema.TableColumn(schema);
				colvarWeeklyTransactionID.ColumnName = "WeeklyTransactionID";
				colvarWeeklyTransactionID.DataType = DbType.Int32;
				colvarWeeklyTransactionID.MaxLength = 0;
				colvarWeeklyTransactionID.AutoIncrement = true;
				colvarWeeklyTransactionID.IsNullable = false;
				colvarWeeklyTransactionID.IsPrimaryKey = true;
				colvarWeeklyTransactionID.IsForeignKey = false;
				colvarWeeklyTransactionID.IsReadOnly = false;
				colvarWeeklyTransactionID.DefaultSetting = @"";
				colvarWeeklyTransactionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeeklyTransactionID);

				TableSchema.TableColumn colvarTransactionTypeID = new TableSchema.TableColumn(schema);
				colvarTransactionTypeID.ColumnName = "TransactionTypeID";
				colvarTransactionTypeID.DataType = DbType.Int32;
				colvarTransactionTypeID.MaxLength = 0;
				colvarTransactionTypeID.AutoIncrement = false;
				colvarTransactionTypeID.IsNullable = false;
				colvarTransactionTypeID.IsPrimaryKey = false;
				colvarTransactionTypeID.IsForeignKey = true;
				colvarTransactionTypeID.IsReadOnly = false;
				colvarTransactionTypeID.DefaultSetting = @"";
				colvarTransactionTypeID.ForeignKeyTableName = "PR_TransactionTypes";
				schema.Columns.Add(colvarTransactionTypeID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarUserTypeID = new TableSchema.TableColumn(schema);
				colvarUserTypeID.ColumnName = "UserTypeID";
				colvarUserTypeID.DataType = DbType.Int16;
				colvarUserTypeID.MaxLength = 0;
				colvarUserTypeID.AutoIncrement = false;
				colvarUserTypeID.IsNullable = true;
				colvarUserTypeID.IsPrimaryKey = false;
				colvarUserTypeID.IsForeignKey = true;
				colvarUserTypeID.IsReadOnly = false;
				colvarUserTypeID.DefaultSetting = @"";
				colvarUserTypeID.ForeignKeyTableName = "RU_UserType";
				schema.Columns.Add(colvarUserTypeID);

				TableSchema.TableColumn colvarPayscaleID = new TableSchema.TableColumn(schema);
				colvarPayscaleID.ColumnName = "PayscaleID";
				colvarPayscaleID.DataType = DbType.Int32;
				colvarPayscaleID.MaxLength = 0;
				colvarPayscaleID.AutoIncrement = false;
				colvarPayscaleID.IsNullable = true;
				colvarPayscaleID.IsPrimaryKey = false;
				colvarPayscaleID.IsForeignKey = true;
				colvarPayscaleID.IsReadOnly = false;
				colvarPayscaleID.DefaultSetting = @"";
				colvarPayscaleID.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayscaleID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = true;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				TableSchema.TableColumn colvarRequiresArrivalDate = new TableSchema.TableColumn(schema);
				colvarRequiresArrivalDate.ColumnName = "RequiresArrivalDate";
				colvarRequiresArrivalDate.DataType = DbType.Boolean;
				colvarRequiresArrivalDate.MaxLength = 0;
				colvarRequiresArrivalDate.AutoIncrement = false;
				colvarRequiresArrivalDate.IsNullable = false;
				colvarRequiresArrivalDate.IsPrimaryKey = false;
				colvarRequiresArrivalDate.IsForeignKey = false;
				colvarRequiresArrivalDate.IsReadOnly = false;
				colvarRequiresArrivalDate.DefaultSetting = @"((1))";
				colvarRequiresArrivalDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequiresArrivalDate);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PR_WeeklyTransactions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PR_WeeklyTransaction LoadFrom(PR_WeeklyTransaction item)
		{
			PR_WeeklyTransaction result = new PR_WeeklyTransaction();
			if (item.WeeklyTransactionID != default(int)) {
				result.LoadByKey(item.WeeklyTransactionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int WeeklyTransactionID {
			get { return GetColumnValue<int>(Columns.WeeklyTransactionID); }
			set {
				SetColumnValue(Columns.WeeklyTransactionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WeeklyTransactionID));
			}
		}
		[DataMember]
		public int TransactionTypeID {
			get { return GetColumnValue<int>(Columns.TransactionTypeID); }
			set {
				SetColumnValue(Columns.TransactionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TransactionTypeID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public short? UserTypeID {
			get { return GetColumnValue<short?>(Columns.UserTypeID); }
			set {
				SetColumnValue(Columns.UserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeID));
			}
		}
		[DataMember]
		public int? PayscaleID {
			get { return GetColumnValue<int?>(Columns.PayscaleID); }
			set {
				SetColumnValue(Columns.PayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayscaleID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}
		[DataMember]
		public bool RequiresArrivalDate {
			get { return GetColumnValue<bool>(Columns.RequiresArrivalDate); }
			set {
				SetColumnValue(Columns.RequiresArrivalDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiresArrivalDate));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PR_TransactionType _TransactionType;
		//Relationship: FK_PR_WeeklyTransactions_PR_TransactionTypes
		public PR_TransactionType TransactionType
		{
			get
			{
				if(_TransactionType == null) {
					_TransactionType = PR_TransactionType.FetchByID(this.TransactionTypeID);
				}
				return _TransactionType;
			}
			set
			{
				SetColumnValue("TransactionTypeID", value.TransactionTypeID);
				_TransactionType = value;
			}
		}

		private RU_Payscale _Payscale;
		//Relationship: FK_PR_WeeklyTransactions_RU_Payscales
		public RU_Payscale Payscale
		{
			get
			{
				if(_Payscale == null) {
					_Payscale = RU_Payscale.FetchByID(this.PayscaleID);
				}
				return _Payscale;
			}
			set
			{
				SetColumnValue("PayscaleID", value.PayscaleID);
				_Payscale = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PR_WeeklyTransactions_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_UserType _UserType;
		//Relationship: FK_PR_WeeklyTransactions_RU_UserType
		public RU_UserType UserType
		{
			get
			{
				if(_UserType == null) {
					_UserType = RU_UserType.FetchByID(this.UserTypeID);
				}
				return _UserType;
			}
			set
			{
				SetColumnValue("UserTypeID", value.UserTypeID);
				_UserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return WeeklyTransactionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn WeeklyTransactionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TransactionTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UserTypeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PayscaleIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn RequiresArrivalDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string WeeklyTransactionID = @"WeeklyTransactionID";
			public static readonly string TransactionTypeID = @"TransactionTypeID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string UserTypeID = @"UserTypeID";
			public static readonly string PayscaleID = @"PayscaleID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Amount = @"Amount";
			public static readonly string Comments = @"Comments";
			public static readonly string RequiresArrivalDate = @"RequiresArrivalDate";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return WeeklyTransactionID; }
		}
		*/

		#region Foreign Collections

		private PR_TransactionCollection _PR_TransactionsCol;
		//Relationship: FK_PR_Transactions_PR_WeeklyTransactions
		public PR_TransactionCollection PR_TransactionsCol
		{
			get
			{
				if(_PR_TransactionsCol == null) {
					_PR_TransactionsCol = new PR_TransactionCollection();
					_PR_TransactionsCol.LoadAndCloseReader(PR_Transaction.Query()
						.WHERE(PR_Transaction.Columns.WeeklyTransactionID, WeeklyTransactionID).ExecuteReader());
				}
				return _PR_TransactionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_Article class.
	/// </summary>
	[DataContract]
	public partial class PS_ArticleCollection : ActiveList<PS_Article, PS_ArticleCollection>
	{
		public static PS_ArticleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_ArticleCollection result = new PS_ArticleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_Article item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_Articles table.
	/// </summary>
	[DataContract]
	public partial class PS_Article : ActiveRecord<PS_Article>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_Article()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_Articles", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarArticleID = new TableSchema.TableColumn(schema);
				colvarArticleID.ColumnName = "ArticleID";
				colvarArticleID.DataType = DbType.Int32;
				colvarArticleID.MaxLength = 0;
				colvarArticleID.AutoIncrement = true;
				colvarArticleID.IsNullable = false;
				colvarArticleID.IsPrimaryKey = true;
				colvarArticleID.IsForeignKey = false;
				colvarArticleID.IsReadOnly = false;
				colvarArticleID.DefaultSetting = @"";
				colvarArticleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArticleID);

				TableSchema.TableColumn colvarArticleTypeID = new TableSchema.TableColumn(schema);
				colvarArticleTypeID.ColumnName = "ArticleTypeID";
				colvarArticleTypeID.DataType = DbType.Int32;
				colvarArticleTypeID.MaxLength = 0;
				colvarArticleTypeID.AutoIncrement = false;
				colvarArticleTypeID.IsNullable = false;
				colvarArticleTypeID.IsPrimaryKey = false;
				colvarArticleTypeID.IsForeignKey = true;
				colvarArticleTypeID.IsReadOnly = false;
				colvarArticleTypeID.DefaultSetting = @"";
				colvarArticleTypeID.ForeignKeyTableName = "PS_ArticleTypes";
				schema.Columns.Add(colvarArticleTypeID);

				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.String;
				colvarTitle.MaxLength = 255;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = false;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);

				TableSchema.TableColumn colvarBody = new TableSchema.TableColumn(schema);
				colvarBody.ColumnName = "Body";
				colvarBody.DataType = DbType.String;
				colvarBody.MaxLength = -1;
				colvarBody.AutoIncrement = false;
				colvarBody.IsNullable = false;
				colvarBody.IsPrimaryKey = false;
				colvarBody.IsForeignKey = false;
				colvarBody.IsReadOnly = false;
				colvarBody.DefaultSetting = @"";
				colvarBody.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBody);

				TableSchema.TableColumn colvarEventDescription = new TableSchema.TableColumn(schema);
				colvarEventDescription.ColumnName = "EventDescription";
				colvarEventDescription.DataType = DbType.String;
				colvarEventDescription.MaxLength = 256;
				colvarEventDescription.AutoIncrement = false;
				colvarEventDescription.IsNullable = true;
				colvarEventDescription.IsPrimaryKey = false;
				colvarEventDescription.IsForeignKey = false;
				colvarEventDescription.IsReadOnly = false;
				colvarEventDescription.DefaultSetting = @"";
				colvarEventDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventDescription);

				TableSchema.TableColumn colvarRegistrationEndDate = new TableSchema.TableColumn(schema);
				colvarRegistrationEndDate.ColumnName = "RegistrationEndDate";
				colvarRegistrationEndDate.DataType = DbType.DateTime;
				colvarRegistrationEndDate.MaxLength = 0;
				colvarRegistrationEndDate.AutoIncrement = false;
				colvarRegistrationEndDate.IsNullable = true;
				colvarRegistrationEndDate.IsPrimaryKey = false;
				colvarRegistrationEndDate.IsForeignKey = false;
				colvarRegistrationEndDate.IsReadOnly = false;
				colvarRegistrationEndDate.DefaultSetting = @"";
				colvarRegistrationEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegistrationEndDate);

				TableSchema.TableColumn colvarIsPublic = new TableSchema.TableColumn(schema);
				colvarIsPublic.ColumnName = "IsPublic";
				colvarIsPublic.DataType = DbType.Boolean;
				colvarIsPublic.MaxLength = 0;
				colvarIsPublic.AutoIncrement = false;
				colvarIsPublic.IsNullable = false;
				colvarIsPublic.IsPrimaryKey = false;
				colvarIsPublic.IsForeignKey = false;
				colvarIsPublic.IsReadOnly = false;
				colvarIsPublic.DefaultSetting = @"";
				colvarIsPublic.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPublic);

				TableSchema.TableColumn colvarCanUnregister = new TableSchema.TableColumn(schema);
				colvarCanUnregister.ColumnName = "CanUnregister";
				colvarCanUnregister.DataType = DbType.Boolean;
				colvarCanUnregister.MaxLength = 0;
				colvarCanUnregister.AutoIncrement = false;
				colvarCanUnregister.IsNullable = false;
				colvarCanUnregister.IsPrimaryKey = false;
				colvarCanUnregister.IsForeignKey = false;
				colvarCanUnregister.IsReadOnly = false;
				colvarCanUnregister.DefaultSetting = @"";
				colvarCanUnregister.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCanUnregister);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Int32;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Int32;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_Articles",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_Article LoadFrom(PS_Article item)
		{
			PS_Article result = new PS_Article();
			if (item.ArticleID != default(int)) {
				result.LoadByKey(item.ArticleID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ArticleID {
			get { return GetColumnValue<int>(Columns.ArticleID); }
			set {
				SetColumnValue(Columns.ArticleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ArticleID));
			}
		}
		[DataMember]
		public int ArticleTypeID {
			get { return GetColumnValue<int>(Columns.ArticleTypeID); }
			set {
				SetColumnValue(Columns.ArticleTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ArticleTypeID));
			}
		}
		[DataMember]
		public string Title {
			get { return GetColumnValue<string>(Columns.Title); }
			set {
				SetColumnValue(Columns.Title, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Title));
			}
		}
		[DataMember]
		public string Body {
			get { return GetColumnValue<string>(Columns.Body); }
			set {
				SetColumnValue(Columns.Body, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Body));
			}
		}
		[DataMember]
		public string EventDescription {
			get { return GetColumnValue<string>(Columns.EventDescription); }
			set {
				SetColumnValue(Columns.EventDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventDescription));
			}
		}
		[DataMember]
		public DateTime? RegistrationEndDate {
			get { return GetColumnValue<DateTime?>(Columns.RegistrationEndDate); }
			set {
				SetColumnValue(Columns.RegistrationEndDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegistrationEndDate));
			}
		}
		[DataMember]
		public bool IsPublic {
			get { return GetColumnValue<bool>(Columns.IsPublic); }
			set {
				SetColumnValue(Columns.IsPublic, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPublic));
			}
		}
		[DataMember]
		public bool CanUnregister {
			get { return GetColumnValue<bool>(Columns.CanUnregister); }
			set {
				SetColumnValue(Columns.CanUnregister, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CanUnregister));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public int CreatedBy {
			get { return GetColumnValue<int>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public int ModifiedBy {
			get { return GetColumnValue<int>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PS_ArticleType _ArticleType;
		//Relationship: FK_PS_Articles_PS_ArticleTypes
		public PS_ArticleType ArticleType
		{
			get
			{
				if(_ArticleType == null) {
					_ArticleType = PS_ArticleType.FetchByID(this.ArticleTypeID);
				}
				return _ArticleType;
			}
			set
			{
				SetColumnValue("ArticleTypeID", value.ArticleTypeID);
				_ArticleType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ArticleID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ArticleIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ArticleTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TitleColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BodyColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn EventDescriptionColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RegistrationEndDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsPublicColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CanUnregisterColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ArticleID = @"ArticleID";
			public static readonly string ArticleTypeID = @"ArticleTypeID";
			public static readonly string Title = @"Title";
			public static readonly string Body = @"Body";
			public static readonly string EventDescription = @"EventDescription";
			public static readonly string RegistrationEndDate = @"RegistrationEndDate";
			public static readonly string IsPublic = @"IsPublic";
			public static readonly string CanUnregister = @"CanUnregister";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ArticleID; }
		}
		*/

		#region Foreign Collections

		private PS_PublicationCollection _PS_PublicationsCol;
		//Relationship: FK_PS_Publications_PS_Articles
		public PS_PublicationCollection PS_PublicationsCol
		{
			get
			{
				if(_PS_PublicationsCol == null) {
					_PS_PublicationsCol = new PS_PublicationCollection();
					_PS_PublicationsCol.LoadAndCloseReader(PS_Publication.Query()
						.WHERE(PS_Publication.Columns.ArticleID, ArticleID).ExecuteReader());
				}
				return _PS_PublicationsCol;
			}
		}

		private PS_QuestionCollection _PS_QuestionsCol;
		//Relationship: FK_PS_Questions_PS_Articles
		public PS_QuestionCollection PS_QuestionsCol
		{
			get
			{
				if(_PS_QuestionsCol == null) {
					_PS_QuestionsCol = new PS_QuestionCollection();
					_PS_QuestionsCol.LoadAndCloseReader(PS_Question.Query()
						.WHERE(PS_Question.Columns.ArticleID, ArticleID).ExecuteReader());
				}
				return _PS_QuestionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_ArticleType class.
	/// </summary>
	[DataContract]
	public partial class PS_ArticleTypeCollection : ActiveList<PS_ArticleType, PS_ArticleTypeCollection>
	{
		public static PS_ArticleTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_ArticleTypeCollection result = new PS_ArticleTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_ArticleType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_ArticleTypes table.
	/// </summary>
	[DataContract]
	public partial class PS_ArticleType : ActiveRecord<PS_ArticleType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum ArticleTypeEnum : int
		{
			[EnumMember()] All = 0,
			[EnumMember()] News = 1,
			[EnumMember()] Events = 2,
		}

		//[DataMember]
		//public ArticleTypeEnum ArticleTypeCode
		//{
		//	get { return (ArticleTypeEnum)ArticleTypeID; }
		//	set { ArticleTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_ArticleType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_ArticleTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarArticleTypeID = new TableSchema.TableColumn(schema);
				colvarArticleTypeID.ColumnName = "ArticleTypeID";
				colvarArticleTypeID.DataType = DbType.Int32;
				colvarArticleTypeID.MaxLength = 0;
				colvarArticleTypeID.AutoIncrement = false;
				colvarArticleTypeID.IsNullable = false;
				colvarArticleTypeID.IsPrimaryKey = true;
				colvarArticleTypeID.IsForeignKey = false;
				colvarArticleTypeID.IsReadOnly = false;
				colvarArticleTypeID.DefaultSetting = @"";
				colvarArticleTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArticleTypeID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = true;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_ArticleTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_ArticleType LoadFrom(PS_ArticleType item)
		{
			PS_ArticleType result = new PS_ArticleType();
			if (item.ArticleTypeID != default(int)) {
				result.LoadByKey(item.ArticleTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ArticleTypeID {
			get { return GetColumnValue<int>(Columns.ArticleTypeID); }
			set {
				SetColumnValue(Columns.ArticleTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ArticleTypeID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ArticleTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ArticleTypeID = @"ArticleTypeID";
			public static readonly string Name = @"Name";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ArticleTypeID; }
		}
		*/

		#region Foreign Collections

		private PS_ArticleCollection _PS_ArticlesCol;
		//Relationship: FK_PS_Articles_PS_ArticleTypes
		public PS_ArticleCollection PS_ArticlesCol
		{
			get
			{
				if(_PS_ArticlesCol == null) {
					_PS_ArticlesCol = new PS_ArticleCollection();
					_PS_ArticlesCol.LoadAndCloseReader(PS_Article.Query()
						.WHERE(PS_Article.Columns.ArticleTypeID, ArticleTypeID).ExecuteReader());
				}
				return _PS_ArticlesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_ContentCollectionEditor class.
	/// </summary>
	[DataContract]
	public partial class PS_ContentCollectionEditorCollection : ActiveList<PS_ContentCollectionEditor, PS_ContentCollectionEditorCollection>
	{
		public static PS_ContentCollectionEditorCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_ContentCollectionEditorCollection result = new PS_ContentCollectionEditorCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_ContentCollectionEditor item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_ContentCollectionEditors table.
	/// </summary>
	[DataContract]
	public partial class PS_ContentCollectionEditor : ActiveRecord<PS_ContentCollectionEditor>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_ContentCollectionEditor()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_ContentCollectionEditors", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContentCollectionID = new TableSchema.TableColumn(schema);
				colvarContentCollectionID.ColumnName = "ContentCollectionID";
				colvarContentCollectionID.DataType = DbType.Int32;
				colvarContentCollectionID.MaxLength = 0;
				colvarContentCollectionID.AutoIncrement = false;
				colvarContentCollectionID.IsNullable = false;
				colvarContentCollectionID.IsPrimaryKey = true;
				colvarContentCollectionID.IsForeignKey = false;
				colvarContentCollectionID.IsReadOnly = false;
				colvarContentCollectionID.DefaultSetting = @"";
				colvarContentCollectionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContentCollectionID);

				TableSchema.TableColumn colvarEditorUserID = new TableSchema.TableColumn(schema);
				colvarEditorUserID.ColumnName = "EditorUserID";
				colvarEditorUserID.DataType = DbType.String;
				colvarEditorUserID.MaxLength = 100;
				colvarEditorUserID.AutoIncrement = false;
				colvarEditorUserID.IsNullable = false;
				colvarEditorUserID.IsPrimaryKey = false;
				colvarEditorUserID.IsForeignKey = false;
				colvarEditorUserID.IsReadOnly = false;
				colvarEditorUserID.DefaultSetting = @"";
				colvarEditorUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEditorUserID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_ContentCollectionEditors",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_ContentCollectionEditor LoadFrom(PS_ContentCollectionEditor item)
		{
			PS_ContentCollectionEditor result = new PS_ContentCollectionEditor();
			if (item.ContentCollectionID != default(int)) {
				result.LoadByKey(item.ContentCollectionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContentCollectionID {
			get { return GetColumnValue<int>(Columns.ContentCollectionID); }
			set {
				SetColumnValue(Columns.ContentCollectionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentCollectionID));
			}
		}
		[DataMember]
		public string EditorUserID {
			get { return GetColumnValue<string>(Columns.EditorUserID); }
			set {
				SetColumnValue(Columns.EditorUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EditorUserID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PS_ContentCollection _ContentCollection;
		//Relationship: FK_PS_ContentCollectionEditors_PS_ContentCollections
		public PS_ContentCollection ContentCollection
		{
			get
			{
				if(_ContentCollection == null) {
					_ContentCollection = PS_ContentCollection.FetchByID(this.ContentCollectionID);
				}
				return _ContentCollection;
			}
			set
			{
				SetColumnValue("ContentCollectionID", value.ContentCollectionID);
				_ContentCollection = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return EditorUserID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContentCollectionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn EditorUserIDColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContentCollectionID = @"ContentCollectionID";
			public static readonly string EditorUserID = @"EditorUserID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContentCollectionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PS_ContentCollection class.
	/// </summary>
	[DataContract]
	public partial class PS_ContentCollectionCollection : ActiveList<PS_ContentCollection, PS_ContentCollectionCollection>
	{
		public static PS_ContentCollectionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_ContentCollectionCollection result = new PS_ContentCollectionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_ContentCollection item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_ContentCollections table.
	/// </summary>
	[DataContract]
	public partial class PS_ContentCollection : ActiveRecord<PS_ContentCollection>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_ContentCollection()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_ContentCollections", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContentCollectionID = new TableSchema.TableColumn(schema);
				colvarContentCollectionID.ColumnName = "ContentCollectionID";
				colvarContentCollectionID.DataType = DbType.Int32;
				colvarContentCollectionID.MaxLength = 0;
				colvarContentCollectionID.AutoIncrement = true;
				colvarContentCollectionID.IsNullable = false;
				colvarContentCollectionID.IsPrimaryKey = true;
				colvarContentCollectionID.IsForeignKey = false;
				colvarContentCollectionID.IsReadOnly = false;
				colvarContentCollectionID.DefaultSetting = @"";
				colvarContentCollectionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContentCollectionID);

				TableSchema.TableColumn colvarContentTypeID = new TableSchema.TableColumn(schema);
				colvarContentTypeID.ColumnName = "ContentTypeID";
				colvarContentTypeID.DataType = DbType.Int32;
				colvarContentTypeID.MaxLength = 0;
				colvarContentTypeID.AutoIncrement = false;
				colvarContentTypeID.IsNullable = false;
				colvarContentTypeID.IsPrimaryKey = false;
				colvarContentTypeID.IsForeignKey = true;
				colvarContentTypeID.IsReadOnly = false;
				colvarContentTypeID.DefaultSetting = @"";
				colvarContentTypeID.ForeignKeyTableName = "PS_ContentTypes";
				schema.Columns.Add(colvarContentTypeID);

				TableSchema.TableColumn colvarContentCollectionName = new TableSchema.TableColumn(schema);
				colvarContentCollectionName.ColumnName = "ContentCollectionName";
				colvarContentCollectionName.DataType = DbType.String;
				colvarContentCollectionName.MaxLength = 100;
				colvarContentCollectionName.AutoIncrement = false;
				colvarContentCollectionName.IsNullable = false;
				colvarContentCollectionName.IsPrimaryKey = false;
				colvarContentCollectionName.IsForeignKey = false;
				colvarContentCollectionName.IsReadOnly = false;
				colvarContentCollectionName.DefaultSetting = @"";
				colvarContentCollectionName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContentCollectionName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_ContentCollections",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_ContentCollection LoadFrom(PS_ContentCollection item)
		{
			PS_ContentCollection result = new PS_ContentCollection();
			if (item.ContentCollectionID != default(int)) {
				result.LoadByKey(item.ContentCollectionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContentCollectionID {
			get { return GetColumnValue<int>(Columns.ContentCollectionID); }
			set {
				SetColumnValue(Columns.ContentCollectionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentCollectionID));
			}
		}
		[DataMember]
		public int ContentTypeID {
			get { return GetColumnValue<int>(Columns.ContentTypeID); }
			set {
				SetColumnValue(Columns.ContentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentTypeID));
			}
		}
		[DataMember]
		public string ContentCollectionName {
			get { return GetColumnValue<string>(Columns.ContentCollectionName); }
			set {
				SetColumnValue(Columns.ContentCollectionName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentCollectionName));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PS_ContentType _ContentType;
		//Relationship: FK_PS_ContentCollections_PS_ContentTypes
		public PS_ContentType ContentType
		{
			get
			{
				if(_ContentType == null) {
					_ContentType = PS_ContentType.FetchByID(this.ContentTypeID);
				}
				return _ContentType;
			}
			set
			{
				SetColumnValue("ContentTypeID", value.ContentTypeID);
				_ContentType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ContentCollectionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContentCollectionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContentTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ContentCollectionNameColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContentCollectionID = @"ContentCollectionID";
			public static readonly string ContentTypeID = @"ContentTypeID";
			public static readonly string ContentCollectionName = @"ContentCollectionName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContentCollectionID; }
		}
		*/

		#region Foreign Collections

		private PS_ContentCollectionEditorCollection _PS_ContentCollectionEditorsCol;
		//Relationship: FK_PS_ContentCollectionEditors_PS_ContentCollections
		public PS_ContentCollectionEditorCollection PS_ContentCollectionEditorsCol
		{
			get
			{
				if(_PS_ContentCollectionEditorsCol == null) {
					_PS_ContentCollectionEditorsCol = new PS_ContentCollectionEditorCollection();
					_PS_ContentCollectionEditorsCol.LoadAndCloseReader(PS_ContentCollectionEditor.Query()
						.WHERE(PS_ContentCollectionEditor.Columns.ContentCollectionID, ContentCollectionID).ExecuteReader());
				}
				return _PS_ContentCollectionEditorsCol;
			}
		}

		private PS_ContentItemCollection _PS_ContentItemsCol;
		//Relationship: FK_PS_ContentItems_PS_ContentCollections
		public PS_ContentItemCollection PS_ContentItemsCol
		{
			get
			{
				if(_PS_ContentItemsCol == null) {
					_PS_ContentItemsCol = new PS_ContentItemCollection();
					_PS_ContentItemsCol.LoadAndCloseReader(PS_ContentItem.Query()
						.WHERE(PS_ContentItem.Columns.ContentCollectionID, ContentCollectionID).ExecuteReader());
				}
				return _PS_ContentItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_ContentItem class.
	/// </summary>
	[DataContract]
	public partial class PS_ContentItemCollection : ActiveList<PS_ContentItem, PS_ContentItemCollection>
	{
		public static PS_ContentItemCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_ContentItemCollection result = new PS_ContentItemCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_ContentItem item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_ContentItems table.
	/// </summary>
	[DataContract]
	public partial class PS_ContentItem : ActiveRecord<PS_ContentItem>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_ContentItem()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_ContentItems", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContentItemID = new TableSchema.TableColumn(schema);
				colvarContentItemID.ColumnName = "ContentItemID";
				colvarContentItemID.DataType = DbType.Int32;
				colvarContentItemID.MaxLength = 0;
				colvarContentItemID.AutoIncrement = true;
				colvarContentItemID.IsNullable = false;
				colvarContentItemID.IsPrimaryKey = true;
				colvarContentItemID.IsForeignKey = false;
				colvarContentItemID.IsReadOnly = false;
				colvarContentItemID.DefaultSetting = @"";
				colvarContentItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContentItemID);

				TableSchema.TableColumn colvarContentCollectionID = new TableSchema.TableColumn(schema);
				colvarContentCollectionID.ColumnName = "ContentCollectionID";
				colvarContentCollectionID.DataType = DbType.Int32;
				colvarContentCollectionID.MaxLength = 0;
				colvarContentCollectionID.AutoIncrement = false;
				colvarContentCollectionID.IsNullable = false;
				colvarContentCollectionID.IsPrimaryKey = false;
				colvarContentCollectionID.IsForeignKey = true;
				colvarContentCollectionID.IsReadOnly = false;
				colvarContentCollectionID.DefaultSetting = @"";
				colvarContentCollectionID.ForeignKeyTableName = "PS_ContentCollections";
				schema.Columns.Add(colvarContentCollectionID);

				TableSchema.TableColumn colvarContentTypeID = new TableSchema.TableColumn(schema);
				colvarContentTypeID.ColumnName = "ContentTypeID";
				colvarContentTypeID.DataType = DbType.Int32;
				colvarContentTypeID.MaxLength = 0;
				colvarContentTypeID.AutoIncrement = false;
				colvarContentTypeID.IsNullable = false;
				colvarContentTypeID.IsPrimaryKey = false;
				colvarContentTypeID.IsForeignKey = true;
				colvarContentTypeID.IsReadOnly = false;
				colvarContentTypeID.DefaultSetting = @"";
				colvarContentTypeID.ForeignKeyTableName = "PS_ContentTypes";
				schema.Columns.Add(colvarContentTypeID);

				TableSchema.TableColumn colvarContentStatusID = new TableSchema.TableColumn(schema);
				colvarContentStatusID.ColumnName = "ContentStatusID";
				colvarContentStatusID.DataType = DbType.Int32;
				colvarContentStatusID.MaxLength = 0;
				colvarContentStatusID.AutoIncrement = false;
				colvarContentStatusID.IsNullable = false;
				colvarContentStatusID.IsPrimaryKey = false;
				colvarContentStatusID.IsForeignKey = true;
				colvarContentStatusID.IsReadOnly = false;
				colvarContentStatusID.DefaultSetting = @"";
				colvarContentStatusID.ForeignKeyTableName = "PS_ContentStatuses";
				schema.Columns.Add(colvarContentStatusID);

				TableSchema.TableColumn colvarSubject = new TableSchema.TableColumn(schema);
				colvarSubject.ColumnName = "Subject";
				colvarSubject.DataType = DbType.String;
				colvarSubject.MaxLength = 255;
				colvarSubject.AutoIncrement = false;
				colvarSubject.IsNullable = false;
				colvarSubject.IsPrimaryKey = false;
				colvarSubject.IsForeignKey = false;
				colvarSubject.IsReadOnly = false;
				colvarSubject.DefaultSetting = @"";
				colvarSubject.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubject);

				TableSchema.TableColumn colvarSynopsis = new TableSchema.TableColumn(schema);
				colvarSynopsis.ColumnName = "Synopsis";
				colvarSynopsis.DataType = DbType.String;
				colvarSynopsis.MaxLength = 2048;
				colvarSynopsis.AutoIncrement = false;
				colvarSynopsis.IsNullable = true;
				colvarSynopsis.IsPrimaryKey = false;
				colvarSynopsis.IsForeignKey = false;
				colvarSynopsis.IsReadOnly = false;
				colvarSynopsis.DefaultSetting = @"";
				colvarSynopsis.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSynopsis);

				TableSchema.TableColumn colvarBody = new TableSchema.TableColumn(schema);
				colvarBody.ColumnName = "Body";
				colvarBody.DataType = DbType.String;
				colvarBody.MaxLength = 1073741823;
				colvarBody.AutoIncrement = false;
				colvarBody.IsNullable = false;
				colvarBody.IsPrimaryKey = false;
				colvarBody.IsForeignKey = false;
				colvarBody.IsReadOnly = false;
				colvarBody.DefaultSetting = @"";
				colvarBody.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBody);

				TableSchema.TableColumn colvarThumbnailUrl = new TableSchema.TableColumn(schema);
				colvarThumbnailUrl.ColumnName = "ThumbnailUrl";
				colvarThumbnailUrl.DataType = DbType.String;
				colvarThumbnailUrl.MaxLength = 255;
				colvarThumbnailUrl.AutoIncrement = false;
				colvarThumbnailUrl.IsNullable = true;
				colvarThumbnailUrl.IsPrimaryKey = false;
				colvarThumbnailUrl.IsForeignKey = false;
				colvarThumbnailUrl.IsReadOnly = false;
				colvarThumbnailUrl.DefaultSetting = @"";
				colvarThumbnailUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThumbnailUrl);

				TableSchema.TableColumn colvarIsFeaturedItem = new TableSchema.TableColumn(schema);
				colvarIsFeaturedItem.ColumnName = "IsFeaturedItem";
				colvarIsFeaturedItem.DataType = DbType.Boolean;
				colvarIsFeaturedItem.MaxLength = 0;
				colvarIsFeaturedItem.AutoIncrement = false;
				colvarIsFeaturedItem.IsNullable = false;
				colvarIsFeaturedItem.IsPrimaryKey = false;
				colvarIsFeaturedItem.IsForeignKey = false;
				colvarIsFeaturedItem.IsReadOnly = false;
				colvarIsFeaturedItem.DefaultSetting = @"((0))";
				colvarIsFeaturedItem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsFeaturedItem);

				TableSchema.TableColumn colvarIsPinned = new TableSchema.TableColumn(schema);
				colvarIsPinned.ColumnName = "IsPinned";
				colvarIsPinned.DataType = DbType.Boolean;
				colvarIsPinned.MaxLength = 0;
				colvarIsPinned.AutoIncrement = false;
				colvarIsPinned.IsNullable = false;
				colvarIsPinned.IsPrimaryKey = false;
				colvarIsPinned.IsForeignKey = false;
				colvarIsPinned.IsReadOnly = false;
				colvarIsPinned.DefaultSetting = @"((0))";
				colvarIsPinned.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPinned);

				TableSchema.TableColumn colvarEventStart = new TableSchema.TableColumn(schema);
				colvarEventStart.ColumnName = "EventStart";
				colvarEventStart.DataType = DbType.DateTime;
				colvarEventStart.MaxLength = 0;
				colvarEventStart.AutoIncrement = false;
				colvarEventStart.IsNullable = true;
				colvarEventStart.IsPrimaryKey = false;
				colvarEventStart.IsForeignKey = false;
				colvarEventStart.IsReadOnly = false;
				colvarEventStart.DefaultSetting = @"";
				colvarEventStart.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventStart);

				TableSchema.TableColumn colvarEventEnd = new TableSchema.TableColumn(schema);
				colvarEventEnd.ColumnName = "EventEnd";
				colvarEventEnd.DataType = DbType.DateTime;
				colvarEventEnd.MaxLength = 0;
				colvarEventEnd.AutoIncrement = false;
				colvarEventEnd.IsNullable = true;
				colvarEventEnd.IsPrimaryKey = false;
				colvarEventEnd.IsForeignKey = false;
				colvarEventEnd.IsReadOnly = false;
				colvarEventEnd.DefaultSetting = @"";
				colvarEventEnd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventEnd);

				TableSchema.TableColumn colvarEventIsAllDay = new TableSchema.TableColumn(schema);
				colvarEventIsAllDay.ColumnName = "EventIsAllDay";
				colvarEventIsAllDay.DataType = DbType.Boolean;
				colvarEventIsAllDay.MaxLength = 0;
				colvarEventIsAllDay.AutoIncrement = false;
				colvarEventIsAllDay.IsNullable = true;
				colvarEventIsAllDay.IsPrimaryKey = false;
				colvarEventIsAllDay.IsForeignKey = false;
				colvarEventIsAllDay.IsReadOnly = false;
				colvarEventIsAllDay.DefaultSetting = @"";
				colvarEventIsAllDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventIsAllDay);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_ContentItems",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_ContentItem LoadFrom(PS_ContentItem item)
		{
			PS_ContentItem result = new PS_ContentItem();
			if (item.ContentItemID != default(int)) {
				result.LoadByKey(item.ContentItemID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContentItemID {
			get { return GetColumnValue<int>(Columns.ContentItemID); }
			set {
				SetColumnValue(Columns.ContentItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentItemID));
			}
		}
		[DataMember]
		public int ContentCollectionID {
			get { return GetColumnValue<int>(Columns.ContentCollectionID); }
			set {
				SetColumnValue(Columns.ContentCollectionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentCollectionID));
			}
		}
		[DataMember]
		public int ContentTypeID {
			get { return GetColumnValue<int>(Columns.ContentTypeID); }
			set {
				SetColumnValue(Columns.ContentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentTypeID));
			}
		}
		[DataMember]
		public int ContentStatusID {
			get { return GetColumnValue<int>(Columns.ContentStatusID); }
			set {
				SetColumnValue(Columns.ContentStatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentStatusID));
			}
		}
		[DataMember]
		public string Subject {
			get { return GetColumnValue<string>(Columns.Subject); }
			set {
				SetColumnValue(Columns.Subject, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Subject));
			}
		}
		[DataMember]
		public string Synopsis {
			get { return GetColumnValue<string>(Columns.Synopsis); }
			set {
				SetColumnValue(Columns.Synopsis, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Synopsis));
			}
		}
		[DataMember]
		public string Body {
			get { return GetColumnValue<string>(Columns.Body); }
			set {
				SetColumnValue(Columns.Body, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Body));
			}
		}
		[DataMember]
		public string ThumbnailUrl {
			get { return GetColumnValue<string>(Columns.ThumbnailUrl); }
			set {
				SetColumnValue(Columns.ThumbnailUrl, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ThumbnailUrl));
			}
		}
		[DataMember]
		public bool IsFeaturedItem {
			get { return GetColumnValue<bool>(Columns.IsFeaturedItem); }
			set {
				SetColumnValue(Columns.IsFeaturedItem, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsFeaturedItem));
			}
		}
		[DataMember]
		public bool IsPinned {
			get { return GetColumnValue<bool>(Columns.IsPinned); }
			set {
				SetColumnValue(Columns.IsPinned, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPinned));
			}
		}
		[DataMember]
		public DateTime? EventStart {
			get { return GetColumnValue<DateTime?>(Columns.EventStart); }
			set {
				SetColumnValue(Columns.EventStart, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventStart));
			}
		}
		[DataMember]
		public DateTime? EventEnd {
			get { return GetColumnValue<DateTime?>(Columns.EventEnd); }
			set {
				SetColumnValue(Columns.EventEnd, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventEnd));
			}
		}
		[DataMember]
		public bool? EventIsAllDay {
			get { return GetColumnValue<bool?>(Columns.EventIsAllDay); }
			set {
				SetColumnValue(Columns.EventIsAllDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventIsAllDay));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PS_ContentCollection _ContentCollection;
		//Relationship: FK_PS_ContentItems_PS_ContentCollections
		public PS_ContentCollection ContentCollection
		{
			get
			{
				if(_ContentCollection == null) {
					_ContentCollection = PS_ContentCollection.FetchByID(this.ContentCollectionID);
				}
				return _ContentCollection;
			}
			set
			{
				SetColumnValue("ContentCollectionID", value.ContentCollectionID);
				_ContentCollection = value;
			}
		}

		private PS_ContentStatus _ContentStatus;
		//Relationship: FK_PS_ContentItems_PS_ContentStatuses
		public PS_ContentStatus ContentStatus
		{
			get
			{
				if(_ContentStatus == null) {
					_ContentStatus = PS_ContentStatus.FetchByID(this.ContentStatusID);
				}
				return _ContentStatus;
			}
			set
			{
				SetColumnValue("ContentStatusID", value.ContentStatusID);
				_ContentStatus = value;
			}
		}

		private PS_ContentType _ContentType;
		//Relationship: FK_PS_ContentItems_PS_ContentTypes
		public PS_ContentType ContentType
		{
			get
			{
				if(_ContentType == null) {
					_ContentType = PS_ContentType.FetchByID(this.ContentTypeID);
				}
				return _ContentType;
			}
			set
			{
				SetColumnValue("ContentTypeID", value.ContentTypeID);
				_ContentType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ContentItemID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContentItemIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContentCollectionIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ContentTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ContentStatusIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SubjectColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SynopsisColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn BodyColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ThumbnailUrlColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsFeaturedItemColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsPinnedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn EventStartColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn EventEndColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn EventIsAllDayColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[14]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContentItemID = @"ContentItemID";
			public static readonly string ContentCollectionID = @"ContentCollectionID";
			public static readonly string ContentTypeID = @"ContentTypeID";
			public static readonly string ContentStatusID = @"ContentStatusID";
			public static readonly string Subject = @"Subject";
			public static readonly string Synopsis = @"Synopsis";
			public static readonly string Body = @"Body";
			public static readonly string ThumbnailUrl = @"ThumbnailUrl";
			public static readonly string IsFeaturedItem = @"IsFeaturedItem";
			public static readonly string IsPinned = @"IsPinned";
			public static readonly string EventStart = @"EventStart";
			public static readonly string EventEnd = @"EventEnd";
			public static readonly string EventIsAllDay = @"EventIsAllDay";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContentItemID; }
		}
		*/

		#region Foreign Collections

		private PS_ContentPermissionCollection _PS_ContentPermissionsCol;
		//Relationship: FK_PS_ContentPermissions_PS_ContentItems
		public PS_ContentPermissionCollection PS_ContentPermissionsCol
		{
			get
			{
				if(_PS_ContentPermissionsCol == null) {
					_PS_ContentPermissionsCol = new PS_ContentPermissionCollection();
					_PS_ContentPermissionsCol.LoadAndCloseReader(PS_ContentPermission.Query()
						.WHERE(PS_ContentPermission.Columns.ContentItemID, ContentItemID).ExecuteReader());
				}
				return _PS_ContentPermissionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_ContentPermission class.
	/// </summary>
	[DataContract]
	public partial class PS_ContentPermissionCollection : ActiveList<PS_ContentPermission, PS_ContentPermissionCollection>
	{
		public static PS_ContentPermissionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_ContentPermissionCollection result = new PS_ContentPermissionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_ContentPermission item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_ContentPermissions table.
	/// </summary>
	[DataContract]
	public partial class PS_ContentPermission : ActiveRecord<PS_ContentPermission>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_ContentPermission()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_ContentPermissions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContentPermissionID = new TableSchema.TableColumn(schema);
				colvarContentPermissionID.ColumnName = "ContentPermissionID";
				colvarContentPermissionID.DataType = DbType.Int32;
				colvarContentPermissionID.MaxLength = 0;
				colvarContentPermissionID.AutoIncrement = true;
				colvarContentPermissionID.IsNullable = false;
				colvarContentPermissionID.IsPrimaryKey = true;
				colvarContentPermissionID.IsForeignKey = false;
				colvarContentPermissionID.IsReadOnly = false;
				colvarContentPermissionID.DefaultSetting = @"";
				colvarContentPermissionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContentPermissionID);

				TableSchema.TableColumn colvarContentItemID = new TableSchema.TableColumn(schema);
				colvarContentItemID.ColumnName = "ContentItemID";
				colvarContentItemID.DataType = DbType.Int32;
				colvarContentItemID.MaxLength = 0;
				colvarContentItemID.AutoIncrement = false;
				colvarContentItemID.IsNullable = false;
				colvarContentItemID.IsPrimaryKey = false;
				colvarContentItemID.IsForeignKey = true;
				colvarContentItemID.IsReadOnly = false;
				colvarContentItemID.DefaultSetting = @"";
				colvarContentItemID.ForeignKeyTableName = "PS_ContentItems";
				schema.Columns.Add(colvarContentItemID);

				TableSchema.TableColumn colvarRequiredTeamLocationID = new TableSchema.TableColumn(schema);
				colvarRequiredTeamLocationID.ColumnName = "RequiredTeamLocationID";
				colvarRequiredTeamLocationID.DataType = DbType.Int32;
				colvarRequiredTeamLocationID.MaxLength = 0;
				colvarRequiredTeamLocationID.AutoIncrement = false;
				colvarRequiredTeamLocationID.IsNullable = true;
				colvarRequiredTeamLocationID.IsPrimaryKey = false;
				colvarRequiredTeamLocationID.IsForeignKey = true;
				colvarRequiredTeamLocationID.IsReadOnly = false;
				colvarRequiredTeamLocationID.DefaultSetting = @"";
				colvarRequiredTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarRequiredTeamLocationID);

				TableSchema.TableColumn colvarRequiredTeamID = new TableSchema.TableColumn(schema);
				colvarRequiredTeamID.ColumnName = "RequiredTeamID";
				colvarRequiredTeamID.DataType = DbType.Int32;
				colvarRequiredTeamID.MaxLength = 0;
				colvarRequiredTeamID.AutoIncrement = false;
				colvarRequiredTeamID.IsNullable = true;
				colvarRequiredTeamID.IsPrimaryKey = false;
				colvarRequiredTeamID.IsForeignKey = true;
				colvarRequiredTeamID.IsReadOnly = false;
				colvarRequiredTeamID.DefaultSetting = @"";
				colvarRequiredTeamID.ForeignKeyTableName = "RU_Teams";
				schema.Columns.Add(colvarRequiredTeamID);

				TableSchema.TableColumn colvarRequiredRoleLocationID = new TableSchema.TableColumn(schema);
				colvarRequiredRoleLocationID.ColumnName = "RequiredRoleLocationID";
				colvarRequiredRoleLocationID.DataType = DbType.Int32;
				colvarRequiredRoleLocationID.MaxLength = 0;
				colvarRequiredRoleLocationID.AutoIncrement = false;
				colvarRequiredRoleLocationID.IsNullable = true;
				colvarRequiredRoleLocationID.IsPrimaryKey = false;
				colvarRequiredRoleLocationID.IsForeignKey = true;
				colvarRequiredRoleLocationID.IsReadOnly = false;
				colvarRequiredRoleLocationID.DefaultSetting = @"";
				colvarRequiredRoleLocationID.ForeignKeyTableName = "RU_RoleLocations";
				schema.Columns.Add(colvarRequiredRoleLocationID);

				TableSchema.TableColumn colvarRequiredUserTypeID = new TableSchema.TableColumn(schema);
				colvarRequiredUserTypeID.ColumnName = "RequiredUserTypeID";
				colvarRequiredUserTypeID.DataType = DbType.Int16;
				colvarRequiredUserTypeID.MaxLength = 0;
				colvarRequiredUserTypeID.AutoIncrement = false;
				colvarRequiredUserTypeID.IsNullable = true;
				colvarRequiredUserTypeID.IsPrimaryKey = false;
				colvarRequiredUserTypeID.IsForeignKey = true;
				colvarRequiredUserTypeID.IsReadOnly = false;
				colvarRequiredUserTypeID.DefaultSetting = @"";
				colvarRequiredUserTypeID.ForeignKeyTableName = "RU_UserType";
				schema.Columns.Add(colvarRequiredUserTypeID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_ContentPermissions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_ContentPermission LoadFrom(PS_ContentPermission item)
		{
			PS_ContentPermission result = new PS_ContentPermission();
			if (item.ContentPermissionID != default(int)) {
				result.LoadByKey(item.ContentPermissionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContentPermissionID {
			get { return GetColumnValue<int>(Columns.ContentPermissionID); }
			set {
				SetColumnValue(Columns.ContentPermissionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentPermissionID));
			}
		}
		[DataMember]
		public int ContentItemID {
			get { return GetColumnValue<int>(Columns.ContentItemID); }
			set {
				SetColumnValue(Columns.ContentItemID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentItemID));
			}
		}
		[DataMember]
		public int? RequiredTeamLocationID {
			get { return GetColumnValue<int?>(Columns.RequiredTeamLocationID); }
			set {
				SetColumnValue(Columns.RequiredTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiredTeamLocationID));
			}
		}
		[DataMember]
		public int? RequiredTeamID {
			get { return GetColumnValue<int?>(Columns.RequiredTeamID); }
			set {
				SetColumnValue(Columns.RequiredTeamID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiredTeamID));
			}
		}
		[DataMember]
		public int? RequiredRoleLocationID {
			get { return GetColumnValue<int?>(Columns.RequiredRoleLocationID); }
			set {
				SetColumnValue(Columns.RequiredRoleLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiredRoleLocationID));
			}
		}
		[DataMember]
		public short? RequiredUserTypeID {
			get { return GetColumnValue<short?>(Columns.RequiredUserTypeID); }
			set {
				SetColumnValue(Columns.RequiredUserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiredUserTypeID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PS_ContentItem _ContentItem;
		//Relationship: FK_PS_ContentPermissions_PS_ContentItems
		public PS_ContentItem ContentItem
		{
			get
			{
				if(_ContentItem == null) {
					_ContentItem = PS_ContentItem.FetchByID(this.ContentItemID);
				}
				return _ContentItem;
			}
			set
			{
				SetColumnValue("ContentItemID", value.ContentItemID);
				_ContentItem = value;
			}
		}

		private RU_RoleLocation _RequiredRoleLocation;
		//Relationship: FK_PS_ContentPermissions_RU_RoleLocations
		public RU_RoleLocation RequiredRoleLocation
		{
			get
			{
				if(_RequiredRoleLocation == null) {
					_RequiredRoleLocation = RU_RoleLocation.FetchByID(this.RequiredRoleLocationID);
				}
				return _RequiredRoleLocation;
			}
			set
			{
				SetColumnValue("RequiredRoleLocationID", value.RoleLocationID);
				_RequiredRoleLocation = value;
			}
		}

		private RU_TeamLocation _RequiredTeamLocation;
		//Relationship: FK_PS_ContentPermissions_RU_TeamLocations
		public RU_TeamLocation RequiredTeamLocation
		{
			get
			{
				if(_RequiredTeamLocation == null) {
					_RequiredTeamLocation = RU_TeamLocation.FetchByID(this.RequiredTeamLocationID);
				}
				return _RequiredTeamLocation;
			}
			set
			{
				SetColumnValue("RequiredTeamLocationID", value.TeamLocationID);
				_RequiredTeamLocation = value;
			}
		}

		private RU_Team _RequiredTeam;
		//Relationship: FK_PS_ContentPermissions_RU_Teams
		public RU_Team RequiredTeam
		{
			get
			{
				if(_RequiredTeam == null) {
					_RequiredTeam = RU_Team.FetchByID(this.RequiredTeamID);
				}
				return _RequiredTeam;
			}
			set
			{
				SetColumnValue("RequiredTeamID", value.TeamID);
				_RequiredTeam = value;
			}
		}

		private RU_UserType _RequiredUserType;
		//Relationship: FK_PS_ContentPermissions_RU_UserType
		public RU_UserType RequiredUserType
		{
			get
			{
				if(_RequiredUserType == null) {
					_RequiredUserType = RU_UserType.FetchByID(this.RequiredUserTypeID);
				}
				return _RequiredUserType;
			}
			set
			{
				SetColumnValue("RequiredUserTypeID", value.UserTypeID);
				_RequiredUserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ContentPermissionID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContentPermissionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContentItemIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RequiredTeamLocationIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RequiredTeamIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RequiredRoleLocationIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RequiredUserTypeIDColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContentPermissionID = @"ContentPermissionID";
			public static readonly string ContentItemID = @"ContentItemID";
			public static readonly string RequiredTeamLocationID = @"RequiredTeamLocationID";
			public static readonly string RequiredTeamID = @"RequiredTeamID";
			public static readonly string RequiredRoleLocationID = @"RequiredRoleLocationID";
			public static readonly string RequiredUserTypeID = @"RequiredUserTypeID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContentPermissionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PS_ContentStatus class.
	/// </summary>
	[DataContract]
	public partial class PS_ContentStatusCollection : ActiveList<PS_ContentStatus, PS_ContentStatusCollection>
	{
		public static PS_ContentStatusCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_ContentStatusCollection result = new PS_ContentStatusCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_ContentStatus item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_ContentStatuses table.
	/// </summary>
	[DataContract]
	public partial class PS_ContentStatus : ActiveRecord<PS_ContentStatus>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_ContentStatus()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_ContentStatuses", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContentStatusID = new TableSchema.TableColumn(schema);
				colvarContentStatusID.ColumnName = "ContentStatusID";
				colvarContentStatusID.DataType = DbType.Int32;
				colvarContentStatusID.MaxLength = 0;
				colvarContentStatusID.AutoIncrement = true;
				colvarContentStatusID.IsNullable = false;
				colvarContentStatusID.IsPrimaryKey = true;
				colvarContentStatusID.IsForeignKey = false;
				colvarContentStatusID.IsReadOnly = false;
				colvarContentStatusID.DefaultSetting = @"";
				colvarContentStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContentStatusID);

				TableSchema.TableColumn colvarContentStatusName = new TableSchema.TableColumn(schema);
				colvarContentStatusName.ColumnName = "ContentStatusName";
				colvarContentStatusName.DataType = DbType.String;
				colvarContentStatusName.MaxLength = 50;
				colvarContentStatusName.AutoIncrement = false;
				colvarContentStatusName.IsNullable = false;
				colvarContentStatusName.IsPrimaryKey = false;
				colvarContentStatusName.IsForeignKey = false;
				colvarContentStatusName.IsReadOnly = false;
				colvarContentStatusName.DefaultSetting = @"";
				colvarContentStatusName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContentStatusName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_ContentStatuses",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_ContentStatus LoadFrom(PS_ContentStatus item)
		{
			PS_ContentStatus result = new PS_ContentStatus();
			if (item.ContentStatusID != default(int)) {
				result.LoadByKey(item.ContentStatusID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContentStatusID {
			get { return GetColumnValue<int>(Columns.ContentStatusID); }
			set {
				SetColumnValue(Columns.ContentStatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentStatusID));
			}
		}
		[DataMember]
		public string ContentStatusName {
			get { return GetColumnValue<string>(Columns.ContentStatusName); }
			set {
				SetColumnValue(Columns.ContentStatusName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentStatusName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ContentStatusName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContentStatusIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContentStatusNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContentStatusID = @"ContentStatusID";
			public static readonly string ContentStatusName = @"ContentStatusName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContentStatusID; }
		}
		*/

		#region Foreign Collections

		private PS_ContentItemCollection _PS_ContentItemsCol;
		//Relationship: FK_PS_ContentItems_PS_ContentStatuses
		public PS_ContentItemCollection PS_ContentItemsCol
		{
			get
			{
				if(_PS_ContentItemsCol == null) {
					_PS_ContentItemsCol = new PS_ContentItemCollection();
					_PS_ContentItemsCol.LoadAndCloseReader(PS_ContentItem.Query()
						.WHERE(PS_ContentItem.Columns.ContentStatusID, ContentStatusID).ExecuteReader());
				}
				return _PS_ContentItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_ContentType class.
	/// </summary>
	[DataContract]
	public partial class PS_ContentTypeCollection : ActiveList<PS_ContentType, PS_ContentTypeCollection>
	{
		public static PS_ContentTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_ContentTypeCollection result = new PS_ContentTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_ContentType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_ContentTypes table.
	/// </summary>
	[DataContract]
	public partial class PS_ContentType : ActiveRecord<PS_ContentType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum ContentTypeEnum : int
		{
		}

		//[DataMember]
		//public ContentTypeEnum ContentTypeCode
		//{
		//	get { return (ContentTypeEnum)ContentTypeID; }
		//	set { ContentTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_ContentType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_ContentTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarContentTypeID = new TableSchema.TableColumn(schema);
				colvarContentTypeID.ColumnName = "ContentTypeID";
				colvarContentTypeID.DataType = DbType.Int32;
				colvarContentTypeID.MaxLength = 0;
				colvarContentTypeID.AutoIncrement = true;
				colvarContentTypeID.IsNullable = false;
				colvarContentTypeID.IsPrimaryKey = true;
				colvarContentTypeID.IsForeignKey = false;
				colvarContentTypeID.IsReadOnly = false;
				colvarContentTypeID.DefaultSetting = @"";
				colvarContentTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContentTypeID);

				TableSchema.TableColumn colvarContentTypeName = new TableSchema.TableColumn(schema);
				colvarContentTypeName.ColumnName = "ContentTypeName";
				colvarContentTypeName.DataType = DbType.String;
				colvarContentTypeName.MaxLength = 100;
				colvarContentTypeName.AutoIncrement = false;
				colvarContentTypeName.IsNullable = false;
				colvarContentTypeName.IsPrimaryKey = false;
				colvarContentTypeName.IsForeignKey = false;
				colvarContentTypeName.IsReadOnly = false;
				colvarContentTypeName.DefaultSetting = @"";
				colvarContentTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContentTypeName);

				TableSchema.TableColumn colvarShortName = new TableSchema.TableColumn(schema);
				colvarShortName.ColumnName = "ShortName";
				colvarShortName.DataType = DbType.String;
				colvarShortName.MaxLength = 50;
				colvarShortName.AutoIncrement = false;
				colvarShortName.IsNullable = false;
				colvarShortName.IsPrimaryKey = false;
				colvarShortName.IsForeignKey = false;
				colvarShortName.IsReadOnly = false;
				colvarShortName.DefaultSetting = @"";
				colvarShortName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShortName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_ContentTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_ContentType LoadFrom(PS_ContentType item)
		{
			PS_ContentType result = new PS_ContentType();
			if (item.ContentTypeID != default(int)) {
				result.LoadByKey(item.ContentTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ContentTypeID {
			get { return GetColumnValue<int>(Columns.ContentTypeID); }
			set {
				SetColumnValue(Columns.ContentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentTypeID));
			}
		}
		[DataMember]
		public string ContentTypeName {
			get { return GetColumnValue<string>(Columns.ContentTypeName); }
			set {
				SetColumnValue(Columns.ContentTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContentTypeName));
			}
		}
		[DataMember]
		public string ShortName {
			get { return GetColumnValue<string>(Columns.ShortName); }
			set {
				SetColumnValue(Columns.ShortName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShortName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ContentTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn ContentTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ContentTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ShortNameColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ContentTypeID = @"ContentTypeID";
			public static readonly string ContentTypeName = @"ContentTypeName";
			public static readonly string ShortName = @"ShortName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ContentTypeID; }
		}
		*/

		#region Foreign Collections

		private PS_ContentCollectionCollection _PS_ContentCollectionsCol;
		//Relationship: FK_PS_ContentCollections_PS_ContentTypes
		public PS_ContentCollectionCollection PS_ContentCollectionsCol
		{
			get
			{
				if(_PS_ContentCollectionsCol == null) {
					_PS_ContentCollectionsCol = new PS_ContentCollectionCollection();
					_PS_ContentCollectionsCol.LoadAndCloseReader(PS_ContentCollection.Query()
						.WHERE(PS_ContentCollection.Columns.ContentTypeID, ContentTypeID).ExecuteReader());
				}
				return _PS_ContentCollectionsCol;
			}
		}

		private PS_ContentItemCollection _PS_ContentItemsCol;
		//Relationship: FK_PS_ContentItems_PS_ContentTypes
		public PS_ContentItemCollection PS_ContentItemsCol
		{
			get
			{
				if(_PS_ContentItemsCol == null) {
					_PS_ContentItemsCol = new PS_ContentItemCollection();
					_PS_ContentItemsCol.LoadAndCloseReader(PS_ContentItem.Query()
						.WHERE(PS_ContentItem.Columns.ContentTypeID, ContentTypeID).ExecuteReader());
				}
				return _PS_ContentItemsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_CoolStuff class.
	/// </summary>
	[DataContract]
	public partial class PS_CoolStuffCollection : ActiveList<PS_CoolStuff, PS_CoolStuffCollection>
	{
		public static PS_CoolStuffCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_CoolStuffCollection result = new PS_CoolStuffCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_CoolStuff item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_CoolStuffs table.
	/// </summary>
	[DataContract]
	public partial class PS_CoolStuff : ActiveRecord<PS_CoolStuff>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_CoolStuff()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_CoolStuffs", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCoolStuffID = new TableSchema.TableColumn(schema);
				colvarCoolStuffID.ColumnName = "CoolStuffID";
				colvarCoolStuffID.DataType = DbType.Int32;
				colvarCoolStuffID.MaxLength = 0;
				colvarCoolStuffID.AutoIncrement = true;
				colvarCoolStuffID.IsNullable = false;
				colvarCoolStuffID.IsPrimaryKey = true;
				colvarCoolStuffID.IsForeignKey = false;
				colvarCoolStuffID.IsReadOnly = false;
				colvarCoolStuffID.DefaultSetting = @"";
				colvarCoolStuffID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCoolStuffID);

				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.String;
				colvarTitle.MaxLength = 50;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = false;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);

				TableSchema.TableColumn colvarThumbnailUrl = new TableSchema.TableColumn(schema);
				colvarThumbnailUrl.ColumnName = "ThumbnailUrl";
				colvarThumbnailUrl.DataType = DbType.String;
				colvarThumbnailUrl.MaxLength = 512;
				colvarThumbnailUrl.AutoIncrement = false;
				colvarThumbnailUrl.IsNullable = false;
				colvarThumbnailUrl.IsPrimaryKey = false;
				colvarThumbnailUrl.IsForeignKey = false;
				colvarThumbnailUrl.IsReadOnly = false;
				colvarThumbnailUrl.DefaultSetting = @"";
				colvarThumbnailUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThumbnailUrl);

				TableSchema.TableColumn colvarPreviewUrl = new TableSchema.TableColumn(schema);
				colvarPreviewUrl.ColumnName = "PreviewUrl";
				colvarPreviewUrl.DataType = DbType.String;
				colvarPreviewUrl.MaxLength = 512;
				colvarPreviewUrl.AutoIncrement = false;
				colvarPreviewUrl.IsNullable = false;
				colvarPreviewUrl.IsPrimaryKey = false;
				colvarPreviewUrl.IsForeignKey = false;
				colvarPreviewUrl.IsReadOnly = false;
				colvarPreviewUrl.DefaultSetting = @"";
				colvarPreviewUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreviewUrl);

				TableSchema.TableColumn colvarVideoUrl = new TableSchema.TableColumn(schema);
				colvarVideoUrl.ColumnName = "VideoUrl";
				colvarVideoUrl.DataType = DbType.String;
				colvarVideoUrl.MaxLength = 512;
				colvarVideoUrl.AutoIncrement = false;
				colvarVideoUrl.IsNullable = true;
				colvarVideoUrl.IsPrimaryKey = false;
				colvarVideoUrl.IsForeignKey = false;
				colvarVideoUrl.IsReadOnly = false;
				colvarVideoUrl.DefaultSetting = @"";
				colvarVideoUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVideoUrl);

				TableSchema.TableColumn colvarNavigateUrl = new TableSchema.TableColumn(schema);
				colvarNavigateUrl.ColumnName = "NavigateUrl";
				colvarNavigateUrl.DataType = DbType.String;
				colvarNavigateUrl.MaxLength = 512;
				colvarNavigateUrl.AutoIncrement = false;
				colvarNavigateUrl.IsNullable = true;
				colvarNavigateUrl.IsPrimaryKey = false;
				colvarNavigateUrl.IsForeignKey = false;
				colvarNavigateUrl.IsReadOnly = false;
				colvarNavigateUrl.DefaultSetting = @"";
				colvarNavigateUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNavigateUrl);

				TableSchema.TableColumn colvarOrderValue = new TableSchema.TableColumn(schema);
				colvarOrderValue.ColumnName = "OrderValue";
				colvarOrderValue.DataType = DbType.Int32;
				colvarOrderValue.MaxLength = 0;
				colvarOrderValue.AutoIncrement = false;
				colvarOrderValue.IsNullable = false;
				colvarOrderValue.IsPrimaryKey = false;
				colvarOrderValue.IsForeignKey = false;
				colvarOrderValue.IsReadOnly = false;
				colvarOrderValue.DefaultSetting = @"((0))";
				colvarOrderValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderValue);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_CoolStuffs",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_CoolStuff LoadFrom(PS_CoolStuff item)
		{
			PS_CoolStuff result = new PS_CoolStuff();
			if (item.CoolStuffID != default(int)) {
				result.LoadByKey(item.CoolStuffID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CoolStuffID {
			get { return GetColumnValue<int>(Columns.CoolStuffID); }
			set {
				SetColumnValue(Columns.CoolStuffID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CoolStuffID));
			}
		}
		[DataMember]
		public string Title {
			get { return GetColumnValue<string>(Columns.Title); }
			set {
				SetColumnValue(Columns.Title, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Title));
			}
		}
		[DataMember]
		public string ThumbnailUrl {
			get { return GetColumnValue<string>(Columns.ThumbnailUrl); }
			set {
				SetColumnValue(Columns.ThumbnailUrl, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ThumbnailUrl));
			}
		}
		[DataMember]
		public string PreviewUrl {
			get { return GetColumnValue<string>(Columns.PreviewUrl); }
			set {
				SetColumnValue(Columns.PreviewUrl, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreviewUrl));
			}
		}
		[DataMember]
		public string VideoUrl {
			get { return GetColumnValue<string>(Columns.VideoUrl); }
			set {
				SetColumnValue(Columns.VideoUrl, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VideoUrl));
			}
		}
		[DataMember]
		public string NavigateUrl {
			get { return GetColumnValue<string>(Columns.NavigateUrl); }
			set {
				SetColumnValue(Columns.NavigateUrl, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NavigateUrl));
			}
		}
		[DataMember]
		public int OrderValue {
			get { return GetColumnValue<int>(Columns.OrderValue); }
			set {
				SetColumnValue(Columns.OrderValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OrderValue));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Title;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CoolStuffIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TitleColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ThumbnailUrlColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PreviewUrlColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn VideoUrlColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn NavigateUrlColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn OrderValueColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CoolStuffID = @"CoolStuffID";
			public static readonly string Title = @"Title";
			public static readonly string ThumbnailUrl = @"ThumbnailUrl";
			public static readonly string PreviewUrl = @"PreviewUrl";
			public static readonly string VideoUrl = @"VideoUrl";
			public static readonly string NavigateUrl = @"NavigateUrl";
			public static readonly string OrderValue = @"OrderValue";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string CreatedBy = @"CreatedBy";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CoolStuffID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PS_EventRegistration class.
	/// </summary>
	[DataContract]
	public partial class PS_EventRegistrationCollection : ActiveList<PS_EventRegistration, PS_EventRegistrationCollection>
	{
		public static PS_EventRegistrationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_EventRegistrationCollection result = new PS_EventRegistrationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_EventRegistration item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_EventRegistrations table.
	/// </summary>
	[DataContract]
	public partial class PS_EventRegistration : ActiveRecord<PS_EventRegistration>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_EventRegistration()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_EventRegistrations", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarEventRegistrationID = new TableSchema.TableColumn(schema);
				colvarEventRegistrationID.ColumnName = "EventRegistrationID";
				colvarEventRegistrationID.DataType = DbType.Int32;
				colvarEventRegistrationID.MaxLength = 0;
				colvarEventRegistrationID.AutoIncrement = true;
				colvarEventRegistrationID.IsNullable = false;
				colvarEventRegistrationID.IsPrimaryKey = true;
				colvarEventRegistrationID.IsForeignKey = false;
				colvarEventRegistrationID.IsReadOnly = false;
				colvarEventRegistrationID.DefaultSetting = @"";
				colvarEventRegistrationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEventRegistrationID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = true;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
				colvarCompanyID.ColumnName = "CompanyID";
				colvarCompanyID.DataType = DbType.String;
				colvarCompanyID.MaxLength = 25;
				colvarCompanyID.AutoIncrement = false;
				colvarCompanyID.IsNullable = true;
				colvarCompanyID.IsPrimaryKey = false;
				colvarCompanyID.IsForeignKey = false;
				colvarCompanyID.IsReadOnly = false;
				colvarCompanyID.DefaultSetting = @"";
				colvarCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyID);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarArticleID = new TableSchema.TableColumn(schema);
				colvarArticleID.ColumnName = "ArticleID";
				colvarArticleID.DataType = DbType.Int32;
				colvarArticleID.MaxLength = 0;
				colvarArticleID.AutoIncrement = false;
				colvarArticleID.IsNullable = false;
				colvarArticleID.IsPrimaryKey = false;
				colvarArticleID.IsForeignKey = false;
				colvarArticleID.IsReadOnly = false;
				colvarArticleID.DefaultSetting = @"";
				colvarArticleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArticleID);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_EventRegistrations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_EventRegistration LoadFrom(PS_EventRegistration item)
		{
			PS_EventRegistration result = new PS_EventRegistration();
			if (item.EventRegistrationID != default(int)) {
				result.LoadByKey(item.EventRegistrationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int EventRegistrationID {
			get { return GetColumnValue<int>(Columns.EventRegistrationID); }
			set {
				SetColumnValue(Columns.EventRegistrationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventRegistrationID));
			}
		}
		[DataMember]
		public int? UserID {
			get { return GetColumnValue<int?>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public string CompanyID {
			get { return GetColumnValue<string>(Columns.CompanyID); }
			set {
				SetColumnValue(Columns.CompanyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CompanyID));
			}
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set {
				SetColumnValue(Columns.FirstName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FirstName));
			}
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set {
				SetColumnValue(Columns.LastName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastName));
			}
		}
		[DataMember]
		public int ArticleID {
			get { return GetColumnValue<int>(Columns.ArticleID); }
			set {
				SetColumnValue(Columns.ArticleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ArticleID));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return EventRegistrationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn EventRegistrationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CompanyIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ArticleIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string EventRegistrationID = @"EventRegistrationID";
			public static readonly string UserID = @"UserID";
			public static readonly string CompanyID = @"CompanyID";
			public static readonly string FirstName = @"FirstName";
			public static readonly string LastName = @"LastName";
			public static readonly string ArticleID = @"ArticleID";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return EventRegistrationID; }
		}
		*/

		#region Foreign Collections

		private PS_QuestionResponseCollection _PS_QuestionResponsesCol;
		//Relationship: FK_PS_QuestionResponses_PS_EventRegistrations
		public PS_QuestionResponseCollection PS_QuestionResponsesCol
		{
			get
			{
				if(_PS_QuestionResponsesCol == null) {
					_PS_QuestionResponsesCol = new PS_QuestionResponseCollection();
					_PS_QuestionResponsesCol.LoadAndCloseReader(PS_QuestionResponse.Query()
						.WHERE(PS_QuestionResponse.Columns.EventRegistrationID, EventRegistrationID).ExecuteReader());
				}
				return _PS_QuestionResponsesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_Publication class.
	/// </summary>
	[DataContract]
	public partial class PS_PublicationCollection : ActiveList<PS_Publication, PS_PublicationCollection>
	{
		public static PS_PublicationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_PublicationCollection result = new PS_PublicationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_Publication item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_Publications table.
	/// </summary>
	[DataContract]
	public partial class PS_Publication : ActiveRecord<PS_Publication>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_Publication()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_Publications", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPublicationID = new TableSchema.TableColumn(schema);
				colvarPublicationID.ColumnName = "PublicationID";
				colvarPublicationID.DataType = DbType.Int32;
				colvarPublicationID.MaxLength = 0;
				colvarPublicationID.AutoIncrement = true;
				colvarPublicationID.IsNullable = false;
				colvarPublicationID.IsPrimaryKey = true;
				colvarPublicationID.IsForeignKey = false;
				colvarPublicationID.IsReadOnly = false;
				colvarPublicationID.DefaultSetting = @"";
				colvarPublicationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPublicationID);

				TableSchema.TableColumn colvarArticleID = new TableSchema.TableColumn(schema);
				colvarArticleID.ColumnName = "ArticleID";
				colvarArticleID.DataType = DbType.Int32;
				colvarArticleID.MaxLength = 0;
				colvarArticleID.AutoIncrement = false;
				colvarArticleID.IsNullable = false;
				colvarArticleID.IsPrimaryKey = false;
				colvarArticleID.IsForeignKey = true;
				colvarArticleID.IsReadOnly = false;
				colvarArticleID.DefaultSetting = @"";
				colvarArticleID.ForeignKeyTableName = "PS_Articles";
				schema.Columns.Add(colvarArticleID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarIsDenied = new TableSchema.TableColumn(schema);
				colvarIsDenied.ColumnName = "IsDenied";
				colvarIsDenied.DataType = DbType.Boolean;
				colvarIsDenied.MaxLength = 0;
				colvarIsDenied.AutoIncrement = false;
				colvarIsDenied.IsNullable = false;
				colvarIsDenied.IsPrimaryKey = false;
				colvarIsDenied.IsForeignKey = false;
				colvarIsDenied.IsReadOnly = false;
				colvarIsDenied.DefaultSetting = @"";
				colvarIsDenied.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDenied);

				TableSchema.TableColumn colvarDenyReason = new TableSchema.TableColumn(schema);
				colvarDenyReason.ColumnName = "DenyReason";
				colvarDenyReason.DataType = DbType.String;
				colvarDenyReason.MaxLength = -1;
				colvarDenyReason.AutoIncrement = false;
				colvarDenyReason.IsNullable = true;
				colvarDenyReason.IsPrimaryKey = false;
				colvarDenyReason.IsForeignKey = false;
				colvarDenyReason.IsReadOnly = false;
				colvarDenyReason.DefaultSetting = @"";
				colvarDenyReason.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDenyReason);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Int32;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Int32;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_Publications",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_Publication LoadFrom(PS_Publication item)
		{
			PS_Publication result = new PS_Publication();
			if (item.PublicationID != default(int)) {
				result.LoadByKey(item.PublicationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PublicationID {
			get { return GetColumnValue<int>(Columns.PublicationID); }
			set {
				SetColumnValue(Columns.PublicationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PublicationID));
			}
		}
		[DataMember]
		public int ArticleID {
			get { return GetColumnValue<int>(Columns.ArticleID); }
			set {
				SetColumnValue(Columns.ArticleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ArticleID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public bool IsDenied {
			get { return GetColumnValue<bool>(Columns.IsDenied); }
			set {
				SetColumnValue(Columns.IsDenied, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDenied));
			}
		}
		[DataMember]
		public string DenyReason {
			get { return GetColumnValue<string>(Columns.DenyReason); }
			set {
				SetColumnValue(Columns.DenyReason, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DenyReason));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public int CreatedBy {
			get { return GetColumnValue<int>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public int ModifiedBy {
			get { return GetColumnValue<int>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PS_Article _Article;
		//Relationship: FK_PS_Publications_PS_Articles
		public PS_Article Article
		{
			get
			{
				if(_Article == null) {
					_Article = PS_Article.FetchByID(this.ArticleID);
				}
				return _Article;
			}
			set
			{
				SetColumnValue("ArticleID", value.ArticleID);
				_Article = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_PS_Publications_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PublicationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PublicationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ArticleIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsDeniedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DenyReasonColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PublicationID = @"PublicationID";
			public static readonly string ArticleID = @"ArticleID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string IsDenied = @"IsDenied";
			public static readonly string DenyReason = @"DenyReason";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PublicationID; }
		}
		*/

		#region Foreign Collections

		private PS_PublishLocationCollection _PS_PublishLocationsCol;
		//Relationship: FK_PS_PublishLocations_PS_Publications
		public PS_PublishLocationCollection PS_PublishLocationsCol
		{
			get
			{
				if(_PS_PublishLocationsCol == null) {
					_PS_PublishLocationsCol = new PS_PublishLocationCollection();
					_PS_PublishLocationsCol.LoadAndCloseReader(PS_PublishLocation.Query()
						.WHERE(PS_PublishLocation.Columns.PublicationID, PublicationID).ExecuteReader());
				}
				return _PS_PublishLocationsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_PublishLocation class.
	/// </summary>
	[DataContract]
	public partial class PS_PublishLocationCollection : ActiveList<PS_PublishLocation, PS_PublishLocationCollection>
	{
		public static PS_PublishLocationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_PublishLocationCollection result = new PS_PublishLocationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_PublishLocation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_PublishLocations table.
	/// </summary>
	[DataContract]
	public partial class PS_PublishLocation : ActiveRecord<PS_PublishLocation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_PublishLocation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_PublishLocations", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPublishLocationID = new TableSchema.TableColumn(schema);
				colvarPublishLocationID.ColumnName = "PublishLocationID";
				colvarPublishLocationID.DataType = DbType.Int32;
				colvarPublishLocationID.MaxLength = 0;
				colvarPublishLocationID.AutoIncrement = true;
				colvarPublishLocationID.IsNullable = false;
				colvarPublishLocationID.IsPrimaryKey = true;
				colvarPublishLocationID.IsForeignKey = false;
				colvarPublishLocationID.IsReadOnly = false;
				colvarPublishLocationID.DefaultSetting = @"";
				colvarPublishLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPublishLocationID);

				TableSchema.TableColumn colvarPublicationID = new TableSchema.TableColumn(schema);
				colvarPublicationID.ColumnName = "PublicationID";
				colvarPublicationID.DataType = DbType.Int32;
				colvarPublicationID.MaxLength = 0;
				colvarPublicationID.AutoIncrement = false;
				colvarPublicationID.IsNullable = false;
				colvarPublicationID.IsPrimaryKey = false;
				colvarPublicationID.IsForeignKey = true;
				colvarPublicationID.IsReadOnly = false;
				colvarPublicationID.DefaultSetting = @"";
				colvarPublicationID.ForeignKeyTableName = "PS_Publications";
				schema.Columns.Add(colvarPublicationID);

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int32;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = false;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = false;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarPublishLocationTypeID = new TableSchema.TableColumn(schema);
				colvarPublishLocationTypeID.ColumnName = "PublishLocationTypeID";
				colvarPublishLocationTypeID.DataType = DbType.Int32;
				colvarPublishLocationTypeID.MaxLength = 0;
				colvarPublishLocationTypeID.AutoIncrement = false;
				colvarPublishLocationTypeID.IsNullable = false;
				colvarPublishLocationTypeID.IsPrimaryKey = false;
				colvarPublishLocationTypeID.IsForeignKey = true;
				colvarPublishLocationTypeID.IsReadOnly = false;
				colvarPublishLocationTypeID.DefaultSetting = @"";
				colvarPublishLocationTypeID.ForeignKeyTableName = "PS_PublishLocationTypes";
				schema.Columns.Add(colvarPublishLocationTypeID);

				TableSchema.TableColumn colvarAuthorizedBy = new TableSchema.TableColumn(schema);
				colvarAuthorizedBy.ColumnName = "AuthorizedBy";
				colvarAuthorizedBy.DataType = DbType.Int32;
				colvarAuthorizedBy.MaxLength = 0;
				colvarAuthorizedBy.AutoIncrement = false;
				colvarAuthorizedBy.IsNullable = false;
				colvarAuthorizedBy.IsPrimaryKey = false;
				colvarAuthorizedBy.IsForeignKey = true;
				colvarAuthorizedBy.IsReadOnly = false;
				colvarAuthorizedBy.DefaultSetting = @"";
				colvarAuthorizedBy.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarAuthorizedBy);

				TableSchema.TableColumn colvarAuthorizedOn = new TableSchema.TableColumn(schema);
				colvarAuthorizedOn.ColumnName = "AuthorizedOn";
				colvarAuthorizedOn.DataType = DbType.DateTime;
				colvarAuthorizedOn.MaxLength = 0;
				colvarAuthorizedOn.AutoIncrement = false;
				colvarAuthorizedOn.IsNullable = false;
				colvarAuthorizedOn.IsPrimaryKey = false;
				colvarAuthorizedOn.IsForeignKey = false;
				colvarAuthorizedOn.IsReadOnly = false;
				colvarAuthorizedOn.DefaultSetting = @"";
				colvarAuthorizedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthorizedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_PublishLocations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_PublishLocation LoadFrom(PS_PublishLocation item)
		{
			PS_PublishLocation result = new PS_PublishLocation();
			if (item.PublishLocationID != default(int)) {
				result.LoadByKey(item.PublishLocationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PublishLocationID {
			get { return GetColumnValue<int>(Columns.PublishLocationID); }
			set {
				SetColumnValue(Columns.PublishLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PublishLocationID));
			}
		}
		[DataMember]
		public int PublicationID {
			get { return GetColumnValue<int>(Columns.PublicationID); }
			set {
				SetColumnValue(Columns.PublicationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PublicationID));
			}
		}
		[DataMember]
		public int ID {
			get { return GetColumnValue<int>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public int PublishLocationTypeID {
			get { return GetColumnValue<int>(Columns.PublishLocationTypeID); }
			set {
				SetColumnValue(Columns.PublishLocationTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PublishLocationTypeID));
			}
		}
		[DataMember]
		public int AuthorizedBy {
			get { return GetColumnValue<int>(Columns.AuthorizedBy); }
			set {
				SetColumnValue(Columns.AuthorizedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthorizedBy));
			}
		}
		[DataMember]
		public DateTime AuthorizedOn {
			get { return GetColumnValue<DateTime>(Columns.AuthorizedOn); }
			set {
				SetColumnValue(Columns.AuthorizedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthorizedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PS_Publication _Publication;
		//Relationship: FK_PS_PublishLocations_PS_Publications
		public PS_Publication Publication
		{
			get
			{
				if(_Publication == null) {
					_Publication = PS_Publication.FetchByID(this.PublicationID);
				}
				return _Publication;
			}
			set
			{
				SetColumnValue("PublicationID", value.PublicationID);
				_Publication = value;
			}
		}

		private PS_PublishLocationType _PublishLocationType;
		//Relationship: FK_PS_PublishLocations_PS_PublishLocationTypes
		public PS_PublishLocationType PublishLocationType
		{
			get
			{
				if(_PublishLocationType == null) {
					_PublishLocationType = PS_PublishLocationType.FetchByID(this.PublishLocationTypeID);
				}
				return _PublishLocationType;
			}
			set
			{
				SetColumnValue("PublishLocationTypeID", value.PublishLocationTypeID);
				_PublishLocationType = value;
			}
		}

		private RU_User _AuthorizedByValue;
		//Relationship: FK_PS_PublishLocations_RU_Users
		public RU_User AuthorizedByValue
		{
			get
			{
				if(_AuthorizedByValue == null) {
					_AuthorizedByValue = RU_User.FetchByID(this.AuthorizedBy);
				}
				return _AuthorizedByValue;
			}
			set
			{
				SetColumnValue("AuthorizedBy", value.UserID);
				_AuthorizedByValue = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PublishLocationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PublishLocationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PublicationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PublishLocationTypeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AuthorizedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AuthorizedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PublishLocationID = @"PublishLocationID";
			public static readonly string PublicationID = @"PublicationID";
			public static readonly string ID = @"ID";
			public static readonly string PublishLocationTypeID = @"PublishLocationTypeID";
			public static readonly string AuthorizedBy = @"AuthorizedBy";
			public static readonly string AuthorizedOn = @"AuthorizedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PublishLocationID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PS_PublishLocationType class.
	/// </summary>
	[DataContract]
	public partial class PS_PublishLocationTypeCollection : ActiveList<PS_PublishLocationType, PS_PublishLocationTypeCollection>
	{
		public static PS_PublishLocationTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_PublishLocationTypeCollection result = new PS_PublishLocationTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_PublishLocationType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_PublishLocationTypes table.
	/// </summary>
	[DataContract]
	public partial class PS_PublishLocationType : ActiveRecord<PS_PublishLocationType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum PublishLocationTypeEnum : int
		{
			[EnumMember()] Company = 1,
			[EnumMember()] Region = 3,
			[EnumMember()] Team = 4,
		}

		//[DataMember]
		//public PublishLocationTypeEnum PublishLocationTypeCode
		//{
		//	get { return (PublishLocationTypeEnum)PublishLocationTypeID; }
		//	set { PublishLocationTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_PublishLocationType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_PublishLocationTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPublishLocationTypeID = new TableSchema.TableColumn(schema);
				colvarPublishLocationTypeID.ColumnName = "PublishLocationTypeID";
				colvarPublishLocationTypeID.DataType = DbType.Int32;
				colvarPublishLocationTypeID.MaxLength = 0;
				colvarPublishLocationTypeID.AutoIncrement = false;
				colvarPublishLocationTypeID.IsNullable = false;
				colvarPublishLocationTypeID.IsPrimaryKey = true;
				colvarPublishLocationTypeID.IsForeignKey = false;
				colvarPublishLocationTypeID.IsReadOnly = false;
				colvarPublishLocationTypeID.DefaultSetting = @"";
				colvarPublishLocationTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPublishLocationTypeID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_PublishLocationTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_PublishLocationType LoadFrom(PS_PublishLocationType item)
		{
			PS_PublishLocationType result = new PS_PublishLocationType();
			if (item.PublishLocationTypeID != default(int)) {
				result.LoadByKey(item.PublishLocationTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PublishLocationTypeID {
			get { return GetColumnValue<int>(Columns.PublishLocationTypeID); }
			set {
				SetColumnValue(Columns.PublishLocationTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PublishLocationTypeID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PublishLocationTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PublishLocationTypeID = @"PublishLocationTypeID";
			public static readonly string Name = @"Name";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PublishLocationTypeID; }
		}
		*/

		#region Foreign Collections

		private PS_PublishLocationCollection _PS_PublishLocationsCol;
		//Relationship: FK_PS_PublishLocations_PS_PublishLocationTypes
		public PS_PublishLocationCollection PS_PublishLocationsCol
		{
			get
			{
				if(_PS_PublishLocationsCol == null) {
					_PS_PublishLocationsCol = new PS_PublishLocationCollection();
					_PS_PublishLocationsCol.LoadAndCloseReader(PS_PublishLocation.Query()
						.WHERE(PS_PublishLocation.Columns.PublishLocationTypeID, PublishLocationTypeID).ExecuteReader());
				}
				return _PS_PublishLocationsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_QuestionOption class.
	/// </summary>
	[DataContract]
	public partial class PS_QuestionOptionCollection : ActiveList<PS_QuestionOption, PS_QuestionOptionCollection>
	{
		public static PS_QuestionOptionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_QuestionOptionCollection result = new PS_QuestionOptionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_QuestionOption item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_QuestionOptions table.
	/// </summary>
	[DataContract]
	public partial class PS_QuestionOption : ActiveRecord<PS_QuestionOption>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_QuestionOption()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_QuestionOptions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarQuestionOptionID = new TableSchema.TableColumn(schema);
				colvarQuestionOptionID.ColumnName = "QuestionOptionID";
				colvarQuestionOptionID.DataType = DbType.Int32;
				colvarQuestionOptionID.MaxLength = 0;
				colvarQuestionOptionID.AutoIncrement = true;
				colvarQuestionOptionID.IsNullable = false;
				colvarQuestionOptionID.IsPrimaryKey = true;
				colvarQuestionOptionID.IsForeignKey = false;
				colvarQuestionOptionID.IsReadOnly = false;
				colvarQuestionOptionID.DefaultSetting = @"";
				colvarQuestionOptionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestionOptionID);

				TableSchema.TableColumn colvarOptionText = new TableSchema.TableColumn(schema);
				colvarOptionText.ColumnName = "OptionText";
				colvarOptionText.DataType = DbType.String;
				colvarOptionText.MaxLength = 256;
				colvarOptionText.AutoIncrement = false;
				colvarOptionText.IsNullable = false;
				colvarOptionText.IsPrimaryKey = false;
				colvarOptionText.IsForeignKey = false;
				colvarOptionText.IsReadOnly = false;
				colvarOptionText.DefaultSetting = @"";
				colvarOptionText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOptionText);

				TableSchema.TableColumn colvarQuestionID = new TableSchema.TableColumn(schema);
				colvarQuestionID.ColumnName = "QuestionID";
				colvarQuestionID.DataType = DbType.Int32;
				colvarQuestionID.MaxLength = 0;
				colvarQuestionID.AutoIncrement = false;
				colvarQuestionID.IsNullable = false;
				colvarQuestionID.IsPrimaryKey = false;
				colvarQuestionID.IsForeignKey = true;
				colvarQuestionID.IsReadOnly = false;
				colvarQuestionID.DefaultSetting = @"";
				colvarQuestionID.ForeignKeyTableName = "PS_Questions";
				schema.Columns.Add(colvarQuestionID);

				TableSchema.TableColumn colvarRowNumber = new TableSchema.TableColumn(schema);
				colvarRowNumber.ColumnName = "RowNumber";
				colvarRowNumber.DataType = DbType.Int32;
				colvarRowNumber.MaxLength = 0;
				colvarRowNumber.AutoIncrement = false;
				colvarRowNumber.IsNullable = false;
				colvarRowNumber.IsPrimaryKey = false;
				colvarRowNumber.IsForeignKey = false;
				colvarRowNumber.IsReadOnly = false;
				colvarRowNumber.DefaultSetting = @"";
				colvarRowNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowNumber);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_QuestionOptions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_QuestionOption LoadFrom(PS_QuestionOption item)
		{
			PS_QuestionOption result = new PS_QuestionOption();
			if (item.QuestionOptionID != default(int)) {
				result.LoadByKey(item.QuestionOptionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int QuestionOptionID {
			get { return GetColumnValue<int>(Columns.QuestionOptionID); }
			set {
				SetColumnValue(Columns.QuestionOptionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionOptionID));
			}
		}
		[DataMember]
		public string OptionText {
			get { return GetColumnValue<string>(Columns.OptionText); }
			set {
				SetColumnValue(Columns.OptionText, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OptionText));
			}
		}
		[DataMember]
		public int QuestionID {
			get { return GetColumnValue<int>(Columns.QuestionID); }
			set {
				SetColumnValue(Columns.QuestionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionID));
			}
		}
		[DataMember]
		public int RowNumber {
			get { return GetColumnValue<int>(Columns.RowNumber); }
			set {
				SetColumnValue(Columns.RowNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RowNumber));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PS_Question _Question;
		//Relationship: FK_ER_QuestionOptions_ER_Questions
		public PS_Question Question
		{
			get
			{
				if(_Question == null) {
					_Question = PS_Question.FetchByID(this.QuestionID);
				}
				return _Question;
			}
			set
			{
				SetColumnValue("QuestionID", value.QuestionID);
				_Question = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return OptionText;
		}

		#region Typed Columns

		public static TableSchema.TableColumn QuestionOptionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn OptionTextColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn QuestionIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RowNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string QuestionOptionID = @"QuestionOptionID";
			public static readonly string OptionText = @"OptionText";
			public static readonly string QuestionID = @"QuestionID";
			public static readonly string RowNumber = @"RowNumber";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return QuestionOptionID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PS_QuestionResponse class.
	/// </summary>
	[DataContract]
	public partial class PS_QuestionResponseCollection : ActiveList<PS_QuestionResponse, PS_QuestionResponseCollection>
	{
		public static PS_QuestionResponseCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_QuestionResponseCollection result = new PS_QuestionResponseCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_QuestionResponse item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_QuestionResponses table.
	/// </summary>
	[DataContract]
	public partial class PS_QuestionResponse : ActiveRecord<PS_QuestionResponse>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_QuestionResponse()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_QuestionResponses", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarQuestionResponseID = new TableSchema.TableColumn(schema);
				colvarQuestionResponseID.ColumnName = "QuestionResponseID";
				colvarQuestionResponseID.DataType = DbType.Int32;
				colvarQuestionResponseID.MaxLength = 0;
				colvarQuestionResponseID.AutoIncrement = true;
				colvarQuestionResponseID.IsNullable = false;
				colvarQuestionResponseID.IsPrimaryKey = true;
				colvarQuestionResponseID.IsForeignKey = false;
				colvarQuestionResponseID.IsReadOnly = false;
				colvarQuestionResponseID.DefaultSetting = @"";
				colvarQuestionResponseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestionResponseID);

				TableSchema.TableColumn colvarQuestionResponseText = new TableSchema.TableColumn(schema);
				colvarQuestionResponseText.ColumnName = "QuestionResponseText";
				colvarQuestionResponseText.DataType = DbType.String;
				colvarQuestionResponseText.MaxLength = 500;
				colvarQuestionResponseText.AutoIncrement = false;
				colvarQuestionResponseText.IsNullable = false;
				colvarQuestionResponseText.IsPrimaryKey = false;
				colvarQuestionResponseText.IsForeignKey = false;
				colvarQuestionResponseText.IsReadOnly = false;
				colvarQuestionResponseText.DefaultSetting = @"";
				colvarQuestionResponseText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestionResponseText);

				TableSchema.TableColumn colvarQuestionID = new TableSchema.TableColumn(schema);
				colvarQuestionID.ColumnName = "QuestionID";
				colvarQuestionID.DataType = DbType.Int32;
				colvarQuestionID.MaxLength = 0;
				colvarQuestionID.AutoIncrement = false;
				colvarQuestionID.IsNullable = false;
				colvarQuestionID.IsPrimaryKey = false;
				colvarQuestionID.IsForeignKey = true;
				colvarQuestionID.IsReadOnly = false;
				colvarQuestionID.DefaultSetting = @"";
				colvarQuestionID.ForeignKeyTableName = "PS_Questions";
				schema.Columns.Add(colvarQuestionID);

				TableSchema.TableColumn colvarEventRegistrationID = new TableSchema.TableColumn(schema);
				colvarEventRegistrationID.ColumnName = "EventRegistrationID";
				colvarEventRegistrationID.DataType = DbType.Int32;
				colvarEventRegistrationID.MaxLength = 0;
				colvarEventRegistrationID.AutoIncrement = false;
				colvarEventRegistrationID.IsNullable = false;
				colvarEventRegistrationID.IsPrimaryKey = false;
				colvarEventRegistrationID.IsForeignKey = true;
				colvarEventRegistrationID.IsReadOnly = false;
				colvarEventRegistrationID.DefaultSetting = @"";
				colvarEventRegistrationID.ForeignKeyTableName = "PS_EventRegistrations";
				schema.Columns.Add(colvarEventRegistrationID);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_QuestionResponses",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_QuestionResponse LoadFrom(PS_QuestionResponse item)
		{
			PS_QuestionResponse result = new PS_QuestionResponse();
			if (item.QuestionResponseID != default(int)) {
				result.LoadByKey(item.QuestionResponseID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int QuestionResponseID {
			get { return GetColumnValue<int>(Columns.QuestionResponseID); }
			set {
				SetColumnValue(Columns.QuestionResponseID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionResponseID));
			}
		}
		[DataMember]
		public string QuestionResponseText {
			get { return GetColumnValue<string>(Columns.QuestionResponseText); }
			set {
				SetColumnValue(Columns.QuestionResponseText, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionResponseText));
			}
		}
		[DataMember]
		public int QuestionID {
			get { return GetColumnValue<int>(Columns.QuestionID); }
			set {
				SetColumnValue(Columns.QuestionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionID));
			}
		}
		[DataMember]
		public int EventRegistrationID {
			get { return GetColumnValue<int>(Columns.EventRegistrationID); }
			set {
				SetColumnValue(Columns.EventRegistrationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EventRegistrationID));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PS_EventRegistration _EventRegistration;
		//Relationship: FK_PS_QuestionResponses_PS_EventRegistrations
		public PS_EventRegistration EventRegistration
		{
			get
			{
				if(_EventRegistration == null) {
					_EventRegistration = PS_EventRegistration.FetchByID(this.EventRegistrationID);
				}
				return _EventRegistration;
			}
			set
			{
				SetColumnValue("EventRegistrationID", value.EventRegistrationID);
				_EventRegistration = value;
			}
		}

		private PS_Question _Question;
		//Relationship: FK_PS_QuestionResponses_PS_Questions
		public PS_Question Question
		{
			get
			{
				if(_Question == null) {
					_Question = PS_Question.FetchByID(this.QuestionID);
				}
				return _Question;
			}
			set
			{
				SetColumnValue("QuestionID", value.QuestionID);
				_Question = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return QuestionResponseText;
		}

		#region Typed Columns

		public static TableSchema.TableColumn QuestionResponseIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn QuestionResponseTextColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn QuestionIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn EventRegistrationIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string QuestionResponseID = @"QuestionResponseID";
			public static readonly string QuestionResponseText = @"QuestionResponseText";
			public static readonly string QuestionID = @"QuestionID";
			public static readonly string EventRegistrationID = @"EventRegistrationID";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return QuestionResponseID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PS_Question class.
	/// </summary>
	[DataContract]
	public partial class PS_QuestionCollection : ActiveList<PS_Question, PS_QuestionCollection>
	{
		public static PS_QuestionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_QuestionCollection result = new PS_QuestionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_Question item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_Questions table.
	/// </summary>
	[DataContract]
	public partial class PS_Question : ActiveRecord<PS_Question>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_Question()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_Questions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarQuestionID = new TableSchema.TableColumn(schema);
				colvarQuestionID.ColumnName = "QuestionID";
				colvarQuestionID.DataType = DbType.Int32;
				colvarQuestionID.MaxLength = 0;
				colvarQuestionID.AutoIncrement = true;
				colvarQuestionID.IsNullable = false;
				colvarQuestionID.IsPrimaryKey = true;
				colvarQuestionID.IsForeignKey = false;
				colvarQuestionID.IsReadOnly = false;
				colvarQuestionID.DefaultSetting = @"";
				colvarQuestionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestionID);

				TableSchema.TableColumn colvarQuestionText = new TableSchema.TableColumn(schema);
				colvarQuestionText.ColumnName = "QuestionText";
				colvarQuestionText.DataType = DbType.String;
				colvarQuestionText.MaxLength = 1024;
				colvarQuestionText.AutoIncrement = false;
				colvarQuestionText.IsNullable = false;
				colvarQuestionText.IsPrimaryKey = false;
				colvarQuestionText.IsForeignKey = false;
				colvarQuestionText.IsReadOnly = false;
				colvarQuestionText.DefaultSetting = @"";
				colvarQuestionText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestionText);

				TableSchema.TableColumn colvarArticleID = new TableSchema.TableColumn(schema);
				colvarArticleID.ColumnName = "ArticleID";
				colvarArticleID.DataType = DbType.Int32;
				colvarArticleID.MaxLength = 0;
				colvarArticleID.AutoIncrement = false;
				colvarArticleID.IsNullable = false;
				colvarArticleID.IsPrimaryKey = false;
				colvarArticleID.IsForeignKey = true;
				colvarArticleID.IsReadOnly = false;
				colvarArticleID.DefaultSetting = @"";
				colvarArticleID.ForeignKeyTableName = "PS_Articles";
				schema.Columns.Add(colvarArticleID);

				TableSchema.TableColumn colvarRowNumber = new TableSchema.TableColumn(schema);
				colvarRowNumber.ColumnName = "RowNumber";
				colvarRowNumber.DataType = DbType.Int32;
				colvarRowNumber.MaxLength = 0;
				colvarRowNumber.AutoIncrement = false;
				colvarRowNumber.IsNullable = false;
				colvarRowNumber.IsPrimaryKey = false;
				colvarRowNumber.IsForeignKey = false;
				colvarRowNumber.IsReadOnly = false;
				colvarRowNumber.DefaultSetting = @"";
				colvarRowNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowNumber);

				TableSchema.TableColumn colvarQuestionTypeID = new TableSchema.TableColumn(schema);
				colvarQuestionTypeID.ColumnName = "QuestionTypeID";
				colvarQuestionTypeID.DataType = DbType.Int32;
				colvarQuestionTypeID.MaxLength = 0;
				colvarQuestionTypeID.AutoIncrement = false;
				colvarQuestionTypeID.IsNullable = false;
				colvarQuestionTypeID.IsPrimaryKey = false;
				colvarQuestionTypeID.IsForeignKey = true;
				colvarQuestionTypeID.IsReadOnly = false;
				colvarQuestionTypeID.DefaultSetting = @"";
				colvarQuestionTypeID.ForeignKeyTableName = "PS_QuestionTypes";
				schema.Columns.Add(colvarQuestionTypeID);

				TableSchema.TableColumn colvarMin = new TableSchema.TableColumn(schema);
				colvarMin.ColumnName = "Min";
				colvarMin.DataType = DbType.Int32;
				colvarMin.MaxLength = 0;
				colvarMin.AutoIncrement = false;
				colvarMin.IsNullable = true;
				colvarMin.IsPrimaryKey = false;
				colvarMin.IsForeignKey = false;
				colvarMin.IsReadOnly = false;
				colvarMin.DefaultSetting = @"";
				colvarMin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMin);

				TableSchema.TableColumn colvarMax = new TableSchema.TableColumn(schema);
				colvarMax.ColumnName = "Max";
				colvarMax.DataType = DbType.Int32;
				colvarMax.MaxLength = 0;
				colvarMax.AutoIncrement = false;
				colvarMax.IsNullable = true;
				colvarMax.IsPrimaryKey = false;
				colvarMax.IsForeignKey = false;
				colvarMax.IsReadOnly = false;
				colvarMax.DefaultSetting = @"";
				colvarMax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMax);

				TableSchema.TableColumn colvarIsRequired = new TableSchema.TableColumn(schema);
				colvarIsRequired.ColumnName = "IsRequired";
				colvarIsRequired.DataType = DbType.Boolean;
				colvarIsRequired.MaxLength = 0;
				colvarIsRequired.AutoIncrement = false;
				colvarIsRequired.IsNullable = false;
				colvarIsRequired.IsPrimaryKey = false;
				colvarIsRequired.IsForeignKey = false;
				colvarIsRequired.IsReadOnly = false;
				colvarIsRequired.DefaultSetting = @"";
				colvarIsRequired.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsRequired);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_Questions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_Question LoadFrom(PS_Question item)
		{
			PS_Question result = new PS_Question();
			if (item.QuestionID != default(int)) {
				result.LoadByKey(item.QuestionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int QuestionID {
			get { return GetColumnValue<int>(Columns.QuestionID); }
			set {
				SetColumnValue(Columns.QuestionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionID));
			}
		}
		[DataMember]
		public string QuestionText {
			get { return GetColumnValue<string>(Columns.QuestionText); }
			set {
				SetColumnValue(Columns.QuestionText, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionText));
			}
		}
		[DataMember]
		public int ArticleID {
			get { return GetColumnValue<int>(Columns.ArticleID); }
			set {
				SetColumnValue(Columns.ArticleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ArticleID));
			}
		}
		[DataMember]
		public int RowNumber {
			get { return GetColumnValue<int>(Columns.RowNumber); }
			set {
				SetColumnValue(Columns.RowNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RowNumber));
			}
		}
		[DataMember]
		public int QuestionTypeID {
			get { return GetColumnValue<int>(Columns.QuestionTypeID); }
			set {
				SetColumnValue(Columns.QuestionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionTypeID));
			}
		}
		[DataMember]
		public int? Min {
			get { return GetColumnValue<int?>(Columns.Min); }
			set {
				SetColumnValue(Columns.Min, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Min));
			}
		}
		[DataMember]
		public int? Max {
			get { return GetColumnValue<int?>(Columns.Max); }
			set {
				SetColumnValue(Columns.Max, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Max));
			}
		}
		[DataMember]
		public bool IsRequired {
			get { return GetColumnValue<bool>(Columns.IsRequired); }
			set {
				SetColumnValue(Columns.IsRequired, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsRequired));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PS_QuestionType _QuestionType;
		//Relationship: FK_ER_Questions_ER_QuestionTypes
		public PS_QuestionType QuestionType
		{
			get
			{
				if(_QuestionType == null) {
					_QuestionType = PS_QuestionType.FetchByID(this.QuestionTypeID);
				}
				return _QuestionType;
			}
			set
			{
				SetColumnValue("QuestionTypeID", value.QuestionTypeID);
				_QuestionType = value;
			}
		}

		private PS_Article _Article;
		//Relationship: FK_PS_Questions_PS_Articles
		public PS_Article Article
		{
			get
			{
				if(_Article == null) {
					_Article = PS_Article.FetchByID(this.ArticleID);
				}
				return _Article;
			}
			set
			{
				SetColumnValue("ArticleID", value.ArticleID);
				_Article = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return QuestionText;
		}

		#region Typed Columns

		public static TableSchema.TableColumn QuestionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn QuestionTextColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ArticleIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RowNumberColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn QuestionTypeIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn MinColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn MaxColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsRequiredColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[12]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string QuestionID = @"QuestionID";
			public static readonly string QuestionText = @"QuestionText";
			public static readonly string ArticleID = @"ArticleID";
			public static readonly string RowNumber = @"RowNumber";
			public static readonly string QuestionTypeID = @"QuestionTypeID";
			public static readonly string Min = @"Min";
			public static readonly string Max = @"Max";
			public static readonly string IsRequired = @"IsRequired";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return QuestionID; }
		}
		*/

		#region Foreign Collections

		private PS_QuestionOptionCollection _PS_QuestionOptionsCol;
		//Relationship: FK_ER_QuestionOptions_ER_Questions
		public PS_QuestionOptionCollection PS_QuestionOptionsCol
		{
			get
			{
				if(_PS_QuestionOptionsCol == null) {
					_PS_QuestionOptionsCol = new PS_QuestionOptionCollection();
					_PS_QuestionOptionsCol.LoadAndCloseReader(PS_QuestionOption.Query()
						.WHERE(PS_QuestionOption.Columns.QuestionID, QuestionID).ExecuteReader());
				}
				return _PS_QuestionOptionsCol;
			}
		}

		private PS_QuestionResponseCollection _PS_QuestionResponsesCol;
		//Relationship: FK_PS_QuestionResponses_PS_Questions
		public PS_QuestionResponseCollection PS_QuestionResponsesCol
		{
			get
			{
				if(_PS_QuestionResponsesCol == null) {
					_PS_QuestionResponsesCol = new PS_QuestionResponseCollection();
					_PS_QuestionResponsesCol.LoadAndCloseReader(PS_QuestionResponse.Query()
						.WHERE(PS_QuestionResponse.Columns.QuestionID, QuestionID).ExecuteReader());
				}
				return _PS_QuestionResponsesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_QuestionType class.
	/// </summary>
	[DataContract]
	public partial class PS_QuestionTypeCollection : ActiveList<PS_QuestionType, PS_QuestionTypeCollection>
	{
		public static PS_QuestionTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_QuestionTypeCollection result = new PS_QuestionTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_QuestionType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_QuestionTypes table.
	/// </summary>
	[DataContract]
	public partial class PS_QuestionType : ActiveRecord<PS_QuestionType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum QuestionTypeEnum : int
		{
			[EnumMember()] Checkbox = 1,
			[EnumMember()] Number = 2,
			[EnumMember()] TextX = 3,
			[EnumMember()] Drop_Down_List = 4,
			[EnumMember()] Credit_Card = 5,
			[EnumMember()] Card_Expiration_Date = 6,
		}

		//[DataMember]
		//public QuestionTypeEnum QuestionTypeCode
		//{
		//	get { return (QuestionTypeEnum)QuestionTypeID; }
		//	set { QuestionTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_QuestionType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_QuestionTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarQuestionTypeID = new TableSchema.TableColumn(schema);
				colvarQuestionTypeID.ColumnName = "QuestionTypeID";
				colvarQuestionTypeID.DataType = DbType.Int32;
				colvarQuestionTypeID.MaxLength = 0;
				colvarQuestionTypeID.AutoIncrement = false;
				colvarQuestionTypeID.IsNullable = false;
				colvarQuestionTypeID.IsPrimaryKey = true;
				colvarQuestionTypeID.IsForeignKey = false;
				colvarQuestionTypeID.IsReadOnly = false;
				colvarQuestionTypeID.DefaultSetting = @"";
				colvarQuestionTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestionTypeID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 50;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_QuestionTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_QuestionType LoadFrom(PS_QuestionType item)
		{
			PS_QuestionType result = new PS_QuestionType();
			if (item.QuestionTypeID != default(int)) {
				result.LoadByKey(item.QuestionTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int QuestionTypeID {
			get { return GetColumnValue<int>(Columns.QuestionTypeID); }
			set {
				SetColumnValue(Columns.QuestionTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionTypeID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn QuestionTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string QuestionTypeID = @"QuestionTypeID";
			public static readonly string Name = @"Name";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return QuestionTypeID; }
		}
		*/

		#region Foreign Collections

		private PS_QuestionCollection _PS_QuestionsCol;
		//Relationship: FK_ER_Questions_ER_QuestionTypes
		public PS_QuestionCollection PS_QuestionsCol
		{
			get
			{
				if(_PS_QuestionsCol == null) {
					_PS_QuestionsCol = new PS_QuestionCollection();
					_PS_QuestionsCol.LoadAndCloseReader(PS_Question.Query()
						.WHERE(PS_Question.Columns.QuestionTypeID, QuestionTypeID).ExecuteReader());
				}
				return _PS_QuestionsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_UploadedContent class.
	/// </summary>
	[DataContract]
	public partial class PS_UploadedContentCollection : ActiveList<PS_UploadedContent, PS_UploadedContentCollection>
	{
		public static PS_UploadedContentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_UploadedContentCollection result = new PS_UploadedContentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_UploadedContent item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_UploadedContents table.
	/// </summary>
	[DataContract]
	public partial class PS_UploadedContent : ActiveRecord<PS_UploadedContent>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_UploadedContent()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_UploadedContents", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUploadedContentID = new TableSchema.TableColumn(schema);
				colvarUploadedContentID.ColumnName = "UploadedContentID";
				colvarUploadedContentID.DataType = DbType.Int32;
				colvarUploadedContentID.MaxLength = 0;
				colvarUploadedContentID.AutoIncrement = true;
				colvarUploadedContentID.IsNullable = false;
				colvarUploadedContentID.IsPrimaryKey = true;
				colvarUploadedContentID.IsForeignKey = false;
				colvarUploadedContentID.IsReadOnly = false;
				colvarUploadedContentID.DefaultSetting = @"";
				colvarUploadedContentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUploadedContentID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 255;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarUploadedContentTypeID = new TableSchema.TableColumn(schema);
				colvarUploadedContentTypeID.ColumnName = "UploadedContentTypeID";
				colvarUploadedContentTypeID.DataType = DbType.Int32;
				colvarUploadedContentTypeID.MaxLength = 0;
				colvarUploadedContentTypeID.AutoIncrement = false;
				colvarUploadedContentTypeID.IsNullable = false;
				colvarUploadedContentTypeID.IsPrimaryKey = false;
				colvarUploadedContentTypeID.IsForeignKey = true;
				colvarUploadedContentTypeID.IsReadOnly = false;
				colvarUploadedContentTypeID.DefaultSetting = @"";
				colvarUploadedContentTypeID.ForeignKeyTableName = "PS_UploadedContentTypes";
				schema.Columns.Add(colvarUploadedContentTypeID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarFileName = new TableSchema.TableColumn(schema);
				colvarFileName.ColumnName = "FileName";
				colvarFileName.DataType = DbType.String;
				colvarFileName.MaxLength = 255;
				colvarFileName.AutoIncrement = false;
				colvarFileName.IsNullable = false;
				colvarFileName.IsPrimaryKey = false;
				colvarFileName.IsForeignKey = false;
				colvarFileName.IsReadOnly = false;
				colvarFileName.DefaultSetting = @"";
				colvarFileName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileName);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Int32;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Int32;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_UploadedContents",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_UploadedContent LoadFrom(PS_UploadedContent item)
		{
			PS_UploadedContent result = new PS_UploadedContent();
			if (item.UploadedContentID != default(int)) {
				result.LoadByKey(item.UploadedContentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UploadedContentID {
			get { return GetColumnValue<int>(Columns.UploadedContentID); }
			set {
				SetColumnValue(Columns.UploadedContentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UploadedContentID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public int UploadedContentTypeID {
			get { return GetColumnValue<int>(Columns.UploadedContentTypeID); }
			set {
				SetColumnValue(Columns.UploadedContentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UploadedContentTypeID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public string FileName {
			get { return GetColumnValue<string>(Columns.FileName); }
			set {
				SetColumnValue(Columns.FileName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FileName));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public int CreatedBy {
			get { return GetColumnValue<int>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public int ModifiedBy {
			get { return GetColumnValue<int>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private PS_UploadedContentType _UploadedContentType;
		//Relationship: FK_PS_UploadedContents_PS_UploadedContentType
		public PS_UploadedContentType UploadedContentType
		{
			get
			{
				if(_UploadedContentType == null) {
					_UploadedContentType = PS_UploadedContentType.FetchByID(this.UploadedContentTypeID);
				}
				return _UploadedContentType;
			}
			set
			{
				SetColumnValue("UploadedContentTypeID", value.UploadedContentTypeID);
				_UploadedContentType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn UploadedContentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UploadedContentTypeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn FileNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UploadedContentID = @"UploadedContentID";
			public static readonly string Name = @"Name";
			public static readonly string UploadedContentTypeID = @"UploadedContentTypeID";
			public static readonly string UserID = @"UserID";
			public static readonly string FileName = @"FileName";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UploadedContentID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the PS_UploadedContentType class.
	/// </summary>
	[DataContract]
	public partial class PS_UploadedContentTypeCollection : ActiveList<PS_UploadedContentType, PS_UploadedContentTypeCollection>
	{
		public static PS_UploadedContentTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_UploadedContentTypeCollection result = new PS_UploadedContentTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_UploadedContentType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_UploadedContentTypes table.
	/// </summary>
	[DataContract]
	public partial class PS_UploadedContentType : ActiveRecord<PS_UploadedContentType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum UploadedContentTypeEnum : int
		{
			[EnumMember()] Article_Images = 1,
		}

		//[DataMember]
		//public UploadedContentTypeEnum UploadedContentTypeCode
		//{
		//	get { return (UploadedContentTypeEnum)UploadedContentTypeID; }
		//	set { UploadedContentTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_UploadedContentType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_UploadedContentTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUploadedContentTypeID = new TableSchema.TableColumn(schema);
				colvarUploadedContentTypeID.ColumnName = "UploadedContentTypeID";
				colvarUploadedContentTypeID.DataType = DbType.Int32;
				colvarUploadedContentTypeID.MaxLength = 0;
				colvarUploadedContentTypeID.AutoIncrement = false;
				colvarUploadedContentTypeID.IsNullable = false;
				colvarUploadedContentTypeID.IsPrimaryKey = true;
				colvarUploadedContentTypeID.IsForeignKey = false;
				colvarUploadedContentTypeID.IsReadOnly = false;
				colvarUploadedContentTypeID.DefaultSetting = @"";
				colvarUploadedContentTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUploadedContentTypeID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 255;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_UploadedContentTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_UploadedContentType LoadFrom(PS_UploadedContentType item)
		{
			PS_UploadedContentType result = new PS_UploadedContentType();
			if (item.UploadedContentTypeID != default(int)) {
				result.LoadByKey(item.UploadedContentTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UploadedContentTypeID {
			get { return GetColumnValue<int>(Columns.UploadedContentTypeID); }
			set {
				SetColumnValue(Columns.UploadedContentTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UploadedContentTypeID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn UploadedContentTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UploadedContentTypeID = @"UploadedContentTypeID";
			public static readonly string Name = @"Name";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UploadedContentTypeID; }
		}
		*/

		#region Foreign Collections

		private PS_UploadedContentCollection _PS_UploadedContentsCol;
		//Relationship: FK_PS_UploadedContents_PS_UploadedContentType
		public PS_UploadedContentCollection PS_UploadedContentsCol
		{
			get
			{
				if(_PS_UploadedContentsCol == null) {
					_PS_UploadedContentsCol = new PS_UploadedContentCollection();
					_PS_UploadedContentsCol.LoadAndCloseReader(PS_UploadedContent.Query()
						.WHERE(PS_UploadedContent.Columns.UploadedContentTypeID, UploadedContentTypeID).ExecuteReader());
				}
				return _PS_UploadedContentsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the PS_UserSetting class.
	/// </summary>
	[DataContract]
	public partial class PS_UserSettingCollection : ActiveList<PS_UserSetting, PS_UserSettingCollection>
	{
		public static PS_UserSettingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			PS_UserSettingCollection result = new PS_UserSettingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (PS_UserSetting item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the PS_UserSettings table.
	/// </summary>
	[DataContract]
	public partial class PS_UserSetting : ActiveRecord<PS_UserSetting>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public PS_UserSetting()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PS_UserSettings", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = true;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarShowCompetition = new TableSchema.TableColumn(schema);
				colvarShowCompetition.ColumnName = "ShowCompetition";
				colvarShowCompetition.DataType = DbType.Boolean;
				colvarShowCompetition.MaxLength = 0;
				colvarShowCompetition.AutoIncrement = false;
				colvarShowCompetition.IsNullable = false;
				colvarShowCompetition.IsPrimaryKey = false;
				colvarShowCompetition.IsForeignKey = false;
				colvarShowCompetition.IsReadOnly = false;
				colvarShowCompetition.DefaultSetting = @"";
				colvarShowCompetition.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShowCompetition);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Int32;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Int32;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("PS_UserSettings",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static PS_UserSetting LoadFrom(PS_UserSetting item)
		{
			PS_UserSetting result = new PS_UserSetting();
			if (item.UserID != default(int)) {
				result.LoadByKey(item.UserID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public bool ShowCompetition {
			get { return GetColumnValue<bool>(Columns.ShowCompetition); }
			set {
				SetColumnValue(Columns.ShowCompetition, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShowCompetition));
			}
		}
		[DataMember]
		public int CreatedBy {
			get { return GetColumnValue<int>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public int ModifiedBy {
			get { return GetColumnValue<int>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_User _User;
		//Relationship: FK_PS_UserSettings_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserID);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserID", value.UserID);
				_User = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return UserID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ShowCompetitionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UserID = @"UserID";
			public static readonly string ShowCompetition = @"ShowCompetition";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UserID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the QE_MatchingAnswer class.
	/// </summary>
	[DataContract]
	public partial class QE_MatchingAnswerCollection : ActiveList<QE_MatchingAnswer, QE_MatchingAnswerCollection>
	{
		public static QE_MatchingAnswerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QE_MatchingAnswerCollection result = new QE_MatchingAnswerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QE_MatchingAnswer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QE_MatchingAnswers table.
	/// </summary>
	[DataContract]
	public partial class QE_MatchingAnswer : ActiveRecord<QE_MatchingAnswer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QE_MatchingAnswer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QE_MatchingAnswers", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMatchingAnswerID = new TableSchema.TableColumn(schema);
				colvarMatchingAnswerID.ColumnName = "MatchingAnswerID";
				colvarMatchingAnswerID.DataType = DbType.Int32;
				colvarMatchingAnswerID.MaxLength = 0;
				colvarMatchingAnswerID.AutoIncrement = true;
				colvarMatchingAnswerID.IsNullable = false;
				colvarMatchingAnswerID.IsPrimaryKey = true;
				colvarMatchingAnswerID.IsForeignKey = false;
				colvarMatchingAnswerID.IsReadOnly = false;
				colvarMatchingAnswerID.DefaultSetting = @"";
				colvarMatchingAnswerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMatchingAnswerID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 1024;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("QE_MatchingAnswers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QE_MatchingAnswer LoadFrom(QE_MatchingAnswer item)
		{
			QE_MatchingAnswer result = new QE_MatchingAnswer();
			if (item.MatchingAnswerID != default(int)) {
				result.LoadByKey(item.MatchingAnswerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MatchingAnswerID {
			get { return GetColumnValue<int>(Columns.MatchingAnswerID); }
			set {
				SetColumnValue(Columns.MatchingAnswerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MatchingAnswerID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MatchingAnswerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MatchingAnswerID = @"MatchingAnswerID";
			public static readonly string Name = @"Name";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MatchingAnswerID; }
		}
		*/

		#region Foreign Collections

		private QE_PossibleAnswerCollection _QE_PossibleAnswersCol;
		//Relationship: FK_QE_PossibleAnswers_QE_MatchingAnswers
		public QE_PossibleAnswerCollection QE_PossibleAnswersCol
		{
			get
			{
				if(_QE_PossibleAnswersCol == null) {
					_QE_PossibleAnswersCol = new QE_PossibleAnswerCollection();
					_QE_PossibleAnswersCol.LoadAndCloseReader(QE_PossibleAnswer.Query()
						.WHERE(QE_PossibleAnswer.Columns.MatchingAnswerID, MatchingAnswerID).ExecuteReader());
				}
				return _QE_PossibleAnswersCol;
			}
		}

		private QE_QuestionResponseCollection _QE_QuestionResponsesCol;
		//Relationship: FK_QE_QuestionResponses_QE_MatchingAnswers
		public QE_QuestionResponseCollection QE_QuestionResponsesCol
		{
			get
			{
				if(_QE_QuestionResponsesCol == null) {
					_QE_QuestionResponsesCol = new QE_QuestionResponseCollection();
					_QE_QuestionResponsesCol.LoadAndCloseReader(QE_QuestionResponse.Query()
						.WHERE(QE_QuestionResponse.Columns.MatchingAnswerID, MatchingAnswerID).ExecuteReader());
				}
				return _QE_QuestionResponsesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QE_PossibleAnswer class.
	/// </summary>
	[DataContract]
	public partial class QE_PossibleAnswerCollection : ActiveList<QE_PossibleAnswer, QE_PossibleAnswerCollection>
	{
		public static QE_PossibleAnswerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QE_PossibleAnswerCollection result = new QE_PossibleAnswerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QE_PossibleAnswer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QE_PossibleAnswers table.
	/// </summary>
	[DataContract]
	public partial class QE_PossibleAnswer : ActiveRecord<QE_PossibleAnswer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QE_PossibleAnswer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QE_PossibleAnswers", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPossibleAnswerID = new TableSchema.TableColumn(schema);
				colvarPossibleAnswerID.ColumnName = "PossibleAnswerID";
				colvarPossibleAnswerID.DataType = DbType.Int32;
				colvarPossibleAnswerID.MaxLength = 0;
				colvarPossibleAnswerID.AutoIncrement = true;
				colvarPossibleAnswerID.IsNullable = false;
				colvarPossibleAnswerID.IsPrimaryKey = true;
				colvarPossibleAnswerID.IsForeignKey = false;
				colvarPossibleAnswerID.IsReadOnly = false;
				colvarPossibleAnswerID.DefaultSetting = @"";
				colvarPossibleAnswerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPossibleAnswerID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 1024;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarQuestionID = new TableSchema.TableColumn(schema);
				colvarQuestionID.ColumnName = "QuestionID";
				colvarQuestionID.DataType = DbType.Int32;
				colvarQuestionID.MaxLength = 0;
				colvarQuestionID.AutoIncrement = false;
				colvarQuestionID.IsNullable = false;
				colvarQuestionID.IsPrimaryKey = false;
				colvarQuestionID.IsForeignKey = true;
				colvarQuestionID.IsReadOnly = false;
				colvarQuestionID.DefaultSetting = @"";
				colvarQuestionID.ForeignKeyTableName = "QE_Questions";
				schema.Columns.Add(colvarQuestionID);

				TableSchema.TableColumn colvarIsCorrectAnswer = new TableSchema.TableColumn(schema);
				colvarIsCorrectAnswer.ColumnName = "IsCorrectAnswer";
				colvarIsCorrectAnswer.DataType = DbType.Boolean;
				colvarIsCorrectAnswer.MaxLength = 0;
				colvarIsCorrectAnswer.AutoIncrement = false;
				colvarIsCorrectAnswer.IsNullable = true;
				colvarIsCorrectAnswer.IsPrimaryKey = false;
				colvarIsCorrectAnswer.IsForeignKey = false;
				colvarIsCorrectAnswer.IsReadOnly = false;
				colvarIsCorrectAnswer.DefaultSetting = @"";
				colvarIsCorrectAnswer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCorrectAnswer);

				TableSchema.TableColumn colvarMatchingAnswerID = new TableSchema.TableColumn(schema);
				colvarMatchingAnswerID.ColumnName = "MatchingAnswerID";
				colvarMatchingAnswerID.DataType = DbType.Int32;
				colvarMatchingAnswerID.MaxLength = 0;
				colvarMatchingAnswerID.AutoIncrement = false;
				colvarMatchingAnswerID.IsNullable = true;
				colvarMatchingAnswerID.IsPrimaryKey = false;
				colvarMatchingAnswerID.IsForeignKey = true;
				colvarMatchingAnswerID.IsReadOnly = false;
				colvarMatchingAnswerID.DefaultSetting = @"";
				colvarMatchingAnswerID.ForeignKeyTableName = "QE_MatchingAnswers";
				schema.Columns.Add(colvarMatchingAnswerID);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("QE_PossibleAnswers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QE_PossibleAnswer LoadFrom(QE_PossibleAnswer item)
		{
			QE_PossibleAnswer result = new QE_PossibleAnswer();
			if (item.PossibleAnswerID != default(int)) {
				result.LoadByKey(item.PossibleAnswerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PossibleAnswerID {
			get { return GetColumnValue<int>(Columns.PossibleAnswerID); }
			set {
				SetColumnValue(Columns.PossibleAnswerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PossibleAnswerID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public int QuestionID {
			get { return GetColumnValue<int>(Columns.QuestionID); }
			set {
				SetColumnValue(Columns.QuestionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionID));
			}
		}
		[DataMember]
		public bool? IsCorrectAnswer {
			get { return GetColumnValue<bool?>(Columns.IsCorrectAnswer); }
			set {
				SetColumnValue(Columns.IsCorrectAnswer, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCorrectAnswer));
			}
		}
		[DataMember]
		public int? MatchingAnswerID {
			get { return GetColumnValue<int?>(Columns.MatchingAnswerID); }
			set {
				SetColumnValue(Columns.MatchingAnswerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MatchingAnswerID));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private QE_MatchingAnswer _MatchingAnswer;
		//Relationship: FK_QE_PossibleAnswers_QE_MatchingAnswers
		public QE_MatchingAnswer MatchingAnswer
		{
			get
			{
				if(_MatchingAnswer == null) {
					_MatchingAnswer = QE_MatchingAnswer.FetchByID(this.MatchingAnswerID);
				}
				return _MatchingAnswer;
			}
			set
			{
				SetColumnValue("MatchingAnswerID", value.MatchingAnswerID);
				_MatchingAnswer = value;
			}
		}

		private QE_Question _Question;
		//Relationship: FK_QE_PossibleAnswers_QE_Questions
		public QE_Question Question
		{
			get
			{
				if(_Question == null) {
					_Question = QE_Question.FetchByID(this.QuestionID);
				}
				return _Question;
			}
			set
			{
				SetColumnValue("QuestionID", value.QuestionID);
				_Question = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PossibleAnswerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn QuestionIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsCorrectAnswerColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MatchingAnswerIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PossibleAnswerID = @"PossibleAnswerID";
			public static readonly string Name = @"Name";
			public static readonly string QuestionID = @"QuestionID";
			public static readonly string IsCorrectAnswer = @"IsCorrectAnswer";
			public static readonly string MatchingAnswerID = @"MatchingAnswerID";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PossibleAnswerID; }
		}
		*/

		#region Foreign Collections

		private QE_QuestionResponseCollection _QE_QuestionResponsesCol;
		//Relationship: FK_QE_QuestionResponses_QE_PossibleAnswers
		public QE_QuestionResponseCollection QE_QuestionResponsesCol
		{
			get
			{
				if(_QE_QuestionResponsesCol == null) {
					_QE_QuestionResponsesCol = new QE_QuestionResponseCollection();
					_QE_QuestionResponsesCol.LoadAndCloseReader(QE_QuestionResponse.Query()
						.WHERE(QE_QuestionResponse.Columns.PossibleAnswerID, PossibleAnswerID).ExecuteReader());
				}
				return _QE_QuestionResponsesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QE_QuestionResponse class.
	/// </summary>
	[DataContract]
	public partial class QE_QuestionResponseCollection : ActiveList<QE_QuestionResponse, QE_QuestionResponseCollection>
	{
		public static QE_QuestionResponseCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QE_QuestionResponseCollection result = new QE_QuestionResponseCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QE_QuestionResponse item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QE_QuestionResponses table.
	/// </summary>
	[DataContract]
	public partial class QE_QuestionResponse : ActiveRecord<QE_QuestionResponse>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QE_QuestionResponse()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QE_QuestionResponses", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarQuestionResponseID = new TableSchema.TableColumn(schema);
				colvarQuestionResponseID.ColumnName = "QuestionResponseID";
				colvarQuestionResponseID.DataType = DbType.Int32;
				colvarQuestionResponseID.MaxLength = 0;
				colvarQuestionResponseID.AutoIncrement = true;
				colvarQuestionResponseID.IsNullable = false;
				colvarQuestionResponseID.IsPrimaryKey = true;
				colvarQuestionResponseID.IsForeignKey = false;
				colvarQuestionResponseID.IsReadOnly = false;
				colvarQuestionResponseID.DefaultSetting = @"";
				colvarQuestionResponseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestionResponseID);

				TableSchema.TableColumn colvarQuizResponseID = new TableSchema.TableColumn(schema);
				colvarQuizResponseID.ColumnName = "QuizResponseID";
				colvarQuizResponseID.DataType = DbType.Int32;
				colvarQuizResponseID.MaxLength = 0;
				colvarQuizResponseID.AutoIncrement = false;
				colvarQuizResponseID.IsNullable = false;
				colvarQuizResponseID.IsPrimaryKey = false;
				colvarQuizResponseID.IsForeignKey = true;
				colvarQuizResponseID.IsReadOnly = false;
				colvarQuizResponseID.DefaultSetting = @"";
				colvarQuizResponseID.ForeignKeyTableName = "QE_QuizResponses";
				schema.Columns.Add(colvarQuizResponseID);

				TableSchema.TableColumn colvarPossibleAnswerID = new TableSchema.TableColumn(schema);
				colvarPossibleAnswerID.ColumnName = "PossibleAnswerID";
				colvarPossibleAnswerID.DataType = DbType.Int32;
				colvarPossibleAnswerID.MaxLength = 0;
				colvarPossibleAnswerID.AutoIncrement = false;
				colvarPossibleAnswerID.IsNullable = false;
				colvarPossibleAnswerID.IsPrimaryKey = false;
				colvarPossibleAnswerID.IsForeignKey = true;
				colvarPossibleAnswerID.IsReadOnly = false;
				colvarPossibleAnswerID.DefaultSetting = @"";
				colvarPossibleAnswerID.ForeignKeyTableName = "QE_PossibleAnswers";
				schema.Columns.Add(colvarPossibleAnswerID);

				TableSchema.TableColumn colvarIsCorrectAnswer = new TableSchema.TableColumn(schema);
				colvarIsCorrectAnswer.ColumnName = "IsCorrectAnswer";
				colvarIsCorrectAnswer.DataType = DbType.Boolean;
				colvarIsCorrectAnswer.MaxLength = 0;
				colvarIsCorrectAnswer.AutoIncrement = false;
				colvarIsCorrectAnswer.IsNullable = true;
				colvarIsCorrectAnswer.IsPrimaryKey = false;
				colvarIsCorrectAnswer.IsForeignKey = false;
				colvarIsCorrectAnswer.IsReadOnly = false;
				colvarIsCorrectAnswer.DefaultSetting = @"";
				colvarIsCorrectAnswer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCorrectAnswer);

				TableSchema.TableColumn colvarMatchingAnswerID = new TableSchema.TableColumn(schema);
				colvarMatchingAnswerID.ColumnName = "MatchingAnswerID";
				colvarMatchingAnswerID.DataType = DbType.Int32;
				colvarMatchingAnswerID.MaxLength = 0;
				colvarMatchingAnswerID.AutoIncrement = false;
				colvarMatchingAnswerID.IsNullable = true;
				colvarMatchingAnswerID.IsPrimaryKey = false;
				colvarMatchingAnswerID.IsForeignKey = true;
				colvarMatchingAnswerID.IsReadOnly = false;
				colvarMatchingAnswerID.DefaultSetting = @"";
				colvarMatchingAnswerID.ForeignKeyTableName = "QE_MatchingAnswers";
				schema.Columns.Add(colvarMatchingAnswerID);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("QE_QuestionResponses",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QE_QuestionResponse LoadFrom(QE_QuestionResponse item)
		{
			QE_QuestionResponse result = new QE_QuestionResponse();
			if (item.QuestionResponseID != default(int)) {
				result.LoadByKey(item.QuestionResponseID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int QuestionResponseID {
			get { return GetColumnValue<int>(Columns.QuestionResponseID); }
			set {
				SetColumnValue(Columns.QuestionResponseID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionResponseID));
			}
		}
		[DataMember]
		public int QuizResponseID {
			get { return GetColumnValue<int>(Columns.QuizResponseID); }
			set {
				SetColumnValue(Columns.QuizResponseID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuizResponseID));
			}
		}
		[DataMember]
		public int PossibleAnswerID {
			get { return GetColumnValue<int>(Columns.PossibleAnswerID); }
			set {
				SetColumnValue(Columns.PossibleAnswerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PossibleAnswerID));
			}
		}
		[DataMember]
		public bool? IsCorrectAnswer {
			get { return GetColumnValue<bool?>(Columns.IsCorrectAnswer); }
			set {
				SetColumnValue(Columns.IsCorrectAnswer, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCorrectAnswer));
			}
		}
		[DataMember]
		public int? MatchingAnswerID {
			get { return GetColumnValue<int?>(Columns.MatchingAnswerID); }
			set {
				SetColumnValue(Columns.MatchingAnswerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MatchingAnswerID));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private QE_MatchingAnswer _MatchingAnswer;
		//Relationship: FK_QE_QuestionResponses_QE_MatchingAnswers
		public QE_MatchingAnswer MatchingAnswer
		{
			get
			{
				if(_MatchingAnswer == null) {
					_MatchingAnswer = QE_MatchingAnswer.FetchByID(this.MatchingAnswerID);
				}
				return _MatchingAnswer;
			}
			set
			{
				SetColumnValue("MatchingAnswerID", value.MatchingAnswerID);
				_MatchingAnswer = value;
			}
		}

		private QE_PossibleAnswer _PossibleAnswer;
		//Relationship: FK_QE_QuestionResponses_QE_PossibleAnswers
		public QE_PossibleAnswer PossibleAnswer
		{
			get
			{
				if(_PossibleAnswer == null) {
					_PossibleAnswer = QE_PossibleAnswer.FetchByID(this.PossibleAnswerID);
				}
				return _PossibleAnswer;
			}
			set
			{
				SetColumnValue("PossibleAnswerID", value.PossibleAnswerID);
				_PossibleAnswer = value;
			}
		}

		private QE_QuizResponse _QuizResponse;
		//Relationship: FK_QE_QuestionResponses_QE_QuizResponses
		public QE_QuizResponse QuizResponse
		{
			get
			{
				if(_QuizResponse == null) {
					_QuizResponse = QE_QuizResponse.FetchByID(this.QuizResponseID);
				}
				return _QuizResponse;
			}
			set
			{
				SetColumnValue("QuizResponseID", value.QuizResponseID);
				_QuizResponse = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return QuestionResponseID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn QuestionResponseIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn QuizResponseIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PossibleAnswerIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsCorrectAnswerColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MatchingAnswerIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string QuestionResponseID = @"QuestionResponseID";
			public static readonly string QuizResponseID = @"QuizResponseID";
			public static readonly string PossibleAnswerID = @"PossibleAnswerID";
			public static readonly string IsCorrectAnswer = @"IsCorrectAnswer";
			public static readonly string MatchingAnswerID = @"MatchingAnswerID";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return QuestionResponseID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the QE_Question class.
	/// </summary>
	[DataContract]
	public partial class QE_QuestionCollection : ActiveList<QE_Question, QE_QuestionCollection>
	{
		public static QE_QuestionCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QE_QuestionCollection result = new QE_QuestionCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QE_Question item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QE_Questions table.
	/// </summary>
	[DataContract]
	public partial class QE_Question : ActiveRecord<QE_Question>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QE_Question()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QE_Questions", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarQuestionID = new TableSchema.TableColumn(schema);
				colvarQuestionID.ColumnName = "QuestionID";
				colvarQuestionID.DataType = DbType.Int32;
				colvarQuestionID.MaxLength = 0;
				colvarQuestionID.AutoIncrement = true;
				colvarQuestionID.IsNullable = false;
				colvarQuestionID.IsPrimaryKey = true;
				colvarQuestionID.IsForeignKey = false;
				colvarQuestionID.IsReadOnly = false;
				colvarQuestionID.DefaultSetting = @"";
				colvarQuestionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuestionID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 1024;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarQuizID = new TableSchema.TableColumn(schema);
				colvarQuizID.ColumnName = "QuizID";
				colvarQuizID.DataType = DbType.Int32;
				colvarQuizID.MaxLength = 0;
				colvarQuizID.AutoIncrement = false;
				colvarQuizID.IsNullable = false;
				colvarQuizID.IsPrimaryKey = false;
				colvarQuizID.IsForeignKey = true;
				colvarQuizID.IsReadOnly = false;
				colvarQuizID.DefaultSetting = @"";
				colvarQuizID.ForeignKeyTableName = "QE_Quizzes";
				schema.Columns.Add(colvarQuizID);

				TableSchema.TableColumn colvarIsMatching = new TableSchema.TableColumn(schema);
				colvarIsMatching.ColumnName = "IsMatching";
				colvarIsMatching.DataType = DbType.Boolean;
				colvarIsMatching.MaxLength = 0;
				colvarIsMatching.AutoIncrement = false;
				colvarIsMatching.IsNullable = false;
				colvarIsMatching.IsPrimaryKey = false;
				colvarIsMatching.IsForeignKey = false;
				colvarIsMatching.IsReadOnly = false;
				colvarIsMatching.DefaultSetting = @"";
				colvarIsMatching.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMatching);

				TableSchema.TableColumn colvarIsMatchingMultiPoint = new TableSchema.TableColumn(schema);
				colvarIsMatchingMultiPoint.ColumnName = "IsMatchingMultiPoint";
				colvarIsMatchingMultiPoint.DataType = DbType.Boolean;
				colvarIsMatchingMultiPoint.MaxLength = 0;
				colvarIsMatchingMultiPoint.AutoIncrement = false;
				colvarIsMatchingMultiPoint.IsNullable = false;
				colvarIsMatchingMultiPoint.IsPrimaryKey = false;
				colvarIsMatchingMultiPoint.IsForeignKey = false;
				colvarIsMatchingMultiPoint.IsReadOnly = false;
				colvarIsMatchingMultiPoint.DefaultSetting = @"";
				colvarIsMatchingMultiPoint.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsMatchingMultiPoint);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("QE_Questions",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QE_Question LoadFrom(QE_Question item)
		{
			QE_Question result = new QE_Question();
			if (item.QuestionID != default(int)) {
				result.LoadByKey(item.QuestionID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int QuestionID {
			get { return GetColumnValue<int>(Columns.QuestionID); }
			set {
				SetColumnValue(Columns.QuestionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuestionID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public int QuizID {
			get { return GetColumnValue<int>(Columns.QuizID); }
			set {
				SetColumnValue(Columns.QuizID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuizID));
			}
		}
		[DataMember]
		public bool IsMatching {
			get { return GetColumnValue<bool>(Columns.IsMatching); }
			set {
				SetColumnValue(Columns.IsMatching, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsMatching));
			}
		}
		[DataMember]
		public bool IsMatchingMultiPoint {
			get { return GetColumnValue<bool>(Columns.IsMatchingMultiPoint); }
			set {
				SetColumnValue(Columns.IsMatchingMultiPoint, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsMatchingMultiPoint));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private QE_Quiz _Quiz;
		//Relationship: FK_QE_Questions_QE_Quizzes
		public QE_Quiz Quiz
		{
			get
			{
				if(_Quiz == null) {
					_Quiz = QE_Quiz.FetchByID(this.QuizID);
				}
				return _Quiz;
			}
			set
			{
				SetColumnValue("QuizID", value.QuizID);
				_Quiz = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn QuestionIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn QuizIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsMatchingColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsMatchingMultiPointColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string QuestionID = @"QuestionID";
			public static readonly string Name = @"Name";
			public static readonly string QuizID = @"QuizID";
			public static readonly string IsMatching = @"IsMatching";
			public static readonly string IsMatchingMultiPoint = @"IsMatchingMultiPoint";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return QuestionID; }
		}
		*/

		#region Foreign Collections

		private QE_PossibleAnswerCollection _QE_PossibleAnswersCol;
		//Relationship: FK_QE_PossibleAnswers_QE_Questions
		public QE_PossibleAnswerCollection QE_PossibleAnswersCol
		{
			get
			{
				if(_QE_PossibleAnswersCol == null) {
					_QE_PossibleAnswersCol = new QE_PossibleAnswerCollection();
					_QE_PossibleAnswersCol.LoadAndCloseReader(QE_PossibleAnswer.Query()
						.WHERE(QE_PossibleAnswer.Columns.QuestionID, QuestionID).ExecuteReader());
				}
				return _QE_PossibleAnswersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QE_QuizResponse class.
	/// </summary>
	[DataContract]
	public partial class QE_QuizResponseCollection : ActiveList<QE_QuizResponse, QE_QuizResponseCollection>
	{
		public static QE_QuizResponseCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QE_QuizResponseCollection result = new QE_QuizResponseCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QE_QuizResponse item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QE_QuizResponses table.
	/// </summary>
	[DataContract]
	public partial class QE_QuizResponse : ActiveRecord<QE_QuizResponse>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QE_QuizResponse()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QE_QuizResponses", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarQuizResponseID = new TableSchema.TableColumn(schema);
				colvarQuizResponseID.ColumnName = "QuizResponseID";
				colvarQuizResponseID.DataType = DbType.Int32;
				colvarQuizResponseID.MaxLength = 0;
				colvarQuizResponseID.AutoIncrement = true;
				colvarQuizResponseID.IsNullable = false;
				colvarQuizResponseID.IsPrimaryKey = true;
				colvarQuizResponseID.IsForeignKey = false;
				colvarQuizResponseID.IsReadOnly = false;
				colvarQuizResponseID.DefaultSetting = @"";
				colvarQuizResponseID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuizResponseID);

				TableSchema.TableColumn colvarQuizID = new TableSchema.TableColumn(schema);
				colvarQuizID.ColumnName = "QuizID";
				colvarQuizID.DataType = DbType.Int32;
				colvarQuizID.MaxLength = 0;
				colvarQuizID.AutoIncrement = false;
				colvarQuizID.IsNullable = false;
				colvarQuizID.IsPrimaryKey = false;
				colvarQuizID.IsForeignKey = true;
				colvarQuizID.IsReadOnly = false;
				colvarQuizID.DefaultSetting = @"";
				colvarQuizID.ForeignKeyTableName = "QE_Quizzes";
				schema.Columns.Add(colvarQuizID);

				TableSchema.TableColumn colvarTakenBy = new TableSchema.TableColumn(schema);
				colvarTakenBy.ColumnName = "TakenBy";
				colvarTakenBy.DataType = DbType.Int32;
				colvarTakenBy.MaxLength = 0;
				colvarTakenBy.AutoIncrement = false;
				colvarTakenBy.IsNullable = false;
				colvarTakenBy.IsPrimaryKey = false;
				colvarTakenBy.IsForeignKey = true;
				colvarTakenBy.IsReadOnly = false;
				colvarTakenBy.DefaultSetting = @"";
				colvarTakenBy.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarTakenBy);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("QE_QuizResponses",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QE_QuizResponse LoadFrom(QE_QuizResponse item)
		{
			QE_QuizResponse result = new QE_QuizResponse();
			if (item.QuizResponseID != default(int)) {
				result.LoadByKey(item.QuizResponseID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int QuizResponseID {
			get { return GetColumnValue<int>(Columns.QuizResponseID); }
			set {
				SetColumnValue(Columns.QuizResponseID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuizResponseID));
			}
		}
		[DataMember]
		public int QuizID {
			get { return GetColumnValue<int>(Columns.QuizID); }
			set {
				SetColumnValue(Columns.QuizID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuizID));
			}
		}
		[DataMember]
		public int TakenBy {
			get { return GetColumnValue<int>(Columns.TakenBy); }
			set {
				SetColumnValue(Columns.TakenBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TakenBy));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private QE_Quiz _Quiz;
		//Relationship: FK_QE_QuizResponses_QE_Quizzes
		public QE_Quiz Quiz
		{
			get
			{
				if(_Quiz == null) {
					_Quiz = QE_Quiz.FetchByID(this.QuizID);
				}
				return _Quiz;
			}
			set
			{
				SetColumnValue("QuizID", value.QuizID);
				_Quiz = value;
			}
		}

		private RU_User _TakenByValue;
		//Relationship: FK_QE_QuizResponses_RU_Users
		public RU_User TakenByValue
		{
			get
			{
				if(_TakenByValue == null) {
					_TakenByValue = RU_User.FetchByID(this.TakenBy);
				}
				return _TakenByValue;
			}
			set
			{
				SetColumnValue("TakenBy", value.UserID);
				_TakenByValue = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return QuizResponseID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn QuizResponseIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn QuizIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TakenByColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string QuizResponseID = @"QuizResponseID";
			public static readonly string QuizID = @"QuizID";
			public static readonly string TakenBy = @"TakenBy";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return QuizResponseID; }
		}
		*/

		#region Foreign Collections

		private QE_QuestionResponseCollection _QE_QuestionResponsesCol;
		//Relationship: FK_QE_QuestionResponses_QE_QuizResponses
		public QE_QuestionResponseCollection QE_QuestionResponsesCol
		{
			get
			{
				if(_QE_QuestionResponsesCol == null) {
					_QE_QuestionResponsesCol = new QE_QuestionResponseCollection();
					_QE_QuestionResponsesCol.LoadAndCloseReader(QE_QuestionResponse.Query()
						.WHERE(QE_QuestionResponse.Columns.QuizResponseID, QuizResponseID).ExecuteReader());
				}
				return _QE_QuestionResponsesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the QE_Quiz class.
	/// </summary>
	[DataContract]
	public partial class QE_QuizCollection : ActiveList<QE_Quiz, QE_QuizCollection>
	{
		public static QE_QuizCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			QE_QuizCollection result = new QE_QuizCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (QE_Quiz item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the QE_Quizzes table.
	/// </summary>
	[DataContract]
	public partial class QE_Quiz : ActiveRecord<QE_Quiz>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public QE_Quiz()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QE_Quizzes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarQuizID = new TableSchema.TableColumn(schema);
				colvarQuizID.ColumnName = "QuizID";
				colvarQuizID.DataType = DbType.Int32;
				colvarQuizID.MaxLength = 0;
				colvarQuizID.AutoIncrement = true;
				colvarQuizID.IsNullable = false;
				colvarQuizID.IsPrimaryKey = true;
				colvarQuizID.IsForeignKey = false;
				colvarQuizID.IsReadOnly = false;
				colvarQuizID.DefaultSetting = @"";
				colvarQuizID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuizID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 1024;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarPassingScore = new TableSchema.TableColumn(schema);
				colvarPassingScore.ColumnName = "PassingScore";
				colvarPassingScore.DataType = DbType.Int32;
				colvarPassingScore.MaxLength = 0;
				colvarPassingScore.AutoIncrement = false;
				colvarPassingScore.IsNullable = false;
				colvarPassingScore.IsPrimaryKey = false;
				colvarPassingScore.IsForeignKey = false;
				colvarPassingScore.IsReadOnly = false;
				colvarPassingScore.DefaultSetting = @"";
				colvarPassingScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassingScore);

				TableSchema.TableColumn colvarMaxAttempts = new TableSchema.TableColumn(schema);
				colvarMaxAttempts.ColumnName = "MaxAttempts";
				colvarMaxAttempts.DataType = DbType.Int32;
				colvarMaxAttempts.MaxLength = 0;
				colvarMaxAttempts.AutoIncrement = false;
				colvarMaxAttempts.IsNullable = false;
				colvarMaxAttempts.IsPrimaryKey = false;
				colvarMaxAttempts.IsForeignKey = false;
				colvarMaxAttempts.IsReadOnly = false;
				colvarMaxAttempts.DefaultSetting = @"";
				colvarMaxAttempts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxAttempts);

				TableSchema.TableColumn colvarEmails = new TableSchema.TableColumn(schema);
				colvarEmails.ColumnName = "Emails";
				colvarEmails.DataType = DbType.String;
				colvarEmails.MaxLength = 1024;
				colvarEmails.AutoIncrement = false;
				colvarEmails.IsNullable = true;
				colvarEmails.IsPrimaryKey = false;
				colvarEmails.IsForeignKey = false;
				colvarEmails.IsReadOnly = false;
				colvarEmails.DefaultSetting = @"";
				colvarEmails.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmails);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("QE_Quizzes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static QE_Quiz LoadFrom(QE_Quiz item)
		{
			QE_Quiz result = new QE_Quiz();
			if (item.QuizID != default(int)) {
				result.LoadByKey(item.QuizID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int QuizID {
			get { return GetColumnValue<int>(Columns.QuizID); }
			set {
				SetColumnValue(Columns.QuizID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuizID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public int PassingScore {
			get { return GetColumnValue<int>(Columns.PassingScore); }
			set {
				SetColumnValue(Columns.PassingScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassingScore));
			}
		}
		[DataMember]
		public int MaxAttempts {
			get { return GetColumnValue<int>(Columns.MaxAttempts); }
			set {
				SetColumnValue(Columns.MaxAttempts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxAttempts));
			}
		}
		[DataMember]
		public string Emails {
			get { return GetColumnValue<string>(Columns.Emails); }
			set {
				SetColumnValue(Columns.Emails, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Emails));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn QuizIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PassingScoreColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MaxAttemptsColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn EmailsColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string QuizID = @"QuizID";
			public static readonly string Name = @"Name";
			public static readonly string PassingScore = @"PassingScore";
			public static readonly string MaxAttempts = @"MaxAttempts";
			public static readonly string Emails = @"Emails";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return QuizID; }
		}
		*/

		#region Foreign Collections

		private QE_QuestionCollection _QE_QuestionsCol;
		//Relationship: FK_QE_Questions_QE_Quizzes
		public QE_QuestionCollection QE_QuestionsCol
		{
			get
			{
				if(_QE_QuestionsCol == null) {
					_QE_QuestionsCol = new QE_QuestionCollection();
					_QE_QuestionsCol.LoadAndCloseReader(QE_Question.Query()
						.WHERE(QE_Question.Columns.QuizID, QuizID).ExecuteReader());
				}
				return _QE_QuestionsCol;
			}
		}

		private QE_QuizResponseCollection _QE_QuizResponsesCol;
		//Relationship: FK_QE_QuizResponses_QE_Quizzes
		public QE_QuizResponseCollection QE_QuizResponsesCol
		{
			get
			{
				if(_QE_QuizResponsesCol == null) {
					_QE_QuizResponsesCol = new QE_QuizResponseCollection();
					_QE_QuizResponsesCol.LoadAndCloseReader(QE_QuizResponse.Query()
						.WHERE(QE_QuizResponse.Columns.QuizID, QuizID).ExecuteReader());
				}
				return _QE_QuizResponsesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_AuthenticationToken class.
	/// </summary>
	[DataContract]
	public partial class RU_AuthenticationTokenCollection : ActiveList<RU_AuthenticationToken, RU_AuthenticationTokenCollection>
	{
		public static RU_AuthenticationTokenCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_AuthenticationTokenCollection result = new RU_AuthenticationTokenCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_AuthenticationToken item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_AuthenticationTokens table.
	/// </summary>
	[DataContract]
	public partial class RU_AuthenticationToken : ActiveRecord<RU_AuthenticationToken>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_AuthenticationToken()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_AuthenticationTokens", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAuthenticationTokenId = new TableSchema.TableColumn(schema);
				colvarAuthenticationTokenId.ColumnName = "AuthenticationTokenId";
				colvarAuthenticationTokenId.DataType = DbType.Guid;
				colvarAuthenticationTokenId.MaxLength = 0;
				colvarAuthenticationTokenId.AutoIncrement = false;
				colvarAuthenticationTokenId.IsNullable = false;
				colvarAuthenticationTokenId.IsPrimaryKey = true;
				colvarAuthenticationTokenId.IsForeignKey = false;
				colvarAuthenticationTokenId.IsReadOnly = false;
				colvarAuthenticationTokenId.DefaultSetting = @"(newid())";
				colvarAuthenticationTokenId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAuthenticationTokenId);

				TableSchema.TableColumn colvarLoginAuditId = new TableSchema.TableColumn(schema);
				colvarLoginAuditId.ColumnName = "LoginAuditId";
				colvarLoginAuditId.DataType = DbType.Int64;
				colvarLoginAuditId.MaxLength = 0;
				colvarLoginAuditId.AutoIncrement = false;
				colvarLoginAuditId.IsNullable = false;
				colvarLoginAuditId.IsPrimaryKey = false;
				colvarLoginAuditId.IsForeignKey = true;
				colvarLoginAuditId.IsReadOnly = false;
				colvarLoginAuditId.DefaultSetting = @"";
				colvarLoginAuditId.ForeignKeyTableName = "RU_LoginAudit";
				schema.Columns.Add(colvarLoginAuditId);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"(getdate())";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarUsedByDate = new TableSchema.TableColumn(schema);
				colvarUsedByDate.ColumnName = "UsedByDate";
				colvarUsedByDate.DataType = DbType.DateTime;
				colvarUsedByDate.MaxLength = 0;
				colvarUsedByDate.AutoIncrement = false;
				colvarUsedByDate.IsNullable = true;
				colvarUsedByDate.IsPrimaryKey = false;
				colvarUsedByDate.IsForeignKey = false;
				colvarUsedByDate.IsReadOnly = false;
				colvarUsedByDate.DefaultSetting = @"";
				colvarUsedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_AuthenticationTokens",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_AuthenticationToken LoadFrom(RU_AuthenticationToken item)
		{
			RU_AuthenticationToken result = new RU_AuthenticationToken();
			if (item.AuthenticationTokenId != default(Guid)) {
				result.LoadByKey(item.AuthenticationTokenId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public Guid AuthenticationTokenId {
			get { return GetColumnValue<Guid>(Columns.AuthenticationTokenId); }
			set {
				SetColumnValue(Columns.AuthenticationTokenId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AuthenticationTokenId));
			}
		}
		[DataMember]
		public long LoginAuditId {
			get { return GetColumnValue<long>(Columns.LoginAuditId); }
			set {
				SetColumnValue(Columns.LoginAuditId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoginAuditId));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public DateTime? UsedByDate {
			get { return GetColumnValue<DateTime?>(Columns.UsedByDate); }
			set {
				SetColumnValue(Columns.UsedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UsedByDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_LoginAudit _LoginAudit;
		//Relationship: FK_RU_AuthenticationTokens_RU_LoginAudit
		public RU_LoginAudit LoginAudit
		{
			get
			{
				if(_LoginAudit == null) {
					_LoginAudit = RU_LoginAudit.FetchByID(this.LoginAuditId);
				}
				return _LoginAudit;
			}
			set
			{
				SetColumnValue("LoginAuditId", value.LoginAuditID);
				_LoginAudit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AuthenticationTokenId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AuthenticationTokenIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LoginAuditIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UsedByDateColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AuthenticationTokenId = @"AuthenticationTokenId";
			public static readonly string LoginAuditId = @"LoginAuditId";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string UsedByDate = @"UsedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AuthenticationTokenId; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_BaseTeamLocation class.
	/// </summary>
	[DataContract]
	public partial class RU_BaseTeamLocationCollection : ActiveList<RU_BaseTeamLocation, RU_BaseTeamLocationCollection>
	{
		public static RU_BaseTeamLocationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_BaseTeamLocationCollection result = new RU_BaseTeamLocationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_BaseTeamLocation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_BaseTeamLocations table.
	/// </summary>
	[DataContract]
	public partial class RU_BaseTeamLocation : ActiveRecord<RU_BaseTeamLocation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_BaseTeamLocation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_BaseTeamLocations", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = false;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarMarketId = new TableSchema.TableColumn(schema);
				colvarMarketId.ColumnName = "MarketId";
				colvarMarketId.DataType = DbType.Int32;
				colvarMarketId.MaxLength = 0;
				colvarMarketId.AutoIncrement = false;
				colvarMarketId.IsNullable = true;
				colvarMarketId.IsPrimaryKey = false;
				colvarMarketId.IsForeignKey = false;
				colvarMarketId.IsReadOnly = false;
				colvarMarketId.DefaultSetting = @"";
				colvarMarketId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMarketId);

				TableSchema.TableColumn colvarCRMTerritoryGuid = new TableSchema.TableColumn(schema);
				colvarCRMTerritoryGuid.ColumnName = "CRMTerritoryGuid";
				colvarCRMTerritoryGuid.DataType = DbType.Guid;
				colvarCRMTerritoryGuid.MaxLength = 0;
				colvarCRMTerritoryGuid.AutoIncrement = false;
				colvarCRMTerritoryGuid.IsNullable = true;
				colvarCRMTerritoryGuid.IsPrimaryKey = false;
				colvarCRMTerritoryGuid.IsForeignKey = false;
				colvarCRMTerritoryGuid.IsReadOnly = false;
				colvarCRMTerritoryGuid.DefaultSetting = @"";
				colvarCRMTerritoryGuid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRMTerritoryGuid);

				TableSchema.TableColumn colvarCRMSiteGuid = new TableSchema.TableColumn(schema);
				colvarCRMSiteGuid.ColumnName = "CRMSiteGuid";
				colvarCRMSiteGuid.DataType = DbType.Guid;
				colvarCRMSiteGuid.MaxLength = 0;
				colvarCRMSiteGuid.AutoIncrement = false;
				colvarCRMSiteGuid.IsNullable = true;
				colvarCRMSiteGuid.IsPrimaryKey = false;
				colvarCRMSiteGuid.IsForeignKey = false;
				colvarCRMSiteGuid.IsReadOnly = false;
				colvarCRMSiteGuid.DefaultSetting = @"";
				colvarCRMSiteGuid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCRMSiteGuid);

				TableSchema.TableColumn colvarGPOffice = new TableSchema.TableColumn(schema);
				colvarGPOffice.ColumnName = "GPOffice";
				colvarGPOffice.DataType = DbType.String;
				colvarGPOffice.MaxLength = 15;
				colvarGPOffice.AutoIncrement = false;
				colvarGPOffice.IsNullable = true;
				colvarGPOffice.IsPrimaryKey = false;
				colvarGPOffice.IsForeignKey = false;
				colvarGPOffice.IsReadOnly = false;
				colvarGPOffice.DefaultSetting = @"";
				colvarGPOffice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPOffice);

				TableSchema.TableColumn colvarWHSESite = new TableSchema.TableColumn(schema);
				colvarWHSESite.ColumnName = "WHSESite";
				colvarWHSESite.DataType = DbType.String;
				colvarWHSESite.MaxLength = 15;
				colvarWHSESite.AutoIncrement = false;
				colvarWHSESite.IsNullable = true;
				colvarWHSESite.IsPrimaryKey = false;
				colvarWHSESite.IsForeignKey = false;
				colvarWHSESite.IsReadOnly = false;
				colvarWHSESite.DefaultSetting = @"";
				colvarWHSESite.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWHSESite);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.AnsiString;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = true;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "MC_PoliticalStates";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarSiteCodeID = new TableSchema.TableColumn(schema);
				colvarSiteCodeID.ColumnName = "SiteCodeID";
				colvarSiteCodeID.DataType = DbType.Int32;
				colvarSiteCodeID.MaxLength = 0;
				colvarSiteCodeID.AutoIncrement = false;
				colvarSiteCodeID.IsNullable = true;
				colvarSiteCodeID.IsPrimaryKey = false;
				colvarSiteCodeID.IsForeignKey = false;
				colvarSiteCodeID.IsReadOnly = false;
				colvarSiteCodeID.DefaultSetting = @"";
				colvarSiteCodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteCodeID);

				TableSchema.TableColumn colvarTimeZoneOffset = new TableSchema.TableColumn(schema);
				colvarTimeZoneOffset.ColumnName = "TimeZoneOffset";
				colvarTimeZoneOffset.DataType = DbType.Int32;
				colvarTimeZoneOffset.MaxLength = 0;
				colvarTimeZoneOffset.AutoIncrement = false;
				colvarTimeZoneOffset.IsNullable = true;
				colvarTimeZoneOffset.IsPrimaryKey = false;
				colvarTimeZoneOffset.IsForeignKey = false;
				colvarTimeZoneOffset.IsReadOnly = false;
				colvarTimeZoneOffset.DefaultSetting = @"";
				colvarTimeZoneOffset.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneOffset);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Int32;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"((1))";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Int32;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"((1))";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_BaseTeamLocations",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int? MarketId {
			get { return GetColumnValue<int?>(Columns.MarketId); }
			set {
				SetColumnValue(Columns.MarketId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MarketId));
			}
		}
		[DataMember]
		public Guid? CRMTerritoryGuid {
			get { return GetColumnValue<Guid?>(Columns.CRMTerritoryGuid); }
			set {
				SetColumnValue(Columns.CRMTerritoryGuid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CRMTerritoryGuid));
			}
		}
		[DataMember]
		public Guid? CRMSiteGuid {
			get { return GetColumnValue<Guid?>(Columns.CRMSiteGuid); }
			set {
				SetColumnValue(Columns.CRMSiteGuid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CRMSiteGuid));
			}
		}
		[DataMember]
		public string GPOffice {
			get { return GetColumnValue<string>(Columns.GPOffice); }
			set {
				SetColumnValue(Columns.GPOffice, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPOffice));
			}
		}
		[DataMember]
		public string WHSESite {
			get { return GetColumnValue<string>(Columns.WHSESite); }
			set {
				SetColumnValue(Columns.WHSESite, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WHSESite));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public int? SiteCodeID {
			get { return GetColumnValue<int?>(Columns.SiteCodeID); }
			set {
				SetColumnValue(Columns.SiteCodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteCodeID));
			}
		}
		[DataMember]
		public int? TimeZoneOffset {
			get { return GetColumnValue<int?>(Columns.TimeZoneOffset); }
			set {
				SetColumnValue(Columns.TimeZoneOffset, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneOffset));
			}
		}
		[DataMember]
		public int CreatedBy {
			get { return GetColumnValue<int>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public int ModifiedBy {
			get { return GetColumnValue<int>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_PoliticalState _State;
		//Relationship: FK_RU_BaseTeamLocations_MC_PoliticalStates
		public MC_PoliticalState State
		{
			get
			{
				if(_State == null) {
					_State = MC_PoliticalState.FetchByID(this.StateId);
				}
				return _State;
			}
			set
			{
				SetColumnValue("StateId", value.StateID);
				_State = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TeamLocationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MarketIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CRMTerritoryGuidColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CRMSiteGuidColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPOfficeColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn WHSESiteColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn SiteCodeIDColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn TimeZoneOffsetColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[14]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string MarketId = @"MarketId";
			public static readonly string CRMTerritoryGuid = @"CRMTerritoryGuid";
			public static readonly string CRMSiteGuid = @"CRMSiteGuid";
			public static readonly string GPOffice = @"GPOffice";
			public static readonly string WHSESite = @"WHSESite";
			public static readonly string Description = @"Description";
			public static readonly string City = @"City";
			public static readonly string StateId = @"StateId";
			public static readonly string SiteCodeID = @"SiteCodeID";
			public static readonly string TimeZoneOffset = @"TimeZoneOffset";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_BoardMessage class.
	/// </summary>
	[DataContract]
	public partial class RU_BoardMessageCollection : ActiveList<RU_BoardMessage, RU_BoardMessageCollection>
	{
		public static RU_BoardMessageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_BoardMessageCollection result = new RU_BoardMessageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_BoardMessage item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_BoardMessages table.
	/// </summary>
	[DataContract]
	public partial class RU_BoardMessage : ActiveRecord<RU_BoardMessage>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_BoardMessage()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_BoardMessages", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarBoardMessageID = new TableSchema.TableColumn(schema);
				colvarBoardMessageID.ColumnName = "BoardMessageID";
				colvarBoardMessageID.DataType = DbType.Int32;
				colvarBoardMessageID.MaxLength = 0;
				colvarBoardMessageID.AutoIncrement = true;
				colvarBoardMessageID.IsNullable = false;
				colvarBoardMessageID.IsPrimaryKey = true;
				colvarBoardMessageID.IsForeignKey = false;
				colvarBoardMessageID.IsReadOnly = false;
				colvarBoardMessageID.DefaultSetting = @"";
				colvarBoardMessageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBoardMessageID);

				TableSchema.TableColumn colvarMessage = new TableSchema.TableColumn(schema);
				colvarMessage.ColumnName = "Message";
				colvarMessage.DataType = DbType.String;
				colvarMessage.MaxLength = -1;
				colvarMessage.AutoIncrement = false;
				colvarMessage.IsNullable = false;
				colvarMessage.IsPrimaryKey = false;
				colvarMessage.IsForeignKey = false;
				colvarMessage.IsReadOnly = false;
				colvarMessage.DefaultSetting = @"";
				colvarMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessage);

				TableSchema.TableColumn colvarRecipientID = new TableSchema.TableColumn(schema);
				colvarRecipientID.ColumnName = "RecipientID";
				colvarRecipientID.DataType = DbType.Int32;
				colvarRecipientID.MaxLength = 0;
				colvarRecipientID.AutoIncrement = false;
				colvarRecipientID.IsNullable = false;
				colvarRecipientID.IsPrimaryKey = false;
				colvarRecipientID.IsForeignKey = true;
				colvarRecipientID.IsReadOnly = false;
				colvarRecipientID.DefaultSetting = @"";
				colvarRecipientID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarRecipientID);

				TableSchema.TableColumn colvarSenderID = new TableSchema.TableColumn(schema);
				colvarSenderID.ColumnName = "SenderID";
				colvarSenderID.DataType = DbType.Int32;
				colvarSenderID.MaxLength = 0;
				colvarSenderID.AutoIncrement = false;
				colvarSenderID.IsNullable = false;
				colvarSenderID.IsPrimaryKey = false;
				colvarSenderID.IsForeignKey = true;
				colvarSenderID.IsReadOnly = false;
				colvarSenderID.DefaultSetting = @"";
				colvarSenderID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarSenderID);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_BoardMessages",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_BoardMessage LoadFrom(RU_BoardMessage item)
		{
			RU_BoardMessage result = new RU_BoardMessage();
			if (item.BoardMessageID != default(int)) {
				result.LoadByKey(item.BoardMessageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int BoardMessageID {
			get { return GetColumnValue<int>(Columns.BoardMessageID); }
			set {
				SetColumnValue(Columns.BoardMessageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BoardMessageID));
			}
		}
		[DataMember]
		public string Message {
			get { return GetColumnValue<string>(Columns.Message); }
			set {
				SetColumnValue(Columns.Message, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Message));
			}
		}
		[DataMember]
		public int RecipientID {
			get { return GetColumnValue<int>(Columns.RecipientID); }
			set {
				SetColumnValue(Columns.RecipientID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecipientID));
			}
		}
		[DataMember]
		public int SenderID {
			get { return GetColumnValue<int>(Columns.SenderID); }
			set {
				SetColumnValue(Columns.SenderID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SenderID));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_User _Recipient;
		//Relationship: FK_RU_MessageBoards_Recipient
		public RU_User Recipient
		{
			get
			{
				if(_Recipient == null) {
					_Recipient = RU_User.FetchByID(this.RecipientID);
				}
				return _Recipient;
			}
			set
			{
				SetColumnValue("RecipientID", value.UserID);
				_Recipient = value;
			}
		}

		private RU_User _Sender;
		//Relationship: FK_RU_MessageBoards_Sender
		public RU_User Sender
		{
			get
			{
				if(_Sender == null) {
					_Sender = RU_User.FetchByID(this.SenderID);
				}
				return _Sender;
			}
			set
			{
				SetColumnValue("SenderID", value.UserID);
				_Sender = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Message;
		}

		#region Typed Columns

		public static TableSchema.TableColumn BoardMessageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn MessageColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RecipientIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SenderIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string BoardMessageID = @"BoardMessageID";
			public static readonly string Message = @"Message";
			public static readonly string RecipientID = @"RecipientID";
			public static readonly string SenderID = @"SenderID";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return BoardMessageID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_CommissionChangeHistory class.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionChangeHistoryCollection : ActiveList<RU_CommissionChangeHistory, RU_CommissionChangeHistoryCollection>
	{
		public static RU_CommissionChangeHistoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_CommissionChangeHistoryCollection result = new RU_CommissionChangeHistoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_CommissionChangeHistory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_CommissionChangeHistory table.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionChangeHistory : ActiveRecord<RU_CommissionChangeHistory>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_CommissionChangeHistory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_CommissionChangeHistory", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCommissionChangeHistoryID = new TableSchema.TableColumn(schema);
				colvarCommissionChangeHistoryID.ColumnName = "CommissionChangeHistoryID";
				colvarCommissionChangeHistoryID.DataType = DbType.Int32;
				colvarCommissionChangeHistoryID.MaxLength = 0;
				colvarCommissionChangeHistoryID.AutoIncrement = true;
				colvarCommissionChangeHistoryID.IsNullable = false;
				colvarCommissionChangeHistoryID.IsPrimaryKey = true;
				colvarCommissionChangeHistoryID.IsForeignKey = false;
				colvarCommissionChangeHistoryID.IsReadOnly = false;
				colvarCommissionChangeHistoryID.DefaultSetting = @"";
				colvarCommissionChangeHistoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommissionChangeHistoryID);

				TableSchema.TableColumn colvarCommissionConfigID = new TableSchema.TableColumn(schema);
				colvarCommissionConfigID.ColumnName = "CommissionConfigID";
				colvarCommissionConfigID.DataType = DbType.Int32;
				colvarCommissionConfigID.MaxLength = 0;
				colvarCommissionConfigID.AutoIncrement = false;
				colvarCommissionConfigID.IsNullable = true;
				colvarCommissionConfigID.IsPrimaryKey = false;
				colvarCommissionConfigID.IsForeignKey = false;
				colvarCommissionConfigID.IsReadOnly = false;
				colvarCommissionConfigID.DefaultSetting = @"";
				colvarCommissionConfigID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommissionConfigID);

				TableSchema.TableColumn colvarOldValue = new TableSchema.TableColumn(schema);
				colvarOldValue.ColumnName = "OldValue";
				colvarOldValue.DataType = DbType.String;
				colvarOldValue.MaxLength = 50;
				colvarOldValue.AutoIncrement = false;
				colvarOldValue.IsNullable = true;
				colvarOldValue.IsPrimaryKey = false;
				colvarOldValue.IsForeignKey = false;
				colvarOldValue.IsReadOnly = false;
				colvarOldValue.DefaultSetting = @"";
				colvarOldValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOldValue);

				TableSchema.TableColumn colvarNewValue = new TableSchema.TableColumn(schema);
				colvarNewValue.ColumnName = "NewValue";
				colvarNewValue.DataType = DbType.String;
				colvarNewValue.MaxLength = 50;
				colvarNewValue.AutoIncrement = false;
				colvarNewValue.IsNullable = true;
				colvarNewValue.IsPrimaryKey = false;
				colvarNewValue.IsForeignKey = false;
				colvarNewValue.IsReadOnly = false;
				colvarNewValue.DefaultSetting = @"";
				colvarNewValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNewValue);

				TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
				colvarUserName.ColumnName = "UserName";
				colvarUserName.DataType = DbType.String;
				colvarUserName.MaxLength = 50;
				colvarUserName.AutoIncrement = false;
				colvarUserName.IsNullable = true;
				colvarUserName.IsPrimaryKey = false;
				colvarUserName.IsForeignKey = false;
				colvarUserName.IsReadOnly = false;
				colvarUserName.DefaultSetting = @"";
				colvarUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserName);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarRU_CommissionPOBID = new TableSchema.TableColumn(schema);
				colvarRU_CommissionPOBID.ColumnName = "RU_CommissionPOBID";
				colvarRU_CommissionPOBID.DataType = DbType.Int32;
				colvarRU_CommissionPOBID.MaxLength = 0;
				colvarRU_CommissionPOBID.AutoIncrement = false;
				colvarRU_CommissionPOBID.IsNullable = true;
				colvarRU_CommissionPOBID.IsPrimaryKey = false;
				colvarRU_CommissionPOBID.IsForeignKey = false;
				colvarRU_CommissionPOBID.IsReadOnly = false;
				colvarRU_CommissionPOBID.DefaultSetting = @"";
				colvarRU_CommissionPOBID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRU_CommissionPOBID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_CommissionChangeHistory",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_CommissionChangeHistory LoadFrom(RU_CommissionChangeHistory item)
		{
			RU_CommissionChangeHistory result = new RU_CommissionChangeHistory();
			if (item.CommissionChangeHistoryID != default(int)) {
				result.LoadByKey(item.CommissionChangeHistoryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CommissionChangeHistoryID {
			get { return GetColumnValue<int>(Columns.CommissionChangeHistoryID); }
			set {
				SetColumnValue(Columns.CommissionChangeHistoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommissionChangeHistoryID));
			}
		}
		[DataMember]
		public int? CommissionConfigID {
			get { return GetColumnValue<int?>(Columns.CommissionConfigID); }
			set {
				SetColumnValue(Columns.CommissionConfigID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommissionConfigID));
			}
		}
		[DataMember]
		public string OldValue {
			get { return GetColumnValue<string>(Columns.OldValue); }
			set {
				SetColumnValue(Columns.OldValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OldValue));
			}
		}
		[DataMember]
		public string NewValue {
			get { return GetColumnValue<string>(Columns.NewValue); }
			set {
				SetColumnValue(Columns.NewValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NewValue));
			}
		}
		[DataMember]
		public string UserName {
			get { return GetColumnValue<string>(Columns.UserName); }
			set {
				SetColumnValue(Columns.UserName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserName));
			}
		}
		[DataMember]
		public DateTime? ModifiedDate {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public int? RU_CommissionPOBID {
			get { return GetColumnValue<int?>(Columns.RU_CommissionPOBID); }
			set {
				SetColumnValue(Columns.RU_CommissionPOBID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RU_CommissionPOBID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CommissionChangeHistoryID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CommissionChangeHistoryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CommissionConfigIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn OldValueColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn NewValueColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn UserNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RU_CommissionPOBIDColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CommissionChangeHistoryID = @"CommissionChangeHistoryID";
			public static readonly string CommissionConfigID = @"CommissionConfigID";
			public static readonly string OldValue = @"OldValue";
			public static readonly string NewValue = @"NewValue";
			public static readonly string UserName = @"UserName";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string RU_CommissionPOBID = @"RU_CommissionPOBID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CommissionChangeHistoryID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_CommissionConfig class.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionConfigCollection : ActiveList<RU_CommissionConfig, RU_CommissionConfigCollection>
	{
		public static RU_CommissionConfigCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_CommissionConfigCollection result = new RU_CommissionConfigCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_CommissionConfig item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_CommissionConfig table.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionConfig : ActiveRecord<RU_CommissionConfig>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_CommissionConfig()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_CommissionConfig", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCommissionConfigID = new TableSchema.TableColumn(schema);
				colvarCommissionConfigID.ColumnName = "CommissionConfigID";
				colvarCommissionConfigID.DataType = DbType.Int32;
				colvarCommissionConfigID.MaxLength = 0;
				colvarCommissionConfigID.AutoIncrement = true;
				colvarCommissionConfigID.IsNullable = false;
				colvarCommissionConfigID.IsPrimaryKey = true;
				colvarCommissionConfigID.IsForeignKey = false;
				colvarCommissionConfigID.IsReadOnly = false;
				colvarCommissionConfigID.DefaultSetting = @"";
				colvarCommissionConfigID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommissionConfigID);

				TableSchema.TableColumn colvarConstantName = new TableSchema.TableColumn(schema);
				colvarConstantName.ColumnName = "ConstantName";
				colvarConstantName.DataType = DbType.String;
				colvarConstantName.MaxLength = 150;
				colvarConstantName.AutoIncrement = false;
				colvarConstantName.IsNullable = true;
				colvarConstantName.IsPrimaryKey = false;
				colvarConstantName.IsForeignKey = false;
				colvarConstantName.IsReadOnly = false;
				colvarConstantName.DefaultSetting = @"";
				colvarConstantName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConstantName);

				TableSchema.TableColumn colvarValueX = new TableSchema.TableColumn(schema);
				colvarValueX.ColumnName = "Value";
				colvarValueX.DataType = DbType.Decimal;
				colvarValueX.MaxLength = 0;
				colvarValueX.AutoIncrement = false;
				colvarValueX.IsNullable = true;
				colvarValueX.IsPrimaryKey = false;
				colvarValueX.IsForeignKey = false;
				colvarValueX.IsReadOnly = false;
				colvarValueX.DefaultSetting = @"";
				colvarValueX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueX);

				TableSchema.TableColumn colvarRU_CommissionSeason_UserTypeID = new TableSchema.TableColumn(schema);
				colvarRU_CommissionSeason_UserTypeID.ColumnName = "RU_CommissionSeason_UserTypeID";
				colvarRU_CommissionSeason_UserTypeID.DataType = DbType.Int32;
				colvarRU_CommissionSeason_UserTypeID.MaxLength = 0;
				colvarRU_CommissionSeason_UserTypeID.AutoIncrement = false;
				colvarRU_CommissionSeason_UserTypeID.IsNullable = true;
				colvarRU_CommissionSeason_UserTypeID.IsPrimaryKey = false;
				colvarRU_CommissionSeason_UserTypeID.IsForeignKey = true;
				colvarRU_CommissionSeason_UserTypeID.IsReadOnly = false;
				colvarRU_CommissionSeason_UserTypeID.DefaultSetting = @"";
				colvarRU_CommissionSeason_UserTypeID.ForeignKeyTableName = "RU_CommissionSeason_UserType";
				schema.Columns.Add(colvarRU_CommissionSeason_UserTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 150;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_CommissionConfig",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_CommissionConfig LoadFrom(RU_CommissionConfig item)
		{
			RU_CommissionConfig result = new RU_CommissionConfig();
			if (item.CommissionConfigID != default(int)) {
				result.LoadByKey(item.CommissionConfigID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CommissionConfigID {
			get { return GetColumnValue<int>(Columns.CommissionConfigID); }
			set {
				SetColumnValue(Columns.CommissionConfigID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommissionConfigID));
			}
		}
		[DataMember]
		public string ConstantName {
			get { return GetColumnValue<string>(Columns.ConstantName); }
			set {
				SetColumnValue(Columns.ConstantName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ConstantName));
			}
		}
		[DataMember]
		public decimal? ValueX {
			get { return GetColumnValue<decimal?>(Columns.ValueX); }
			set {
				SetColumnValue(Columns.ValueX, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ValueX));
			}
		}
		[DataMember]
		public int? RU_CommissionSeason_UserTypeID {
			get { return GetColumnValue<int?>(Columns.RU_CommissionSeason_UserTypeID); }
			set {
				SetColumnValue(Columns.RU_CommissionSeason_UserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RU_CommissionSeason_UserTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_CommissionSeason_UserType _RU_CommissionSeason_UserType;
		//Relationship: FK_RU_CommissionConfig_RU_CommissionSeason_UserType
		public RU_CommissionSeason_UserType RU_CommissionSeason_UserType
		{
			get
			{
				if(_RU_CommissionSeason_UserType == null) {
					_RU_CommissionSeason_UserType = RU_CommissionSeason_UserType.FetchByID(this.RU_CommissionSeason_UserTypeID);
				}
				return _RU_CommissionSeason_UserType;
			}
			set
			{
				SetColumnValue("RU_CommissionSeason_UserTypeID", value.RU_CommissionSeason_UserTypeID);
				_RU_CommissionSeason_UserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return ConstantName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CommissionConfigIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ConstantNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ValueXColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RU_CommissionSeason_UserTypeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CommissionConfigID = @"CommissionConfigID";
			public static readonly string ConstantName = @"ConstantName";
			public static readonly string ValueX = @"Value";
			public static readonly string RU_CommissionSeason_UserTypeID = @"RU_CommissionSeason_UserTypeID";
			public static readonly string Description = @"Description";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CommissionConfigID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_CommissionPayout class.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionPayoutCollection : ActiveList<RU_CommissionPayout, RU_CommissionPayoutCollection>
	{
		public static RU_CommissionPayoutCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_CommissionPayoutCollection result = new RU_CommissionPayoutCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_CommissionPayout item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_CommissionPayouts table.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionPayout : ActiveRecord<RU_CommissionPayout>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_CommissionPayout()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_CommissionPayouts", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCommissionPayoutID = new TableSchema.TableColumn(schema);
				colvarCommissionPayoutID.ColumnName = "CommissionPayoutID";
				colvarCommissionPayoutID.DataType = DbType.Int32;
				colvarCommissionPayoutID.MaxLength = 0;
				colvarCommissionPayoutID.AutoIncrement = true;
				colvarCommissionPayoutID.IsNullable = false;
				colvarCommissionPayoutID.IsPrimaryKey = true;
				colvarCommissionPayoutID.IsForeignKey = false;
				colvarCommissionPayoutID.IsReadOnly = false;
				colvarCommissionPayoutID.DefaultSetting = @"";
				colvarCommissionPayoutID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommissionPayoutID);

				TableSchema.TableColumn colvarCommissionRecordID = new TableSchema.TableColumn(schema);
				colvarCommissionRecordID.ColumnName = "CommissionRecordID";
				colvarCommissionRecordID.DataType = DbType.Int32;
				colvarCommissionRecordID.MaxLength = 0;
				colvarCommissionRecordID.AutoIncrement = false;
				colvarCommissionRecordID.IsNullable = false;
				colvarCommissionRecordID.IsPrimaryKey = false;
				colvarCommissionRecordID.IsForeignKey = true;
				colvarCommissionRecordID.IsReadOnly = false;
				colvarCommissionRecordID.DefaultSetting = @"";
				colvarCommissionRecordID.ForeignKeyTableName = "RU_CommissionRecords";
				schema.Columns.Add(colvarCommissionRecordID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = true;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarPTQV = new TableSchema.TableColumn(schema);
				colvarPTQV.ColumnName = "PTQV";
				colvarPTQV.DataType = DbType.Int32;
				colvarPTQV.MaxLength = 0;
				colvarPTQV.AutoIncrement = false;
				colvarPTQV.IsNullable = true;
				colvarPTQV.IsPrimaryKey = false;
				colvarPTQV.IsForeignKey = false;
				colvarPTQV.IsReadOnly = false;
				colvarPTQV.DefaultSetting = @"";
				colvarPTQV.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPTQV);

				TableSchema.TableColumn colvarGVP = new TableSchema.TableColumn(schema);
				colvarGVP.ColumnName = "GVP";
				colvarGVP.DataType = DbType.Decimal;
				colvarGVP.MaxLength = 0;
				colvarGVP.AutoIncrement = false;
				colvarGVP.IsNullable = true;
				colvarGVP.IsPrimaryKey = false;
				colvarGVP.IsForeignKey = false;
				colvarGVP.IsReadOnly = false;
				colvarGVP.DefaultSetting = @"";
				colvarGVP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGVP);

				TableSchema.TableColumn colvarTOBP = new TableSchema.TableColumn(schema);
				colvarTOBP.ColumnName = "TOBP";
				colvarTOBP.DataType = DbType.Decimal;
				colvarTOBP.MaxLength = 0;
				colvarTOBP.AutoIncrement = false;
				colvarTOBP.IsNullable = true;
				colvarTOBP.IsPrimaryKey = false;
				colvarTOBP.IsForeignKey = false;
				colvarTOBP.IsReadOnly = false;
				colvarTOBP.DefaultSetting = @"";
				colvarTOBP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTOBP);

				TableSchema.TableColumn colvarTOBA = new TableSchema.TableColumn(schema);
				colvarTOBA.ColumnName = "TOBA";
				colvarTOBA.DataType = DbType.Decimal;
				colvarTOBA.MaxLength = 0;
				colvarTOBA.AutoIncrement = false;
				colvarTOBA.IsNullable = true;
				colvarTOBA.IsPrimaryKey = false;
				colvarTOBA.IsForeignKey = false;
				colvarTOBA.IsReadOnly = false;
				colvarTOBA.DefaultSetting = @"";
				colvarTOBA.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTOBA);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_CommissionPayouts",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_CommissionPayout LoadFrom(RU_CommissionPayout item)
		{
			RU_CommissionPayout result = new RU_CommissionPayout();
			if (item.CommissionPayoutID != default(int)) {
				result.LoadByKey(item.CommissionPayoutID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CommissionPayoutID {
			get { return GetColumnValue<int>(Columns.CommissionPayoutID); }
			set {
				SetColumnValue(Columns.CommissionPayoutID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommissionPayoutID));
			}
		}
		[DataMember]
		public int CommissionRecordID {
			get { return GetColumnValue<int>(Columns.CommissionRecordID); }
			set {
				SetColumnValue(Columns.CommissionRecordID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommissionRecordID));
			}
		}
		[DataMember]
		public int? UserID {
			get { return GetColumnValue<int?>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public int? PTQV {
			get { return GetColumnValue<int?>(Columns.PTQV); }
			set {
				SetColumnValue(Columns.PTQV, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PTQV));
			}
		}
		[DataMember]
		public decimal? GVP {
			get { return GetColumnValue<decimal?>(Columns.GVP); }
			set {
				SetColumnValue(Columns.GVP, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GVP));
			}
		}
		[DataMember]
		public decimal? TOBP {
			get { return GetColumnValue<decimal?>(Columns.TOBP); }
			set {
				SetColumnValue(Columns.TOBP, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TOBP));
			}
		}
		[DataMember]
		public decimal? TOBA {
			get { return GetColumnValue<decimal?>(Columns.TOBA); }
			set {
				SetColumnValue(Columns.TOBA, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TOBA));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_CommissionRecord _CommissionRecord;
		//Relationship: FK_RU_CommissionPayouts_RU_CommissionRecords
		public RU_CommissionRecord CommissionRecord
		{
			get
			{
				if(_CommissionRecord == null) {
					_CommissionRecord = RU_CommissionRecord.FetchByID(this.CommissionRecordID);
				}
				return _CommissionRecord;
			}
			set
			{
				SetColumnValue("CommissionRecordID", value.CommissionRecordID);
				_CommissionRecord = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CommissionPayoutID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CommissionPayoutIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CommissionRecordIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PTQVColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GVPColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TOBPColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TOBAColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CommissionPayoutID = @"CommissionPayoutID";
			public static readonly string CommissionRecordID = @"CommissionRecordID";
			public static readonly string UserID = @"UserID";
			public static readonly string PTQV = @"PTQV";
			public static readonly string GVP = @"GVP";
			public static readonly string TOBP = @"TOBP";
			public static readonly string TOBA = @"TOBA";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CommissionPayoutID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_CommissionPOB class.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionPOBCollection : ActiveList<RU_CommissionPOB, RU_CommissionPOBCollection>
	{
		public static RU_CommissionPOBCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_CommissionPOBCollection result = new RU_CommissionPOBCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_CommissionPOB item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_CommissionPOB table.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionPOB : ActiveRecord<RU_CommissionPOB>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_CommissionPOB()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_CommissionPOB", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRU_CommissionPOBID = new TableSchema.TableColumn(schema);
				colvarRU_CommissionPOBID.ColumnName = "RU_CommissionPOBID";
				colvarRU_CommissionPOBID.DataType = DbType.Int32;
				colvarRU_CommissionPOBID.MaxLength = 0;
				colvarRU_CommissionPOBID.AutoIncrement = true;
				colvarRU_CommissionPOBID.IsNullable = false;
				colvarRU_CommissionPOBID.IsPrimaryKey = true;
				colvarRU_CommissionPOBID.IsForeignKey = false;
				colvarRU_CommissionPOBID.IsReadOnly = false;
				colvarRU_CommissionPOBID.DefaultSetting = @"";
				colvarRU_CommissionPOBID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRU_CommissionPOBID);

				TableSchema.TableColumn colvarFromValue = new TableSchema.TableColumn(schema);
				colvarFromValue.ColumnName = "FromValue";
				colvarFromValue.DataType = DbType.Int32;
				colvarFromValue.MaxLength = 0;
				colvarFromValue.AutoIncrement = false;
				colvarFromValue.IsNullable = true;
				colvarFromValue.IsPrimaryKey = false;
				colvarFromValue.IsForeignKey = false;
				colvarFromValue.IsReadOnly = false;
				colvarFromValue.DefaultSetting = @"";
				colvarFromValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFromValue);

				TableSchema.TableColumn colvarToValue = new TableSchema.TableColumn(schema);
				colvarToValue.ColumnName = "ToValue";
				colvarToValue.DataType = DbType.Int32;
				colvarToValue.MaxLength = 0;
				colvarToValue.AutoIncrement = false;
				colvarToValue.IsNullable = true;
				colvarToValue.IsPrimaryKey = false;
				colvarToValue.IsForeignKey = false;
				colvarToValue.IsReadOnly = false;
				colvarToValue.DefaultSetting = @"";
				colvarToValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarToValue);

				TableSchema.TableColumn colvarPercent = new TableSchema.TableColumn(schema);
				colvarPercent.ColumnName = "Percent";
				colvarPercent.DataType = DbType.Decimal;
				colvarPercent.MaxLength = 0;
				colvarPercent.AutoIncrement = false;
				colvarPercent.IsNullable = true;
				colvarPercent.IsPrimaryKey = false;
				colvarPercent.IsForeignKey = false;
				colvarPercent.IsReadOnly = false;
				colvarPercent.DefaultSetting = @"";
				colvarPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPercent);

				TableSchema.TableColumn colvarRU_CommissionSeason_UserTypeID = new TableSchema.TableColumn(schema);
				colvarRU_CommissionSeason_UserTypeID.ColumnName = "RU_CommissionSeason_UserTypeID";
				colvarRU_CommissionSeason_UserTypeID.DataType = DbType.Int32;
				colvarRU_CommissionSeason_UserTypeID.MaxLength = 0;
				colvarRU_CommissionSeason_UserTypeID.AutoIncrement = false;
				colvarRU_CommissionSeason_UserTypeID.IsNullable = true;
				colvarRU_CommissionSeason_UserTypeID.IsPrimaryKey = false;
				colvarRU_CommissionSeason_UserTypeID.IsForeignKey = true;
				colvarRU_CommissionSeason_UserTypeID.IsReadOnly = false;
				colvarRU_CommissionSeason_UserTypeID.DefaultSetting = @"";
				colvarRU_CommissionSeason_UserTypeID.ForeignKeyTableName = "RU_CommissionSeason_UserType";
				schema.Columns.Add(colvarRU_CommissionSeason_UserTypeID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_CommissionPOB",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_CommissionPOB LoadFrom(RU_CommissionPOB item)
		{
			RU_CommissionPOB result = new RU_CommissionPOB();
			if (item.RU_CommissionPOBID != default(int)) {
				result.LoadByKey(item.RU_CommissionPOBID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RU_CommissionPOBID {
			get { return GetColumnValue<int>(Columns.RU_CommissionPOBID); }
			set {
				SetColumnValue(Columns.RU_CommissionPOBID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RU_CommissionPOBID));
			}
		}
		[DataMember]
		public int? FromValue {
			get { return GetColumnValue<int?>(Columns.FromValue); }
			set {
				SetColumnValue(Columns.FromValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FromValue));
			}
		}
		[DataMember]
		public int? ToValue {
			get { return GetColumnValue<int?>(Columns.ToValue); }
			set {
				SetColumnValue(Columns.ToValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ToValue));
			}
		}
		[DataMember]
		public decimal? Percent {
			get { return GetColumnValue<decimal?>(Columns.Percent); }
			set {
				SetColumnValue(Columns.Percent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Percent));
			}
		}
		[DataMember]
		public int? RU_CommissionSeason_UserTypeID {
			get { return GetColumnValue<int?>(Columns.RU_CommissionSeason_UserTypeID); }
			set {
				SetColumnValue(Columns.RU_CommissionSeason_UserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RU_CommissionSeason_UserTypeID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_CommissionSeason_UserType _RU_CommissionSeason_UserType;
		//Relationship: FK_RU_CommissionPOB_RU_CommissionSeason_UserType
		public RU_CommissionSeason_UserType RU_CommissionSeason_UserType
		{
			get
			{
				if(_RU_CommissionSeason_UserType == null) {
					_RU_CommissionSeason_UserType = RU_CommissionSeason_UserType.FetchByID(this.RU_CommissionSeason_UserTypeID);
				}
				return _RU_CommissionSeason_UserType;
			}
			set
			{
				SetColumnValue("RU_CommissionSeason_UserTypeID", value.RU_CommissionSeason_UserTypeID);
				_RU_CommissionSeason_UserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RU_CommissionPOBID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RU_CommissionPOBIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn FromValueColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ToValueColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PercentColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RU_CommissionSeason_UserTypeIDColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RU_CommissionPOBID = @"RU_CommissionPOBID";
			public static readonly string FromValue = @"FromValue";
			public static readonly string ToValue = @"ToValue";
			public static readonly string Percent = @"Percent";
			public static readonly string RU_CommissionSeason_UserTypeID = @"RU_CommissionSeason_UserTypeID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RU_CommissionPOBID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_CommissionProcessLog class.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionProcessLogCollection : ActiveList<RU_CommissionProcessLog, RU_CommissionProcessLogCollection>
	{
		public static RU_CommissionProcessLogCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_CommissionProcessLogCollection result = new RU_CommissionProcessLogCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_CommissionProcessLog item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_CommissionProcessLog table.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionProcessLog : ActiveRecord<RU_CommissionProcessLog>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_CommissionProcessLog()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_CommissionProcessLog", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCommissionProcessLogID = new TableSchema.TableColumn(schema);
				colvarCommissionProcessLogID.ColumnName = "CommissionProcessLogID";
				colvarCommissionProcessLogID.DataType = DbType.Int32;
				colvarCommissionProcessLogID.MaxLength = 0;
				colvarCommissionProcessLogID.AutoIncrement = true;
				colvarCommissionProcessLogID.IsNullable = false;
				colvarCommissionProcessLogID.IsPrimaryKey = true;
				colvarCommissionProcessLogID.IsForeignKey = false;
				colvarCommissionProcessLogID.IsReadOnly = false;
				colvarCommissionProcessLogID.DefaultSetting = @"";
				colvarCommissionProcessLogID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommissionProcessLogID);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarDateX = new TableSchema.TableColumn(schema);
				colvarDateX.ColumnName = "Date";
				colvarDateX.DataType = DbType.DateTime;
				colvarDateX.MaxLength = 0;
				colvarDateX.AutoIncrement = false;
				colvarDateX.IsNullable = true;
				colvarDateX.IsPrimaryKey = false;
				colvarDateX.IsForeignKey = false;
				colvarDateX.IsReadOnly = false;
				colvarDateX.DefaultSetting = @"";
				colvarDateX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateX);

				TableSchema.TableColumn colvarResults = new TableSchema.TableColumn(schema);
				colvarResults.ColumnName = "Results";
				colvarResults.DataType = DbType.String;
				colvarResults.MaxLength = 1024;
				colvarResults.AutoIncrement = false;
				colvarResults.IsNullable = true;
				colvarResults.IsPrimaryKey = false;
				colvarResults.IsForeignKey = false;
				colvarResults.IsReadOnly = false;
				colvarResults.DefaultSetting = @"";
				colvarResults.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResults);

				TableSchema.TableColumn colvarCommissionSeasonID = new TableSchema.TableColumn(schema);
				colvarCommissionSeasonID.ColumnName = "CommissionSeasonID";
				colvarCommissionSeasonID.DataType = DbType.Int32;
				colvarCommissionSeasonID.MaxLength = 0;
				colvarCommissionSeasonID.AutoIncrement = false;
				colvarCommissionSeasonID.IsNullable = true;
				colvarCommissionSeasonID.IsPrimaryKey = false;
				colvarCommissionSeasonID.IsForeignKey = false;
				colvarCommissionSeasonID.IsReadOnly = false;
				colvarCommissionSeasonID.DefaultSetting = @"";
				colvarCommissionSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommissionSeasonID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_CommissionProcessLog",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_CommissionProcessLog LoadFrom(RU_CommissionProcessLog item)
		{
			RU_CommissionProcessLog result = new RU_CommissionProcessLog();
			if (item.CommissionProcessLogID != default(int)) {
				result.LoadByKey(item.CommissionProcessLogID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CommissionProcessLogID {
			get { return GetColumnValue<int>(Columns.CommissionProcessLogID); }
			set {
				SetColumnValue(Columns.CommissionProcessLogID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommissionProcessLogID));
			}
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set {
				SetColumnValue(Columns.Username, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Username));
			}
		}
		[DataMember]
		public DateTime? DateX {
			get { return GetColumnValue<DateTime?>(Columns.DateX); }
			set {
				SetColumnValue(Columns.DateX, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DateX));
			}
		}
		[DataMember]
		public string Results {
			get { return GetColumnValue<string>(Columns.Results); }
			set {
				SetColumnValue(Columns.Results, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Results));
			}
		}
		[DataMember]
		public int? CommissionSeasonID {
			get { return GetColumnValue<int?>(Columns.CommissionSeasonID); }
			set {
				SetColumnValue(Columns.CommissionSeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommissionSeasonID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Username;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CommissionProcessLogIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DateXColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ResultsColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CommissionSeasonIDColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CommissionProcessLogID = @"CommissionProcessLogID";
			public static readonly string Username = @"Username";
			public static readonly string DateX = @"Date";
			public static readonly string Results = @"Results";
			public static readonly string CommissionSeasonID = @"CommissionSeasonID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CommissionProcessLogID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_CommissionRecord class.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionRecordCollection : ActiveList<RU_CommissionRecord, RU_CommissionRecordCollection>
	{
		public static RU_CommissionRecordCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_CommissionRecordCollection result = new RU_CommissionRecordCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_CommissionRecord item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_CommissionRecords table.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionRecord : ActiveRecord<RU_CommissionRecord>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_CommissionRecord()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_CommissionRecords", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCommissionRecordID = new TableSchema.TableColumn(schema);
				colvarCommissionRecordID.ColumnName = "CommissionRecordID";
				colvarCommissionRecordID.DataType = DbType.Int32;
				colvarCommissionRecordID.MaxLength = 0;
				colvarCommissionRecordID.AutoIncrement = true;
				colvarCommissionRecordID.IsNullable = false;
				colvarCommissionRecordID.IsPrimaryKey = true;
				colvarCommissionRecordID.IsForeignKey = false;
				colvarCommissionRecordID.IsReadOnly = false;
				colvarCommissionRecordID.DefaultSetting = @"";
				colvarCommissionRecordID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommissionRecordID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = true;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = true;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarPQV = new TableSchema.TableColumn(schema);
				colvarPQV.ColumnName = "PQV";
				colvarPQV.DataType = DbType.Int32;
				colvarPQV.MaxLength = 0;
				colvarPQV.AutoIncrement = false;
				colvarPQV.IsNullable = true;
				colvarPQV.IsPrimaryKey = false;
				colvarPQV.IsForeignKey = false;
				colvarPQV.IsReadOnly = false;
				colvarPQV.DefaultSetting = @"";
				colvarPQV.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPQV);

				TableSchema.TableColumn colvarTQV = new TableSchema.TableColumn(schema);
				colvarTQV.ColumnName = "TQV";
				colvarTQV.DataType = DbType.Int32;
				colvarTQV.MaxLength = 0;
				colvarTQV.AutoIncrement = false;
				colvarTQV.IsNullable = true;
				colvarTQV.IsPrimaryKey = false;
				colvarTQV.IsForeignKey = false;
				colvarTQV.IsReadOnly = false;
				colvarTQV.DefaultSetting = @"";
				colvarTQV.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTQV);

				TableSchema.TableColumn colvarPOB = new TableSchema.TableColumn(schema);
				colvarPOB.ColumnName = "POB";
				colvarPOB.DataType = DbType.Int32;
				colvarPOB.MaxLength = 0;
				colvarPOB.AutoIncrement = false;
				colvarPOB.IsNullable = true;
				colvarPOB.IsPrimaryKey = false;
				colvarPOB.IsForeignKey = false;
				colvarPOB.IsReadOnly = false;
				colvarPOB.DefaultSetting = @"";
				colvarPOB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPOB);

				TableSchema.TableColumn colvarPCV = new TableSchema.TableColumn(schema);
				colvarPCV.ColumnName = "PCV";
				colvarPCV.DataType = DbType.Decimal;
				colvarPCV.MaxLength = 0;
				colvarPCV.AutoIncrement = false;
				colvarPCV.IsNullable = true;
				colvarPCV.IsPrimaryKey = false;
				colvarPCV.IsForeignKey = false;
				colvarPCV.IsReadOnly = false;
				colvarPCV.DefaultSetting = @"";
				colvarPCV.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPCV);

				TableSchema.TableColumn colvarPersonalCommission = new TableSchema.TableColumn(schema);
				colvarPersonalCommission.ColumnName = "PersonalCommission";
				colvarPersonalCommission.DataType = DbType.Decimal;
				colvarPersonalCommission.MaxLength = 0;
				colvarPersonalCommission.AutoIncrement = false;
				colvarPersonalCommission.IsNullable = true;
				colvarPersonalCommission.IsPrimaryKey = false;
				colvarPersonalCommission.IsForeignKey = false;
				colvarPersonalCommission.IsReadOnly = false;
				colvarPersonalCommission.DefaultSetting = @"";
				colvarPersonalCommission.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPersonalCommission);

				TableSchema.TableColumn colvarTeamCommission = new TableSchema.TableColumn(schema);
				colvarTeamCommission.ColumnName = "TeamCommission";
				colvarTeamCommission.DataType = DbType.Decimal;
				colvarTeamCommission.MaxLength = 0;
				colvarTeamCommission.AutoIncrement = false;
				colvarTeamCommission.IsNullable = true;
				colvarTeamCommission.IsPrimaryKey = false;
				colvarTeamCommission.IsForeignKey = false;
				colvarTeamCommission.IsReadOnly = false;
				colvarTeamCommission.DefaultSetting = @"";
				colvarTeamCommission.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamCommission);

				TableSchema.TableColumn colvarCommissionSeasonID = new TableSchema.TableColumn(schema);
				colvarCommissionSeasonID.ColumnName = "CommissionSeasonID";
				colvarCommissionSeasonID.DataType = DbType.Int32;
				colvarCommissionSeasonID.MaxLength = 0;
				colvarCommissionSeasonID.AutoIncrement = false;
				colvarCommissionSeasonID.IsNullable = true;
				colvarCommissionSeasonID.IsPrimaryKey = false;
				colvarCommissionSeasonID.IsForeignKey = true;
				colvarCommissionSeasonID.IsReadOnly = false;
				colvarCommissionSeasonID.DefaultSetting = @"";
				colvarCommissionSeasonID.ForeignKeyTableName = "RU_CommissionSeason";
				schema.Columns.Add(colvarCommissionSeasonID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_CommissionRecords",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_CommissionRecord LoadFrom(RU_CommissionRecord item)
		{
			RU_CommissionRecord result = new RU_CommissionRecord();
			if (item.CommissionRecordID != default(int)) {
				result.LoadByKey(item.CommissionRecordID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CommissionRecordID {
			get { return GetColumnValue<int>(Columns.CommissionRecordID); }
			set {
				SetColumnValue(Columns.CommissionRecordID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommissionRecordID));
			}
		}
		[DataMember]
		public int? UserID {
			get { return GetColumnValue<int?>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public int? PQV {
			get { return GetColumnValue<int?>(Columns.PQV); }
			set {
				SetColumnValue(Columns.PQV, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PQV));
			}
		}
		[DataMember]
		public int? TQV {
			get { return GetColumnValue<int?>(Columns.TQV); }
			set {
				SetColumnValue(Columns.TQV, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TQV));
			}
		}
		[DataMember]
		public int? POB {
			get { return GetColumnValue<int?>(Columns.POB); }
			set {
				SetColumnValue(Columns.POB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.POB));
			}
		}
		[DataMember]
		public decimal? PCV {
			get { return GetColumnValue<decimal?>(Columns.PCV); }
			set {
				SetColumnValue(Columns.PCV, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PCV));
			}
		}
		[DataMember]
		public decimal? PersonalCommission {
			get { return GetColumnValue<decimal?>(Columns.PersonalCommission); }
			set {
				SetColumnValue(Columns.PersonalCommission, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PersonalCommission));
			}
		}
		[DataMember]
		public decimal? TeamCommission {
			get { return GetColumnValue<decimal?>(Columns.TeamCommission); }
			set {
				SetColumnValue(Columns.TeamCommission, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamCommission));
			}
		}
		[DataMember]
		public int? CommissionSeasonID {
			get { return GetColumnValue<int?>(Columns.CommissionSeasonID); }
			set {
				SetColumnValue(Columns.CommissionSeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommissionSeasonID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_CommissionSeason _CommissionSeason;
		//Relationship: FK_RU_CommissionRecords_RU_CommissionSeason
		public RU_CommissionSeason CommissionSeason
		{
			get
			{
				if(_CommissionSeason == null) {
					_CommissionSeason = RU_CommissionSeason.FetchByID(this.CommissionSeasonID);
				}
				return _CommissionSeason;
			}
			set
			{
				SetColumnValue("CommissionSeasonID", value.CommissionSeasonID);
				_CommissionSeason = value;
			}
		}

		private RU_User _User;
		//Relationship: FK_RU_CommissionRecords_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserID);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserID", value.UserID);
				_User = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return CommissionRecordID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CommissionRecordIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PQVColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TQVColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn POBColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn PCVColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn PersonalCommissionColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn TeamCommissionColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CommissionSeasonIDColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CommissionRecordID = @"CommissionRecordID";
			public static readonly string UserID = @"UserID";
			public static readonly string PQV = @"PQV";
			public static readonly string TQV = @"TQV";
			public static readonly string POB = @"POB";
			public static readonly string PCV = @"PCV";
			public static readonly string PersonalCommission = @"PersonalCommission";
			public static readonly string TeamCommission = @"TeamCommission";
			public static readonly string CommissionSeasonID = @"CommissionSeasonID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CommissionRecordID; }
		}
		*/

		#region Foreign Collections

		private RU_CommissionPayoutCollection _RU_CommissionPayoutsCol;
		//Relationship: FK_RU_CommissionPayouts_RU_CommissionRecords
		public RU_CommissionPayoutCollection RU_CommissionPayoutsCol
		{
			get
			{
				if(_RU_CommissionPayoutsCol == null) {
					_RU_CommissionPayoutsCol = new RU_CommissionPayoutCollection();
					_RU_CommissionPayoutsCol.LoadAndCloseReader(RU_CommissionPayout.Query()
						.WHERE(RU_CommissionPayout.Columns.CommissionRecordID, CommissionRecordID).ExecuteReader());
				}
				return _RU_CommissionPayoutsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_CommissionSeason class.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionSeasonCollection : ActiveList<RU_CommissionSeason, RU_CommissionSeasonCollection>
	{
		public static RU_CommissionSeasonCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_CommissionSeasonCollection result = new RU_CommissionSeasonCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_CommissionSeason item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_CommissionSeason table.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionSeason : ActiveRecord<RU_CommissionSeason>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_CommissionSeason()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_CommissionSeason", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCommissionSeasonID = new TableSchema.TableColumn(schema);
				colvarCommissionSeasonID.ColumnName = "CommissionSeasonID";
				colvarCommissionSeasonID.DataType = DbType.Int32;
				colvarCommissionSeasonID.MaxLength = 0;
				colvarCommissionSeasonID.AutoIncrement = true;
				colvarCommissionSeasonID.IsNullable = false;
				colvarCommissionSeasonID.IsPrimaryKey = true;
				colvarCommissionSeasonID.IsForeignKey = false;
				colvarCommissionSeasonID.IsReadOnly = false;
				colvarCommissionSeasonID.DefaultSetting = @"";
				colvarCommissionSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommissionSeasonID);

				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "StartDate";
				colvarStartDate.DataType = DbType.DateTime;
				colvarStartDate.MaxLength = 0;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = false;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);

				TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
				colvarEndDate.ColumnName = "EndDate";
				colvarEndDate.DataType = DbType.DateTime;
				colvarEndDate.MaxLength = 0;
				colvarEndDate.AutoIncrement = false;
				colvarEndDate.IsNullable = false;
				colvarEndDate.IsPrimaryKey = false;
				colvarEndDate.IsForeignKey = false;
				colvarEndDate.IsReadOnly = false;
				colvarEndDate.DefaultSetting = @"";
				colvarEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDate);

				TableSchema.TableColumn colvarCreationDate = new TableSchema.TableColumn(schema);
				colvarCreationDate.ColumnName = "CreationDate";
				colvarCreationDate.DataType = DbType.DateTime;
				colvarCreationDate.MaxLength = 0;
				colvarCreationDate.AutoIncrement = false;
				colvarCreationDate.IsNullable = false;
				colvarCreationDate.IsPrimaryKey = false;
				colvarCreationDate.IsForeignKey = false;
				colvarCreationDate.IsReadOnly = false;
				colvarCreationDate.DefaultSetting = @"";
				colvarCreationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreationDate);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 150;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = true;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarSeasonIDList = new TableSchema.TableColumn(schema);
				colvarSeasonIDList.ColumnName = "SeasonIDList";
				colvarSeasonIDList.DataType = DbType.String;
				colvarSeasonIDList.MaxLength = -1;
				colvarSeasonIDList.AutoIncrement = false;
				colvarSeasonIDList.IsNullable = true;
				colvarSeasonIDList.IsPrimaryKey = false;
				colvarSeasonIDList.IsForeignKey = false;
				colvarSeasonIDList.IsReadOnly = false;
				colvarSeasonIDList.DefaultSetting = @"";
				colvarSeasonIDList.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonIDList);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_CommissionSeason",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_CommissionSeason LoadFrom(RU_CommissionSeason item)
		{
			RU_CommissionSeason result = new RU_CommissionSeason();
			if (item.CommissionSeasonID != default(int)) {
				result.LoadByKey(item.CommissionSeasonID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CommissionSeasonID {
			get { return GetColumnValue<int>(Columns.CommissionSeasonID); }
			set {
				SetColumnValue(Columns.CommissionSeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommissionSeasonID));
			}
		}
		[DataMember]
		public DateTime StartDate {
			get { return GetColumnValue<DateTime>(Columns.StartDate); }
			set {
				SetColumnValue(Columns.StartDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartDate));
			}
		}
		[DataMember]
		public DateTime EndDate {
			get { return GetColumnValue<DateTime>(Columns.EndDate); }
			set {
				SetColumnValue(Columns.EndDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EndDate));
			}
		}
		[DataMember]
		public DateTime CreationDate {
			get { return GetColumnValue<DateTime>(Columns.CreationDate); }
			set {
				SetColumnValue(Columns.CreationDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreationDate));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public bool? IsDeleted {
			get { return GetColumnValue<bool?>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime? ModifiedDate {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string SeasonIDList {
			get { return GetColumnValue<string>(Columns.SeasonIDList); }
			set {
				SetColumnValue(Columns.SeasonIDList, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonIDList));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CommissionSeasonID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CommissionSeasonIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StartDateColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn EndDateColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreationDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn SeasonIDListColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CommissionSeasonID = @"CommissionSeasonID";
			public static readonly string StartDate = @"StartDate";
			public static readonly string EndDate = @"EndDate";
			public static readonly string CreationDate = @"CreationDate";
			public static readonly string Description = @"Description";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string SeasonIDList = @"SeasonIDList";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CommissionSeasonID; }
		}
		*/

		#region Foreign Collections

		private RU_CommissionRecordCollection _RU_CommissionRecordsCol;
		//Relationship: FK_RU_CommissionRecords_RU_CommissionSeason
		public RU_CommissionRecordCollection RU_CommissionRecordsCol
		{
			get
			{
				if(_RU_CommissionRecordsCol == null) {
					_RU_CommissionRecordsCol = new RU_CommissionRecordCollection();
					_RU_CommissionRecordsCol.LoadAndCloseReader(RU_CommissionRecord.Query()
						.WHERE(RU_CommissionRecord.Columns.CommissionSeasonID, CommissionSeasonID).ExecuteReader());
				}
				return _RU_CommissionRecordsCol;
			}
		}

		private RU_CommissionSeason_UserTypeCollection _RU_CommissionSeason_UserTypesCol;
		//Relationship: FK_RU_CommissionSeason_UserType_RU_CommissionSeason
		public RU_CommissionSeason_UserTypeCollection RU_CommissionSeason_UserTypesCol
		{
			get
			{
				if(_RU_CommissionSeason_UserTypesCol == null) {
					_RU_CommissionSeason_UserTypesCol = new RU_CommissionSeason_UserTypeCollection();
					_RU_CommissionSeason_UserTypesCol.LoadAndCloseReader(RU_CommissionSeason_UserType.Query()
						.WHERE(RU_CommissionSeason_UserType.Columns.CommissionSeasonID, CommissionSeasonID).ExecuteReader());
				}
				return _RU_CommissionSeason_UserTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_CommissionSeason_UserType class.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionSeason_UserTypeCollection : ActiveList<RU_CommissionSeason_UserType, RU_CommissionSeason_UserTypeCollection>
	{
		public static RU_CommissionSeason_UserTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_CommissionSeason_UserTypeCollection result = new RU_CommissionSeason_UserTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_CommissionSeason_UserType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_CommissionSeason_UserType table.
	/// </summary>
	[DataContract]
	public partial class RU_CommissionSeason_UserType : ActiveRecord<RU_CommissionSeason_UserType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_CommissionSeason_UserType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_CommissionSeason_UserType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRU_CommissionSeason_UserTypeID = new TableSchema.TableColumn(schema);
				colvarRU_CommissionSeason_UserTypeID.ColumnName = "RU_CommissionSeason_UserTypeID";
				colvarRU_CommissionSeason_UserTypeID.DataType = DbType.Int32;
				colvarRU_CommissionSeason_UserTypeID.MaxLength = 0;
				colvarRU_CommissionSeason_UserTypeID.AutoIncrement = true;
				colvarRU_CommissionSeason_UserTypeID.IsNullable = false;
				colvarRU_CommissionSeason_UserTypeID.IsPrimaryKey = true;
				colvarRU_CommissionSeason_UserTypeID.IsForeignKey = false;
				colvarRU_CommissionSeason_UserTypeID.IsReadOnly = false;
				colvarRU_CommissionSeason_UserTypeID.DefaultSetting = @"";
				colvarRU_CommissionSeason_UserTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRU_CommissionSeason_UserTypeID);

				TableSchema.TableColumn colvarUserTypeID = new TableSchema.TableColumn(schema);
				colvarUserTypeID.ColumnName = "UserTypeID";
				colvarUserTypeID.DataType = DbType.Int16;
				colvarUserTypeID.MaxLength = 0;
				colvarUserTypeID.AutoIncrement = false;
				colvarUserTypeID.IsNullable = true;
				colvarUserTypeID.IsPrimaryKey = false;
				colvarUserTypeID.IsForeignKey = true;
				colvarUserTypeID.IsReadOnly = false;
				colvarUserTypeID.DefaultSetting = @"";
				colvarUserTypeID.ForeignKeyTableName = "RU_UserType";
				schema.Columns.Add(colvarUserTypeID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarCommissionSeasonID = new TableSchema.TableColumn(schema);
				colvarCommissionSeasonID.ColumnName = "CommissionSeasonID";
				colvarCommissionSeasonID.DataType = DbType.Int32;
				colvarCommissionSeasonID.MaxLength = 0;
				colvarCommissionSeasonID.AutoIncrement = false;
				colvarCommissionSeasonID.IsNullable = true;
				colvarCommissionSeasonID.IsPrimaryKey = false;
				colvarCommissionSeasonID.IsForeignKey = true;
				colvarCommissionSeasonID.IsReadOnly = false;
				colvarCommissionSeasonID.DefaultSetting = @"";
				colvarCommissionSeasonID.ForeignKeyTableName = "RU_CommissionSeason";
				schema.Columns.Add(colvarCommissionSeasonID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_CommissionSeason_UserType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_CommissionSeason_UserType LoadFrom(RU_CommissionSeason_UserType item)
		{
			RU_CommissionSeason_UserType result = new RU_CommissionSeason_UserType();
			if (item.RU_CommissionSeason_UserTypeID != default(int)) {
				result.LoadByKey(item.RU_CommissionSeason_UserTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RU_CommissionSeason_UserTypeID {
			get { return GetColumnValue<int>(Columns.RU_CommissionSeason_UserTypeID); }
			set {
				SetColumnValue(Columns.RU_CommissionSeason_UserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RU_CommissionSeason_UserTypeID));
			}
		}
		[DataMember]
		public short? UserTypeID {
			get { return GetColumnValue<short?>(Columns.UserTypeID); }
			set {
				SetColumnValue(Columns.UserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public int? CommissionSeasonID {
			get { return GetColumnValue<int?>(Columns.CommissionSeasonID); }
			set {
				SetColumnValue(Columns.CommissionSeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommissionSeasonID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_CommissionSeason _CommissionSeason;
		//Relationship: FK_RU_CommissionSeason_UserType_RU_CommissionSeason
		public RU_CommissionSeason CommissionSeason
		{
			get
			{
				if(_CommissionSeason == null) {
					_CommissionSeason = RU_CommissionSeason.FetchByID(this.CommissionSeasonID);
				}
				return _CommissionSeason;
			}
			set
			{
				SetColumnValue("CommissionSeasonID", value.CommissionSeasonID);
				_CommissionSeason = value;
			}
		}

		private RU_UserType _UserType;
		//Relationship: FK_RU_CommissionSeason_UserType_RU_UserTypeID
		public RU_UserType UserType
		{
			get
			{
				if(_UserType == null) {
					_UserType = RU_UserType.FetchByID(this.UserTypeID);
				}
				return _UserType;
			}
			set
			{
				SetColumnValue("UserTypeID", value.UserTypeID);
				_UserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RU_CommissionSeason_UserTypeID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RU_CommissionSeason_UserTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CommissionSeasonIDColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RU_CommissionSeason_UserTypeID = @"RU_CommissionSeason_UserTypeID";
			public static readonly string UserTypeID = @"UserTypeID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string CommissionSeasonID = @"CommissionSeasonID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RU_CommissionSeason_UserTypeID; }
		}
		*/

		#region Foreign Collections

		private RU_CommissionConfigCollection _RU_CommissionConfigsCol;
		//Relationship: FK_RU_CommissionConfig_RU_CommissionSeason_UserType
		public RU_CommissionConfigCollection RU_CommissionConfigsCol
		{
			get
			{
				if(_RU_CommissionConfigsCol == null) {
					_RU_CommissionConfigsCol = new RU_CommissionConfigCollection();
					_RU_CommissionConfigsCol.LoadAndCloseReader(RU_CommissionConfig.Query()
						.WHERE(RU_CommissionConfig.Columns.RU_CommissionSeason_UserTypeID, RU_CommissionSeason_UserTypeID).ExecuteReader());
				}
				return _RU_CommissionConfigsCol;
			}
		}

		private RU_CommissionPOBCollection _RU_CommissionPOBsCol;
		//Relationship: FK_RU_CommissionPOB_RU_CommissionSeason_UserType
		public RU_CommissionPOBCollection RU_CommissionPOBsCol
		{
			get
			{
				if(_RU_CommissionPOBsCol == null) {
					_RU_CommissionPOBsCol = new RU_CommissionPOBCollection();
					_RU_CommissionPOBsCol.LoadAndCloseReader(RU_CommissionPOB.Query()
						.WHERE(RU_CommissionPOB.Columns.RU_CommissionSeason_UserTypeID, RU_CommissionSeason_UserTypeID).ExecuteReader());
				}
				return _RU_CommissionPOBsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_CommTest class.
	/// </summary>
	[DataContract]
	public partial class RU_CommTestCollection : ActiveList<RU_CommTest, RU_CommTestCollection>
	{
		public static RU_CommTestCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_CommTestCollection result = new RU_CommTestCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_CommTest item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_CommTest table.
	/// </summary>
	[DataContract]
	public partial class RU_CommTest : ActiveRecord<RU_CommTest>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_CommTest()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_CommTest", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCommTestID = new TableSchema.TableColumn(schema);
				colvarCommTestID.ColumnName = "CommTestID";
				colvarCommTestID.DataType = DbType.Int32;
				colvarCommTestID.MaxLength = 0;
				colvarCommTestID.AutoIncrement = true;
				colvarCommTestID.IsNullable = false;
				colvarCommTestID.IsPrimaryKey = true;
				colvarCommTestID.IsForeignKey = false;
				colvarCommTestID.IsReadOnly = false;
				colvarCommTestID.DefaultSetting = @"";
				colvarCommTestID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommTestID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarParentUserID = new TableSchema.TableColumn(schema);
				colvarParentUserID.ColumnName = "ParentUserID";
				colvarParentUserID.DataType = DbType.Int32;
				colvarParentUserID.MaxLength = 0;
				colvarParentUserID.AutoIncrement = false;
				colvarParentUserID.IsNullable = false;
				colvarParentUserID.IsPrimaryKey = false;
				colvarParentUserID.IsForeignKey = false;
				colvarParentUserID.IsReadOnly = false;
				colvarParentUserID.DefaultSetting = @"";
				colvarParentUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParentUserID);

				TableSchema.TableColumn colvarNQualifyingAccounts = new TableSchema.TableColumn(schema);
				colvarNQualifyingAccounts.ColumnName = "NQualifyingAccounts";
				colvarNQualifyingAccounts.DataType = DbType.Int32;
				colvarNQualifyingAccounts.MaxLength = 0;
				colvarNQualifyingAccounts.AutoIncrement = false;
				colvarNQualifyingAccounts.IsNullable = false;
				colvarNQualifyingAccounts.IsPrimaryKey = false;
				colvarNQualifyingAccounts.IsForeignKey = false;
				colvarNQualifyingAccounts.IsReadOnly = false;
				colvarNQualifyingAccounts.DefaultSetting = @"";
				colvarNQualifyingAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNQualifyingAccounts);

				TableSchema.TableColumn colvarNDownlineAccounts = new TableSchema.TableColumn(schema);
				colvarNDownlineAccounts.ColumnName = "NDownlineAccounts";
				colvarNDownlineAccounts.DataType = DbType.Int32;
				colvarNDownlineAccounts.MaxLength = 0;
				colvarNDownlineAccounts.AutoIncrement = false;
				colvarNDownlineAccounts.IsNullable = false;
				colvarNDownlineAccounts.IsPrimaryKey = false;
				colvarNDownlineAccounts.IsForeignKey = false;
				colvarNDownlineAccounts.IsReadOnly = false;
				colvarNDownlineAccounts.DefaultSetting = @"";
				colvarNDownlineAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDownlineAccounts);

				TableSchema.TableColumn colvarPercentPaid = new TableSchema.TableColumn(schema);
				colvarPercentPaid.ColumnName = "PercentPaid";
				colvarPercentPaid.DataType = DbType.Byte;
				colvarPercentPaid.MaxLength = 0;
				colvarPercentPaid.AutoIncrement = false;
				colvarPercentPaid.IsNullable = false;
				colvarPercentPaid.IsPrimaryKey = false;
				colvarPercentPaid.IsForeignKey = false;
				colvarPercentPaid.IsReadOnly = false;
				colvarPercentPaid.DefaultSetting = @"";
				colvarPercentPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPercentPaid);

				TableSchema.TableColumn colvarTotalPersonalPayout = new TableSchema.TableColumn(schema);
				colvarTotalPersonalPayout.ColumnName = "TotalPersonalPayout";
				colvarTotalPersonalPayout.DataType = DbType.Currency;
				colvarTotalPersonalPayout.MaxLength = 0;
				colvarTotalPersonalPayout.AutoIncrement = false;
				colvarTotalPersonalPayout.IsNullable = false;
				colvarTotalPersonalPayout.IsPrimaryKey = false;
				colvarTotalPersonalPayout.IsForeignKey = false;
				colvarTotalPersonalPayout.IsReadOnly = false;
				colvarTotalPersonalPayout.DefaultSetting = @"";
				colvarTotalPersonalPayout.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPersonalPayout);

				TableSchema.TableColumn colvarTotalDownlinePayout = new TableSchema.TableColumn(schema);
				colvarTotalDownlinePayout.ColumnName = "TotalDownlinePayout";
				colvarTotalDownlinePayout.DataType = DbType.Currency;
				colvarTotalDownlinePayout.MaxLength = 0;
				colvarTotalDownlinePayout.AutoIncrement = false;
				colvarTotalDownlinePayout.IsNullable = false;
				colvarTotalDownlinePayout.IsPrimaryKey = false;
				colvarTotalDownlinePayout.IsForeignKey = false;
				colvarTotalDownlinePayout.IsReadOnly = false;
				colvarTotalDownlinePayout.DefaultSetting = @"";
				colvarTotalDownlinePayout.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalDownlinePayout);

				TableSchema.TableColumn colvarTotalPayout = new TableSchema.TableColumn(schema);
				colvarTotalPayout.ColumnName = "TotalPayout";
				colvarTotalPayout.DataType = DbType.Currency;
				colvarTotalPayout.MaxLength = 0;
				colvarTotalPayout.AutoIncrement = false;
				colvarTotalPayout.IsNullable = true;
				colvarTotalPayout.IsPrimaryKey = false;
				colvarTotalPayout.IsForeignKey = false;
				colvarTotalPayout.IsReadOnly = true;
				colvarTotalPayout.DefaultSetting = @"";
				colvarTotalPayout.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPayout);

				TableSchema.TableColumn colvarNTotalAccounts = new TableSchema.TableColumn(schema);
				colvarNTotalAccounts.ColumnName = "NTotalAccounts";
				colvarNTotalAccounts.DataType = DbType.Int32;
				colvarNTotalAccounts.MaxLength = 0;
				colvarNTotalAccounts.AutoIncrement = false;
				colvarNTotalAccounts.IsNullable = true;
				colvarNTotalAccounts.IsPrimaryKey = false;
				colvarNTotalAccounts.IsForeignKey = false;
				colvarNTotalAccounts.IsReadOnly = true;
				colvarNTotalAccounts.DefaultSetting = @"";
				colvarNTotalAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNTotalAccounts);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_CommTest",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_CommTest LoadFrom(RU_CommTest item)
		{
			RU_CommTest result = new RU_CommTest();
			if (item.CommTestID != default(int)) {
				result.LoadByKey(item.CommTestID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int CommTestID {
			get { return GetColumnValue<int>(Columns.CommTestID); }
			set {
				SetColumnValue(Columns.CommTestID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommTestID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public int ParentUserID {
			get { return GetColumnValue<int>(Columns.ParentUserID); }
			set {
				SetColumnValue(Columns.ParentUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ParentUserID));
			}
		}
		[DataMember]
		public int NQualifyingAccounts {
			get { return GetColumnValue<int>(Columns.NQualifyingAccounts); }
			set {
				SetColumnValue(Columns.NQualifyingAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NQualifyingAccounts));
			}
		}
		[DataMember]
		public int NDownlineAccounts {
			get { return GetColumnValue<int>(Columns.NDownlineAccounts); }
			set {
				SetColumnValue(Columns.NDownlineAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDownlineAccounts));
			}
		}
		[DataMember]
		public byte PercentPaid {
			get { return GetColumnValue<byte>(Columns.PercentPaid); }
			set {
				SetColumnValue(Columns.PercentPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PercentPaid));
			}
		}
		[DataMember]
		public decimal TotalPersonalPayout {
			get { return GetColumnValue<decimal>(Columns.TotalPersonalPayout); }
			set {
				SetColumnValue(Columns.TotalPersonalPayout, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPersonalPayout));
			}
		}
		[DataMember]
		public decimal TotalDownlinePayout {
			get { return GetColumnValue<decimal>(Columns.TotalDownlinePayout); }
			set {
				SetColumnValue(Columns.TotalDownlinePayout, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalDownlinePayout));
			}
		}
		[DataMember]
		public decimal? TotalPayout {
			get { return GetColumnValue<decimal?>(Columns.TotalPayout); }
			set {
				SetColumnValue(Columns.TotalPayout, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPayout));
			}
		}
		[DataMember]
		public int? NTotalAccounts {
			get { return GetColumnValue<int?>(Columns.NTotalAccounts); }
			set {
				SetColumnValue(Columns.NTotalAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NTotalAccounts));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CommTestID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn CommTestIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ParentUserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn NQualifyingAccountsColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn NDownlineAccountsColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn PercentPaidColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TotalPersonalPayoutColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn TotalDownlinePayoutColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn TotalPayoutColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn NTotalAccountsColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CommTestID = @"CommTestID";
			public static readonly string UserID = @"UserID";
			public static readonly string ParentUserID = @"ParentUserID";
			public static readonly string NQualifyingAccounts = @"NQualifyingAccounts";
			public static readonly string NDownlineAccounts = @"NDownlineAccounts";
			public static readonly string PercentPaid = @"PercentPaid";
			public static readonly string TotalPersonalPayout = @"TotalPersonalPayout";
			public static readonly string TotalDownlinePayout = @"TotalDownlinePayout";
			public static readonly string TotalPayout = @"TotalPayout";
			public static readonly string NTotalAccounts = @"NTotalAccounts";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return CommTestID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_DocStatus class.
	/// </summary>
	[DataContract]
	public partial class RU_DocStatusCollection : ActiveList<RU_DocStatus, RU_DocStatusCollection>
	{
		public static RU_DocStatusCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_DocStatusCollection result = new RU_DocStatusCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_DocStatus item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_DocStatuses table.
	/// </summary>
	[DataContract]
	public partial class RU_DocStatus : ActiveRecord<RU_DocStatus>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum DocStatusEnum : int
		{
		}

		//[DataMember]
		//public DocStatusEnum DocStatusCode
		//{
		//	get { return (DocStatusEnum)DocStatusID; }
		//	set { DocStatusID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_DocStatus()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_DocStatuses", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDocStatusID = new TableSchema.TableColumn(schema);
				colvarDocStatusID.ColumnName = "DocStatusID";
				colvarDocStatusID.DataType = DbType.Int32;
				colvarDocStatusID.MaxLength = 0;
				colvarDocStatusID.AutoIncrement = false;
				colvarDocStatusID.IsNullable = false;
				colvarDocStatusID.IsPrimaryKey = true;
				colvarDocStatusID.IsForeignKey = false;
				colvarDocStatusID.IsReadOnly = false;
				colvarDocStatusID.DefaultSetting = @"";
				colvarDocStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDocStatusID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_DocStatuses",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_DocStatus LoadFrom(RU_DocStatus item)
		{
			RU_DocStatus result = new RU_DocStatus();
			if (item.DocStatusID != default(int)) {
				result.LoadByKey(item.DocStatusID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DocStatusID {
			get { return GetColumnValue<int>(Columns.DocStatusID); }
			set {
				SetColumnValue(Columns.DocStatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DocStatusID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn DocStatusIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DocStatusID = @"DocStatusID";
			public static readonly string Description = @"Description";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DocStatusID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_HousingInfo class.
	/// </summary>
	[DataContract]
	public partial class RU_HousingInfoCollection : ActiveList<RU_HousingInfo, RU_HousingInfoCollection>
	{
		public static RU_HousingInfoCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_HousingInfoCollection result = new RU_HousingInfoCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_HousingInfo item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_HousingInfo table.
	/// </summary>
	[DataContract]
	public partial class RU_HousingInfo : ActiveRecord<RU_HousingInfo>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_HousingInfo()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_HousingInfo", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarHousingInfoID = new TableSchema.TableColumn(schema);
				colvarHousingInfoID.ColumnName = "HousingInfoID";
				colvarHousingInfoID.DataType = DbType.Int32;
				colvarHousingInfoID.MaxLength = 0;
				colvarHousingInfoID.AutoIncrement = true;
				colvarHousingInfoID.IsNullable = false;
				colvarHousingInfoID.IsPrimaryKey = true;
				colvarHousingInfoID.IsForeignKey = false;
				colvarHousingInfoID.IsReadOnly = false;
				colvarHousingInfoID.DefaultSetting = @"";
				colvarHousingInfoID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHousingInfoID);

				TableSchema.TableColumn colvarRecruitId = new TableSchema.TableColumn(schema);
				colvarRecruitId.ColumnName = "RecruitId";
				colvarRecruitId.DataType = DbType.Int32;
				colvarRecruitId.MaxLength = 0;
				colvarRecruitId.AutoIncrement = false;
				colvarRecruitId.IsNullable = true;
				colvarRecruitId.IsPrimaryKey = false;
				colvarRecruitId.IsForeignKey = false;
				colvarRecruitId.IsReadOnly = false;
				colvarRecruitId.DefaultSetting = @"";
				colvarRecruitId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitId);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = true;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarBillAddressId = new TableSchema.TableColumn(schema);
				colvarBillAddressId.ColumnName = "BillAddressId";
				colvarBillAddressId.DataType = DbType.Int32;
				colvarBillAddressId.MaxLength = 0;
				colvarBillAddressId.AutoIncrement = false;
				colvarBillAddressId.IsNullable = false;
				colvarBillAddressId.IsPrimaryKey = false;
				colvarBillAddressId.IsForeignKey = false;
				colvarBillAddressId.IsReadOnly = false;
				colvarBillAddressId.DefaultSetting = @"";
				colvarBillAddressId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillAddressId);

				TableSchema.TableColumn colvarNumberInFamily = new TableSchema.TableColumn(schema);
				colvarNumberInFamily.ColumnName = "NumberInFamily";
				colvarNumberInFamily.DataType = DbType.Int32;
				colvarNumberInFamily.MaxLength = 0;
				colvarNumberInFamily.AutoIncrement = false;
				colvarNumberInFamily.IsNullable = true;
				colvarNumberInFamily.IsPrimaryKey = false;
				colvarNumberInFamily.IsForeignKey = false;
				colvarNumberInFamily.IsReadOnly = false;
				colvarNumberInFamily.DefaultSetting = @"";
				colvarNumberInFamily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumberInFamily);

				TableSchema.TableColumn colvarFamilyDescription = new TableSchema.TableColumn(schema);
				colvarFamilyDescription.ColumnName = "FamilyDescription";
				colvarFamilyDescription.DataType = DbType.String;
				colvarFamilyDescription.MaxLength = -1;
				colvarFamilyDescription.AutoIncrement = false;
				colvarFamilyDescription.IsNullable = true;
				colvarFamilyDescription.IsPrimaryKey = false;
				colvarFamilyDescription.IsForeignKey = false;
				colvarFamilyDescription.IsReadOnly = false;
				colvarFamilyDescription.DefaultSetting = @"";
				colvarFamilyDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamilyDescription);

				TableSchema.TableColumn colvarNumberOfPets = new TableSchema.TableColumn(schema);
				colvarNumberOfPets.ColumnName = "NumberOfPets";
				colvarNumberOfPets.DataType = DbType.Int32;
				colvarNumberOfPets.MaxLength = 0;
				colvarNumberOfPets.AutoIncrement = false;
				colvarNumberOfPets.IsNullable = false;
				colvarNumberOfPets.IsPrimaryKey = false;
				colvarNumberOfPets.IsForeignKey = false;
				colvarNumberOfPets.IsReadOnly = false;
				colvarNumberOfPets.DefaultSetting = @"";
				colvarNumberOfPets.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumberOfPets);

				TableSchema.TableColumn colvarPetDescription = new TableSchema.TableColumn(schema);
				colvarPetDescription.ColumnName = "PetDescription";
				colvarPetDescription.DataType = DbType.String;
				colvarPetDescription.MaxLength = -1;
				colvarPetDescription.AutoIncrement = false;
				colvarPetDescription.IsNullable = false;
				colvarPetDescription.IsPrimaryKey = false;
				colvarPetDescription.IsForeignKey = false;
				colvarPetDescription.IsReadOnly = false;
				colvarPetDescription.DefaultSetting = @"";
				colvarPetDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPetDescription);

				TableSchema.TableColumn colvarBeds = new TableSchema.TableColumn(schema);
				colvarBeds.ColumnName = "Beds";
				colvarBeds.DataType = DbType.Int32;
				colvarBeds.MaxLength = 0;
				colvarBeds.AutoIncrement = false;
				colvarBeds.IsNullable = true;
				colvarBeds.IsPrimaryKey = false;
				colvarBeds.IsForeignKey = false;
				colvarBeds.IsReadOnly = false;
				colvarBeds.DefaultSetting = @"";
				colvarBeds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBeds);

				TableSchema.TableColumn colvarBedsNumberOfTwin = new TableSchema.TableColumn(schema);
				colvarBedsNumberOfTwin.ColumnName = "BedsNumberOfTwin";
				colvarBedsNumberOfTwin.DataType = DbType.Int32;
				colvarBedsNumberOfTwin.MaxLength = 0;
				colvarBedsNumberOfTwin.AutoIncrement = false;
				colvarBedsNumberOfTwin.IsNullable = false;
				colvarBedsNumberOfTwin.IsPrimaryKey = false;
				colvarBedsNumberOfTwin.IsForeignKey = false;
				colvarBedsNumberOfTwin.IsReadOnly = false;
				colvarBedsNumberOfTwin.DefaultSetting = @"";
				colvarBedsNumberOfTwin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedsNumberOfTwin);

				TableSchema.TableColumn colvarBedsNumberOfQueen = new TableSchema.TableColumn(schema);
				colvarBedsNumberOfQueen.ColumnName = "BedsNumberOfQueen";
				colvarBedsNumberOfQueen.DataType = DbType.Int32;
				colvarBedsNumberOfQueen.MaxLength = 0;
				colvarBedsNumberOfQueen.AutoIncrement = false;
				colvarBedsNumberOfQueen.IsNullable = false;
				colvarBedsNumberOfQueen.IsPrimaryKey = false;
				colvarBedsNumberOfQueen.IsForeignKey = false;
				colvarBedsNumberOfQueen.IsReadOnly = false;
				colvarBedsNumberOfQueen.DefaultSetting = @"";
				colvarBedsNumberOfQueen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedsNumberOfQueen);

				TableSchema.TableColumn colvarBedDescription = new TableSchema.TableColumn(schema);
				colvarBedDescription.ColumnName = "BedDescription";
				colvarBedDescription.DataType = DbType.String;
				colvarBedDescription.MaxLength = -1;
				colvarBedDescription.AutoIncrement = false;
				colvarBedDescription.IsNullable = false;
				colvarBedDescription.IsPrimaryKey = false;
				colvarBedDescription.IsForeignKey = false;
				colvarBedDescription.IsReadOnly = false;
				colvarBedDescription.DefaultSetting = @"";
				colvarBedDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedDescription);

				TableSchema.TableColumn colvarBedDescriptionXML = new TableSchema.TableColumn(schema);
				colvarBedDescriptionXML.ColumnName = "BedDescriptionXML";
				colvarBedDescriptionXML.DataType = DbType.String;
				colvarBedDescriptionXML.MaxLength = -1;
				colvarBedDescriptionXML.AutoIncrement = false;
				colvarBedDescriptionXML.IsNullable = true;
				colvarBedDescriptionXML.IsPrimaryKey = false;
				colvarBedDescriptionXML.IsForeignKey = false;
				colvarBedDescriptionXML.IsReadOnly = false;
				colvarBedDescriptionXML.DefaultSetting = @"";
				colvarBedDescriptionXML.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedDescriptionXML);

				TableSchema.TableColumn colvarSpecialNeeds = new TableSchema.TableColumn(schema);
				colvarSpecialNeeds.ColumnName = "SpecialNeeds";
				colvarSpecialNeeds.DataType = DbType.String;
				colvarSpecialNeeds.MaxLength = -1;
				colvarSpecialNeeds.AutoIncrement = false;
				colvarSpecialNeeds.IsNullable = false;
				colvarSpecialNeeds.IsPrimaryKey = false;
				colvarSpecialNeeds.IsForeignKey = false;
				colvarSpecialNeeds.IsReadOnly = false;
				colvarSpecialNeeds.DefaultSetting = @"";
				colvarSpecialNeeds.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpecialNeeds);

				TableSchema.TableColumn colvarArrivalDate = new TableSchema.TableColumn(schema);
				colvarArrivalDate.ColumnName = "ArrivalDate";
				colvarArrivalDate.DataType = DbType.DateTime;
				colvarArrivalDate.MaxLength = 0;
				colvarArrivalDate.AutoIncrement = false;
				colvarArrivalDate.IsNullable = false;
				colvarArrivalDate.IsPrimaryKey = false;
				colvarArrivalDate.IsForeignKey = false;
				colvarArrivalDate.IsReadOnly = false;
				colvarArrivalDate.DefaultSetting = @"";
				colvarArrivalDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArrivalDate);

				TableSchema.TableColumn colvarDepartureDate = new TableSchema.TableColumn(schema);
				colvarDepartureDate.ColumnName = "DepartureDate";
				colvarDepartureDate.DataType = DbType.DateTime;
				colvarDepartureDate.MaxLength = 0;
				colvarDepartureDate.AutoIncrement = false;
				colvarDepartureDate.IsNullable = true;
				colvarDepartureDate.IsPrimaryKey = false;
				colvarDepartureDate.IsForeignKey = false;
				colvarDepartureDate.IsReadOnly = false;
				colvarDepartureDate.DefaultSetting = @"";
				colvarDepartureDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartureDate);

				TableSchema.TableColumn colvarRecievedTrainingMaterial = new TableSchema.TableColumn(schema);
				colvarRecievedTrainingMaterial.ColumnName = "RecievedTrainingMaterial";
				colvarRecievedTrainingMaterial.DataType = DbType.Boolean;
				colvarRecievedTrainingMaterial.MaxLength = 0;
				colvarRecievedTrainingMaterial.AutoIncrement = false;
				colvarRecievedTrainingMaterial.IsNullable = true;
				colvarRecievedTrainingMaterial.IsPrimaryKey = false;
				colvarRecievedTrainingMaterial.IsForeignKey = false;
				colvarRecievedTrainingMaterial.IsReadOnly = false;
				colvarRecievedTrainingMaterial.DefaultSetting = @"";
				colvarRecievedTrainingMaterial.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecievedTrainingMaterial);

				TableSchema.TableColumn colvarMetRegionalManager = new TableSchema.TableColumn(schema);
				colvarMetRegionalManager.ColumnName = "MetRegionalManager";
				colvarMetRegionalManager.DataType = DbType.Boolean;
				colvarMetRegionalManager.MaxLength = 0;
				colvarMetRegionalManager.AutoIncrement = false;
				colvarMetRegionalManager.IsNullable = true;
				colvarMetRegionalManager.IsPrimaryKey = false;
				colvarMetRegionalManager.IsForeignKey = false;
				colvarMetRegionalManager.IsReadOnly = false;
				colvarMetRegionalManager.DefaultSetting = @"";
				colvarMetRegionalManager.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMetRegionalManager);

				TableSchema.TableColumn colvarAttendedCorporateTraining = new TableSchema.TableColumn(schema);
				colvarAttendedCorporateTraining.ColumnName = "AttendedCorporateTraining";
				colvarAttendedCorporateTraining.DataType = DbType.Boolean;
				colvarAttendedCorporateTraining.MaxLength = 0;
				colvarAttendedCorporateTraining.AutoIncrement = false;
				colvarAttendedCorporateTraining.IsNullable = true;
				colvarAttendedCorporateTraining.IsPrimaryKey = false;
				colvarAttendedCorporateTraining.IsForeignKey = false;
				colvarAttendedCorporateTraining.IsReadOnly = false;
				colvarAttendedCorporateTraining.DefaultSetting = @"";
				colvarAttendedCorporateTraining.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAttendedCorporateTraining);

				TableSchema.TableColumn colvarKnockedDoors = new TableSchema.TableColumn(schema);
				colvarKnockedDoors.ColumnName = "KnockedDoors";
				colvarKnockedDoors.DataType = DbType.Boolean;
				colvarKnockedDoors.MaxLength = 0;
				colvarKnockedDoors.AutoIncrement = false;
				colvarKnockedDoors.IsNullable = true;
				colvarKnockedDoors.IsPrimaryKey = false;
				colvarKnockedDoors.IsForeignKey = false;
				colvarKnockedDoors.IsReadOnly = false;
				colvarKnockedDoors.DefaultSetting = @"";
				colvarKnockedDoors.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKnockedDoors);

				TableSchema.TableColumn colvarVehicles = new TableSchema.TableColumn(schema);
				colvarVehicles.ColumnName = "Vehicles";
				colvarVehicles.DataType = DbType.Int32;
				colvarVehicles.MaxLength = 0;
				colvarVehicles.AutoIncrement = false;
				colvarVehicles.IsNullable = false;
				colvarVehicles.IsPrimaryKey = false;
				colvarVehicles.IsForeignKey = false;
				colvarVehicles.IsReadOnly = false;
				colvarVehicles.DefaultSetting = @"";
				colvarVehicles.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVehicles);

				TableSchema.TableColumn colvarVehicleDescription = new TableSchema.TableColumn(schema);
				colvarVehicleDescription.ColumnName = "VehicleDescription";
				colvarVehicleDescription.DataType = DbType.String;
				colvarVehicleDescription.MaxLength = -1;
				colvarVehicleDescription.AutoIncrement = false;
				colvarVehicleDescription.IsNullable = false;
				colvarVehicleDescription.IsPrimaryKey = false;
				colvarVehicleDescription.IsForeignKey = false;
				colvarVehicleDescription.IsReadOnly = false;
				colvarVehicleDescription.DefaultSetting = @"";
				colvarVehicleDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVehicleDescription);

				TableSchema.TableColumn colvarCCName = new TableSchema.TableColumn(schema);
				colvarCCName.ColumnName = "CCName";
				colvarCCName.DataType = DbType.String;
				colvarCCName.MaxLength = 50;
				colvarCCName.AutoIncrement = false;
				colvarCCName.IsNullable = false;
				colvarCCName.IsPrimaryKey = false;
				colvarCCName.IsForeignKey = false;
				colvarCCName.IsReadOnly = false;
				colvarCCName.DefaultSetting = @"";
				colvarCCName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCCName);

				TableSchema.TableColumn colvarCCNumber = new TableSchema.TableColumn(schema);
				colvarCCNumber.ColumnName = "CCNumber";
				colvarCCNumber.DataType = DbType.String;
				colvarCCNumber.MaxLength = 50;
				colvarCCNumber.AutoIncrement = false;
				colvarCCNumber.IsNullable = false;
				colvarCCNumber.IsPrimaryKey = false;
				colvarCCNumber.IsForeignKey = false;
				colvarCCNumber.IsReadOnly = false;
				colvarCCNumber.DefaultSetting = @"";
				colvarCCNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCCNumber);

				TableSchema.TableColumn colvarCCCardType = new TableSchema.TableColumn(schema);
				colvarCCCardType.ColumnName = "CCCardType";
				colvarCCCardType.DataType = DbType.Int32;
				colvarCCCardType.MaxLength = 0;
				colvarCCCardType.AutoIncrement = false;
				colvarCCCardType.IsNullable = false;
				colvarCCCardType.IsPrimaryKey = false;
				colvarCCCardType.IsForeignKey = false;
				colvarCCCardType.IsReadOnly = false;
				colvarCCCardType.DefaultSetting = @"";
				colvarCCCardType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCCCardType);

				TableSchema.TableColumn colvarCvv = new TableSchema.TableColumn(schema);
				colvarCvv.ColumnName = "Cvv";
				colvarCvv.DataType = DbType.String;
				colvarCvv.MaxLength = 5;
				colvarCvv.AutoIncrement = false;
				colvarCvv.IsNullable = false;
				colvarCvv.IsPrimaryKey = false;
				colvarCvv.IsForeignKey = false;
				colvarCvv.IsReadOnly = false;
				colvarCvv.DefaultSetting = @"";
				colvarCvv.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCvv);

				TableSchema.TableColumn colvarCCExpDate = new TableSchema.TableColumn(schema);
				colvarCCExpDate.ColumnName = "CCExpDate";
				colvarCCExpDate.DataType = DbType.DateTime;
				colvarCCExpDate.MaxLength = 0;
				colvarCCExpDate.AutoIncrement = false;
				colvarCCExpDate.IsNullable = false;
				colvarCCExpDate.IsPrimaryKey = false;
				colvarCCExpDate.IsForeignKey = false;
				colvarCCExpDate.IsReadOnly = false;
				colvarCCExpDate.DefaultSetting = @"";
				colvarCCExpDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCCExpDate);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = true;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedById = new TableSchema.TableColumn(schema);
				colvarCreatedById.ColumnName = "CreatedById";
				colvarCreatedById.DataType = DbType.String;
				colvarCreatedById.MaxLength = 100;
				colvarCreatedById.AutoIncrement = false;
				colvarCreatedById.IsNullable = true;
				colvarCreatedById.IsPrimaryKey = false;
				colvarCreatedById.IsForeignKey = false;
				colvarCreatedById.IsReadOnly = false;
				colvarCreatedById.DefaultSetting = @"";
				colvarCreatedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedById);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_HousingInfo",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_HousingInfo LoadFrom(RU_HousingInfo item)
		{
			RU_HousingInfo result = new RU_HousingInfo();
			if (item.HousingInfoID != default(int)) {
				result.LoadByKey(item.HousingInfoID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int HousingInfoID {
			get { return GetColumnValue<int>(Columns.HousingInfoID); }
			set {
				SetColumnValue(Columns.HousingInfoID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HousingInfoID));
			}
		}
		[DataMember]
		public int? RecruitId {
			get { return GetColumnValue<int?>(Columns.RecruitId); }
			set {
				SetColumnValue(Columns.RecruitId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitId));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public int BillAddressId {
			get { return GetColumnValue<int>(Columns.BillAddressId); }
			set {
				SetColumnValue(Columns.BillAddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BillAddressId));
			}
		}
		[DataMember]
		public int? NumberInFamily {
			get { return GetColumnValue<int?>(Columns.NumberInFamily); }
			set {
				SetColumnValue(Columns.NumberInFamily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NumberInFamily));
			}
		}
		[DataMember]
		public string FamilyDescription {
			get { return GetColumnValue<string>(Columns.FamilyDescription); }
			set {
				SetColumnValue(Columns.FamilyDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FamilyDescription));
			}
		}
		[DataMember]
		public int NumberOfPets {
			get { return GetColumnValue<int>(Columns.NumberOfPets); }
			set {
				SetColumnValue(Columns.NumberOfPets, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NumberOfPets));
			}
		}
		[DataMember]
		public string PetDescription {
			get { return GetColumnValue<string>(Columns.PetDescription); }
			set {
				SetColumnValue(Columns.PetDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PetDescription));
			}
		}
		[DataMember]
		public int? Beds {
			get { return GetColumnValue<int?>(Columns.Beds); }
			set {
				SetColumnValue(Columns.Beds, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Beds));
			}
		}
		[DataMember]
		public int BedsNumberOfTwin {
			get { return GetColumnValue<int>(Columns.BedsNumberOfTwin); }
			set {
				SetColumnValue(Columns.BedsNumberOfTwin, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BedsNumberOfTwin));
			}
		}
		[DataMember]
		public int BedsNumberOfQueen {
			get { return GetColumnValue<int>(Columns.BedsNumberOfQueen); }
			set {
				SetColumnValue(Columns.BedsNumberOfQueen, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BedsNumberOfQueen));
			}
		}
		[DataMember]
		public string BedDescription {
			get { return GetColumnValue<string>(Columns.BedDescription); }
			set {
				SetColumnValue(Columns.BedDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BedDescription));
			}
		}
		[DataMember]
		public string BedDescriptionXML {
			get { return GetColumnValue<string>(Columns.BedDescriptionXML); }
			set {
				SetColumnValue(Columns.BedDescriptionXML, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BedDescriptionXML));
			}
		}
		[DataMember]
		public string SpecialNeeds {
			get { return GetColumnValue<string>(Columns.SpecialNeeds); }
			set {
				SetColumnValue(Columns.SpecialNeeds, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SpecialNeeds));
			}
		}
		[DataMember]
		public DateTime ArrivalDate {
			get { return GetColumnValue<DateTime>(Columns.ArrivalDate); }
			set {
				SetColumnValue(Columns.ArrivalDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ArrivalDate));
			}
		}
		[DataMember]
		public DateTime? DepartureDate {
			get { return GetColumnValue<DateTime?>(Columns.DepartureDate); }
			set {
				SetColumnValue(Columns.DepartureDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DepartureDate));
			}
		}
		[DataMember]
		public bool? RecievedTrainingMaterial {
			get { return GetColumnValue<bool?>(Columns.RecievedTrainingMaterial); }
			set {
				SetColumnValue(Columns.RecievedTrainingMaterial, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecievedTrainingMaterial));
			}
		}
		[DataMember]
		public bool? MetRegionalManager {
			get { return GetColumnValue<bool?>(Columns.MetRegionalManager); }
			set {
				SetColumnValue(Columns.MetRegionalManager, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MetRegionalManager));
			}
		}
		[DataMember]
		public bool? AttendedCorporateTraining {
			get { return GetColumnValue<bool?>(Columns.AttendedCorporateTraining); }
			set {
				SetColumnValue(Columns.AttendedCorporateTraining, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AttendedCorporateTraining));
			}
		}
		[DataMember]
		public bool? KnockedDoors {
			get { return GetColumnValue<bool?>(Columns.KnockedDoors); }
			set {
				SetColumnValue(Columns.KnockedDoors, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.KnockedDoors));
			}
		}
		[DataMember]
		public int Vehicles {
			get { return GetColumnValue<int>(Columns.Vehicles); }
			set {
				SetColumnValue(Columns.Vehicles, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Vehicles));
			}
		}
		[DataMember]
		public string VehicleDescription {
			get { return GetColumnValue<string>(Columns.VehicleDescription); }
			set {
				SetColumnValue(Columns.VehicleDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VehicleDescription));
			}
		}
		[DataMember]
		public string CCName {
			get { return GetColumnValue<string>(Columns.CCName); }
			set {
				SetColumnValue(Columns.CCName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CCName));
			}
		}
		[DataMember]
		public string CCNumber {
			get { return GetColumnValue<string>(Columns.CCNumber); }
			set {
				SetColumnValue(Columns.CCNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CCNumber));
			}
		}
		[DataMember]
		public int CCCardType {
			get { return GetColumnValue<int>(Columns.CCCardType); }
			set {
				SetColumnValue(Columns.CCCardType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CCCardType));
			}
		}
		[DataMember]
		public string Cvv {
			get { return GetColumnValue<string>(Columns.Cvv); }
			set {
				SetColumnValue(Columns.Cvv, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Cvv));
			}
		}
		[DataMember]
		public DateTime CCExpDate {
			get { return GetColumnValue<DateTime>(Columns.CCExpDate); }
			set {
				SetColumnValue(Columns.CCExpDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CCExpDate));
			}
		}
		[DataMember]
		public DateTime? CreatedByDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedById {
			get { return GetColumnValue<string>(Columns.CreatedById); }
			set {
				SetColumnValue(Columns.CreatedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedById));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_User _User;
		//Relationship: FK_RU_HousingInfo_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserID);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserID", value.UserID);
				_User = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return HousingInfoID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn HousingInfoIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RecruitIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn BillAddressIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn NumberInFamilyColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn FamilyDescriptionColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn NumberOfPetsColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PetDescriptionColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn BedsColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn BedsNumberOfTwinColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn BedsNumberOfQueenColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn BedDescriptionColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn BedDescriptionXMLColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn SpecialNeedsColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ArrivalDateColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn DepartureDateColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn RecievedTrainingMaterialColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn MetRegionalManagerColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn AttendedCorporateTrainingColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn KnockedDoorsColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn VehiclesColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn VehicleDescriptionColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn CCNameColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn CCNumberColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn CCCardTypeColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn CvvColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn CCExpDateColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn CreatedByIdColumn
		{
			get { return Schema.Columns[28]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string HousingInfoID = @"HousingInfoID";
			public static readonly string RecruitId = @"RecruitId";
			public static readonly string UserID = @"UserID";
			public static readonly string BillAddressId = @"BillAddressId";
			public static readonly string NumberInFamily = @"NumberInFamily";
			public static readonly string FamilyDescription = @"FamilyDescription";
			public static readonly string NumberOfPets = @"NumberOfPets";
			public static readonly string PetDescription = @"PetDescription";
			public static readonly string Beds = @"Beds";
			public static readonly string BedsNumberOfTwin = @"BedsNumberOfTwin";
			public static readonly string BedsNumberOfQueen = @"BedsNumberOfQueen";
			public static readonly string BedDescription = @"BedDescription";
			public static readonly string BedDescriptionXML = @"BedDescriptionXML";
			public static readonly string SpecialNeeds = @"SpecialNeeds";
			public static readonly string ArrivalDate = @"ArrivalDate";
			public static readonly string DepartureDate = @"DepartureDate";
			public static readonly string RecievedTrainingMaterial = @"RecievedTrainingMaterial";
			public static readonly string MetRegionalManager = @"MetRegionalManager";
			public static readonly string AttendedCorporateTraining = @"AttendedCorporateTraining";
			public static readonly string KnockedDoors = @"KnockedDoors";
			public static readonly string Vehicles = @"Vehicles";
			public static readonly string VehicleDescription = @"VehicleDescription";
			public static readonly string CCName = @"CCName";
			public static readonly string CCNumber = @"CCNumber";
			public static readonly string CCCardType = @"CCCardType";
			public static readonly string Cvv = @"Cvv";
			public static readonly string CCExpDate = @"CCExpDate";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedById = @"CreatedById";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return HousingInfoID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_LevelAdvance class.
	/// </summary>
	[DataContract]
	public partial class RU_LevelAdvanceCollection : ActiveList<RU_LevelAdvance, RU_LevelAdvanceCollection>
	{
		public static RU_LevelAdvanceCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_LevelAdvanceCollection result = new RU_LevelAdvanceCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_LevelAdvance item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_LevelAdvance table.
	/// </summary>
	[DataContract]
	public partial class RU_LevelAdvance : ActiveRecord<RU_LevelAdvance>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_LevelAdvance()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_LevelAdvance", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLevelAdvanceID = new TableSchema.TableColumn(schema);
				colvarLevelAdvanceID.ColumnName = "LevelAdvanceID";
				colvarLevelAdvanceID.DataType = DbType.Int32;
				colvarLevelAdvanceID.MaxLength = 0;
				colvarLevelAdvanceID.AutoIncrement = true;
				colvarLevelAdvanceID.IsNullable = false;
				colvarLevelAdvanceID.IsPrimaryKey = true;
				colvarLevelAdvanceID.IsForeignKey = false;
				colvarLevelAdvanceID.IsReadOnly = false;
				colvarLevelAdvanceID.DefaultSetting = @"";
				colvarLevelAdvanceID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLevelAdvanceID);

				TableSchema.TableColumn colvarLevelNum = new TableSchema.TableColumn(schema);
				colvarLevelNum.ColumnName = "LevelNum";
				colvarLevelNum.DataType = DbType.Int32;
				colvarLevelNum.MaxLength = 0;
				colvarLevelNum.AutoIncrement = false;
				colvarLevelNum.IsNullable = false;
				colvarLevelNum.IsPrimaryKey = false;
				colvarLevelNum.IsForeignKey = false;
				colvarLevelNum.IsReadOnly = false;
				colvarLevelNum.DefaultSetting = @"((0))";
				colvarLevelNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLevelNum);

				TableSchema.TableColumn colvarLowerEndCount = new TableSchema.TableColumn(schema);
				colvarLowerEndCount.ColumnName = "LowerEndCount";
				colvarLowerEndCount.DataType = DbType.Int32;
				colvarLowerEndCount.MaxLength = 0;
				colvarLowerEndCount.AutoIncrement = false;
				colvarLowerEndCount.IsNullable = false;
				colvarLowerEndCount.IsPrimaryKey = false;
				colvarLowerEndCount.IsForeignKey = false;
				colvarLowerEndCount.IsReadOnly = false;
				colvarLowerEndCount.DefaultSetting = @"((0))";
				colvarLowerEndCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLowerEndCount);

				TableSchema.TableColumn colvarUpperEndCount = new TableSchema.TableColumn(schema);
				colvarUpperEndCount.ColumnName = "UpperEndCount";
				colvarUpperEndCount.DataType = DbType.Int32;
				colvarUpperEndCount.MaxLength = 0;
				colvarUpperEndCount.AutoIncrement = false;
				colvarUpperEndCount.IsNullable = false;
				colvarUpperEndCount.IsPrimaryKey = false;
				colvarUpperEndCount.IsForeignKey = false;
				colvarUpperEndCount.IsReadOnly = false;
				colvarUpperEndCount.DefaultSetting = @"";
				colvarUpperEndCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpperEndCount);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.Int32;
				colvarCreatedByID.MaxLength = 0;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"((1))";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_LevelAdvance",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_LevelAdvance LoadFrom(RU_LevelAdvance item)
		{
			RU_LevelAdvance result = new RU_LevelAdvance();
			if (item.LevelAdvanceID != default(int)) {
				result.LoadByKey(item.LevelAdvanceID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int LevelAdvanceID {
			get { return GetColumnValue<int>(Columns.LevelAdvanceID); }
			set {
				SetColumnValue(Columns.LevelAdvanceID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LevelAdvanceID));
			}
		}
		[DataMember]
		public int LevelNum {
			get { return GetColumnValue<int>(Columns.LevelNum); }
			set {
				SetColumnValue(Columns.LevelNum, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LevelNum));
			}
		}
		[DataMember]
		public int LowerEndCount {
			get { return GetColumnValue<int>(Columns.LowerEndCount); }
			set {
				SetColumnValue(Columns.LowerEndCount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LowerEndCount));
			}
		}
		[DataMember]
		public int UpperEndCount {
			get { return GetColumnValue<int>(Columns.UpperEndCount); }
			set {
				SetColumnValue(Columns.UpperEndCount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UpperEndCount));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public int CreatedByID {
			get { return GetColumnValue<int>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return LevelAdvanceID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LevelAdvanceIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LevelNumColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn LowerEndCountColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UpperEndCountColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LevelAdvanceID = @"LevelAdvanceID";
			public static readonly string LevelNum = @"LevelNum";
			public static readonly string LowerEndCount = @"LowerEndCount";
			public static readonly string UpperEndCount = @"UpperEndCount";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedDate = @"ModifiedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LevelAdvanceID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_LoginAudit class.
	/// </summary>
	[DataContract]
	public partial class RU_LoginAuditCollection : ActiveList<RU_LoginAudit, RU_LoginAuditCollection>
	{
		public static RU_LoginAuditCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_LoginAuditCollection result = new RU_LoginAuditCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_LoginAudit item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_LoginAudit table.
	/// </summary>
	[DataContract]
	public partial class RU_LoginAudit : ActiveRecord<RU_LoginAudit>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_LoginAudit()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_LoginAudit", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarLoginAuditID = new TableSchema.TableColumn(schema);
				colvarLoginAuditID.ColumnName = "LoginAuditID";
				colvarLoginAuditID.DataType = DbType.Int64;
				colvarLoginAuditID.MaxLength = 0;
				colvarLoginAuditID.AutoIncrement = true;
				colvarLoginAuditID.IsNullable = false;
				colvarLoginAuditID.IsPrimaryKey = true;
				colvarLoginAuditID.IsForeignKey = false;
				colvarLoginAuditID.IsReadOnly = false;
				colvarLoginAuditID.DefaultSetting = @"";
				colvarLoginAuditID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoginAuditID);

				TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
				colvarUserId.ColumnName = "UserId";
				colvarUserId.DataType = DbType.Int32;
				colvarUserId.MaxLength = 0;
				colvarUserId.AutoIncrement = false;
				colvarUserId.IsNullable = true;
				colvarUserId.IsPrimaryKey = false;
				colvarUserId.IsForeignKey = true;
				colvarUserId.IsReadOnly = false;
				colvarUserId.DefaultSetting = @"";
				colvarUserId.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarUserId);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = false;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = false;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarLoginDate = new TableSchema.TableColumn(schema);
				colvarLoginDate.ColumnName = "LoginDate";
				colvarLoginDate.DataType = DbType.DateTime;
				colvarLoginDate.MaxLength = 0;
				colvarLoginDate.AutoIncrement = false;
				colvarLoginDate.IsNullable = false;
				colvarLoginDate.IsPrimaryKey = false;
				colvarLoginDate.IsForeignKey = false;
				colvarLoginDate.IsReadOnly = false;
				colvarLoginDate.DefaultSetting = @"";
				colvarLoginDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoginDate);

				TableSchema.TableColumn colvarSuccess = new TableSchema.TableColumn(schema);
				colvarSuccess.ColumnName = "Success";
				colvarSuccess.DataType = DbType.Boolean;
				colvarSuccess.MaxLength = 0;
				colvarSuccess.AutoIncrement = false;
				colvarSuccess.IsNullable = false;
				colvarSuccess.IsPrimaryKey = false;
				colvarSuccess.IsForeignKey = false;
				colvarSuccess.IsReadOnly = false;
				colvarSuccess.DefaultSetting = @"";
				colvarSuccess.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuccess);

				TableSchema.TableColumn colvarIPAddress = new TableSchema.TableColumn(schema);
				colvarIPAddress.ColumnName = "IPAddress";
				colvarIPAddress.DataType = DbType.AnsiString;
				colvarIPAddress.MaxLength = 20;
				colvarIPAddress.AutoIncrement = false;
				colvarIPAddress.IsNullable = false;
				colvarIPAddress.IsPrimaryKey = false;
				colvarIPAddress.IsForeignKey = false;
				colvarIPAddress.IsReadOnly = false;
				colvarIPAddress.DefaultSetting = @"";
				colvarIPAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIPAddress);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_LoginAudit",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_LoginAudit LoadFrom(RU_LoginAudit item)
		{
			RU_LoginAudit result = new RU_LoginAudit();
			if (item.LoginAuditID != default(long)) {
				result.LoadByKey(item.LoginAuditID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long LoginAuditID {
			get { return GetColumnValue<long>(Columns.LoginAuditID); }
			set {
				SetColumnValue(Columns.LoginAuditID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoginAuditID));
			}
		}
		[DataMember]
		public int? UserId {
			get { return GetColumnValue<int?>(Columns.UserId); }
			set {
				SetColumnValue(Columns.UserId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserId));
			}
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set {
				SetColumnValue(Columns.Username, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Username));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}
		[DataMember]
		public DateTime LoginDate {
			get { return GetColumnValue<DateTime>(Columns.LoginDate); }
			set {
				SetColumnValue(Columns.LoginDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LoginDate));
			}
		}
		[DataMember]
		public bool Success {
			get { return GetColumnValue<bool>(Columns.Success); }
			set {
				SetColumnValue(Columns.Success, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Success));
			}
		}
		[DataMember]
		public string IPAddress {
			get { return GetColumnValue<string>(Columns.IPAddress); }
			set {
				SetColumnValue(Columns.IPAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IPAddress));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_User _User;
		//Relationship: FK_RU_LoginAudit_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserId);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserId", value.UserID);
				_User = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return LoginAuditID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn LoginAuditIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LoginDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SuccessColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IPAddressColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string LoginAuditID = @"LoginAuditID";
			public static readonly string UserId = @"UserId";
			public static readonly string Username = @"Username";
			public static readonly string Password = @"Password";
			public static readonly string LoginDate = @"LoginDate";
			public static readonly string Success = @"Success";
			public static readonly string IPAddress = @"IPAddress";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return LoginAuditID; }
		}
		*/

		#region Foreign Collections

		private RU_AuthenticationTokenCollection _RU_AuthenticationTokensCol;
		//Relationship: FK_RU_AuthenticationTokens_RU_LoginAudit
		public RU_AuthenticationTokenCollection RU_AuthenticationTokensCol
		{
			get
			{
				if(_RU_AuthenticationTokensCol == null) {
					_RU_AuthenticationTokensCol = new RU_AuthenticationTokenCollection();
					_RU_AuthenticationTokensCol.LoadAndCloseReader(RU_AuthenticationToken.Query()
						.WHERE(RU_AuthenticationToken.Columns.LoginAuditId, LoginAuditID).ExecuteReader());
				}
				return _RU_AuthenticationTokensCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_MessageAttachment class.
	/// </summary>
	[DataContract]
	public partial class RU_MessageAttachmentCollection : ActiveList<RU_MessageAttachment, RU_MessageAttachmentCollection>
	{
		public static RU_MessageAttachmentCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_MessageAttachmentCollection result = new RU_MessageAttachmentCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_MessageAttachment item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_MessageAttachments table.
	/// </summary>
	[DataContract]
	public partial class RU_MessageAttachment : ActiveRecord<RU_MessageAttachment>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_MessageAttachment()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_MessageAttachments", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMessageAttachmentID = new TableSchema.TableColumn(schema);
				colvarMessageAttachmentID.ColumnName = "MessageAttachmentID";
				colvarMessageAttachmentID.DataType = DbType.Int32;
				colvarMessageAttachmentID.MaxLength = 0;
				colvarMessageAttachmentID.AutoIncrement = true;
				colvarMessageAttachmentID.IsNullable = false;
				colvarMessageAttachmentID.IsPrimaryKey = true;
				colvarMessageAttachmentID.IsForeignKey = false;
				colvarMessageAttachmentID.IsReadOnly = false;
				colvarMessageAttachmentID.DefaultSetting = @"";
				colvarMessageAttachmentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageAttachmentID);

				TableSchema.TableColumn colvarAttachmentName = new TableSchema.TableColumn(schema);
				colvarAttachmentName.ColumnName = "AttachmentName";
				colvarAttachmentName.DataType = DbType.String;
				colvarAttachmentName.MaxLength = -1;
				colvarAttachmentName.AutoIncrement = false;
				colvarAttachmentName.IsNullable = false;
				colvarAttachmentName.IsPrimaryKey = false;
				colvarAttachmentName.IsForeignKey = false;
				colvarAttachmentName.IsReadOnly = false;
				colvarAttachmentName.DefaultSetting = @"";
				colvarAttachmentName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAttachmentName);

				TableSchema.TableColumn colvarAttachmentFile = new TableSchema.TableColumn(schema);
				colvarAttachmentFile.ColumnName = "AttachmentFile";
				colvarAttachmentFile.DataType = DbType.Binary;
				colvarAttachmentFile.MaxLength = 2147483647;
				colvarAttachmentFile.AutoIncrement = false;
				colvarAttachmentFile.IsNullable = false;
				colvarAttachmentFile.IsPrimaryKey = false;
				colvarAttachmentFile.IsForeignKey = false;
				colvarAttachmentFile.IsReadOnly = false;
				colvarAttachmentFile.DefaultSetting = @"";
				colvarAttachmentFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAttachmentFile);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_MessageAttachments",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_MessageAttachment LoadFrom(RU_MessageAttachment item)
		{
			RU_MessageAttachment result = new RU_MessageAttachment();
			if (item.MessageAttachmentID != default(int)) {
				result.LoadByKey(item.MessageAttachmentID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MessageAttachmentID {
			get { return GetColumnValue<int>(Columns.MessageAttachmentID); }
			set {
				SetColumnValue(Columns.MessageAttachmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageAttachmentID));
			}
		}
		[DataMember]
		public string AttachmentName {
			get { return GetColumnValue<string>(Columns.AttachmentName); }
			set {
				SetColumnValue(Columns.AttachmentName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AttachmentName));
			}
		}
		[DataMember]
		public byte[] AttachmentFile {
			get { return GetColumnValue<byte[]>(Columns.AttachmentFile); }
			set {
				SetColumnValue(Columns.AttachmentFile, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AttachmentFile));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AttachmentName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MessageAttachmentIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AttachmentNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn AttachmentFileColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MessageAttachmentID = @"MessageAttachmentID";
			public static readonly string AttachmentName = @"AttachmentName";
			public static readonly string AttachmentFile = @"AttachmentFile";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MessageAttachmentID; }
		}
		*/

		#region Foreign Collections

		private RU_MessageQueue_MessageAttachment_MapCollection _RU_MessageQueue_MessageAttachment_MapsCol;
		//Relationship: FK_RU_Attachment_Message_Map_RU_MessageAttachments
		public RU_MessageQueue_MessageAttachment_MapCollection RU_MessageQueue_MessageAttachment_MapsCol
		{
			get
			{
				if(_RU_MessageQueue_MessageAttachment_MapsCol == null) {
					_RU_MessageQueue_MessageAttachment_MapsCol = new RU_MessageQueue_MessageAttachment_MapCollection();
					_RU_MessageQueue_MessageAttachment_MapsCol.LoadAndCloseReader(RU_MessageQueue_MessageAttachment_Map.Query()
						.WHERE(RU_MessageQueue_MessageAttachment_Map.Columns.AttachmentID, MessageAttachmentID).ExecuteReader());
				}
				return _RU_MessageQueue_MessageAttachment_MapsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_MessageFormat class.
	/// </summary>
	[DataContract]
	public partial class RU_MessageFormatCollection : ActiveList<RU_MessageFormat, RU_MessageFormatCollection>
	{
		public static RU_MessageFormatCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_MessageFormatCollection result = new RU_MessageFormatCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_MessageFormat item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_MessageFormat table.
	/// </summary>
	[DataContract]
	public partial class RU_MessageFormat : ActiveRecord<RU_MessageFormat>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_MessageFormat()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_MessageFormat", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMessageFormatID = new TableSchema.TableColumn(schema);
				colvarMessageFormatID.ColumnName = "MessageFormatID";
				colvarMessageFormatID.DataType = DbType.Int32;
				colvarMessageFormatID.MaxLength = 0;
				colvarMessageFormatID.AutoIncrement = true;
				colvarMessageFormatID.IsNullable = false;
				colvarMessageFormatID.IsPrimaryKey = true;
				colvarMessageFormatID.IsForeignKey = false;
				colvarMessageFormatID.IsReadOnly = false;
				colvarMessageFormatID.DefaultSetting = @"";
				colvarMessageFormatID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageFormatID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarMessageFilePath = new TableSchema.TableColumn(schema);
				colvarMessageFilePath.ColumnName = "MessageFilePath";
				colvarMessageFilePath.DataType = DbType.String;
				colvarMessageFilePath.MaxLength = 100;
				colvarMessageFilePath.AutoIncrement = false;
				colvarMessageFilePath.IsNullable = false;
				colvarMessageFilePath.IsPrimaryKey = false;
				colvarMessageFilePath.IsForeignKey = false;
				colvarMessageFilePath.IsReadOnly = false;
				colvarMessageFilePath.DefaultSetting = @"";
				colvarMessageFilePath.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageFilePath);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_MessageFormat",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_MessageFormat LoadFrom(RU_MessageFormat item)
		{
			RU_MessageFormat result = new RU_MessageFormat();
			if (item.MessageFormatID != default(int)) {
				result.LoadByKey(item.MessageFormatID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MessageFormatID {
			get { return GetColumnValue<int>(Columns.MessageFormatID); }
			set {
				SetColumnValue(Columns.MessageFormatID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageFormatID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string MessageFilePath {
			get { return GetColumnValue<string>(Columns.MessageFilePath); }
			set {
				SetColumnValue(Columns.MessageFilePath, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageFilePath));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MessageFormatIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn MessageFilePathColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MessageFormatID = @"MessageFormatID";
			public static readonly string Description = @"Description";
			public static readonly string MessageFilePath = @"MessageFilePath";
			public static readonly string IsActive = @"IsActive";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MessageFormatID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_MessageQueue_MessageAttachment_Map class.
	/// </summary>
	[DataContract]
	public partial class RU_MessageQueue_MessageAttachment_MapCollection : ActiveList<RU_MessageQueue_MessageAttachment_Map, RU_MessageQueue_MessageAttachment_MapCollection>
	{
		public static RU_MessageQueue_MessageAttachment_MapCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_MessageQueue_MessageAttachment_MapCollection result = new RU_MessageQueue_MessageAttachment_MapCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_MessageQueue_MessageAttachment_Map item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_MessageQueue_MessageAttachment_Map table.
	/// </summary>
	[DataContract]
	public partial class RU_MessageQueue_MessageAttachment_Map : ActiveRecord<RU_MessageQueue_MessageAttachment_Map>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_MessageQueue_MessageAttachment_Map()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_MessageQueue_MessageAttachment_Map", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMessageID = new TableSchema.TableColumn(schema);
				colvarMessageID.ColumnName = "MessageID";
				colvarMessageID.DataType = DbType.Int32;
				colvarMessageID.MaxLength = 0;
				colvarMessageID.AutoIncrement = false;
				colvarMessageID.IsNullable = false;
				colvarMessageID.IsPrimaryKey = true;
				colvarMessageID.IsForeignKey = false;
				colvarMessageID.IsReadOnly = false;
				colvarMessageID.DefaultSetting = @"";
				colvarMessageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageID);

				TableSchema.TableColumn colvarAttachmentID = new TableSchema.TableColumn(schema);
				colvarAttachmentID.ColumnName = "AttachmentID";
				colvarAttachmentID.DataType = DbType.Int32;
				colvarAttachmentID.MaxLength = 0;
				colvarAttachmentID.AutoIncrement = false;
				colvarAttachmentID.IsNullable = false;
				colvarAttachmentID.IsPrimaryKey = false;
				colvarAttachmentID.IsForeignKey = true;
				colvarAttachmentID.IsReadOnly = false;
				colvarAttachmentID.DefaultSetting = @"";
				colvarAttachmentID.ForeignKeyTableName = "RU_MessageAttachments";
				schema.Columns.Add(colvarAttachmentID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_MessageQueue_MessageAttachment_Map",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_MessageQueue_MessageAttachment_Map LoadFrom(RU_MessageQueue_MessageAttachment_Map item)
		{
			RU_MessageQueue_MessageAttachment_Map result = new RU_MessageQueue_MessageAttachment_Map();
			if (item.MessageID != default(int)) {
				result.LoadByKey(item.MessageID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MessageID {
			get { return GetColumnValue<int>(Columns.MessageID); }
			set {
				SetColumnValue(Columns.MessageID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageID));
			}
		}
		[DataMember]
		public int AttachmentID {
			get { return GetColumnValue<int>(Columns.AttachmentID); }
			set {
				SetColumnValue(Columns.AttachmentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AttachmentID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_MessageAttachment _Attachment;
		//Relationship: FK_RU_Attachment_Message_Map_RU_MessageAttachments
		public RU_MessageAttachment Attachment
		{
			get
			{
				if(_Attachment == null) {
					_Attachment = RU_MessageAttachment.FetchByID(this.AttachmentID);
				}
				return _Attachment;
			}
			set
			{
				SetColumnValue("AttachmentID", value.MessageAttachmentID);
				_Attachment = value;
			}
		}

		private RU_MessageQueue _Message;
		//Relationship: FK_RU_Attachment_Message_Map_RU_MessageQueues
		public RU_MessageQueue Message
		{
			get
			{
				if(_Message == null) {
					_Message = RU_MessageQueue.FetchByID(this.MessageID);
				}
				return _Message;
			}
			set
			{
				SetColumnValue("MessageID", value.MessageQueueID);
				_Message = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MessageID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MessageIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AttachmentIDColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MessageID = @"MessageID";
			public static readonly string AttachmentID = @"AttachmentID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MessageID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_MessageQueue_User_Map class.
	/// </summary>
	[DataContract]
	public partial class RU_MessageQueue_User_MapCollection : ActiveList<RU_MessageQueue_User_Map, RU_MessageQueue_User_MapCollection>
	{
		public static RU_MessageQueue_User_MapCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_MessageQueue_User_MapCollection result = new RU_MessageQueue_User_MapCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_MessageQueue_User_Map item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_MessageQueue_User_Map table.
	/// </summary>
	[DataContract]
	public partial class RU_MessageQueue_User_Map : ActiveRecord<RU_MessageQueue_User_Map>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_MessageQueue_User_Map()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_MessageQueue_User_Map", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMessageQueueID = new TableSchema.TableColumn(schema);
				colvarMessageQueueID.ColumnName = "MessageQueueID";
				colvarMessageQueueID.DataType = DbType.Int32;
				colvarMessageQueueID.MaxLength = 0;
				colvarMessageQueueID.AutoIncrement = false;
				colvarMessageQueueID.IsNullable = false;
				colvarMessageQueueID.IsPrimaryKey = true;
				colvarMessageQueueID.IsForeignKey = false;
				colvarMessageQueueID.IsReadOnly = false;
				colvarMessageQueueID.DefaultSetting = @"";
				colvarMessageQueueID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageQueueID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = true;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarUserID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_MessageQueue_User_Map",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_MessageQueue_User_Map LoadFrom(RU_MessageQueue_User_Map item)
		{
			RU_MessageQueue_User_Map result = new RU_MessageQueue_User_Map();
			if (item.MessageQueueID != default(int)) {
				result.LoadByKey(item.MessageQueueID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MessageQueueID {
			get { return GetColumnValue<int>(Columns.MessageQueueID); }
			set {
				SetColumnValue(Columns.MessageQueueID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageQueueID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_MessageQueue _MessageQueue;
		//Relationship: FK_RU_MessageQueueID
		public RU_MessageQueue MessageQueue
		{
			get
			{
				if(_MessageQueue == null) {
					_MessageQueue = RU_MessageQueue.FetchByID(this.MessageQueueID);
				}
				return _MessageQueue;
			}
			set
			{
				SetColumnValue("MessageQueueID", value.MessageQueueID);
				_MessageQueue = value;
			}
		}

		private RU_User _User;
		//Relationship: FK_RU_UserID
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserID);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserID", value.UserID);
				_User = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MessageQueueID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MessageQueueIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MessageQueueID = @"MessageQueueID";
			public static readonly string UserID = @"UserID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MessageQueueID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_MessageQueue class.
	/// </summary>
	[DataContract]
	public partial class RU_MessageQueueCollection : ActiveList<RU_MessageQueue, RU_MessageQueueCollection>
	{
		public static RU_MessageQueueCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_MessageQueueCollection result = new RU_MessageQueueCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_MessageQueue item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_MessageQueues table.
	/// </summary>
	[DataContract]
	public partial class RU_MessageQueue : ActiveRecord<RU_MessageQueue>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_MessageQueue()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_MessageQueues", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMessageQueueID = new TableSchema.TableColumn(schema);
				colvarMessageQueueID.ColumnName = "MessageQueueID";
				colvarMessageQueueID.DataType = DbType.Int32;
				colvarMessageQueueID.MaxLength = 0;
				colvarMessageQueueID.AutoIncrement = true;
				colvarMessageQueueID.IsNullable = false;
				colvarMessageQueueID.IsPrimaryKey = true;
				colvarMessageQueueID.IsForeignKey = false;
				colvarMessageQueueID.IsReadOnly = false;
				colvarMessageQueueID.DefaultSetting = @"";
				colvarMessageQueueID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessageQueueID);

				TableSchema.TableColumn colvarSubject = new TableSchema.TableColumn(schema);
				colvarSubject.ColumnName = "Subject";
				colvarSubject.DataType = DbType.String;
				colvarSubject.MaxLength = 100;
				colvarSubject.AutoIncrement = false;
				colvarSubject.IsNullable = true;
				colvarSubject.IsPrimaryKey = false;
				colvarSubject.IsForeignKey = false;
				colvarSubject.IsReadOnly = false;
				colvarSubject.DefaultSetting = @"";
				colvarSubject.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubject);

				TableSchema.TableColumn colvarBody = new TableSchema.TableColumn(schema);
				colvarBody.ColumnName = "Body";
				colvarBody.DataType = DbType.String;
				colvarBody.MaxLength = -1;
				colvarBody.AutoIncrement = false;
				colvarBody.IsNullable = false;
				colvarBody.IsPrimaryKey = false;
				colvarBody.IsForeignKey = false;
				colvarBody.IsReadOnly = false;
				colvarBody.DefaultSetting = @"";
				colvarBody.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBody);

				TableSchema.TableColumn colvarIsHtml = new TableSchema.TableColumn(schema);
				colvarIsHtml.ColumnName = "IsHtml";
				colvarIsHtml.DataType = DbType.Boolean;
				colvarIsHtml.MaxLength = 0;
				colvarIsHtml.AutoIncrement = false;
				colvarIsHtml.IsNullable = false;
				colvarIsHtml.IsPrimaryKey = false;
				colvarIsHtml.IsForeignKey = false;
				colvarIsHtml.IsReadOnly = false;
				colvarIsHtml.DefaultSetting = @"";
				colvarIsHtml.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsHtml);

				TableSchema.TableColumn colvarIsTextMessage = new TableSchema.TableColumn(schema);
				colvarIsTextMessage.ColumnName = "IsTextMessage";
				colvarIsTextMessage.DataType = DbType.Boolean;
				colvarIsTextMessage.MaxLength = 0;
				colvarIsTextMessage.AutoIncrement = false;
				colvarIsTextMessage.IsNullable = false;
				colvarIsTextMessage.IsPrimaryKey = false;
				colvarIsTextMessage.IsForeignKey = false;
				colvarIsTextMessage.IsReadOnly = false;
				colvarIsTextMessage.DefaultSetting = @"";
				colvarIsTextMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTextMessage);

				TableSchema.TableColumn colvarSentDate = new TableSchema.TableColumn(schema);
				colvarSentDate.ColumnName = "SentDate";
				colvarSentDate.DataType = DbType.DateTime;
				colvarSentDate.MaxLength = 0;
				colvarSentDate.AutoIncrement = false;
				colvarSentDate.IsNullable = true;
				colvarSentDate.IsPrimaryKey = false;
				colvarSentDate.IsForeignKey = false;
				colvarSentDate.IsReadOnly = false;
				colvarSentDate.DefaultSetting = @"";
				colvarSentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSentDate);

				TableSchema.TableColumn colvarSentByID = new TableSchema.TableColumn(schema);
				colvarSentByID.ColumnName = "SentByID";
				colvarSentByID.DataType = DbType.Int32;
				colvarSentByID.MaxLength = 0;
				colvarSentByID.AutoIncrement = false;
				colvarSentByID.IsNullable = false;
				colvarSentByID.IsPrimaryKey = false;
				colvarSentByID.IsForeignKey = true;
				colvarSentByID.IsReadOnly = false;
				colvarSentByID.DefaultSetting = @"";
				colvarSentByID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarSentByID);

				TableSchema.TableColumn colvarIsReady = new TableSchema.TableColumn(schema);
				colvarIsReady.ColumnName = "IsReady";
				colvarIsReady.DataType = DbType.Boolean;
				colvarIsReady.MaxLength = 0;
				colvarIsReady.AutoIncrement = false;
				colvarIsReady.IsNullable = false;
				colvarIsReady.IsPrimaryKey = false;
				colvarIsReady.IsForeignKey = false;
				colvarIsReady.IsReadOnly = false;
				colvarIsReady.DefaultSetting = @"";
				colvarIsReady.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsReady);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_MessageQueues",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_MessageQueue LoadFrom(RU_MessageQueue item)
		{
			RU_MessageQueue result = new RU_MessageQueue();
			if (item.MessageQueueID != default(int)) {
				result.LoadByKey(item.MessageQueueID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MessageQueueID {
			get { return GetColumnValue<int>(Columns.MessageQueueID); }
			set {
				SetColumnValue(Columns.MessageQueueID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MessageQueueID));
			}
		}
		[DataMember]
		public string Subject {
			get { return GetColumnValue<string>(Columns.Subject); }
			set {
				SetColumnValue(Columns.Subject, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Subject));
			}
		}
		[DataMember]
		public string Body {
			get { return GetColumnValue<string>(Columns.Body); }
			set {
				SetColumnValue(Columns.Body, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Body));
			}
		}
		[DataMember]
		public bool IsHtml {
			get { return GetColumnValue<bool>(Columns.IsHtml); }
			set {
				SetColumnValue(Columns.IsHtml, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsHtml));
			}
		}
		[DataMember]
		public bool IsTextMessage {
			get { return GetColumnValue<bool>(Columns.IsTextMessage); }
			set {
				SetColumnValue(Columns.IsTextMessage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTextMessage));
			}
		}
		[DataMember]
		public DateTime? SentDate {
			get { return GetColumnValue<DateTime?>(Columns.SentDate); }
			set {
				SetColumnValue(Columns.SentDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SentDate));
			}
		}
		[DataMember]
		public int SentByID {
			get { return GetColumnValue<int>(Columns.SentByID); }
			set {
				SetColumnValue(Columns.SentByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SentByID));
			}
		}
		[DataMember]
		public bool IsReady {
			get { return GetColumnValue<bool>(Columns.IsReady); }
			set {
				SetColumnValue(Columns.IsReady, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsReady));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_User _SentBy;
		//Relationship: FK_RU_MessageQueues_CreatedBy
		public RU_User SentBy
		{
			get
			{
				if(_SentBy == null) {
					_SentBy = RU_User.FetchByID(this.SentByID);
				}
				return _SentBy;
			}
			set
			{
				SetColumnValue("SentByID", value.UserID);
				_SentBy = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Subject;
		}

		#region Typed Columns

		public static TableSchema.TableColumn MessageQueueIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SubjectColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BodyColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn IsHtmlColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsTextMessageColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SentDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SentByIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsReadyColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MessageQueueID = @"MessageQueueID";
			public static readonly string Subject = @"Subject";
			public static readonly string Body = @"Body";
			public static readonly string IsHtml = @"IsHtml";
			public static readonly string IsTextMessage = @"IsTextMessage";
			public static readonly string SentDate = @"SentDate";
			public static readonly string SentByID = @"SentByID";
			public static readonly string IsReady = @"IsReady";
			public static readonly string CreatedDate = @"CreatedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MessageQueueID; }
		}
		*/

		#region Foreign Collections

		private RU_MessageQueue_MessageAttachment_MapCollection _RU_MessageQueue_MessageAttachment_MapsCol;
		//Relationship: FK_RU_Attachment_Message_Map_RU_MessageQueues
		public RU_MessageQueue_MessageAttachment_MapCollection RU_MessageQueue_MessageAttachment_MapsCol
		{
			get
			{
				if(_RU_MessageQueue_MessageAttachment_MapsCol == null) {
					_RU_MessageQueue_MessageAttachment_MapsCol = new RU_MessageQueue_MessageAttachment_MapCollection();
					_RU_MessageQueue_MessageAttachment_MapsCol.LoadAndCloseReader(RU_MessageQueue_MessageAttachment_Map.Query()
						.WHERE(RU_MessageQueue_MessageAttachment_Map.Columns.MessageID, MessageQueueID).ExecuteReader());
				}
				return _RU_MessageQueue_MessageAttachment_MapsCol;
			}
		}

		private RU_MessageQueue_User_MapCollection _RU_MessageQueue_User_MapsCol;
		//Relationship: FK_RU_MessageQueueID
		public RU_MessageQueue_User_MapCollection RU_MessageQueue_User_MapsCol
		{
			get
			{
				if(_RU_MessageQueue_User_MapsCol == null) {
					_RU_MessageQueue_User_MapsCol = new RU_MessageQueue_User_MapCollection();
					_RU_MessageQueue_User_MapsCol.LoadAndCloseReader(RU_MessageQueue_User_Map.Query()
						.WHERE(RU_MessageQueue_User_Map.Columns.MessageQueueID, MessageQueueID).ExecuteReader());
				}
				return _RU_MessageQueue_User_MapsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_Migration class.
	/// </summary>
	[DataContract]
	public partial class RU_MigrationCollection : ActiveList<RU_Migration, RU_MigrationCollection>
	{
		public static RU_MigrationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_MigrationCollection result = new RU_MigrationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_Migration item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_Migrations table.
	/// </summary>
	[DataContract]
	public partial class RU_Migration : ActiveRecord<RU_Migration>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_Migration()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_Migrations", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarMigrationID = new TableSchema.TableColumn(schema);
				colvarMigrationID.ColumnName = "MigrationID";
				colvarMigrationID.DataType = DbType.Int32;
				colvarMigrationID.MaxLength = 0;
				colvarMigrationID.AutoIncrement = true;
				colvarMigrationID.IsNullable = false;
				colvarMigrationID.IsPrimaryKey = true;
				colvarMigrationID.IsForeignKey = false;
				colvarMigrationID.IsReadOnly = false;
				colvarMigrationID.DefaultSetting = @"";
				colvarMigrationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMigrationID);

				TableSchema.TableColumn colvarFromSeasonID = new TableSchema.TableColumn(schema);
				colvarFromSeasonID.ColumnName = "FromSeasonID";
				colvarFromSeasonID.DataType = DbType.Int32;
				colvarFromSeasonID.MaxLength = 0;
				colvarFromSeasonID.AutoIncrement = false;
				colvarFromSeasonID.IsNullable = false;
				colvarFromSeasonID.IsPrimaryKey = false;
				colvarFromSeasonID.IsForeignKey = true;
				colvarFromSeasonID.IsReadOnly = false;
				colvarFromSeasonID.DefaultSetting = @"";
				colvarFromSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarFromSeasonID);

				TableSchema.TableColumn colvarToSeasonID = new TableSchema.TableColumn(schema);
				colvarToSeasonID.ColumnName = "ToSeasonID";
				colvarToSeasonID.DataType = DbType.Int32;
				colvarToSeasonID.MaxLength = 0;
				colvarToSeasonID.AutoIncrement = false;
				colvarToSeasonID.IsNullable = false;
				colvarToSeasonID.IsPrimaryKey = false;
				colvarToSeasonID.IsForeignKey = true;
				colvarToSeasonID.IsReadOnly = false;
				colvarToSeasonID.DefaultSetting = @"";
				colvarToSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarToSeasonID);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_Migrations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_Migration LoadFrom(RU_Migration item)
		{
			RU_Migration result = new RU_Migration();
			if (item.MigrationID != default(int)) {
				result.LoadByKey(item.MigrationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int MigrationID {
			get { return GetColumnValue<int>(Columns.MigrationID); }
			set {
				SetColumnValue(Columns.MigrationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MigrationID));
			}
		}
		[DataMember]
		public int FromSeasonID {
			get { return GetColumnValue<int>(Columns.FromSeasonID); }
			set {
				SetColumnValue(Columns.FromSeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FromSeasonID));
			}
		}
		[DataMember]
		public int ToSeasonID {
			get { return GetColumnValue<int>(Columns.ToSeasonID); }
			set {
				SetColumnValue(Columns.ToSeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ToSeasonID));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _FromSeason;
		//Relationship: FK_RU_Migrations_RU_Season_FromSeason
		public RU_Season FromSeason
		{
			get
			{
				if(_FromSeason == null) {
					_FromSeason = RU_Season.FetchByID(this.FromSeasonID);
				}
				return _FromSeason;
			}
			set
			{
				SetColumnValue("FromSeasonID", value.SeasonID);
				_FromSeason = value;
			}
		}

		private RU_Season _ToSeason;
		//Relationship: FK_RU_Migrations_RU_Season_ToSeason
		public RU_Season ToSeason
		{
			get
			{
				if(_ToSeason == null) {
					_ToSeason = RU_Season.FetchByID(this.ToSeasonID);
				}
				return _ToSeason;
			}
			set
			{
				SetColumnValue("ToSeasonID", value.SeasonID);
				_ToSeason = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return MigrationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn MigrationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn FromSeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ToSeasonIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string MigrationID = @"MigrationID";
			public static readonly string FromSeasonID = @"FromSeasonID";
			public static readonly string ToSeasonID = @"ToSeasonID";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return MigrationID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_Payscale class.
	/// </summary>
	[DataContract]
	public partial class RU_PayscaleCollection : ActiveList<RU_Payscale, RU_PayscaleCollection>
	{
		public static RU_PayscaleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_PayscaleCollection result = new RU_PayscaleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_Payscale item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_Payscales table.
	/// </summary>
	[DataContract]
	public partial class RU_Payscale : ActiveRecord<RU_Payscale>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum PayscaleEnum : int
		{
			[EnumMember()] Dealer_Pay = 1,
			[EnumMember()] Independent_Contractor_Pay = 2,
		}

		//[DataMember]
		//public PayscaleEnum PayscaleCode
		//{
		//	get { return (PayscaleEnum)PayscaleID; }
		//	set { PayscaleID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_Payscale()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_Payscales", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPayscaleID = new TableSchema.TableColumn(schema);
				colvarPayscaleID.ColumnName = "PayscaleID";
				colvarPayscaleID.DataType = DbType.Int32;
				colvarPayscaleID.MaxLength = 0;
				colvarPayscaleID.AutoIncrement = true;
				colvarPayscaleID.IsNullable = false;
				colvarPayscaleID.IsPrimaryKey = true;
				colvarPayscaleID.IsForeignKey = false;
				colvarPayscaleID.IsReadOnly = false;
				colvarPayscaleID.DefaultSetting = @"";
				colvarPayscaleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayscaleID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 60;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = true;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarBeginPoints = new TableSchema.TableColumn(schema);
				colvarBeginPoints.ColumnName = "BeginPoints";
				colvarBeginPoints.DataType = DbType.Int32;
				colvarBeginPoints.MaxLength = 0;
				colvarBeginPoints.AutoIncrement = false;
				colvarBeginPoints.IsNullable = false;
				colvarBeginPoints.IsPrimaryKey = false;
				colvarBeginPoints.IsForeignKey = false;
				colvarBeginPoints.IsReadOnly = false;
				colvarBeginPoints.DefaultSetting = @"((0))";
				colvarBeginPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBeginPoints);

				TableSchema.TableColumn colvarLeadTechWeeklyCellPhoneCredit = new TableSchema.TableColumn(schema);
				colvarLeadTechWeeklyCellPhoneCredit.ColumnName = "LeadTechWeeklyCellPhoneCredit";
				colvarLeadTechWeeklyCellPhoneCredit.DataType = DbType.Currency;
				colvarLeadTechWeeklyCellPhoneCredit.MaxLength = 0;
				colvarLeadTechWeeklyCellPhoneCredit.AutoIncrement = false;
				colvarLeadTechWeeklyCellPhoneCredit.IsNullable = true;
				colvarLeadTechWeeklyCellPhoneCredit.IsPrimaryKey = false;
				colvarLeadTechWeeklyCellPhoneCredit.IsForeignKey = false;
				colvarLeadTechWeeklyCellPhoneCredit.IsReadOnly = false;
				colvarLeadTechWeeklyCellPhoneCredit.DefaultSetting = @"";
				colvarLeadTechWeeklyCellPhoneCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadTechWeeklyCellPhoneCredit);

				TableSchema.TableColumn colvarLeadTechWeeklyGasCredit = new TableSchema.TableColumn(schema);
				colvarLeadTechWeeklyGasCredit.ColumnName = "LeadTechWeeklyGasCredit";
				colvarLeadTechWeeklyGasCredit.DataType = DbType.Currency;
				colvarLeadTechWeeklyGasCredit.MaxLength = 0;
				colvarLeadTechWeeklyGasCredit.AutoIncrement = false;
				colvarLeadTechWeeklyGasCredit.IsNullable = true;
				colvarLeadTechWeeklyGasCredit.IsPrimaryKey = false;
				colvarLeadTechWeeklyGasCredit.IsForeignKey = false;
				colvarLeadTechWeeklyGasCredit.IsReadOnly = false;
				colvarLeadTechWeeklyGasCredit.DefaultSetting = @"";
				colvarLeadTechWeeklyGasCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLeadTechWeeklyGasCredit);

				TableSchema.TableColumn colvarTechWeeklyCellPhoneCredit = new TableSchema.TableColumn(schema);
				colvarTechWeeklyCellPhoneCredit.ColumnName = "TechWeeklyCellPhoneCredit";
				colvarTechWeeklyCellPhoneCredit.DataType = DbType.Currency;
				colvarTechWeeklyCellPhoneCredit.MaxLength = 0;
				colvarTechWeeklyCellPhoneCredit.AutoIncrement = false;
				colvarTechWeeklyCellPhoneCredit.IsNullable = true;
				colvarTechWeeklyCellPhoneCredit.IsPrimaryKey = false;
				colvarTechWeeklyCellPhoneCredit.IsForeignKey = false;
				colvarTechWeeklyCellPhoneCredit.IsReadOnly = false;
				colvarTechWeeklyCellPhoneCredit.DefaultSetting = @"";
				colvarTechWeeklyCellPhoneCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechWeeklyCellPhoneCredit);

				TableSchema.TableColumn colvarTechWeeklyGasCredit = new TableSchema.TableColumn(schema);
				colvarTechWeeklyGasCredit.ColumnName = "TechWeeklyGasCredit";
				colvarTechWeeklyGasCredit.DataType = DbType.Currency;
				colvarTechWeeklyGasCredit.MaxLength = 0;
				colvarTechWeeklyGasCredit.AutoIncrement = false;
				colvarTechWeeklyGasCredit.IsNullable = true;
				colvarTechWeeklyGasCredit.IsPrimaryKey = false;
				colvarTechWeeklyGasCredit.IsForeignKey = false;
				colvarTechWeeklyGasCredit.IsReadOnly = false;
				colvarTechWeeklyGasCredit.DefaultSetting = @"";
				colvarTechWeeklyGasCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechWeeklyGasCredit);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_Payscales",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_Payscale LoadFrom(RU_Payscale item)
		{
			RU_Payscale result = new RU_Payscale();
			if (item.PayscaleID != default(int)) {
				result.LoadByKey(item.PayscaleID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PayscaleID {
			get { return GetColumnValue<int>(Columns.PayscaleID); }
			set {
				SetColumnValue(Columns.PayscaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayscaleID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public int BeginPoints {
			get { return GetColumnValue<int>(Columns.BeginPoints); }
			set {
				SetColumnValue(Columns.BeginPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BeginPoints));
			}
		}
		[DataMember]
		public decimal? LeadTechWeeklyCellPhoneCredit {
			get { return GetColumnValue<decimal?>(Columns.LeadTechWeeklyCellPhoneCredit); }
			set {
				SetColumnValue(Columns.LeadTechWeeklyCellPhoneCredit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadTechWeeklyCellPhoneCredit));
			}
		}
		[DataMember]
		public decimal? LeadTechWeeklyGasCredit {
			get { return GetColumnValue<decimal?>(Columns.LeadTechWeeklyGasCredit); }
			set {
				SetColumnValue(Columns.LeadTechWeeklyGasCredit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LeadTechWeeklyGasCredit));
			}
		}
		[DataMember]
		public decimal? TechWeeklyCellPhoneCredit {
			get { return GetColumnValue<decimal?>(Columns.TechWeeklyCellPhoneCredit); }
			set {
				SetColumnValue(Columns.TechWeeklyCellPhoneCredit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechWeeklyCellPhoneCredit));
			}
		}
		[DataMember]
		public decimal? TechWeeklyGasCredit {
			get { return GetColumnValue<decimal?>(Columns.TechWeeklyGasCredit); }
			set {
				SetColumnValue(Columns.TechWeeklyGasCredit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechWeeklyGasCredit));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PayscaleIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn BeginPointsColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn LeadTechWeeklyCellPhoneCreditColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LeadTechWeeklyGasCreditColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TechWeeklyCellPhoneCreditColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TechWeeklyGasCreditColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PayscaleID = @"PayscaleID";
			public static readonly string Name = @"Name";
			public static readonly string BeginPoints = @"BeginPoints";
			public static readonly string LeadTechWeeklyCellPhoneCredit = @"LeadTechWeeklyCellPhoneCredit";
			public static readonly string LeadTechWeeklyGasCredit = @"LeadTechWeeklyGasCredit";
			public static readonly string TechWeeklyCellPhoneCredit = @"TechWeeklyCellPhoneCredit";
			public static readonly string TechWeeklyGasCredit = @"TechWeeklyGasCredit";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PayscaleID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendPayscaleCollection _PR_BackendPayscalesCol;
		//Relationship: FK_PR_BackendAccountRates_RU_Payscales
		public PR_BackendPayscaleCollection PR_BackendPayscalesCol
		{
			get
			{
				if(_PR_BackendPayscalesCol == null) {
					_PR_BackendPayscalesCol = new PR_BackendPayscaleCollection();
					_PR_BackendPayscalesCol.LoadAndCloseReader(PR_BackendPayscale.Query()
						.WHERE(PR_BackendPayscale.Columns.PayscaleID, PayscaleID).ExecuteReader());
				}
				return _PR_BackendPayscalesCol;
			}
		}

		private PR_BackendManagerPayScheduleCollection _PR_BackendManagerPaySchedulesCol;
		//Relationship: FK_PR_BackendManagerPaySchedules_RU_Payscales
		public PR_BackendManagerPayScheduleCollection PR_BackendManagerPaySchedulesCol
		{
			get
			{
				if(_PR_BackendManagerPaySchedulesCol == null) {
					_PR_BackendManagerPaySchedulesCol = new PR_BackendManagerPayScheduleCollection();
					_PR_BackendManagerPaySchedulesCol.LoadAndCloseReader(PR_BackendManagerPaySchedule.Query()
						.WHERE(PR_BackendManagerPaySchedule.Columns.PayScaleID, PayscaleID).ExecuteReader());
				}
				return _PR_BackendManagerPaySchedulesCol;
			}
		}

		private PR_BackendPayScheduleCollection _PR_BackendPaySchedulesCol;
		//Relationship: FK_PR_BackendPaySchedules_RU_Payscales
		public PR_BackendPayScheduleCollection PR_BackendPaySchedulesCol
		{
			get
			{
				if(_PR_BackendPaySchedulesCol == null) {
					_PR_BackendPaySchedulesCol = new PR_BackendPayScheduleCollection();
					_PR_BackendPaySchedulesCol.LoadAndCloseReader(PR_BackendPaySchedule.Query()
						.WHERE(PR_BackendPaySchedule.Columns.PayScaleID, PayscaleID).ExecuteReader());
				}
				return _PR_BackendPaySchedulesCol;
			}
		}

		private PR_BackendCollection _PR_BackendsCol;
		//Relationship: FK_PR_Backends_RU_Payscales
		public PR_BackendCollection PR_BackendsCol
		{
			get
			{
				if(_PR_BackendsCol == null) {
					_PR_BackendsCol = new PR_BackendCollection();
					_PR_BackendsCol.LoadAndCloseReader(PR_Backend.Query()
						.WHERE(PR_Backend.Columns.PayscaleID, PayscaleID).ExecuteReader());
				}
				return _PR_BackendsCol;
			}
		}

		private PR_BackendCollection _PR_Backends02Col;
		//Relationship: FK_PR_Backends_RU_Payscales1
		public PR_BackendCollection PR_Backends02Col
		{
			get
			{
				if(_PR_Backends02Col == null) {
					_PR_Backends02Col = new PR_BackendCollection();
					_PR_Backends02Col.LoadAndCloseReader(PR_Backend.Query()
						.WHERE(PR_Backend.Columns.AlternatePayscaleID, PayscaleID).ExecuteReader());
				}
				return _PR_Backends02Col;
			}
		}

		private PR_LeadTechBackendCollection _PR_LeadTechBackendsCol;
		//Relationship: FK_PR_LeadTechBackends_RU_Payscales
		public PR_LeadTechBackendCollection PR_LeadTechBackendsCol
		{
			get
			{
				if(_PR_LeadTechBackendsCol == null) {
					_PR_LeadTechBackendsCol = new PR_LeadTechBackendCollection();
					_PR_LeadTechBackendsCol.LoadAndCloseReader(PR_LeadTechBackend.Query()
						.WHERE(PR_LeadTechBackend.Columns.PayScaleID, PayscaleID).ExecuteReader());
				}
				return _PR_LeadTechBackendsCol;
			}
		}

		private PR_SalesManagerBackendCollection _PR_SalesManagerBackendsCol;
		//Relationship: FK_PR_SalesManagerBackends_RU_Payscales
		public PR_SalesManagerBackendCollection PR_SalesManagerBackendsCol
		{
			get
			{
				if(_PR_SalesManagerBackendsCol == null) {
					_PR_SalesManagerBackendsCol = new PR_SalesManagerBackendCollection();
					_PR_SalesManagerBackendsCol.LoadAndCloseReader(PR_SalesManagerBackend.Query()
						.WHERE(PR_SalesManagerBackend.Columns.PayScaleID, PayscaleID).ExecuteReader());
				}
				return _PR_SalesManagerBackendsCol;
			}
		}

		private PR_SalesManagerBackendCollection _PR_SalesManagerBackends02Col;
		//Relationship: FK_PR_SalesManagerBackends_RU_Payscales1
		public PR_SalesManagerBackendCollection PR_SalesManagerBackends02Col
		{
			get
			{
				if(_PR_SalesManagerBackends02Col == null) {
					_PR_SalesManagerBackends02Col = new PR_SalesManagerBackendCollection();
					_PR_SalesManagerBackends02Col.LoadAndCloseReader(PR_SalesManagerBackend.Query()
						.WHERE(PR_SalesManagerBackend.Columns.PersonalPayScaleID, PayscaleID).ExecuteReader());
				}
				return _PR_SalesManagerBackends02Col;
			}
		}

		private PR_SalesRegionalBackendCollection _PR_SalesRegionalBackendsCol;
		//Relationship: FK_PR_SalesRegionalBackends_RU_Payscales
		public PR_SalesRegionalBackendCollection PR_SalesRegionalBackendsCol
		{
			get
			{
				if(_PR_SalesRegionalBackendsCol == null) {
					_PR_SalesRegionalBackendsCol = new PR_SalesRegionalBackendCollection();
					_PR_SalesRegionalBackendsCol.LoadAndCloseReader(PR_SalesRegionalBackend.Query()
						.WHERE(PR_SalesRegionalBackend.Columns.PayScaleID, PayscaleID).ExecuteReader());
				}
				return _PR_SalesRegionalBackendsCol;
			}
		}

		private PR_SalesRepBackendCollection _PR_SalesRepBackendsCol;
		//Relationship: FK_PR_SalesRepBackends_RU_Payscales
		public PR_SalesRepBackendCollection PR_SalesRepBackendsCol
		{
			get
			{
				if(_PR_SalesRepBackendsCol == null) {
					_PR_SalesRepBackendsCol = new PR_SalesRepBackendCollection();
					_PR_SalesRepBackendsCol.LoadAndCloseReader(PR_SalesRepBackend.Query()
						.WHERE(PR_SalesRepBackend.Columns.PayScaleID, PayscaleID).ExecuteReader());
				}
				return _PR_SalesRepBackendsCol;
			}
		}

		private PR_SigningBonusAmountCollection _PR_SigningBonusAmountsCol;
		//Relationship: FK_PR_SigningBonusAmounts_RU_Payscales
		public PR_SigningBonusAmountCollection PR_SigningBonusAmountsCol
		{
			get
			{
				if(_PR_SigningBonusAmountsCol == null) {
					_PR_SigningBonusAmountsCol = new PR_SigningBonusAmountCollection();
					_PR_SigningBonusAmountsCol.LoadAndCloseReader(PR_SigningBonusAmount.Query()
						.WHERE(PR_SigningBonusAmount.Columns.PayscaleID, PayscaleID).ExecuteReader());
				}
				return _PR_SigningBonusAmountsCol;
			}
		}

		private PR_TechBackendCollection _PR_TechBackendsCol;
		//Relationship: FK_PR_TechBackends_RU_Payscales
		public PR_TechBackendCollection PR_TechBackendsCol
		{
			get
			{
				if(_PR_TechBackendsCol == null) {
					_PR_TechBackendsCol = new PR_TechBackendCollection();
					_PR_TechBackendsCol.LoadAndCloseReader(PR_TechBackend.Query()
						.WHERE(PR_TechBackend.Columns.PayScaleID, PayscaleID).ExecuteReader());
				}
				return _PR_TechBackendsCol;
			}
		}

		private PR_WeeklyTransactionCollection _PR_WeeklyTransactionsCol;
		//Relationship: FK_PR_WeeklyTransactions_RU_Payscales
		public PR_WeeklyTransactionCollection PR_WeeklyTransactionsCol
		{
			get
			{
				if(_PR_WeeklyTransactionsCol == null) {
					_PR_WeeklyTransactionsCol = new PR_WeeklyTransactionCollection();
					_PR_WeeklyTransactionsCol.LoadAndCloseReader(PR_WeeklyTransaction.Query()
						.WHERE(PR_WeeklyTransaction.Columns.PayscaleID, PayscaleID).ExecuteReader());
				}
				return _PR_WeeklyTransactionsCol;
			}
		}

		private RU_RecruitCollection _RU_RecruitsCol;
		//Relationship: FK_RU_Recruits_RU_Payscales
		public RU_RecruitCollection RU_RecruitsCol
		{
			get
			{
				if(_RU_RecruitsCol == null) {
					_RU_RecruitsCol = new RU_RecruitCollection();
					_RU_RecruitsCol.LoadAndCloseReader(RU_Recruit.Query()
						.WHERE(RU_Recruit.Columns.PayScaleId, PayscaleID).ExecuteReader());
				}
				return _RU_RecruitsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_PhoneCellCarrier class.
	/// </summary>
	[DataContract]
	public partial class RU_PhoneCellCarrierCollection : ActiveList<RU_PhoneCellCarrier, RU_PhoneCellCarrierCollection>
	{
		public static RU_PhoneCellCarrierCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_PhoneCellCarrierCollection result = new RU_PhoneCellCarrierCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_PhoneCellCarrier item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_PhoneCellCarrier table.
	/// </summary>
	[DataContract]
	public partial class RU_PhoneCellCarrier : ActiveRecord<RU_PhoneCellCarrier>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_PhoneCellCarrier()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_PhoneCellCarrier", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPhoneCellCarrierID = new TableSchema.TableColumn(schema);
				colvarPhoneCellCarrierID.ColumnName = "PhoneCellCarrierID";
				colvarPhoneCellCarrierID.DataType = DbType.Int16;
				colvarPhoneCellCarrierID.MaxLength = 0;
				colvarPhoneCellCarrierID.AutoIncrement = false;
				colvarPhoneCellCarrierID.IsNullable = false;
				colvarPhoneCellCarrierID.IsPrimaryKey = true;
				colvarPhoneCellCarrierID.IsForeignKey = false;
				colvarPhoneCellCarrierID.IsReadOnly = false;
				colvarPhoneCellCarrierID.DefaultSetting = @"";
				colvarPhoneCellCarrierID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneCellCarrierID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 20;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarCarrierDomain = new TableSchema.TableColumn(schema);
				colvarCarrierDomain.ColumnName = "CarrierDomain";
				colvarCarrierDomain.DataType = DbType.String;
				colvarCarrierDomain.MaxLength = 50;
				colvarCarrierDomain.AutoIncrement = false;
				colvarCarrierDomain.IsNullable = false;
				colvarCarrierDomain.IsPrimaryKey = false;
				colvarCarrierDomain.IsForeignKey = false;
				colvarCarrierDomain.IsReadOnly = false;
				colvarCarrierDomain.DefaultSetting = @"";
				colvarCarrierDomain.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCarrierDomain);

				TableSchema.TableColumn colvarMaxBodyLength = new TableSchema.TableColumn(schema);
				colvarMaxBodyLength.ColumnName = "MaxBodyLength";
				colvarMaxBodyLength.DataType = DbType.Int32;
				colvarMaxBodyLength.MaxLength = 0;
				colvarMaxBodyLength.AutoIncrement = false;
				colvarMaxBodyLength.IsNullable = false;
				colvarMaxBodyLength.IsPrimaryKey = false;
				colvarMaxBodyLength.IsForeignKey = false;
				colvarMaxBodyLength.IsReadOnly = false;
				colvarMaxBodyLength.DefaultSetting = @"";
				colvarMaxBodyLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxBodyLength);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.Int32;
				colvarCreatedByID.MaxLength = 0;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"((1))";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.Int32;
				colvarModifiedByID.MaxLength = 0;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = false;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"((1))";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_PhoneCellCarrier",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_PhoneCellCarrier LoadFrom(RU_PhoneCellCarrier item)
		{
			RU_PhoneCellCarrier result = new RU_PhoneCellCarrier();
			if (item.PhoneCellCarrierID != default(short)) {
				result.LoadByKey(item.PhoneCellCarrierID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public short PhoneCellCarrierID {
			get { return GetColumnValue<short>(Columns.PhoneCellCarrierID); }
			set {
				SetColumnValue(Columns.PhoneCellCarrierID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneCellCarrierID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public string CarrierDomain {
			get { return GetColumnValue<string>(Columns.CarrierDomain); }
			set {
				SetColumnValue(Columns.CarrierDomain, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CarrierDomain));
			}
		}
		[DataMember]
		public int MaxBodyLength {
			get { return GetColumnValue<int>(Columns.MaxBodyLength); }
			set {
				SetColumnValue(Columns.MaxBodyLength, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaxBodyLength));
			}
		}
		[DataMember]
		public int CreatedByID {
			get { return GetColumnValue<int>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public int ModifiedByID {
			get { return GetColumnValue<int>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PhoneCellCarrierIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CarrierDomainColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MaxBodyLengthColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PhoneCellCarrierID = @"PhoneCellCarrierID";
			public static readonly string Description = @"Description";
			public static readonly string CarrierDomain = @"CarrierDomain";
			public static readonly string MaxBodyLength = @"MaxBodyLength";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PhoneCellCarrierID; }
		}
		*/

		#region Foreign Collections

		private RU_RecruitRegistrationCollection _RU_RecruitRegistrationsCol;
		//Relationship: FK_RU_RecruitRegistration_RU_PhoneCellCarrier
		public RU_RecruitRegistrationCollection RU_RecruitRegistrationsCol
		{
			get
			{
				if(_RU_RecruitRegistrationsCol == null) {
					_RU_RecruitRegistrationsCol = new RU_RecruitRegistrationCollection();
					_RU_RecruitRegistrationsCol.LoadAndCloseReader(RU_RecruitRegistration.Query()
						.WHERE(RU_RecruitRegistration.Columns.PhoneCellCarrierID, PhoneCellCarrierID).ExecuteReader());
				}
				return _RU_RecruitRegistrationsCol;
			}
		}

		private RU_UserCollection _RU_UsersCol;
		//Relationship: FK_RU_Users_RU_PhoneCellCarrier
		public RU_UserCollection RU_UsersCol
		{
			get
			{
				if(_RU_UsersCol == null) {
					_RU_UsersCol = new RU_UserCollection();
					_RU_UsersCol.LoadAndCloseReader(RU_User.Query()
						.WHERE(RU_User.Columns.PhoneCellCarrierID, PhoneCellCarrierID).ExecuteReader());
				}
				return _RU_UsersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_PhoneType class.
	/// </summary>
	[DataContract]
	public partial class RU_PhoneTypeCollection : ActiveList<RU_PhoneType, RU_PhoneTypeCollection>
	{
		public static RU_PhoneTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_PhoneTypeCollection result = new RU_PhoneTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_PhoneType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_PhoneType table.
	/// </summary>
	[DataContract]
	public partial class RU_PhoneType : ActiveRecord<RU_PhoneType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum PhoneTypeEnum : short
		{
			[EnumMember()] Office = 1,
			[EnumMember()] Home = 2,
			[EnumMember()] Mobile = 3,
			[EnumMember()] Relative = 4,
			[EnumMember()] Parents = 5,
		}

		//[DataMember]
		//public PhoneTypeEnum PhoneTypeCode
		//{
		//	get { return (PhoneTypeEnum)PhoneTypeID; }
		//	set { PhoneTypeID = (short)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_PhoneType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_PhoneType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPhoneTypeID = new TableSchema.TableColumn(schema);
				colvarPhoneTypeID.ColumnName = "PhoneTypeID";
				colvarPhoneTypeID.DataType = DbType.Int16;
				colvarPhoneTypeID.MaxLength = 0;
				colvarPhoneTypeID.AutoIncrement = true;
				colvarPhoneTypeID.IsNullable = false;
				colvarPhoneTypeID.IsPrimaryKey = true;
				colvarPhoneTypeID.IsForeignKey = false;
				colvarPhoneTypeID.IsReadOnly = false;
				colvarPhoneTypeID.DefaultSetting = @"";
				colvarPhoneTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.Int32;
				colvarCreatedByID.MaxLength = 0;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"((1))";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.Int32;
				colvarModifiedByID.MaxLength = 0;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = false;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"((1))";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_PhoneType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_PhoneType LoadFrom(RU_PhoneType item)
		{
			RU_PhoneType result = new RU_PhoneType();
			if (item.PhoneTypeID != default(short)) {
				result.LoadByKey(item.PhoneTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public short PhoneTypeID {
			get { return GetColumnValue<short>(Columns.PhoneTypeID); }
			set {
				SetColumnValue(Columns.PhoneTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public int CreatedByID {
			get { return GetColumnValue<int>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public int ModifiedByID {
			get { return GetColumnValue<int>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PhoneTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PhoneTypeID = @"PhoneTypeID";
			public static readonly string Description = @"Description";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PhoneTypeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_PriorCompany class.
	/// </summary>
	[DataContract]
	public partial class RU_PriorCompanyCollection : ActiveList<RU_PriorCompany, RU_PriorCompanyCollection>
	{
		public static RU_PriorCompanyCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_PriorCompanyCollection result = new RU_PriorCompanyCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_PriorCompany item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_PriorCompanies table.
	/// </summary>
	[DataContract]
	public partial class RU_PriorCompany : ActiveRecord<RU_PriorCompany>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_PriorCompany()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_PriorCompanies", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPriorCompanyID = new TableSchema.TableColumn(schema);
				colvarPriorCompanyID.ColumnName = "PriorCompanyID";
				colvarPriorCompanyID.DataType = DbType.Int32;
				colvarPriorCompanyID.MaxLength = 0;
				colvarPriorCompanyID.AutoIncrement = false;
				colvarPriorCompanyID.IsNullable = false;
				colvarPriorCompanyID.IsPrimaryKey = true;
				colvarPriorCompanyID.IsForeignKey = false;
				colvarPriorCompanyID.IsReadOnly = false;
				colvarPriorCompanyID.DefaultSetting = @"";
				colvarPriorCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriorCompanyID);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 100;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_PriorCompanies",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_PriorCompany LoadFrom(RU_PriorCompany item)
		{
			RU_PriorCompany result = new RU_PriorCompany();
			if (item.PriorCompanyID != default(int)) {
				result.LoadByKey(item.PriorCompanyID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PriorCompanyID {
			get { return GetColumnValue<int>(Columns.PriorCompanyID); }
			set {
				SetColumnValue(Columns.PriorCompanyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PriorCompanyID));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Name;
		}

		#region Typed Columns

		public static TableSchema.TableColumn PriorCompanyIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PriorCompanyID = @"PriorCompanyID";
			public static readonly string Name = @"Name";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PriorCompanyID; }
		}
		*/

		#region Foreign Collections

		private RU_PriorCompanySaleCollection _RU_PriorCompanySalesCol;
		//Relationship: FK_RU_PriorCompanySales_RU_PriorCompanies
		public RU_PriorCompanySaleCollection RU_PriorCompanySalesCol
		{
			get
			{
				if(_RU_PriorCompanySalesCol == null) {
					_RU_PriorCompanySalesCol = new RU_PriorCompanySaleCollection();
					_RU_PriorCompanySalesCol.LoadAndCloseReader(RU_PriorCompanySale.Query()
						.WHERE(RU_PriorCompanySale.Columns.PriorCompanyID, PriorCompanyID).ExecuteReader());
				}
				return _RU_PriorCompanySalesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_PriorCompanySale class.
	/// </summary>
	[DataContract]
	public partial class RU_PriorCompanySaleCollection : ActiveList<RU_PriorCompanySale, RU_PriorCompanySaleCollection>
	{
		public static RU_PriorCompanySaleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_PriorCompanySaleCollection result = new RU_PriorCompanySaleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_PriorCompanySale item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_PriorCompanySales table.
	/// </summary>
	[DataContract]
	public partial class RU_PriorCompanySale : ActiveRecord<RU_PriorCompanySale>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_PriorCompanySale()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_PriorCompanySales", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPriorCompanySaleID = new TableSchema.TableColumn(schema);
				colvarPriorCompanySaleID.ColumnName = "PriorCompanySaleID";
				colvarPriorCompanySaleID.DataType = DbType.Int32;
				colvarPriorCompanySaleID.MaxLength = 0;
				colvarPriorCompanySaleID.AutoIncrement = true;
				colvarPriorCompanySaleID.IsNullable = false;
				colvarPriorCompanySaleID.IsPrimaryKey = true;
				colvarPriorCompanySaleID.IsForeignKey = false;
				colvarPriorCompanySaleID.IsReadOnly = false;
				colvarPriorCompanySaleID.DefaultSetting = @"";
				colvarPriorCompanySaleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriorCompanySaleID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarPriorCompanyID = new TableSchema.TableColumn(schema);
				colvarPriorCompanyID.ColumnName = "PriorCompanyID";
				colvarPriorCompanyID.DataType = DbType.Int32;
				colvarPriorCompanyID.MaxLength = 0;
				colvarPriorCompanyID.AutoIncrement = false;
				colvarPriorCompanyID.IsNullable = false;
				colvarPriorCompanyID.IsPrimaryKey = false;
				colvarPriorCompanyID.IsForeignKey = true;
				colvarPriorCompanyID.IsReadOnly = false;
				colvarPriorCompanyID.DefaultSetting = @"";
				colvarPriorCompanyID.ForeignKeyTableName = "RU_PriorCompanies";
				schema.Columns.Add(colvarPriorCompanyID);

				TableSchema.TableColumn colvarYear = new TableSchema.TableColumn(schema);
				colvarYear.ColumnName = "Year";
				colvarYear.DataType = DbType.Int32;
				colvarYear.MaxLength = 0;
				colvarYear.AutoIncrement = false;
				colvarYear.IsNullable = false;
				colvarYear.IsPrimaryKey = false;
				colvarYear.IsForeignKey = false;
				colvarYear.IsReadOnly = false;
				colvarYear.DefaultSetting = @"";
				colvarYear.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYear);

				TableSchema.TableColumn colvarTotalSales = new TableSchema.TableColumn(schema);
				colvarTotalSales.ColumnName = "TotalSales";
				colvarTotalSales.DataType = DbType.Int32;
				colvarTotalSales.MaxLength = 0;
				colvarTotalSales.AutoIncrement = false;
				colvarTotalSales.IsNullable = true;
				colvarTotalSales.IsPrimaryKey = false;
				colvarTotalSales.IsForeignKey = false;
				colvarTotalSales.IsReadOnly = false;
				colvarTotalSales.DefaultSetting = @"";
				colvarTotalSales.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalSales);

				TableSchema.TableColumn colvarIsCoManager = new TableSchema.TableColumn(schema);
				colvarIsCoManager.ColumnName = "IsCoManager";
				colvarIsCoManager.DataType = DbType.Boolean;
				colvarIsCoManager.MaxLength = 0;
				colvarIsCoManager.AutoIncrement = false;
				colvarIsCoManager.IsNullable = true;
				colvarIsCoManager.IsPrimaryKey = false;
				colvarIsCoManager.IsForeignKey = false;
				colvarIsCoManager.IsReadOnly = false;
				colvarIsCoManager.DefaultSetting = @"";
				colvarIsCoManager.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCoManager);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_PriorCompanySales",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_PriorCompanySale LoadFrom(RU_PriorCompanySale item)
		{
			RU_PriorCompanySale result = new RU_PriorCompanySale();
			if (item.PriorCompanySaleID != default(int)) {
				result.LoadByKey(item.PriorCompanySaleID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int PriorCompanySaleID {
			get { return GetColumnValue<int>(Columns.PriorCompanySaleID); }
			set {
				SetColumnValue(Columns.PriorCompanySaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PriorCompanySaleID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public int PriorCompanyID {
			get { return GetColumnValue<int>(Columns.PriorCompanyID); }
			set {
				SetColumnValue(Columns.PriorCompanyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PriorCompanyID));
			}
		}
		[DataMember]
		public int Year {
			get { return GetColumnValue<int>(Columns.Year); }
			set {
				SetColumnValue(Columns.Year, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Year));
			}
		}
		[DataMember]
		public int? TotalSales {
			get { return GetColumnValue<int?>(Columns.TotalSales); }
			set {
				SetColumnValue(Columns.TotalSales, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalSales));
			}
		}
		[DataMember]
		public bool? IsCoManager {
			get { return GetColumnValue<bool?>(Columns.IsCoManager); }
			set {
				SetColumnValue(Columns.IsCoManager, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCoManager));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_PriorCompany _PriorCompany;
		//Relationship: FK_RU_PriorCompanySales_RU_PriorCompanies
		public RU_PriorCompany PriorCompany
		{
			get
			{
				if(_PriorCompany == null) {
					_PriorCompany = RU_PriorCompany.FetchByID(this.PriorCompanyID);
				}
				return _PriorCompany;
			}
			set
			{
				SetColumnValue("PriorCompanyID", value.PriorCompanyID);
				_PriorCompany = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PriorCompanySaleID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PriorCompanySaleIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PriorCompanyIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn YearColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TotalSalesColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IsCoManagerColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PriorCompanySaleID = @"PriorCompanySaleID";
			public static readonly string UserID = @"UserID";
			public static readonly string PriorCompanyID = @"PriorCompanyID";
			public static readonly string Year = @"Year";
			public static readonly string TotalSales = @"TotalSales";
			public static readonly string IsCoManager = @"IsCoManager";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PriorCompanySaleID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_RecruitAddress class.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitAddressCollection : ActiveList<RU_RecruitAddress, RU_RecruitAddressCollection>
	{
		public static RU_RecruitAddressCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_RecruitAddressCollection result = new RU_RecruitAddressCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_RecruitAddress item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_RecruitAddresses table.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitAddress : ActiveRecord<RU_RecruitAddress>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_RecruitAddress()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_RecruitAddresses", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAddressId = new TableSchema.TableColumn(schema);
				colvarAddressId.ColumnName = "AddressId";
				colvarAddressId.DataType = DbType.Int32;
				colvarAddressId.MaxLength = 0;
				colvarAddressId.AutoIncrement = true;
				colvarAddressId.IsNullable = false;
				colvarAddressId.IsPrimaryKey = true;
				colvarAddressId.IsForeignKey = false;
				colvarAddressId.IsReadOnly = false;
				colvarAddressId.DefaultSetting = @"";
				colvarAddressId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressId);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = true;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "MC_PoliticalStates";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = false;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = true;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"";
				colvarCountryId.ForeignKeyTableName = "MC_PoliticalCountrys";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarTimeZoneId = new TableSchema.TableColumn(schema);
				colvarTimeZoneId.ColumnName = "TimeZoneId";
				colvarTimeZoneId.DataType = DbType.Int32;
				colvarTimeZoneId.MaxLength = 0;
				colvarTimeZoneId.AutoIncrement = false;
				colvarTimeZoneId.IsNullable = true;
				colvarTimeZoneId.IsPrimaryKey = false;
				colvarTimeZoneId.IsForeignKey = false;
				colvarTimeZoneId.IsReadOnly = false;
				colvarTimeZoneId.DefaultSetting = @"";
				colvarTimeZoneId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneId);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = false;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.String;
				colvarPostalCode.MaxLength = 10;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = false;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarPlusFour = new TableSchema.TableColumn(schema);
				colvarPlusFour.ColumnName = "PlusFour";
				colvarPlusFour.DataType = DbType.String;
				colvarPlusFour.MaxLength = 4;
				colvarPlusFour.AutoIncrement = false;
				colvarPlusFour.IsNullable = true;
				colvarPlusFour.IsPrimaryKey = false;
				colvarPlusFour.IsForeignKey = false;
				colvarPlusFour.IsReadOnly = false;
				colvarPlusFour.DefaultSetting = @"";
				colvarPlusFour.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPlusFour);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.Int32;
				colvarCreatedByID.MaxLength = 0;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"((1))";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.Int32;
				colvarModifiedByID.MaxLength = 0;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = false;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"((1))";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_RecruitAddresses",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_RecruitAddress LoadFrom(RU_RecruitAddress item)
		{
			RU_RecruitAddress result = new RU_RecruitAddress();
			if (item.AddressId != default(int)) {
				result.LoadByKey(item.AddressId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AddressId {
			get { return GetColumnValue<int>(Columns.AddressId); }
			set {
				SetColumnValue(Columns.AddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressId));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set {
				SetColumnValue(Columns.CountryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryId));
			}
		}
		[DataMember]
		public int? TimeZoneId {
			get { return GetColumnValue<int?>(Columns.TimeZoneId); }
			set {
				SetColumnValue(Columns.TimeZoneId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneId));
			}
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set {
				SetColumnValue(Columns.StreetAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress));
			}
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set {
				SetColumnValue(Columns.StreetAddress2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress2));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set {
				SetColumnValue(Columns.PostalCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostalCode));
			}
		}
		[DataMember]
		public string PlusFour {
			get { return GetColumnValue<string>(Columns.PlusFour); }
			set {
				SetColumnValue(Columns.PlusFour, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PlusFour));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public int CreatedByID {
			get { return GetColumnValue<int>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public int ModifiedByID {
			get { return GetColumnValue<int>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_PoliticalCountry _Country;
		//Relationship: FK_RU_RecruitAddresses_MC_PoliticalCountrys
		public MC_PoliticalCountry Country
		{
			get
			{
				if(_Country == null) {
					_Country = MC_PoliticalCountry.FetchByID(this.CountryId);
				}
				return _Country;
			}
			set
			{
				SetColumnValue("CountryId", value.CountryID);
				_Country = value;
			}
		}

		private MC_PoliticalState _State;
		//Relationship: FK_RU_RecruitAddresses_MC_PoliticalStates
		public MC_PoliticalState State
		{
			get
			{
				if(_State == null) {
					_State = MC_PoliticalState.FetchByID(this.StateId);
				}
				return _State;
			}
			set
			{
				SetColumnValue("StateId", value.StateID);
				_State = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return StateId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AddressIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TimeZoneIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PlusFourColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[14]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AddressId = @"AddressId";
			public static readonly string StateId = @"StateId";
			public static readonly string CountryId = @"CountryId";
			public static readonly string TimeZoneId = @"TimeZoneId";
			public static readonly string StreetAddress = @"StreetAddress";
			public static readonly string StreetAddress2 = @"StreetAddress2";
			public static readonly string City = @"City";
			public static readonly string PostalCode = @"PostalCode";
			public static readonly string PlusFour = @"PlusFour";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AddressId; }
		}
		*/

		#region Foreign Collections

		private RU_RecruitRegistrationCollection _RU_RecruitRegistrationsCol;
		//Relationship: FK_RU_RecruitRegistration_RU_RecruitCurrentAddress
		public RU_RecruitRegistrationCollection RU_RecruitRegistrationsCol
		{
			get
			{
				if(_RU_RecruitRegistrationsCol == null) {
					_RU_RecruitRegistrationsCol = new RU_RecruitRegistrationCollection();
					_RU_RecruitRegistrationsCol.LoadAndCloseReader(RU_RecruitRegistration.Query()
						.WHERE(RU_RecruitRegistration.Columns.CurrentAddressID, AddressId).ExecuteReader());
				}
				return _RU_RecruitRegistrationsCol;
			}
		}

		private RU_RecruitRegistrationCollection _RU_RecruitRegistrations02Col;
		//Relationship: FK_RU_RecruitRegistration_RU_RecruitPermanentAddresses
		public RU_RecruitRegistrationCollection RU_RecruitRegistrations02Col
		{
			get
			{
				if(_RU_RecruitRegistrations02Col == null) {
					_RU_RecruitRegistrations02Col = new RU_RecruitRegistrationCollection();
					_RU_RecruitRegistrations02Col.LoadAndCloseReader(RU_RecruitRegistration.Query()
						.WHERE(RU_RecruitRegistration.Columns.PermanentAddressID, AddressId).ExecuteReader());
				}
				return _RU_RecruitRegistrations02Col;
			}
		}

		private RU_RecruitCollection _RU_RecruitsCol;
		//Relationship: FK_RU_Recruits_RU_RecruitAddresses
		public RU_RecruitCollection RU_RecruitsCol
		{
			get
			{
				if(_RU_RecruitsCol == null) {
					_RU_RecruitsCol = new RU_RecruitCollection();
					_RU_RecruitsCol.LoadAndCloseReader(RU_Recruit.Query()
						.WHERE(RU_Recruit.Columns.CurrentAddressId, AddressId).ExecuteReader());
				}
				return _RU_RecruitsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_RecruitCohabbitType class.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitCohabbitTypeCollection : ActiveList<RU_RecruitCohabbitType, RU_RecruitCohabbitTypeCollection>
	{
		public static RU_RecruitCohabbitTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_RecruitCohabbitTypeCollection result = new RU_RecruitCohabbitTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_RecruitCohabbitType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_RecruitCohabbitTypes table.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitCohabbitType : ActiveRecord<RU_RecruitCohabbitType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum RecruitCohabbitTypeEnum : int
		{
			[EnumMember()] Single = 1,
			[EnumMember()] Cohabbit = 2,
			[EnumMember()] Off_Site = 3,
		}

		//[DataMember]
		//public RecruitCohabbitTypeEnum RecruitCohabbitTypeCode
		//{
		//	get { return (RecruitCohabbitTypeEnum)RecruitCohabbitTypeId; }
		//	set { RecruitCohabbitTypeId = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_RecruitCohabbitType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_RecruitCohabbitTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRecruitCohabbitTypeId = new TableSchema.TableColumn(schema);
				colvarRecruitCohabbitTypeId.ColumnName = "RecruitCohabbitTypeId";
				colvarRecruitCohabbitTypeId.DataType = DbType.Int32;
				colvarRecruitCohabbitTypeId.MaxLength = 0;
				colvarRecruitCohabbitTypeId.AutoIncrement = false;
				colvarRecruitCohabbitTypeId.IsNullable = false;
				colvarRecruitCohabbitTypeId.IsPrimaryKey = true;
				colvarRecruitCohabbitTypeId.IsForeignKey = false;
				colvarRecruitCohabbitTypeId.IsReadOnly = false;
				colvarRecruitCohabbitTypeId.DefaultSetting = @"";
				colvarRecruitCohabbitTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitCohabbitTypeId);

				TableSchema.TableColumn colvarRecruitCohabbitType = new TableSchema.TableColumn(schema);
				colvarRecruitCohabbitType.ColumnName = "RecruitCohabbitType";
				colvarRecruitCohabbitType.DataType = DbType.String;
				colvarRecruitCohabbitType.MaxLength = 50;
				colvarRecruitCohabbitType.AutoIncrement = false;
				colvarRecruitCohabbitType.IsNullable = false;
				colvarRecruitCohabbitType.IsPrimaryKey = false;
				colvarRecruitCohabbitType.IsForeignKey = false;
				colvarRecruitCohabbitType.IsReadOnly = false;
				colvarRecruitCohabbitType.DefaultSetting = @"";
				colvarRecruitCohabbitType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitCohabbitType);

				TableSchema.TableColumn colvarRent = new TableSchema.TableColumn(schema);
				colvarRent.ColumnName = "Rent";
				colvarRent.DataType = DbType.Currency;
				colvarRent.MaxLength = 0;
				colvarRent.AutoIncrement = false;
				colvarRent.IsNullable = false;
				colvarRent.IsPrimaryKey = false;
				colvarRent.IsForeignKey = false;
				colvarRent.IsReadOnly = false;
				colvarRent.DefaultSetting = @"((0))";
				colvarRent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRent);

				TableSchema.TableColumn colvarPet = new TableSchema.TableColumn(schema);
				colvarPet.ColumnName = "Pet";
				colvarPet.DataType = DbType.Currency;
				colvarPet.MaxLength = 0;
				colvarPet.AutoIncrement = false;
				colvarPet.IsNullable = false;
				colvarPet.IsPrimaryKey = false;
				colvarPet.IsForeignKey = false;
				colvarPet.IsReadOnly = false;
				colvarPet.DefaultSetting = @"";
				colvarPet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPet);

				TableSchema.TableColumn colvarUtilities = new TableSchema.TableColumn(schema);
				colvarUtilities.ColumnName = "Utilities";
				colvarUtilities.DataType = DbType.Currency;
				colvarUtilities.MaxLength = 0;
				colvarUtilities.AutoIncrement = false;
				colvarUtilities.IsNullable = false;
				colvarUtilities.IsPrimaryKey = false;
				colvarUtilities.IsForeignKey = false;
				colvarUtilities.IsReadOnly = false;
				colvarUtilities.DefaultSetting = @"";
				colvarUtilities.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUtilities);

				TableSchema.TableColumn colvarGasDeduction = new TableSchema.TableColumn(schema);
				colvarGasDeduction.ColumnName = "GasDeduction";
				colvarGasDeduction.DataType = DbType.Currency;
				colvarGasDeduction.MaxLength = 0;
				colvarGasDeduction.AutoIncrement = false;
				colvarGasDeduction.IsNullable = false;
				colvarGasDeduction.IsPrimaryKey = false;
				colvarGasDeduction.IsForeignKey = false;
				colvarGasDeduction.IsReadOnly = false;
				colvarGasDeduction.DefaultSetting = @"";
				colvarGasDeduction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGasDeduction);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_RecruitCohabbitTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_RecruitCohabbitType LoadFrom(RU_RecruitCohabbitType item)
		{
			RU_RecruitCohabbitType result = new RU_RecruitCohabbitType();
			if (item.RecruitCohabbitTypeId != default(int)) {
				result.LoadByKey(item.RecruitCohabbitTypeId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RecruitCohabbitTypeId {
			get { return GetColumnValue<int>(Columns.RecruitCohabbitTypeId); }
			set {
				SetColumnValue(Columns.RecruitCohabbitTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitCohabbitTypeId));
			}
		}
		[DataMember]
		public string RecruitCohabbitType {
			get { return GetColumnValue<string>(Columns.RecruitCohabbitType); }
			set {
				SetColumnValue(Columns.RecruitCohabbitType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitCohabbitType));
			}
		}
		[DataMember]
		public decimal Rent {
			get { return GetColumnValue<decimal>(Columns.Rent); }
			set {
				SetColumnValue(Columns.Rent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Rent));
			}
		}
		[DataMember]
		public decimal Pet {
			get { return GetColumnValue<decimal>(Columns.Pet); }
			set {
				SetColumnValue(Columns.Pet, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Pet));
			}
		}
		[DataMember]
		public decimal Utilities {
			get { return GetColumnValue<decimal>(Columns.Utilities); }
			set {
				SetColumnValue(Columns.Utilities, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Utilities));
			}
		}
		[DataMember]
		public decimal GasDeduction {
			get { return GetColumnValue<decimal>(Columns.GasDeduction); }
			set {
				SetColumnValue(Columns.GasDeduction, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GasDeduction));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return RecruitCohabbitType;
		}

		#region Typed Columns

		public static TableSchema.TableColumn RecruitCohabbitTypeIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RecruitCohabbitTypeColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RentColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PetColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn UtilitiesColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn GasDeductionColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RecruitCohabbitTypeId = @"RecruitCohabbitTypeId";
			public static readonly string RecruitCohabbitType = @"RecruitCohabbitType";
			public static readonly string Rent = @"Rent";
			public static readonly string Pet = @"Pet";
			public static readonly string Utilities = @"Utilities";
			public static readonly string GasDeduction = @"GasDeduction";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RecruitCohabbitTypeId; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_RecruitGoal class.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitGoalCollection : ActiveList<RU_RecruitGoal, RU_RecruitGoalCollection>
	{
		public static RU_RecruitGoalCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_RecruitGoalCollection result = new RU_RecruitGoalCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_RecruitGoal item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_RecruitGoals table.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitGoal : ActiveRecord<RU_RecruitGoal>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_RecruitGoal()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_RecruitGoals", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = true;
				colvarRecruitID.IsForeignKey = false;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarNetInstalls = new TableSchema.TableColumn(schema);
				colvarNetInstalls.ColumnName = "NetInstalls";
				colvarNetInstalls.DataType = DbType.Int32;
				colvarNetInstalls.MaxLength = 0;
				colvarNetInstalls.AutoIncrement = false;
				colvarNetInstalls.IsNullable = false;
				colvarNetInstalls.IsPrimaryKey = false;
				colvarNetInstalls.IsForeignKey = false;
				colvarNetInstalls.IsReadOnly = false;
				colvarNetInstalls.DefaultSetting = @"";
				colvarNetInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetInstalls);

				TableSchema.TableColumn colvarActionPlan = new TableSchema.TableColumn(schema);
				colvarActionPlan.ColumnName = "ActionPlan";
				colvarActionPlan.DataType = DbType.String;
				colvarActionPlan.MaxLength = 1024;
				colvarActionPlan.AutoIncrement = false;
				colvarActionPlan.IsNullable = true;
				colvarActionPlan.IsPrimaryKey = false;
				colvarActionPlan.IsForeignKey = false;
				colvarActionPlan.IsReadOnly = false;
				colvarActionPlan.DefaultSetting = @"";
				colvarActionPlan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActionPlan);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Int32;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Int32;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_RecruitGoals",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_RecruitGoal LoadFrom(RU_RecruitGoal item)
		{
			RU_RecruitGoal result = new RU_RecruitGoal();
			if (item.RecruitID != default(int)) {
				result.LoadByKey(item.RecruitID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public int NetInstalls {
			get { return GetColumnValue<int>(Columns.NetInstalls); }
			set {
				SetColumnValue(Columns.NetInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetInstalls));
			}
		}
		[DataMember]
		public string ActionPlan {
			get { return GetColumnValue<string>(Columns.ActionPlan); }
			set {
				SetColumnValue(Columns.ActionPlan, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActionPlan));
			}
		}
		[DataMember]
		public int CreatedBy {
			get { return GetColumnValue<int>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public int ModifiedBy {
			get { return GetColumnValue<int>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return RecruitID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NetInstallsColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ActionPlanColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string NetInstalls = @"NetInstalls";
			public static readonly string ActionPlan = @"ActionPlan";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RecruitID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_RecruitPolicyAndProcedure class.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitPolicyAndProcedureCollection : ActiveList<RU_RecruitPolicyAndProcedure, RU_RecruitPolicyAndProcedureCollection>
	{
		public static RU_RecruitPolicyAndProcedureCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_RecruitPolicyAndProcedureCollection result = new RU_RecruitPolicyAndProcedureCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_RecruitPolicyAndProcedure item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_RecruitPolicyAndProcedures table.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitPolicyAndProcedure : ActiveRecord<RU_RecruitPolicyAndProcedure>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_RecruitPolicyAndProcedure()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_RecruitPolicyAndProcedures", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarPolicyProcID = new TableSchema.TableColumn(schema);
				colvarPolicyProcID.ColumnName = "PolicyProcID";
				colvarPolicyProcID.DataType = DbType.Int64;
				colvarPolicyProcID.MaxLength = 0;
				colvarPolicyProcID.AutoIncrement = true;
				colvarPolicyProcID.IsNullable = false;
				colvarPolicyProcID.IsPrimaryKey = true;
				colvarPolicyProcID.IsForeignKey = false;
				colvarPolicyProcID.IsReadOnly = false;
				colvarPolicyProcID.DefaultSetting = @"";
				colvarPolicyProcID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPolicyProcID);

				TableSchema.TableColumn colvarRecruitId = new TableSchema.TableColumn(schema);
				colvarRecruitId.ColumnName = "RecruitId";
				colvarRecruitId.DataType = DbType.Int32;
				colvarRecruitId.MaxLength = 0;
				colvarRecruitId.AutoIncrement = false;
				colvarRecruitId.IsNullable = false;
				colvarRecruitId.IsPrimaryKey = false;
				colvarRecruitId.IsForeignKey = true;
				colvarRecruitId.IsReadOnly = false;
				colvarRecruitId.DefaultSetting = @"";
				colvarRecruitId.ForeignKeyTableName = "RU_Recruits";
				schema.Columns.Add(colvarRecruitId);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedById = new TableSchema.TableColumn(schema);
				colvarCreatedById.ColumnName = "CreatedById";
				colvarCreatedById.DataType = DbType.String;
				colvarCreatedById.MaxLength = 50;
				colvarCreatedById.AutoIncrement = false;
				colvarCreatedById.IsNullable = false;
				colvarCreatedById.IsPrimaryKey = false;
				colvarCreatedById.IsForeignKey = false;
				colvarCreatedById.IsReadOnly = false;
				colvarCreatedById.DefaultSetting = @"";
				colvarCreatedById.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedById);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_RecruitPolicyAndProcedures",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_RecruitPolicyAndProcedure LoadFrom(RU_RecruitPolicyAndProcedure item)
		{
			RU_RecruitPolicyAndProcedure result = new RU_RecruitPolicyAndProcedure();
			if (item.PolicyProcID != default(long)) {
				result.LoadByKey(item.PolicyProcID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long PolicyProcID {
			get { return GetColumnValue<long>(Columns.PolicyProcID); }
			set {
				SetColumnValue(Columns.PolicyProcID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PolicyProcID));
			}
		}
		[DataMember]
		public int RecruitId {
			get { return GetColumnValue<int>(Columns.RecruitId); }
			set {
				SetColumnValue(Columns.RecruitId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitId));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedById {
			get { return GetColumnValue<string>(Columns.CreatedById); }
			set {
				SetColumnValue(Columns.CreatedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedById));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Recruit _Recruit;
		//Relationship: FK_RU_RecruitPolicyAndProcedures_RU_Recruits
		public RU_Recruit Recruit
		{
			get
			{
				if(_Recruit == null) {
					_Recruit = RU_Recruit.FetchByID(this.RecruitId);
				}
				return _Recruit;
			}
			set
			{
				SetColumnValue("RecruitId", value.RecruitID);
				_Recruit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return PolicyProcID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn PolicyProcIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RecruitIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByIdColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string PolicyProcID = @"PolicyProcID";
			public static readonly string RecruitId = @"RecruitId";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedById = @"CreatedById";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return PolicyProcID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_RecruitRegistration class.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitRegistrationCollection : ActiveList<RU_RecruitRegistration, RU_RecruitRegistrationCollection>
	{
		public static RU_RecruitRegistrationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_RecruitRegistrationCollection result = new RU_RecruitRegistrationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_RecruitRegistration item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_RecruitRegistration table.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitRegistration : ActiveRecord<RU_RecruitRegistration>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_RecruitRegistration()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_RecruitRegistration", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRecruitRegistrationID = new TableSchema.TableColumn(schema);
				colvarRecruitRegistrationID.ColumnName = "RecruitRegistrationID";
				colvarRecruitRegistrationID.DataType = DbType.Int32;
				colvarRecruitRegistrationID.MaxLength = 0;
				colvarRecruitRegistrationID.AutoIncrement = true;
				colvarRecruitRegistrationID.IsNullable = false;
				colvarRecruitRegistrationID.IsPrimaryKey = true;
				colvarRecruitRegistrationID.IsForeignKey = false;
				colvarRecruitRegistrationID.IsReadOnly = false;
				colvarRecruitRegistrationID.DefaultSetting = @"";
				colvarRecruitRegistrationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitRegistrationID);

				TableSchema.TableColumn colvarUniqueRegistrationID = new TableSchema.TableColumn(schema);
				colvarUniqueRegistrationID.ColumnName = "UniqueRegistrationID";
				colvarUniqueRegistrationID.DataType = DbType.Guid;
				colvarUniqueRegistrationID.MaxLength = 0;
				colvarUniqueRegistrationID.AutoIncrement = false;
				colvarUniqueRegistrationID.IsNullable = true;
				colvarUniqueRegistrationID.IsPrimaryKey = false;
				colvarUniqueRegistrationID.IsForeignKey = false;
				colvarUniqueRegistrationID.IsReadOnly = false;
				colvarUniqueRegistrationID.DefaultSetting = @"";
				colvarUniqueRegistrationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUniqueRegistrationID);

				TableSchema.TableColumn colvarInvitedByID = new TableSchema.TableColumn(schema);
				colvarInvitedByID.ColumnName = "InvitedByID";
				colvarInvitedByID.DataType = DbType.Int32;
				colvarInvitedByID.MaxLength = 0;
				colvarInvitedByID.AutoIncrement = false;
				colvarInvitedByID.IsNullable = true;
				colvarInvitedByID.IsPrimaryKey = false;
				colvarInvitedByID.IsForeignKey = false;
				colvarInvitedByID.IsReadOnly = false;
				colvarInvitedByID.DefaultSetting = @"";
				colvarInvitedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInvitedByID);

				TableSchema.TableColumn colvarExistingUserID = new TableSchema.TableColumn(schema);
				colvarExistingUserID.ColumnName = "ExistingUserID";
				colvarExistingUserID.DataType = DbType.Int32;
				colvarExistingUserID.MaxLength = 0;
				colvarExistingUserID.AutoIncrement = false;
				colvarExistingUserID.IsNullable = true;
				colvarExistingUserID.IsPrimaryKey = false;
				colvarExistingUserID.IsForeignKey = false;
				colvarExistingUserID.IsReadOnly = false;
				colvarExistingUserID.DefaultSetting = @"";
				colvarExistingUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExistingUserID);

				TableSchema.TableColumn colvarRegistrationDate = new TableSchema.TableColumn(schema);
				colvarRegistrationDate.ColumnName = "RegistrationDate";
				colvarRegistrationDate.DataType = DbType.DateTime;
				colvarRegistrationDate.MaxLength = 0;
				colvarRegistrationDate.AutoIncrement = false;
				colvarRegistrationDate.IsNullable = true;
				colvarRegistrationDate.IsPrimaryKey = false;
				colvarRegistrationDate.IsForeignKey = false;
				colvarRegistrationDate.IsReadOnly = false;
				colvarRegistrationDate.DefaultSetting = @"";
				colvarRegistrationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegistrationDate);

				TableSchema.TableColumn colvarRecruitedByID = new TableSchema.TableColumn(schema);
				colvarRecruitedByID.ColumnName = "RecruitedByID";
				colvarRecruitedByID.DataType = DbType.Int32;
				colvarRecruitedByID.MaxLength = 0;
				colvarRecruitedByID.AutoIncrement = false;
				colvarRecruitedByID.IsNullable = true;
				colvarRecruitedByID.IsPrimaryKey = false;
				colvarRecruitedByID.IsForeignKey = false;
				colvarRecruitedByID.IsReadOnly = false;
				colvarRecruitedByID.DefaultSetting = @"";
				colvarRecruitedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitedByID);

				TableSchema.TableColumn colvarPermanentAddressID = new TableSchema.TableColumn(schema);
				colvarPermanentAddressID.ColumnName = "PermanentAddressID";
				colvarPermanentAddressID.DataType = DbType.Int32;
				colvarPermanentAddressID.MaxLength = 0;
				colvarPermanentAddressID.AutoIncrement = false;
				colvarPermanentAddressID.IsNullable = true;
				colvarPermanentAddressID.IsPrimaryKey = false;
				colvarPermanentAddressID.IsForeignKey = true;
				colvarPermanentAddressID.IsReadOnly = false;
				colvarPermanentAddressID.DefaultSetting = @"";
				colvarPermanentAddressID.ForeignKeyTableName = "RU_RecruitAddresses";
				schema.Columns.Add(colvarPermanentAddressID);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.String;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPreferredName = new TableSchema.TableColumn(schema);
				colvarPreferredName.ColumnName = "PreferredName";
				colvarPreferredName.DataType = DbType.String;
				colvarPreferredName.MaxLength = 50;
				colvarPreferredName.AutoIncrement = false;
				colvarPreferredName.IsNullable = true;
				colvarPreferredName.IsPrimaryKey = false;
				colvarPreferredName.IsForeignKey = false;
				colvarPreferredName.IsReadOnly = false;
				colvarPreferredName.DefaultSetting = @"";
				colvarPreferredName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreferredName);

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 101;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = true;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = true;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
				colvarUserName.ColumnName = "UserName";
				colvarUserName.DataType = DbType.String;
				colvarUserName.MaxLength = 50;
				colvarUserName.AutoIncrement = false;
				colvarUserName.IsNullable = true;
				colvarUserName.IsPrimaryKey = false;
				colvarUserName.IsForeignKey = false;
				colvarUserName.IsReadOnly = false;
				colvarUserName.DefaultSetting = @"";
				colvarUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserName);

				TableSchema.TableColumn colvarBirthDate = new TableSchema.TableColumn(schema);
				colvarBirthDate.ColumnName = "BirthDate";
				colvarBirthDate.DataType = DbType.DateTime;
				colvarBirthDate.MaxLength = 0;
				colvarBirthDate.AutoIncrement = false;
				colvarBirthDate.IsNullable = true;
				colvarBirthDate.IsPrimaryKey = false;
				colvarBirthDate.IsForeignKey = false;
				colvarBirthDate.IsReadOnly = false;
				colvarBirthDate.DefaultSetting = @"";
				colvarBirthDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthDate);

				TableSchema.TableColumn colvarBirthCity = new TableSchema.TableColumn(schema);
				colvarBirthCity.ColumnName = "BirthCity";
				colvarBirthCity.DataType = DbType.String;
				colvarBirthCity.MaxLength = 50;
				colvarBirthCity.AutoIncrement = false;
				colvarBirthCity.IsNullable = true;
				colvarBirthCity.IsPrimaryKey = false;
				colvarBirthCity.IsForeignKey = false;
				colvarBirthCity.IsReadOnly = false;
				colvarBirthCity.DefaultSetting = @"";
				colvarBirthCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthCity);

				TableSchema.TableColumn colvarBirthState = new TableSchema.TableColumn(schema);
				colvarBirthState.ColumnName = "BirthState";
				colvarBirthState.DataType = DbType.String;
				colvarBirthState.MaxLength = 50;
				colvarBirthState.AutoIncrement = false;
				colvarBirthState.IsNullable = true;
				colvarBirthState.IsPrimaryKey = false;
				colvarBirthState.IsForeignKey = false;
				colvarBirthState.IsReadOnly = false;
				colvarBirthState.DefaultSetting = @"";
				colvarBirthState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthState);

				TableSchema.TableColumn colvarBirthCountry = new TableSchema.TableColumn(schema);
				colvarBirthCountry.ColumnName = "BirthCountry";
				colvarBirthCountry.DataType = DbType.String;
				colvarBirthCountry.MaxLength = 50;
				colvarBirthCountry.AutoIncrement = false;
				colvarBirthCountry.IsNullable = true;
				colvarBirthCountry.IsPrimaryKey = false;
				colvarBirthCountry.IsForeignKey = false;
				colvarBirthCountry.IsReadOnly = false;
				colvarBirthCountry.DefaultSetting = @"";
				colvarBirthCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthCountry);

				TableSchema.TableColumn colvarSex = new TableSchema.TableColumn(schema);
				colvarSex.ColumnName = "Sex";
				colvarSex.DataType = DbType.Byte;
				colvarSex.MaxLength = 0;
				colvarSex.AutoIncrement = false;
				colvarSex.IsNullable = true;
				colvarSex.IsPrimaryKey = false;
				colvarSex.IsForeignKey = false;
				colvarSex.IsReadOnly = false;
				colvarSex.DefaultSetting = @"";
				colvarSex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSex);

				TableSchema.TableColumn colvarShirtSize = new TableSchema.TableColumn(schema);
				colvarShirtSize.ColumnName = "ShirtSize";
				colvarShirtSize.DataType = DbType.Byte;
				colvarShirtSize.MaxLength = 0;
				colvarShirtSize.AutoIncrement = false;
				colvarShirtSize.IsNullable = true;
				colvarShirtSize.IsPrimaryKey = false;
				colvarShirtSize.IsForeignKey = false;
				colvarShirtSize.IsReadOnly = false;
				colvarShirtSize.DefaultSetting = @"";
				colvarShirtSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShirtSize);

				TableSchema.TableColumn colvarHatSize = new TableSchema.TableColumn(schema);
				colvarHatSize.ColumnName = "HatSize";
				colvarHatSize.DataType = DbType.Byte;
				colvarHatSize.MaxLength = 0;
				colvarHatSize.AutoIncrement = false;
				colvarHatSize.IsNullable = true;
				colvarHatSize.IsPrimaryKey = false;
				colvarHatSize.IsForeignKey = false;
				colvarHatSize.IsReadOnly = false;
				colvarHatSize.DefaultSetting = @"";
				colvarHatSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHatSize);

				TableSchema.TableColumn colvarDLNumber = new TableSchema.TableColumn(schema);
				colvarDLNumber.ColumnName = "DLNumber";
				colvarDLNumber.DataType = DbType.String;
				colvarDLNumber.MaxLength = 50;
				colvarDLNumber.AutoIncrement = false;
				colvarDLNumber.IsNullable = true;
				colvarDLNumber.IsPrimaryKey = false;
				colvarDLNumber.IsForeignKey = false;
				colvarDLNumber.IsReadOnly = false;
				colvarDLNumber.DefaultSetting = @"";
				colvarDLNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLNumber);

				TableSchema.TableColumn colvarDLState = new TableSchema.TableColumn(schema);
				colvarDLState.ColumnName = "DLState";
				colvarDLState.DataType = DbType.String;
				colvarDLState.MaxLength = 50;
				colvarDLState.AutoIncrement = false;
				colvarDLState.IsNullable = true;
				colvarDLState.IsPrimaryKey = false;
				colvarDLState.IsForeignKey = false;
				colvarDLState.IsReadOnly = false;
				colvarDLState.DefaultSetting = @"";
				colvarDLState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLState);

				TableSchema.TableColumn colvarDLCountry = new TableSchema.TableColumn(schema);
				colvarDLCountry.ColumnName = "DLCountry";
				colvarDLCountry.DataType = DbType.String;
				colvarDLCountry.MaxLength = 50;
				colvarDLCountry.AutoIncrement = false;
				colvarDLCountry.IsNullable = true;
				colvarDLCountry.IsPrimaryKey = false;
				colvarDLCountry.IsForeignKey = false;
				colvarDLCountry.IsReadOnly = false;
				colvarDLCountry.DefaultSetting = @"";
				colvarDLCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLCountry);

				TableSchema.TableColumn colvarDLExpiration = new TableSchema.TableColumn(schema);
				colvarDLExpiration.ColumnName = "DLExpiration";
				colvarDLExpiration.DataType = DbType.String;
				colvarDLExpiration.MaxLength = 50;
				colvarDLExpiration.AutoIncrement = false;
				colvarDLExpiration.IsNullable = true;
				colvarDLExpiration.IsPrimaryKey = false;
				colvarDLExpiration.IsForeignKey = false;
				colvarDLExpiration.IsReadOnly = false;
				colvarDLExpiration.DefaultSetting = @"";
				colvarDLExpiration.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLExpiration);

				TableSchema.TableColumn colvarHeight = new TableSchema.TableColumn(schema);
				colvarHeight.ColumnName = "Height";
				colvarHeight.DataType = DbType.String;
				colvarHeight.MaxLength = 10;
				colvarHeight.AutoIncrement = false;
				colvarHeight.IsNullable = true;
				colvarHeight.IsPrimaryKey = false;
				colvarHeight.IsForeignKey = false;
				colvarHeight.IsReadOnly = false;
				colvarHeight.DefaultSetting = @"";
				colvarHeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeight);

				TableSchema.TableColumn colvarWeight = new TableSchema.TableColumn(schema);
				colvarWeight.ColumnName = "Weight";
				colvarWeight.DataType = DbType.String;
				colvarWeight.MaxLength = 10;
				colvarWeight.AutoIncrement = false;
				colvarWeight.IsNullable = true;
				colvarWeight.IsPrimaryKey = false;
				colvarWeight.IsForeignKey = false;
				colvarWeight.IsReadOnly = false;
				colvarWeight.DefaultSetting = @"";
				colvarWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeight);

				TableSchema.TableColumn colvarEyeColor = new TableSchema.TableColumn(schema);
				colvarEyeColor.ColumnName = "EyeColor";
				colvarEyeColor.DataType = DbType.String;
				colvarEyeColor.MaxLength = 20;
				colvarEyeColor.AutoIncrement = false;
				colvarEyeColor.IsNullable = true;
				colvarEyeColor.IsPrimaryKey = false;
				colvarEyeColor.IsForeignKey = false;
				colvarEyeColor.IsReadOnly = false;
				colvarEyeColor.DefaultSetting = @"";
				colvarEyeColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEyeColor);

				TableSchema.TableColumn colvarHairColor = new TableSchema.TableColumn(schema);
				colvarHairColor.ColumnName = "HairColor";
				colvarHairColor.DataType = DbType.String;
				colvarHairColor.MaxLength = 20;
				colvarHairColor.AutoIncrement = false;
				colvarHairColor.IsNullable = true;
				colvarHairColor.IsPrimaryKey = false;
				colvarHairColor.IsForeignKey = false;
				colvarHairColor.IsReadOnly = false;
				colvarHairColor.DefaultSetting = @"";
				colvarHairColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHairColor);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.String;
				colvarPhoneHome.MaxLength = 25;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneCell = new TableSchema.TableColumn(schema);
				colvarPhoneCell.ColumnName = "PhoneCell";
				colvarPhoneCell.DataType = DbType.String;
				colvarPhoneCell.MaxLength = 50;
				colvarPhoneCell.AutoIncrement = false;
				colvarPhoneCell.IsNullable = true;
				colvarPhoneCell.IsPrimaryKey = false;
				colvarPhoneCell.IsForeignKey = false;
				colvarPhoneCell.IsReadOnly = false;
				colvarPhoneCell.DefaultSetting = @"";
				colvarPhoneCell.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneCell);

				TableSchema.TableColumn colvarPhoneCellCarrierID = new TableSchema.TableColumn(schema);
				colvarPhoneCellCarrierID.ColumnName = "PhoneCellCarrierID";
				colvarPhoneCellCarrierID.DataType = DbType.Int16;
				colvarPhoneCellCarrierID.MaxLength = 0;
				colvarPhoneCellCarrierID.AutoIncrement = false;
				colvarPhoneCellCarrierID.IsNullable = true;
				colvarPhoneCellCarrierID.IsPrimaryKey = false;
				colvarPhoneCellCarrierID.IsForeignKey = true;
				colvarPhoneCellCarrierID.IsReadOnly = false;
				colvarPhoneCellCarrierID.DefaultSetting = @"";
				colvarPhoneCellCarrierID.ForeignKeyTableName = "RU_PhoneCellCarrier";
				schema.Columns.Add(colvarPhoneCellCarrierID);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 100;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarUserTypeId = new TableSchema.TableColumn(schema);
				colvarUserTypeId.ColumnName = "UserTypeId";
				colvarUserTypeId.DataType = DbType.Int16;
				colvarUserTypeId.MaxLength = 0;
				colvarUserTypeId.AutoIncrement = false;
				colvarUserTypeId.IsNullable = true;
				colvarUserTypeId.IsPrimaryKey = false;
				colvarUserTypeId.IsForeignKey = false;
				colvarUserTypeId.IsReadOnly = false;
				colvarUserTypeId.DefaultSetting = @"((1))";
				colvarUserTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserTypeId);

				TableSchema.TableColumn colvarReportsToID = new TableSchema.TableColumn(schema);
				colvarReportsToID.ColumnName = "ReportsToID";
				colvarReportsToID.DataType = DbType.Int32;
				colvarReportsToID.MaxLength = 0;
				colvarReportsToID.AutoIncrement = false;
				colvarReportsToID.IsNullable = true;
				colvarReportsToID.IsPrimaryKey = false;
				colvarReportsToID.IsForeignKey = true;
				colvarReportsToID.IsReadOnly = false;
				colvarReportsToID.DefaultSetting = @"";
				colvarReportsToID.ForeignKeyTableName = "RU_Recruits";
				schema.Columns.Add(colvarReportsToID);

				TableSchema.TableColumn colvarCurrentAddressID = new TableSchema.TableColumn(schema);
				colvarCurrentAddressID.ColumnName = "CurrentAddressID";
				colvarCurrentAddressID.DataType = DbType.Int32;
				colvarCurrentAddressID.MaxLength = 0;
				colvarCurrentAddressID.AutoIncrement = false;
				colvarCurrentAddressID.IsNullable = true;
				colvarCurrentAddressID.IsPrimaryKey = false;
				colvarCurrentAddressID.IsForeignKey = true;
				colvarCurrentAddressID.IsReadOnly = false;
				colvarCurrentAddressID.DefaultSetting = @"";
				colvarCurrentAddressID.ForeignKeyTableName = "RU_RecruitAddresses";
				schema.Columns.Add(colvarCurrentAddressID);

				TableSchema.TableColumn colvarPayScaleID = new TableSchema.TableColumn(schema);
				colvarPayScaleID.ColumnName = "PayScaleID";
				colvarPayScaleID.DataType = DbType.Int32;
				colvarPayScaleID.MaxLength = 0;
				colvarPayScaleID.AutoIncrement = false;
				colvarPayScaleID.IsNullable = true;
				colvarPayScaleID.IsPrimaryKey = false;
				colvarPayScaleID.IsForeignKey = false;
				colvarPayScaleID.IsReadOnly = false;
				colvarPayScaleID.DefaultSetting = @"";
				colvarPayScaleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayScaleID);

				TableSchema.TableColumn colvarSchoolId = new TableSchema.TableColumn(schema);
				colvarSchoolId.ColumnName = "SchoolId";
				colvarSchoolId.DataType = DbType.Int16;
				colvarSchoolId.MaxLength = 0;
				colvarSchoolId.AutoIncrement = false;
				colvarSchoolId.IsNullable = true;
				colvarSchoolId.IsPrimaryKey = false;
				colvarSchoolId.IsForeignKey = false;
				colvarSchoolId.IsReadOnly = false;
				colvarSchoolId.DefaultSetting = @"";
				colvarSchoolId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchoolId);

				TableSchema.TableColumn colvarHasPet = new TableSchema.TableColumn(schema);
				colvarHasPet.ColumnName = "HasPet";
				colvarHasPet.DataType = DbType.Boolean;
				colvarHasPet.MaxLength = 0;
				colvarHasPet.AutoIncrement = false;
				colvarHasPet.IsNullable = true;
				colvarHasPet.IsPrimaryKey = false;
				colvarHasPet.IsForeignKey = false;
				colvarHasPet.IsReadOnly = false;
				colvarHasPet.DefaultSetting = @"";
				colvarHasPet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasPet);

				TableSchema.TableColumn colvarNeedsExtraHousing = new TableSchema.TableColumn(schema);
				colvarNeedsExtraHousing.ColumnName = "NeedsExtraHousing";
				colvarNeedsExtraHousing.DataType = DbType.Boolean;
				colvarNeedsExtraHousing.MaxLength = 0;
				colvarNeedsExtraHousing.AutoIncrement = false;
				colvarNeedsExtraHousing.IsNullable = true;
				colvarNeedsExtraHousing.IsPrimaryKey = false;
				colvarNeedsExtraHousing.IsForeignKey = false;
				colvarNeedsExtraHousing.IsReadOnly = false;
				colvarNeedsExtraHousing.DefaultSetting = @"";
				colvarNeedsExtraHousing.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNeedsExtraHousing);

				TableSchema.TableColumn colvarEmergencyName = new TableSchema.TableColumn(schema);
				colvarEmergencyName.ColumnName = "EmergencyName";
				colvarEmergencyName.DataType = DbType.String;
				colvarEmergencyName.MaxLength = 50;
				colvarEmergencyName.AutoIncrement = false;
				colvarEmergencyName.IsNullable = true;
				colvarEmergencyName.IsPrimaryKey = false;
				colvarEmergencyName.IsForeignKey = false;
				colvarEmergencyName.IsReadOnly = false;
				colvarEmergencyName.DefaultSetting = @"";
				colvarEmergencyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyName);

				TableSchema.TableColumn colvarEmergencyPhone = new TableSchema.TableColumn(schema);
				colvarEmergencyPhone.ColumnName = "EmergencyPhone";
				colvarEmergencyPhone.DataType = DbType.AnsiString;
				colvarEmergencyPhone.MaxLength = 20;
				colvarEmergencyPhone.AutoIncrement = false;
				colvarEmergencyPhone.IsNullable = true;
				colvarEmergencyPhone.IsPrimaryKey = false;
				colvarEmergencyPhone.IsForeignKey = false;
				colvarEmergencyPhone.IsReadOnly = false;
				colvarEmergencyPhone.DefaultSetting = @"";
				colvarEmergencyPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyPhone);

				TableSchema.TableColumn colvarEmergencyRelationship = new TableSchema.TableColumn(schema);
				colvarEmergencyRelationship.ColumnName = "EmergencyRelationship";
				colvarEmergencyRelationship.DataType = DbType.String;
				colvarEmergencyRelationship.MaxLength = 50;
				colvarEmergencyRelationship.AutoIncrement = false;
				colvarEmergencyRelationship.IsNullable = true;
				colvarEmergencyRelationship.IsPrimaryKey = false;
				colvarEmergencyRelationship.IsForeignKey = false;
				colvarEmergencyRelationship.IsReadOnly = false;
				colvarEmergencyRelationship.DefaultSetting = @"";
				colvarEmergencyRelationship.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyRelationship);

				TableSchema.TableColumn colvarPreviousSummer = new TableSchema.TableColumn(schema);
				colvarPreviousSummer.ColumnName = "PreviousSummer";
				colvarPreviousSummer.DataType = DbType.String;
				colvarPreviousSummer.MaxLength = 200;
				colvarPreviousSummer.AutoIncrement = false;
				colvarPreviousSummer.IsNullable = true;
				colvarPreviousSummer.IsPrimaryKey = false;
				colvarPreviousSummer.IsForeignKey = false;
				colvarPreviousSummer.IsReadOnly = false;
				colvarPreviousSummer.DefaultSetting = @"";
				colvarPreviousSummer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreviousSummer);

				TableSchema.TableColumn colvarCriminalOffense = new TableSchema.TableColumn(schema);
				colvarCriminalOffense.ColumnName = "CriminalOffense";
				colvarCriminalOffense.DataType = DbType.Boolean;
				colvarCriminalOffense.MaxLength = 0;
				colvarCriminalOffense.AutoIncrement = false;
				colvarCriminalOffense.IsNullable = true;
				colvarCriminalOffense.IsPrimaryKey = false;
				colvarCriminalOffense.IsForeignKey = false;
				colvarCriminalOffense.IsReadOnly = false;
				colvarCriminalOffense.DefaultSetting = @"";
				colvarCriminalOffense.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCriminalOffense);

				TableSchema.TableColumn colvarOffense = new TableSchema.TableColumn(schema);
				colvarOffense.ColumnName = "Offense";
				colvarOffense.DataType = DbType.String;
				colvarOffense.MaxLength = -1;
				colvarOffense.AutoIncrement = false;
				colvarOffense.IsNullable = true;
				colvarOffense.IsPrimaryKey = false;
				colvarOffense.IsForeignKey = false;
				colvarOffense.IsReadOnly = false;
				colvarOffense.DefaultSetting = @"";
				colvarOffense.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOffense);

				TableSchema.TableColumn colvarOffenseExplanation = new TableSchema.TableColumn(schema);
				colvarOffenseExplanation.ColumnName = "OffenseExplanation";
				colvarOffenseExplanation.DataType = DbType.String;
				colvarOffenseExplanation.MaxLength = -1;
				colvarOffenseExplanation.AutoIncrement = false;
				colvarOffenseExplanation.IsNullable = true;
				colvarOffenseExplanation.IsPrimaryKey = false;
				colvarOffenseExplanation.IsForeignKey = false;
				colvarOffenseExplanation.IsReadOnly = false;
				colvarOffenseExplanation.DefaultSetting = @"";
				colvarOffenseExplanation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOffenseExplanation);

				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "StartDate";
				colvarStartDate.DataType = DbType.DateTime;
				colvarStartDate.MaxLength = 0;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = false;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);

				TableSchema.TableColumn colvarStartingState = new TableSchema.TableColumn(schema);
				colvarStartingState.ColumnName = "StartingState";
				colvarStartingState.DataType = DbType.String;
				colvarStartingState.MaxLength = 50;
				colvarStartingState.AutoIncrement = false;
				colvarStartingState.IsNullable = true;
				colvarStartingState.IsPrimaryKey = false;
				colvarStartingState.IsForeignKey = false;
				colvarStartingState.IsReadOnly = false;
				colvarStartingState.DefaultSetting = @"";
				colvarStartingState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartingState);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_RecruitRegistration",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_RecruitRegistration LoadFrom(RU_RecruitRegistration item)
		{
			RU_RecruitRegistration result = new RU_RecruitRegistration();
			if (item.RecruitRegistrationID != default(int)) {
				result.LoadByKey(item.RecruitRegistrationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RecruitRegistrationID {
			get { return GetColumnValue<int>(Columns.RecruitRegistrationID); }
			set {
				SetColumnValue(Columns.RecruitRegistrationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitRegistrationID));
			}
		}
		[DataMember]
		public Guid? UniqueRegistrationID {
			get { return GetColumnValue<Guid?>(Columns.UniqueRegistrationID); }
			set {
				SetColumnValue(Columns.UniqueRegistrationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UniqueRegistrationID));
			}
		}
		[DataMember]
		public int? InvitedByID {
			get { return GetColumnValue<int?>(Columns.InvitedByID); }
			set {
				SetColumnValue(Columns.InvitedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InvitedByID));
			}
		}
		[DataMember]
		public int? ExistingUserID {
			get { return GetColumnValue<int?>(Columns.ExistingUserID); }
			set {
				SetColumnValue(Columns.ExistingUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExistingUserID));
			}
		}
		[DataMember]
		public DateTime? RegistrationDate {
			get { return GetColumnValue<DateTime?>(Columns.RegistrationDate); }
			set {
				SetColumnValue(Columns.RegistrationDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegistrationDate));
			}
		}
		[DataMember]
		public int? RecruitedByID {
			get { return GetColumnValue<int?>(Columns.RecruitedByID); }
			set {
				SetColumnValue(Columns.RecruitedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitedByID));
			}
		}
		[DataMember]
		public int? PermanentAddressID {
			get { return GetColumnValue<int?>(Columns.PermanentAddressID); }
			set {
				SetColumnValue(Columns.PermanentAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PermanentAddressID));
			}
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set {
				SetColumnValue(Columns.SSN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SSN));
			}
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set {
				SetColumnValue(Columns.FirstName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FirstName));
			}
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set {
				SetColumnValue(Columns.MiddleName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiddleName));
			}
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set {
				SetColumnValue(Columns.LastName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastName));
			}
		}
		[DataMember]
		public string PreferredName {
			get { return GetColumnValue<string>(Columns.PreferredName); }
			set {
				SetColumnValue(Columns.PreferredName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreferredName));
			}
		}
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set {
				SetColumnValue(Columns.FullName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullName));
			}
		}
		[DataMember]
		public string UserName {
			get { return GetColumnValue<string>(Columns.UserName); }
			set {
				SetColumnValue(Columns.UserName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserName));
			}
		}
		[DataMember]
		public DateTime? BirthDate {
			get { return GetColumnValue<DateTime?>(Columns.BirthDate); }
			set {
				SetColumnValue(Columns.BirthDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthDate));
			}
		}
		[DataMember]
		public string BirthCity {
			get { return GetColumnValue<string>(Columns.BirthCity); }
			set {
				SetColumnValue(Columns.BirthCity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthCity));
			}
		}
		[DataMember]
		public string BirthState {
			get { return GetColumnValue<string>(Columns.BirthState); }
			set {
				SetColumnValue(Columns.BirthState, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthState));
			}
		}
		[DataMember]
		public string BirthCountry {
			get { return GetColumnValue<string>(Columns.BirthCountry); }
			set {
				SetColumnValue(Columns.BirthCountry, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthCountry));
			}
		}
		[DataMember]
		public byte? Sex {
			get { return GetColumnValue<byte?>(Columns.Sex); }
			set {
				SetColumnValue(Columns.Sex, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Sex));
			}
		}
		[DataMember]
		public byte? ShirtSize {
			get { return GetColumnValue<byte?>(Columns.ShirtSize); }
			set {
				SetColumnValue(Columns.ShirtSize, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShirtSize));
			}
		}
		[DataMember]
		public byte? HatSize {
			get { return GetColumnValue<byte?>(Columns.HatSize); }
			set {
				SetColumnValue(Columns.HatSize, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HatSize));
			}
		}
		[DataMember]
		public string DLNumber {
			get { return GetColumnValue<string>(Columns.DLNumber); }
			set {
				SetColumnValue(Columns.DLNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLNumber));
			}
		}
		[DataMember]
		public string DLState {
			get { return GetColumnValue<string>(Columns.DLState); }
			set {
				SetColumnValue(Columns.DLState, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLState));
			}
		}
		[DataMember]
		public string DLCountry {
			get { return GetColumnValue<string>(Columns.DLCountry); }
			set {
				SetColumnValue(Columns.DLCountry, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLCountry));
			}
		}
		[DataMember]
		public string DLExpiration {
			get { return GetColumnValue<string>(Columns.DLExpiration); }
			set {
				SetColumnValue(Columns.DLExpiration, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLExpiration));
			}
		}
		[DataMember]
		public string Height {
			get { return GetColumnValue<string>(Columns.Height); }
			set {
				SetColumnValue(Columns.Height, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Height));
			}
		}
		[DataMember]
		public string Weight {
			get { return GetColumnValue<string>(Columns.Weight); }
			set {
				SetColumnValue(Columns.Weight, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Weight));
			}
		}
		[DataMember]
		public string EyeColor {
			get { return GetColumnValue<string>(Columns.EyeColor); }
			set {
				SetColumnValue(Columns.EyeColor, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EyeColor));
			}
		}
		[DataMember]
		public string HairColor {
			get { return GetColumnValue<string>(Columns.HairColor); }
			set {
				SetColumnValue(Columns.HairColor, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HairColor));
			}
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set {
				SetColumnValue(Columns.PhoneHome, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneHome));
			}
		}
		[DataMember]
		public string PhoneCell {
			get { return GetColumnValue<string>(Columns.PhoneCell); }
			set {
				SetColumnValue(Columns.PhoneCell, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneCell));
			}
		}
		[DataMember]
		public short? PhoneCellCarrierID {
			get { return GetColumnValue<short?>(Columns.PhoneCellCarrierID); }
			set {
				SetColumnValue(Columns.PhoneCellCarrierID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneCellCarrierID));
			}
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set {
				SetColumnValue(Columns.Email, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Email));
			}
		}
		[DataMember]
		public short? UserTypeId {
			get { return GetColumnValue<short?>(Columns.UserTypeId); }
			set {
				SetColumnValue(Columns.UserTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeId));
			}
		}
		[DataMember]
		public int? ReportsToID {
			get { return GetColumnValue<int?>(Columns.ReportsToID); }
			set {
				SetColumnValue(Columns.ReportsToID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportsToID));
			}
		}
		[DataMember]
		public int? CurrentAddressID {
			get { return GetColumnValue<int?>(Columns.CurrentAddressID); }
			set {
				SetColumnValue(Columns.CurrentAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CurrentAddressID));
			}
		}
		[DataMember]
		public int? PayScaleID {
			get { return GetColumnValue<int?>(Columns.PayScaleID); }
			set {
				SetColumnValue(Columns.PayScaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScaleID));
			}
		}
		[DataMember]
		public short? SchoolId {
			get { return GetColumnValue<short?>(Columns.SchoolId); }
			set {
				SetColumnValue(Columns.SchoolId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SchoolId));
			}
		}
		[DataMember]
		public bool? HasPet {
			get { return GetColumnValue<bool?>(Columns.HasPet); }
			set {
				SetColumnValue(Columns.HasPet, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasPet));
			}
		}
		[DataMember]
		public bool? NeedsExtraHousing {
			get { return GetColumnValue<bool?>(Columns.NeedsExtraHousing); }
			set {
				SetColumnValue(Columns.NeedsExtraHousing, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NeedsExtraHousing));
			}
		}
		[DataMember]
		public string EmergencyName {
			get { return GetColumnValue<string>(Columns.EmergencyName); }
			set {
				SetColumnValue(Columns.EmergencyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyName));
			}
		}
		[DataMember]
		public string EmergencyPhone {
			get { return GetColumnValue<string>(Columns.EmergencyPhone); }
			set {
				SetColumnValue(Columns.EmergencyPhone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyPhone));
			}
		}
		[DataMember]
		public string EmergencyRelationship {
			get { return GetColumnValue<string>(Columns.EmergencyRelationship); }
			set {
				SetColumnValue(Columns.EmergencyRelationship, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyRelationship));
			}
		}
		[DataMember]
		public string PreviousSummer {
			get { return GetColumnValue<string>(Columns.PreviousSummer); }
			set {
				SetColumnValue(Columns.PreviousSummer, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreviousSummer));
			}
		}
		[DataMember]
		public bool? CriminalOffense {
			get { return GetColumnValue<bool?>(Columns.CriminalOffense); }
			set {
				SetColumnValue(Columns.CriminalOffense, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CriminalOffense));
			}
		}
		[DataMember]
		public string Offense {
			get { return GetColumnValue<string>(Columns.Offense); }
			set {
				SetColumnValue(Columns.Offense, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Offense));
			}
		}
		[DataMember]
		public string OffenseExplanation {
			get { return GetColumnValue<string>(Columns.OffenseExplanation); }
			set {
				SetColumnValue(Columns.OffenseExplanation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OffenseExplanation));
			}
		}
		[DataMember]
		public DateTime StartDate {
			get { return GetColumnValue<DateTime>(Columns.StartDate); }
			set {
				SetColumnValue(Columns.StartDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartDate));
			}
		}
		[DataMember]
		public string StartingState {
			get { return GetColumnValue<string>(Columns.StartingState); }
			set {
				SetColumnValue(Columns.StartingState, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartingState));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_PhoneCellCarrier _PhoneCellCarrier;
		//Relationship: FK_RU_RecruitRegistration_RU_PhoneCellCarrier
		public RU_PhoneCellCarrier PhoneCellCarrier
		{
			get
			{
				if(_PhoneCellCarrier == null) {
					_PhoneCellCarrier = RU_PhoneCellCarrier.FetchByID(this.PhoneCellCarrierID);
				}
				return _PhoneCellCarrier;
			}
			set
			{
				SetColumnValue("PhoneCellCarrierID", value.PhoneCellCarrierID);
				_PhoneCellCarrier = value;
			}
		}

		private RU_RecruitAddress _CurrentAddress;
		//Relationship: FK_RU_RecruitRegistration_RU_RecruitCurrentAddress
		public RU_RecruitAddress CurrentAddress
		{
			get
			{
				if(_CurrentAddress == null) {
					_CurrentAddress = RU_RecruitAddress.FetchByID(this.CurrentAddressID);
				}
				return _CurrentAddress;
			}
			set
			{
				SetColumnValue("CurrentAddressID", value.AddressId);
				_CurrentAddress = value;
			}
		}

		private RU_RecruitAddress _PermanentAddress;
		//Relationship: FK_RU_RecruitRegistration_RU_RecruitPermanentAddresses
		public RU_RecruitAddress PermanentAddress
		{
			get
			{
				if(_PermanentAddress == null) {
					_PermanentAddress = RU_RecruitAddress.FetchByID(this.PermanentAddressID);
				}
				return _PermanentAddress;
			}
			set
			{
				SetColumnValue("PermanentAddressID", value.AddressId);
				_PermanentAddress = value;
			}
		}

		private RU_Recruit _ReportsTo;
		//Relationship: FK_RU_RecruitRegistration_RU_Recruits
		public RU_Recruit ReportsTo
		{
			get
			{
				if(_ReportsTo == null) {
					_ReportsTo = RU_Recruit.FetchByID(this.ReportsToID);
				}
				return _ReportsTo;
			}
			set
			{
				SetColumnValue("ReportsToID", value.RecruitID);
				_ReportsTo = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RecruitRegistrationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RecruitRegistrationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UniqueRegistrationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn InvitedByIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ExistingUserIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RegistrationDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RecruitedByIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn PermanentAddressIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PreferredNameColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn UserNameColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn BirthDateColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn BirthCityColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn BirthStateColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn BirthCountryColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn SexColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn ShirtSizeColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn HatSizeColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn DLNumberColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn DLStateColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn DLCountryColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn DLExpirationColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn HeightColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn WeightColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn EyeColorColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn HairColorColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn PhoneCellColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn PhoneCellCarrierIDColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn UserTypeIdColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn ReportsToIDColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn CurrentAddressIDColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn PayScaleIDColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn SchoolIdColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn HasPetColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn NeedsExtraHousingColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn EmergencyNameColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn EmergencyPhoneColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn EmergencyRelationshipColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn PreviousSummerColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn CriminalOffenseColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn OffenseColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn OffenseExplanationColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn StartDateColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn StartingStateColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[52]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RecruitRegistrationID = @"RecruitRegistrationID";
			public static readonly string UniqueRegistrationID = @"UniqueRegistrationID";
			public static readonly string InvitedByID = @"InvitedByID";
			public static readonly string ExistingUserID = @"ExistingUserID";
			public static readonly string RegistrationDate = @"RegistrationDate";
			public static readonly string RecruitedByID = @"RecruitedByID";
			public static readonly string PermanentAddressID = @"PermanentAddressID";
			public static readonly string SSN = @"SSN";
			public static readonly string FirstName = @"FirstName";
			public static readonly string MiddleName = @"MiddleName";
			public static readonly string LastName = @"LastName";
			public static readonly string PreferredName = @"PreferredName";
			public static readonly string FullName = @"FullName";
			public static readonly string UserName = @"UserName";
			public static readonly string BirthDate = @"BirthDate";
			public static readonly string BirthCity = @"BirthCity";
			public static readonly string BirthState = @"BirthState";
			public static readonly string BirthCountry = @"BirthCountry";
			public static readonly string Sex = @"Sex";
			public static readonly string ShirtSize = @"ShirtSize";
			public static readonly string HatSize = @"HatSize";
			public static readonly string DLNumber = @"DLNumber";
			public static readonly string DLState = @"DLState";
			public static readonly string DLCountry = @"DLCountry";
			public static readonly string DLExpiration = @"DLExpiration";
			public static readonly string Height = @"Height";
			public static readonly string Weight = @"Weight";
			public static readonly string EyeColor = @"EyeColor";
			public static readonly string HairColor = @"HairColor";
			public static readonly string PhoneHome = @"PhoneHome";
			public static readonly string PhoneCell = @"PhoneCell";
			public static readonly string PhoneCellCarrierID = @"PhoneCellCarrierID";
			public static readonly string Email = @"Email";
			public static readonly string UserTypeId = @"UserTypeId";
			public static readonly string ReportsToID = @"ReportsToID";
			public static readonly string CurrentAddressID = @"CurrentAddressID";
			public static readonly string PayScaleID = @"PayScaleID";
			public static readonly string SchoolId = @"SchoolId";
			public static readonly string HasPet = @"HasPet";
			public static readonly string NeedsExtraHousing = @"NeedsExtraHousing";
			public static readonly string EmergencyName = @"EmergencyName";
			public static readonly string EmergencyPhone = @"EmergencyPhone";
			public static readonly string EmergencyRelationship = @"EmergencyRelationship";
			public static readonly string PreviousSummer = @"PreviousSummer";
			public static readonly string CriminalOffense = @"CriminalOffense";
			public static readonly string Offense = @"Offense";
			public static readonly string OffenseExplanation = @"OffenseExplanation";
			public static readonly string StartDate = @"StartDate";
			public static readonly string StartingState = @"StartingState";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RecruitRegistrationID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_Recruit class.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitCollection : ActiveList<RU_Recruit, RU_RecruitCollection>
	{
		public static RU_RecruitCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_RecruitCollection result = new RU_RecruitCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_Recruit item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_Recruits table.
	/// </summary>
	[DataContract]
	public partial class RU_Recruit : ActiveRecord<RU_Recruit>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_Recruit()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_Recruits", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = true;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = true;
				colvarRecruitID.IsForeignKey = false;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
				colvarUserId.ColumnName = "UserId";
				colvarUserId.DataType = DbType.Int32;
				colvarUserId.MaxLength = 0;
				colvarUserId.AutoIncrement = false;
				colvarUserId.IsNullable = false;
				colvarUserId.IsPrimaryKey = false;
				colvarUserId.IsForeignKey = true;
				colvarUserId.IsReadOnly = false;
				colvarUserId.DefaultSetting = @"";
				colvarUserId.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarUserId);

				TableSchema.TableColumn colvarUserTypeId = new TableSchema.TableColumn(schema);
				colvarUserTypeId.ColumnName = "UserTypeId";
				colvarUserTypeId.DataType = DbType.Int16;
				colvarUserTypeId.MaxLength = 0;
				colvarUserTypeId.AutoIncrement = false;
				colvarUserTypeId.IsNullable = false;
				colvarUserTypeId.IsPrimaryKey = false;
				colvarUserTypeId.IsForeignKey = true;
				colvarUserTypeId.IsReadOnly = false;
				colvarUserTypeId.DefaultSetting = @"((1))";
				colvarUserTypeId.ForeignKeyTableName = "RU_UserType";
				schema.Columns.Add(colvarUserTypeId);

				TableSchema.TableColumn colvarReportsToId = new TableSchema.TableColumn(schema);
				colvarReportsToId.ColumnName = "ReportsToId";
				colvarReportsToId.DataType = DbType.Int32;
				colvarReportsToId.MaxLength = 0;
				colvarReportsToId.AutoIncrement = false;
				colvarReportsToId.IsNullable = true;
				colvarReportsToId.IsPrimaryKey = false;
				colvarReportsToId.IsForeignKey = true;
				colvarReportsToId.IsReadOnly = false;
				colvarReportsToId.DefaultSetting = @"";
				colvarReportsToId.ForeignKeyTableName = "RU_Recruits";
				schema.Columns.Add(colvarReportsToId);

				TableSchema.TableColumn colvarCurrentAddressId = new TableSchema.TableColumn(schema);
				colvarCurrentAddressId.ColumnName = "CurrentAddressId";
				colvarCurrentAddressId.DataType = DbType.Int32;
				colvarCurrentAddressId.MaxLength = 0;
				colvarCurrentAddressId.AutoIncrement = false;
				colvarCurrentAddressId.IsNullable = true;
				colvarCurrentAddressId.IsPrimaryKey = false;
				colvarCurrentAddressId.IsForeignKey = true;
				colvarCurrentAddressId.IsReadOnly = false;
				colvarCurrentAddressId.DefaultSetting = @"";
				colvarCurrentAddressId.ForeignKeyTableName = "RU_RecruitAddresses";
				schema.Columns.Add(colvarCurrentAddressId);

				TableSchema.TableColumn colvarSeasonId = new TableSchema.TableColumn(schema);
				colvarSeasonId.ColumnName = "SeasonId";
				colvarSeasonId.DataType = DbType.Int32;
				colvarSeasonId.MaxLength = 0;
				colvarSeasonId.AutoIncrement = false;
				colvarSeasonId.IsNullable = false;
				colvarSeasonId.IsPrimaryKey = false;
				colvarSeasonId.IsForeignKey = true;
				colvarSeasonId.IsReadOnly = false;
				colvarSeasonId.DefaultSetting = @"";
				colvarSeasonId.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonId);

				TableSchema.TableColumn colvarOwnerApprovalId = new TableSchema.TableColumn(schema);
				colvarOwnerApprovalId.ColumnName = "OwnerApprovalId";
				colvarOwnerApprovalId.DataType = DbType.Int32;
				colvarOwnerApprovalId.MaxLength = 0;
				colvarOwnerApprovalId.AutoIncrement = false;
				colvarOwnerApprovalId.IsNullable = true;
				colvarOwnerApprovalId.IsPrimaryKey = false;
				colvarOwnerApprovalId.IsForeignKey = false;
				colvarOwnerApprovalId.IsReadOnly = false;
				colvarOwnerApprovalId.DefaultSetting = @"";
				colvarOwnerApprovalId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerApprovalId);

				TableSchema.TableColumn colvarTeamId = new TableSchema.TableColumn(schema);
				colvarTeamId.ColumnName = "TeamId";
				colvarTeamId.DataType = DbType.Int32;
				colvarTeamId.MaxLength = 0;
				colvarTeamId.AutoIncrement = false;
				colvarTeamId.IsNullable = true;
				colvarTeamId.IsPrimaryKey = false;
				colvarTeamId.IsForeignKey = true;
				colvarTeamId.IsReadOnly = false;
				colvarTeamId.DefaultSetting = @"";
				colvarTeamId.ForeignKeyTableName = "RU_Teams";
				schema.Columns.Add(colvarTeamId);

				TableSchema.TableColumn colvarPayScaleId = new TableSchema.TableColumn(schema);
				colvarPayScaleId.ColumnName = "PayScaleId";
				colvarPayScaleId.DataType = DbType.Int32;
				colvarPayScaleId.MaxLength = 0;
				colvarPayScaleId.AutoIncrement = false;
				colvarPayScaleId.IsNullable = true;
				colvarPayScaleId.IsPrimaryKey = false;
				colvarPayScaleId.IsForeignKey = true;
				colvarPayScaleId.IsReadOnly = false;
				colvarPayScaleId.DefaultSetting = @"";
				colvarPayScaleId.ForeignKeyTableName = "RU_Payscales";
				schema.Columns.Add(colvarPayScaleId);

				TableSchema.TableColumn colvarSchoolId = new TableSchema.TableColumn(schema);
				colvarSchoolId.ColumnName = "SchoolId";
				colvarSchoolId.DataType = DbType.Int16;
				colvarSchoolId.MaxLength = 0;
				colvarSchoolId.AutoIncrement = false;
				colvarSchoolId.IsNullable = true;
				colvarSchoolId.IsPrimaryKey = false;
				colvarSchoolId.IsForeignKey = false;
				colvarSchoolId.IsReadOnly = false;
				colvarSchoolId.DefaultSetting = @"";
				colvarSchoolId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchoolId);

				TableSchema.TableColumn colvarShackingUpId = new TableSchema.TableColumn(schema);
				colvarShackingUpId.ColumnName = "ShackingUpId";
				colvarShackingUpId.DataType = DbType.Int32;
				colvarShackingUpId.MaxLength = 0;
				colvarShackingUpId.AutoIncrement = false;
				colvarShackingUpId.IsNullable = true;
				colvarShackingUpId.IsPrimaryKey = false;
				colvarShackingUpId.IsForeignKey = false;
				colvarShackingUpId.IsReadOnly = false;
				colvarShackingUpId.DefaultSetting = @"";
				colvarShackingUpId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShackingUpId);

				TableSchema.TableColumn colvarRecruitCohabbitTypeId = new TableSchema.TableColumn(schema);
				colvarRecruitCohabbitTypeId.ColumnName = "RecruitCohabbitTypeId";
				colvarRecruitCohabbitTypeId.DataType = DbType.Int32;
				colvarRecruitCohabbitTypeId.MaxLength = 0;
				colvarRecruitCohabbitTypeId.AutoIncrement = false;
				colvarRecruitCohabbitTypeId.IsNullable = true;
				colvarRecruitCohabbitTypeId.IsPrimaryKey = false;
				colvarRecruitCohabbitTypeId.IsForeignKey = false;
				colvarRecruitCohabbitTypeId.IsReadOnly = false;
				colvarRecruitCohabbitTypeId.DefaultSetting = @"";
				colvarRecruitCohabbitTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitCohabbitTypeId);

				TableSchema.TableColumn colvarAlternatePayScheduleId = new TableSchema.TableColumn(schema);
				colvarAlternatePayScheduleId.ColumnName = "AlternatePayScheduleId";
				colvarAlternatePayScheduleId.DataType = DbType.Int32;
				colvarAlternatePayScheduleId.MaxLength = 0;
				colvarAlternatePayScheduleId.AutoIncrement = false;
				colvarAlternatePayScheduleId.IsNullable = true;
				colvarAlternatePayScheduleId.IsPrimaryKey = false;
				colvarAlternatePayScheduleId.IsForeignKey = true;
				colvarAlternatePayScheduleId.IsReadOnly = false;
				colvarAlternatePayScheduleId.DefaultSetting = @"";
				colvarAlternatePayScheduleId.ForeignKeyTableName = "PR_PaySchedules";
				schema.Columns.Add(colvarAlternatePayScheduleId);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"((5000))";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarLocation = new TableSchema.TableColumn(schema);
				colvarLocation.ColumnName = "Location";
				colvarLocation.DataType = DbType.String;
				colvarLocation.MaxLength = 50;
				colvarLocation.AutoIncrement = false;
				colvarLocation.IsNullable = true;
				colvarLocation.IsPrimaryKey = false;
				colvarLocation.IsForeignKey = false;
				colvarLocation.IsReadOnly = false;
				colvarLocation.DefaultSetting = @"";
				colvarLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocation);

				TableSchema.TableColumn colvarOwnerApprovalDate = new TableSchema.TableColumn(schema);
				colvarOwnerApprovalDate.ColumnName = "OwnerApprovalDate";
				colvarOwnerApprovalDate.DataType = DbType.DateTime;
				colvarOwnerApprovalDate.MaxLength = 0;
				colvarOwnerApprovalDate.AutoIncrement = false;
				colvarOwnerApprovalDate.IsNullable = true;
				colvarOwnerApprovalDate.IsPrimaryKey = false;
				colvarOwnerApprovalDate.IsForeignKey = false;
				colvarOwnerApprovalDate.IsReadOnly = false;
				colvarOwnerApprovalDate.DefaultSetting = @"";
				colvarOwnerApprovalDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerApprovalDate);

				TableSchema.TableColumn colvarManagerApprovalDate = new TableSchema.TableColumn(schema);
				colvarManagerApprovalDate.ColumnName = "ManagerApprovalDate";
				colvarManagerApprovalDate.DataType = DbType.DateTime;
				colvarManagerApprovalDate.MaxLength = 0;
				colvarManagerApprovalDate.AutoIncrement = false;
				colvarManagerApprovalDate.IsNullable = true;
				colvarManagerApprovalDate.IsPrimaryKey = false;
				colvarManagerApprovalDate.IsForeignKey = false;
				colvarManagerApprovalDate.IsReadOnly = false;
				colvarManagerApprovalDate.DefaultSetting = @"";
				colvarManagerApprovalDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManagerApprovalDate);

				TableSchema.TableColumn colvarEmergencyName = new TableSchema.TableColumn(schema);
				colvarEmergencyName.ColumnName = "EmergencyName";
				colvarEmergencyName.DataType = DbType.String;
				colvarEmergencyName.MaxLength = 50;
				colvarEmergencyName.AutoIncrement = false;
				colvarEmergencyName.IsNullable = true;
				colvarEmergencyName.IsPrimaryKey = false;
				colvarEmergencyName.IsForeignKey = false;
				colvarEmergencyName.IsReadOnly = false;
				colvarEmergencyName.DefaultSetting = @"";
				colvarEmergencyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyName);

				TableSchema.TableColumn colvarEmergencyPhone = new TableSchema.TableColumn(schema);
				colvarEmergencyPhone.ColumnName = "EmergencyPhone";
				colvarEmergencyPhone.DataType = DbType.AnsiString;
				colvarEmergencyPhone.MaxLength = 20;
				colvarEmergencyPhone.AutoIncrement = false;
				colvarEmergencyPhone.IsNullable = true;
				colvarEmergencyPhone.IsPrimaryKey = false;
				colvarEmergencyPhone.IsForeignKey = false;
				colvarEmergencyPhone.IsReadOnly = false;
				colvarEmergencyPhone.DefaultSetting = @"";
				colvarEmergencyPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyPhone);

				TableSchema.TableColumn colvarEmergencyRelationship = new TableSchema.TableColumn(schema);
				colvarEmergencyRelationship.ColumnName = "EmergencyRelationship";
				colvarEmergencyRelationship.DataType = DbType.String;
				colvarEmergencyRelationship.MaxLength = 50;
				colvarEmergencyRelationship.AutoIncrement = false;
				colvarEmergencyRelationship.IsNullable = true;
				colvarEmergencyRelationship.IsPrimaryKey = false;
				colvarEmergencyRelationship.IsForeignKey = false;
				colvarEmergencyRelationship.IsReadOnly = false;
				colvarEmergencyRelationship.DefaultSetting = @"";
				colvarEmergencyRelationship.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyRelationship);

				TableSchema.TableColumn colvarIsRecruiter = new TableSchema.TableColumn(schema);
				colvarIsRecruiter.ColumnName = "IsRecruiter";
				colvarIsRecruiter.DataType = DbType.Boolean;
				colvarIsRecruiter.MaxLength = 0;
				colvarIsRecruiter.AutoIncrement = false;
				colvarIsRecruiter.IsNullable = false;
				colvarIsRecruiter.IsPrimaryKey = false;
				colvarIsRecruiter.IsForeignKey = false;
				colvarIsRecruiter.IsReadOnly = false;
				colvarIsRecruiter.DefaultSetting = @"((0))";
				colvarIsRecruiter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsRecruiter);

				TableSchema.TableColumn colvarPreviousSummer = new TableSchema.TableColumn(schema);
				colvarPreviousSummer.ColumnName = "PreviousSummer";
				colvarPreviousSummer.DataType = DbType.String;
				colvarPreviousSummer.MaxLength = 200;
				colvarPreviousSummer.AutoIncrement = false;
				colvarPreviousSummer.IsNullable = true;
				colvarPreviousSummer.IsPrimaryKey = false;
				colvarPreviousSummer.IsForeignKey = false;
				colvarPreviousSummer.IsReadOnly = false;
				colvarPreviousSummer.DefaultSetting = @"";
				colvarPreviousSummer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreviousSummer);

				TableSchema.TableColumn colvarSignatureDate = new TableSchema.TableColumn(schema);
				colvarSignatureDate.ColumnName = "SignatureDate";
				colvarSignatureDate.DataType = DbType.DateTime;
				colvarSignatureDate.MaxLength = 0;
				colvarSignatureDate.AutoIncrement = false;
				colvarSignatureDate.IsNullable = true;
				colvarSignatureDate.IsPrimaryKey = false;
				colvarSignatureDate.IsForeignKey = false;
				colvarSignatureDate.IsReadOnly = false;
				colvarSignatureDate.DefaultSetting = @"";
				colvarSignatureDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSignatureDate);

				TableSchema.TableColumn colvarHireDate = new TableSchema.TableColumn(schema);
				colvarHireDate.ColumnName = "HireDate";
				colvarHireDate.DataType = DbType.DateTime;
				colvarHireDate.MaxLength = 0;
				colvarHireDate.AutoIncrement = false;
				colvarHireDate.IsNullable = true;
				colvarHireDate.IsPrimaryKey = false;
				colvarHireDate.IsForeignKey = false;
				colvarHireDate.IsReadOnly = false;
				colvarHireDate.DefaultSetting = @"";
				colvarHireDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHireDate);

				TableSchema.TableColumn colvarGPExemptions = new TableSchema.TableColumn(schema);
				colvarGPExemptions.ColumnName = "GPExemptions";
				colvarGPExemptions.DataType = DbType.Int32;
				colvarGPExemptions.MaxLength = 0;
				colvarGPExemptions.AutoIncrement = false;
				colvarGPExemptions.IsNullable = true;
				colvarGPExemptions.IsPrimaryKey = false;
				colvarGPExemptions.IsForeignKey = false;
				colvarGPExemptions.IsReadOnly = false;
				colvarGPExemptions.DefaultSetting = @"";
				colvarGPExemptions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPExemptions);

				TableSchema.TableColumn colvarGPW4Allowances = new TableSchema.TableColumn(schema);
				colvarGPW4Allowances.ColumnName = "GPW4Allowances";
				colvarGPW4Allowances.DataType = DbType.Byte;
				colvarGPW4Allowances.MaxLength = 0;
				colvarGPW4Allowances.AutoIncrement = false;
				colvarGPW4Allowances.IsNullable = true;
				colvarGPW4Allowances.IsPrimaryKey = false;
				colvarGPW4Allowances.IsForeignKey = false;
				colvarGPW4Allowances.IsReadOnly = false;
				colvarGPW4Allowances.DefaultSetting = @"";
				colvarGPW4Allowances.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPW4Allowances);

				TableSchema.TableColumn colvarGPW9Name = new TableSchema.TableColumn(schema);
				colvarGPW9Name.ColumnName = "GPW9Name";
				colvarGPW9Name.DataType = DbType.String;
				colvarGPW9Name.MaxLength = 50;
				colvarGPW9Name.AutoIncrement = false;
				colvarGPW9Name.IsNullable = true;
				colvarGPW9Name.IsPrimaryKey = false;
				colvarGPW9Name.IsForeignKey = false;
				colvarGPW9Name.IsReadOnly = false;
				colvarGPW9Name.DefaultSetting = @"";
				colvarGPW9Name.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPW9Name);

				TableSchema.TableColumn colvarGPW9BusinessName = new TableSchema.TableColumn(schema);
				colvarGPW9BusinessName.ColumnName = "GPW9BusinessName";
				colvarGPW9BusinessName.DataType = DbType.String;
				colvarGPW9BusinessName.MaxLength = 100;
				colvarGPW9BusinessName.AutoIncrement = false;
				colvarGPW9BusinessName.IsNullable = true;
				colvarGPW9BusinessName.IsPrimaryKey = false;
				colvarGPW9BusinessName.IsForeignKey = false;
				colvarGPW9BusinessName.IsReadOnly = false;
				colvarGPW9BusinessName.DefaultSetting = @"";
				colvarGPW9BusinessName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPW9BusinessName);

				TableSchema.TableColumn colvarGPW9TIN = new TableSchema.TableColumn(schema);
				colvarGPW9TIN.ColumnName = "GPW9TIN";
				colvarGPW9TIN.DataType = DbType.AnsiString;
				colvarGPW9TIN.MaxLength = 50;
				colvarGPW9TIN.AutoIncrement = false;
				colvarGPW9TIN.IsNullable = true;
				colvarGPW9TIN.IsPrimaryKey = false;
				colvarGPW9TIN.IsForeignKey = false;
				colvarGPW9TIN.IsReadOnly = false;
				colvarGPW9TIN.DefaultSetting = @"";
				colvarGPW9TIN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPW9TIN);

				TableSchema.TableColumn colvarSocialSecCardStatusID = new TableSchema.TableColumn(schema);
				colvarSocialSecCardStatusID.ColumnName = "SocialSecCardStatusID";
				colvarSocialSecCardStatusID.DataType = DbType.Int32;
				colvarSocialSecCardStatusID.MaxLength = 0;
				colvarSocialSecCardStatusID.AutoIncrement = false;
				colvarSocialSecCardStatusID.IsNullable = false;
				colvarSocialSecCardStatusID.IsPrimaryKey = false;
				colvarSocialSecCardStatusID.IsForeignKey = false;
				colvarSocialSecCardStatusID.IsReadOnly = false;
				colvarSocialSecCardStatusID.DefaultSetting = @"((2))";
				colvarSocialSecCardStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSocialSecCardStatusID);

				TableSchema.TableColumn colvarDriversLicenseStatusID = new TableSchema.TableColumn(schema);
				colvarDriversLicenseStatusID.ColumnName = "DriversLicenseStatusID";
				colvarDriversLicenseStatusID.DataType = DbType.Int32;
				colvarDriversLicenseStatusID.MaxLength = 0;
				colvarDriversLicenseStatusID.AutoIncrement = false;
				colvarDriversLicenseStatusID.IsNullable = false;
				colvarDriversLicenseStatusID.IsPrimaryKey = false;
				colvarDriversLicenseStatusID.IsForeignKey = false;
				colvarDriversLicenseStatusID.IsReadOnly = false;
				colvarDriversLicenseStatusID.DefaultSetting = @"((2))";
				colvarDriversLicenseStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDriversLicenseStatusID);

				TableSchema.TableColumn colvarW4StatusID = new TableSchema.TableColumn(schema);
				colvarW4StatusID.ColumnName = "W4StatusID";
				colvarW4StatusID.DataType = DbType.Int32;
				colvarW4StatusID.MaxLength = 0;
				colvarW4StatusID.AutoIncrement = false;
				colvarW4StatusID.IsNullable = false;
				colvarW4StatusID.IsPrimaryKey = false;
				colvarW4StatusID.IsForeignKey = false;
				colvarW4StatusID.IsReadOnly = false;
				colvarW4StatusID.DefaultSetting = @"((2))";
				colvarW4StatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarW4StatusID);

				TableSchema.TableColumn colvarI9StatusID = new TableSchema.TableColumn(schema);
				colvarI9StatusID.ColumnName = "I9StatusID";
				colvarI9StatusID.DataType = DbType.Int32;
				colvarI9StatusID.MaxLength = 0;
				colvarI9StatusID.AutoIncrement = false;
				colvarI9StatusID.IsNullable = false;
				colvarI9StatusID.IsPrimaryKey = false;
				colvarI9StatusID.IsForeignKey = false;
				colvarI9StatusID.IsReadOnly = false;
				colvarI9StatusID.DefaultSetting = @"((2))";
				colvarI9StatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarI9StatusID);

				TableSchema.TableColumn colvarW9StatusID = new TableSchema.TableColumn(schema);
				colvarW9StatusID.ColumnName = "W9StatusID";
				colvarW9StatusID.DataType = DbType.Int32;
				colvarW9StatusID.MaxLength = 0;
				colvarW9StatusID.AutoIncrement = false;
				colvarW9StatusID.IsNullable = false;
				colvarW9StatusID.IsPrimaryKey = false;
				colvarW9StatusID.IsForeignKey = false;
				colvarW9StatusID.IsReadOnly = false;
				colvarW9StatusID.DefaultSetting = @"((2))";
				colvarW9StatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarW9StatusID);

				TableSchema.TableColumn colvarSocialSecCardNotes = new TableSchema.TableColumn(schema);
				colvarSocialSecCardNotes.ColumnName = "SocialSecCardNotes";
				colvarSocialSecCardNotes.DataType = DbType.String;
				colvarSocialSecCardNotes.MaxLength = 250;
				colvarSocialSecCardNotes.AutoIncrement = false;
				colvarSocialSecCardNotes.IsNullable = true;
				colvarSocialSecCardNotes.IsPrimaryKey = false;
				colvarSocialSecCardNotes.IsForeignKey = false;
				colvarSocialSecCardNotes.IsReadOnly = false;
				colvarSocialSecCardNotes.DefaultSetting = @"";
				colvarSocialSecCardNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSocialSecCardNotes);

				TableSchema.TableColumn colvarDriversLicenseNotes = new TableSchema.TableColumn(schema);
				colvarDriversLicenseNotes.ColumnName = "DriversLicenseNotes";
				colvarDriversLicenseNotes.DataType = DbType.String;
				colvarDriversLicenseNotes.MaxLength = 250;
				colvarDriversLicenseNotes.AutoIncrement = false;
				colvarDriversLicenseNotes.IsNullable = true;
				colvarDriversLicenseNotes.IsPrimaryKey = false;
				colvarDriversLicenseNotes.IsForeignKey = false;
				colvarDriversLicenseNotes.IsReadOnly = false;
				colvarDriversLicenseNotes.DefaultSetting = @"";
				colvarDriversLicenseNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDriversLicenseNotes);

				TableSchema.TableColumn colvarW4Notes = new TableSchema.TableColumn(schema);
				colvarW4Notes.ColumnName = "W4Notes";
				colvarW4Notes.DataType = DbType.String;
				colvarW4Notes.MaxLength = 250;
				colvarW4Notes.AutoIncrement = false;
				colvarW4Notes.IsNullable = true;
				colvarW4Notes.IsPrimaryKey = false;
				colvarW4Notes.IsForeignKey = false;
				colvarW4Notes.IsReadOnly = false;
				colvarW4Notes.DefaultSetting = @"";
				colvarW4Notes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarW4Notes);

				TableSchema.TableColumn colvarI9Notes = new TableSchema.TableColumn(schema);
				colvarI9Notes.ColumnName = "I9Notes";
				colvarI9Notes.DataType = DbType.String;
				colvarI9Notes.MaxLength = 250;
				colvarI9Notes.AutoIncrement = false;
				colvarI9Notes.IsNullable = true;
				colvarI9Notes.IsPrimaryKey = false;
				colvarI9Notes.IsForeignKey = false;
				colvarI9Notes.IsReadOnly = false;
				colvarI9Notes.DefaultSetting = @"";
				colvarI9Notes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarI9Notes);

				TableSchema.TableColumn colvarW9Notes = new TableSchema.TableColumn(schema);
				colvarW9Notes.ColumnName = "W9Notes";
				colvarW9Notes.DataType = DbType.String;
				colvarW9Notes.MaxLength = 250;
				colvarW9Notes.AutoIncrement = false;
				colvarW9Notes.IsNullable = true;
				colvarW9Notes.IsPrimaryKey = false;
				colvarW9Notes.IsForeignKey = false;
				colvarW9Notes.IsReadOnly = false;
				colvarW9Notes.DefaultSetting = @"";
				colvarW9Notes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarW9Notes);

				TableSchema.TableColumn colvarEIN = new TableSchema.TableColumn(schema);
				colvarEIN.ColumnName = "EIN";
				colvarEIN.DataType = DbType.String;
				colvarEIN.MaxLength = 50;
				colvarEIN.AutoIncrement = false;
				colvarEIN.IsNullable = true;
				colvarEIN.IsPrimaryKey = false;
				colvarEIN.IsForeignKey = false;
				colvarEIN.IsReadOnly = false;
				colvarEIN.DefaultSetting = @"";
				colvarEIN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEIN);

				TableSchema.TableColumn colvarSUTA = new TableSchema.TableColumn(schema);
				colvarSUTA.ColumnName = "SUTA";
				colvarSUTA.DataType = DbType.String;
				colvarSUTA.MaxLength = 50;
				colvarSUTA.AutoIncrement = false;
				colvarSUTA.IsNullable = true;
				colvarSUTA.IsPrimaryKey = false;
				colvarSUTA.IsForeignKey = false;
				colvarSUTA.IsReadOnly = false;
				colvarSUTA.DefaultSetting = @"";
				colvarSUTA.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSUTA);

				TableSchema.TableColumn colvarWorkersComp = new TableSchema.TableColumn(schema);
				colvarWorkersComp.ColumnName = "WorkersComp";
				colvarWorkersComp.DataType = DbType.String;
				colvarWorkersComp.MaxLength = -1;
				colvarWorkersComp.AutoIncrement = false;
				colvarWorkersComp.IsNullable = true;
				colvarWorkersComp.IsPrimaryKey = false;
				colvarWorkersComp.IsForeignKey = false;
				colvarWorkersComp.IsReadOnly = false;
				colvarWorkersComp.DefaultSetting = @"";
				colvarWorkersComp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkersComp);

				TableSchema.TableColumn colvarFedFilingStatus = new TableSchema.TableColumn(schema);
				colvarFedFilingStatus.ColumnName = "FedFilingStatus";
				colvarFedFilingStatus.DataType = DbType.String;
				colvarFedFilingStatus.MaxLength = 50;
				colvarFedFilingStatus.AutoIncrement = false;
				colvarFedFilingStatus.IsNullable = true;
				colvarFedFilingStatus.IsPrimaryKey = false;
				colvarFedFilingStatus.IsForeignKey = false;
				colvarFedFilingStatus.IsReadOnly = false;
				colvarFedFilingStatus.DefaultSetting = @"";
				colvarFedFilingStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFedFilingStatus);

				TableSchema.TableColumn colvarEICFilingStatus = new TableSchema.TableColumn(schema);
				colvarEICFilingStatus.ColumnName = "EICFilingStatus";
				colvarEICFilingStatus.DataType = DbType.String;
				colvarEICFilingStatus.MaxLength = 50;
				colvarEICFilingStatus.AutoIncrement = false;
				colvarEICFilingStatus.IsNullable = true;
				colvarEICFilingStatus.IsPrimaryKey = false;
				colvarEICFilingStatus.IsForeignKey = false;
				colvarEICFilingStatus.IsReadOnly = false;
				colvarEICFilingStatus.DefaultSetting = @"";
				colvarEICFilingStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEICFilingStatus);

				TableSchema.TableColumn colvarTaxWitholdingState = new TableSchema.TableColumn(schema);
				colvarTaxWitholdingState.ColumnName = "TaxWitholdingState";
				colvarTaxWitholdingState.DataType = DbType.String;
				colvarTaxWitholdingState.MaxLength = 5;
				colvarTaxWitholdingState.AutoIncrement = false;
				colvarTaxWitholdingState.IsNullable = true;
				colvarTaxWitholdingState.IsPrimaryKey = false;
				colvarTaxWitholdingState.IsForeignKey = false;
				colvarTaxWitholdingState.IsReadOnly = false;
				colvarTaxWitholdingState.DefaultSetting = @"";
				colvarTaxWitholdingState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxWitholdingState);

				TableSchema.TableColumn colvarStateFilingStatus = new TableSchema.TableColumn(schema);
				colvarStateFilingStatus.ColumnName = "StateFilingStatus";
				colvarStateFilingStatus.DataType = DbType.String;
				colvarStateFilingStatus.MaxLength = 50;
				colvarStateFilingStatus.AutoIncrement = false;
				colvarStateFilingStatus.IsNullable = true;
				colvarStateFilingStatus.IsPrimaryKey = false;
				colvarStateFilingStatus.IsForeignKey = false;
				colvarStateFilingStatus.IsReadOnly = false;
				colvarStateFilingStatus.DefaultSetting = @"";
				colvarStateFilingStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateFilingStatus);

				TableSchema.TableColumn colvarGPDependents = new TableSchema.TableColumn(schema);
				colvarGPDependents.ColumnName = "GPDependents";
				colvarGPDependents.DataType = DbType.Int32;
				colvarGPDependents.MaxLength = 0;
				colvarGPDependents.AutoIncrement = false;
				colvarGPDependents.IsNullable = true;
				colvarGPDependents.IsPrimaryKey = false;
				colvarGPDependents.IsForeignKey = false;
				colvarGPDependents.IsReadOnly = false;
				colvarGPDependents.DefaultSetting = @"";
				colvarGPDependents.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPDependents);

				TableSchema.TableColumn colvarCriminalOffense = new TableSchema.TableColumn(schema);
				colvarCriminalOffense.ColumnName = "CriminalOffense";
				colvarCriminalOffense.DataType = DbType.Boolean;
				colvarCriminalOffense.MaxLength = 0;
				colvarCriminalOffense.AutoIncrement = false;
				colvarCriminalOffense.IsNullable = true;
				colvarCriminalOffense.IsPrimaryKey = false;
				colvarCriminalOffense.IsForeignKey = false;
				colvarCriminalOffense.IsReadOnly = false;
				colvarCriminalOffense.DefaultSetting = @"";
				colvarCriminalOffense.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCriminalOffense);

				TableSchema.TableColumn colvarOffense = new TableSchema.TableColumn(schema);
				colvarOffense.ColumnName = "Offense";
				colvarOffense.DataType = DbType.String;
				colvarOffense.MaxLength = -1;
				colvarOffense.AutoIncrement = false;
				colvarOffense.IsNullable = true;
				colvarOffense.IsPrimaryKey = false;
				colvarOffense.IsForeignKey = false;
				colvarOffense.IsReadOnly = false;
				colvarOffense.DefaultSetting = @"";
				colvarOffense.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOffense);

				TableSchema.TableColumn colvarOffenseExplanation = new TableSchema.TableColumn(schema);
				colvarOffenseExplanation.ColumnName = "OffenseExplanation";
				colvarOffenseExplanation.DataType = DbType.String;
				colvarOffenseExplanation.MaxLength = -1;
				colvarOffenseExplanation.AutoIncrement = false;
				colvarOffenseExplanation.IsNullable = true;
				colvarOffenseExplanation.IsPrimaryKey = false;
				colvarOffenseExplanation.IsForeignKey = false;
				colvarOffenseExplanation.IsReadOnly = false;
				colvarOffenseExplanation.DefaultSetting = @"";
				colvarOffenseExplanation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOffenseExplanation);

				TableSchema.TableColumn colvarRent = new TableSchema.TableColumn(schema);
				colvarRent.ColumnName = "Rent";
				colvarRent.DataType = DbType.Currency;
				colvarRent.MaxLength = 0;
				colvarRent.AutoIncrement = false;
				colvarRent.IsNullable = true;
				colvarRent.IsPrimaryKey = false;
				colvarRent.IsForeignKey = false;
				colvarRent.IsReadOnly = false;
				colvarRent.DefaultSetting = @"";
				colvarRent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRent);

				TableSchema.TableColumn colvarPet = new TableSchema.TableColumn(schema);
				colvarPet.ColumnName = "Pet";
				colvarPet.DataType = DbType.Currency;
				colvarPet.MaxLength = 0;
				colvarPet.AutoIncrement = false;
				colvarPet.IsNullable = true;
				colvarPet.IsPrimaryKey = false;
				colvarPet.IsForeignKey = false;
				colvarPet.IsReadOnly = false;
				colvarPet.DefaultSetting = @"";
				colvarPet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPet);

				TableSchema.TableColumn colvarUtilities = new TableSchema.TableColumn(schema);
				colvarUtilities.ColumnName = "Utilities";
				colvarUtilities.DataType = DbType.Currency;
				colvarUtilities.MaxLength = 0;
				colvarUtilities.AutoIncrement = false;
				colvarUtilities.IsNullable = true;
				colvarUtilities.IsPrimaryKey = false;
				colvarUtilities.IsForeignKey = false;
				colvarUtilities.IsReadOnly = false;
				colvarUtilities.DefaultSetting = @"";
				colvarUtilities.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUtilities);

				TableSchema.TableColumn colvarFuel = new TableSchema.TableColumn(schema);
				colvarFuel.ColumnName = "Fuel";
				colvarFuel.DataType = DbType.Currency;
				colvarFuel.MaxLength = 0;
				colvarFuel.AutoIncrement = false;
				colvarFuel.IsNullable = true;
				colvarFuel.IsPrimaryKey = false;
				colvarFuel.IsForeignKey = false;
				colvarFuel.IsReadOnly = false;
				colvarFuel.DefaultSetting = @"";
				colvarFuel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFuel);

				TableSchema.TableColumn colvarFurniture = new TableSchema.TableColumn(schema);
				colvarFurniture.ColumnName = "Furniture";
				colvarFurniture.DataType = DbType.Currency;
				colvarFurniture.MaxLength = 0;
				colvarFurniture.AutoIncrement = false;
				colvarFurniture.IsNullable = true;
				colvarFurniture.IsPrimaryKey = false;
				colvarFurniture.IsForeignKey = false;
				colvarFurniture.IsReadOnly = false;
				colvarFurniture.DefaultSetting = @"";
				colvarFurniture.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFurniture);

				TableSchema.TableColumn colvarCellPhoneCredit = new TableSchema.TableColumn(schema);
				colvarCellPhoneCredit.ColumnName = "CellPhoneCredit";
				colvarCellPhoneCredit.DataType = DbType.Currency;
				colvarCellPhoneCredit.MaxLength = 0;
				colvarCellPhoneCredit.AutoIncrement = false;
				colvarCellPhoneCredit.IsNullable = true;
				colvarCellPhoneCredit.IsPrimaryKey = false;
				colvarCellPhoneCredit.IsForeignKey = false;
				colvarCellPhoneCredit.IsReadOnly = false;
				colvarCellPhoneCredit.DefaultSetting = @"";
				colvarCellPhoneCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellPhoneCredit);

				TableSchema.TableColumn colvarGasCredit = new TableSchema.TableColumn(schema);
				colvarGasCredit.ColumnName = "GasCredit";
				colvarGasCredit.DataType = DbType.Currency;
				colvarGasCredit.MaxLength = 0;
				colvarGasCredit.AutoIncrement = false;
				colvarGasCredit.IsNullable = true;
				colvarGasCredit.IsPrimaryKey = false;
				colvarGasCredit.IsForeignKey = false;
				colvarGasCredit.IsReadOnly = false;
				colvarGasCredit.DefaultSetting = @"";
				colvarGasCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGasCredit);

				TableSchema.TableColumn colvarRentExempt = new TableSchema.TableColumn(schema);
				colvarRentExempt.ColumnName = "RentExempt";
				colvarRentExempt.DataType = DbType.Boolean;
				colvarRentExempt.MaxLength = 0;
				colvarRentExempt.AutoIncrement = false;
				colvarRentExempt.IsNullable = false;
				colvarRentExempt.IsPrimaryKey = false;
				colvarRentExempt.IsForeignKey = false;
				colvarRentExempt.IsReadOnly = false;
				colvarRentExempt.DefaultSetting = @"((0))";
				colvarRentExempt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentExempt);

				TableSchema.TableColumn colvarIsServiceTech = new TableSchema.TableColumn(schema);
				colvarIsServiceTech.ColumnName = "IsServiceTech";
				colvarIsServiceTech.DataType = DbType.Boolean;
				colvarIsServiceTech.MaxLength = 0;
				colvarIsServiceTech.AutoIncrement = false;
				colvarIsServiceTech.IsNullable = false;
				colvarIsServiceTech.IsPrimaryKey = false;
				colvarIsServiceTech.IsForeignKey = false;
				colvarIsServiceTech.IsReadOnly = false;
				colvarIsServiceTech.DefaultSetting = @"((0))";
				colvarIsServiceTech.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsServiceTech);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = true;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = true;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "MC_PoliticalStates";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = true;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = true;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"";
				colvarCountryId.ForeignKeyTableName = "MC_PoliticalCountrys";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = true;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.String;
				colvarPostalCode.MaxLength = 10;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = true;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarCBxSocialSecCard = new TableSchema.TableColumn(schema);
				colvarCBxSocialSecCard.ColumnName = "CBxSocialSecCard";
				colvarCBxSocialSecCard.DataType = DbType.Boolean;
				colvarCBxSocialSecCard.MaxLength = 0;
				colvarCBxSocialSecCard.AutoIncrement = false;
				colvarCBxSocialSecCard.IsNullable = true;
				colvarCBxSocialSecCard.IsPrimaryKey = false;
				colvarCBxSocialSecCard.IsForeignKey = false;
				colvarCBxSocialSecCard.IsReadOnly = false;
				colvarCBxSocialSecCard.DefaultSetting = @"";
				colvarCBxSocialSecCard.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCBxSocialSecCard);

				TableSchema.TableColumn colvarCBxDriversLicense = new TableSchema.TableColumn(schema);
				colvarCBxDriversLicense.ColumnName = "CBxDriversLicense";
				colvarCBxDriversLicense.DataType = DbType.Boolean;
				colvarCBxDriversLicense.MaxLength = 0;
				colvarCBxDriversLicense.AutoIncrement = false;
				colvarCBxDriversLicense.IsNullable = true;
				colvarCBxDriversLicense.IsPrimaryKey = false;
				colvarCBxDriversLicense.IsForeignKey = false;
				colvarCBxDriversLicense.IsReadOnly = false;
				colvarCBxDriversLicense.DefaultSetting = @"";
				colvarCBxDriversLicense.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCBxDriversLicense);

				TableSchema.TableColumn colvarCBxW4 = new TableSchema.TableColumn(schema);
				colvarCBxW4.ColumnName = "CBxW4";
				colvarCBxW4.DataType = DbType.Boolean;
				colvarCBxW4.MaxLength = 0;
				colvarCBxW4.AutoIncrement = false;
				colvarCBxW4.IsNullable = true;
				colvarCBxW4.IsPrimaryKey = false;
				colvarCBxW4.IsForeignKey = false;
				colvarCBxW4.IsReadOnly = false;
				colvarCBxW4.DefaultSetting = @"";
				colvarCBxW4.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCBxW4);

				TableSchema.TableColumn colvarCBxI9 = new TableSchema.TableColumn(schema);
				colvarCBxI9.ColumnName = "CBxI9";
				colvarCBxI9.DataType = DbType.Boolean;
				colvarCBxI9.MaxLength = 0;
				colvarCBxI9.AutoIncrement = false;
				colvarCBxI9.IsNullable = true;
				colvarCBxI9.IsPrimaryKey = false;
				colvarCBxI9.IsForeignKey = false;
				colvarCBxI9.IsReadOnly = false;
				colvarCBxI9.DefaultSetting = @"";
				colvarCBxI9.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCBxI9);

				TableSchema.TableColumn colvarCBxW9 = new TableSchema.TableColumn(schema);
				colvarCBxW9.ColumnName = "CBxW9";
				colvarCBxW9.DataType = DbType.Boolean;
				colvarCBxW9.MaxLength = 0;
				colvarCBxW9.AutoIncrement = false;
				colvarCBxW9.IsNullable = true;
				colvarCBxW9.IsPrimaryKey = false;
				colvarCBxW9.IsForeignKey = false;
				colvarCBxW9.IsReadOnly = false;
				colvarCBxW9.DefaultSetting = @"";
				colvarCBxW9.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCBxW9);

				TableSchema.TableColumn colvarPersonalMultiple = new TableSchema.TableColumn(schema);
				colvarPersonalMultiple.ColumnName = "PersonalMultiple";
				colvarPersonalMultiple.DataType = DbType.Int32;
				colvarPersonalMultiple.MaxLength = 0;
				colvarPersonalMultiple.AutoIncrement = false;
				colvarPersonalMultiple.IsNullable = true;
				colvarPersonalMultiple.IsPrimaryKey = false;
				colvarPersonalMultiple.IsForeignKey = false;
				colvarPersonalMultiple.IsReadOnly = false;
				colvarPersonalMultiple.DefaultSetting = @"";
				colvarPersonalMultiple.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPersonalMultiple);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.Int32;
				colvarCreatedByID.MaxLength = 0;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"((1))";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.Int32;
				colvarModifiedByID.MaxLength = 0;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = true;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"((1))";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_Recruits",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_Recruit LoadFrom(RU_Recruit item)
		{
			RU_Recruit result = new RU_Recruit();
			if (item.RecruitID != default(int)) {
				result.LoadByKey(item.RecruitID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public int UserId {
			get { return GetColumnValue<int>(Columns.UserId); }
			set {
				SetColumnValue(Columns.UserId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserId));
			}
		}
		[DataMember]
		public short UserTypeId {
			get { return GetColumnValue<short>(Columns.UserTypeId); }
			set {
				SetColumnValue(Columns.UserTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeId));
			}
		}
		[DataMember]
		public int? ReportsToId {
			get { return GetColumnValue<int?>(Columns.ReportsToId); }
			set {
				SetColumnValue(Columns.ReportsToId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportsToId));
			}
		}
		[DataMember]
		public int? CurrentAddressId {
			get { return GetColumnValue<int?>(Columns.CurrentAddressId); }
			set {
				SetColumnValue(Columns.CurrentAddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CurrentAddressId));
			}
		}
		[DataMember]
		public int SeasonId {
			get { return GetColumnValue<int>(Columns.SeasonId); }
			set {
				SetColumnValue(Columns.SeasonId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonId));
			}
		}
		[DataMember]
		public int? OwnerApprovalId {
			get { return GetColumnValue<int?>(Columns.OwnerApprovalId); }
			set {
				SetColumnValue(Columns.OwnerApprovalId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OwnerApprovalId));
			}
		}
		[DataMember]
		public int? TeamId {
			get { return GetColumnValue<int?>(Columns.TeamId); }
			set {
				SetColumnValue(Columns.TeamId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamId));
			}
		}
		[DataMember]
		public int? PayScaleId {
			get { return GetColumnValue<int?>(Columns.PayScaleId); }
			set {
				SetColumnValue(Columns.PayScaleId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScaleId));
			}
		}
		[DataMember]
		public short? SchoolId {
			get { return GetColumnValue<short?>(Columns.SchoolId); }
			set {
				SetColumnValue(Columns.SchoolId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SchoolId));
			}
		}
		[DataMember]
		public int? ShackingUpId {
			get { return GetColumnValue<int?>(Columns.ShackingUpId); }
			set {
				SetColumnValue(Columns.ShackingUpId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShackingUpId));
			}
		}
		[DataMember]
		public int? RecruitCohabbitTypeId {
			get { return GetColumnValue<int?>(Columns.RecruitCohabbitTypeId); }
			set {
				SetColumnValue(Columns.RecruitCohabbitTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitCohabbitTypeId));
			}
		}
		[DataMember]
		public int? AlternatePayScheduleId {
			get { return GetColumnValue<int?>(Columns.AlternatePayScheduleId); }
			set {
				SetColumnValue(Columns.AlternatePayScheduleId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AlternatePayScheduleId));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string Location {
			get { return GetColumnValue<string>(Columns.Location); }
			set {
				SetColumnValue(Columns.Location, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Location));
			}
		}
		[DataMember]
		public DateTime? OwnerApprovalDate {
			get { return GetColumnValue<DateTime?>(Columns.OwnerApprovalDate); }
			set {
				SetColumnValue(Columns.OwnerApprovalDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OwnerApprovalDate));
			}
		}
		[DataMember]
		public DateTime? ManagerApprovalDate {
			get { return GetColumnValue<DateTime?>(Columns.ManagerApprovalDate); }
			set {
				SetColumnValue(Columns.ManagerApprovalDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagerApprovalDate));
			}
		}
		[DataMember]
		public string EmergencyName {
			get { return GetColumnValue<string>(Columns.EmergencyName); }
			set {
				SetColumnValue(Columns.EmergencyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyName));
			}
		}
		[DataMember]
		public string EmergencyPhone {
			get { return GetColumnValue<string>(Columns.EmergencyPhone); }
			set {
				SetColumnValue(Columns.EmergencyPhone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyPhone));
			}
		}
		[DataMember]
		public string EmergencyRelationship {
			get { return GetColumnValue<string>(Columns.EmergencyRelationship); }
			set {
				SetColumnValue(Columns.EmergencyRelationship, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyRelationship));
			}
		}
		[DataMember]
		public bool IsRecruiter {
			get { return GetColumnValue<bool>(Columns.IsRecruiter); }
			set {
				SetColumnValue(Columns.IsRecruiter, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsRecruiter));
			}
		}
		[DataMember]
		public string PreviousSummer {
			get { return GetColumnValue<string>(Columns.PreviousSummer); }
			set {
				SetColumnValue(Columns.PreviousSummer, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreviousSummer));
			}
		}
		[DataMember]
		public DateTime? SignatureDate {
			get { return GetColumnValue<DateTime?>(Columns.SignatureDate); }
			set {
				SetColumnValue(Columns.SignatureDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SignatureDate));
			}
		}
		[DataMember]
		public DateTime? HireDate {
			get { return GetColumnValue<DateTime?>(Columns.HireDate); }
			set {
				SetColumnValue(Columns.HireDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HireDate));
			}
		}
		[DataMember]
		public int? GPExemptions {
			get { return GetColumnValue<int?>(Columns.GPExemptions); }
			set {
				SetColumnValue(Columns.GPExemptions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPExemptions));
			}
		}
		[DataMember]
		public byte? GPW4Allowances {
			get { return GetColumnValue<byte?>(Columns.GPW4Allowances); }
			set {
				SetColumnValue(Columns.GPW4Allowances, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPW4Allowances));
			}
		}
		[DataMember]
		public string GPW9Name {
			get { return GetColumnValue<string>(Columns.GPW9Name); }
			set {
				SetColumnValue(Columns.GPW9Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPW9Name));
			}
		}
		[DataMember]
		public string GPW9BusinessName {
			get { return GetColumnValue<string>(Columns.GPW9BusinessName); }
			set {
				SetColumnValue(Columns.GPW9BusinessName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPW9BusinessName));
			}
		}
		[DataMember]
		public string GPW9TIN {
			get { return GetColumnValue<string>(Columns.GPW9TIN); }
			set {
				SetColumnValue(Columns.GPW9TIN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPW9TIN));
			}
		}
		[DataMember]
		public int SocialSecCardStatusID {
			get { return GetColumnValue<int>(Columns.SocialSecCardStatusID); }
			set {
				SetColumnValue(Columns.SocialSecCardStatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SocialSecCardStatusID));
			}
		}
		[DataMember]
		public int DriversLicenseStatusID {
			get { return GetColumnValue<int>(Columns.DriversLicenseStatusID); }
			set {
				SetColumnValue(Columns.DriversLicenseStatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DriversLicenseStatusID));
			}
		}
		[DataMember]
		public int W4StatusID {
			get { return GetColumnValue<int>(Columns.W4StatusID); }
			set {
				SetColumnValue(Columns.W4StatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.W4StatusID));
			}
		}
		[DataMember]
		public int I9StatusID {
			get { return GetColumnValue<int>(Columns.I9StatusID); }
			set {
				SetColumnValue(Columns.I9StatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.I9StatusID));
			}
		}
		[DataMember]
		public int W9StatusID {
			get { return GetColumnValue<int>(Columns.W9StatusID); }
			set {
				SetColumnValue(Columns.W9StatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.W9StatusID));
			}
		}
		[DataMember]
		public string SocialSecCardNotes {
			get { return GetColumnValue<string>(Columns.SocialSecCardNotes); }
			set {
				SetColumnValue(Columns.SocialSecCardNotes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SocialSecCardNotes));
			}
		}
		[DataMember]
		public string DriversLicenseNotes {
			get { return GetColumnValue<string>(Columns.DriversLicenseNotes); }
			set {
				SetColumnValue(Columns.DriversLicenseNotes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DriversLicenseNotes));
			}
		}
		[DataMember]
		public string W4Notes {
			get { return GetColumnValue<string>(Columns.W4Notes); }
			set {
				SetColumnValue(Columns.W4Notes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.W4Notes));
			}
		}
		[DataMember]
		public string I9Notes {
			get { return GetColumnValue<string>(Columns.I9Notes); }
			set {
				SetColumnValue(Columns.I9Notes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.I9Notes));
			}
		}
		[DataMember]
		public string W9Notes {
			get { return GetColumnValue<string>(Columns.W9Notes); }
			set {
				SetColumnValue(Columns.W9Notes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.W9Notes));
			}
		}
		[DataMember]
		public string EIN {
			get { return GetColumnValue<string>(Columns.EIN); }
			set {
				SetColumnValue(Columns.EIN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EIN));
			}
		}
		[DataMember]
		public string SUTA {
			get { return GetColumnValue<string>(Columns.SUTA); }
			set {
				SetColumnValue(Columns.SUTA, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SUTA));
			}
		}
		[DataMember]
		public string WorkersComp {
			get { return GetColumnValue<string>(Columns.WorkersComp); }
			set {
				SetColumnValue(Columns.WorkersComp, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WorkersComp));
			}
		}
		[DataMember]
		public string FedFilingStatus {
			get { return GetColumnValue<string>(Columns.FedFilingStatus); }
			set {
				SetColumnValue(Columns.FedFilingStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FedFilingStatus));
			}
		}
		[DataMember]
		public string EICFilingStatus {
			get { return GetColumnValue<string>(Columns.EICFilingStatus); }
			set {
				SetColumnValue(Columns.EICFilingStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EICFilingStatus));
			}
		}
		[DataMember]
		public string TaxWitholdingState {
			get { return GetColumnValue<string>(Columns.TaxWitholdingState); }
			set {
				SetColumnValue(Columns.TaxWitholdingState, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TaxWitholdingState));
			}
		}
		[DataMember]
		public string StateFilingStatus {
			get { return GetColumnValue<string>(Columns.StateFilingStatus); }
			set {
				SetColumnValue(Columns.StateFilingStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateFilingStatus));
			}
		}
		[DataMember]
		public int? GPDependents {
			get { return GetColumnValue<int?>(Columns.GPDependents); }
			set {
				SetColumnValue(Columns.GPDependents, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPDependents));
			}
		}
		[DataMember]
		public bool? CriminalOffense {
			get { return GetColumnValue<bool?>(Columns.CriminalOffense); }
			set {
				SetColumnValue(Columns.CriminalOffense, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CriminalOffense));
			}
		}
		[DataMember]
		public string Offense {
			get { return GetColumnValue<string>(Columns.Offense); }
			set {
				SetColumnValue(Columns.Offense, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Offense));
			}
		}
		[DataMember]
		public string OffenseExplanation {
			get { return GetColumnValue<string>(Columns.OffenseExplanation); }
			set {
				SetColumnValue(Columns.OffenseExplanation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OffenseExplanation));
			}
		}
		[DataMember]
		public decimal? Rent {
			get { return GetColumnValue<decimal?>(Columns.Rent); }
			set {
				SetColumnValue(Columns.Rent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Rent));
			}
		}
		[DataMember]
		public decimal? Pet {
			get { return GetColumnValue<decimal?>(Columns.Pet); }
			set {
				SetColumnValue(Columns.Pet, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Pet));
			}
		}
		[DataMember]
		public decimal? Utilities {
			get { return GetColumnValue<decimal?>(Columns.Utilities); }
			set {
				SetColumnValue(Columns.Utilities, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Utilities));
			}
		}
		[DataMember]
		public decimal? Fuel {
			get { return GetColumnValue<decimal?>(Columns.Fuel); }
			set {
				SetColumnValue(Columns.Fuel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Fuel));
			}
		}
		[DataMember]
		public decimal? Furniture {
			get { return GetColumnValue<decimal?>(Columns.Furniture); }
			set {
				SetColumnValue(Columns.Furniture, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Furniture));
			}
		}
		[DataMember]
		public decimal? CellPhoneCredit {
			get { return GetColumnValue<decimal?>(Columns.CellPhoneCredit); }
			set {
				SetColumnValue(Columns.CellPhoneCredit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellPhoneCredit));
			}
		}
		[DataMember]
		public decimal? GasCredit {
			get { return GetColumnValue<decimal?>(Columns.GasCredit); }
			set {
				SetColumnValue(Columns.GasCredit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GasCredit));
			}
		}
		[DataMember]
		public bool RentExempt {
			get { return GetColumnValue<bool>(Columns.RentExempt); }
			set {
				SetColumnValue(Columns.RentExempt, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentExempt));
			}
		}
		[DataMember]
		public bool IsServiceTech {
			get { return GetColumnValue<bool>(Columns.IsServiceTech); }
			set {
				SetColumnValue(Columns.IsServiceTech, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsServiceTech));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set {
				SetColumnValue(Columns.CountryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryId));
			}
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set {
				SetColumnValue(Columns.StreetAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress));
			}
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set {
				SetColumnValue(Columns.StreetAddress2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress2));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set {
				SetColumnValue(Columns.PostalCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostalCode));
			}
		}
		[DataMember]
		public bool? CBxSocialSecCard {
			get { return GetColumnValue<bool?>(Columns.CBxSocialSecCard); }
			set {
				SetColumnValue(Columns.CBxSocialSecCard, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CBxSocialSecCard));
			}
		}
		[DataMember]
		public bool? CBxDriversLicense {
			get { return GetColumnValue<bool?>(Columns.CBxDriversLicense); }
			set {
				SetColumnValue(Columns.CBxDriversLicense, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CBxDriversLicense));
			}
		}
		[DataMember]
		public bool? CBxW4 {
			get { return GetColumnValue<bool?>(Columns.CBxW4); }
			set {
				SetColumnValue(Columns.CBxW4, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CBxW4));
			}
		}
		[DataMember]
		public bool? CBxI9 {
			get { return GetColumnValue<bool?>(Columns.CBxI9); }
			set {
				SetColumnValue(Columns.CBxI9, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CBxI9));
			}
		}
		[DataMember]
		public bool? CBxW9 {
			get { return GetColumnValue<bool?>(Columns.CBxW9); }
			set {
				SetColumnValue(Columns.CBxW9, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CBxW9));
			}
		}
		[DataMember]
		public int? PersonalMultiple {
			get { return GetColumnValue<int?>(Columns.PersonalMultiple); }
			set {
				SetColumnValue(Columns.PersonalMultiple, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PersonalMultiple));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public int? CreatedByID {
			get { return GetColumnValue<int?>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public int? ModifiedByID {
			get { return GetColumnValue<int?>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime? ModifiedDate {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_PoliticalCountry _Country;
		//Relationship: FK_RU_Recruits_MC_PoliticalCountrys
		public MC_PoliticalCountry Country
		{
			get
			{
				if(_Country == null) {
					_Country = MC_PoliticalCountry.FetchByID(this.CountryId);
				}
				return _Country;
			}
			set
			{
				SetColumnValue("CountryId", value.CountryID);
				_Country = value;
			}
		}

		private MC_PoliticalState _State;
		//Relationship: FK_RU_Recruits_MC_PoliticalStates
		public MC_PoliticalState State
		{
			get
			{
				if(_State == null) {
					_State = MC_PoliticalState.FetchByID(this.StateId);
				}
				return _State;
			}
			set
			{
				SetColumnValue("StateId", value.StateID);
				_State = value;
			}
		}

		private PR_PaySchedule _AlternatePaySchedule;
		//Relationship: FK_RU_Recruits_PR_PaySchedules
		public PR_PaySchedule AlternatePaySchedule
		{
			get
			{
				if(_AlternatePaySchedule == null) {
					_AlternatePaySchedule = PR_PaySchedule.FetchByID(this.AlternatePayScheduleId);
				}
				return _AlternatePaySchedule;
			}
			set
			{
				SetColumnValue("AlternatePayScheduleId", value.PayScheduleID);
				_AlternatePaySchedule = value;
			}
		}

		private RU_Payscale _PayScale;
		//Relationship: FK_RU_Recruits_RU_Payscales
		public RU_Payscale PayScale
		{
			get
			{
				if(_PayScale == null) {
					_PayScale = RU_Payscale.FetchByID(this.PayScaleId);
				}
				return _PayScale;
			}
			set
			{
				SetColumnValue("PayScaleId", value.PayscaleID);
				_PayScale = value;
			}
		}

		private RU_RecruitAddress _CurrentAddress;
		//Relationship: FK_RU_Recruits_RU_RecruitAddresses
		public RU_RecruitAddress CurrentAddress
		{
			get
			{
				if(_CurrentAddress == null) {
					_CurrentAddress = RU_RecruitAddress.FetchByID(this.CurrentAddressId);
				}
				return _CurrentAddress;
			}
			set
			{
				SetColumnValue("CurrentAddressId", value.AddressId);
				_CurrentAddress = value;
			}
		}

		private RU_Recruit _ReportsTo;
		//Relationship: FK_RU_Recruits_RU_Recruits
		public RU_Recruit ReportsTo
		{
			get
			{
				if(_ReportsTo == null) {
					_ReportsTo = RU_Recruit.FetchByID(this.ReportsToId);
				}
				return _ReportsTo;
			}
			set
			{
				SetColumnValue("ReportsToId", value.RecruitID);
				_ReportsTo = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_RU_Recruits_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonId);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonId", value.SeasonID);
				_Season = value;
			}
		}

		private RU_Team _Team;
		//Relationship: FK_RU_Recruits_RU_Teams
		public RU_Team Team
		{
			get
			{
				if(_Team == null) {
					_Team = RU_Team.FetchByID(this.TeamId);
				}
				return _Team;
			}
			set
			{
				SetColumnValue("TeamId", value.TeamID);
				_Team = value;
			}
		}

		private RU_User _User;
		//Relationship: FK_RU_Recruits_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserId);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserId", value.UserID);
				_User = value;
			}
		}

		private RU_UserType _UserType;
		//Relationship: FK_RU_Recruits_RU_UserType
		public RU_UserType UserType
		{
			get
			{
				if(_UserType == null) {
					_UserType = RU_UserType.FetchByID(this.UserTypeId);
				}
				return _UserType;
			}
			set
			{
				SetColumnValue("UserTypeId", value.UserTypeID);
				_UserType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RecruitID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UserTypeIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ReportsToIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CurrentAddressIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SeasonIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn OwnerApprovalIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn TeamIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PayScaleIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn SchoolIdColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ShackingUpIdColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn RecruitCohabbitTypeIdColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn AlternatePayScheduleIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn LocationColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn OwnerApprovalDateColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ManagerApprovalDateColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn EmergencyNameColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn EmergencyPhoneColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn EmergencyRelationshipColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsRecruiterColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn PreviousSummerColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn SignatureDateColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn HireDateColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn GPExemptionsColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn GPW4AllowancesColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn GPW9NameColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn GPW9BusinessNameColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn GPW9TINColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn SocialSecCardStatusIDColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn DriversLicenseStatusIDColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn W4StatusIDColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn I9StatusIDColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn W9StatusIDColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn SocialSecCardNotesColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn DriversLicenseNotesColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn W4NotesColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn I9NotesColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn W9NotesColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn EINColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn SUTAColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn WorkersCompColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn FedFilingStatusColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn EICFilingStatusColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn TaxWitholdingStateColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn StateFilingStatusColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn GPDependentsColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn CriminalOffenseColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn OffenseColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn OffenseExplanationColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn RentColumn
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn PetColumn
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn UtilitiesColumn
		{
			get { return Schema.Columns[52]; }
		}
		public static TableSchema.TableColumn FuelColumn
		{
			get { return Schema.Columns[53]; }
		}
		public static TableSchema.TableColumn FurnitureColumn
		{
			get { return Schema.Columns[54]; }
		}
		public static TableSchema.TableColumn CellPhoneCreditColumn
		{
			get { return Schema.Columns[55]; }
		}
		public static TableSchema.TableColumn GasCreditColumn
		{
			get { return Schema.Columns[56]; }
		}
		public static TableSchema.TableColumn RentExemptColumn
		{
			get { return Schema.Columns[57]; }
		}
		public static TableSchema.TableColumn IsServiceTechColumn
		{
			get { return Schema.Columns[58]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[59]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[60]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[61]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[62]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[63]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[64]; }
		}
		public static TableSchema.TableColumn CBxSocialSecCardColumn
		{
			get { return Schema.Columns[65]; }
		}
		public static TableSchema.TableColumn CBxDriversLicenseColumn
		{
			get { return Schema.Columns[66]; }
		}
		public static TableSchema.TableColumn CBxW4Column
		{
			get { return Schema.Columns[67]; }
		}
		public static TableSchema.TableColumn CBxI9Column
		{
			get { return Schema.Columns[68]; }
		}
		public static TableSchema.TableColumn CBxW9Column
		{
			get { return Schema.Columns[69]; }
		}
		public static TableSchema.TableColumn PersonalMultipleColumn
		{
			get { return Schema.Columns[70]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[71]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[72]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[73]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[74]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[75]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[76]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[77]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[78]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[79]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[80]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string UserId = @"UserId";
			public static readonly string UserTypeId = @"UserTypeId";
			public static readonly string ReportsToId = @"ReportsToId";
			public static readonly string CurrentAddressId = @"CurrentAddressId";
			public static readonly string SeasonId = @"SeasonId";
			public static readonly string OwnerApprovalId = @"OwnerApprovalId";
			public static readonly string TeamId = @"TeamId";
			public static readonly string PayScaleId = @"PayScaleId";
			public static readonly string SchoolId = @"SchoolId";
			public static readonly string ShackingUpId = @"ShackingUpId";
			public static readonly string RecruitCohabbitTypeId = @"RecruitCohabbitTypeId";
			public static readonly string AlternatePayScheduleId = @"AlternatePayScheduleId";
			public static readonly string DealerId = @"DealerId";
			public static readonly string Location = @"Location";
			public static readonly string OwnerApprovalDate = @"OwnerApprovalDate";
			public static readonly string ManagerApprovalDate = @"ManagerApprovalDate";
			public static readonly string EmergencyName = @"EmergencyName";
			public static readonly string EmergencyPhone = @"EmergencyPhone";
			public static readonly string EmergencyRelationship = @"EmergencyRelationship";
			public static readonly string IsRecruiter = @"IsRecruiter";
			public static readonly string PreviousSummer = @"PreviousSummer";
			public static readonly string SignatureDate = @"SignatureDate";
			public static readonly string HireDate = @"HireDate";
			public static readonly string GPExemptions = @"GPExemptions";
			public static readonly string GPW4Allowances = @"GPW4Allowances";
			public static readonly string GPW9Name = @"GPW9Name";
			public static readonly string GPW9BusinessName = @"GPW9BusinessName";
			public static readonly string GPW9TIN = @"GPW9TIN";
			public static readonly string SocialSecCardStatusID = @"SocialSecCardStatusID";
			public static readonly string DriversLicenseStatusID = @"DriversLicenseStatusID";
			public static readonly string W4StatusID = @"W4StatusID";
			public static readonly string I9StatusID = @"I9StatusID";
			public static readonly string W9StatusID = @"W9StatusID";
			public static readonly string SocialSecCardNotes = @"SocialSecCardNotes";
			public static readonly string DriversLicenseNotes = @"DriversLicenseNotes";
			public static readonly string W4Notes = @"W4Notes";
			public static readonly string I9Notes = @"I9Notes";
			public static readonly string W9Notes = @"W9Notes";
			public static readonly string EIN = @"EIN";
			public static readonly string SUTA = @"SUTA";
			public static readonly string WorkersComp = @"WorkersComp";
			public static readonly string FedFilingStatus = @"FedFilingStatus";
			public static readonly string EICFilingStatus = @"EICFilingStatus";
			public static readonly string TaxWitholdingState = @"TaxWitholdingState";
			public static readonly string StateFilingStatus = @"StateFilingStatus";
			public static readonly string GPDependents = @"GPDependents";
			public static readonly string CriminalOffense = @"CriminalOffense";
			public static readonly string Offense = @"Offense";
			public static readonly string OffenseExplanation = @"OffenseExplanation";
			public static readonly string Rent = @"Rent";
			public static readonly string Pet = @"Pet";
			public static readonly string Utilities = @"Utilities";
			public static readonly string Fuel = @"Fuel";
			public static readonly string Furniture = @"Furniture";
			public static readonly string CellPhoneCredit = @"CellPhoneCredit";
			public static readonly string GasCredit = @"GasCredit";
			public static readonly string RentExempt = @"RentExempt";
			public static readonly string IsServiceTech = @"IsServiceTech";
			public static readonly string StateId = @"StateId";
			public static readonly string CountryId = @"CountryId";
			public static readonly string StreetAddress = @"StreetAddress";
			public static readonly string StreetAddress2 = @"StreetAddress2";
			public static readonly string City = @"City";
			public static readonly string PostalCode = @"PostalCode";
			public static readonly string CBxSocialSecCard = @"CBxSocialSecCard";
			public static readonly string CBxDriversLicense = @"CBxDriversLicense";
			public static readonly string CBxW4 = @"CBxW4";
			public static readonly string CBxI9 = @"CBxI9";
			public static readonly string CBxW9 = @"CBxW9";
			public static readonly string PersonalMultiple = @"PersonalMultiple";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RecruitID; }
		}
		*/

		#region Foreign Collections

		private RU_RecruitSeasonGoalCollection _RU_RecruitSeasonGoalsCol;
		//Relationship: FK_RU_RecruitGoals_RU_Recruits
		public RU_RecruitSeasonGoalCollection RU_RecruitSeasonGoalsCol
		{
			get
			{
				if(_RU_RecruitSeasonGoalsCol == null) {
					_RU_RecruitSeasonGoalsCol = new RU_RecruitSeasonGoalCollection();
					_RU_RecruitSeasonGoalsCol.LoadAndCloseReader(RU_RecruitSeasonGoal.Query()
						.WHERE(RU_RecruitSeasonGoal.Columns.RecruitID, RecruitID).ExecuteReader());
				}
				return _RU_RecruitSeasonGoalsCol;
			}
		}

		private RU_RecruitPolicyAndProcedureCollection _RU_RecruitPolicyAndProceduresCol;
		//Relationship: FK_RU_RecruitPolicyAndProcedures_RU_Recruits
		public RU_RecruitPolicyAndProcedureCollection RU_RecruitPolicyAndProceduresCol
		{
			get
			{
				if(_RU_RecruitPolicyAndProceduresCol == null) {
					_RU_RecruitPolicyAndProceduresCol = new RU_RecruitPolicyAndProcedureCollection();
					_RU_RecruitPolicyAndProceduresCol.LoadAndCloseReader(RU_RecruitPolicyAndProcedure.Query()
						.WHERE(RU_RecruitPolicyAndProcedure.Columns.RecruitId, RecruitID).ExecuteReader());
				}
				return _RU_RecruitPolicyAndProceduresCol;
			}
		}

		private RU_RecruitRegistrationCollection _RU_RecruitRegistrationsCol;
		//Relationship: FK_RU_RecruitRegistration_RU_Recruits
		public RU_RecruitRegistrationCollection RU_RecruitRegistrationsCol
		{
			get
			{
				if(_RU_RecruitRegistrationsCol == null) {
					_RU_RecruitRegistrationsCol = new RU_RecruitRegistrationCollection();
					_RU_RecruitRegistrationsCol.LoadAndCloseReader(RU_RecruitRegistration.Query()
						.WHERE(RU_RecruitRegistration.Columns.ReportsToID, RecruitID).ExecuteReader());
				}
				return _RU_RecruitRegistrationsCol;
			}
		}

		private RU_RecruitCollection _ChildRU_RecruitsCol;
		//Relationship: FK_RU_Recruits_RU_Recruits
		public RU_RecruitCollection ChildRU_RecruitsCol
		{
			get
			{
				if(_ChildRU_RecruitsCol == null) {
					_ChildRU_RecruitsCol = new RU_RecruitCollection();
					_ChildRU_RecruitsCol.LoadAndCloseReader(RU_Recruit.Query()
						.WHERE(RU_Recruit.Columns.ReportsToId, RecruitID).ExecuteReader());
				}
				return _ChildRU_RecruitsCol;
			}
		}

		private RU_RollCallRecordCollection _RU_RollCallRecordsCol;
		//Relationship: FK_RU_RollCallRecords_RU_Recruits
		public RU_RollCallRecordCollection RU_RollCallRecordsCol
		{
			get
			{
				if(_RU_RollCallRecordsCol == null) {
					_RU_RollCallRecordsCol = new RU_RollCallRecordCollection();
					_RU_RollCallRecordsCol.LoadAndCloseReader(RU_RollCallRecord.Query()
						.WHERE(RU_RollCallRecord.Columns.RecruitID, RecruitID).ExecuteReader());
				}
				return _RU_RollCallRecordsCol;
			}
		}

		private RU_TeamLocationRosterCollection _RU_TeamLocationRostersCol;
		//Relationship: FK_RU_TeamLocationRoster_RU_Recruits
		public RU_TeamLocationRosterCollection RU_TeamLocationRostersCol
		{
			get
			{
				if(_RU_TeamLocationRostersCol == null) {
					_RU_TeamLocationRostersCol = new RU_TeamLocationRosterCollection();
					_RU_TeamLocationRostersCol.LoadAndCloseReader(RU_TeamLocationRoster.Query()
						.WHERE(RU_TeamLocationRoster.Columns.RecruitID, RecruitID).ExecuteReader());
				}
				return _RU_TeamLocationRostersCol;
			}
		}

		private RU_TeamLocationsAndUserCollection _RU_TeamLocationsAndUsersCol;
		//Relationship: FK_RU_TeamLocationsAndUsers_RU_Recruits
		public RU_TeamLocationsAndUserCollection RU_TeamLocationsAndUsersCol
		{
			get
			{
				if(_RU_TeamLocationsAndUsersCol == null) {
					_RU_TeamLocationsAndUsersCol = new RU_TeamLocationsAndUserCollection();
					_RU_TeamLocationsAndUsersCol.LoadAndCloseReader(RU_TeamLocationsAndUser.Query()
						.WHERE(RU_TeamLocationsAndUser.Columns.RecruitID, RecruitID).ExecuteReader());
				}
				return _RU_TeamLocationsAndUsersCol;
			}
		}

		private RU_TeamCollection _RU_TeamsCol;
		//Relationship: FK_RU_Teams_RU_Recruits
		public RU_TeamCollection RU_TeamsCol
		{
			get
			{
				if(_RU_TeamsCol == null) {
					_RU_TeamsCol = new RU_TeamCollection();
					_RU_TeamsCol.LoadAndCloseReader(RU_Team.Query()
						.WHERE(RU_Team.Columns.RegionalManagerRecruitId, RecruitID).ExecuteReader());
				}
				return _RU_TeamsCol;
			}
		}

		private RU_TerminationCollection _RU_TerminationsCol;
		//Relationship: FK_RU_Terminations_RU_Recruits
		public RU_TerminationCollection RU_TerminationsCol
		{
			get
			{
				if(_RU_TerminationsCol == null) {
					_RU_TerminationsCol = new RU_TerminationCollection();
					_RU_TerminationsCol.LoadAndCloseReader(RU_Termination.Query()
						.WHERE(RU_Termination.Columns.RecruitID, RecruitID).ExecuteReader());
				}
				return _RU_TerminationsCol;
			}
		}

		private SAE_RecruitTeamMappingCollection _SAE_RecruitTeamMappingsCol;
		//Relationship: FK_SAE_RecruitTeamMappings_RU_Recruits
		public SAE_RecruitTeamMappingCollection SAE_RecruitTeamMappingsCol
		{
			get
			{
				if(_SAE_RecruitTeamMappingsCol == null) {
					_SAE_RecruitTeamMappingsCol = new SAE_RecruitTeamMappingCollection();
					_SAE_RecruitTeamMappingsCol.LoadAndCloseReader(SAE_RecruitTeamMapping.Query()
						.WHERE(SAE_RecruitTeamMapping.Columns.RecruitID, RecruitID).ExecuteReader());
				}
				return _SAE_RecruitTeamMappingsCol;
			}
		}

		private SY_RecruitSurveyCollection _SY_RecruitSurveysCol;
		//Relationship: FK_SY_RecruitSurvey_RU_Recruits
		public SY_RecruitSurveyCollection SY_RecruitSurveysCol
		{
			get
			{
				if(_SY_RecruitSurveysCol == null) {
					_SY_RecruitSurveysCol = new SY_RecruitSurveyCollection();
					_SY_RecruitSurveysCol.LoadAndCloseReader(SY_RecruitSurvey.Query()
						.WHERE(SY_RecruitSurvey.Columns.RecruitID, RecruitID).ExecuteReader());
				}
				return _SY_RecruitSurveysCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_RecruitSeasonGoal class.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitSeasonGoalCollection : ActiveList<RU_RecruitSeasonGoal, RU_RecruitSeasonGoalCollection>
	{
		public static RU_RecruitSeasonGoalCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_RecruitSeasonGoalCollection result = new RU_RecruitSeasonGoalCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_RecruitSeasonGoal item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_RecruitSeasonGoals table.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitSeasonGoal : ActiveRecord<RU_RecruitSeasonGoal>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_RecruitSeasonGoal()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_RecruitSeasonGoals", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = true;
				colvarRecruitID.IsForeignKey = false;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarTotalInstalls = new TableSchema.TableColumn(schema);
				colvarTotalInstalls.ColumnName = "TotalInstalls";
				colvarTotalInstalls.DataType = DbType.Double;
				colvarTotalInstalls.MaxLength = 0;
				colvarTotalInstalls.AutoIncrement = false;
				colvarTotalInstalls.IsNullable = false;
				colvarTotalInstalls.IsPrimaryKey = false;
				colvarTotalInstalls.IsForeignKey = false;
				colvarTotalInstalls.IsReadOnly = false;
				colvarTotalInstalls.DefaultSetting = @"";
				colvarTotalInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalInstalls);

				TableSchema.TableColumn colvarCancelPercent = new TableSchema.TableColumn(schema);
				colvarCancelPercent.ColumnName = "CancelPercent";
				colvarCancelPercent.DataType = DbType.Double;
				colvarCancelPercent.MaxLength = 0;
				colvarCancelPercent.AutoIncrement = false;
				colvarCancelPercent.IsNullable = false;
				colvarCancelPercent.IsPrimaryKey = false;
				colvarCancelPercent.IsForeignKey = false;
				colvarCancelPercent.IsReadOnly = false;
				colvarCancelPercent.DefaultSetting = @"";
				colvarCancelPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelPercent);

				TableSchema.TableColumn colvarSubPercent = new TableSchema.TableColumn(schema);
				colvarSubPercent.ColumnName = "SubPercent";
				colvarSubPercent.DataType = DbType.Double;
				colvarSubPercent.MaxLength = 0;
				colvarSubPercent.AutoIncrement = false;
				colvarSubPercent.IsNullable = false;
				colvarSubPercent.IsPrimaryKey = false;
				colvarSubPercent.IsForeignKey = false;
				colvarSubPercent.IsReadOnly = false;
				colvarSubPercent.DefaultSetting = @"";
				colvarSubPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubPercent);

				TableSchema.TableColumn colvarPassPercent = new TableSchema.TableColumn(schema);
				colvarPassPercent.ColumnName = "PassPercent";
				colvarPassPercent.DataType = DbType.Double;
				colvarPassPercent.MaxLength = 0;
				colvarPassPercent.AutoIncrement = false;
				colvarPassPercent.IsNullable = false;
				colvarPassPercent.IsPrimaryKey = false;
				colvarPassPercent.IsForeignKey = false;
				colvarPassPercent.IsReadOnly = false;
				colvarPassPercent.DefaultSetting = @"";
				colvarPassPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassPercent);

				TableSchema.TableColumn colvarPastDuePercent = new TableSchema.TableColumn(schema);
				colvarPastDuePercent.ColumnName = "PastDuePercent";
				colvarPastDuePercent.DataType = DbType.Double;
				colvarPastDuePercent.MaxLength = 0;
				colvarPastDuePercent.AutoIncrement = false;
				colvarPastDuePercent.IsNullable = false;
				colvarPastDuePercent.IsPrimaryKey = false;
				colvarPastDuePercent.IsForeignKey = false;
				colvarPastDuePercent.IsReadOnly = false;
				colvarPastDuePercent.DefaultSetting = @"";
				colvarPastDuePercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPastDuePercent);

				TableSchema.TableColumn colvarBackendHoldPercent = new TableSchema.TableColumn(schema);
				colvarBackendHoldPercent.ColumnName = "BackendHoldPercent";
				colvarBackendHoldPercent.DataType = DbType.Double;
				colvarBackendHoldPercent.MaxLength = 0;
				colvarBackendHoldPercent.AutoIncrement = false;
				colvarBackendHoldPercent.IsNullable = false;
				colvarBackendHoldPercent.IsPrimaryKey = false;
				colvarBackendHoldPercent.IsForeignKey = false;
				colvarBackendHoldPercent.IsReadOnly = false;
				colvarBackendHoldPercent.DefaultSetting = @"";
				colvarBackendHoldPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBackendHoldPercent);

				TableSchema.TableColumn colvarActivationWaivePercent = new TableSchema.TableColumn(schema);
				colvarActivationWaivePercent.ColumnName = "ActivationWaivePercent";
				colvarActivationWaivePercent.DataType = DbType.Double;
				colvarActivationWaivePercent.MaxLength = 0;
				colvarActivationWaivePercent.AutoIncrement = false;
				colvarActivationWaivePercent.IsNullable = false;
				colvarActivationWaivePercent.IsPrimaryKey = false;
				colvarActivationWaivePercent.IsForeignKey = false;
				colvarActivationWaivePercent.IsReadOnly = false;
				colvarActivationWaivePercent.DefaultSetting = @"";
				colvarActivationWaivePercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationWaivePercent);

				TableSchema.TableColumn colvarCommercialPercent = new TableSchema.TableColumn(schema);
				colvarCommercialPercent.ColumnName = "CommercialPercent";
				colvarCommercialPercent.DataType = DbType.Double;
				colvarCommercialPercent.MaxLength = 0;
				colvarCommercialPercent.AutoIncrement = false;
				colvarCommercialPercent.IsNullable = false;
				colvarCommercialPercent.IsPrimaryKey = false;
				colvarCommercialPercent.IsForeignKey = false;
				colvarCommercialPercent.IsReadOnly = false;
				colvarCommercialPercent.DefaultSetting = @"";
				colvarCommercialPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommercialPercent);

				TableSchema.TableColumn colvarPointBank = new TableSchema.TableColumn(schema);
				colvarPointBank.ColumnName = "PointBank";
				colvarPointBank.DataType = DbType.Double;
				colvarPointBank.MaxLength = 0;
				colvarPointBank.AutoIncrement = false;
				colvarPointBank.IsNullable = false;
				colvarPointBank.IsPrimaryKey = false;
				colvarPointBank.IsForeignKey = false;
				colvarPointBank.IsReadOnly = false;
				colvarPointBank.DefaultSetting = @"";
				colvarPointBank.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPointBank);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.Int32;
				colvarCreatedBy.MaxLength = 0;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.Int32;
				colvarModifiedBy.MaxLength = 0;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_RecruitSeasonGoals",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_RecruitSeasonGoal LoadFrom(RU_RecruitSeasonGoal item)
		{
			RU_RecruitSeasonGoal result = new RU_RecruitSeasonGoal();
			if (item.RecruitID != default(int)) {
				result.LoadByKey(item.RecruitID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public double TotalInstalls {
			get { return GetColumnValue<double>(Columns.TotalInstalls); }
			set {
				SetColumnValue(Columns.TotalInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalInstalls));
			}
		}
		[DataMember]
		public double CancelPercent {
			get { return GetColumnValue<double>(Columns.CancelPercent); }
			set {
				SetColumnValue(Columns.CancelPercent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CancelPercent));
			}
		}
		[DataMember]
		public double SubPercent {
			get { return GetColumnValue<double>(Columns.SubPercent); }
			set {
				SetColumnValue(Columns.SubPercent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubPercent));
			}
		}
		[DataMember]
		public double PassPercent {
			get { return GetColumnValue<double>(Columns.PassPercent); }
			set {
				SetColumnValue(Columns.PassPercent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassPercent));
			}
		}
		[DataMember]
		public double PastDuePercent {
			get { return GetColumnValue<double>(Columns.PastDuePercent); }
			set {
				SetColumnValue(Columns.PastDuePercent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PastDuePercent));
			}
		}
		[DataMember]
		public double BackendHoldPercent {
			get { return GetColumnValue<double>(Columns.BackendHoldPercent); }
			set {
				SetColumnValue(Columns.BackendHoldPercent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BackendHoldPercent));
			}
		}
		[DataMember]
		public double ActivationWaivePercent {
			get { return GetColumnValue<double>(Columns.ActivationWaivePercent); }
			set {
				SetColumnValue(Columns.ActivationWaivePercent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationWaivePercent));
			}
		}
		[DataMember]
		public double CommercialPercent {
			get { return GetColumnValue<double>(Columns.CommercialPercent); }
			set {
				SetColumnValue(Columns.CommercialPercent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CommercialPercent));
			}
		}
		[DataMember]
		public double PointBank {
			get { return GetColumnValue<double>(Columns.PointBank); }
			set {
				SetColumnValue(Columns.PointBank, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PointBank));
			}
		}
		[DataMember]
		public int CreatedBy {
			get { return GetColumnValue<int>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public int ModifiedBy {
			get { return GetColumnValue<int>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Recruit _Recruit;
		//Relationship: FK_RU_RecruitGoals_RU_Recruits
		public RU_Recruit Recruit
		{
			get
			{
				if(_Recruit == null) {
					_Recruit = RU_Recruit.FetchByID(this.RecruitID);
				}
				return _Recruit;
			}
			set
			{
				SetColumnValue("RecruitID", value.RecruitID);
				_Recruit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RecruitID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TotalInstallsColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CancelPercentColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SubPercentColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PassPercentColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn PastDuePercentColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn BackendHoldPercentColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ActivationWaivePercentColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CommercialPercentColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn PointBankColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string TotalInstalls = @"TotalInstalls";
			public static readonly string CancelPercent = @"CancelPercent";
			public static readonly string SubPercent = @"SubPercent";
			public static readonly string PassPercent = @"PassPercent";
			public static readonly string PastDuePercent = @"PastDuePercent";
			public static readonly string BackendHoldPercent = @"BackendHoldPercent";
			public static readonly string ActivationWaivePercent = @"ActivationWaivePercent";
			public static readonly string CommercialPercent = @"CommercialPercent";
			public static readonly string PointBank = @"PointBank";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RecruitID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_RecruitsHistory class.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitsHistoryCollection : ActiveList<RU_RecruitsHistory, RU_RecruitsHistoryCollection>
	{
		public static RU_RecruitsHistoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_RecruitsHistoryCollection result = new RU_RecruitsHistoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_RecruitsHistory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_RecruitsHistory table.
	/// </summary>
	[DataContract]
	public partial class RU_RecruitsHistory : ActiveRecord<RU_RecruitsHistory>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_RecruitsHistory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_RecruitsHistory", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRecruitHistoryID = new TableSchema.TableColumn(schema);
				colvarRecruitHistoryID.ColumnName = "RecruitHistoryID";
				colvarRecruitHistoryID.DataType = DbType.Int64;
				colvarRecruitHistoryID.MaxLength = 0;
				colvarRecruitHistoryID.AutoIncrement = true;
				colvarRecruitHistoryID.IsNullable = false;
				colvarRecruitHistoryID.IsPrimaryKey = true;
				colvarRecruitHistoryID.IsForeignKey = false;
				colvarRecruitHistoryID.IsReadOnly = false;
				colvarRecruitHistoryID.DefaultSetting = @"";
				colvarRecruitHistoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitHistoryID);

				TableSchema.TableColumn colvarHistoryDate = new TableSchema.TableColumn(schema);
				colvarHistoryDate.ColumnName = "HistoryDate";
				colvarHistoryDate.DataType = DbType.DateTime;
				colvarHistoryDate.MaxLength = 0;
				colvarHistoryDate.AutoIncrement = false;
				colvarHistoryDate.IsNullable = false;
				colvarHistoryDate.IsPrimaryKey = false;
				colvarHistoryDate.IsForeignKey = false;
				colvarHistoryDate.IsReadOnly = false;
				colvarHistoryDate.DefaultSetting = @"(getdate())";
				colvarHistoryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHistoryDate);

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = false;
				colvarRecruitID.IsForeignKey = false;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarUserTypeId = new TableSchema.TableColumn(schema);
				colvarUserTypeId.ColumnName = "UserTypeId";
				colvarUserTypeId.DataType = DbType.Int16;
				colvarUserTypeId.MaxLength = 0;
				colvarUserTypeId.AutoIncrement = false;
				colvarUserTypeId.IsNullable = false;
				colvarUserTypeId.IsPrimaryKey = false;
				colvarUserTypeId.IsForeignKey = false;
				colvarUserTypeId.IsReadOnly = false;
				colvarUserTypeId.DefaultSetting = @"";
				colvarUserTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserTypeId);

				TableSchema.TableColumn colvarReportsToID = new TableSchema.TableColumn(schema);
				colvarReportsToID.ColumnName = "ReportsToID";
				colvarReportsToID.DataType = DbType.Int32;
				colvarReportsToID.MaxLength = 0;
				colvarReportsToID.AutoIncrement = false;
				colvarReportsToID.IsNullable = true;
				colvarReportsToID.IsPrimaryKey = false;
				colvarReportsToID.IsForeignKey = false;
				colvarReportsToID.IsReadOnly = false;
				colvarReportsToID.DefaultSetting = @"";
				colvarReportsToID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportsToID);

				TableSchema.TableColumn colvarCurrentAddressID = new TableSchema.TableColumn(schema);
				colvarCurrentAddressID.ColumnName = "CurrentAddressID";
				colvarCurrentAddressID.DataType = DbType.Int32;
				colvarCurrentAddressID.MaxLength = 0;
				colvarCurrentAddressID.AutoIncrement = false;
				colvarCurrentAddressID.IsNullable = true;
				colvarCurrentAddressID.IsPrimaryKey = false;
				colvarCurrentAddressID.IsForeignKey = false;
				colvarCurrentAddressID.IsReadOnly = false;
				colvarCurrentAddressID.DefaultSetting = @"";
				colvarCurrentAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentAddressID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarOwnerApprovalId = new TableSchema.TableColumn(schema);
				colvarOwnerApprovalId.ColumnName = "OwnerApprovalId";
				colvarOwnerApprovalId.DataType = DbType.Int32;
				colvarOwnerApprovalId.MaxLength = 0;
				colvarOwnerApprovalId.AutoIncrement = false;
				colvarOwnerApprovalId.IsNullable = true;
				colvarOwnerApprovalId.IsPrimaryKey = false;
				colvarOwnerApprovalId.IsForeignKey = false;
				colvarOwnerApprovalId.IsReadOnly = false;
				colvarOwnerApprovalId.DefaultSetting = @"";
				colvarOwnerApprovalId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerApprovalId);

				TableSchema.TableColumn colvarTeamID = new TableSchema.TableColumn(schema);
				colvarTeamID.ColumnName = "TeamID";
				colvarTeamID.DataType = DbType.Int32;
				colvarTeamID.MaxLength = 0;
				colvarTeamID.AutoIncrement = false;
				colvarTeamID.IsNullable = true;
				colvarTeamID.IsPrimaryKey = false;
				colvarTeamID.IsForeignKey = false;
				colvarTeamID.IsReadOnly = false;
				colvarTeamID.DefaultSetting = @"";
				colvarTeamID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamID);

				TableSchema.TableColumn colvarPayScaleID = new TableSchema.TableColumn(schema);
				colvarPayScaleID.ColumnName = "PayScaleID";
				colvarPayScaleID.DataType = DbType.Int32;
				colvarPayScaleID.MaxLength = 0;
				colvarPayScaleID.AutoIncrement = false;
				colvarPayScaleID.IsNullable = true;
				colvarPayScaleID.IsPrimaryKey = false;
				colvarPayScaleID.IsForeignKey = false;
				colvarPayScaleID.IsReadOnly = false;
				colvarPayScaleID.DefaultSetting = @"";
				colvarPayScaleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayScaleID);

				TableSchema.TableColumn colvarSchoolId = new TableSchema.TableColumn(schema);
				colvarSchoolId.ColumnName = "SchoolId";
				colvarSchoolId.DataType = DbType.Int16;
				colvarSchoolId.MaxLength = 0;
				colvarSchoolId.AutoIncrement = false;
				colvarSchoolId.IsNullable = true;
				colvarSchoolId.IsPrimaryKey = false;
				colvarSchoolId.IsForeignKey = false;
				colvarSchoolId.IsReadOnly = false;
				colvarSchoolId.DefaultSetting = @"";
				colvarSchoolId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchoolId);

				TableSchema.TableColumn colvarShackingUpId = new TableSchema.TableColumn(schema);
				colvarShackingUpId.ColumnName = "ShackingUpId";
				colvarShackingUpId.DataType = DbType.Int32;
				colvarShackingUpId.MaxLength = 0;
				colvarShackingUpId.AutoIncrement = false;
				colvarShackingUpId.IsNullable = true;
				colvarShackingUpId.IsPrimaryKey = false;
				colvarShackingUpId.IsForeignKey = false;
				colvarShackingUpId.IsReadOnly = false;
				colvarShackingUpId.DefaultSetting = @"";
				colvarShackingUpId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShackingUpId);

				TableSchema.TableColumn colvarRecruitCohabbitTypeId = new TableSchema.TableColumn(schema);
				colvarRecruitCohabbitTypeId.ColumnName = "RecruitCohabbitTypeId";
				colvarRecruitCohabbitTypeId.DataType = DbType.Int32;
				colvarRecruitCohabbitTypeId.MaxLength = 0;
				colvarRecruitCohabbitTypeId.AutoIncrement = false;
				colvarRecruitCohabbitTypeId.IsNullable = true;
				colvarRecruitCohabbitTypeId.IsPrimaryKey = false;
				colvarRecruitCohabbitTypeId.IsForeignKey = false;
				colvarRecruitCohabbitTypeId.IsReadOnly = false;
				colvarRecruitCohabbitTypeId.DefaultSetting = @"";
				colvarRecruitCohabbitTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitCohabbitTypeId);

				TableSchema.TableColumn colvarAlternatePayScheduleID = new TableSchema.TableColumn(schema);
				colvarAlternatePayScheduleID.ColumnName = "AlternatePayScheduleID";
				colvarAlternatePayScheduleID.DataType = DbType.Int32;
				colvarAlternatePayScheduleID.MaxLength = 0;
				colvarAlternatePayScheduleID.AutoIncrement = false;
				colvarAlternatePayScheduleID.IsNullable = true;
				colvarAlternatePayScheduleID.IsPrimaryKey = false;
				colvarAlternatePayScheduleID.IsForeignKey = false;
				colvarAlternatePayScheduleID.IsReadOnly = false;
				colvarAlternatePayScheduleID.DefaultSetting = @"";
				colvarAlternatePayScheduleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlternatePayScheduleID);

				TableSchema.TableColumn colvarLocation = new TableSchema.TableColumn(schema);
				colvarLocation.ColumnName = "Location";
				colvarLocation.DataType = DbType.String;
				colvarLocation.MaxLength = 50;
				colvarLocation.AutoIncrement = false;
				colvarLocation.IsNullable = true;
				colvarLocation.IsPrimaryKey = false;
				colvarLocation.IsForeignKey = false;
				colvarLocation.IsReadOnly = false;
				colvarLocation.DefaultSetting = @"";
				colvarLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocation);

				TableSchema.TableColumn colvarOwnerApprovalDate = new TableSchema.TableColumn(schema);
				colvarOwnerApprovalDate.ColumnName = "OwnerApprovalDate";
				colvarOwnerApprovalDate.DataType = DbType.DateTime;
				colvarOwnerApprovalDate.MaxLength = 0;
				colvarOwnerApprovalDate.AutoIncrement = false;
				colvarOwnerApprovalDate.IsNullable = true;
				colvarOwnerApprovalDate.IsPrimaryKey = false;
				colvarOwnerApprovalDate.IsForeignKey = false;
				colvarOwnerApprovalDate.IsReadOnly = false;
				colvarOwnerApprovalDate.DefaultSetting = @"";
				colvarOwnerApprovalDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOwnerApprovalDate);

				TableSchema.TableColumn colvarManagerApprovalDate = new TableSchema.TableColumn(schema);
				colvarManagerApprovalDate.ColumnName = "ManagerApprovalDate";
				colvarManagerApprovalDate.DataType = DbType.DateTime;
				colvarManagerApprovalDate.MaxLength = 0;
				colvarManagerApprovalDate.AutoIncrement = false;
				colvarManagerApprovalDate.IsNullable = true;
				colvarManagerApprovalDate.IsPrimaryKey = false;
				colvarManagerApprovalDate.IsForeignKey = false;
				colvarManagerApprovalDate.IsReadOnly = false;
				colvarManagerApprovalDate.DefaultSetting = @"";
				colvarManagerApprovalDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManagerApprovalDate);

				TableSchema.TableColumn colvarEmergencyName = new TableSchema.TableColumn(schema);
				colvarEmergencyName.ColumnName = "EmergencyName";
				colvarEmergencyName.DataType = DbType.String;
				colvarEmergencyName.MaxLength = 50;
				colvarEmergencyName.AutoIncrement = false;
				colvarEmergencyName.IsNullable = true;
				colvarEmergencyName.IsPrimaryKey = false;
				colvarEmergencyName.IsForeignKey = false;
				colvarEmergencyName.IsReadOnly = false;
				colvarEmergencyName.DefaultSetting = @"";
				colvarEmergencyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyName);

				TableSchema.TableColumn colvarEmergencyPhone = new TableSchema.TableColumn(schema);
				colvarEmergencyPhone.ColumnName = "EmergencyPhone";
				colvarEmergencyPhone.DataType = DbType.AnsiString;
				colvarEmergencyPhone.MaxLength = 20;
				colvarEmergencyPhone.AutoIncrement = false;
				colvarEmergencyPhone.IsNullable = true;
				colvarEmergencyPhone.IsPrimaryKey = false;
				colvarEmergencyPhone.IsForeignKey = false;
				colvarEmergencyPhone.IsReadOnly = false;
				colvarEmergencyPhone.DefaultSetting = @"";
				colvarEmergencyPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyPhone);

				TableSchema.TableColumn colvarEmergencyRelationship = new TableSchema.TableColumn(schema);
				colvarEmergencyRelationship.ColumnName = "EmergencyRelationship";
				colvarEmergencyRelationship.DataType = DbType.String;
				colvarEmergencyRelationship.MaxLength = 50;
				colvarEmergencyRelationship.AutoIncrement = false;
				colvarEmergencyRelationship.IsNullable = true;
				colvarEmergencyRelationship.IsPrimaryKey = false;
				colvarEmergencyRelationship.IsForeignKey = false;
				colvarEmergencyRelationship.IsReadOnly = false;
				colvarEmergencyRelationship.DefaultSetting = @"";
				colvarEmergencyRelationship.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmergencyRelationship);

				TableSchema.TableColumn colvarIsRecruiter = new TableSchema.TableColumn(schema);
				colvarIsRecruiter.ColumnName = "IsRecruiter";
				colvarIsRecruiter.DataType = DbType.Boolean;
				colvarIsRecruiter.MaxLength = 0;
				colvarIsRecruiter.AutoIncrement = false;
				colvarIsRecruiter.IsNullable = false;
				colvarIsRecruiter.IsPrimaryKey = false;
				colvarIsRecruiter.IsForeignKey = false;
				colvarIsRecruiter.IsReadOnly = false;
				colvarIsRecruiter.DefaultSetting = @"";
				colvarIsRecruiter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsRecruiter);

				TableSchema.TableColumn colvarPreviousSummer = new TableSchema.TableColumn(schema);
				colvarPreviousSummer.ColumnName = "PreviousSummer";
				colvarPreviousSummer.DataType = DbType.String;
				colvarPreviousSummer.MaxLength = 200;
				colvarPreviousSummer.AutoIncrement = false;
				colvarPreviousSummer.IsNullable = true;
				colvarPreviousSummer.IsPrimaryKey = false;
				colvarPreviousSummer.IsForeignKey = false;
				colvarPreviousSummer.IsReadOnly = false;
				colvarPreviousSummer.DefaultSetting = @"";
				colvarPreviousSummer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreviousSummer);

				TableSchema.TableColumn colvarSignatureDate = new TableSchema.TableColumn(schema);
				colvarSignatureDate.ColumnName = "SignatureDate";
				colvarSignatureDate.DataType = DbType.DateTime;
				colvarSignatureDate.MaxLength = 0;
				colvarSignatureDate.AutoIncrement = false;
				colvarSignatureDate.IsNullable = true;
				colvarSignatureDate.IsPrimaryKey = false;
				colvarSignatureDate.IsForeignKey = false;
				colvarSignatureDate.IsReadOnly = false;
				colvarSignatureDate.DefaultSetting = @"";
				colvarSignatureDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSignatureDate);

				TableSchema.TableColumn colvarHireDate = new TableSchema.TableColumn(schema);
				colvarHireDate.ColumnName = "HireDate";
				colvarHireDate.DataType = DbType.DateTime;
				colvarHireDate.MaxLength = 0;
				colvarHireDate.AutoIncrement = false;
				colvarHireDate.IsNullable = true;
				colvarHireDate.IsPrimaryKey = false;
				colvarHireDate.IsForeignKey = false;
				colvarHireDate.IsReadOnly = false;
				colvarHireDate.DefaultSetting = @"";
				colvarHireDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHireDate);

				TableSchema.TableColumn colvarGPExemptions = new TableSchema.TableColumn(schema);
				colvarGPExemptions.ColumnName = "GPExemptions";
				colvarGPExemptions.DataType = DbType.Int32;
				colvarGPExemptions.MaxLength = 0;
				colvarGPExemptions.AutoIncrement = false;
				colvarGPExemptions.IsNullable = true;
				colvarGPExemptions.IsPrimaryKey = false;
				colvarGPExemptions.IsForeignKey = false;
				colvarGPExemptions.IsReadOnly = false;
				colvarGPExemptions.DefaultSetting = @"";
				colvarGPExemptions.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPExemptions);

				TableSchema.TableColumn colvarGPW4Allowances = new TableSchema.TableColumn(schema);
				colvarGPW4Allowances.ColumnName = "GPW4Allowances";
				colvarGPW4Allowances.DataType = DbType.Byte;
				colvarGPW4Allowances.MaxLength = 0;
				colvarGPW4Allowances.AutoIncrement = false;
				colvarGPW4Allowances.IsNullable = true;
				colvarGPW4Allowances.IsPrimaryKey = false;
				colvarGPW4Allowances.IsForeignKey = false;
				colvarGPW4Allowances.IsReadOnly = false;
				colvarGPW4Allowances.DefaultSetting = @"";
				colvarGPW4Allowances.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPW4Allowances);

				TableSchema.TableColumn colvarGPW9Name = new TableSchema.TableColumn(schema);
				colvarGPW9Name.ColumnName = "GPW9Name";
				colvarGPW9Name.DataType = DbType.String;
				colvarGPW9Name.MaxLength = 50;
				colvarGPW9Name.AutoIncrement = false;
				colvarGPW9Name.IsNullable = true;
				colvarGPW9Name.IsPrimaryKey = false;
				colvarGPW9Name.IsForeignKey = false;
				colvarGPW9Name.IsReadOnly = false;
				colvarGPW9Name.DefaultSetting = @"";
				colvarGPW9Name.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPW9Name);

				TableSchema.TableColumn colvarGPW9BusinessName = new TableSchema.TableColumn(schema);
				colvarGPW9BusinessName.ColumnName = "GPW9BusinessName";
				colvarGPW9BusinessName.DataType = DbType.String;
				colvarGPW9BusinessName.MaxLength = 100;
				colvarGPW9BusinessName.AutoIncrement = false;
				colvarGPW9BusinessName.IsNullable = true;
				colvarGPW9BusinessName.IsPrimaryKey = false;
				colvarGPW9BusinessName.IsForeignKey = false;
				colvarGPW9BusinessName.IsReadOnly = false;
				colvarGPW9BusinessName.DefaultSetting = @"";
				colvarGPW9BusinessName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPW9BusinessName);

				TableSchema.TableColumn colvarGPW9TIN = new TableSchema.TableColumn(schema);
				colvarGPW9TIN.ColumnName = "GPW9TIN";
				colvarGPW9TIN.DataType = DbType.AnsiString;
				colvarGPW9TIN.MaxLength = 50;
				colvarGPW9TIN.AutoIncrement = false;
				colvarGPW9TIN.IsNullable = true;
				colvarGPW9TIN.IsPrimaryKey = false;
				colvarGPW9TIN.IsForeignKey = false;
				colvarGPW9TIN.IsReadOnly = false;
				colvarGPW9TIN.DefaultSetting = @"";
				colvarGPW9TIN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPW9TIN);

				TableSchema.TableColumn colvarSocialSecCardStatusID = new TableSchema.TableColumn(schema);
				colvarSocialSecCardStatusID.ColumnName = "SocialSecCardStatusID";
				colvarSocialSecCardStatusID.DataType = DbType.Int32;
				colvarSocialSecCardStatusID.MaxLength = 0;
				colvarSocialSecCardStatusID.AutoIncrement = false;
				colvarSocialSecCardStatusID.IsNullable = false;
				colvarSocialSecCardStatusID.IsPrimaryKey = false;
				colvarSocialSecCardStatusID.IsForeignKey = false;
				colvarSocialSecCardStatusID.IsReadOnly = false;
				colvarSocialSecCardStatusID.DefaultSetting = @"";
				colvarSocialSecCardStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSocialSecCardStatusID);

				TableSchema.TableColumn colvarDriversLicenseStatusID = new TableSchema.TableColumn(schema);
				colvarDriversLicenseStatusID.ColumnName = "DriversLicenseStatusID";
				colvarDriversLicenseStatusID.DataType = DbType.Int32;
				colvarDriversLicenseStatusID.MaxLength = 0;
				colvarDriversLicenseStatusID.AutoIncrement = false;
				colvarDriversLicenseStatusID.IsNullable = false;
				colvarDriversLicenseStatusID.IsPrimaryKey = false;
				colvarDriversLicenseStatusID.IsForeignKey = false;
				colvarDriversLicenseStatusID.IsReadOnly = false;
				colvarDriversLicenseStatusID.DefaultSetting = @"";
				colvarDriversLicenseStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDriversLicenseStatusID);

				TableSchema.TableColumn colvarW4StatusID = new TableSchema.TableColumn(schema);
				colvarW4StatusID.ColumnName = "W4StatusID";
				colvarW4StatusID.DataType = DbType.Int32;
				colvarW4StatusID.MaxLength = 0;
				colvarW4StatusID.AutoIncrement = false;
				colvarW4StatusID.IsNullable = false;
				colvarW4StatusID.IsPrimaryKey = false;
				colvarW4StatusID.IsForeignKey = false;
				colvarW4StatusID.IsReadOnly = false;
				colvarW4StatusID.DefaultSetting = @"";
				colvarW4StatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarW4StatusID);

				TableSchema.TableColumn colvarI9StatusID = new TableSchema.TableColumn(schema);
				colvarI9StatusID.ColumnName = "I9StatusID";
				colvarI9StatusID.DataType = DbType.Int32;
				colvarI9StatusID.MaxLength = 0;
				colvarI9StatusID.AutoIncrement = false;
				colvarI9StatusID.IsNullable = false;
				colvarI9StatusID.IsPrimaryKey = false;
				colvarI9StatusID.IsForeignKey = false;
				colvarI9StatusID.IsReadOnly = false;
				colvarI9StatusID.DefaultSetting = @"";
				colvarI9StatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarI9StatusID);

				TableSchema.TableColumn colvarW9StatusID = new TableSchema.TableColumn(schema);
				colvarW9StatusID.ColumnName = "W9StatusID";
				colvarW9StatusID.DataType = DbType.Int32;
				colvarW9StatusID.MaxLength = 0;
				colvarW9StatusID.AutoIncrement = false;
				colvarW9StatusID.IsNullable = false;
				colvarW9StatusID.IsPrimaryKey = false;
				colvarW9StatusID.IsForeignKey = false;
				colvarW9StatusID.IsReadOnly = false;
				colvarW9StatusID.DefaultSetting = @"";
				colvarW9StatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarW9StatusID);

				TableSchema.TableColumn colvarSocialSecCardNotes = new TableSchema.TableColumn(schema);
				colvarSocialSecCardNotes.ColumnName = "SocialSecCardNotes";
				colvarSocialSecCardNotes.DataType = DbType.String;
				colvarSocialSecCardNotes.MaxLength = 250;
				colvarSocialSecCardNotes.AutoIncrement = false;
				colvarSocialSecCardNotes.IsNullable = true;
				colvarSocialSecCardNotes.IsPrimaryKey = false;
				colvarSocialSecCardNotes.IsForeignKey = false;
				colvarSocialSecCardNotes.IsReadOnly = false;
				colvarSocialSecCardNotes.DefaultSetting = @"";
				colvarSocialSecCardNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSocialSecCardNotes);

				TableSchema.TableColumn colvarDriversLicenseNotes = new TableSchema.TableColumn(schema);
				colvarDriversLicenseNotes.ColumnName = "DriversLicenseNotes";
				colvarDriversLicenseNotes.DataType = DbType.String;
				colvarDriversLicenseNotes.MaxLength = 250;
				colvarDriversLicenseNotes.AutoIncrement = false;
				colvarDriversLicenseNotes.IsNullable = true;
				colvarDriversLicenseNotes.IsPrimaryKey = false;
				colvarDriversLicenseNotes.IsForeignKey = false;
				colvarDriversLicenseNotes.IsReadOnly = false;
				colvarDriversLicenseNotes.DefaultSetting = @"";
				colvarDriversLicenseNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDriversLicenseNotes);

				TableSchema.TableColumn colvarW4Notes = new TableSchema.TableColumn(schema);
				colvarW4Notes.ColumnName = "W4Notes";
				colvarW4Notes.DataType = DbType.String;
				colvarW4Notes.MaxLength = 250;
				colvarW4Notes.AutoIncrement = false;
				colvarW4Notes.IsNullable = true;
				colvarW4Notes.IsPrimaryKey = false;
				colvarW4Notes.IsForeignKey = false;
				colvarW4Notes.IsReadOnly = false;
				colvarW4Notes.DefaultSetting = @"";
				colvarW4Notes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarW4Notes);

				TableSchema.TableColumn colvarI9Notes = new TableSchema.TableColumn(schema);
				colvarI9Notes.ColumnName = "I9Notes";
				colvarI9Notes.DataType = DbType.String;
				colvarI9Notes.MaxLength = 250;
				colvarI9Notes.AutoIncrement = false;
				colvarI9Notes.IsNullable = true;
				colvarI9Notes.IsPrimaryKey = false;
				colvarI9Notes.IsForeignKey = false;
				colvarI9Notes.IsReadOnly = false;
				colvarI9Notes.DefaultSetting = @"";
				colvarI9Notes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarI9Notes);

				TableSchema.TableColumn colvarW9Notes = new TableSchema.TableColumn(schema);
				colvarW9Notes.ColumnName = "W9Notes";
				colvarW9Notes.DataType = DbType.String;
				colvarW9Notes.MaxLength = 250;
				colvarW9Notes.AutoIncrement = false;
				colvarW9Notes.IsNullable = true;
				colvarW9Notes.IsPrimaryKey = false;
				colvarW9Notes.IsForeignKey = false;
				colvarW9Notes.IsReadOnly = false;
				colvarW9Notes.DefaultSetting = @"";
				colvarW9Notes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarW9Notes);

				TableSchema.TableColumn colvarEIN = new TableSchema.TableColumn(schema);
				colvarEIN.ColumnName = "EIN";
				colvarEIN.DataType = DbType.String;
				colvarEIN.MaxLength = 50;
				colvarEIN.AutoIncrement = false;
				colvarEIN.IsNullable = true;
				colvarEIN.IsPrimaryKey = false;
				colvarEIN.IsForeignKey = false;
				colvarEIN.IsReadOnly = false;
				colvarEIN.DefaultSetting = @"";
				colvarEIN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEIN);

				TableSchema.TableColumn colvarSUTA = new TableSchema.TableColumn(schema);
				colvarSUTA.ColumnName = "SUTA";
				colvarSUTA.DataType = DbType.String;
				colvarSUTA.MaxLength = 50;
				colvarSUTA.AutoIncrement = false;
				colvarSUTA.IsNullable = true;
				colvarSUTA.IsPrimaryKey = false;
				colvarSUTA.IsForeignKey = false;
				colvarSUTA.IsReadOnly = false;
				colvarSUTA.DefaultSetting = @"";
				colvarSUTA.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSUTA);

				TableSchema.TableColumn colvarWorkersComp = new TableSchema.TableColumn(schema);
				colvarWorkersComp.ColumnName = "WorkersComp";
				colvarWorkersComp.DataType = DbType.String;
				colvarWorkersComp.MaxLength = -1;
				colvarWorkersComp.AutoIncrement = false;
				colvarWorkersComp.IsNullable = true;
				colvarWorkersComp.IsPrimaryKey = false;
				colvarWorkersComp.IsForeignKey = false;
				colvarWorkersComp.IsReadOnly = false;
				colvarWorkersComp.DefaultSetting = @"";
				colvarWorkersComp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkersComp);

				TableSchema.TableColumn colvarFedFilingStatus = new TableSchema.TableColumn(schema);
				colvarFedFilingStatus.ColumnName = "FedFilingStatus";
				colvarFedFilingStatus.DataType = DbType.String;
				colvarFedFilingStatus.MaxLength = 50;
				colvarFedFilingStatus.AutoIncrement = false;
				colvarFedFilingStatus.IsNullable = true;
				colvarFedFilingStatus.IsPrimaryKey = false;
				colvarFedFilingStatus.IsForeignKey = false;
				colvarFedFilingStatus.IsReadOnly = false;
				colvarFedFilingStatus.DefaultSetting = @"";
				colvarFedFilingStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFedFilingStatus);

				TableSchema.TableColumn colvarEICFilingStatus = new TableSchema.TableColumn(schema);
				colvarEICFilingStatus.ColumnName = "EICFilingStatus";
				colvarEICFilingStatus.DataType = DbType.String;
				colvarEICFilingStatus.MaxLength = 50;
				colvarEICFilingStatus.AutoIncrement = false;
				colvarEICFilingStatus.IsNullable = true;
				colvarEICFilingStatus.IsPrimaryKey = false;
				colvarEICFilingStatus.IsForeignKey = false;
				colvarEICFilingStatus.IsReadOnly = false;
				colvarEICFilingStatus.DefaultSetting = @"";
				colvarEICFilingStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEICFilingStatus);

				TableSchema.TableColumn colvarTaxWitholdingState = new TableSchema.TableColumn(schema);
				colvarTaxWitholdingState.ColumnName = "TaxWitholdingState";
				colvarTaxWitholdingState.DataType = DbType.String;
				colvarTaxWitholdingState.MaxLength = 5;
				colvarTaxWitholdingState.AutoIncrement = false;
				colvarTaxWitholdingState.IsNullable = true;
				colvarTaxWitholdingState.IsPrimaryKey = false;
				colvarTaxWitholdingState.IsForeignKey = false;
				colvarTaxWitholdingState.IsReadOnly = false;
				colvarTaxWitholdingState.DefaultSetting = @"";
				colvarTaxWitholdingState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaxWitholdingState);

				TableSchema.TableColumn colvarStateFilingStatus = new TableSchema.TableColumn(schema);
				colvarStateFilingStatus.ColumnName = "StateFilingStatus";
				colvarStateFilingStatus.DataType = DbType.String;
				colvarStateFilingStatus.MaxLength = 50;
				colvarStateFilingStatus.AutoIncrement = false;
				colvarStateFilingStatus.IsNullable = true;
				colvarStateFilingStatus.IsPrimaryKey = false;
				colvarStateFilingStatus.IsForeignKey = false;
				colvarStateFilingStatus.IsReadOnly = false;
				colvarStateFilingStatus.DefaultSetting = @"";
				colvarStateFilingStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateFilingStatus);

				TableSchema.TableColumn colvarGPDependents = new TableSchema.TableColumn(schema);
				colvarGPDependents.ColumnName = "GPDependents";
				colvarGPDependents.DataType = DbType.Int32;
				colvarGPDependents.MaxLength = 0;
				colvarGPDependents.AutoIncrement = false;
				colvarGPDependents.IsNullable = true;
				colvarGPDependents.IsPrimaryKey = false;
				colvarGPDependents.IsForeignKey = false;
				colvarGPDependents.IsReadOnly = false;
				colvarGPDependents.DefaultSetting = @"";
				colvarGPDependents.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPDependents);

				TableSchema.TableColumn colvarCriminalOffense = new TableSchema.TableColumn(schema);
				colvarCriminalOffense.ColumnName = "CriminalOffense";
				colvarCriminalOffense.DataType = DbType.Boolean;
				colvarCriminalOffense.MaxLength = 0;
				colvarCriminalOffense.AutoIncrement = false;
				colvarCriminalOffense.IsNullable = true;
				colvarCriminalOffense.IsPrimaryKey = false;
				colvarCriminalOffense.IsForeignKey = false;
				colvarCriminalOffense.IsReadOnly = false;
				colvarCriminalOffense.DefaultSetting = @"";
				colvarCriminalOffense.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCriminalOffense);

				TableSchema.TableColumn colvarOffense = new TableSchema.TableColumn(schema);
				colvarOffense.ColumnName = "Offense";
				colvarOffense.DataType = DbType.String;
				colvarOffense.MaxLength = -1;
				colvarOffense.AutoIncrement = false;
				colvarOffense.IsNullable = true;
				colvarOffense.IsPrimaryKey = false;
				colvarOffense.IsForeignKey = false;
				colvarOffense.IsReadOnly = false;
				colvarOffense.DefaultSetting = @"";
				colvarOffense.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOffense);

				TableSchema.TableColumn colvarOffenseExplanation = new TableSchema.TableColumn(schema);
				colvarOffenseExplanation.ColumnName = "OffenseExplanation";
				colvarOffenseExplanation.DataType = DbType.String;
				colvarOffenseExplanation.MaxLength = -1;
				colvarOffenseExplanation.AutoIncrement = false;
				colvarOffenseExplanation.IsNullable = true;
				colvarOffenseExplanation.IsPrimaryKey = false;
				colvarOffenseExplanation.IsForeignKey = false;
				colvarOffenseExplanation.IsReadOnly = false;
				colvarOffenseExplanation.DefaultSetting = @"";
				colvarOffenseExplanation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOffenseExplanation);

				TableSchema.TableColumn colvarRent = new TableSchema.TableColumn(schema);
				colvarRent.ColumnName = "Rent";
				colvarRent.DataType = DbType.Currency;
				colvarRent.MaxLength = 0;
				colvarRent.AutoIncrement = false;
				colvarRent.IsNullable = true;
				colvarRent.IsPrimaryKey = false;
				colvarRent.IsForeignKey = false;
				colvarRent.IsReadOnly = false;
				colvarRent.DefaultSetting = @"";
				colvarRent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRent);

				TableSchema.TableColumn colvarPet = new TableSchema.TableColumn(schema);
				colvarPet.ColumnName = "Pet";
				colvarPet.DataType = DbType.Currency;
				colvarPet.MaxLength = 0;
				colvarPet.AutoIncrement = false;
				colvarPet.IsNullable = true;
				colvarPet.IsPrimaryKey = false;
				colvarPet.IsForeignKey = false;
				colvarPet.IsReadOnly = false;
				colvarPet.DefaultSetting = @"";
				colvarPet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPet);

				TableSchema.TableColumn colvarUtilities = new TableSchema.TableColumn(schema);
				colvarUtilities.ColumnName = "Utilities";
				colvarUtilities.DataType = DbType.Currency;
				colvarUtilities.MaxLength = 0;
				colvarUtilities.AutoIncrement = false;
				colvarUtilities.IsNullable = true;
				colvarUtilities.IsPrimaryKey = false;
				colvarUtilities.IsForeignKey = false;
				colvarUtilities.IsReadOnly = false;
				colvarUtilities.DefaultSetting = @"";
				colvarUtilities.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUtilities);

				TableSchema.TableColumn colvarFuel = new TableSchema.TableColumn(schema);
				colvarFuel.ColumnName = "Fuel";
				colvarFuel.DataType = DbType.Currency;
				colvarFuel.MaxLength = 0;
				colvarFuel.AutoIncrement = false;
				colvarFuel.IsNullable = true;
				colvarFuel.IsPrimaryKey = false;
				colvarFuel.IsForeignKey = false;
				colvarFuel.IsReadOnly = false;
				colvarFuel.DefaultSetting = @"";
				colvarFuel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFuel);

				TableSchema.TableColumn colvarFurniture = new TableSchema.TableColumn(schema);
				colvarFurniture.ColumnName = "Furniture";
				colvarFurniture.DataType = DbType.Currency;
				colvarFurniture.MaxLength = 0;
				colvarFurniture.AutoIncrement = false;
				colvarFurniture.IsNullable = true;
				colvarFurniture.IsPrimaryKey = false;
				colvarFurniture.IsForeignKey = false;
				colvarFurniture.IsReadOnly = false;
				colvarFurniture.DefaultSetting = @"";
				colvarFurniture.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFurniture);

				TableSchema.TableColumn colvarCellPhoneCredit = new TableSchema.TableColumn(schema);
				colvarCellPhoneCredit.ColumnName = "CellPhoneCredit";
				colvarCellPhoneCredit.DataType = DbType.Currency;
				colvarCellPhoneCredit.MaxLength = 0;
				colvarCellPhoneCredit.AutoIncrement = false;
				colvarCellPhoneCredit.IsNullable = true;
				colvarCellPhoneCredit.IsPrimaryKey = false;
				colvarCellPhoneCredit.IsForeignKey = false;
				colvarCellPhoneCredit.IsReadOnly = false;
				colvarCellPhoneCredit.DefaultSetting = @"";
				colvarCellPhoneCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellPhoneCredit);

				TableSchema.TableColumn colvarGasCredit = new TableSchema.TableColumn(schema);
				colvarGasCredit.ColumnName = "GasCredit";
				colvarGasCredit.DataType = DbType.Currency;
				colvarGasCredit.MaxLength = 0;
				colvarGasCredit.AutoIncrement = false;
				colvarGasCredit.IsNullable = true;
				colvarGasCredit.IsPrimaryKey = false;
				colvarGasCredit.IsForeignKey = false;
				colvarGasCredit.IsReadOnly = false;
				colvarGasCredit.DefaultSetting = @"";
				colvarGasCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGasCredit);

				TableSchema.TableColumn colvarRentExempt = new TableSchema.TableColumn(schema);
				colvarRentExempt.ColumnName = "RentExempt";
				colvarRentExempt.DataType = DbType.Boolean;
				colvarRentExempt.MaxLength = 0;
				colvarRentExempt.AutoIncrement = false;
				colvarRentExempt.IsNullable = false;
				colvarRentExempt.IsPrimaryKey = false;
				colvarRentExempt.IsForeignKey = false;
				colvarRentExempt.IsReadOnly = false;
				colvarRentExempt.DefaultSetting = @"";
				colvarRentExempt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRentExempt);

				TableSchema.TableColumn colvarIsServiceTech = new TableSchema.TableColumn(schema);
				colvarIsServiceTech.ColumnName = "IsServiceTech";
				colvarIsServiceTech.DataType = DbType.Boolean;
				colvarIsServiceTech.MaxLength = 0;
				colvarIsServiceTech.AutoIncrement = false;
				colvarIsServiceTech.IsNullable = false;
				colvarIsServiceTech.IsPrimaryKey = false;
				colvarIsServiceTech.IsForeignKey = false;
				colvarIsServiceTech.IsReadOnly = false;
				colvarIsServiceTech.DefaultSetting = @"";
				colvarIsServiceTech.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsServiceTech);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = true;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = false;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "CountryId";
				colvarCountryId.DataType = DbType.String;
				colvarCountryId.MaxLength = 10;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = true;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = false;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"";
				colvarCountryId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryId);

				TableSchema.TableColumn colvarStreetAddress = new TableSchema.TableColumn(schema);
				colvarStreetAddress.ColumnName = "StreetAddress";
				colvarStreetAddress.DataType = DbType.String;
				colvarStreetAddress.MaxLength = 50;
				colvarStreetAddress.AutoIncrement = false;
				colvarStreetAddress.IsNullable = true;
				colvarStreetAddress.IsPrimaryKey = false;
				colvarStreetAddress.IsForeignKey = false;
				colvarStreetAddress.IsReadOnly = false;
				colvarStreetAddress.DefaultSetting = @"";
				colvarStreetAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress);

				TableSchema.TableColumn colvarStreetAddress2 = new TableSchema.TableColumn(schema);
				colvarStreetAddress2.ColumnName = "StreetAddress2";
				colvarStreetAddress2.DataType = DbType.String;
				colvarStreetAddress2.MaxLength = 50;
				colvarStreetAddress2.AutoIncrement = false;
				colvarStreetAddress2.IsNullable = true;
				colvarStreetAddress2.IsPrimaryKey = false;
				colvarStreetAddress2.IsForeignKey = false;
				colvarStreetAddress2.IsReadOnly = false;
				colvarStreetAddress2.DefaultSetting = @"";
				colvarStreetAddress2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetAddress2);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarPostalCode = new TableSchema.TableColumn(schema);
				colvarPostalCode.ColumnName = "PostalCode";
				colvarPostalCode.DataType = DbType.String;
				colvarPostalCode.MaxLength = 10;
				colvarPostalCode.AutoIncrement = false;
				colvarPostalCode.IsNullable = true;
				colvarPostalCode.IsPrimaryKey = false;
				colvarPostalCode.IsForeignKey = false;
				colvarPostalCode.IsReadOnly = false;
				colvarPostalCode.DefaultSetting = @"";
				colvarPostalCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalCode);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.Int32;
				colvarCreatedByID.MaxLength = 0;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.Int32;
				colvarModifiedByID.MaxLength = 0;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = true;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				TableSchema.TableColumn colvarCBxSocialSecCard = new TableSchema.TableColumn(schema);
				colvarCBxSocialSecCard.ColumnName = "CBxSocialSecCard";
				colvarCBxSocialSecCard.DataType = DbType.Boolean;
				colvarCBxSocialSecCard.MaxLength = 0;
				colvarCBxSocialSecCard.AutoIncrement = false;
				colvarCBxSocialSecCard.IsNullable = true;
				colvarCBxSocialSecCard.IsPrimaryKey = false;
				colvarCBxSocialSecCard.IsForeignKey = false;
				colvarCBxSocialSecCard.IsReadOnly = false;
				colvarCBxSocialSecCard.DefaultSetting = @"";
				colvarCBxSocialSecCard.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCBxSocialSecCard);

				TableSchema.TableColumn colvarCBxDriversLicense = new TableSchema.TableColumn(schema);
				colvarCBxDriversLicense.ColumnName = "CBxDriversLicense";
				colvarCBxDriversLicense.DataType = DbType.Boolean;
				colvarCBxDriversLicense.MaxLength = 0;
				colvarCBxDriversLicense.AutoIncrement = false;
				colvarCBxDriversLicense.IsNullable = true;
				colvarCBxDriversLicense.IsPrimaryKey = false;
				colvarCBxDriversLicense.IsForeignKey = false;
				colvarCBxDriversLicense.IsReadOnly = false;
				colvarCBxDriversLicense.DefaultSetting = @"";
				colvarCBxDriversLicense.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCBxDriversLicense);

				TableSchema.TableColumn colvarCBxW4 = new TableSchema.TableColumn(schema);
				colvarCBxW4.ColumnName = "CBxW4";
				colvarCBxW4.DataType = DbType.Boolean;
				colvarCBxW4.MaxLength = 0;
				colvarCBxW4.AutoIncrement = false;
				colvarCBxW4.IsNullable = true;
				colvarCBxW4.IsPrimaryKey = false;
				colvarCBxW4.IsForeignKey = false;
				colvarCBxW4.IsReadOnly = false;
				colvarCBxW4.DefaultSetting = @"";
				colvarCBxW4.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCBxW4);

				TableSchema.TableColumn colvarCBxI9 = new TableSchema.TableColumn(schema);
				colvarCBxI9.ColumnName = "CBxI9";
				colvarCBxI9.DataType = DbType.Boolean;
				colvarCBxI9.MaxLength = 0;
				colvarCBxI9.AutoIncrement = false;
				colvarCBxI9.IsNullable = true;
				colvarCBxI9.IsPrimaryKey = false;
				colvarCBxI9.IsForeignKey = false;
				colvarCBxI9.IsReadOnly = false;
				colvarCBxI9.DefaultSetting = @"";
				colvarCBxI9.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCBxI9);

				TableSchema.TableColumn colvarCBxW9 = new TableSchema.TableColumn(schema);
				colvarCBxW9.ColumnName = "CBxW9";
				colvarCBxW9.DataType = DbType.Boolean;
				colvarCBxW9.MaxLength = 0;
				colvarCBxW9.AutoIncrement = false;
				colvarCBxW9.IsNullable = true;
				colvarCBxW9.IsPrimaryKey = false;
				colvarCBxW9.IsForeignKey = false;
				colvarCBxW9.IsReadOnly = false;
				colvarCBxW9.DefaultSetting = @"";
				colvarCBxW9.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCBxW9);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_RecruitsHistory",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_RecruitsHistory LoadFrom(RU_RecruitsHistory item)
		{
			RU_RecruitsHistory result = new RU_RecruitsHistory();
			if (item.RecruitHistoryID != default(long)) {
				result.LoadByKey(item.RecruitHistoryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long RecruitHistoryID {
			get { return GetColumnValue<long>(Columns.RecruitHistoryID); }
			set {
				SetColumnValue(Columns.RecruitHistoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitHistoryID));
			}
		}
		[DataMember]
		public DateTime HistoryDate {
			get { return GetColumnValue<DateTime>(Columns.HistoryDate); }
			set {
				SetColumnValue(Columns.HistoryDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HistoryDate));
			}
		}
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public short UserTypeId {
			get { return GetColumnValue<short>(Columns.UserTypeId); }
			set {
				SetColumnValue(Columns.UserTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeId));
			}
		}
		[DataMember]
		public int? ReportsToID {
			get { return GetColumnValue<int?>(Columns.ReportsToID); }
			set {
				SetColumnValue(Columns.ReportsToID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportsToID));
			}
		}
		[DataMember]
		public int? CurrentAddressID {
			get { return GetColumnValue<int?>(Columns.CurrentAddressID); }
			set {
				SetColumnValue(Columns.CurrentAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CurrentAddressID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int? OwnerApprovalId {
			get { return GetColumnValue<int?>(Columns.OwnerApprovalId); }
			set {
				SetColumnValue(Columns.OwnerApprovalId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OwnerApprovalId));
			}
		}
		[DataMember]
		public int? TeamID {
			get { return GetColumnValue<int?>(Columns.TeamID); }
			set {
				SetColumnValue(Columns.TeamID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamID));
			}
		}
		[DataMember]
		public int? PayScaleID {
			get { return GetColumnValue<int?>(Columns.PayScaleID); }
			set {
				SetColumnValue(Columns.PayScaleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayScaleID));
			}
		}
		[DataMember]
		public short? SchoolId {
			get { return GetColumnValue<short?>(Columns.SchoolId); }
			set {
				SetColumnValue(Columns.SchoolId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SchoolId));
			}
		}
		[DataMember]
		public int? ShackingUpId {
			get { return GetColumnValue<int?>(Columns.ShackingUpId); }
			set {
				SetColumnValue(Columns.ShackingUpId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShackingUpId));
			}
		}
		[DataMember]
		public int? RecruitCohabbitTypeId {
			get { return GetColumnValue<int?>(Columns.RecruitCohabbitTypeId); }
			set {
				SetColumnValue(Columns.RecruitCohabbitTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitCohabbitTypeId));
			}
		}
		[DataMember]
		public int? AlternatePayScheduleID {
			get { return GetColumnValue<int?>(Columns.AlternatePayScheduleID); }
			set {
				SetColumnValue(Columns.AlternatePayScheduleID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AlternatePayScheduleID));
			}
		}
		[DataMember]
		public string Location {
			get { return GetColumnValue<string>(Columns.Location); }
			set {
				SetColumnValue(Columns.Location, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Location));
			}
		}
		[DataMember]
		public DateTime? OwnerApprovalDate {
			get { return GetColumnValue<DateTime?>(Columns.OwnerApprovalDate); }
			set {
				SetColumnValue(Columns.OwnerApprovalDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OwnerApprovalDate));
			}
		}
		[DataMember]
		public DateTime? ManagerApprovalDate {
			get { return GetColumnValue<DateTime?>(Columns.ManagerApprovalDate); }
			set {
				SetColumnValue(Columns.ManagerApprovalDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagerApprovalDate));
			}
		}
		[DataMember]
		public string EmergencyName {
			get { return GetColumnValue<string>(Columns.EmergencyName); }
			set {
				SetColumnValue(Columns.EmergencyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyName));
			}
		}
		[DataMember]
		public string EmergencyPhone {
			get { return GetColumnValue<string>(Columns.EmergencyPhone); }
			set {
				SetColumnValue(Columns.EmergencyPhone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyPhone));
			}
		}
		[DataMember]
		public string EmergencyRelationship {
			get { return GetColumnValue<string>(Columns.EmergencyRelationship); }
			set {
				SetColumnValue(Columns.EmergencyRelationship, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EmergencyRelationship));
			}
		}
		[DataMember]
		public bool IsRecruiter {
			get { return GetColumnValue<bool>(Columns.IsRecruiter); }
			set {
				SetColumnValue(Columns.IsRecruiter, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsRecruiter));
			}
		}
		[DataMember]
		public string PreviousSummer {
			get { return GetColumnValue<string>(Columns.PreviousSummer); }
			set {
				SetColumnValue(Columns.PreviousSummer, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreviousSummer));
			}
		}
		[DataMember]
		public DateTime? SignatureDate {
			get { return GetColumnValue<DateTime?>(Columns.SignatureDate); }
			set {
				SetColumnValue(Columns.SignatureDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SignatureDate));
			}
		}
		[DataMember]
		public DateTime? HireDate {
			get { return GetColumnValue<DateTime?>(Columns.HireDate); }
			set {
				SetColumnValue(Columns.HireDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HireDate));
			}
		}
		[DataMember]
		public int? GPExemptions {
			get { return GetColumnValue<int?>(Columns.GPExemptions); }
			set {
				SetColumnValue(Columns.GPExemptions, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPExemptions));
			}
		}
		[DataMember]
		public byte? GPW4Allowances {
			get { return GetColumnValue<byte?>(Columns.GPW4Allowances); }
			set {
				SetColumnValue(Columns.GPW4Allowances, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPW4Allowances));
			}
		}
		[DataMember]
		public string GPW9Name {
			get { return GetColumnValue<string>(Columns.GPW9Name); }
			set {
				SetColumnValue(Columns.GPW9Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPW9Name));
			}
		}
		[DataMember]
		public string GPW9BusinessName {
			get { return GetColumnValue<string>(Columns.GPW9BusinessName); }
			set {
				SetColumnValue(Columns.GPW9BusinessName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPW9BusinessName));
			}
		}
		[DataMember]
		public string GPW9TIN {
			get { return GetColumnValue<string>(Columns.GPW9TIN); }
			set {
				SetColumnValue(Columns.GPW9TIN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPW9TIN));
			}
		}
		[DataMember]
		public int SocialSecCardStatusID {
			get { return GetColumnValue<int>(Columns.SocialSecCardStatusID); }
			set {
				SetColumnValue(Columns.SocialSecCardStatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SocialSecCardStatusID));
			}
		}
		[DataMember]
		public int DriversLicenseStatusID {
			get { return GetColumnValue<int>(Columns.DriversLicenseStatusID); }
			set {
				SetColumnValue(Columns.DriversLicenseStatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DriversLicenseStatusID));
			}
		}
		[DataMember]
		public int W4StatusID {
			get { return GetColumnValue<int>(Columns.W4StatusID); }
			set {
				SetColumnValue(Columns.W4StatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.W4StatusID));
			}
		}
		[DataMember]
		public int I9StatusID {
			get { return GetColumnValue<int>(Columns.I9StatusID); }
			set {
				SetColumnValue(Columns.I9StatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.I9StatusID));
			}
		}
		[DataMember]
		public int W9StatusID {
			get { return GetColumnValue<int>(Columns.W9StatusID); }
			set {
				SetColumnValue(Columns.W9StatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.W9StatusID));
			}
		}
		[DataMember]
		public string SocialSecCardNotes {
			get { return GetColumnValue<string>(Columns.SocialSecCardNotes); }
			set {
				SetColumnValue(Columns.SocialSecCardNotes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SocialSecCardNotes));
			}
		}
		[DataMember]
		public string DriversLicenseNotes {
			get { return GetColumnValue<string>(Columns.DriversLicenseNotes); }
			set {
				SetColumnValue(Columns.DriversLicenseNotes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DriversLicenseNotes));
			}
		}
		[DataMember]
		public string W4Notes {
			get { return GetColumnValue<string>(Columns.W4Notes); }
			set {
				SetColumnValue(Columns.W4Notes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.W4Notes));
			}
		}
		[DataMember]
		public string I9Notes {
			get { return GetColumnValue<string>(Columns.I9Notes); }
			set {
				SetColumnValue(Columns.I9Notes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.I9Notes));
			}
		}
		[DataMember]
		public string W9Notes {
			get { return GetColumnValue<string>(Columns.W9Notes); }
			set {
				SetColumnValue(Columns.W9Notes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.W9Notes));
			}
		}
		[DataMember]
		public string EIN {
			get { return GetColumnValue<string>(Columns.EIN); }
			set {
				SetColumnValue(Columns.EIN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EIN));
			}
		}
		[DataMember]
		public string SUTA {
			get { return GetColumnValue<string>(Columns.SUTA); }
			set {
				SetColumnValue(Columns.SUTA, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SUTA));
			}
		}
		[DataMember]
		public string WorkersComp {
			get { return GetColumnValue<string>(Columns.WorkersComp); }
			set {
				SetColumnValue(Columns.WorkersComp, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WorkersComp));
			}
		}
		[DataMember]
		public string FedFilingStatus {
			get { return GetColumnValue<string>(Columns.FedFilingStatus); }
			set {
				SetColumnValue(Columns.FedFilingStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FedFilingStatus));
			}
		}
		[DataMember]
		public string EICFilingStatus {
			get { return GetColumnValue<string>(Columns.EICFilingStatus); }
			set {
				SetColumnValue(Columns.EICFilingStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EICFilingStatus));
			}
		}
		[DataMember]
		public string TaxWitholdingState {
			get { return GetColumnValue<string>(Columns.TaxWitholdingState); }
			set {
				SetColumnValue(Columns.TaxWitholdingState, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TaxWitholdingState));
			}
		}
		[DataMember]
		public string StateFilingStatus {
			get { return GetColumnValue<string>(Columns.StateFilingStatus); }
			set {
				SetColumnValue(Columns.StateFilingStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateFilingStatus));
			}
		}
		[DataMember]
		public int? GPDependents {
			get { return GetColumnValue<int?>(Columns.GPDependents); }
			set {
				SetColumnValue(Columns.GPDependents, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPDependents));
			}
		}
		[DataMember]
		public bool? CriminalOffense {
			get { return GetColumnValue<bool?>(Columns.CriminalOffense); }
			set {
				SetColumnValue(Columns.CriminalOffense, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CriminalOffense));
			}
		}
		[DataMember]
		public string Offense {
			get { return GetColumnValue<string>(Columns.Offense); }
			set {
				SetColumnValue(Columns.Offense, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Offense));
			}
		}
		[DataMember]
		public string OffenseExplanation {
			get { return GetColumnValue<string>(Columns.OffenseExplanation); }
			set {
				SetColumnValue(Columns.OffenseExplanation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OffenseExplanation));
			}
		}
		[DataMember]
		public decimal? Rent {
			get { return GetColumnValue<decimal?>(Columns.Rent); }
			set {
				SetColumnValue(Columns.Rent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Rent));
			}
		}
		[DataMember]
		public decimal? Pet {
			get { return GetColumnValue<decimal?>(Columns.Pet); }
			set {
				SetColumnValue(Columns.Pet, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Pet));
			}
		}
		[DataMember]
		public decimal? Utilities {
			get { return GetColumnValue<decimal?>(Columns.Utilities); }
			set {
				SetColumnValue(Columns.Utilities, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Utilities));
			}
		}
		[DataMember]
		public decimal? Fuel {
			get { return GetColumnValue<decimal?>(Columns.Fuel); }
			set {
				SetColumnValue(Columns.Fuel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Fuel));
			}
		}
		[DataMember]
		public decimal? Furniture {
			get { return GetColumnValue<decimal?>(Columns.Furniture); }
			set {
				SetColumnValue(Columns.Furniture, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Furniture));
			}
		}
		[DataMember]
		public decimal? CellPhoneCredit {
			get { return GetColumnValue<decimal?>(Columns.CellPhoneCredit); }
			set {
				SetColumnValue(Columns.CellPhoneCredit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellPhoneCredit));
			}
		}
		[DataMember]
		public decimal? GasCredit {
			get { return GetColumnValue<decimal?>(Columns.GasCredit); }
			set {
				SetColumnValue(Columns.GasCredit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GasCredit));
			}
		}
		[DataMember]
		public bool RentExempt {
			get { return GetColumnValue<bool>(Columns.RentExempt); }
			set {
				SetColumnValue(Columns.RentExempt, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RentExempt));
			}
		}
		[DataMember]
		public bool IsServiceTech {
			get { return GetColumnValue<bool>(Columns.IsServiceTech); }
			set {
				SetColumnValue(Columns.IsServiceTech, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsServiceTech));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string CountryId {
			get { return GetColumnValue<string>(Columns.CountryId); }
			set {
				SetColumnValue(Columns.CountryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CountryId));
			}
		}
		[DataMember]
		public string StreetAddress {
			get { return GetColumnValue<string>(Columns.StreetAddress); }
			set {
				SetColumnValue(Columns.StreetAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress));
			}
		}
		[DataMember]
		public string StreetAddress2 {
			get { return GetColumnValue<string>(Columns.StreetAddress2); }
			set {
				SetColumnValue(Columns.StreetAddress2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StreetAddress2));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string PostalCode {
			get { return GetColumnValue<string>(Columns.PostalCode); }
			set {
				SetColumnValue(Columns.PostalCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PostalCode));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public int? CreatedByID {
			get { return GetColumnValue<int?>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime? CreatedDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public int? ModifiedByID {
			get { return GetColumnValue<int?>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime? ModifiedDate {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}
		[DataMember]
		public bool? CBxSocialSecCard {
			get { return GetColumnValue<bool?>(Columns.CBxSocialSecCard); }
			set {
				SetColumnValue(Columns.CBxSocialSecCard, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CBxSocialSecCard));
			}
		}
		[DataMember]
		public bool? CBxDriversLicense {
			get { return GetColumnValue<bool?>(Columns.CBxDriversLicense); }
			set {
				SetColumnValue(Columns.CBxDriversLicense, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CBxDriversLicense));
			}
		}
		[DataMember]
		public bool? CBxW4 {
			get { return GetColumnValue<bool?>(Columns.CBxW4); }
			set {
				SetColumnValue(Columns.CBxW4, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CBxW4));
			}
		}
		[DataMember]
		public bool? CBxI9 {
			get { return GetColumnValue<bool?>(Columns.CBxI9); }
			set {
				SetColumnValue(Columns.CBxI9, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CBxI9));
			}
		}
		[DataMember]
		public bool? CBxW9 {
			get { return GetColumnValue<bool?>(Columns.CBxW9); }
			set {
				SetColumnValue(Columns.CBxW9, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CBxW9));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return RecruitHistoryID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RecruitHistoryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn HistoryDateColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn UserTypeIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ReportsToIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CurrentAddressIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn OwnerApprovalIdColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn TeamIDColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn PayScaleIDColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn SchoolIdColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ShackingUpIdColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn RecruitCohabbitTypeIdColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn AlternatePayScheduleIDColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn LocationColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn OwnerApprovalDateColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ManagerApprovalDateColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn EmergencyNameColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn EmergencyPhoneColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn EmergencyRelationshipColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn IsRecruiterColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn PreviousSummerColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn SignatureDateColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn HireDateColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn GPExemptionsColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn GPW4AllowancesColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn GPW9NameColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn GPW9BusinessNameColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn GPW9TINColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn SocialSecCardStatusIDColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn DriversLicenseStatusIDColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn W4StatusIDColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn I9StatusIDColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn W9StatusIDColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn SocialSecCardNotesColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn DriversLicenseNotesColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn W4NotesColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn I9NotesColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn W9NotesColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn EINColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn SUTAColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn WorkersCompColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn FedFilingStatusColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn EICFilingStatusColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn TaxWitholdingStateColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn StateFilingStatusColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn GPDependentsColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn CriminalOffenseColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn OffenseColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn OffenseExplanationColumn
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn RentColumn
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn PetColumn
		{
			get { return Schema.Columns[52]; }
		}
		public static TableSchema.TableColumn UtilitiesColumn
		{
			get { return Schema.Columns[53]; }
		}
		public static TableSchema.TableColumn FuelColumn
		{
			get { return Schema.Columns[54]; }
		}
		public static TableSchema.TableColumn FurnitureColumn
		{
			get { return Schema.Columns[55]; }
		}
		public static TableSchema.TableColumn CellPhoneCreditColumn
		{
			get { return Schema.Columns[56]; }
		}
		public static TableSchema.TableColumn GasCreditColumn
		{
			get { return Schema.Columns[57]; }
		}
		public static TableSchema.TableColumn RentExemptColumn
		{
			get { return Schema.Columns[58]; }
		}
		public static TableSchema.TableColumn IsServiceTechColumn
		{
			get { return Schema.Columns[59]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[60]; }
		}
		public static TableSchema.TableColumn CountryIdColumn
		{
			get { return Schema.Columns[61]; }
		}
		public static TableSchema.TableColumn StreetAddressColumn
		{
			get { return Schema.Columns[62]; }
		}
		public static TableSchema.TableColumn StreetAddress2Column
		{
			get { return Schema.Columns[63]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[64]; }
		}
		public static TableSchema.TableColumn PostalCodeColumn
		{
			get { return Schema.Columns[65]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[66]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[67]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[68]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[69]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[70]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[71]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[72]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[73]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[74]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[75]; }
		}
		public static TableSchema.TableColumn CBxSocialSecCardColumn
		{
			get { return Schema.Columns[76]; }
		}
		public static TableSchema.TableColumn CBxDriversLicenseColumn
		{
			get { return Schema.Columns[77]; }
		}
		public static TableSchema.TableColumn CBxW4Column
		{
			get { return Schema.Columns[78]; }
		}
		public static TableSchema.TableColumn CBxI9Column
		{
			get { return Schema.Columns[79]; }
		}
		public static TableSchema.TableColumn CBxW9Column
		{
			get { return Schema.Columns[80]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RecruitHistoryID = @"RecruitHistoryID";
			public static readonly string HistoryDate = @"HistoryDate";
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string UserID = @"UserID";
			public static readonly string UserTypeId = @"UserTypeId";
			public static readonly string ReportsToID = @"ReportsToID";
			public static readonly string CurrentAddressID = @"CurrentAddressID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string OwnerApprovalId = @"OwnerApprovalId";
			public static readonly string TeamID = @"TeamID";
			public static readonly string PayScaleID = @"PayScaleID";
			public static readonly string SchoolId = @"SchoolId";
			public static readonly string ShackingUpId = @"ShackingUpId";
			public static readonly string RecruitCohabbitTypeId = @"RecruitCohabbitTypeId";
			public static readonly string AlternatePayScheduleID = @"AlternatePayScheduleID";
			public static readonly string Location = @"Location";
			public static readonly string OwnerApprovalDate = @"OwnerApprovalDate";
			public static readonly string ManagerApprovalDate = @"ManagerApprovalDate";
			public static readonly string EmergencyName = @"EmergencyName";
			public static readonly string EmergencyPhone = @"EmergencyPhone";
			public static readonly string EmergencyRelationship = @"EmergencyRelationship";
			public static readonly string IsRecruiter = @"IsRecruiter";
			public static readonly string PreviousSummer = @"PreviousSummer";
			public static readonly string SignatureDate = @"SignatureDate";
			public static readonly string HireDate = @"HireDate";
			public static readonly string GPExemptions = @"GPExemptions";
			public static readonly string GPW4Allowances = @"GPW4Allowances";
			public static readonly string GPW9Name = @"GPW9Name";
			public static readonly string GPW9BusinessName = @"GPW9BusinessName";
			public static readonly string GPW9TIN = @"GPW9TIN";
			public static readonly string SocialSecCardStatusID = @"SocialSecCardStatusID";
			public static readonly string DriversLicenseStatusID = @"DriversLicenseStatusID";
			public static readonly string W4StatusID = @"W4StatusID";
			public static readonly string I9StatusID = @"I9StatusID";
			public static readonly string W9StatusID = @"W9StatusID";
			public static readonly string SocialSecCardNotes = @"SocialSecCardNotes";
			public static readonly string DriversLicenseNotes = @"DriversLicenseNotes";
			public static readonly string W4Notes = @"W4Notes";
			public static readonly string I9Notes = @"I9Notes";
			public static readonly string W9Notes = @"W9Notes";
			public static readonly string EIN = @"EIN";
			public static readonly string SUTA = @"SUTA";
			public static readonly string WorkersComp = @"WorkersComp";
			public static readonly string FedFilingStatus = @"FedFilingStatus";
			public static readonly string EICFilingStatus = @"EICFilingStatus";
			public static readonly string TaxWitholdingState = @"TaxWitholdingState";
			public static readonly string StateFilingStatus = @"StateFilingStatus";
			public static readonly string GPDependents = @"GPDependents";
			public static readonly string CriminalOffense = @"CriminalOffense";
			public static readonly string Offense = @"Offense";
			public static readonly string OffenseExplanation = @"OffenseExplanation";
			public static readonly string Rent = @"Rent";
			public static readonly string Pet = @"Pet";
			public static readonly string Utilities = @"Utilities";
			public static readonly string Fuel = @"Fuel";
			public static readonly string Furniture = @"Furniture";
			public static readonly string CellPhoneCredit = @"CellPhoneCredit";
			public static readonly string GasCredit = @"GasCredit";
			public static readonly string RentExempt = @"RentExempt";
			public static readonly string IsServiceTech = @"IsServiceTech";
			public static readonly string StateId = @"StateId";
			public static readonly string CountryId = @"CountryId";
			public static readonly string StreetAddress = @"StreetAddress";
			public static readonly string StreetAddress2 = @"StreetAddress2";
			public static readonly string City = @"City";
			public static readonly string PostalCode = @"PostalCode";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
			public static readonly string CBxSocialSecCard = @"CBxSocialSecCard";
			public static readonly string CBxDriversLicense = @"CBxDriversLicense";
			public static readonly string CBxW4 = @"CBxW4";
			public static readonly string CBxI9 = @"CBxI9";
			public static readonly string CBxW9 = @"CBxW9";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RecruitHistoryID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_RoleLocation class.
	/// </summary>
	[DataContract]
	public partial class RU_RoleLocationCollection : ActiveList<RU_RoleLocation, RU_RoleLocationCollection>
	{
		public static RU_RoleLocationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_RoleLocationCollection result = new RU_RoleLocationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_RoleLocation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_RoleLocations table.
	/// </summary>
	[DataContract]
	public partial class RU_RoleLocation : ActiveRecord<RU_RoleLocation>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum RoleLocationEnum : int
		{
			[EnumMember()] Sales = 1,
			[EnumMember()] Installs = 2,
			[EnumMember()] Corporate = 3,
			[EnumMember()] Office_Staff = 4,
			[EnumMember()] Vendors = 5,
		}

		//[DataMember]
		//public RoleLocationEnum RoleLocationCode
		//{
		//	get { return (RoleLocationEnum)RoleLocationID; }
		//	set { RoleLocationID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_RoleLocation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_RoleLocations", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRoleLocationID = new TableSchema.TableColumn(schema);
				colvarRoleLocationID.ColumnName = "RoleLocationID";
				colvarRoleLocationID.DataType = DbType.Int32;
				colvarRoleLocationID.MaxLength = 0;
				colvarRoleLocationID.AutoIncrement = true;
				colvarRoleLocationID.IsNullable = false;
				colvarRoleLocationID.IsPrimaryKey = true;
				colvarRoleLocationID.IsForeignKey = false;
				colvarRoleLocationID.IsReadOnly = false;
				colvarRoleLocationID.DefaultSetting = @"";
				colvarRoleLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoleLocationID);

				TableSchema.TableColumn colvarRole = new TableSchema.TableColumn(schema);
				colvarRole.ColumnName = "Role";
				colvarRole.DataType = DbType.String;
				colvarRole.MaxLength = 50;
				colvarRole.AutoIncrement = false;
				colvarRole.IsNullable = false;
				colvarRole.IsPrimaryKey = false;
				colvarRole.IsForeignKey = false;
				colvarRole.IsReadOnly = false;
				colvarRole.DefaultSetting = @"";
				colvarRole.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRole);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_RoleLocations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_RoleLocation LoadFrom(RU_RoleLocation item)
		{
			RU_RoleLocation result = new RU_RoleLocation();
			if (item.RoleLocationID != default(int)) {
				result.LoadByKey(item.RoleLocationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RoleLocationID {
			get { return GetColumnValue<int>(Columns.RoleLocationID); }
			set {
				SetColumnValue(Columns.RoleLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RoleLocationID));
			}
		}
		[DataMember]
		public string Role {
			get { return GetColumnValue<string>(Columns.Role); }
			set {
				SetColumnValue(Columns.Role, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Role));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Role;
		}

		#region Typed Columns

		public static TableSchema.TableColumn RoleLocationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RoleColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RoleLocationID = @"RoleLocationID";
			public static readonly string Role = @"Role";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RoleLocationID; }
		}
		*/

		#region Foreign Collections

		private PR_SigningBonusAmountCollection _PR_SigningBonusAmountsCol;
		//Relationship: FK_PR_SigningBonusAmounts_RU_RoleLocations
		public PR_SigningBonusAmountCollection PR_SigningBonusAmountsCol
		{
			get
			{
				if(_PR_SigningBonusAmountsCol == null) {
					_PR_SigningBonusAmountsCol = new PR_SigningBonusAmountCollection();
					_PR_SigningBonusAmountsCol.LoadAndCloseReader(PR_SigningBonusAmount.Query()
						.WHERE(PR_SigningBonusAmount.Columns.RoleLocationID, RoleLocationID).ExecuteReader());
				}
				return _PR_SigningBonusAmountsCol;
			}
		}

		private PS_ContentPermissionCollection _PS_ContentPermissionsCol;
		//Relationship: FK_PS_ContentPermissions_RU_RoleLocations
		public PS_ContentPermissionCollection PS_ContentPermissionsCol
		{
			get
			{
				if(_PS_ContentPermissionsCol == null) {
					_PS_ContentPermissionsCol = new PS_ContentPermissionCollection();
					_PS_ContentPermissionsCol.LoadAndCloseReader(PS_ContentPermission.Query()
						.WHERE(PS_ContentPermission.Columns.RequiredRoleLocationID, RoleLocationID).ExecuteReader());
				}
				return _PS_ContentPermissionsCol;
			}
		}

		private RU_TeamLocationsAndUserCollection _RU_TeamLocationsAndUsersCol;
		//Relationship: FK_RU_TeamLocationsAndUsers_RU_RoleLocations
		public RU_TeamLocationsAndUserCollection RU_TeamLocationsAndUsersCol
		{
			get
			{
				if(_RU_TeamLocationsAndUsersCol == null) {
					_RU_TeamLocationsAndUsersCol = new RU_TeamLocationsAndUserCollection();
					_RU_TeamLocationsAndUsersCol.LoadAndCloseReader(RU_TeamLocationsAndUser.Query()
						.WHERE(RU_TeamLocationsAndUser.Columns.RoleLocationID, RoleLocationID).ExecuteReader());
				}
				return _RU_TeamLocationsAndUsersCol;
			}
		}

		private RU_TeamCollection _RU_TeamsCol;
		//Relationship: FK_RU_Teams_RU_RoleLocations
		public RU_TeamCollection RU_TeamsCol
		{
			get
			{
				if(_RU_TeamsCol == null) {
					_RU_TeamsCol = new RU_TeamCollection();
					_RU_TeamsCol.LoadAndCloseReader(RU_Team.Query()
						.WHERE(RU_Team.Columns.RoleLocationId, RoleLocationID).ExecuteReader());
				}
				return _RU_TeamsCol;
			}
		}

		private RU_UserTypeCollection _RU_UserTypesCol;
		//Relationship: FK_RU_UserType_RU_RoleLocations
		public RU_UserTypeCollection RU_UserTypesCol
		{
			get
			{
				if(_RU_UserTypesCol == null) {
					_RU_UserTypesCol = new RU_UserTypeCollection();
					_RU_UserTypesCol.LoadAndCloseReader(RU_UserType.Query()
						.WHERE(RU_UserType.Columns.RoleLocationID, RoleLocationID).ExecuteReader());
				}
				return _RU_UserTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_RollCallRecord class.
	/// </summary>
	[DataContract]
	public partial class RU_RollCallRecordCollection : ActiveList<RU_RollCallRecord, RU_RollCallRecordCollection>
	{
		public static RU_RollCallRecordCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_RollCallRecordCollection result = new RU_RollCallRecordCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_RollCallRecord item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_RollCallRecords table.
	/// </summary>
	[DataContract]
	public partial class RU_RollCallRecord : ActiveRecord<RU_RollCallRecord>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_RollCallRecord()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_RollCallRecords", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRollCallRecordID = new TableSchema.TableColumn(schema);
				colvarRollCallRecordID.ColumnName = "RollCallRecordID";
				colvarRollCallRecordID.DataType = DbType.Int32;
				colvarRollCallRecordID.MaxLength = 0;
				colvarRollCallRecordID.AutoIncrement = true;
				colvarRollCallRecordID.IsNullable = false;
				colvarRollCallRecordID.IsPrimaryKey = true;
				colvarRollCallRecordID.IsForeignKey = false;
				colvarRollCallRecordID.IsReadOnly = false;
				colvarRollCallRecordID.DefaultSetting = @"";
				colvarRollCallRecordID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRollCallRecordID);

				TableSchema.TableColumn colvarRollCallID = new TableSchema.TableColumn(schema);
				colvarRollCallID.ColumnName = "RollCallID";
				colvarRollCallID.DataType = DbType.Int32;
				colvarRollCallID.MaxLength = 0;
				colvarRollCallID.AutoIncrement = false;
				colvarRollCallID.IsNullable = false;
				colvarRollCallID.IsPrimaryKey = false;
				colvarRollCallID.IsForeignKey = true;
				colvarRollCallID.IsReadOnly = false;
				colvarRollCallID.DefaultSetting = @"";
				colvarRollCallID.ForeignKeyTableName = "RU_RollCalls";
				schema.Columns.Add(colvarRollCallID);

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = false;
				colvarRecruitID.IsForeignKey = true;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "RU_Recruits";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarPresent = new TableSchema.TableColumn(schema);
				colvarPresent.ColumnName = "Present";
				colvarPresent.DataType = DbType.Boolean;
				colvarPresent.MaxLength = 0;
				colvarPresent.AutoIncrement = false;
				colvarPresent.IsNullable = false;
				colvarPresent.IsPrimaryKey = false;
				colvarPresent.IsForeignKey = false;
				colvarPresent.IsReadOnly = false;
				colvarPresent.DefaultSetting = @"((0))";
				colvarPresent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPresent);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_RollCallRecords",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_RollCallRecord LoadFrom(RU_RollCallRecord item)
		{
			RU_RollCallRecord result = new RU_RollCallRecord();
			if (item.RollCallRecordID != default(int)) {
				result.LoadByKey(item.RollCallRecordID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RollCallRecordID {
			get { return GetColumnValue<int>(Columns.RollCallRecordID); }
			set {
				SetColumnValue(Columns.RollCallRecordID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RollCallRecordID));
			}
		}
		[DataMember]
		public int RollCallID {
			get { return GetColumnValue<int>(Columns.RollCallID); }
			set {
				SetColumnValue(Columns.RollCallID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RollCallID));
			}
		}
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public bool Present {
			get { return GetColumnValue<bool>(Columns.Present); }
			set {
				SetColumnValue(Columns.Present, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Present));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Recruit _Recruit;
		//Relationship: FK_RU_RollCallRecords_RU_Recruits
		public RU_Recruit Recruit
		{
			get
			{
				if(_Recruit == null) {
					_Recruit = RU_Recruit.FetchByID(this.RecruitID);
				}
				return _Recruit;
			}
			set
			{
				SetColumnValue("RecruitID", value.RecruitID);
				_Recruit = value;
			}
		}

		private RU_RollCall _RollCall;
		//Relationship: FK_RU_RollCallRecords_RU_RollCalls
		public RU_RollCall RollCall
		{
			get
			{
				if(_RollCall == null) {
					_RollCall = RU_RollCall.FetchByID(this.RollCallID);
				}
				return _RollCall;
			}
			set
			{
				SetColumnValue("RollCallID", value.RollCallID);
				_RollCall = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RollCallRecordID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RollCallRecordIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RollCallIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PresentColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RollCallRecordID = @"RollCallRecordID";
			public static readonly string RollCallID = @"RollCallID";
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string Present = @"Present";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RollCallRecordID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_RollCall class.
	/// </summary>
	[DataContract]
	public partial class RU_RollCallCollection : ActiveList<RU_RollCall, RU_RollCallCollection>
	{
		public static RU_RollCallCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_RollCallCollection result = new RU_RollCallCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_RollCall item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_RollCalls table.
	/// </summary>
	[DataContract]
	public partial class RU_RollCall : ActiveRecord<RU_RollCall>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_RollCall()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_RollCalls", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRollCallID = new TableSchema.TableColumn(schema);
				colvarRollCallID.ColumnName = "RollCallID";
				colvarRollCallID.DataType = DbType.Int32;
				colvarRollCallID.MaxLength = 0;
				colvarRollCallID.AutoIncrement = true;
				colvarRollCallID.IsNullable = false;
				colvarRollCallID.IsPrimaryKey = true;
				colvarRollCallID.IsForeignKey = false;
				colvarRollCallID.IsReadOnly = false;
				colvarRollCallID.DefaultSetting = @"";
				colvarRollCallID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRollCallID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_RollCalls",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_RollCall LoadFrom(RU_RollCall item)
		{
			RU_RollCall result = new RU_RollCall();
			if (item.RollCallID != default(int)) {
				result.LoadByKey(item.RollCallID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RollCallID {
			get { return GetColumnValue<int>(Columns.RollCallID); }
			set {
				SetColumnValue(Columns.RollCallID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RollCallID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_RU_RollCalls_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RollCallID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RollCallIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RollCallID = @"RollCallID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RollCallID; }
		}
		*/

		#region Foreign Collections

		private RU_RollCallRecordCollection _RU_RollCallRecordsCol;
		//Relationship: FK_RU_RollCallRecords_RU_RollCalls
		public RU_RollCallRecordCollection RU_RollCallRecordsCol
		{
			get
			{
				if(_RU_RollCallRecordsCol == null) {
					_RU_RollCallRecordsCol = new RU_RollCallRecordCollection();
					_RU_RollCallRecordsCol.LoadAndCloseReader(RU_RollCallRecord.Query()
						.WHERE(RU_RollCallRecord.Columns.RollCallID, RollCallID).ExecuteReader());
				}
				return _RU_RollCallRecordsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_School class.
	/// </summary>
	[DataContract]
	public partial class RU_SchoolCollection : ActiveList<RU_School, RU_SchoolCollection>
	{
		public static RU_SchoolCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_SchoolCollection result = new RU_SchoolCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_School item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_Schools table.
	/// </summary>
	[DataContract]
	public partial class RU_School : ActiveRecord<RU_School>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_School()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_Schools", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSchoolId = new TableSchema.TableColumn(schema);
				colvarSchoolId.ColumnName = "SchoolId";
				colvarSchoolId.DataType = DbType.Int16;
				colvarSchoolId.MaxLength = 0;
				colvarSchoolId.AutoIncrement = true;
				colvarSchoolId.IsNullable = false;
				colvarSchoolId.IsPrimaryKey = true;
				colvarSchoolId.IsForeignKey = false;
				colvarSchoolId.IsReadOnly = false;
				colvarSchoolId.DefaultSetting = @"";
				colvarSchoolId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchoolId);

				TableSchema.TableColumn colvarSchoolName = new TableSchema.TableColumn(schema);
				colvarSchoolName.ColumnName = "SchoolName";
				colvarSchoolName.DataType = DbType.AnsiString;
				colvarSchoolName.MaxLength = 50;
				colvarSchoolName.AutoIncrement = false;
				colvarSchoolName.IsNullable = false;
				colvarSchoolName.IsPrimaryKey = false;
				colvarSchoolName.IsForeignKey = false;
				colvarSchoolName.IsReadOnly = false;
				colvarSchoolName.DefaultSetting = @"";
				colvarSchoolName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSchoolName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_Schools",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_School LoadFrom(RU_School item)
		{
			RU_School result = new RU_School();
			if (item.SchoolId != default(short)) {
				result.LoadByKey(item.SchoolId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public short SchoolId {
			get { return GetColumnValue<short>(Columns.SchoolId); }
			set {
				SetColumnValue(Columns.SchoolId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SchoolId));
			}
		}
		[DataMember]
		public string SchoolName {
			get { return GetColumnValue<string>(Columns.SchoolName); }
			set {
				SetColumnValue(Columns.SchoolName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SchoolName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return SchoolName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SchoolIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SchoolNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SchoolId = @"SchoolId";
			public static readonly string SchoolName = @"SchoolName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SchoolId; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_Season class.
	/// </summary>
	[DataContract]
	public partial class RU_SeasonCollection : ActiveList<RU_Season, RU_SeasonCollection>
	{
		public static RU_SeasonCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_SeasonCollection result = new RU_SeasonCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_Season item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_Season table.
	/// </summary>
	[DataContract]
	public partial class RU_Season : ActiveRecord<RU_Season>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_Season()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_Season", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = true;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = true;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarPreSeasonID = new TableSchema.TableColumn(schema);
				colvarPreSeasonID.ColumnName = "PreSeasonID";
				colvarPreSeasonID.DataType = DbType.Int32;
				colvarPreSeasonID.MaxLength = 0;
				colvarPreSeasonID.AutoIncrement = false;
				colvarPreSeasonID.IsNullable = true;
				colvarPreSeasonID.IsPrimaryKey = false;
				colvarPreSeasonID.IsForeignKey = true;
				colvarPreSeasonID.IsReadOnly = false;
				colvarPreSeasonID.DefaultSetting = @"";
				colvarPreSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarPreSeasonID);

				TableSchema.TableColumn colvarDealerId = new TableSchema.TableColumn(schema);
				colvarDealerId.ColumnName = "DealerId";
				colvarDealerId.DataType = DbType.Int32;
				colvarDealerId.MaxLength = 0;
				colvarDealerId.AutoIncrement = false;
				colvarDealerId.IsNullable = false;
				colvarDealerId.IsPrimaryKey = false;
				colvarDealerId.IsForeignKey = false;
				colvarDealerId.IsReadOnly = false;
				colvarDealerId.DefaultSetting = @"((5000))";
				colvarDealerId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDealerId);

				TableSchema.TableColumn colvarSeasonName = new TableSchema.TableColumn(schema);
				colvarSeasonName.ColumnName = "SeasonName";
				colvarSeasonName.DataType = DbType.String;
				colvarSeasonName.MaxLength = 50;
				colvarSeasonName.AutoIncrement = false;
				colvarSeasonName.IsNullable = false;
				colvarSeasonName.IsPrimaryKey = false;
				colvarSeasonName.IsForeignKey = false;
				colvarSeasonName.IsReadOnly = false;
				colvarSeasonName.DefaultSetting = @"";
				colvarSeasonName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonName);

				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "StartDate";
				colvarStartDate.DataType = DbType.DateTime;
				colvarStartDate.MaxLength = 0;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = true;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);

				TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
				colvarEndDate.ColumnName = "EndDate";
				colvarEndDate.DataType = DbType.DateTime;
				colvarEndDate.MaxLength = 0;
				colvarEndDate.AutoIncrement = false;
				colvarEndDate.IsNullable = true;
				colvarEndDate.IsPrimaryKey = false;
				colvarEndDate.IsForeignKey = false;
				colvarEndDate.IsReadOnly = false;
				colvarEndDate.DefaultSetting = @"";
				colvarEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDate);

				TableSchema.TableColumn colvarShowInHiringManager = new TableSchema.TableColumn(schema);
				colvarShowInHiringManager.ColumnName = "ShowInHiringManager";
				colvarShowInHiringManager.DataType = DbType.Boolean;
				colvarShowInHiringManager.MaxLength = 0;
				colvarShowInHiringManager.AutoIncrement = false;
				colvarShowInHiringManager.IsNullable = false;
				colvarShowInHiringManager.IsPrimaryKey = false;
				colvarShowInHiringManager.IsForeignKey = false;
				colvarShowInHiringManager.IsReadOnly = false;
				colvarShowInHiringManager.DefaultSetting = @"((1))";
				colvarShowInHiringManager.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShowInHiringManager);

				TableSchema.TableColumn colvarIsCurrent = new TableSchema.TableColumn(schema);
				colvarIsCurrent.ColumnName = "IsCurrent";
				colvarIsCurrent.DataType = DbType.Boolean;
				colvarIsCurrent.MaxLength = 0;
				colvarIsCurrent.AutoIncrement = false;
				colvarIsCurrent.IsNullable = false;
				colvarIsCurrent.IsPrimaryKey = false;
				colvarIsCurrent.IsForeignKey = false;
				colvarIsCurrent.IsReadOnly = false;
				colvarIsCurrent.DefaultSetting = @"((0))";
				colvarIsCurrent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCurrent);

				TableSchema.TableColumn colvarIsVisibleToRecruits = new TableSchema.TableColumn(schema);
				colvarIsVisibleToRecruits.ColumnName = "IsVisibleToRecruits";
				colvarIsVisibleToRecruits.DataType = DbType.Boolean;
				colvarIsVisibleToRecruits.MaxLength = 0;
				colvarIsVisibleToRecruits.AutoIncrement = false;
				colvarIsVisibleToRecruits.IsNullable = false;
				colvarIsVisibleToRecruits.IsPrimaryKey = false;
				colvarIsVisibleToRecruits.IsForeignKey = false;
				colvarIsVisibleToRecruits.IsReadOnly = false;
				colvarIsVisibleToRecruits.DefaultSetting = @"((0))";
				colvarIsVisibleToRecruits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVisibleToRecruits);

				TableSchema.TableColumn colvarIsInsideSales = new TableSchema.TableColumn(schema);
				colvarIsInsideSales.ColumnName = "IsInsideSales";
				colvarIsInsideSales.DataType = DbType.Boolean;
				colvarIsInsideSales.MaxLength = 0;
				colvarIsInsideSales.AutoIncrement = false;
				colvarIsInsideSales.IsNullable = false;
				colvarIsInsideSales.IsPrimaryKey = false;
				colvarIsInsideSales.IsForeignKey = false;
				colvarIsInsideSales.IsReadOnly = false;
				colvarIsInsideSales.DefaultSetting = @"((0))";
				colvarIsInsideSales.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsInsideSales);

				TableSchema.TableColumn colvarIsPreseason = new TableSchema.TableColumn(schema);
				colvarIsPreseason.ColumnName = "IsPreseason";
				colvarIsPreseason.DataType = DbType.Boolean;
				colvarIsPreseason.MaxLength = 0;
				colvarIsPreseason.AutoIncrement = false;
				colvarIsPreseason.IsNullable = false;
				colvarIsPreseason.IsPrimaryKey = false;
				colvarIsPreseason.IsForeignKey = false;
				colvarIsPreseason.IsReadOnly = false;
				colvarIsPreseason.DefaultSetting = @"((0))";
				colvarIsPreseason.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPreseason);

				TableSchema.TableColumn colvarIsSummer = new TableSchema.TableColumn(schema);
				colvarIsSummer.ColumnName = "IsSummer";
				colvarIsSummer.DataType = DbType.Boolean;
				colvarIsSummer.MaxLength = 0;
				colvarIsSummer.AutoIncrement = false;
				colvarIsSummer.IsNullable = false;
				colvarIsSummer.IsPrimaryKey = false;
				colvarIsSummer.IsForeignKey = false;
				colvarIsSummer.IsReadOnly = false;
				colvarIsSummer.DefaultSetting = @"((0))";
				colvarIsSummer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsSummer);

				TableSchema.TableColumn colvarIsExtended = new TableSchema.TableColumn(schema);
				colvarIsExtended.ColumnName = "IsExtended";
				colvarIsExtended.DataType = DbType.Boolean;
				colvarIsExtended.MaxLength = 0;
				colvarIsExtended.AutoIncrement = false;
				colvarIsExtended.IsNullable = false;
				colvarIsExtended.IsPrimaryKey = false;
				colvarIsExtended.IsForeignKey = false;
				colvarIsExtended.IsReadOnly = false;
				colvarIsExtended.DefaultSetting = @"((0))";
				colvarIsExtended.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsExtended);

				TableSchema.TableColumn colvarIsYearRound = new TableSchema.TableColumn(schema);
				colvarIsYearRound.ColumnName = "IsYearRound";
				colvarIsYearRound.DataType = DbType.Boolean;
				colvarIsYearRound.MaxLength = 0;
				colvarIsYearRound.AutoIncrement = false;
				colvarIsYearRound.IsNullable = false;
				colvarIsYearRound.IsPrimaryKey = false;
				colvarIsYearRound.IsForeignKey = false;
				colvarIsYearRound.IsReadOnly = false;
				colvarIsYearRound.DefaultSetting = @"((0))";
				colvarIsYearRound.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsYearRound);

				TableSchema.TableColumn colvarIsContractor = new TableSchema.TableColumn(schema);
				colvarIsContractor.ColumnName = "IsContractor";
				colvarIsContractor.DataType = DbType.Boolean;
				colvarIsContractor.MaxLength = 0;
				colvarIsContractor.AutoIncrement = false;
				colvarIsContractor.IsNullable = false;
				colvarIsContractor.IsPrimaryKey = false;
				colvarIsContractor.IsForeignKey = false;
				colvarIsContractor.IsReadOnly = false;
				colvarIsContractor.DefaultSetting = @"((0))";
				colvarIsContractor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsContractor);

				TableSchema.TableColumn colvarIsDealer = new TableSchema.TableColumn(schema);
				colvarIsDealer.ColumnName = "IsDealer";
				colvarIsDealer.DataType = DbType.Boolean;
				colvarIsDealer.MaxLength = 0;
				colvarIsDealer.AutoIncrement = false;
				colvarIsDealer.IsNullable = false;
				colvarIsDealer.IsPrimaryKey = false;
				colvarIsDealer.IsForeignKey = false;
				colvarIsDealer.IsReadOnly = false;
				colvarIsDealer.DefaultSetting = @"((0))";
				colvarIsDealer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDealer);

				TableSchema.TableColumn colvarExcellentCreditScoreThreshold = new TableSchema.TableColumn(schema);
				colvarExcellentCreditScoreThreshold.ColumnName = "ExcellentCreditScoreThreshold";
				colvarExcellentCreditScoreThreshold.DataType = DbType.Int32;
				colvarExcellentCreditScoreThreshold.MaxLength = 0;
				colvarExcellentCreditScoreThreshold.AutoIncrement = false;
				colvarExcellentCreditScoreThreshold.IsNullable = false;
				colvarExcellentCreditScoreThreshold.IsPrimaryKey = false;
				colvarExcellentCreditScoreThreshold.IsForeignKey = false;
				colvarExcellentCreditScoreThreshold.IsReadOnly = false;
				colvarExcellentCreditScoreThreshold.DefaultSetting = @"((0))";
				colvarExcellentCreditScoreThreshold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExcellentCreditScoreThreshold);

				TableSchema.TableColumn colvarPassCreditScoreThreshold = new TableSchema.TableColumn(schema);
				colvarPassCreditScoreThreshold.ColumnName = "PassCreditScoreThreshold";
				colvarPassCreditScoreThreshold.DataType = DbType.Int32;
				colvarPassCreditScoreThreshold.MaxLength = 0;
				colvarPassCreditScoreThreshold.AutoIncrement = false;
				colvarPassCreditScoreThreshold.IsNullable = false;
				colvarPassCreditScoreThreshold.IsPrimaryKey = false;
				colvarPassCreditScoreThreshold.IsForeignKey = false;
				colvarPassCreditScoreThreshold.IsReadOnly = false;
				colvarPassCreditScoreThreshold.DefaultSetting = @"((0))";
				colvarPassCreditScoreThreshold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassCreditScoreThreshold);

				TableSchema.TableColumn colvarSubCreditScoreThreshold = new TableSchema.TableColumn(schema);
				colvarSubCreditScoreThreshold.ColumnName = "SubCreditScoreThreshold";
				colvarSubCreditScoreThreshold.DataType = DbType.Int32;
				colvarSubCreditScoreThreshold.MaxLength = 0;
				colvarSubCreditScoreThreshold.AutoIncrement = false;
				colvarSubCreditScoreThreshold.IsNullable = false;
				colvarSubCreditScoreThreshold.IsPrimaryKey = false;
				colvarSubCreditScoreThreshold.IsForeignKey = false;
				colvarSubCreditScoreThreshold.IsReadOnly = false;
				colvarSubCreditScoreThreshold.DefaultSetting = @"((0))";
				colvarSubCreditScoreThreshold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubCreditScoreThreshold);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.Int32;
				colvarCreatedByID.MaxLength = 0;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"((1))";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.Int32;
				colvarModifiedByID.MaxLength = 0;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = false;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"((1))";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_Season",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_Season LoadFrom(RU_Season item)
		{
			RU_Season result = new RU_Season();
			if (item.SeasonID != default(int)) {
				result.LoadByKey(item.SeasonID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int? PreSeasonID {
			get { return GetColumnValue<int?>(Columns.PreSeasonID); }
			set {
				SetColumnValue(Columns.PreSeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreSeasonID));
			}
		}
		[DataMember]
		public int DealerId {
			get { return GetColumnValue<int>(Columns.DealerId); }
			set {
				SetColumnValue(Columns.DealerId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DealerId));
			}
		}
		[DataMember]
		public string SeasonName {
			get { return GetColumnValue<string>(Columns.SeasonName); }
			set {
				SetColumnValue(Columns.SeasonName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonName));
			}
		}
		[DataMember]
		public DateTime? StartDate {
			get { return GetColumnValue<DateTime?>(Columns.StartDate); }
			set {
				SetColumnValue(Columns.StartDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StartDate));
			}
		}
		[DataMember]
		public DateTime? EndDate {
			get { return GetColumnValue<DateTime?>(Columns.EndDate); }
			set {
				SetColumnValue(Columns.EndDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EndDate));
			}
		}
		[DataMember]
		public bool ShowInHiringManager {
			get { return GetColumnValue<bool>(Columns.ShowInHiringManager); }
			set {
				SetColumnValue(Columns.ShowInHiringManager, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShowInHiringManager));
			}
		}
		[DataMember]
		public bool IsCurrent {
			get { return GetColumnValue<bool>(Columns.IsCurrent); }
			set {
				SetColumnValue(Columns.IsCurrent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCurrent));
			}
		}
		[DataMember]
		public bool IsVisibleToRecruits {
			get { return GetColumnValue<bool>(Columns.IsVisibleToRecruits); }
			set {
				SetColumnValue(Columns.IsVisibleToRecruits, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsVisibleToRecruits));
			}
		}
		[DataMember]
		public bool IsInsideSales {
			get { return GetColumnValue<bool>(Columns.IsInsideSales); }
			set {
				SetColumnValue(Columns.IsInsideSales, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsInsideSales));
			}
		}
		[DataMember]
		public bool IsPreseason {
			get { return GetColumnValue<bool>(Columns.IsPreseason); }
			set {
				SetColumnValue(Columns.IsPreseason, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsPreseason));
			}
		}
		[DataMember]
		public bool IsSummer {
			get { return GetColumnValue<bool>(Columns.IsSummer); }
			set {
				SetColumnValue(Columns.IsSummer, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsSummer));
			}
		}
		[DataMember]
		public bool IsExtended {
			get { return GetColumnValue<bool>(Columns.IsExtended); }
			set {
				SetColumnValue(Columns.IsExtended, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsExtended));
			}
		}
		[DataMember]
		public bool IsYearRound {
			get { return GetColumnValue<bool>(Columns.IsYearRound); }
			set {
				SetColumnValue(Columns.IsYearRound, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsYearRound));
			}
		}
		[DataMember]
		public bool IsContractor {
			get { return GetColumnValue<bool>(Columns.IsContractor); }
			set {
				SetColumnValue(Columns.IsContractor, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsContractor));
			}
		}
		[DataMember]
		public bool IsDealer {
			get { return GetColumnValue<bool>(Columns.IsDealer); }
			set {
				SetColumnValue(Columns.IsDealer, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDealer));
			}
		}
		[DataMember]
		public int ExcellentCreditScoreThreshold {
			get { return GetColumnValue<int>(Columns.ExcellentCreditScoreThreshold); }
			set {
				SetColumnValue(Columns.ExcellentCreditScoreThreshold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExcellentCreditScoreThreshold));
			}
		}
		[DataMember]
		public int PassCreditScoreThreshold {
			get { return GetColumnValue<int>(Columns.PassCreditScoreThreshold); }
			set {
				SetColumnValue(Columns.PassCreditScoreThreshold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassCreditScoreThreshold));
			}
		}
		[DataMember]
		public int SubCreditScoreThreshold {
			get { return GetColumnValue<int>(Columns.SubCreditScoreThreshold); }
			set {
				SetColumnValue(Columns.SubCreditScoreThreshold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubCreditScoreThreshold));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public int CreatedByID {
			get { return GetColumnValue<int>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public int ModifiedByID {
			get { return GetColumnValue<int>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _PreSeason;
		//Relationship: FK_RU_Season_RU_Season
		public RU_Season PreSeason
		{
			get
			{
				if(_PreSeason == null) {
					_PreSeason = RU_Season.FetchByID(this.PreSeasonID);
				}
				return _PreSeason;
			}
			set
			{
				SetColumnValue("PreSeasonID", value.SeasonID);
				_PreSeason = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SeasonID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PreSeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DealerIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SeasonNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn StartDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn EndDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ShowInHiringManagerColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsCurrentColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsVisibleToRecruitsColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsInsideSalesColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn IsPreseasonColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn IsSummerColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn IsExtendedColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsYearRoundColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsContractorColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn IsDealerColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ExcellentCreditScoreThresholdColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn PassCreditScoreThresholdColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn SubCreditScoreThresholdColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[24]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string PreSeasonID = @"PreSeasonID";
			public static readonly string DealerId = @"DealerId";
			public static readonly string SeasonName = @"SeasonName";
			public static readonly string StartDate = @"StartDate";
			public static readonly string EndDate = @"EndDate";
			public static readonly string ShowInHiringManager = @"ShowInHiringManager";
			public static readonly string IsCurrent = @"IsCurrent";
			public static readonly string IsVisibleToRecruits = @"IsVisibleToRecruits";
			public static readonly string IsInsideSales = @"IsInsideSales";
			public static readonly string IsPreseason = @"IsPreseason";
			public static readonly string IsSummer = @"IsSummer";
			public static readonly string IsExtended = @"IsExtended";
			public static readonly string IsYearRound = @"IsYearRound";
			public static readonly string IsContractor = @"IsContractor";
			public static readonly string IsDealer = @"IsDealer";
			public static readonly string ExcellentCreditScoreThreshold = @"ExcellentCreditScoreThreshold";
			public static readonly string PassCreditScoreThreshold = @"PassCreditScoreThreshold";
			public static readonly string SubCreditScoreThreshold = @"SubCreditScoreThreshold";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SeasonID; }
		}
		*/

		#region Foreign Collections

		private APT_ApartmentBySeasonCollection _APT_ApartmentBySeasonsCol;
		//Relationship: FK_APT_ApartmentBySeason_RU_Season
		public APT_ApartmentBySeasonCollection APT_ApartmentBySeasonsCol
		{
			get
			{
				if(_APT_ApartmentBySeasonsCol == null) {
					_APT_ApartmentBySeasonsCol = new APT_ApartmentBySeasonCollection();
					_APT_ApartmentBySeasonsCol.LoadAndCloseReader(APT_ApartmentBySeason.Query()
						.WHERE(APT_ApartmentBySeason.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _APT_ApartmentBySeasonsCol;
			}
		}

		private APT_ComplexCollection _APT_ComplicesCol;
		//Relationship: FK_APT_Complex_RU_Season
		public APT_ComplexCollection APT_ComplicesCol
		{
			get
			{
				if(_APT_ComplicesCol == null) {
					_APT_ComplicesCol = new APT_ComplexCollection();
					_APT_ComplicesCol.LoadAndCloseReader(APT_Complex.Query()
						.WHERE(APT_Complex.Columns.SeasonId, SeasonID).ExecuteReader());
				}
				return _APT_ComplicesCol;
			}
		}

		private APT_ExpenseBillCollection _APT_ExpenseBillsCol;
		//Relationship: FK_APT_ExpenseBill_RU_Season
		public APT_ExpenseBillCollection APT_ExpenseBillsCol
		{
			get
			{
				if(_APT_ExpenseBillsCol == null) {
					_APT_ExpenseBillsCol = new APT_ExpenseBillCollection();
					_APT_ExpenseBillsCol.LoadAndCloseReader(APT_ExpenseBill.Query()
						.WHERE(APT_ExpenseBill.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _APT_ExpenseBillsCol;
			}
		}

		private PR_AccountStateCollection _PR_AccountStatesCol;
		//Relationship: FK_PR_AccountStates_RU_Season
		public PR_AccountStateCollection PR_AccountStatesCol
		{
			get
			{
				if(_PR_AccountStatesCol == null) {
					_PR_AccountStatesCol = new PR_AccountStateCollection();
					_PR_AccountStatesCol.LoadAndCloseReader(PR_AccountState.Query()
						.WHERE(PR_AccountState.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_AccountStatesCol;
			}
		}

		private PR_BackendPayscaleCollection _PR_BackendPayscalesCol;
		//Relationship: FK_PR_BackendAccountRates_RU_Season
		public PR_BackendPayscaleCollection PR_BackendPayscalesCol
		{
			get
			{
				if(_PR_BackendPayscalesCol == null) {
					_PR_BackendPayscalesCol = new PR_BackendPayscaleCollection();
					_PR_BackendPayscalesCol.LoadAndCloseReader(PR_BackendPayscale.Query()
						.WHERE(PR_BackendPayscale.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_BackendPayscalesCol;
			}
		}

		private PR_BackendAggregateTransactionCollection _PR_BackendAggregateTransactionsCol;
		//Relationship: FK_PR_BackendAggregateDeductions_RU_Season
		public PR_BackendAggregateTransactionCollection PR_BackendAggregateTransactionsCol
		{
			get
			{
				if(_PR_BackendAggregateTransactionsCol == null) {
					_PR_BackendAggregateTransactionsCol = new PR_BackendAggregateTransactionCollection();
					_PR_BackendAggregateTransactionsCol.LoadAndCloseReader(PR_BackendAggregateTransaction.Query()
						.WHERE(PR_BackendAggregateTransaction.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_BackendAggregateTransactionsCol;
			}
		}

		private PR_BackendLegionCollection _PR_BackendLegionsCol;
		//Relationship: FK_PR_BackendLegions_RU_Season
		public PR_BackendLegionCollection PR_BackendLegionsCol
		{
			get
			{
				if(_PR_BackendLegionsCol == null) {
					_PR_BackendLegionsCol = new PR_BackendLegionCollection();
					_PR_BackendLegionsCol.LoadAndCloseReader(PR_BackendLegion.Query()
						.WHERE(PR_BackendLegion.Columns.PrimarySeasonID, SeasonID).ExecuteReader());
				}
				return _PR_BackendLegionsCol;
			}
		}

		private PR_BackendManagerPayscaleCollection _PR_BackendManagerPayscalesCol;
		//Relationship: FK_PR_BackendManagerPayscales_RU_Season
		public PR_BackendManagerPayscaleCollection PR_BackendManagerPayscalesCol
		{
			get
			{
				if(_PR_BackendManagerPayscalesCol == null) {
					_PR_BackendManagerPayscalesCol = new PR_BackendManagerPayscaleCollection();
					_PR_BackendManagerPayscalesCol.LoadAndCloseReader(PR_BackendManagerPayscale.Query()
						.WHERE(PR_BackendManagerPayscale.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_BackendManagerPayscalesCol;
			}
		}

		private PR_BackendManagerPayScheduleCollection _PR_BackendManagerPaySchedulesCol;
		//Relationship: FK_PR_BackendManagerPaySchedules_RU_Season
		public PR_BackendManagerPayScheduleCollection PR_BackendManagerPaySchedulesCol
		{
			get
			{
				if(_PR_BackendManagerPaySchedulesCol == null) {
					_PR_BackendManagerPaySchedulesCol = new PR_BackendManagerPayScheduleCollection();
					_PR_BackendManagerPaySchedulesCol.LoadAndCloseReader(PR_BackendManagerPaySchedule.Query()
						.WHERE(PR_BackendManagerPaySchedule.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_BackendManagerPaySchedulesCol;
			}
		}

		private PR_BackendPayScheduleCollection _PR_BackendPaySchedulesCol;
		//Relationship: FK_PR_BackendPaySchedules_RU_Season
		public PR_BackendPayScheduleCollection PR_BackendPaySchedulesCol
		{
			get
			{
				if(_PR_BackendPaySchedulesCol == null) {
					_PR_BackendPaySchedulesCol = new PR_BackendPayScheduleCollection();
					_PR_BackendPaySchedulesCol.LoadAndCloseReader(PR_BackendPaySchedule.Query()
						.WHERE(PR_BackendPaySchedule.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_BackendPaySchedulesCol;
			}
		}

		private PR_BackendPeriodCollection _PR_BackendPeriodsCol;
		//Relationship: FK_PR_BackendPeriods_RU_Season
		public PR_BackendPeriodCollection PR_BackendPeriodsCol
		{
			get
			{
				if(_PR_BackendPeriodsCol == null) {
					_PR_BackendPeriodsCol = new PR_BackendPeriodCollection();
					_PR_BackendPeriodsCol.LoadAndCloseReader(PR_BackendPeriod.Query()
						.WHERE(PR_BackendPeriod.Columns.PrimarySeasonID, SeasonID).ExecuteReader());
				}
				return _PR_BackendPeriodsCol;
			}
		}

		private PR_BackendPeriodSeasonMappingCollection _PR_BackendPeriodSeasonMappingsCol;
		//Relationship: FK_PR_BackendPeriodSeasonMappings_RU_Season
		public PR_BackendPeriodSeasonMappingCollection PR_BackendPeriodSeasonMappingsCol
		{
			get
			{
				if(_PR_BackendPeriodSeasonMappingsCol == null) {
					_PR_BackendPeriodSeasonMappingsCol = new PR_BackendPeriodSeasonMappingCollection();
					_PR_BackendPeriodSeasonMappingsCol.LoadAndCloseReader(PR_BackendPeriodSeasonMapping.Query()
						.WHERE(PR_BackendPeriodSeasonMapping.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_BackendPeriodSeasonMappingsCol;
			}
		}

		private PR_LeadTechBackendCollection _PR_LeadTechBackendsCol;
		//Relationship: FK_PR_LeadTechBackends_RU_Season
		public PR_LeadTechBackendCollection PR_LeadTechBackendsCol
		{
			get
			{
				if(_PR_LeadTechBackendsCol == null) {
					_PR_LeadTechBackendsCol = new PR_LeadTechBackendCollection();
					_PR_LeadTechBackendsCol.LoadAndCloseReader(PR_LeadTechBackend.Query()
						.WHERE(PR_LeadTechBackend.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_LeadTechBackendsCol;
			}
		}

		private PR_MiscBackendAmountCollection _PR_MiscBackendAmountsCol;
		//Relationship: FK_PR_MiscBackendAmounts_RU_Season
		public PR_MiscBackendAmountCollection PR_MiscBackendAmountsCol
		{
			get
			{
				if(_PR_MiscBackendAmountsCol == null) {
					_PR_MiscBackendAmountsCol = new PR_MiscBackendAmountCollection();
					_PR_MiscBackendAmountsCol.LoadAndCloseReader(PR_MiscBackendAmount.Query()
						.WHERE(PR_MiscBackendAmount.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_MiscBackendAmountsCol;
			}
		}

		private PR_MiscBackendTransactionCollection _PR_MiscBackendTransactionsCol;
		//Relationship: FK_PR_MiscBackendTransactions_RU_Season
		public PR_MiscBackendTransactionCollection PR_MiscBackendTransactionsCol
		{
			get
			{
				if(_PR_MiscBackendTransactionsCol == null) {
					_PR_MiscBackendTransactionsCol = new PR_MiscBackendTransactionCollection();
					_PR_MiscBackendTransactionsCol.LoadAndCloseReader(PR_MiscBackendTransaction.Query()
						.WHERE(PR_MiscBackendTransaction.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_MiscBackendTransactionsCol;
			}
		}

		private PR_PayPeriodCollection _PR_PayPeriodsCol;
		//Relationship: FK_PR_PayPeriods_RU_Season
		public PR_PayPeriodCollection PR_PayPeriodsCol
		{
			get
			{
				if(_PR_PayPeriodsCol == null) {
					_PR_PayPeriodsCol = new PR_PayPeriodCollection();
					_PR_PayPeriodsCol.LoadAndCloseReader(PR_PayPeriod.Query()
						.WHERE(PR_PayPeriod.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_PayPeriodsCol;
			}
		}

		private PR_PayPeriodSeasonMappingCollection _PR_PayPeriodSeasonMappingsCol;
		//Relationship: FK_PR_PayPeriodSeasonMappings_RU_Season
		public PR_PayPeriodSeasonMappingCollection PR_PayPeriodSeasonMappingsCol
		{
			get
			{
				if(_PR_PayPeriodSeasonMappingsCol == null) {
					_PR_PayPeriodSeasonMappingsCol = new PR_PayPeriodSeasonMappingCollection();
					_PR_PayPeriodSeasonMappingsCol.LoadAndCloseReader(PR_PayPeriodSeasonMapping.Query()
						.WHERE(PR_PayPeriodSeasonMapping.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_PayPeriodSeasonMappingsCol;
			}
		}

		private PR_PayPeriodValidAccountSeasonCollection _PR_PayPeriodValidAccountSeasonsCol;
		//Relationship: FK_PR_PayPeriodValidAccountSeasons_RU_Season
		public PR_PayPeriodValidAccountSeasonCollection PR_PayPeriodValidAccountSeasonsCol
		{
			get
			{
				if(_PR_PayPeriodValidAccountSeasonsCol == null) {
					_PR_PayPeriodValidAccountSeasonsCol = new PR_PayPeriodValidAccountSeasonCollection();
					_PR_PayPeriodValidAccountSeasonsCol.LoadAndCloseReader(PR_PayPeriodValidAccountSeason.Query()
						.WHERE(PR_PayPeriodValidAccountSeason.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_PayPeriodValidAccountSeasonsCol;
			}
		}

		private PR_PayScheduleCollection _PR_PaySchedulesCol;
		//Relationship: FK_PR_PaySchedules_RU_Season
		public PR_PayScheduleCollection PR_PaySchedulesCol
		{
			get
			{
				if(_PR_PaySchedulesCol == null) {
					_PR_PaySchedulesCol = new PR_PayScheduleCollection();
					_PR_PaySchedulesCol.LoadAndCloseReader(PR_PaySchedule.Query()
						.WHERE(PR_PaySchedule.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_PaySchedulesCol;
			}
		}

		private PR_RegionalResidualPayeeCollection _PR_RegionalResidualPayeesCol;
		//Relationship: FK_PR_RegionalResidualPayees_RU_Season
		public PR_RegionalResidualPayeeCollection PR_RegionalResidualPayeesCol
		{
			get
			{
				if(_PR_RegionalResidualPayeesCol == null) {
					_PR_RegionalResidualPayeesCol = new PR_RegionalResidualPayeeCollection();
					_PR_RegionalResidualPayeesCol.LoadAndCloseReader(PR_RegionalResidualPayee.Query()
						.WHERE(PR_RegionalResidualPayee.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_RegionalResidualPayeesCol;
			}
		}

		private PR_RegionalResidualPeriodCollection _PR_RegionalResidualPeriodsCol;
		//Relationship: FK_PR_RegionalResidualPeriods_RU_Season
		public PR_RegionalResidualPeriodCollection PR_RegionalResidualPeriodsCol
		{
			get
			{
				if(_PR_RegionalResidualPeriodsCol == null) {
					_PR_RegionalResidualPeriodsCol = new PR_RegionalResidualPeriodCollection();
					_PR_RegionalResidualPeriodsCol.LoadAndCloseReader(PR_RegionalResidualPeriod.Query()
						.WHERE(PR_RegionalResidualPeriod.Columns.PrimarySeasonID, SeasonID).ExecuteReader());
				}
				return _PR_RegionalResidualPeriodsCol;
			}
		}

		private PR_SalesManagerBackendCollection _PR_SalesManagerBackendsCol;
		//Relationship: FK_PR_SalesManagerBackends_RU_Season
		public PR_SalesManagerBackendCollection PR_SalesManagerBackendsCol
		{
			get
			{
				if(_PR_SalesManagerBackendsCol == null) {
					_PR_SalesManagerBackendsCol = new PR_SalesManagerBackendCollection();
					_PR_SalesManagerBackendsCol.LoadAndCloseReader(PR_SalesManagerBackend.Query()
						.WHERE(PR_SalesManagerBackend.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_SalesManagerBackendsCol;
			}
		}

		private PR_SalesRegionalBackendCollection _PR_SalesRegionalBackendsCol;
		//Relationship: FK_PR_SalesRegionalBackends_RU_Season
		public PR_SalesRegionalBackendCollection PR_SalesRegionalBackendsCol
		{
			get
			{
				if(_PR_SalesRegionalBackendsCol == null) {
					_PR_SalesRegionalBackendsCol = new PR_SalesRegionalBackendCollection();
					_PR_SalesRegionalBackendsCol.LoadAndCloseReader(PR_SalesRegionalBackend.Query()
						.WHERE(PR_SalesRegionalBackend.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_SalesRegionalBackendsCol;
			}
		}

		private PR_SalesRepBackendCollection _PR_SalesRepBackendsCol;
		//Relationship: FK_PR_SalesRepBackends_RU_Season
		public PR_SalesRepBackendCollection PR_SalesRepBackendsCol
		{
			get
			{
				if(_PR_SalesRepBackendsCol == null) {
					_PR_SalesRepBackendsCol = new PR_SalesRepBackendCollection();
					_PR_SalesRepBackendsCol.LoadAndCloseReader(PR_SalesRepBackend.Query()
						.WHERE(PR_SalesRepBackend.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_SalesRepBackendsCol;
			}
		}

		private PR_SigningBonusAmountCollection _PR_SigningBonusAmountsCol;
		//Relationship: FK_PR_SigningBonusAmounts_RU_Season
		public PR_SigningBonusAmountCollection PR_SigningBonusAmountsCol
		{
			get
			{
				if(_PR_SigningBonusAmountsCol == null) {
					_PR_SigningBonusAmountsCol = new PR_SigningBonusAmountCollection();
					_PR_SigningBonusAmountsCol.LoadAndCloseReader(PR_SigningBonusAmount.Query()
						.WHERE(PR_SigningBonusAmount.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_SigningBonusAmountsCol;
			}
		}

		private PR_TechBackendCollection _PR_TechBackendsCol;
		//Relationship: FK_PR_TechBackends_RU_Season
		public PR_TechBackendCollection PR_TechBackendsCol
		{
			get
			{
				if(_PR_TechBackendsCol == null) {
					_PR_TechBackendsCol = new PR_TechBackendCollection();
					_PR_TechBackendsCol.LoadAndCloseReader(PR_TechBackend.Query()
						.WHERE(PR_TechBackend.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_TechBackendsCol;
			}
		}

		private PR_TechRecruitingBonuseCollection _PR_TechRecruitingBonusesCol;
		//Relationship: FK_PR_TechRecruitingBonuses_RU_Season
		public PR_TechRecruitingBonuseCollection PR_TechRecruitingBonusesCol
		{
			get
			{
				if(_PR_TechRecruitingBonusesCol == null) {
					_PR_TechRecruitingBonusesCol = new PR_TechRecruitingBonuseCollection();
					_PR_TechRecruitingBonusesCol.LoadAndCloseReader(PR_TechRecruitingBonuse.Query()
						.WHERE(PR_TechRecruitingBonuse.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_TechRecruitingBonusesCol;
			}
		}

		private PR_TechRecruitingBonusTreeCollection _PR_TechRecruitingBonusTreesCol;
		//Relationship: FK_PR_TechRecruitingBonusTree_RU_Season
		public PR_TechRecruitingBonusTreeCollection PR_TechRecruitingBonusTreesCol
		{
			get
			{
				if(_PR_TechRecruitingBonusTreesCol == null) {
					_PR_TechRecruitingBonusTreesCol = new PR_TechRecruitingBonusTreeCollection();
					_PR_TechRecruitingBonusTreesCol.LoadAndCloseReader(PR_TechRecruitingBonusTree.Query()
						.WHERE(PR_TechRecruitingBonusTree.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_TechRecruitingBonusTreesCol;
			}
		}

		private PR_WeeklyTransactionCollection _PR_WeeklyTransactionsCol;
		//Relationship: FK_PR_WeeklyTransactions_RU_Season
		public PR_WeeklyTransactionCollection PR_WeeklyTransactionsCol
		{
			get
			{
				if(_PR_WeeklyTransactionsCol == null) {
					_PR_WeeklyTransactionsCol = new PR_WeeklyTransactionCollection();
					_PR_WeeklyTransactionsCol.LoadAndCloseReader(PR_WeeklyTransaction.Query()
						.WHERE(PR_WeeklyTransaction.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PR_WeeklyTransactionsCol;
			}
		}

		private PS_PublicationCollection _PS_PublicationsCol;
		//Relationship: FK_PS_Publications_RU_Season
		public PS_PublicationCollection PS_PublicationsCol
		{
			get
			{
				if(_PS_PublicationsCol == null) {
					_PS_PublicationsCol = new PS_PublicationCollection();
					_PS_PublicationsCol.LoadAndCloseReader(PS_Publication.Query()
						.WHERE(PS_Publication.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _PS_PublicationsCol;
			}
		}

		private RU_MigrationCollection _RU_MigrationsCol;
		//Relationship: FK_RU_Migrations_RU_Season_FromSeason
		public RU_MigrationCollection RU_MigrationsCol
		{
			get
			{
				if(_RU_MigrationsCol == null) {
					_RU_MigrationsCol = new RU_MigrationCollection();
					_RU_MigrationsCol.LoadAndCloseReader(RU_Migration.Query()
						.WHERE(RU_Migration.Columns.FromSeasonID, SeasonID).ExecuteReader());
				}
				return _RU_MigrationsCol;
			}
		}

		private RU_MigrationCollection _RU_Migrations02Col;
		//Relationship: FK_RU_Migrations_RU_Season_ToSeason
		public RU_MigrationCollection RU_Migrations02Col
		{
			get
			{
				if(_RU_Migrations02Col == null) {
					_RU_Migrations02Col = new RU_MigrationCollection();
					_RU_Migrations02Col.LoadAndCloseReader(RU_Migration.Query()
						.WHERE(RU_Migration.Columns.ToSeasonID, SeasonID).ExecuteReader());
				}
				return _RU_Migrations02Col;
			}
		}

		private RU_RecruitCollection _RU_RecruitsCol;
		//Relationship: FK_RU_Recruits_RU_Season
		public RU_RecruitCollection RU_RecruitsCol
		{
			get
			{
				if(_RU_RecruitsCol == null) {
					_RU_RecruitsCol = new RU_RecruitCollection();
					_RU_RecruitsCol.LoadAndCloseReader(RU_Recruit.Query()
						.WHERE(RU_Recruit.Columns.SeasonId, SeasonID).ExecuteReader());
				}
				return _RU_RecruitsCol;
			}
		}

		private RU_SeasonCollection _ChildRU_SeasonsCol;
		//Relationship: FK_RU_Season_RU_Season
		public RU_SeasonCollection ChildRU_SeasonsCol
		{
			get
			{
				if(_ChildRU_SeasonsCol == null) {
					_ChildRU_SeasonsCol = new RU_SeasonCollection();
					_ChildRU_SeasonsCol.LoadAndCloseReader(RU_Season.Query()
						.WHERE(RU_Season.Columns.PreSeasonID, SeasonID).ExecuteReader());
				}
				return _ChildRU_SeasonsCol;
			}
		}

		private RU_SeasonTeamLocationDefaultCollection _RU_SeasonTeamLocationDefaultsCol;
		//Relationship: FK_RU_SeasonTeamLocationDefaults_RU_Season
		public RU_SeasonTeamLocationDefaultCollection RU_SeasonTeamLocationDefaultsCol
		{
			get
			{
				if(_RU_SeasonTeamLocationDefaultsCol == null) {
					_RU_SeasonTeamLocationDefaultsCol = new RU_SeasonTeamLocationDefaultCollection();
					_RU_SeasonTeamLocationDefaultsCol.LoadAndCloseReader(RU_SeasonTeamLocationDefault.Query()
						.WHERE(RU_SeasonTeamLocationDefault.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _RU_SeasonTeamLocationDefaultsCol;
			}
		}

		private RU_TeamLocationCollection _RU_TeamLocationsCol;
		//Relationship: FK_RU_TeamLocations_RU_Season
		public RU_TeamLocationCollection RU_TeamLocationsCol
		{
			get
			{
				if(_RU_TeamLocationsCol == null) {
					_RU_TeamLocationsCol = new RU_TeamLocationCollection();
					_RU_TeamLocationsCol.LoadAndCloseReader(RU_TeamLocation.Query()
						.WHERE(RU_TeamLocation.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _RU_TeamLocationsCol;
			}
		}

		private SAE_AccountsInstalledCollection _SAE_AccountsInstalledsCol;
		//Relationship: FK_SAE_AccountsInstalled_RU_Season
		public SAE_AccountsInstalledCollection SAE_AccountsInstalledsCol
		{
			get
			{
				if(_SAE_AccountsInstalledsCol == null) {
					_SAE_AccountsInstalledsCol = new SAE_AccountsInstalledCollection();
					_SAE_AccountsInstalledsCol.LoadAndCloseReader(SAE_AccountsInstalled.Query()
						.WHERE(SAE_AccountsInstalled.Columns.SeasonID, SeasonID).ExecuteReader());
				}
				return _SAE_AccountsInstalledsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_SeasonSummer class.
	/// </summary>
	[DataContract]
	public partial class RU_SeasonSummerCollection : ActiveList<RU_SeasonSummer, RU_SeasonSummerCollection>
	{
		public static RU_SeasonSummerCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_SeasonSummerCollection result = new RU_SeasonSummerCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_SeasonSummer item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_SeasonSummers table.
	/// </summary>
	[DataContract]
	public partial class RU_SeasonSummer : ActiveRecord<RU_SeasonSummer>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_SeasonSummer()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_SeasonSummers", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSeasonSummerID = new TableSchema.TableColumn(schema);
				colvarSeasonSummerID.ColumnName = "SeasonSummerID";
				colvarSeasonSummerID.DataType = DbType.Int32;
				colvarSeasonSummerID.MaxLength = 0;
				colvarSeasonSummerID.AutoIncrement = true;
				colvarSeasonSummerID.IsNullable = false;
				colvarSeasonSummerID.IsPrimaryKey = true;
				colvarSeasonSummerID.IsForeignKey = false;
				colvarSeasonSummerID.IsReadOnly = false;
				colvarSeasonSummerID.DefaultSetting = @"";
				colvarSeasonSummerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonSummerID);

				TableSchema.TableColumn colvarSeasonSummerName = new TableSchema.TableColumn(schema);
				colvarSeasonSummerName.ColumnName = "SeasonSummerName";
				colvarSeasonSummerName.DataType = DbType.String;
				colvarSeasonSummerName.MaxLength = 50;
				colvarSeasonSummerName.AutoIncrement = false;
				colvarSeasonSummerName.IsNullable = false;
				colvarSeasonSummerName.IsPrimaryKey = false;
				colvarSeasonSummerName.IsForeignKey = false;
				colvarSeasonSummerName.IsReadOnly = false;
				colvarSeasonSummerName.DefaultSetting = @"";
				colvarSeasonSummerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonSummerName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_SeasonSummers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_SeasonSummer LoadFrom(RU_SeasonSummer item)
		{
			RU_SeasonSummer result = new RU_SeasonSummer();
			if (item.SeasonSummerID != default(int)) {
				result.LoadByKey(item.SeasonSummerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SeasonSummerID {
			get { return GetColumnValue<int>(Columns.SeasonSummerID); }
			set {
				SetColumnValue(Columns.SeasonSummerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonSummerID));
			}
		}
		[DataMember]
		public string SeasonSummerName {
			get { return GetColumnValue<string>(Columns.SeasonSummerName); }
			set {
				SetColumnValue(Columns.SeasonSummerName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonSummerName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return SeasonSummerName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SeasonSummerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonSummerNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SeasonSummerID = @"SeasonSummerID";
			public static readonly string SeasonSummerName = @"SeasonSummerName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SeasonSummerID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_SeasonSummerSeason_Map class.
	/// </summary>
	[DataContract]
	public partial class RU_SeasonSummerSeason_MapCollection : ActiveList<RU_SeasonSummerSeason_Map, RU_SeasonSummerSeason_MapCollection>
	{
		public static RU_SeasonSummerSeason_MapCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_SeasonSummerSeason_MapCollection result = new RU_SeasonSummerSeason_MapCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_SeasonSummerSeason_Map item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_SeasonSummerSeason_Map table.
	/// </summary>
	[DataContract]
	public partial class RU_SeasonSummerSeason_Map : ActiveRecord<RU_SeasonSummerSeason_Map>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_SeasonSummerSeason_Map()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_SeasonSummerSeason_Map", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSeasonSummerID = new TableSchema.TableColumn(schema);
				colvarSeasonSummerID.ColumnName = "SeasonSummerID";
				colvarSeasonSummerID.DataType = DbType.Int32;
				colvarSeasonSummerID.MaxLength = 0;
				colvarSeasonSummerID.AutoIncrement = false;
				colvarSeasonSummerID.IsNullable = false;
				colvarSeasonSummerID.IsPrimaryKey = true;
				colvarSeasonSummerID.IsForeignKey = false;
				colvarSeasonSummerID.IsReadOnly = false;
				colvarSeasonSummerID.DefaultSetting = @"";
				colvarSeasonSummerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonSummerID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_SeasonSummerSeason_Map",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_SeasonSummerSeason_Map LoadFrom(RU_SeasonSummerSeason_Map item)
		{
			RU_SeasonSummerSeason_Map result = new RU_SeasonSummerSeason_Map();
			if (item.SeasonSummerID != default(int)) {
				result.LoadByKey(item.SeasonSummerID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SeasonSummerID {
			get { return GetColumnValue<int>(Columns.SeasonSummerID); }
			set {
				SetColumnValue(Columns.SeasonSummerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonSummerID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return SeasonSummerID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SeasonSummerIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SeasonSummerID = @"SeasonSummerID";
			public static readonly string SeasonID = @"SeasonID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SeasonSummerID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_SeasonTeamLocationDefault class.
	/// </summary>
	[DataContract]
	public partial class RU_SeasonTeamLocationDefaultCollection : ActiveList<RU_SeasonTeamLocationDefault, RU_SeasonTeamLocationDefaultCollection>
	{
		public static RU_SeasonTeamLocationDefaultCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_SeasonTeamLocationDefaultCollection result = new RU_SeasonTeamLocationDefaultCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_SeasonTeamLocationDefault item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_SeasonTeamLocationDefaults table.
	/// </summary>
	[DataContract]
	public partial class RU_SeasonTeamLocationDefault : ActiveRecord<RU_SeasonTeamLocationDefault>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_SeasonTeamLocationDefault()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_SeasonTeamLocationDefaults", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = true;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarTeamLocationId = new TableSchema.TableColumn(schema);
				colvarTeamLocationId.ColumnName = "TeamLocationId";
				colvarTeamLocationId.DataType = DbType.Int32;
				colvarTeamLocationId.MaxLength = 0;
				colvarTeamLocationId.AutoIncrement = false;
				colvarTeamLocationId.IsNullable = false;
				colvarTeamLocationId.IsPrimaryKey = false;
				colvarTeamLocationId.IsForeignKey = true;
				colvarTeamLocationId.IsReadOnly = false;
				colvarTeamLocationId.DefaultSetting = @"";
				colvarTeamLocationId.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationId);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_SeasonTeamLocationDefaults",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_SeasonTeamLocationDefault LoadFrom(RU_SeasonTeamLocationDefault item)
		{
			RU_SeasonTeamLocationDefault result = new RU_SeasonTeamLocationDefault();
			if (item.SeasonID != default(int)) {
				result.LoadByKey(item.SeasonID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int TeamLocationId {
			get { return GetColumnValue<int>(Columns.TeamLocationId); }
			set {
				SetColumnValue(Columns.TeamLocationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _Season;
		//Relationship: FK_RU_SeasonTeamLocationDefaults_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_RU_SeasonTeamLocationDefaults_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationId);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationId", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SeasonID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamLocationIdColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string TeamLocationId = @"TeamLocationId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SeasonID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_SiteCode class.
	/// </summary>
	[DataContract]
	public partial class RU_SiteCodeCollection : ActiveList<RU_SiteCode, RU_SiteCodeCollection>
	{
		public static RU_SiteCodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_SiteCodeCollection result = new RU_SiteCodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_SiteCode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_SiteCodes table.
	/// </summary>
	[DataContract]
	public partial class RU_SiteCode : ActiveRecord<RU_SiteCode>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_SiteCode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_SiteCodes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSiteCodeID = new TableSchema.TableColumn(schema);
				colvarSiteCodeID.ColumnName = "SiteCodeID";
				colvarSiteCodeID.DataType = DbType.Int32;
				colvarSiteCodeID.MaxLength = 0;
				colvarSiteCodeID.AutoIncrement = true;
				colvarSiteCodeID.IsNullable = false;
				colvarSiteCodeID.IsPrimaryKey = true;
				colvarSiteCodeID.IsForeignKey = false;
				colvarSiteCodeID.IsReadOnly = false;
				colvarSiteCodeID.DefaultSetting = @"";
				colvarSiteCodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteCodeID);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = true;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "MC_PoliticalStates";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarSiteCodeValue = new TableSchema.TableColumn(schema);
				colvarSiteCodeValue.ColumnName = "SiteCodeValue";
				colvarSiteCodeValue.DataType = DbType.String;
				colvarSiteCodeValue.MaxLength = 50;
				colvarSiteCodeValue.AutoIncrement = false;
				colvarSiteCodeValue.IsNullable = false;
				colvarSiteCodeValue.IsPrimaryKey = false;
				colvarSiteCodeValue.IsForeignKey = false;
				colvarSiteCodeValue.IsReadOnly = false;
				colvarSiteCodeValue.DefaultSetting = @"";
				colvarSiteCodeValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteCodeValue);

				TableSchema.TableColumn colvarSiteCodeDescription = new TableSchema.TableColumn(schema);
				colvarSiteCodeDescription.ColumnName = "SiteCodeDescription";
				colvarSiteCodeDescription.DataType = DbType.String;
				colvarSiteCodeDescription.MaxLength = 255;
				colvarSiteCodeDescription.AutoIncrement = false;
				colvarSiteCodeDescription.IsNullable = true;
				colvarSiteCodeDescription.IsPrimaryKey = false;
				colvarSiteCodeDescription.IsForeignKey = false;
				colvarSiteCodeDescription.IsReadOnly = false;
				colvarSiteCodeDescription.DefaultSetting = @"";
				colvarSiteCodeDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteCodeDescription);

				TableSchema.TableColumn colvarIsDefault = new TableSchema.TableColumn(schema);
				colvarIsDefault.ColumnName = "IsDefault";
				colvarIsDefault.DataType = DbType.Boolean;
				colvarIsDefault.MaxLength = 0;
				colvarIsDefault.AutoIncrement = false;
				colvarIsDefault.IsNullable = false;
				colvarIsDefault.IsPrimaryKey = false;
				colvarIsDefault.IsForeignKey = false;
				colvarIsDefault.IsReadOnly = false;
				colvarIsDefault.DefaultSetting = @"((0))";
				colvarIsDefault.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDefault);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_SiteCodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_SiteCode LoadFrom(RU_SiteCode item)
		{
			RU_SiteCode result = new RU_SiteCode();
			if (item.SiteCodeID != default(int)) {
				result.LoadByKey(item.SiteCodeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SiteCodeID {
			get { return GetColumnValue<int>(Columns.SiteCodeID); }
			set {
				SetColumnValue(Columns.SiteCodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteCodeID));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string SiteCodeValue {
			get { return GetColumnValue<string>(Columns.SiteCodeValue); }
			set {
				SetColumnValue(Columns.SiteCodeValue, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteCodeValue));
			}
		}
		[DataMember]
		public string SiteCodeDescription {
			get { return GetColumnValue<string>(Columns.SiteCodeDescription); }
			set {
				SetColumnValue(Columns.SiteCodeDescription, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteCodeDescription));
			}
		}
		[DataMember]
		public bool IsDefault {
			get { return GetColumnValue<bool>(Columns.IsDefault); }
			set {
				SetColumnValue(Columns.IsDefault, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDefault));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_PoliticalState _State;
		//Relationship: FK_RU_SiteCodes_MC_PoliticalStates
		public MC_PoliticalState State
		{
			get
			{
				if(_State == null) {
					_State = MC_PoliticalState.FetchByID(this.StateId);
				}
				return _State;
			}
			set
			{
				SetColumnValue("StateId", value.StateID);
				_State = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return StateId;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SiteCodeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SiteCodeValueColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SiteCodeDescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDefaultColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SiteCodeID = @"SiteCodeID";
			public static readonly string StateId = @"StateId";
			public static readonly string SiteCodeValue = @"SiteCodeValue";
			public static readonly string SiteCodeDescription = @"SiteCodeDescription";
			public static readonly string IsDefault = @"IsDefault";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedByDate = @"CreatedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SiteCodeID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_TeamLocationRoster class.
	/// </summary>
	[DataContract]
	public partial class RU_TeamLocationRosterCollection : ActiveList<RU_TeamLocationRoster, RU_TeamLocationRosterCollection>
	{
		public static RU_TeamLocationRosterCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TeamLocationRosterCollection result = new RU_TeamLocationRosterCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_TeamLocationRoster item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_TeamLocationRoster table.
	/// </summary>
	[DataContract]
	public partial class RU_TeamLocationRoster : ActiveRecord<RU_TeamLocationRoster>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_TeamLocationRoster()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_TeamLocationRoster", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRosterID = new TableSchema.TableColumn(schema);
				colvarRosterID.ColumnName = "RosterID";
				colvarRosterID.DataType = DbType.Int32;
				colvarRosterID.MaxLength = 0;
				colvarRosterID.AutoIncrement = true;
				colvarRosterID.IsNullable = false;
				colvarRosterID.IsPrimaryKey = true;
				colvarRosterID.IsForeignKey = false;
				colvarRosterID.IsReadOnly = false;
				colvarRosterID.DefaultSetting = @"";
				colvarRosterID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRosterID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = true;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarTerminationReasonID = new TableSchema.TableColumn(schema);
				colvarTerminationReasonID.ColumnName = "TerminationReasonID";
				colvarTerminationReasonID.DataType = DbType.Int32;
				colvarTerminationReasonID.MaxLength = 0;
				colvarTerminationReasonID.AutoIncrement = false;
				colvarTerminationReasonID.IsNullable = true;
				colvarTerminationReasonID.IsPrimaryKey = false;
				colvarTerminationReasonID.IsForeignKey = true;
				colvarTerminationReasonID.IsReadOnly = false;
				colvarTerminationReasonID.DefaultSetting = @"";
				colvarTerminationReasonID.ForeignKeyTableName = "RU_TerminationReason";
				schema.Columns.Add(colvarTerminationReasonID);

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = false;
				colvarRecruitID.IsForeignKey = true;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "RU_Recruits";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarArrivalDate = new TableSchema.TableColumn(schema);
				colvarArrivalDate.ColumnName = "ArrivalDate";
				colvarArrivalDate.DataType = DbType.DateTime;
				colvarArrivalDate.MaxLength = 0;
				colvarArrivalDate.AutoIncrement = false;
				colvarArrivalDate.IsNullable = true;
				colvarArrivalDate.IsPrimaryKey = false;
				colvarArrivalDate.IsForeignKey = false;
				colvarArrivalDate.IsReadOnly = false;
				colvarArrivalDate.DefaultSetting = @"";
				colvarArrivalDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArrivalDate);

				TableSchema.TableColumn colvarQuitDate = new TableSchema.TableColumn(schema);
				colvarQuitDate.ColumnName = "QuitDate";
				colvarQuitDate.DataType = DbType.DateTime;
				colvarQuitDate.MaxLength = 0;
				colvarQuitDate.AutoIncrement = false;
				colvarQuitDate.IsNullable = true;
				colvarQuitDate.IsPrimaryKey = false;
				colvarQuitDate.IsForeignKey = false;
				colvarQuitDate.IsReadOnly = false;
				colvarQuitDate.DefaultSetting = @"";
				colvarQuitDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuitDate);

				TableSchema.TableColumn colvarReason = new TableSchema.TableColumn(schema);
				colvarReason.ColumnName = "Reason";
				colvarReason.DataType = DbType.String;
				colvarReason.MaxLength = -1;
				colvarReason.AutoIncrement = false;
				colvarReason.IsNullable = true;
				colvarReason.IsPrimaryKey = false;
				colvarReason.IsForeignKey = false;
				colvarReason.IsReadOnly = false;
				colvarReason.DefaultSetting = @"";
				colvarReason.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReason);

				TableSchema.TableColumn colvarTerminationType = new TableSchema.TableColumn(schema);
				colvarTerminationType.ColumnName = "TerminationType";
				colvarTerminationType.DataType = DbType.String;
				colvarTerminationType.MaxLength = 50;
				colvarTerminationType.AutoIncrement = false;
				colvarTerminationType.IsNullable = true;
				colvarTerminationType.IsPrimaryKey = false;
				colvarTerminationType.IsForeignKey = false;
				colvarTerminationType.IsReadOnly = false;
				colvarTerminationType.DefaultSetting = @"";
				colvarTerminationType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTerminationType);

				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = -1;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = true;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = true;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = true;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_TeamLocationRoster",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_TeamLocationRoster LoadFrom(RU_TeamLocationRoster item)
		{
			RU_TeamLocationRoster result = new RU_TeamLocationRoster();
			if (item.RosterID != default(int)) {
				result.LoadByKey(item.RosterID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RosterID {
			get { return GetColumnValue<int>(Columns.RosterID); }
			set {
				SetColumnValue(Columns.RosterID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RosterID));
			}
		}
		[DataMember]
		public int? TeamLocationID {
			get { return GetColumnValue<int?>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int? TerminationReasonID {
			get { return GetColumnValue<int?>(Columns.TerminationReasonID); }
			set {
				SetColumnValue(Columns.TerminationReasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationReasonID));
			}
		}
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public DateTime? ArrivalDate {
			get { return GetColumnValue<DateTime?>(Columns.ArrivalDate); }
			set {
				SetColumnValue(Columns.ArrivalDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ArrivalDate));
			}
		}
		[DataMember]
		public DateTime? QuitDate {
			get { return GetColumnValue<DateTime?>(Columns.QuitDate); }
			set {
				SetColumnValue(Columns.QuitDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuitDate));
			}
		}
		[DataMember]
		public string Reason {
			get { return GetColumnValue<string>(Columns.Reason); }
			set {
				SetColumnValue(Columns.Reason, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Reason));
			}
		}
		[DataMember]
		public string TerminationType {
			get { return GetColumnValue<string>(Columns.TerminationType); }
			set {
				SetColumnValue(Columns.TerminationType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationType));
			}
		}
		[DataMember]
		public string Note {
			get { return GetColumnValue<string>(Columns.Note); }
			set {
				SetColumnValue(Columns.Note, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Note));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime? CreatedByDate {
			get { return GetColumnValue<DateTime?>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Recruit _Recruit;
		//Relationship: FK_RU_TeamLocationRoster_RU_Recruits
		public RU_Recruit Recruit
		{
			get
			{
				if(_Recruit == null) {
					_Recruit = RU_Recruit.FetchByID(this.RecruitID);
				}
				return _Recruit;
			}
			set
			{
				SetColumnValue("RecruitID", value.RecruitID);
				_Recruit = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_RU_TeamLocationRoster_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		private RU_TerminationReason _TerminationReason;
		//Relationship: FK_RU_TeamLocationRoster_RU_TerminationReason
		public RU_TerminationReason TerminationReason
		{
			get
			{
				if(_TerminationReason == null) {
					_TerminationReason = RU_TerminationReason.FetchByID(this.TerminationReasonID);
				}
				return _TerminationReason;
			}
			set
			{
				SetColumnValue("TerminationReasonID", value.TerminationReasonId);
				_TerminationReason = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RosterID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RosterIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TerminationReasonIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn ArrivalDateColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn QuitDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ReasonColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn TerminationTypeColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn NoteColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RosterID = @"RosterID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string TerminationReasonID = @"TerminationReasonID";
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string ArrivalDate = @"ArrivalDate";
			public static readonly string QuitDate = @"QuitDate";
			public static readonly string Reason = @"Reason";
			public static readonly string TerminationType = @"TerminationType";
			public static readonly string Note = @"Note";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RosterID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_TeamLocation class.
	/// </summary>
	[DataContract]
	public partial class RU_TeamLocationCollection : ActiveList<RU_TeamLocation, RU_TeamLocationCollection>
	{
		public static RU_TeamLocationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TeamLocationCollection result = new RU_TeamLocationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_TeamLocation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_TeamLocations table.
	/// </summary>
	[DataContract]
	public partial class RU_TeamLocation : ActiveRecord<RU_TeamLocation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_TeamLocation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_TeamLocations", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = true;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = true;
				colvarTeamLocationID.IsForeignKey = false;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarCreatedFromTeamLocationID = new TableSchema.TableColumn(schema);
				colvarCreatedFromTeamLocationID.ColumnName = "CreatedFromTeamLocationID";
				colvarCreatedFromTeamLocationID.DataType = DbType.Int32;
				colvarCreatedFromTeamLocationID.MaxLength = 0;
				colvarCreatedFromTeamLocationID.AutoIncrement = false;
				colvarCreatedFromTeamLocationID.IsNullable = true;
				colvarCreatedFromTeamLocationID.IsPrimaryKey = false;
				colvarCreatedFromTeamLocationID.IsForeignKey = true;
				colvarCreatedFromTeamLocationID.IsReadOnly = false;
				colvarCreatedFromTeamLocationID.DefaultSetting = @"";
				colvarCreatedFromTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarCreatedFromTeamLocationID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = true;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "MC_PoliticalStates";
				schema.Columns.Add(colvarStateId);

				TableSchema.TableColumn colvarGpSalesTerritoryId = new TableSchema.TableColumn(schema);
				colvarGpSalesTerritoryId.ColumnName = "GpSalesTerritoryId";
				colvarGpSalesTerritoryId.DataType = DbType.AnsiString;
				colvarGpSalesTerritoryId.MaxLength = 15;
				colvarGpSalesTerritoryId.AutoIncrement = false;
				colvarGpSalesTerritoryId.IsNullable = true;
				colvarGpSalesTerritoryId.IsPrimaryKey = false;
				colvarGpSalesTerritoryId.IsForeignKey = false;
				colvarGpSalesTerritoryId.IsReadOnly = false;
				colvarGpSalesTerritoryId.DefaultSetting = @"";
				colvarGpSalesTerritoryId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGpSalesTerritoryId);

				TableSchema.TableColumn colvarIvOfficeId = new TableSchema.TableColumn(schema);
				colvarIvOfficeId.ColumnName = "IvOfficeId";
				colvarIvOfficeId.DataType = DbType.Int32;
				colvarIvOfficeId.MaxLength = 0;
				colvarIvOfficeId.AutoIncrement = false;
				colvarIvOfficeId.IsNullable = true;
				colvarIvOfficeId.IsPrimaryKey = false;
				colvarIvOfficeId.IsForeignKey = false;
				colvarIvOfficeId.IsReadOnly = false;
				colvarIvOfficeId.DefaultSetting = @"";
				colvarIvOfficeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIvOfficeId);

				TableSchema.TableColumn colvarAeOfficeId = new TableSchema.TableColumn(schema);
				colvarAeOfficeId.ColumnName = "AeOfficeId";
				colvarAeOfficeId.DataType = DbType.Int32;
				colvarAeOfficeId.MaxLength = 0;
				colvarAeOfficeId.AutoIncrement = false;
				colvarAeOfficeId.IsNullable = true;
				colvarAeOfficeId.IsPrimaryKey = false;
				colvarAeOfficeId.IsForeignKey = false;
				colvarAeOfficeId.IsReadOnly = false;
				colvarAeOfficeId.DefaultSetting = @"";
				colvarAeOfficeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAeOfficeId);

				TableSchema.TableColumn colvarMarketId = new TableSchema.TableColumn(schema);
				colvarMarketId.ColumnName = "MarketId";
				colvarMarketId.DataType = DbType.Int32;
				colvarMarketId.MaxLength = 0;
				colvarMarketId.AutoIncrement = false;
				colvarMarketId.IsNullable = true;
				colvarMarketId.IsPrimaryKey = false;
				colvarMarketId.IsForeignKey = false;
				colvarMarketId.IsReadOnly = false;
				colvarMarketId.DefaultSetting = @"";
				colvarMarketId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMarketId);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.AnsiString;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarSiteCodeID = new TableSchema.TableColumn(schema);
				colvarSiteCodeID.ColumnName = "SiteCodeID";
				colvarSiteCodeID.DataType = DbType.Int32;
				colvarSiteCodeID.MaxLength = 0;
				colvarSiteCodeID.AutoIncrement = false;
				colvarSiteCodeID.IsNullable = true;
				colvarSiteCodeID.IsPrimaryKey = false;
				colvarSiteCodeID.IsForeignKey = false;
				colvarSiteCodeID.IsReadOnly = false;
				colvarSiteCodeID.DefaultSetting = @"";
				colvarSiteCodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSiteCodeID);

				TableSchema.TableColumn colvarTimeZoneId = new TableSchema.TableColumn(schema);
				colvarTimeZoneId.ColumnName = "TimeZoneId";
				colvarTimeZoneId.DataType = DbType.Int32;
				colvarTimeZoneId.MaxLength = 0;
				colvarTimeZoneId.AutoIncrement = false;
				colvarTimeZoneId.IsNullable = true;
				colvarTimeZoneId.IsPrimaryKey = false;
				colvarTimeZoneId.IsForeignKey = false;
				colvarTimeZoneId.IsReadOnly = false;
				colvarTimeZoneId.DefaultSetting = @"";
				colvarTimeZoneId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneId);

				TableSchema.TableColumn colvarTimeZoneOffset = new TableSchema.TableColumn(schema);
				colvarTimeZoneOffset.ColumnName = "TimeZoneOffset";
				colvarTimeZoneOffset.DataType = DbType.Int32;
				colvarTimeZoneOffset.MaxLength = 0;
				colvarTimeZoneOffset.AutoIncrement = false;
				colvarTimeZoneOffset.IsNullable = true;
				colvarTimeZoneOffset.IsPrimaryKey = false;
				colvarTimeZoneOffset.IsForeignKey = false;
				colvarTimeZoneOffset.IsReadOnly = false;
				colvarTimeZoneOffset.DefaultSetting = @"";
				colvarTimeZoneOffset.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTimeZoneOffset);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_TeamLocations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_TeamLocation LoadFrom(RU_TeamLocation item)
		{
			RU_TeamLocation result = new RU_TeamLocation();
			if (item.TeamLocationID != default(int)) {
				result.LoadByKey(item.TeamLocationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int? CreatedFromTeamLocationID {
			get { return GetColumnValue<int?>(Columns.CreatedFromTeamLocationID); }
			set {
				SetColumnValue(Columns.CreatedFromTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedFromTeamLocationID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}
		[DataMember]
		public string GpSalesTerritoryId {
			get { return GetColumnValue<string>(Columns.GpSalesTerritoryId); }
			set {
				SetColumnValue(Columns.GpSalesTerritoryId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GpSalesTerritoryId));
			}
		}
		[DataMember]
		public int? IvOfficeId {
			get { return GetColumnValue<int?>(Columns.IvOfficeId); }
			set {
				SetColumnValue(Columns.IvOfficeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IvOfficeId));
			}
		}
		[DataMember]
		public int? AeOfficeId {
			get { return GetColumnValue<int?>(Columns.AeOfficeId); }
			set {
				SetColumnValue(Columns.AeOfficeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AeOfficeId));
			}
		}
		[DataMember]
		public int? MarketId {
			get { return GetColumnValue<int?>(Columns.MarketId); }
			set {
				SetColumnValue(Columns.MarketId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MarketId));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public int? SiteCodeID {
			get { return GetColumnValue<int?>(Columns.SiteCodeID); }
			set {
				SetColumnValue(Columns.SiteCodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SiteCodeID));
			}
		}
		[DataMember]
		public int? TimeZoneId {
			get { return GetColumnValue<int?>(Columns.TimeZoneId); }
			set {
				SetColumnValue(Columns.TimeZoneId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneId));
			}
		}
		[DataMember]
		public int? TimeZoneOffset {
			get { return GetColumnValue<int?>(Columns.TimeZoneOffset); }
			set {
				SetColumnValue(Columns.TimeZoneOffset, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TimeZoneOffset));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_PoliticalState _State;
		//Relationship: FK_RU_TeamLocations_MC_PoliticalStates
		public MC_PoliticalState State
		{
			get
			{
				if(_State == null) {
					_State = MC_PoliticalState.FetchByID(this.StateId);
				}
				return _State;
			}
			set
			{
				SetColumnValue("StateId", value.StateID);
				_State = value;
			}
		}

		private RU_Season _Season;
		//Relationship: FK_RU_TeamLocations_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_TeamLocation _CreatedFromTeamLocation;
		//Relationship: FK_RU_TeamLocations_RU_TeamLocations
		public RU_TeamLocation CreatedFromTeamLocation
		{
			get
			{
				if(_CreatedFromTeamLocation == null) {
					_CreatedFromTeamLocation = RU_TeamLocation.FetchByID(this.CreatedFromTeamLocationID);
				}
				return _CreatedFromTeamLocation;
			}
			set
			{
				SetColumnValue("CreatedFromTeamLocationID", value.TeamLocationID);
				_CreatedFromTeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TeamLocationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CreatedFromTeamLocationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GpSalesTerritoryIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IvOfficeIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AeOfficeIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn MarketIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn SiteCodeIDColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn TimeZoneIdColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn TimeZoneOffsetColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[18]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string CreatedFromTeamLocationID = @"CreatedFromTeamLocationID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string StateId = @"StateId";
			public static readonly string GpSalesTerritoryId = @"GpSalesTerritoryId";
			public static readonly string IvOfficeId = @"IvOfficeId";
			public static readonly string AeOfficeId = @"AeOfficeId";
			public static readonly string MarketId = @"MarketId";
			public static readonly string City = @"City";
			public static readonly string Description = @"Description";
			public static readonly string SiteCodeID = @"SiteCodeID";
			public static readonly string TimeZoneId = @"TimeZoneId";
			public static readonly string TimeZoneOffset = @"TimeZoneOffset";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TeamLocationID; }
		}
		*/

		#region Foreign Collections

		private PR_AccountStateExceptionCollection _PR_AccountStateExceptionsCol;
		//Relationship: FK_PR_AccountStateExceptions_RU_TeamLocations
		public PR_AccountStateExceptionCollection PR_AccountStateExceptionsCol
		{
			get
			{
				if(_PR_AccountStateExceptionsCol == null) {
					_PR_AccountStateExceptionsCol = new PR_AccountStateExceptionCollection();
					_PR_AccountStateExceptionsCol.LoadAndCloseReader(PR_AccountStateException.Query()
						.WHERE(PR_AccountStateException.Columns.CreditedTeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _PR_AccountStateExceptionsCol;
			}
		}

		private PR_AccountStateCollection _PR_AccountStatesCol;
		//Relationship: FK_PR_AccountStates_RU_TeamLocations
		public PR_AccountStateCollection PR_AccountStatesCol
		{
			get
			{
				if(_PR_AccountStatesCol == null) {
					_PR_AccountStatesCol = new PR_AccountStateCollection();
					_PR_AccountStatesCol.LoadAndCloseReader(PR_AccountState.Query()
						.WHERE(PR_AccountState.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _PR_AccountStatesCol;
			}
		}

		private PR_AccountStateCollection _PR_AccountStates02Col;
		//Relationship: FK_PR_AccountStates_RU_TeamLocations1
		public PR_AccountStateCollection PR_AccountStates02Col
		{
			get
			{
				if(_PR_AccountStates02Col == null) {
					_PR_AccountStates02Col = new PR_AccountStateCollection();
					_PR_AccountStates02Col.LoadAndCloseReader(PR_AccountState.Query()
						.WHERE(PR_AccountState.Columns.CreditedTeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _PR_AccountStates02Col;
			}
		}

		private PR_BackendCollection _PR_BackendsCol;
		//Relationship: FK_PR_Backends_RU_TeamLocations
		public PR_BackendCollection PR_BackendsCol
		{
			get
			{
				if(_PR_BackendsCol == null) {
					_PR_BackendsCol = new PR_BackendCollection();
					_PR_BackendsCol.LoadAndCloseReader(PR_Backend.Query()
						.WHERE(PR_Backend.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _PR_BackendsCol;
			}
		}

		private PR_LeadTechBackendCollection _PR_LeadTechBackendsCol;
		//Relationship: FK_PR_LeadTechBackends_RU_TeamLocations
		public PR_LeadTechBackendCollection PR_LeadTechBackendsCol
		{
			get
			{
				if(_PR_LeadTechBackendsCol == null) {
					_PR_LeadTechBackendsCol = new PR_LeadTechBackendCollection();
					_PR_LeadTechBackendsCol.LoadAndCloseReader(PR_LeadTechBackend.Query()
						.WHERE(PR_LeadTechBackend.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _PR_LeadTechBackendsCol;
			}
		}

		private PR_OfficeCheckRecipientCollection _PR_OfficeCheckRecipientsCol;
		//Relationship: FK_PR_OfficeCheckRecipients_RU_TeamLocations
		public PR_OfficeCheckRecipientCollection PR_OfficeCheckRecipientsCol
		{
			get
			{
				if(_PR_OfficeCheckRecipientsCol == null) {
					_PR_OfficeCheckRecipientsCol = new PR_OfficeCheckRecipientCollection();
					_PR_OfficeCheckRecipientsCol.LoadAndCloseReader(PR_OfficeCheckRecipient.Query()
						.WHERE(PR_OfficeCheckRecipient.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _PR_OfficeCheckRecipientsCol;
			}
		}

		private PR_OfficeCheckCollection _PR_OfficeChecksCol;
		//Relationship: FK_PR_OfficeChecks_RU_TeamLocations
		public PR_OfficeCheckCollection PR_OfficeChecksCol
		{
			get
			{
				if(_PR_OfficeChecksCol == null) {
					_PR_OfficeChecksCol = new PR_OfficeCheckCollection();
					_PR_OfficeChecksCol.LoadAndCloseReader(PR_OfficeCheck.Query()
						.WHERE(PR_OfficeCheck.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _PR_OfficeChecksCol;
			}
		}

		private PR_OfficeTransactionCollection _PR_OfficeTransactionsCol;
		//Relationship: FK_PR_OfficeTransactions_RU_TeamLocations
		public PR_OfficeTransactionCollection PR_OfficeTransactionsCol
		{
			get
			{
				if(_PR_OfficeTransactionsCol == null) {
					_PR_OfficeTransactionsCol = new PR_OfficeTransactionCollection();
					_PR_OfficeTransactionsCol.LoadAndCloseReader(PR_OfficeTransaction.Query()
						.WHERE(PR_OfficeTransaction.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _PR_OfficeTransactionsCol;
			}
		}

		private PR_SalesManagerBackendCollection _PR_SalesManagerBackendsCol;
		//Relationship: FK_PR_SalesManagerBackends_RU_TeamLocations
		public PR_SalesManagerBackendCollection PR_SalesManagerBackendsCol
		{
			get
			{
				if(_PR_SalesManagerBackendsCol == null) {
					_PR_SalesManagerBackendsCol = new PR_SalesManagerBackendCollection();
					_PR_SalesManagerBackendsCol.LoadAndCloseReader(PR_SalesManagerBackend.Query()
						.WHERE(PR_SalesManagerBackend.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _PR_SalesManagerBackendsCol;
			}
		}

		private PS_ContentPermissionCollection _PS_ContentPermissionsCol;
		//Relationship: FK_PS_ContentPermissions_RU_TeamLocations
		public PS_ContentPermissionCollection PS_ContentPermissionsCol
		{
			get
			{
				if(_PS_ContentPermissionsCol == null) {
					_PS_ContentPermissionsCol = new PS_ContentPermissionCollection();
					_PS_ContentPermissionsCol.LoadAndCloseReader(PS_ContentPermission.Query()
						.WHERE(PS_ContentPermission.Columns.RequiredTeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _PS_ContentPermissionsCol;
			}
		}

		private RU_RollCallCollection _RU_RollCallsCol;
		//Relationship: FK_RU_RollCalls_RU_TeamLocations
		public RU_RollCallCollection RU_RollCallsCol
		{
			get
			{
				if(_RU_RollCallsCol == null) {
					_RU_RollCallsCol = new RU_RollCallCollection();
					_RU_RollCallsCol.LoadAndCloseReader(RU_RollCall.Query()
						.WHERE(RU_RollCall.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _RU_RollCallsCol;
			}
		}

		private RU_SeasonTeamLocationDefaultCollection _RU_SeasonTeamLocationDefaultsCol;
		//Relationship: FK_RU_SeasonTeamLocationDefaults_RU_TeamLocations
		public RU_SeasonTeamLocationDefaultCollection RU_SeasonTeamLocationDefaultsCol
		{
			get
			{
				if(_RU_SeasonTeamLocationDefaultsCol == null) {
					_RU_SeasonTeamLocationDefaultsCol = new RU_SeasonTeamLocationDefaultCollection();
					_RU_SeasonTeamLocationDefaultsCol.LoadAndCloseReader(RU_SeasonTeamLocationDefault.Query()
						.WHERE(RU_SeasonTeamLocationDefault.Columns.TeamLocationId, TeamLocationID).ExecuteReader());
				}
				return _RU_SeasonTeamLocationDefaultsCol;
			}
		}

		private RU_TeamLocationRosterCollection _RU_TeamLocationRostersCol;
		//Relationship: FK_RU_TeamLocationRoster_RU_TeamLocations
		public RU_TeamLocationRosterCollection RU_TeamLocationRostersCol
		{
			get
			{
				if(_RU_TeamLocationRostersCol == null) {
					_RU_TeamLocationRostersCol = new RU_TeamLocationRosterCollection();
					_RU_TeamLocationRostersCol.LoadAndCloseReader(RU_TeamLocationRoster.Query()
						.WHERE(RU_TeamLocationRoster.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _RU_TeamLocationRostersCol;
			}
		}

		private RU_TeamLocationCollection _ChildRU_TeamLocationsCol;
		//Relationship: FK_RU_TeamLocations_RU_TeamLocations
		public RU_TeamLocationCollection ChildRU_TeamLocationsCol
		{
			get
			{
				if(_ChildRU_TeamLocationsCol == null) {
					_ChildRU_TeamLocationsCol = new RU_TeamLocationCollection();
					_ChildRU_TeamLocationsCol.LoadAndCloseReader(RU_TeamLocation.Query()
						.WHERE(RU_TeamLocation.Columns.CreatedFromTeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _ChildRU_TeamLocationsCol;
			}
		}

		private RU_TeamLocationsAndUserCollection _RU_TeamLocationsAndUsersCol;
		//Relationship: FK_RU_TeamLocationsAndUsers_RU_TeamLocations
		public RU_TeamLocationsAndUserCollection RU_TeamLocationsAndUsersCol
		{
			get
			{
				if(_RU_TeamLocationsAndUsersCol == null) {
					_RU_TeamLocationsAndUsersCol = new RU_TeamLocationsAndUserCollection();
					_RU_TeamLocationsAndUsersCol.LoadAndCloseReader(RU_TeamLocationsAndUser.Query()
						.WHERE(RU_TeamLocationsAndUser.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _RU_TeamLocationsAndUsersCol;
			}
		}

		private RU_TeamCollection _RU_TeamsCol;
		//Relationship: FK_RU_Teams_RU_TeamLocations
		public RU_TeamCollection RU_TeamsCol
		{
			get
			{
				if(_RU_TeamsCol == null) {
					_RU_TeamsCol = new RU_TeamCollection();
					_RU_TeamsCol.LoadAndCloseReader(RU_Team.Query()
						.WHERE(RU_Team.Columns.TeamLocationId, TeamLocationID).ExecuteReader());
				}
				return _RU_TeamsCol;
			}
		}

		private RU_TerminationCollection _RU_TerminationsCol;
		//Relationship: FK_RU_Terminations_RU_TeamLocations
		public RU_TerminationCollection RU_TerminationsCol
		{
			get
			{
				if(_RU_TerminationsCol == null) {
					_RU_TerminationsCol = new RU_TerminationCollection();
					_RU_TerminationsCol.LoadAndCloseReader(RU_Termination.Query()
						.WHERE(RU_Termination.Columns.NewTeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _RU_TerminationsCol;
			}
		}

		private SAE_AccountsInstalledCollection _SAE_AccountsInstalledsCol;
		//Relationship: FK_SAE_AccountsInstalled_RU_TeamLocations
		public SAE_AccountsInstalledCollection SAE_AccountsInstalledsCol
		{
			get
			{
				if(_SAE_AccountsInstalledsCol == null) {
					_SAE_AccountsInstalledsCol = new SAE_AccountsInstalledCollection();
					_SAE_AccountsInstalledsCol.LoadAndCloseReader(SAE_AccountsInstalled.Query()
						.WHERE(SAE_AccountsInstalled.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _SAE_AccountsInstalledsCol;
			}
		}

		private SAE_AccountsInstalledCollection _SAE_AccountsInstalleds02Col;
		//Relationship: FK_SAE_AccountsInstalled_RU_TeamLocations1
		public SAE_AccountsInstalledCollection SAE_AccountsInstalleds02Col
		{
			get
			{
				if(_SAE_AccountsInstalleds02Col == null) {
					_SAE_AccountsInstalleds02Col = new SAE_AccountsInstalledCollection();
					_SAE_AccountsInstalleds02Col.LoadAndCloseReader(SAE_AccountsInstalled.Query()
						.WHERE(SAE_AccountsInstalled.Columns.CreditedTeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _SAE_AccountsInstalleds02Col;
			}
		}

		private SAE_CreditsRunCollection _SAE_CreditsRunsCol;
		//Relationship: FK_SAE_CreditsRun_RU_TeamLocations
		public SAE_CreditsRunCollection SAE_CreditsRunsCol
		{
			get
			{
				if(_SAE_CreditsRunsCol == null) {
					_SAE_CreditsRunsCol = new SAE_CreditsRunCollection();
					_SAE_CreditsRunsCol.LoadAndCloseReader(SAE_CreditsRun.Query()
						.WHERE(SAE_CreditsRun.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _SAE_CreditsRunsCol;
			}
		}

		private SAE_RecruitTeamMappingCollection _SAE_RecruitTeamMappingsCol;
		//Relationship: FK_SAE_RecruitTeamMappings_RU_TeamLocations
		public SAE_RecruitTeamMappingCollection SAE_RecruitTeamMappingsCol
		{
			get
			{
				if(_SAE_RecruitTeamMappingsCol == null) {
					_SAE_RecruitTeamMappingsCol = new SAE_RecruitTeamMappingCollection();
					_SAE_RecruitTeamMappingsCol.LoadAndCloseReader(SAE_RecruitTeamMapping.Query()
						.WHERE(SAE_RecruitTeamMapping.Columns.TeamLocationID, TeamLocationID).ExecuteReader());
				}
				return _SAE_RecruitTeamMappingsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_TeamLocationsAndUser class.
	/// </summary>
	[DataContract]
	public partial class RU_TeamLocationsAndUserCollection : ActiveList<RU_TeamLocationsAndUser, RU_TeamLocationsAndUserCollection>
	{
		public static RU_TeamLocationsAndUserCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TeamLocationsAndUserCollection result = new RU_TeamLocationsAndUserCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_TeamLocationsAndUser item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_TeamLocationsAndUsers table.
	/// </summary>
	[DataContract]
	public partial class RU_TeamLocationsAndUser : ActiveRecord<RU_TeamLocationsAndUser>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_TeamLocationsAndUser()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_TeamLocationsAndUsers", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTeamLocationUserID = new TableSchema.TableColumn(schema);
				colvarTeamLocationUserID.ColumnName = "TeamLocationUserID";
				colvarTeamLocationUserID.DataType = DbType.Int32;
				colvarTeamLocationUserID.MaxLength = 0;
				colvarTeamLocationUserID.AutoIncrement = true;
				colvarTeamLocationUserID.IsNullable = false;
				colvarTeamLocationUserID.IsPrimaryKey = true;
				colvarTeamLocationUserID.IsForeignKey = false;
				colvarTeamLocationUserID.IsReadOnly = false;
				colvarTeamLocationUserID.DefaultSetting = @"";
				colvarTeamLocationUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationUserID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = false;
				colvarRecruitID.IsForeignKey = true;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "RU_Recruits";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarRoleLocationID = new TableSchema.TableColumn(schema);
				colvarRoleLocationID.ColumnName = "RoleLocationID";
				colvarRoleLocationID.DataType = DbType.Int32;
				colvarRoleLocationID.MaxLength = 0;
				colvarRoleLocationID.AutoIncrement = false;
				colvarRoleLocationID.IsNullable = false;
				colvarRoleLocationID.IsPrimaryKey = false;
				colvarRoleLocationID.IsForeignKey = true;
				colvarRoleLocationID.IsReadOnly = false;
				colvarRoleLocationID.DefaultSetting = @"";
				colvarRoleLocationID.ForeignKeyTableName = "RU_RoleLocations";
				schema.Columns.Add(colvarRoleLocationID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_TeamLocationsAndUsers",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_TeamLocationsAndUser LoadFrom(RU_TeamLocationsAndUser item)
		{
			RU_TeamLocationsAndUser result = new RU_TeamLocationsAndUser();
			if (item.TeamLocationUserID != default(int)) {
				result.LoadByKey(item.TeamLocationUserID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TeamLocationUserID {
			get { return GetColumnValue<int>(Columns.TeamLocationUserID); }
			set {
				SetColumnValue(Columns.TeamLocationUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationUserID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public int RoleLocationID {
			get { return GetColumnValue<int>(Columns.RoleLocationID); }
			set {
				SetColumnValue(Columns.RoleLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RoleLocationID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Recruit _Recruit;
		//Relationship: FK_RU_TeamLocationsAndUsers_RU_Recruits
		public RU_Recruit Recruit
		{
			get
			{
				if(_Recruit == null) {
					_Recruit = RU_Recruit.FetchByID(this.RecruitID);
				}
				return _Recruit;
			}
			set
			{
				SetColumnValue("RecruitID", value.RecruitID);
				_Recruit = value;
			}
		}

		private RU_RoleLocation _RoleLocation;
		//Relationship: FK_RU_TeamLocationsAndUsers_RU_RoleLocations
		public RU_RoleLocation RoleLocation
		{
			get
			{
				if(_RoleLocation == null) {
					_RoleLocation = RU_RoleLocation.FetchByID(this.RoleLocationID);
				}
				return _RoleLocation;
			}
			set
			{
				SetColumnValue("RoleLocationID", value.RoleLocationID);
				_RoleLocation = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_RU_TeamLocationsAndUsers_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TeamLocationUserID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TeamLocationUserIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RoleLocationIDColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TeamLocationUserID = @"TeamLocationUserID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string RoleLocationID = @"RoleLocationID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TeamLocationUserID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_TeamLocationStateMapping class.
	/// </summary>
	[DataContract]
	public partial class RU_TeamLocationStateMappingCollection : ActiveList<RU_TeamLocationStateMapping, RU_TeamLocationStateMappingCollection>
	{
		public static RU_TeamLocationStateMappingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TeamLocationStateMappingCollection result = new RU_TeamLocationStateMappingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_TeamLocationStateMapping item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_TeamLocationStateMappings table.
	/// </summary>
	[DataContract]
	public partial class RU_TeamLocationStateMapping : ActiveRecord<RU_TeamLocationStateMapping>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_TeamLocationStateMapping()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_TeamLocationStateMappings", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarStateMappingID = new TableSchema.TableColumn(schema);
				colvarStateMappingID.ColumnName = "StateMappingID";
				colvarStateMappingID.DataType = DbType.Int32;
				colvarStateMappingID.MaxLength = 0;
				colvarStateMappingID.AutoIncrement = true;
				colvarStateMappingID.IsNullable = false;
				colvarStateMappingID.IsPrimaryKey = true;
				colvarStateMappingID.IsForeignKey = false;
				colvarStateMappingID.IsReadOnly = false;
				colvarStateMappingID.DefaultSetting = @"";
				colvarStateMappingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStateMappingID);

				TableSchema.TableColumn colvarTeamLocationId = new TableSchema.TableColumn(schema);
				colvarTeamLocationId.ColumnName = "TeamLocationId";
				colvarTeamLocationId.DataType = DbType.Int32;
				colvarTeamLocationId.MaxLength = 0;
				colvarTeamLocationId.AutoIncrement = false;
				colvarTeamLocationId.IsNullable = false;
				colvarTeamLocationId.IsPrimaryKey = false;
				colvarTeamLocationId.IsForeignKey = false;
				colvarTeamLocationId.IsReadOnly = false;
				colvarTeamLocationId.DefaultSetting = @"";
				colvarTeamLocationId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationId);

				TableSchema.TableColumn colvarSeasonId = new TableSchema.TableColumn(schema);
				colvarSeasonId.ColumnName = "SeasonId";
				colvarSeasonId.DataType = DbType.Int32;
				colvarSeasonId.MaxLength = 0;
				colvarSeasonId.AutoIncrement = false;
				colvarSeasonId.IsNullable = false;
				colvarSeasonId.IsPrimaryKey = false;
				colvarSeasonId.IsForeignKey = false;
				colvarSeasonId.IsReadOnly = false;
				colvarSeasonId.DefaultSetting = @"";
				colvarSeasonId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonId);

				TableSchema.TableColumn colvarStateId = new TableSchema.TableColumn(schema);
				colvarStateId.ColumnName = "StateId";
				colvarStateId.DataType = DbType.AnsiString;
				colvarStateId.MaxLength = 4;
				colvarStateId.AutoIncrement = false;
				colvarStateId.IsNullable = false;
				colvarStateId.IsPrimaryKey = false;
				colvarStateId.IsForeignKey = true;
				colvarStateId.IsReadOnly = false;
				colvarStateId.DefaultSetting = @"";
				colvarStateId.ForeignKeyTableName = "MC_PoliticalStates";
				schema.Columns.Add(colvarStateId);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_TeamLocationStateMappings",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_TeamLocationStateMapping LoadFrom(RU_TeamLocationStateMapping item)
		{
			RU_TeamLocationStateMapping result = new RU_TeamLocationStateMapping();
			if (item.StateMappingID != default(int)) {
				result.LoadByKey(item.StateMappingID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int StateMappingID {
			get { return GetColumnValue<int>(Columns.StateMappingID); }
			set {
				SetColumnValue(Columns.StateMappingID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateMappingID));
			}
		}
		[DataMember]
		public int TeamLocationId {
			get { return GetColumnValue<int>(Columns.TeamLocationId); }
			set {
				SetColumnValue(Columns.TeamLocationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationId));
			}
		}
		[DataMember]
		public int SeasonId {
			get { return GetColumnValue<int>(Columns.SeasonId); }
			set {
				SetColumnValue(Columns.SeasonId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonId));
			}
		}
		[DataMember]
		public string StateId {
			get { return GetColumnValue<string>(Columns.StateId); }
			set {
				SetColumnValue(Columns.StateId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.StateId));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private MC_PoliticalState _State;
		//Relationship: FK_RU_TeamLocationStateMappings_MC_PoliticalStates
		public MC_PoliticalState State
		{
			get
			{
				if(_State == null) {
					_State = MC_PoliticalState.FetchByID(this.StateId);
				}
				return _State;
			}
			set
			{
				SetColumnValue("StateId", value.StateID);
				_State = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return StateMappingID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn StateMappingIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamLocationIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SeasonIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn StateIdColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string StateMappingID = @"StateMappingID";
			public static readonly string TeamLocationId = @"TeamLocationId";
			public static readonly string SeasonId = @"SeasonId";
			public static readonly string StateId = @"StateId";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return StateMappingID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_Team class.
	/// </summary>
	[DataContract]
	public partial class RU_TeamCollection : ActiveList<RU_Team, RU_TeamCollection>
	{
		public static RU_TeamCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TeamCollection result = new RU_TeamCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_Team item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_Teams table.
	/// </summary>
	[DataContract]
	public partial class RU_Team : ActiveRecord<RU_Team>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_Team()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_Teams", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTeamID = new TableSchema.TableColumn(schema);
				colvarTeamID.ColumnName = "TeamID";
				colvarTeamID.DataType = DbType.Int32;
				colvarTeamID.MaxLength = 0;
				colvarTeamID.AutoIncrement = true;
				colvarTeamID.IsNullable = false;
				colvarTeamID.IsPrimaryKey = true;
				colvarTeamID.IsForeignKey = false;
				colvarTeamID.IsReadOnly = false;
				colvarTeamID.DefaultSetting = @"";
				colvarTeamID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarCreatedFromTeamId = new TableSchema.TableColumn(schema);
				colvarCreatedFromTeamId.ColumnName = "CreatedFromTeamId";
				colvarCreatedFromTeamId.DataType = DbType.Int32;
				colvarCreatedFromTeamId.MaxLength = 0;
				colvarCreatedFromTeamId.AutoIncrement = false;
				colvarCreatedFromTeamId.IsNullable = true;
				colvarCreatedFromTeamId.IsPrimaryKey = false;
				colvarCreatedFromTeamId.IsForeignKey = false;
				colvarCreatedFromTeamId.IsReadOnly = false;
				colvarCreatedFromTeamId.DefaultSetting = @"";
				colvarCreatedFromTeamId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedFromTeamId);

				TableSchema.TableColumn colvarTeamLocationId = new TableSchema.TableColumn(schema);
				colvarTeamLocationId.ColumnName = "TeamLocationId";
				colvarTeamLocationId.DataType = DbType.Int32;
				colvarTeamLocationId.MaxLength = 0;
				colvarTeamLocationId.AutoIncrement = false;
				colvarTeamLocationId.IsNullable = false;
				colvarTeamLocationId.IsPrimaryKey = false;
				colvarTeamLocationId.IsForeignKey = true;
				colvarTeamLocationId.IsReadOnly = false;
				colvarTeamLocationId.DefaultSetting = @"";
				colvarTeamLocationId.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationId);

				TableSchema.TableColumn colvarRoleLocationId = new TableSchema.TableColumn(schema);
				colvarRoleLocationId.ColumnName = "RoleLocationId";
				colvarRoleLocationId.DataType = DbType.Int32;
				colvarRoleLocationId.MaxLength = 0;
				colvarRoleLocationId.AutoIncrement = false;
				colvarRoleLocationId.IsNullable = true;
				colvarRoleLocationId.IsPrimaryKey = false;
				colvarRoleLocationId.IsForeignKey = true;
				colvarRoleLocationId.IsReadOnly = false;
				colvarRoleLocationId.DefaultSetting = @"";
				colvarRoleLocationId.ForeignKeyTableName = "RU_RoleLocations";
				schema.Columns.Add(colvarRoleLocationId);

				TableSchema.TableColumn colvarRegionalManagerRecruitId = new TableSchema.TableColumn(schema);
				colvarRegionalManagerRecruitId.ColumnName = "RegionalManagerRecruitId";
				colvarRegionalManagerRecruitId.DataType = DbType.Int32;
				colvarRegionalManagerRecruitId.MaxLength = 0;
				colvarRegionalManagerRecruitId.AutoIncrement = false;
				colvarRegionalManagerRecruitId.IsNullable = true;
				colvarRegionalManagerRecruitId.IsPrimaryKey = false;
				colvarRegionalManagerRecruitId.IsForeignKey = true;
				colvarRegionalManagerRecruitId.IsReadOnly = false;
				colvarRegionalManagerRecruitId.DefaultSetting = @"";
				colvarRegionalManagerRecruitId.ForeignKeyTableName = "RU_Recruits";
				schema.Columns.Add(colvarRegionalManagerRecruitId);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_Teams",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_Team LoadFrom(RU_Team item)
		{
			RU_Team result = new RU_Team();
			if (item.TeamID != default(int)) {
				result.LoadByKey(item.TeamID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TeamID {
			get { return GetColumnValue<int>(Columns.TeamID); }
			set {
				SetColumnValue(Columns.TeamID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public int? CreatedFromTeamId {
			get { return GetColumnValue<int?>(Columns.CreatedFromTeamId); }
			set {
				SetColumnValue(Columns.CreatedFromTeamId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedFromTeamId));
			}
		}
		[DataMember]
		public int TeamLocationId {
			get { return GetColumnValue<int>(Columns.TeamLocationId); }
			set {
				SetColumnValue(Columns.TeamLocationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationId));
			}
		}
		[DataMember]
		public int? RoleLocationId {
			get { return GetColumnValue<int?>(Columns.RoleLocationId); }
			set {
				SetColumnValue(Columns.RoleLocationId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RoleLocationId));
			}
		}
		[DataMember]
		public int? RegionalManagerRecruitId {
			get { return GetColumnValue<int?>(Columns.RegionalManagerRecruitId); }
			set {
				SetColumnValue(Columns.RegionalManagerRecruitId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionalManagerRecruitId));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime ModifiedOn {
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Recruit _RegionalManagerRecruit;
		//Relationship: FK_RU_Teams_RU_Recruits
		public RU_Recruit RegionalManagerRecruit
		{
			get
			{
				if(_RegionalManagerRecruit == null) {
					_RegionalManagerRecruit = RU_Recruit.FetchByID(this.RegionalManagerRecruitId);
				}
				return _RegionalManagerRecruit;
			}
			set
			{
				SetColumnValue("RegionalManagerRecruitId", value.RecruitID);
				_RegionalManagerRecruit = value;
			}
		}

		private RU_RoleLocation _RoleLocation;
		//Relationship: FK_RU_Teams_RU_RoleLocations
		public RU_RoleLocation RoleLocation
		{
			get
			{
				if(_RoleLocation == null) {
					_RoleLocation = RU_RoleLocation.FetchByID(this.RoleLocationId);
				}
				return _RoleLocation;
			}
			set
			{
				SetColumnValue("RoleLocationId", value.RoleLocationID);
				_RoleLocation = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_RU_Teams_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationId);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationId", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TeamIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreatedFromTeamIdColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TeamLocationIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RoleLocationIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RegionalManagerRecruitIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TeamID = @"TeamID";
			public static readonly string Description = @"Description";
			public static readonly string CreatedFromTeamId = @"CreatedFromTeamId";
			public static readonly string TeamLocationId = @"TeamLocationId";
			public static readonly string RoleLocationId = @"RoleLocationId";
			public static readonly string RegionalManagerRecruitId = @"RegionalManagerRecruitId";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TeamID; }
		}
		*/

		#region Foreign Collections

		private PS_ContentPermissionCollection _PS_ContentPermissionsCol;
		//Relationship: FK_PS_ContentPermissions_RU_Teams
		public PS_ContentPermissionCollection PS_ContentPermissionsCol
		{
			get
			{
				if(_PS_ContentPermissionsCol == null) {
					_PS_ContentPermissionsCol = new PS_ContentPermissionCollection();
					_PS_ContentPermissionsCol.LoadAndCloseReader(PS_ContentPermission.Query()
						.WHERE(PS_ContentPermission.Columns.RequiredTeamID, TeamID).ExecuteReader());
				}
				return _PS_ContentPermissionsCol;
			}
		}

		private RU_RecruitCollection _RU_RecruitsCol;
		//Relationship: FK_RU_Recruits_RU_Teams
		public RU_RecruitCollection RU_RecruitsCol
		{
			get
			{
				if(_RU_RecruitsCol == null) {
					_RU_RecruitsCol = new RU_RecruitCollection();
					_RU_RecruitsCol.LoadAndCloseReader(RU_Recruit.Query()
						.WHERE(RU_Recruit.Columns.TeamId, TeamID).ExecuteReader());
				}
				return _RU_RecruitsCol;
			}
		}

		private SAE_RecruitTeamMappingCollection _SAE_RecruitTeamMappingsCol;
		//Relationship: FK_SAE_RecruitTeamMappings_RU_Teams
		public SAE_RecruitTeamMappingCollection SAE_RecruitTeamMappingsCol
		{
			get
			{
				if(_SAE_RecruitTeamMappingsCol == null) {
					_SAE_RecruitTeamMappingsCol = new SAE_RecruitTeamMappingCollection();
					_SAE_RecruitTeamMappingsCol.LoadAndCloseReader(SAE_RecruitTeamMapping.Query()
						.WHERE(SAE_RecruitTeamMapping.Columns.TeamID, TeamID).ExecuteReader());
				}
				return _SAE_RecruitTeamMappingsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_TerminationCategory class.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationCategoryCollection : ActiveList<RU_TerminationCategory, RU_TerminationCategoryCollection>
	{
		public static RU_TerminationCategoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TerminationCategoryCollection result = new RU_TerminationCategoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_TerminationCategory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_TerminationCategories table.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationCategory : ActiveRecord<RU_TerminationCategory>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_TerminationCategory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_TerminationCategories", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTerminationCategoryID = new TableSchema.TableColumn(schema);
				colvarTerminationCategoryID.ColumnName = "TerminationCategoryID";
				colvarTerminationCategoryID.DataType = DbType.Int32;
				colvarTerminationCategoryID.MaxLength = 0;
				colvarTerminationCategoryID.AutoIncrement = true;
				colvarTerminationCategoryID.IsNullable = false;
				colvarTerminationCategoryID.IsPrimaryKey = true;
				colvarTerminationCategoryID.IsForeignKey = false;
				colvarTerminationCategoryID.IsReadOnly = false;
				colvarTerminationCategoryID.DefaultSetting = @"";
				colvarTerminationCategoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTerminationCategoryID);

				TableSchema.TableColumn colvarTerminationTypeID = new TableSchema.TableColumn(schema);
				colvarTerminationTypeID.ColumnName = "TerminationTypeID";
				colvarTerminationTypeID.DataType = DbType.Int32;
				colvarTerminationTypeID.MaxLength = 0;
				colvarTerminationTypeID.AutoIncrement = false;
				colvarTerminationTypeID.IsNullable = false;
				colvarTerminationTypeID.IsPrimaryKey = false;
				colvarTerminationTypeID.IsForeignKey = true;
				colvarTerminationTypeID.IsReadOnly = false;
				colvarTerminationTypeID.DefaultSetting = @"";
				colvarTerminationTypeID.ForeignKeyTableName = "RU_TerminationType";
				schema.Columns.Add(colvarTerminationTypeID);

				TableSchema.TableColumn colvarTerminationCategory = new TableSchema.TableColumn(schema);
				colvarTerminationCategory.ColumnName = "TerminationCategory";
				colvarTerminationCategory.DataType = DbType.String;
				colvarTerminationCategory.MaxLength = 50;
				colvarTerminationCategory.AutoIncrement = false;
				colvarTerminationCategory.IsNullable = false;
				colvarTerminationCategory.IsPrimaryKey = false;
				colvarTerminationCategory.IsForeignKey = false;
				colvarTerminationCategory.IsReadOnly = false;
				colvarTerminationCategory.DefaultSetting = @"";
				colvarTerminationCategory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTerminationCategory);

				TableSchema.TableColumn colvarRequiresLastDateWorked = new TableSchema.TableColumn(schema);
				colvarRequiresLastDateWorked.ColumnName = "RequiresLastDateWorked";
				colvarRequiresLastDateWorked.DataType = DbType.Boolean;
				colvarRequiresLastDateWorked.MaxLength = 0;
				colvarRequiresLastDateWorked.AutoIncrement = false;
				colvarRequiresLastDateWorked.IsNullable = false;
				colvarRequiresLastDateWorked.IsPrimaryKey = false;
				colvarRequiresLastDateWorked.IsForeignKey = false;
				colvarRequiresLastDateWorked.IsReadOnly = false;
				colvarRequiresLastDateWorked.DefaultSetting = @"((1))";
				colvarRequiresLastDateWorked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequiresLastDateWorked);

				TableSchema.TableColumn colvarRequiresExplanation = new TableSchema.TableColumn(schema);
				colvarRequiresExplanation.ColumnName = "RequiresExplanation";
				colvarRequiresExplanation.DataType = DbType.Boolean;
				colvarRequiresExplanation.MaxLength = 0;
				colvarRequiresExplanation.AutoIncrement = false;
				colvarRequiresExplanation.IsNullable = false;
				colvarRequiresExplanation.IsPrimaryKey = false;
				colvarRequiresExplanation.IsForeignKey = false;
				colvarRequiresExplanation.IsReadOnly = false;
				colvarRequiresExplanation.DefaultSetting = @"((1))";
				colvarRequiresExplanation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequiresExplanation);

				TableSchema.TableColumn colvarRequiresNoticeGiven = new TableSchema.TableColumn(schema);
				colvarRequiresNoticeGiven.ColumnName = "RequiresNoticeGiven";
				colvarRequiresNoticeGiven.DataType = DbType.Boolean;
				colvarRequiresNoticeGiven.MaxLength = 0;
				colvarRequiresNoticeGiven.AutoIncrement = false;
				colvarRequiresNoticeGiven.IsNullable = false;
				colvarRequiresNoticeGiven.IsPrimaryKey = false;
				colvarRequiresNoticeGiven.IsForeignKey = false;
				colvarRequiresNoticeGiven.IsReadOnly = false;
				colvarRequiresNoticeGiven.DefaultSetting = @"((0))";
				colvarRequiresNoticeGiven.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequiresNoticeGiven);

				TableSchema.TableColumn colvarRequiresIntendedLastDay = new TableSchema.TableColumn(schema);
				colvarRequiresIntendedLastDay.ColumnName = "RequiresIntendedLastDay";
				colvarRequiresIntendedLastDay.DataType = DbType.Boolean;
				colvarRequiresIntendedLastDay.MaxLength = 0;
				colvarRequiresIntendedLastDay.AutoIncrement = false;
				colvarRequiresIntendedLastDay.IsNullable = false;
				colvarRequiresIntendedLastDay.IsPrimaryKey = false;
				colvarRequiresIntendedLastDay.IsForeignKey = false;
				colvarRequiresIntendedLastDay.IsReadOnly = false;
				colvarRequiresIntendedLastDay.DefaultSetting = @"((0))";
				colvarRequiresIntendedLastDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequiresIntendedLastDay);

				TableSchema.TableColumn colvarRequiresNewTeamLocationID = new TableSchema.TableColumn(schema);
				colvarRequiresNewTeamLocationID.ColumnName = "RequiresNewTeamLocationID";
				colvarRequiresNewTeamLocationID.DataType = DbType.Boolean;
				colvarRequiresNewTeamLocationID.MaxLength = 0;
				colvarRequiresNewTeamLocationID.AutoIncrement = false;
				colvarRequiresNewTeamLocationID.IsNullable = false;
				colvarRequiresNewTeamLocationID.IsPrimaryKey = false;
				colvarRequiresNewTeamLocationID.IsForeignKey = false;
				colvarRequiresNewTeamLocationID.IsReadOnly = false;
				colvarRequiresNewTeamLocationID.DefaultSetting = @"((0))";
				colvarRequiresNewTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequiresNewTeamLocationID);

				TableSchema.TableColumn colvarExplanationPrompt = new TableSchema.TableColumn(schema);
				colvarExplanationPrompt.ColumnName = "ExplanationPrompt";
				colvarExplanationPrompt.DataType = DbType.String;
				colvarExplanationPrompt.MaxLength = 1073741823;
				colvarExplanationPrompt.AutoIncrement = false;
				colvarExplanationPrompt.IsNullable = true;
				colvarExplanationPrompt.IsPrimaryKey = false;
				colvarExplanationPrompt.IsForeignKey = false;
				colvarExplanationPrompt.IsReadOnly = false;
				colvarExplanationPrompt.DefaultSetting = @"";
				colvarExplanationPrompt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExplanationPrompt);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_TerminationCategories",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_TerminationCategory LoadFrom(RU_TerminationCategory item)
		{
			RU_TerminationCategory result = new RU_TerminationCategory();
			if (item.TerminationCategoryID != default(int)) {
				result.LoadByKey(item.TerminationCategoryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TerminationCategoryID {
			get { return GetColumnValue<int>(Columns.TerminationCategoryID); }
			set {
				SetColumnValue(Columns.TerminationCategoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationCategoryID));
			}
		}
		[DataMember]
		public int TerminationTypeID {
			get { return GetColumnValue<int>(Columns.TerminationTypeID); }
			set {
				SetColumnValue(Columns.TerminationTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationTypeID));
			}
		}
		[DataMember]
		public string TerminationCategory {
			get { return GetColumnValue<string>(Columns.TerminationCategory); }
			set {
				SetColumnValue(Columns.TerminationCategory, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationCategory));
			}
		}
		[DataMember]
		public bool RequiresLastDateWorked {
			get { return GetColumnValue<bool>(Columns.RequiresLastDateWorked); }
			set {
				SetColumnValue(Columns.RequiresLastDateWorked, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiresLastDateWorked));
			}
		}
		[DataMember]
		public bool RequiresExplanation {
			get { return GetColumnValue<bool>(Columns.RequiresExplanation); }
			set {
				SetColumnValue(Columns.RequiresExplanation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiresExplanation));
			}
		}
		[DataMember]
		public bool RequiresNoticeGiven {
			get { return GetColumnValue<bool>(Columns.RequiresNoticeGiven); }
			set {
				SetColumnValue(Columns.RequiresNoticeGiven, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiresNoticeGiven));
			}
		}
		[DataMember]
		public bool RequiresIntendedLastDay {
			get { return GetColumnValue<bool>(Columns.RequiresIntendedLastDay); }
			set {
				SetColumnValue(Columns.RequiresIntendedLastDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiresIntendedLastDay));
			}
		}
		[DataMember]
		public bool RequiresNewTeamLocationID {
			get { return GetColumnValue<bool>(Columns.RequiresNewTeamLocationID); }
			set {
				SetColumnValue(Columns.RequiresNewTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RequiresNewTeamLocationID));
			}
		}
		[DataMember]
		public string ExplanationPrompt {
			get { return GetColumnValue<string>(Columns.ExplanationPrompt); }
			set {
				SetColumnValue(Columns.ExplanationPrompt, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ExplanationPrompt));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_TerminationType _TerminationType;
		//Relationship: FK_RU_TerminationCategories_RU_TerminationType
		public RU_TerminationType TerminationType
		{
			get
			{
				if(_TerminationType == null) {
					_TerminationType = RU_TerminationType.FetchByID(this.TerminationTypeID);
				}
				return _TerminationType;
			}
			set
			{
				SetColumnValue("TerminationTypeID", value.TerminationTypeId);
				_TerminationType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TerminationCategoryID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TerminationCategoryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TerminationTypeIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TerminationCategoryColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RequiresLastDateWorkedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RequiresExplanationColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RequiresNoticeGivenColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn RequiresIntendedLastDayColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn RequiresNewTeamLocationIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn ExplanationPromptColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TerminationCategoryID = @"TerminationCategoryID";
			public static readonly string TerminationTypeID = @"TerminationTypeID";
			public static readonly string TerminationCategory = @"TerminationCategory";
			public static readonly string RequiresLastDateWorked = @"RequiresLastDateWorked";
			public static readonly string RequiresExplanation = @"RequiresExplanation";
			public static readonly string RequiresNoticeGiven = @"RequiresNoticeGiven";
			public static readonly string RequiresIntendedLastDay = @"RequiresIntendedLastDay";
			public static readonly string RequiresNewTeamLocationID = @"RequiresNewTeamLocationID";
			public static readonly string ExplanationPrompt = @"ExplanationPrompt";
			public static readonly string IsActive = @"IsActive";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TerminationCategoryID; }
		}
		*/

		#region Foreign Collections

		private RU_TerminationCollection _RU_TerminationsCol;
		//Relationship: FK_RU_Terminations_RU_TerminationCategories
		public RU_TerminationCollection RU_TerminationsCol
		{
			get
			{
				if(_RU_TerminationsCol == null) {
					_RU_TerminationsCol = new RU_TerminationCollection();
					_RU_TerminationsCol.LoadAndCloseReader(RU_Termination.Query()
						.WHERE(RU_Termination.Columns.TerminationCategoryID, TerminationCategoryID).ExecuteReader());
				}
				return _RU_TerminationsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_TerminationNote class.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationNoteCollection : ActiveList<RU_TerminationNote, RU_TerminationNoteCollection>
	{
		public static RU_TerminationNoteCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TerminationNoteCollection result = new RU_TerminationNoteCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_TerminationNote item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_TerminationNotes table.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationNote : ActiveRecord<RU_TerminationNote>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_TerminationNote()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_TerminationNotes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTerminationNoteID = new TableSchema.TableColumn(schema);
				colvarTerminationNoteID.ColumnName = "TerminationNoteID";
				colvarTerminationNoteID.DataType = DbType.Int32;
				colvarTerminationNoteID.MaxLength = 0;
				colvarTerminationNoteID.AutoIncrement = true;
				colvarTerminationNoteID.IsNullable = false;
				colvarTerminationNoteID.IsPrimaryKey = true;
				colvarTerminationNoteID.IsForeignKey = false;
				colvarTerminationNoteID.IsReadOnly = false;
				colvarTerminationNoteID.DefaultSetting = @"";
				colvarTerminationNoteID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTerminationNoteID);

				TableSchema.TableColumn colvarTerminationID = new TableSchema.TableColumn(schema);
				colvarTerminationID.ColumnName = "TerminationID";
				colvarTerminationID.DataType = DbType.Int32;
				colvarTerminationID.MaxLength = 0;
				colvarTerminationID.AutoIncrement = false;
				colvarTerminationID.IsNullable = false;
				colvarTerminationID.IsPrimaryKey = false;
				colvarTerminationID.IsForeignKey = true;
				colvarTerminationID.IsReadOnly = false;
				colvarTerminationID.DefaultSetting = @"";
				colvarTerminationID.ForeignKeyTableName = "RU_Terminations";
				schema.Columns.Add(colvarTerminationID);

				TableSchema.TableColumn colvarNoteText = new TableSchema.TableColumn(schema);
				colvarNoteText.ColumnName = "NoteText";
				colvarNoteText.DataType = DbType.String;
				colvarNoteText.MaxLength = 1073741823;
				colvarNoteText.AutoIncrement = false;
				colvarNoteText.IsNullable = false;
				colvarNoteText.IsPrimaryKey = false;
				colvarNoteText.IsForeignKey = false;
				colvarNoteText.IsReadOnly = false;
				colvarNoteText.DefaultSetting = @"";
				colvarNoteText.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoteText);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_TerminationNotes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_TerminationNote LoadFrom(RU_TerminationNote item)
		{
			RU_TerminationNote result = new RU_TerminationNote();
			if (item.TerminationNoteID != default(int)) {
				result.LoadByKey(item.TerminationNoteID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TerminationNoteID {
			get { return GetColumnValue<int>(Columns.TerminationNoteID); }
			set {
				SetColumnValue(Columns.TerminationNoteID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationNoteID));
			}
		}
		[DataMember]
		public int TerminationID {
			get { return GetColumnValue<int>(Columns.TerminationID); }
			set {
				SetColumnValue(Columns.TerminationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationID));
			}
		}
		[DataMember]
		public string NoteText {
			get { return GetColumnValue<string>(Columns.NoteText); }
			set {
				SetColumnValue(Columns.NoteText, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoteText));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime CreatedOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Termination _Termination;
		//Relationship: FK_RU_TerminationNotes_RU_Terminations
		public RU_Termination Termination
		{
			get
			{
				if(_Termination == null) {
					_Termination = RU_Termination.FetchByID(this.TerminationID);
				}
				return _Termination;
			}
			set
			{
				SetColumnValue("TerminationID", value.TerminationID);
				_Termination = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TerminationNoteID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TerminationNoteIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TerminationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn NoteTextColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TerminationNoteID = @"TerminationNoteID";
			public static readonly string TerminationID = @"TerminationID";
			public static readonly string NoteText = @"NoteText";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TerminationNoteID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_TerminationReason class.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationReasonCollection : ActiveList<RU_TerminationReason, RU_TerminationReasonCollection>
	{
		public static RU_TerminationReasonCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TerminationReasonCollection result = new RU_TerminationReasonCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_TerminationReason item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_TerminationReason table.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationReason : ActiveRecord<RU_TerminationReason>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_TerminationReason()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_TerminationReason", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTerminationReasonId = new TableSchema.TableColumn(schema);
				colvarTerminationReasonId.ColumnName = "TerminationReasonId";
				colvarTerminationReasonId.DataType = DbType.Int32;
				colvarTerminationReasonId.MaxLength = 0;
				colvarTerminationReasonId.AutoIncrement = false;
				colvarTerminationReasonId.IsNullable = false;
				colvarTerminationReasonId.IsPrimaryKey = true;
				colvarTerminationReasonId.IsForeignKey = false;
				colvarTerminationReasonId.IsReadOnly = false;
				colvarTerminationReasonId.DefaultSetting = @"";
				colvarTerminationReasonId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTerminationReasonId);

				TableSchema.TableColumn colvarTerminationTypeId = new TableSchema.TableColumn(schema);
				colvarTerminationTypeId.ColumnName = "TerminationTypeId";
				colvarTerminationTypeId.DataType = DbType.Int32;
				colvarTerminationTypeId.MaxLength = 0;
				colvarTerminationTypeId.AutoIncrement = false;
				colvarTerminationTypeId.IsNullable = false;
				colvarTerminationTypeId.IsPrimaryKey = false;
				colvarTerminationTypeId.IsForeignKey = true;
				colvarTerminationTypeId.IsReadOnly = false;
				colvarTerminationTypeId.DefaultSetting = @"";
				colvarTerminationTypeId.ForeignKeyTableName = "RU_TerminationType";
				schema.Columns.Add(colvarTerminationTypeId);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_TerminationReason",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_TerminationReason LoadFrom(RU_TerminationReason item)
		{
			RU_TerminationReason result = new RU_TerminationReason();
			if (item.TerminationReasonId != default(int)) {
				result.LoadByKey(item.TerminationReasonId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TerminationReasonId {
			get { return GetColumnValue<int>(Columns.TerminationReasonId); }
			set {
				SetColumnValue(Columns.TerminationReasonId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationReasonId));
			}
		}
		[DataMember]
		public int TerminationTypeId {
			get { return GetColumnValue<int>(Columns.TerminationTypeId); }
			set {
				SetColumnValue(Columns.TerminationTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationTypeId));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_TerminationType _TerminationType;
		//Relationship: FK_RU_TerminationReason_RU_TerminationType
		public RU_TerminationType TerminationType
		{
			get
			{
				if(_TerminationType == null) {
					_TerminationType = RU_TerminationType.FetchByID(this.TerminationTypeId);
				}
				return _TerminationType;
			}
			set
			{
				SetColumnValue("TerminationTypeId", value.TerminationTypeId);
				_TerminationType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TerminationReasonId.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TerminationReasonIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TerminationTypeIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TerminationReasonId = @"TerminationReasonId";
			public static readonly string TerminationTypeId = @"TerminationTypeId";
			public static readonly string Description = @"Description";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TerminationReasonId; }
		}
		*/

		#region Foreign Collections

		private RU_TeamLocationRosterCollection _RU_TeamLocationRostersCol;
		//Relationship: FK_RU_TeamLocationRoster_RU_TerminationReason
		public RU_TeamLocationRosterCollection RU_TeamLocationRostersCol
		{
			get
			{
				if(_RU_TeamLocationRostersCol == null) {
					_RU_TeamLocationRostersCol = new RU_TeamLocationRosterCollection();
					_RU_TeamLocationRostersCol.LoadAndCloseReader(RU_TeamLocationRoster.Query()
						.WHERE(RU_TeamLocationRoster.Columns.TerminationReasonID, TerminationReasonId).ExecuteReader());
				}
				return _RU_TeamLocationRostersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_Termination class.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationCollection : ActiveList<RU_Termination, RU_TerminationCollection>
	{
		public static RU_TerminationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TerminationCollection result = new RU_TerminationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_Termination item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_Terminations table.
	/// </summary>
	[DataContract]
	public partial class RU_Termination : ActiveRecord<RU_Termination>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_Termination()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_Terminations", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTerminationID = new TableSchema.TableColumn(schema);
				colvarTerminationID.ColumnName = "TerminationID";
				colvarTerminationID.DataType = DbType.Int32;
				colvarTerminationID.MaxLength = 0;
				colvarTerminationID.AutoIncrement = true;
				colvarTerminationID.IsNullable = false;
				colvarTerminationID.IsPrimaryKey = true;
				colvarTerminationID.IsForeignKey = false;
				colvarTerminationID.IsReadOnly = false;
				colvarTerminationID.DefaultSetting = @"";
				colvarTerminationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTerminationID);

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = false;
				colvarRecruitID.IsForeignKey = true;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "RU_Recruits";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarTerminationCategoryID = new TableSchema.TableColumn(schema);
				colvarTerminationCategoryID.ColumnName = "TerminationCategoryID";
				colvarTerminationCategoryID.DataType = DbType.Int32;
				colvarTerminationCategoryID.MaxLength = 0;
				colvarTerminationCategoryID.AutoIncrement = false;
				colvarTerminationCategoryID.IsNullable = false;
				colvarTerminationCategoryID.IsPrimaryKey = false;
				colvarTerminationCategoryID.IsForeignKey = true;
				colvarTerminationCategoryID.IsReadOnly = false;
				colvarTerminationCategoryID.DefaultSetting = @"";
				colvarTerminationCategoryID.ForeignKeyTableName = "RU_TerminationCategories";
				schema.Columns.Add(colvarTerminationCategoryID);

				TableSchema.TableColumn colvarNewTeamLocationID = new TableSchema.TableColumn(schema);
				colvarNewTeamLocationID.ColumnName = "NewTeamLocationID";
				colvarNewTeamLocationID.DataType = DbType.Int32;
				colvarNewTeamLocationID.MaxLength = 0;
				colvarNewTeamLocationID.AutoIncrement = false;
				colvarNewTeamLocationID.IsNullable = true;
				colvarNewTeamLocationID.IsPrimaryKey = false;
				colvarNewTeamLocationID.IsForeignKey = true;
				colvarNewTeamLocationID.IsReadOnly = false;
				colvarNewTeamLocationID.DefaultSetting = @"";
				colvarNewTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarNewTeamLocationID);

				TableSchema.TableColumn colvarLastDateWorked = new TableSchema.TableColumn(schema);
				colvarLastDateWorked.ColumnName = "LastDateWorked";
				colvarLastDateWorked.DataType = DbType.DateTime;
				colvarLastDateWorked.MaxLength = 0;
				colvarLastDateWorked.AutoIncrement = false;
				colvarLastDateWorked.IsNullable = true;
				colvarLastDateWorked.IsPrimaryKey = false;
				colvarLastDateWorked.IsForeignKey = false;
				colvarLastDateWorked.IsReadOnly = false;
				colvarLastDateWorked.DefaultSetting = @"";
				colvarLastDateWorked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastDateWorked);

				TableSchema.TableColumn colvarExplanation = new TableSchema.TableColumn(schema);
				colvarExplanation.ColumnName = "Explanation";
				colvarExplanation.DataType = DbType.String;
				colvarExplanation.MaxLength = 1073741823;
				colvarExplanation.AutoIncrement = false;
				colvarExplanation.IsNullable = true;
				colvarExplanation.IsPrimaryKey = false;
				colvarExplanation.IsForeignKey = false;
				colvarExplanation.IsReadOnly = false;
				colvarExplanation.DefaultSetting = @"";
				colvarExplanation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExplanation);

				TableSchema.TableColumn colvarNoticeGiven = new TableSchema.TableColumn(schema);
				colvarNoticeGiven.ColumnName = "NoticeGiven";
				colvarNoticeGiven.DataType = DbType.Boolean;
				colvarNoticeGiven.MaxLength = 0;
				colvarNoticeGiven.AutoIncrement = false;
				colvarNoticeGiven.IsNullable = true;
				colvarNoticeGiven.IsPrimaryKey = false;
				colvarNoticeGiven.IsForeignKey = false;
				colvarNoticeGiven.IsReadOnly = false;
				colvarNoticeGiven.DefaultSetting = @"";
				colvarNoticeGiven.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoticeGiven);

				TableSchema.TableColumn colvarIntendedLastDay = new TableSchema.TableColumn(schema);
				colvarIntendedLastDay.ColumnName = "IntendedLastDay";
				colvarIntendedLastDay.DataType = DbType.DateTime;
				colvarIntendedLastDay.MaxLength = 0;
				colvarIntendedLastDay.AutoIncrement = false;
				colvarIntendedLastDay.IsNullable = true;
				colvarIntendedLastDay.IsPrimaryKey = false;
				colvarIntendedLastDay.IsForeignKey = false;
				colvarIntendedLastDay.IsReadOnly = false;
				colvarIntendedLastDay.DefaultSetting = @"";
				colvarIntendedLastDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIntendedLastDay);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_Terminations",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_Termination LoadFrom(RU_Termination item)
		{
			RU_Termination result = new RU_Termination();
			if (item.TerminationID != default(int)) {
				result.LoadByKey(item.TerminationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TerminationID {
			get { return GetColumnValue<int>(Columns.TerminationID); }
			set {
				SetColumnValue(Columns.TerminationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationID));
			}
		}
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public int TerminationCategoryID {
			get { return GetColumnValue<int>(Columns.TerminationCategoryID); }
			set {
				SetColumnValue(Columns.TerminationCategoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationCategoryID));
			}
		}
		[DataMember]
		public int? NewTeamLocationID {
			get { return GetColumnValue<int?>(Columns.NewTeamLocationID); }
			set {
				SetColumnValue(Columns.NewTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NewTeamLocationID));
			}
		}
		[DataMember]
		public DateTime? LastDateWorked {
			get { return GetColumnValue<DateTime?>(Columns.LastDateWorked); }
			set {
				SetColumnValue(Columns.LastDateWorked, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastDateWorked));
			}
		}
		[DataMember]
		public string Explanation {
			get { return GetColumnValue<string>(Columns.Explanation); }
			set {
				SetColumnValue(Columns.Explanation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Explanation));
			}
		}
		[DataMember]
		public bool? NoticeGiven {
			get { return GetColumnValue<bool?>(Columns.NoticeGiven); }
			set {
				SetColumnValue(Columns.NoticeGiven, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NoticeGiven));
			}
		}
		[DataMember]
		public DateTime? IntendedLastDay {
			get { return GetColumnValue<DateTime?>(Columns.IntendedLastDay); }
			set {
				SetColumnValue(Columns.IntendedLastDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IntendedLastDay));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Recruit _Recruit;
		//Relationship: FK_RU_Terminations_RU_Recruits
		public RU_Recruit Recruit
		{
			get
			{
				if(_Recruit == null) {
					_Recruit = RU_Recruit.FetchByID(this.RecruitID);
				}
				return _Recruit;
			}
			set
			{
				SetColumnValue("RecruitID", value.RecruitID);
				_Recruit = value;
			}
		}

		private RU_TeamLocation _NewTeamLocation;
		//Relationship: FK_RU_Terminations_RU_TeamLocations
		public RU_TeamLocation NewTeamLocation
		{
			get
			{
				if(_NewTeamLocation == null) {
					_NewTeamLocation = RU_TeamLocation.FetchByID(this.NewTeamLocationID);
				}
				return _NewTeamLocation;
			}
			set
			{
				SetColumnValue("NewTeamLocationID", value.TeamLocationID);
				_NewTeamLocation = value;
			}
		}

		private RU_TerminationCategory _TerminationCategory;
		//Relationship: FK_RU_Terminations_RU_TerminationCategories
		public RU_TerminationCategory TerminationCategory
		{
			get
			{
				if(_TerminationCategory == null) {
					_TerminationCategory = RU_TerminationCategory.FetchByID(this.TerminationCategoryID);
				}
				return _TerminationCategory;
			}
			set
			{
				SetColumnValue("TerminationCategoryID", value.TerminationCategoryID);
				_TerminationCategory = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TerminationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TerminationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TerminationCategoryIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn NewTeamLocationIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn LastDateWorkedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ExplanationColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn NoticeGivenColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IntendedLastDayColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TerminationID = @"TerminationID";
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string TerminationCategoryID = @"TerminationCategoryID";
			public static readonly string NewTeamLocationID = @"NewTeamLocationID";
			public static readonly string LastDateWorked = @"LastDateWorked";
			public static readonly string Explanation = @"Explanation";
			public static readonly string NoticeGiven = @"NoticeGiven";
			public static readonly string IntendedLastDay = @"IntendedLastDay";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TerminationID; }
		}
		*/

		#region Foreign Collections

		private RU_TerminationNoteCollection _RU_TerminationNotesCol;
		//Relationship: FK_RU_TerminationNotes_RU_Terminations
		public RU_TerminationNoteCollection RU_TerminationNotesCol
		{
			get
			{
				if(_RU_TerminationNotesCol == null) {
					_RU_TerminationNotesCol = new RU_TerminationNoteCollection();
					_RU_TerminationNotesCol.LoadAndCloseReader(RU_TerminationNote.Query()
						.WHERE(RU_TerminationNote.Columns.TerminationID, TerminationID).ExecuteReader());
				}
				return _RU_TerminationNotesCol;
			}
		}

		private RU_TerminationStatusCollection _RU_TerminationStatusesCol;
		//Relationship: FK_RU_TerminationStatuses_RU_Terminations
		public RU_TerminationStatusCollection RU_TerminationStatusesCol
		{
			get
			{
				if(_RU_TerminationStatusesCol == null) {
					_RU_TerminationStatusesCol = new RU_TerminationStatusCollection();
					_RU_TerminationStatusesCol.LoadAndCloseReader(RU_TerminationStatus.Query()
						.WHERE(RU_TerminationStatus.Columns.TerminationID, TerminationID).ExecuteReader());
				}
				return _RU_TerminationStatusesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_TerminationStatusCode class.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationStatusCodeCollection : ActiveList<RU_TerminationStatusCode, RU_TerminationStatusCodeCollection>
	{
		public static RU_TerminationStatusCodeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TerminationStatusCodeCollection result = new RU_TerminationStatusCodeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_TerminationStatusCode item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_TerminationStatusCodes table.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationStatusCode : ActiveRecord<RU_TerminationStatusCode>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum TerminationStatusCodeEnum : int
		{
			[EnumMember()] Unsubmitted = 1,
			[EnumMember()] Open = 2,
			[EnumMember()] Approved = 3,
			[EnumMember()] Rejected = 4,
		}

		//[DataMember]
		//public TerminationStatusCodeEnum TerminationStatusCodeCode
		//{
		//	get { return (TerminationStatusCodeEnum)TerminationStatusCodeID; }
		//	set { TerminationStatusCodeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_TerminationStatusCode()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_TerminationStatusCodes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTerminationStatusCodeID = new TableSchema.TableColumn(schema);
				colvarTerminationStatusCodeID.ColumnName = "TerminationStatusCodeID";
				colvarTerminationStatusCodeID.DataType = DbType.Int32;
				colvarTerminationStatusCodeID.MaxLength = 0;
				colvarTerminationStatusCodeID.AutoIncrement = true;
				colvarTerminationStatusCodeID.IsNullable = false;
				colvarTerminationStatusCodeID.IsPrimaryKey = true;
				colvarTerminationStatusCodeID.IsForeignKey = false;
				colvarTerminationStatusCodeID.IsReadOnly = false;
				colvarTerminationStatusCodeID.DefaultSetting = @"";
				colvarTerminationStatusCodeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTerminationStatusCodeID);

				TableSchema.TableColumn colvarTerminationStatusCode = new TableSchema.TableColumn(schema);
				colvarTerminationStatusCode.ColumnName = "TerminationStatusCode";
				colvarTerminationStatusCode.DataType = DbType.String;
				colvarTerminationStatusCode.MaxLength = 50;
				colvarTerminationStatusCode.AutoIncrement = false;
				colvarTerminationStatusCode.IsNullable = false;
				colvarTerminationStatusCode.IsPrimaryKey = false;
				colvarTerminationStatusCode.IsForeignKey = false;
				colvarTerminationStatusCode.IsReadOnly = false;
				colvarTerminationStatusCode.DefaultSetting = @"";
				colvarTerminationStatusCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTerminationStatusCode);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_TerminationStatusCodes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_TerminationStatusCode LoadFrom(RU_TerminationStatusCode item)
		{
			RU_TerminationStatusCode result = new RU_TerminationStatusCode();
			if (item.TerminationStatusCodeID != default(int)) {
				result.LoadByKey(item.TerminationStatusCodeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TerminationStatusCodeID {
			get { return GetColumnValue<int>(Columns.TerminationStatusCodeID); }
			set {
				SetColumnValue(Columns.TerminationStatusCodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationStatusCodeID));
			}
		}
		[DataMember]
		public string TerminationStatusCode {
			get { return GetColumnValue<string>(Columns.TerminationStatusCode); }
			set {
				SetColumnValue(Columns.TerminationStatusCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationStatusCode));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return TerminationStatusCode;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TerminationStatusCodeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TerminationStatusCodeColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TerminationStatusCodeID = @"TerminationStatusCodeID";
			public static readonly string TerminationStatusCode = @"TerminationStatusCode";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TerminationStatusCodeID; }
		}
		*/

		#region Foreign Collections

		private RU_TerminationStatusCollection _RU_TerminationStatusesCol;
		//Relationship: FK_RU_TerminationStatuses_RU_TerminationStatusCodes
		public RU_TerminationStatusCollection RU_TerminationStatusesCol
		{
			get
			{
				if(_RU_TerminationStatusesCol == null) {
					_RU_TerminationStatusesCol = new RU_TerminationStatusCollection();
					_RU_TerminationStatusesCol.LoadAndCloseReader(RU_TerminationStatus.Query()
						.WHERE(RU_TerminationStatus.Columns.TerminationStatusCodeID, TerminationStatusCodeID).ExecuteReader());
				}
				return _RU_TerminationStatusesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_TerminationStatus class.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationStatusCollection : ActiveList<RU_TerminationStatus, RU_TerminationStatusCollection>
	{
		public static RU_TerminationStatusCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TerminationStatusCollection result = new RU_TerminationStatusCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_TerminationStatus item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_TerminationStatuses table.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationStatus : ActiveRecord<RU_TerminationStatus>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_TerminationStatus()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_TerminationStatuses", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTerminationStatusID = new TableSchema.TableColumn(schema);
				colvarTerminationStatusID.ColumnName = "TerminationStatusID";
				colvarTerminationStatusID.DataType = DbType.Int32;
				colvarTerminationStatusID.MaxLength = 0;
				colvarTerminationStatusID.AutoIncrement = true;
				colvarTerminationStatusID.IsNullable = false;
				colvarTerminationStatusID.IsPrimaryKey = true;
				colvarTerminationStatusID.IsForeignKey = false;
				colvarTerminationStatusID.IsReadOnly = false;
				colvarTerminationStatusID.DefaultSetting = @"";
				colvarTerminationStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTerminationStatusID);

				TableSchema.TableColumn colvarTerminationID = new TableSchema.TableColumn(schema);
				colvarTerminationID.ColumnName = "TerminationID";
				colvarTerminationID.DataType = DbType.Int32;
				colvarTerminationID.MaxLength = 0;
				colvarTerminationID.AutoIncrement = false;
				colvarTerminationID.IsNullable = false;
				colvarTerminationID.IsPrimaryKey = false;
				colvarTerminationID.IsForeignKey = true;
				colvarTerminationID.IsReadOnly = false;
				colvarTerminationID.DefaultSetting = @"";
				colvarTerminationID.ForeignKeyTableName = "RU_Terminations";
				schema.Columns.Add(colvarTerminationID);

				TableSchema.TableColumn colvarTerminationStatusCodeID = new TableSchema.TableColumn(schema);
				colvarTerminationStatusCodeID.ColumnName = "TerminationStatusCodeID";
				colvarTerminationStatusCodeID.DataType = DbType.Int32;
				colvarTerminationStatusCodeID.MaxLength = 0;
				colvarTerminationStatusCodeID.AutoIncrement = false;
				colvarTerminationStatusCodeID.IsNullable = false;
				colvarTerminationStatusCodeID.IsPrimaryKey = false;
				colvarTerminationStatusCodeID.IsForeignKey = true;
				colvarTerminationStatusCodeID.IsReadOnly = false;
				colvarTerminationStatusCodeID.DefaultSetting = @"";
				colvarTerminationStatusCodeID.ForeignKeyTableName = "RU_TerminationStatusCodes";
				schema.Columns.Add(colvarTerminationStatusCodeID);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.String;
				colvarComments.MaxLength = 1073741823;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_TerminationStatuses",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_TerminationStatus LoadFrom(RU_TerminationStatus item)
		{
			RU_TerminationStatus result = new RU_TerminationStatus();
			if (item.TerminationStatusID != default(int)) {
				result.LoadByKey(item.TerminationStatusID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TerminationStatusID {
			get { return GetColumnValue<int>(Columns.TerminationStatusID); }
			set {
				SetColumnValue(Columns.TerminationStatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationStatusID));
			}
		}
		[DataMember]
		public int TerminationID {
			get { return GetColumnValue<int>(Columns.TerminationID); }
			set {
				SetColumnValue(Columns.TerminationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationID));
			}
		}
		[DataMember]
		public int TerminationStatusCodeID {
			get { return GetColumnValue<int>(Columns.TerminationStatusCodeID); }
			set {
				SetColumnValue(Columns.TerminationStatusCodeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationStatusCodeID));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public string Comments {
			get { return GetColumnValue<string>(Columns.Comments); }
			set {
				SetColumnValue(Columns.Comments, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Comments));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Termination _Termination;
		//Relationship: FK_RU_TerminationStatuses_RU_Terminations
		public RU_Termination Termination
		{
			get
			{
				if(_Termination == null) {
					_Termination = RU_Termination.FetchByID(this.TerminationID);
				}
				return _Termination;
			}
			set
			{
				SetColumnValue("TerminationID", value.TerminationID);
				_Termination = value;
			}
		}

		private RU_TerminationStatusCode _TerminationStatusCode;
		//Relationship: FK_RU_TerminationStatuses_RU_TerminationStatusCodes
		public RU_TerminationStatusCode TerminationStatusCode
		{
			get
			{
				if(_TerminationStatusCode == null) {
					_TerminationStatusCode = RU_TerminationStatusCode.FetchByID(this.TerminationStatusCodeID);
				}
				return _TerminationStatusCode;
			}
			set
			{
				SetColumnValue("TerminationStatusCodeID", value.TerminationStatusCodeID);
				_TerminationStatusCode = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return TerminationStatusID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TerminationStatusIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TerminationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TerminationStatusCodeIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CommentsColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TerminationStatusID = @"TerminationStatusID";
			public static readonly string TerminationID = @"TerminationID";
			public static readonly string TerminationStatusCodeID = @"TerminationStatusCodeID";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string Comments = @"Comments";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TerminationStatusID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_TerminationType class.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationTypeCollection : ActiveList<RU_TerminationType, RU_TerminationTypeCollection>
	{
		public static RU_TerminationTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_TerminationTypeCollection result = new RU_TerminationTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_TerminationType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_TerminationType table.
	/// </summary>
	[DataContract]
	public partial class RU_TerminationType : ActiveRecord<RU_TerminationType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum TerminationTypeEnum : int
		{
			[EnumMember()] Resignation = 1,
			[EnumMember()] Discharge = 2,
			[EnumMember()] Other = 3,
		}

		//[DataMember]
		//public TerminationTypeEnum TerminationTypeCode
		//{
		//	get { return (TerminationTypeEnum)TerminationTypeId; }
		//	set { TerminationTypeId = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_TerminationType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_TerminationType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTerminationTypeId = new TableSchema.TableColumn(schema);
				colvarTerminationTypeId.ColumnName = "TerminationTypeId";
				colvarTerminationTypeId.DataType = DbType.Int32;
				colvarTerminationTypeId.MaxLength = 0;
				colvarTerminationTypeId.AutoIncrement = false;
				colvarTerminationTypeId.IsNullable = false;
				colvarTerminationTypeId.IsPrimaryKey = true;
				colvarTerminationTypeId.IsForeignKey = false;
				colvarTerminationTypeId.IsReadOnly = false;
				colvarTerminationTypeId.DefaultSetting = @"";
				colvarTerminationTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTerminationTypeId);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_TerminationType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_TerminationType LoadFrom(RU_TerminationType item)
		{
			RU_TerminationType result = new RU_TerminationType();
			if (item.TerminationTypeId != default(int)) {
				result.LoadByKey(item.TerminationTypeId);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TerminationTypeId {
			get { return GetColumnValue<int>(Columns.TerminationTypeId); }
			set {
				SetColumnValue(Columns.TerminationTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TerminationTypeId));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TerminationTypeIdColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TerminationTypeId = @"TerminationTypeId";
			public static readonly string Description = @"Description";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TerminationTypeId; }
		}
		*/

		#region Foreign Collections

		private RU_TerminationCategoryCollection _RU_TerminationCategoriesCol;
		//Relationship: FK_RU_TerminationCategories_RU_TerminationType
		public RU_TerminationCategoryCollection RU_TerminationCategoriesCol
		{
			get
			{
				if(_RU_TerminationCategoriesCol == null) {
					_RU_TerminationCategoriesCol = new RU_TerminationCategoryCollection();
					_RU_TerminationCategoriesCol.LoadAndCloseReader(RU_TerminationCategory.Query()
						.WHERE(RU_TerminationCategory.Columns.TerminationTypeID, TerminationTypeId).ExecuteReader());
				}
				return _RU_TerminationCategoriesCol;
			}
		}

		private RU_TerminationReasonCollection _RU_TerminationReasonsCol;
		//Relationship: FK_RU_TerminationReason_RU_TerminationType
		public RU_TerminationReasonCollection RU_TerminationReasonsCol
		{
			get
			{
				if(_RU_TerminationReasonsCol == null) {
					_RU_TerminationReasonsCol = new RU_TerminationReasonCollection();
					_RU_TerminationReasonsCol.LoadAndCloseReader(RU_TerminationReason.Query()
						.WHERE(RU_TerminationReason.Columns.TerminationTypeId, TerminationTypeId).ExecuteReader());
				}
				return _RU_TerminationReasonsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_UserAuthentication class.
	/// </summary>
	[DataContract]
	public partial class RU_UserAuthenticationCollection : ActiveList<RU_UserAuthentication, RU_UserAuthenticationCollection>
	{
		public static RU_UserAuthenticationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_UserAuthenticationCollection result = new RU_UserAuthenticationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_UserAuthentication item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_UserAuthentication table.
	/// </summary>
	[DataContract]
	public partial class RU_UserAuthentication : ActiveRecord<RU_UserAuthentication>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_UserAuthentication()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_UserAuthentication", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUserAuthenticationID = new TableSchema.TableColumn(schema);
				colvarUserAuthenticationID.ColumnName = "UserAuthenticationID";
				colvarUserAuthenticationID.DataType = DbType.Int64;
				colvarUserAuthenticationID.MaxLength = 0;
				colvarUserAuthenticationID.AutoIncrement = true;
				colvarUserAuthenticationID.IsNullable = false;
				colvarUserAuthenticationID.IsPrimaryKey = true;
				colvarUserAuthenticationID.IsForeignKey = false;
				colvarUserAuthenticationID.IsReadOnly = false;
				colvarUserAuthenticationID.DefaultSetting = @"";
				colvarUserAuthenticationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserAuthenticationID);

				TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
				colvarUserId.ColumnName = "UserId";
				colvarUserId.DataType = DbType.Int32;
				colvarUserId.MaxLength = 0;
				colvarUserId.AutoIncrement = false;
				colvarUserId.IsNullable = true;
				colvarUserId.IsPrimaryKey = false;
				colvarUserId.IsForeignKey = true;
				colvarUserId.IsReadOnly = false;
				colvarUserId.DefaultSetting = @"";
				colvarUserId.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarUserId);

				TableSchema.TableColumn colvarTokenID = new TableSchema.TableColumn(schema);
				colvarTokenID.ColumnName = "TokenID";
				colvarTokenID.DataType = DbType.Guid;
				colvarTokenID.MaxLength = 0;
				colvarTokenID.AutoIncrement = false;
				colvarTokenID.IsNullable = false;
				colvarTokenID.IsPrimaryKey = false;
				colvarTokenID.IsForeignKey = false;
				colvarTokenID.IsReadOnly = false;
				colvarTokenID.DefaultSetting = @"(newid())";
				colvarTokenID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTokenID);

				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "Username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = false;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = false;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarIPAddress = new TableSchema.TableColumn(schema);
				colvarIPAddress.ColumnName = "IPAddress";
				colvarIPAddress.DataType = DbType.AnsiString;
				colvarIPAddress.MaxLength = 16;
				colvarIPAddress.AutoIncrement = false;
				colvarIPAddress.IsNullable = false;
				colvarIPAddress.IsPrimaryKey = false;
				colvarIPAddress.IsForeignKey = false;
				colvarIPAddress.IsReadOnly = false;
				colvarIPAddress.DefaultSetting = @"";
				colvarIPAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIPAddress);

				TableSchema.TableColumn colvarSuccessfull = new TableSchema.TableColumn(schema);
				colvarSuccessfull.ColumnName = "Successfull";
				colvarSuccessfull.DataType = DbType.Boolean;
				colvarSuccessfull.MaxLength = 0;
				colvarSuccessfull.AutoIncrement = false;
				colvarSuccessfull.IsNullable = false;
				colvarSuccessfull.IsPrimaryKey = false;
				colvarSuccessfull.IsForeignKey = false;
				colvarSuccessfull.IsReadOnly = false;
				colvarSuccessfull.DefaultSetting = @"((0))";
				colvarSuccessfull.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuccessfull);

				TableSchema.TableColumn colvarMessage = new TableSchema.TableColumn(schema);
				colvarMessage.ColumnName = "Message";
				colvarMessage.DataType = DbType.AnsiString;
				colvarMessage.MaxLength = 150;
				colvarMessage.AutoIncrement = false;
				colvarMessage.IsNullable = true;
				colvarMessage.IsPrimaryKey = false;
				colvarMessage.IsForeignKey = false;
				colvarMessage.IsReadOnly = false;
				colvarMessage.DefaultSetting = @"";
				colvarMessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMessage);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_UserAuthentication",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_UserAuthentication LoadFrom(RU_UserAuthentication item)
		{
			RU_UserAuthentication result = new RU_UserAuthentication();
			if (item.UserAuthenticationID != default(long)) {
				result.LoadByKey(item.UserAuthenticationID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long UserAuthenticationID {
			get { return GetColumnValue<long>(Columns.UserAuthenticationID); }
			set {
				SetColumnValue(Columns.UserAuthenticationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserAuthenticationID));
			}
		}
		[DataMember]
		public int? UserId {
			get { return GetColumnValue<int?>(Columns.UserId); }
			set {
				SetColumnValue(Columns.UserId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserId));
			}
		}
		[DataMember]
		public Guid TokenID {
			get { return GetColumnValue<Guid>(Columns.TokenID); }
			set {
				SetColumnValue(Columns.TokenID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TokenID));
			}
		}
		[DataMember]
		public string Username {
			get { return GetColumnValue<string>(Columns.Username); }
			set {
				SetColumnValue(Columns.Username, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Username));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}
		[DataMember]
		public string IPAddress {
			get { return GetColumnValue<string>(Columns.IPAddress); }
			set {
				SetColumnValue(Columns.IPAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IPAddress));
			}
		}
		[DataMember]
		public bool Successfull {
			get { return GetColumnValue<bool>(Columns.Successfull); }
			set {
				SetColumnValue(Columns.Successfull, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Successfull));
			}
		}
		[DataMember]
		public string Message {
			get { return GetColumnValue<string>(Columns.Message); }
			set {
				SetColumnValue(Columns.Message, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Message));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_User _User;
		//Relationship: FK_RU_UserAuthentication_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserId);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserId", value.UserID);
				_User = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return UserAuthenticationID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn UserAuthenticationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserIdColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TokenIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UsernameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn IPAddressColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SuccessfullColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn MessageColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UserAuthenticationID = @"UserAuthenticationID";
			public static readonly string UserId = @"UserId";
			public static readonly string TokenID = @"TokenID";
			public static readonly string Username = @"Username";
			public static readonly string Password = @"Password";
			public static readonly string IPAddress = @"IPAddress";
			public static readonly string Successfull = @"Successfull";
			public static readonly string Message = @"Message";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UserAuthenticationID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_UserEmployeeType class.
	/// </summary>
	[DataContract]
	public partial class RU_UserEmployeeTypeCollection : ActiveList<RU_UserEmployeeType, RU_UserEmployeeTypeCollection>
	{
		public static RU_UserEmployeeTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_UserEmployeeTypeCollection result = new RU_UserEmployeeTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_UserEmployeeType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_UserEmployeeTypes table.
	/// </summary>
	[DataContract]
	public partial class RU_UserEmployeeType : ActiveRecord<RU_UserEmployeeType>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_UserEmployeeType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_UserEmployeeTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUserEmployeeTypeID = new TableSchema.TableColumn(schema);
				colvarUserEmployeeTypeID.ColumnName = "UserEmployeeTypeID";
				colvarUserEmployeeTypeID.DataType = DbType.AnsiString;
				colvarUserEmployeeTypeID.MaxLength = 20;
				colvarUserEmployeeTypeID.AutoIncrement = false;
				colvarUserEmployeeTypeID.IsNullable = false;
				colvarUserEmployeeTypeID.IsPrimaryKey = true;
				colvarUserEmployeeTypeID.IsForeignKey = false;
				colvarUserEmployeeTypeID.IsReadOnly = false;
				colvarUserEmployeeTypeID.DefaultSetting = @"";
				colvarUserEmployeeTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserEmployeeTypeID);

				TableSchema.TableColumn colvarUserEmployeeTypeName = new TableSchema.TableColumn(schema);
				colvarUserEmployeeTypeName.ColumnName = "UserEmployeeTypeName";
				colvarUserEmployeeTypeName.DataType = DbType.String;
				colvarUserEmployeeTypeName.MaxLength = 50;
				colvarUserEmployeeTypeName.AutoIncrement = false;
				colvarUserEmployeeTypeName.IsNullable = false;
				colvarUserEmployeeTypeName.IsPrimaryKey = false;
				colvarUserEmployeeTypeName.IsForeignKey = false;
				colvarUserEmployeeTypeName.IsReadOnly = false;
				colvarUserEmployeeTypeName.DefaultSetting = @"";
				colvarUserEmployeeTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserEmployeeTypeName);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_UserEmployeeTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_UserEmployeeType LoadFrom(RU_UserEmployeeType item)
		{
			RU_UserEmployeeType result = new RU_UserEmployeeType();
			if (item.UserEmployeeTypeID != default(string)) {
				result.LoadByKey(item.UserEmployeeTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public string UserEmployeeTypeID {
			get { return GetColumnValue<string>(Columns.UserEmployeeTypeID); }
			set {
				SetColumnValue(Columns.UserEmployeeTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserEmployeeTypeID));
			}
		}
		[DataMember]
		public string UserEmployeeTypeName {
			get { return GetColumnValue<string>(Columns.UserEmployeeTypeName); }
			set {
				SetColumnValue(Columns.UserEmployeeTypeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserEmployeeTypeName));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return UserEmployeeTypeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn UserEmployeeTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserEmployeeTypeNameColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UserEmployeeTypeID = @"UserEmployeeTypeID";
			public static readonly string UserEmployeeTypeName = @"UserEmployeeTypeName";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UserEmployeeTypeID; }
		}
		*/

		#region Foreign Collections

		private RU_UserCollection _RU_UsersCol;
		//Relationship: FK_RU_Users_RU_UserEmployeeTypes
		public RU_UserCollection RU_UsersCol
		{
			get
			{
				if(_RU_UsersCol == null) {
					_RU_UsersCol = new RU_UserCollection();
					_RU_UsersCol.LoadAndCloseReader(RU_User.Query()
						.WHERE(RU_User.Columns.UserEmployeeTypeId, UserEmployeeTypeID).ExecuteReader());
				}
				return _RU_UsersCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_UserPhoto class.
	/// </summary>
	[DataContract]
	public partial class RU_UserPhotoCollection : ActiveList<RU_UserPhoto, RU_UserPhotoCollection>
	{
		public static RU_UserPhotoCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_UserPhotoCollection result = new RU_UserPhotoCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_UserPhoto item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_UserPhotos table.
	/// </summary>
	[DataContract]
	public partial class RU_UserPhoto : ActiveRecord<RU_UserPhoto>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_UserPhoto()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_UserPhotos", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = true;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarPhotoFile = new TableSchema.TableColumn(schema);
				colvarPhotoFile.ColumnName = "PhotoFile";
				colvarPhotoFile.DataType = DbType.Binary;
				colvarPhotoFile.MaxLength = 2147483647;
				colvarPhotoFile.AutoIncrement = false;
				colvarPhotoFile.IsNullable = false;
				colvarPhotoFile.IsPrimaryKey = false;
				colvarPhotoFile.IsForeignKey = false;
				colvarPhotoFile.IsReadOnly = false;
				colvarPhotoFile.DefaultSetting = @"";
				colvarPhotoFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhotoFile);

				TableSchema.TableColumn colvarFileSize = new TableSchema.TableColumn(schema);
				colvarFileSize.ColumnName = "FileSize";
				colvarFileSize.DataType = DbType.Int64;
				colvarFileSize.MaxLength = 0;
				colvarFileSize.AutoIncrement = false;
				colvarFileSize.IsNullable = false;
				colvarFileSize.IsPrimaryKey = false;
				colvarFileSize.IsForeignKey = false;
				colvarFileSize.IsReadOnly = false;
				colvarFileSize.DefaultSetting = @"";
				colvarFileSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileSize);

				TableSchema.TableColumn colvarMimeType = new TableSchema.TableColumn(schema);
				colvarMimeType.ColumnName = "MimeType";
				colvarMimeType.DataType = DbType.String;
				colvarMimeType.MaxLength = 100;
				colvarMimeType.AutoIncrement = false;
				colvarMimeType.IsNullable = false;
				colvarMimeType.IsPrimaryKey = false;
				colvarMimeType.IsForeignKey = false;
				colvarMimeType.IsReadOnly = false;
				colvarMimeType.DefaultSetting = @"";
				colvarMimeType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMimeType);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedByDate = new TableSchema.TableColumn(schema);
				colvarCreatedByDate.ColumnName = "CreatedByDate";
				colvarCreatedByDate.DataType = DbType.DateTime;
				colvarCreatedByDate.MaxLength = 0;
				colvarCreatedByDate.AutoIncrement = false;
				colvarCreatedByDate.IsNullable = false;
				colvarCreatedByDate.IsPrimaryKey = false;
				colvarCreatedByDate.IsForeignKey = false;
				colvarCreatedByDate.IsReadOnly = false;
				colvarCreatedByDate.DefaultSetting = @"";
				colvarCreatedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.String;
				colvarModifiedByID.MaxLength = 50;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = false;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedByDate = new TableSchema.TableColumn(schema);
				colvarModifiedByDate.ColumnName = "ModifiedByDate";
				colvarModifiedByDate.DataType = DbType.DateTime;
				colvarModifiedByDate.MaxLength = 0;
				colvarModifiedByDate.AutoIncrement = false;
				colvarModifiedByDate.IsNullable = false;
				colvarModifiedByDate.IsPrimaryKey = false;
				colvarModifiedByDate.IsForeignKey = false;
				colvarModifiedByDate.IsReadOnly = false;
				colvarModifiedByDate.DefaultSetting = @"";
				colvarModifiedByDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_UserPhotos",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_UserPhoto LoadFrom(RU_UserPhoto item)
		{
			RU_UserPhoto result = new RU_UserPhoto();
			if (item.UserID != default(int)) {
				result.LoadByKey(item.UserID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public byte[] PhotoFile {
			get { return GetColumnValue<byte[]>(Columns.PhotoFile); }
			set {
				SetColumnValue(Columns.PhotoFile, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhotoFile));
			}
		}
		[DataMember]
		public long FileSize {
			get { return GetColumnValue<long>(Columns.FileSize); }
			set {
				SetColumnValue(Columns.FileSize, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FileSize));
			}
		}
		[DataMember]
		public string MimeType {
			get { return GetColumnValue<string>(Columns.MimeType); }
			set {
				SetColumnValue(Columns.MimeType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MimeType));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedByDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedByDate); }
			set {
				SetColumnValue(Columns.CreatedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByDate));
			}
		}
		[DataMember]
		public string ModifiedByID {
			get { return GetColumnValue<string>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime ModifiedByDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedByDate); }
			set {
				SetColumnValue(Columns.ModifiedByDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_User _User;
		//Relationship: FK_RU_UserPhotos_RU_Users
		public RU_User User
		{
			get
			{
				if(_User == null) {
					_User = RU_User.FetchByID(this.UserID);
				}
				return _User;
			}
			set
			{
				SetColumnValue("UserID", value.UserID);
				_User = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return UserID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn PhotoFileColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn FileSizeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn MimeTypeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ModifiedByDateColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UserID = @"UserID";
			public static readonly string PhotoFile = @"PhotoFile";
			public static readonly string FileSize = @"FileSize";
			public static readonly string MimeType = @"MimeType";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedByDate = @"CreatedByDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedByDate = @"ModifiedByDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UserID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_User class.
	/// </summary>
	[DataContract]
	public partial class RU_UserCollection : ActiveList<RU_User, RU_UserCollection>
	{
		public static RU_UserCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_UserCollection result = new RU_UserCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_User item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_Users table.
	/// </summary>
	[DataContract]
	public partial class RU_User : ActiveRecord<RU_User>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_User()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_Users", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = true;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = true;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 101;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = true;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = true;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarPublicFullName = new TableSchema.TableColumn(schema);
				colvarPublicFullName.ColumnName = "PublicFullName";
				colvarPublicFullName.DataType = DbType.String;
				colvarPublicFullName.MaxLength = 53;
				colvarPublicFullName.AutoIncrement = false;
				colvarPublicFullName.IsNullable = true;
				colvarPublicFullName.IsPrimaryKey = false;
				colvarPublicFullName.IsForeignKey = false;
				colvarPublicFullName.IsReadOnly = true;
				colvarPublicFullName.DefaultSetting = @"";
				colvarPublicFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPublicFullName);

				TableSchema.TableColumn colvarRecruitedById = new TableSchema.TableColumn(schema);
				colvarRecruitedById.ColumnName = "RecruitedById";
				colvarRecruitedById.DataType = DbType.Int32;
				colvarRecruitedById.MaxLength = 0;
				colvarRecruitedById.AutoIncrement = false;
				colvarRecruitedById.IsNullable = true;
				colvarRecruitedById.IsPrimaryKey = false;
				colvarRecruitedById.IsForeignKey = true;
				colvarRecruitedById.IsReadOnly = false;
				colvarRecruitedById.DefaultSetting = @"";
				colvarRecruitedById.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarRecruitedById);

				TableSchema.TableColumn colvarGPEmployeeId = new TableSchema.TableColumn(schema);
				colvarGPEmployeeId.ColumnName = "GPEmployeeId";
				colvarGPEmployeeId.DataType = DbType.String;
				colvarGPEmployeeId.MaxLength = 25;
				colvarGPEmployeeId.AutoIncrement = false;
				colvarGPEmployeeId.IsNullable = false;
				colvarGPEmployeeId.IsPrimaryKey = false;
				colvarGPEmployeeId.IsForeignKey = false;
				colvarGPEmployeeId.IsReadOnly = false;
				colvarGPEmployeeId.DefaultSetting = @"";
				colvarGPEmployeeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeId);

				TableSchema.TableColumn colvarUserEmployeeTypeId = new TableSchema.TableColumn(schema);
				colvarUserEmployeeTypeId.ColumnName = "UserEmployeeTypeId";
				colvarUserEmployeeTypeId.DataType = DbType.AnsiString;
				colvarUserEmployeeTypeId.MaxLength = 20;
				colvarUserEmployeeTypeId.AutoIncrement = false;
				colvarUserEmployeeTypeId.IsNullable = false;
				colvarUserEmployeeTypeId.IsPrimaryKey = false;
				colvarUserEmployeeTypeId.IsForeignKey = true;
				colvarUserEmployeeTypeId.IsReadOnly = false;
				colvarUserEmployeeTypeId.DefaultSetting = @"('DEFAULT')";
				colvarUserEmployeeTypeId.ForeignKeyTableName = "RU_UserEmployeeTypes";
				schema.Columns.Add(colvarUserEmployeeTypeId);

				TableSchema.TableColumn colvarPermanentAddressId = new TableSchema.TableColumn(schema);
				colvarPermanentAddressId.ColumnName = "PermanentAddressId";
				colvarPermanentAddressId.DataType = DbType.Int32;
				colvarPermanentAddressId.MaxLength = 0;
				colvarPermanentAddressId.AutoIncrement = false;
				colvarPermanentAddressId.IsNullable = true;
				colvarPermanentAddressId.IsPrimaryKey = false;
				colvarPermanentAddressId.IsForeignKey = false;
				colvarPermanentAddressId.IsReadOnly = false;
				colvarPermanentAddressId.DefaultSetting = @"";
				colvarPermanentAddressId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermanentAddressId);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.String;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPreferredName = new TableSchema.TableColumn(schema);
				colvarPreferredName.ColumnName = "PreferredName";
				colvarPreferredName.DataType = DbType.String;
				colvarPreferredName.MaxLength = 50;
				colvarPreferredName.AutoIncrement = false;
				colvarPreferredName.IsNullable = true;
				colvarPreferredName.IsPrimaryKey = false;
				colvarPreferredName.IsForeignKey = false;
				colvarPreferredName.IsReadOnly = false;
				colvarPreferredName.DefaultSetting = @"";
				colvarPreferredName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreferredName);

				TableSchema.TableColumn colvarCompanyName = new TableSchema.TableColumn(schema);
				colvarCompanyName.ColumnName = "CompanyName";
				colvarCompanyName.DataType = DbType.String;
				colvarCompanyName.MaxLength = 50;
				colvarCompanyName.AutoIncrement = false;
				colvarCompanyName.IsNullable = true;
				colvarCompanyName.IsPrimaryKey = false;
				colvarCompanyName.IsForeignKey = false;
				colvarCompanyName.IsReadOnly = false;
				colvarCompanyName.DefaultSetting = @"";
				colvarCompanyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyName);

				TableSchema.TableColumn colvarMaritalStatus = new TableSchema.TableColumn(schema);
				colvarMaritalStatus.ColumnName = "MaritalStatus";
				colvarMaritalStatus.DataType = DbType.Boolean;
				colvarMaritalStatus.MaxLength = 0;
				colvarMaritalStatus.AutoIncrement = false;
				colvarMaritalStatus.IsNullable = true;
				colvarMaritalStatus.IsPrimaryKey = false;
				colvarMaritalStatus.IsForeignKey = false;
				colvarMaritalStatus.IsReadOnly = false;
				colvarMaritalStatus.DefaultSetting = @"";
				colvarMaritalStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaritalStatus);

				TableSchema.TableColumn colvarSpouseName = new TableSchema.TableColumn(schema);
				colvarSpouseName.ColumnName = "SpouseName";
				colvarSpouseName.DataType = DbType.String;
				colvarSpouseName.MaxLength = 50;
				colvarSpouseName.AutoIncrement = false;
				colvarSpouseName.IsNullable = true;
				colvarSpouseName.IsPrimaryKey = false;
				colvarSpouseName.IsForeignKey = false;
				colvarSpouseName.IsReadOnly = false;
				colvarSpouseName.DefaultSetting = @"";
				colvarSpouseName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpouseName);

				TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
				colvarUserName.ColumnName = "UserName";
				colvarUserName.DataType = DbType.String;
				colvarUserName.MaxLength = 50;
				colvarUserName.AutoIncrement = false;
				colvarUserName.IsNullable = false;
				colvarUserName.IsPrimaryKey = false;
				colvarUserName.IsForeignKey = false;
				colvarUserName.IsReadOnly = false;
				colvarUserName.DefaultSetting = @"";
				colvarUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserName);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.AnsiString;
				colvarPassword.MaxLength = 60;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = false;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarBirthDate = new TableSchema.TableColumn(schema);
				colvarBirthDate.ColumnName = "BirthDate";
				colvarBirthDate.DataType = DbType.DateTime;
				colvarBirthDate.MaxLength = 0;
				colvarBirthDate.AutoIncrement = false;
				colvarBirthDate.IsNullable = true;
				colvarBirthDate.IsPrimaryKey = false;
				colvarBirthDate.IsForeignKey = false;
				colvarBirthDate.IsReadOnly = false;
				colvarBirthDate.DefaultSetting = @"";
				colvarBirthDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthDate);

				TableSchema.TableColumn colvarHomeTown = new TableSchema.TableColumn(schema);
				colvarHomeTown.ColumnName = "HomeTown";
				colvarHomeTown.DataType = DbType.String;
				colvarHomeTown.MaxLength = 50;
				colvarHomeTown.AutoIncrement = false;
				colvarHomeTown.IsNullable = true;
				colvarHomeTown.IsPrimaryKey = false;
				colvarHomeTown.IsForeignKey = false;
				colvarHomeTown.IsReadOnly = false;
				colvarHomeTown.DefaultSetting = @"";
				colvarHomeTown.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHomeTown);

				TableSchema.TableColumn colvarBirthCity = new TableSchema.TableColumn(schema);
				colvarBirthCity.ColumnName = "BirthCity";
				colvarBirthCity.DataType = DbType.String;
				colvarBirthCity.MaxLength = 50;
				colvarBirthCity.AutoIncrement = false;
				colvarBirthCity.IsNullable = true;
				colvarBirthCity.IsPrimaryKey = false;
				colvarBirthCity.IsForeignKey = false;
				colvarBirthCity.IsReadOnly = false;
				colvarBirthCity.DefaultSetting = @"";
				colvarBirthCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthCity);

				TableSchema.TableColumn colvarBirthState = new TableSchema.TableColumn(schema);
				colvarBirthState.ColumnName = "BirthState";
				colvarBirthState.DataType = DbType.String;
				colvarBirthState.MaxLength = 50;
				colvarBirthState.AutoIncrement = false;
				colvarBirthState.IsNullable = true;
				colvarBirthState.IsPrimaryKey = false;
				colvarBirthState.IsForeignKey = false;
				colvarBirthState.IsReadOnly = false;
				colvarBirthState.DefaultSetting = @"";
				colvarBirthState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthState);

				TableSchema.TableColumn colvarBirthCountry = new TableSchema.TableColumn(schema);
				colvarBirthCountry.ColumnName = "BirthCountry";
				colvarBirthCountry.DataType = DbType.String;
				colvarBirthCountry.MaxLength = 50;
				colvarBirthCountry.AutoIncrement = false;
				colvarBirthCountry.IsNullable = true;
				colvarBirthCountry.IsPrimaryKey = false;
				colvarBirthCountry.IsForeignKey = false;
				colvarBirthCountry.IsReadOnly = false;
				colvarBirthCountry.DefaultSetting = @"";
				colvarBirthCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthCountry);

				TableSchema.TableColumn colvarSex = new TableSchema.TableColumn(schema);
				colvarSex.ColumnName = "Sex";
				colvarSex.DataType = DbType.Byte;
				colvarSex.MaxLength = 0;
				colvarSex.AutoIncrement = false;
				colvarSex.IsNullable = false;
				colvarSex.IsPrimaryKey = false;
				colvarSex.IsForeignKey = false;
				colvarSex.IsReadOnly = false;
				colvarSex.DefaultSetting = @"";
				colvarSex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSex);

				TableSchema.TableColumn colvarShirtSize = new TableSchema.TableColumn(schema);
				colvarShirtSize.ColumnName = "ShirtSize";
				colvarShirtSize.DataType = DbType.Byte;
				colvarShirtSize.MaxLength = 0;
				colvarShirtSize.AutoIncrement = false;
				colvarShirtSize.IsNullable = true;
				colvarShirtSize.IsPrimaryKey = false;
				colvarShirtSize.IsForeignKey = false;
				colvarShirtSize.IsReadOnly = false;
				colvarShirtSize.DefaultSetting = @"";
				colvarShirtSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShirtSize);

				TableSchema.TableColumn colvarHatSize = new TableSchema.TableColumn(schema);
				colvarHatSize.ColumnName = "HatSize";
				colvarHatSize.DataType = DbType.Byte;
				colvarHatSize.MaxLength = 0;
				colvarHatSize.AutoIncrement = false;
				colvarHatSize.IsNullable = true;
				colvarHatSize.IsPrimaryKey = false;
				colvarHatSize.IsForeignKey = false;
				colvarHatSize.IsReadOnly = false;
				colvarHatSize.DefaultSetting = @"";
				colvarHatSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHatSize);

				TableSchema.TableColumn colvarDLNumber = new TableSchema.TableColumn(schema);
				colvarDLNumber.ColumnName = "DLNumber";
				colvarDLNumber.DataType = DbType.String;
				colvarDLNumber.MaxLength = 50;
				colvarDLNumber.AutoIncrement = false;
				colvarDLNumber.IsNullable = true;
				colvarDLNumber.IsPrimaryKey = false;
				colvarDLNumber.IsForeignKey = false;
				colvarDLNumber.IsReadOnly = false;
				colvarDLNumber.DefaultSetting = @"";
				colvarDLNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLNumber);

				TableSchema.TableColumn colvarDLState = new TableSchema.TableColumn(schema);
				colvarDLState.ColumnName = "DLState";
				colvarDLState.DataType = DbType.String;
				colvarDLState.MaxLength = 50;
				colvarDLState.AutoIncrement = false;
				colvarDLState.IsNullable = true;
				colvarDLState.IsPrimaryKey = false;
				colvarDLState.IsForeignKey = false;
				colvarDLState.IsReadOnly = false;
				colvarDLState.DefaultSetting = @"";
				colvarDLState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLState);

				TableSchema.TableColumn colvarDLCountry = new TableSchema.TableColumn(schema);
				colvarDLCountry.ColumnName = "DLCountry";
				colvarDLCountry.DataType = DbType.String;
				colvarDLCountry.MaxLength = 50;
				colvarDLCountry.AutoIncrement = false;
				colvarDLCountry.IsNullable = true;
				colvarDLCountry.IsPrimaryKey = false;
				colvarDLCountry.IsForeignKey = false;
				colvarDLCountry.IsReadOnly = false;
				colvarDLCountry.DefaultSetting = @"";
				colvarDLCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLCountry);

				TableSchema.TableColumn colvarDLExpiresOn = new TableSchema.TableColumn(schema);
				colvarDLExpiresOn.ColumnName = "DLExpiresOn";
				colvarDLExpiresOn.DataType = DbType.DateTime;
				colvarDLExpiresOn.MaxLength = 0;
				colvarDLExpiresOn.AutoIncrement = false;
				colvarDLExpiresOn.IsNullable = true;
				colvarDLExpiresOn.IsPrimaryKey = false;
				colvarDLExpiresOn.IsForeignKey = false;
				colvarDLExpiresOn.IsReadOnly = false;
				colvarDLExpiresOn.DefaultSetting = @"";
				colvarDLExpiresOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLExpiresOn);

				TableSchema.TableColumn colvarDLExpiration = new TableSchema.TableColumn(schema);
				colvarDLExpiration.ColumnName = "DLExpiration";
				colvarDLExpiration.DataType = DbType.String;
				colvarDLExpiration.MaxLength = 50;
				colvarDLExpiration.AutoIncrement = false;
				colvarDLExpiration.IsNullable = true;
				colvarDLExpiration.IsPrimaryKey = false;
				colvarDLExpiration.IsForeignKey = false;
				colvarDLExpiration.IsReadOnly = false;
				colvarDLExpiration.DefaultSetting = @"";
				colvarDLExpiration.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLExpiration);

				TableSchema.TableColumn colvarHeight = new TableSchema.TableColumn(schema);
				colvarHeight.ColumnName = "Height";
				colvarHeight.DataType = DbType.String;
				colvarHeight.MaxLength = 10;
				colvarHeight.AutoIncrement = false;
				colvarHeight.IsNullable = true;
				colvarHeight.IsPrimaryKey = false;
				colvarHeight.IsForeignKey = false;
				colvarHeight.IsReadOnly = false;
				colvarHeight.DefaultSetting = @"";
				colvarHeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeight);

				TableSchema.TableColumn colvarWeight = new TableSchema.TableColumn(schema);
				colvarWeight.ColumnName = "Weight";
				colvarWeight.DataType = DbType.String;
				colvarWeight.MaxLength = 10;
				colvarWeight.AutoIncrement = false;
				colvarWeight.IsNullable = true;
				colvarWeight.IsPrimaryKey = false;
				colvarWeight.IsForeignKey = false;
				colvarWeight.IsReadOnly = false;
				colvarWeight.DefaultSetting = @"";
				colvarWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeight);

				TableSchema.TableColumn colvarEyeColor = new TableSchema.TableColumn(schema);
				colvarEyeColor.ColumnName = "EyeColor";
				colvarEyeColor.DataType = DbType.String;
				colvarEyeColor.MaxLength = 20;
				colvarEyeColor.AutoIncrement = false;
				colvarEyeColor.IsNullable = true;
				colvarEyeColor.IsPrimaryKey = false;
				colvarEyeColor.IsForeignKey = false;
				colvarEyeColor.IsReadOnly = false;
				colvarEyeColor.DefaultSetting = @"";
				colvarEyeColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEyeColor);

				TableSchema.TableColumn colvarHairColor = new TableSchema.TableColumn(schema);
				colvarHairColor.ColumnName = "HairColor";
				colvarHairColor.DataType = DbType.String;
				colvarHairColor.MaxLength = 20;
				colvarHairColor.AutoIncrement = false;
				colvarHairColor.IsNullable = true;
				colvarHairColor.IsPrimaryKey = false;
				colvarHairColor.IsForeignKey = false;
				colvarHairColor.IsReadOnly = false;
				colvarHairColor.DefaultSetting = @"";
				colvarHairColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHairColor);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.String;
				colvarPhoneHome.MaxLength = 25;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneCell = new TableSchema.TableColumn(schema);
				colvarPhoneCell.ColumnName = "PhoneCell";
				colvarPhoneCell.DataType = DbType.String;
				colvarPhoneCell.MaxLength = 50;
				colvarPhoneCell.AutoIncrement = false;
				colvarPhoneCell.IsNullable = true;
				colvarPhoneCell.IsPrimaryKey = false;
				colvarPhoneCell.IsForeignKey = false;
				colvarPhoneCell.IsReadOnly = false;
				colvarPhoneCell.DefaultSetting = @"";
				colvarPhoneCell.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneCell);

				TableSchema.TableColumn colvarPhoneCellCarrierID = new TableSchema.TableColumn(schema);
				colvarPhoneCellCarrierID.ColumnName = "PhoneCellCarrierID";
				colvarPhoneCellCarrierID.DataType = DbType.Int16;
				colvarPhoneCellCarrierID.MaxLength = 0;
				colvarPhoneCellCarrierID.AutoIncrement = false;
				colvarPhoneCellCarrierID.IsNullable = true;
				colvarPhoneCellCarrierID.IsPrimaryKey = false;
				colvarPhoneCellCarrierID.IsForeignKey = true;
				colvarPhoneCellCarrierID.IsReadOnly = false;
				colvarPhoneCellCarrierID.DefaultSetting = @"";
				colvarPhoneCellCarrierID.ForeignKeyTableName = "RU_PhoneCellCarrier";
				schema.Columns.Add(colvarPhoneCellCarrierID);

				TableSchema.TableColumn colvarPhoneFax = new TableSchema.TableColumn(schema);
				colvarPhoneFax.ColumnName = "PhoneFax";
				colvarPhoneFax.DataType = DbType.String;
				colvarPhoneFax.MaxLength = 25;
				colvarPhoneFax.AutoIncrement = false;
				colvarPhoneFax.IsNullable = true;
				colvarPhoneFax.IsPrimaryKey = false;
				colvarPhoneFax.IsForeignKey = false;
				colvarPhoneFax.IsReadOnly = false;
				colvarPhoneFax.DefaultSetting = @"";
				colvarPhoneFax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneFax);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 100;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarCorporateEmail = new TableSchema.TableColumn(schema);
				colvarCorporateEmail.ColumnName = "CorporateEmail";
				colvarCorporateEmail.DataType = DbType.String;
				colvarCorporateEmail.MaxLength = 100;
				colvarCorporateEmail.AutoIncrement = false;
				colvarCorporateEmail.IsNullable = true;
				colvarCorporateEmail.IsPrimaryKey = false;
				colvarCorporateEmail.IsForeignKey = false;
				colvarCorporateEmail.IsReadOnly = false;
				colvarCorporateEmail.DefaultSetting = @"";
				colvarCorporateEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorporateEmail);

				TableSchema.TableColumn colvarTreeLevel = new TableSchema.TableColumn(schema);
				colvarTreeLevel.ColumnName = "TreeLevel";
				colvarTreeLevel.DataType = DbType.Int32;
				colvarTreeLevel.MaxLength = 0;
				colvarTreeLevel.AutoIncrement = false;
				colvarTreeLevel.IsNullable = true;
				colvarTreeLevel.IsPrimaryKey = false;
				colvarTreeLevel.IsForeignKey = false;
				colvarTreeLevel.IsReadOnly = false;
				colvarTreeLevel.DefaultSetting = @"";
				colvarTreeLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTreeLevel);

				TableSchema.TableColumn colvarHasVerifiedAddress = new TableSchema.TableColumn(schema);
				colvarHasVerifiedAddress.ColumnName = "HasVerifiedAddress";
				colvarHasVerifiedAddress.DataType = DbType.Boolean;
				colvarHasVerifiedAddress.MaxLength = 0;
				colvarHasVerifiedAddress.AutoIncrement = false;
				colvarHasVerifiedAddress.IsNullable = false;
				colvarHasVerifiedAddress.IsPrimaryKey = false;
				colvarHasVerifiedAddress.IsForeignKey = false;
				colvarHasVerifiedAddress.IsReadOnly = false;
				colvarHasVerifiedAddress.DefaultSetting = @"((0))";
				colvarHasVerifiedAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasVerifiedAddress);

				TableSchema.TableColumn colvarRightToWorkExpirationDate = new TableSchema.TableColumn(schema);
				colvarRightToWorkExpirationDate.ColumnName = "RightToWorkExpirationDate";
				colvarRightToWorkExpirationDate.DataType = DbType.DateTime;
				colvarRightToWorkExpirationDate.MaxLength = 0;
				colvarRightToWorkExpirationDate.AutoIncrement = false;
				colvarRightToWorkExpirationDate.IsNullable = true;
				colvarRightToWorkExpirationDate.IsPrimaryKey = false;
				colvarRightToWorkExpirationDate.IsForeignKey = false;
				colvarRightToWorkExpirationDate.IsReadOnly = false;
				colvarRightToWorkExpirationDate.DefaultSetting = @"";
				colvarRightToWorkExpirationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRightToWorkExpirationDate);

				TableSchema.TableColumn colvarRightToWorkNotes = new TableSchema.TableColumn(schema);
				colvarRightToWorkNotes.ColumnName = "RightToWorkNotes";
				colvarRightToWorkNotes.DataType = DbType.String;
				colvarRightToWorkNotes.MaxLength = 250;
				colvarRightToWorkNotes.AutoIncrement = false;
				colvarRightToWorkNotes.IsNullable = true;
				colvarRightToWorkNotes.IsPrimaryKey = false;
				colvarRightToWorkNotes.IsForeignKey = false;
				colvarRightToWorkNotes.IsReadOnly = false;
				colvarRightToWorkNotes.DefaultSetting = @"";
				colvarRightToWorkNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRightToWorkNotes);

				TableSchema.TableColumn colvarRightToWorkStatusID = new TableSchema.TableColumn(schema);
				colvarRightToWorkStatusID.ColumnName = "RightToWorkStatusID";
				colvarRightToWorkStatusID.DataType = DbType.Int32;
				colvarRightToWorkStatusID.MaxLength = 0;
				colvarRightToWorkStatusID.AutoIncrement = false;
				colvarRightToWorkStatusID.IsNullable = true;
				colvarRightToWorkStatusID.IsPrimaryKey = false;
				colvarRightToWorkStatusID.IsForeignKey = false;
				colvarRightToWorkStatusID.IsReadOnly = false;
				colvarRightToWorkStatusID.DefaultSetting = @"";
				colvarRightToWorkStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRightToWorkStatusID);

				TableSchema.TableColumn colvarIsLocked = new TableSchema.TableColumn(schema);
				colvarIsLocked.ColumnName = "IsLocked";
				colvarIsLocked.DataType = DbType.Boolean;
				colvarIsLocked.MaxLength = 0;
				colvarIsLocked.AutoIncrement = false;
				colvarIsLocked.IsNullable = false;
				colvarIsLocked.IsPrimaryKey = false;
				colvarIsLocked.IsForeignKey = false;
				colvarIsLocked.IsReadOnly = false;
				colvarIsLocked.DefaultSetting = @"((0))";
				colvarIsLocked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsLocked);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarRecruitedDate = new TableSchema.TableColumn(schema);
				colvarRecruitedDate.ColumnName = "RecruitedDate";
				colvarRecruitedDate.DataType = DbType.DateTime;
				colvarRecruitedDate.MaxLength = 0;
				colvarRecruitedDate.AutoIncrement = false;
				colvarRecruitedDate.IsNullable = false;
				colvarRecruitedDate.IsPrimaryKey = false;
				colvarRecruitedDate.IsForeignKey = false;
				colvarRecruitedDate.IsReadOnly = false;
				colvarRecruitedDate.DefaultSetting = @"(getdate())";
				colvarRecruitedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitedDate);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"(getutcdate())";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"(N'SYSTEM')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"(getutcdate())";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_Users",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_User LoadFrom(RU_User item)
		{
			RU_User result = new RU_User();
			if (item.UserID != default(int)) {
				result.LoadByKey(item.UserID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set {
				SetColumnValue(Columns.FullName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullName));
			}
		}
		[DataMember]
		public string PublicFullName {
			get { return GetColumnValue<string>(Columns.PublicFullName); }
			set {
				SetColumnValue(Columns.PublicFullName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PublicFullName));
			}
		}
		[DataMember]
		public int? RecruitedById {
			get { return GetColumnValue<int?>(Columns.RecruitedById); }
			set {
				SetColumnValue(Columns.RecruitedById, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitedById));
			}
		}
		[DataMember]
		public string GPEmployeeId {
			get { return GetColumnValue<string>(Columns.GPEmployeeId); }
			set {
				SetColumnValue(Columns.GPEmployeeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeId));
			}
		}
		[DataMember]
		public string UserEmployeeTypeId {
			get { return GetColumnValue<string>(Columns.UserEmployeeTypeId); }
			set {
				SetColumnValue(Columns.UserEmployeeTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserEmployeeTypeId));
			}
		}
		[DataMember]
		public int? PermanentAddressId {
			get { return GetColumnValue<int?>(Columns.PermanentAddressId); }
			set {
				SetColumnValue(Columns.PermanentAddressId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PermanentAddressId));
			}
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set {
				SetColumnValue(Columns.SSN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SSN));
			}
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set {
				SetColumnValue(Columns.FirstName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FirstName));
			}
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set {
				SetColumnValue(Columns.MiddleName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiddleName));
			}
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set {
				SetColumnValue(Columns.LastName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastName));
			}
		}
		[DataMember]
		public string PreferredName {
			get { return GetColumnValue<string>(Columns.PreferredName); }
			set {
				SetColumnValue(Columns.PreferredName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreferredName));
			}
		}
		[DataMember]
		public string CompanyName {
			get { return GetColumnValue<string>(Columns.CompanyName); }
			set {
				SetColumnValue(Columns.CompanyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CompanyName));
			}
		}
		[DataMember]
		public bool? MaritalStatus {
			get { return GetColumnValue<bool?>(Columns.MaritalStatus); }
			set {
				SetColumnValue(Columns.MaritalStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaritalStatus));
			}
		}
		[DataMember]
		public string SpouseName {
			get { return GetColumnValue<string>(Columns.SpouseName); }
			set {
				SetColumnValue(Columns.SpouseName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SpouseName));
			}
		}
		[DataMember]
		public string UserName {
			get { return GetColumnValue<string>(Columns.UserName); }
			set {
				SetColumnValue(Columns.UserName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserName));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}
		[DataMember]
		public DateTime? BirthDate {
			get { return GetColumnValue<DateTime?>(Columns.BirthDate); }
			set {
				SetColumnValue(Columns.BirthDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthDate));
			}
		}
		[DataMember]
		public string HomeTown {
			get { return GetColumnValue<string>(Columns.HomeTown); }
			set {
				SetColumnValue(Columns.HomeTown, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HomeTown));
			}
		}
		[DataMember]
		public string BirthCity {
			get { return GetColumnValue<string>(Columns.BirthCity); }
			set {
				SetColumnValue(Columns.BirthCity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthCity));
			}
		}
		[DataMember]
		public string BirthState {
			get { return GetColumnValue<string>(Columns.BirthState); }
			set {
				SetColumnValue(Columns.BirthState, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthState));
			}
		}
		[DataMember]
		public string BirthCountry {
			get { return GetColumnValue<string>(Columns.BirthCountry); }
			set {
				SetColumnValue(Columns.BirthCountry, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthCountry));
			}
		}
		[DataMember]
		public byte Sex {
			get { return GetColumnValue<byte>(Columns.Sex); }
			set {
				SetColumnValue(Columns.Sex, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Sex));
			}
		}
		[DataMember]
		public byte? ShirtSize {
			get { return GetColumnValue<byte?>(Columns.ShirtSize); }
			set {
				SetColumnValue(Columns.ShirtSize, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShirtSize));
			}
		}
		[DataMember]
		public byte? HatSize {
			get { return GetColumnValue<byte?>(Columns.HatSize); }
			set {
				SetColumnValue(Columns.HatSize, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HatSize));
			}
		}
		[DataMember]
		public string DLNumber {
			get { return GetColumnValue<string>(Columns.DLNumber); }
			set {
				SetColumnValue(Columns.DLNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLNumber));
			}
		}
		[DataMember]
		public string DLState {
			get { return GetColumnValue<string>(Columns.DLState); }
			set {
				SetColumnValue(Columns.DLState, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLState));
			}
		}
		[DataMember]
		public string DLCountry {
			get { return GetColumnValue<string>(Columns.DLCountry); }
			set {
				SetColumnValue(Columns.DLCountry, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLCountry));
			}
		}
		[DataMember]
		public DateTime? DLExpiresOn {
			get { return GetColumnValue<DateTime?>(Columns.DLExpiresOn); }
			set {
				SetColumnValue(Columns.DLExpiresOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLExpiresOn));
			}
		}
		[DataMember]
		public string DLExpiration {
			get { return GetColumnValue<string>(Columns.DLExpiration); }
			set {
				SetColumnValue(Columns.DLExpiration, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLExpiration));
			}
		}
		[DataMember]
		public string Height {
			get { return GetColumnValue<string>(Columns.Height); }
			set {
				SetColumnValue(Columns.Height, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Height));
			}
		}
		[DataMember]
		public string Weight {
			get { return GetColumnValue<string>(Columns.Weight); }
			set {
				SetColumnValue(Columns.Weight, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Weight));
			}
		}
		[DataMember]
		public string EyeColor {
			get { return GetColumnValue<string>(Columns.EyeColor); }
			set {
				SetColumnValue(Columns.EyeColor, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EyeColor));
			}
		}
		[DataMember]
		public string HairColor {
			get { return GetColumnValue<string>(Columns.HairColor); }
			set {
				SetColumnValue(Columns.HairColor, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HairColor));
			}
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set {
				SetColumnValue(Columns.PhoneHome, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneHome));
			}
		}
		[DataMember]
		public string PhoneCell {
			get { return GetColumnValue<string>(Columns.PhoneCell); }
			set {
				SetColumnValue(Columns.PhoneCell, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneCell));
			}
		}
		[DataMember]
		public short? PhoneCellCarrierID {
			get { return GetColumnValue<short?>(Columns.PhoneCellCarrierID); }
			set {
				SetColumnValue(Columns.PhoneCellCarrierID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneCellCarrierID));
			}
		}
		[DataMember]
		public string PhoneFax {
			get { return GetColumnValue<string>(Columns.PhoneFax); }
			set {
				SetColumnValue(Columns.PhoneFax, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneFax));
			}
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set {
				SetColumnValue(Columns.Email, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Email));
			}
		}
		[DataMember]
		public string CorporateEmail {
			get { return GetColumnValue<string>(Columns.CorporateEmail); }
			set {
				SetColumnValue(Columns.CorporateEmail, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateEmail));
			}
		}
		[DataMember]
		public int? TreeLevel {
			get { return GetColumnValue<int?>(Columns.TreeLevel); }
			set {
				SetColumnValue(Columns.TreeLevel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TreeLevel));
			}
		}
		[DataMember]
		public bool HasVerifiedAddress {
			get { return GetColumnValue<bool>(Columns.HasVerifiedAddress); }
			set {
				SetColumnValue(Columns.HasVerifiedAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasVerifiedAddress));
			}
		}
		[DataMember]
		public DateTime? RightToWorkExpirationDate {
			get { return GetColumnValue<DateTime?>(Columns.RightToWorkExpirationDate); }
			set {
				SetColumnValue(Columns.RightToWorkExpirationDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RightToWorkExpirationDate));
			}
		}
		[DataMember]
		public string RightToWorkNotes {
			get { return GetColumnValue<string>(Columns.RightToWorkNotes); }
			set {
				SetColumnValue(Columns.RightToWorkNotes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RightToWorkNotes));
			}
		}
		[DataMember]
		public int? RightToWorkStatusID {
			get { return GetColumnValue<int?>(Columns.RightToWorkStatusID); }
			set {
				SetColumnValue(Columns.RightToWorkStatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RightToWorkStatusID));
			}
		}
		[DataMember]
		public bool IsLocked {
			get { return GetColumnValue<bool>(Columns.IsLocked); }
			set {
				SetColumnValue(Columns.IsLocked, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsLocked));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime RecruitedDate {
			get { return GetColumnValue<DateTime>(Columns.RecruitedDate); }
			set {
				SetColumnValue(Columns.RecruitedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitedDate));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime? CreatedOn {
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime? ModifiedOn {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_PhoneCellCarrier _PhoneCellCarrier;
		//Relationship: FK_RU_Users_RU_PhoneCellCarrier
		public RU_PhoneCellCarrier PhoneCellCarrier
		{
			get
			{
				if(_PhoneCellCarrier == null) {
					_PhoneCellCarrier = RU_PhoneCellCarrier.FetchByID(this.PhoneCellCarrierID);
				}
				return _PhoneCellCarrier;
			}
			set
			{
				SetColumnValue("PhoneCellCarrierID", value.PhoneCellCarrierID);
				_PhoneCellCarrier = value;
			}
		}

		private RU_UserEmployeeType _UserEmployeeType;
		//Relationship: FK_RU_Users_RU_UserEmployeeTypes
		public RU_UserEmployeeType UserEmployeeType
		{
			get
			{
				if(_UserEmployeeType == null) {
					_UserEmployeeType = RU_UserEmployeeType.FetchByID(this.UserEmployeeTypeId);
				}
				return _UserEmployeeType;
			}
			set
			{
				SetColumnValue("UserEmployeeTypeId", value.UserEmployeeTypeID);
				_UserEmployeeType = value;
			}
		}

		private RU_User _RecruitedBy;
		//Relationship: FK_RU_Users_RU_Users
		public RU_User RecruitedBy
		{
			get
			{
				if(_RecruitedBy == null) {
					_RecruitedBy = RU_User.FetchByID(this.RecruitedById);
				}
				return _RecruitedBy;
			}
			set
			{
				SetColumnValue("RecruitedById", value.UserID);
				_RecruitedBy = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return FullName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PublicFullNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RecruitedByIdColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn GPEmployeeIdColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn UserEmployeeTypeIdColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn PermanentAddressIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn PreferredNameColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn CompanyNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn MaritalStatusColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn SpouseNameColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn UserNameColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn BirthDateColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn HomeTownColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn BirthCityColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn BirthStateColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn BirthCountryColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn SexColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn ShirtSizeColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn HatSizeColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn DLNumberColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn DLStateColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn DLCountryColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn DLExpiresOnColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn DLExpirationColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn HeightColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn WeightColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn EyeColorColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn HairColorColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn PhoneCellColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn PhoneCellCarrierIDColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn PhoneFaxColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn CorporateEmailColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn TreeLevelColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn HasVerifiedAddressColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn RightToWorkExpirationDateColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn RightToWorkNotesColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn RightToWorkStatusIDColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn IsLockedColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn RecruitedDateColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[52]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UserID = @"UserID";
			public static readonly string FullName = @"FullName";
			public static readonly string PublicFullName = @"PublicFullName";
			public static readonly string RecruitedById = @"RecruitedById";
			public static readonly string GPEmployeeId = @"GPEmployeeId";
			public static readonly string UserEmployeeTypeId = @"UserEmployeeTypeId";
			public static readonly string PermanentAddressId = @"PermanentAddressId";
			public static readonly string SSN = @"SSN";
			public static readonly string FirstName = @"FirstName";
			public static readonly string MiddleName = @"MiddleName";
			public static readonly string LastName = @"LastName";
			public static readonly string PreferredName = @"PreferredName";
			public static readonly string CompanyName = @"CompanyName";
			public static readonly string MaritalStatus = @"MaritalStatus";
			public static readonly string SpouseName = @"SpouseName";
			public static readonly string UserName = @"UserName";
			public static readonly string Password = @"Password";
			public static readonly string BirthDate = @"BirthDate";
			public static readonly string HomeTown = @"HomeTown";
			public static readonly string BirthCity = @"BirthCity";
			public static readonly string BirthState = @"BirthState";
			public static readonly string BirthCountry = @"BirthCountry";
			public static readonly string Sex = @"Sex";
			public static readonly string ShirtSize = @"ShirtSize";
			public static readonly string HatSize = @"HatSize";
			public static readonly string DLNumber = @"DLNumber";
			public static readonly string DLState = @"DLState";
			public static readonly string DLCountry = @"DLCountry";
			public static readonly string DLExpiresOn = @"DLExpiresOn";
			public static readonly string DLExpiration = @"DLExpiration";
			public static readonly string Height = @"Height";
			public static readonly string Weight = @"Weight";
			public static readonly string EyeColor = @"EyeColor";
			public static readonly string HairColor = @"HairColor";
			public static readonly string PhoneHome = @"PhoneHome";
			public static readonly string PhoneCell = @"PhoneCell";
			public static readonly string PhoneCellCarrierID = @"PhoneCellCarrierID";
			public static readonly string PhoneFax = @"PhoneFax";
			public static readonly string Email = @"Email";
			public static readonly string CorporateEmail = @"CorporateEmail";
			public static readonly string TreeLevel = @"TreeLevel";
			public static readonly string HasVerifiedAddress = @"HasVerifiedAddress";
			public static readonly string RightToWorkExpirationDate = @"RightToWorkExpirationDate";
			public static readonly string RightToWorkNotes = @"RightToWorkNotes";
			public static readonly string RightToWorkStatusID = @"RightToWorkStatusID";
			public static readonly string IsLocked = @"IsLocked";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string RecruitedDate = @"RecruitedDate";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UserID; }
		}
		*/

		#region Foreign Collections

		private APT_OccupantCollection _APT_OccupantsCol;
		//Relationship: FK_APT_Occupant_RU_Users
		public APT_OccupantCollection APT_OccupantsCol
		{
			get
			{
				if(_APT_OccupantsCol == null) {
					_APT_OccupantsCol = new APT_OccupantCollection();
					_APT_OccupantsCol.LoadAndCloseReader(APT_Occupant.Query()
						.WHERE(APT_Occupant.Columns.UserID, UserID).ExecuteReader());
				}
				return _APT_OccupantsCol;
			}
		}

		private APT_OccupantCollection _APT_Occupants02Col;
		//Relationship: FK_APT_Occupant_RU_Users1
		public APT_OccupantCollection APT_Occupants02Col
		{
			get
			{
				if(_APT_Occupants02Col == null) {
					_APT_Occupants02Col = new APT_OccupantCollection();
					_APT_Occupants02Col.LoadAndCloseReader(APT_Occupant.Query()
						.WHERE(APT_Occupant.Columns.ResponsibleUserID, UserID).ExecuteReader());
				}
				return _APT_Occupants02Col;
			}
		}

		private APT_RecruitChargeCollection _APT_RecruitChargesCol;
		//Relationship: FK_APT_RecruitCharge_RU_Users
		public APT_RecruitChargeCollection APT_RecruitChargesCol
		{
			get
			{
				if(_APT_RecruitChargesCol == null) {
					_APT_RecruitChargesCol = new APT_RecruitChargeCollection();
					_APT_RecruitChargesCol.LoadAndCloseReader(APT_RecruitCharge.Query()
						.WHERE(APT_RecruitCharge.Columns.UserID, UserID).ExecuteReader());
				}
				return _APT_RecruitChargesCol;
			}
		}

		private HS_UnitDamageUserCollection _HS_UnitDamageUsersCol;
		//Relationship: FK_HS_UnitDamageUsers_RU_Users
		public HS_UnitDamageUserCollection HS_UnitDamageUsersCol
		{
			get
			{
				if(_HS_UnitDamageUsersCol == null) {
					_HS_UnitDamageUsersCol = new HS_UnitDamageUserCollection();
					_HS_UnitDamageUsersCol.LoadAndCloseReader(HS_UnitDamageUser.Query()
						.WHERE(HS_UnitDamageUser.Columns.UserID, UserID).ExecuteReader());
				}
				return _HS_UnitDamageUsersCol;
			}
		}

		private HS_UnitOccupantCollection _HS_UnitOccupantsCol;
		//Relationship: FK_HS_UnitOccupant_RU_Users
		public HS_UnitOccupantCollection HS_UnitOccupantsCol
		{
			get
			{
				if(_HS_UnitOccupantsCol == null) {
					_HS_UnitOccupantsCol = new HS_UnitOccupantCollection();
					_HS_UnitOccupantsCol.LoadAndCloseReader(HS_UnitOccupant.Query()
						.WHERE(HS_UnitOccupant.Columns.UserID, UserID).ExecuteReader());
				}
				return _HS_UnitOccupantsCol;
			}
		}

		private HS_HousingUserCollection _HS_HousingUsersCol;
		//Relationship: FK_HS_UserNotes_RU_Users
		public HS_HousingUserCollection HS_HousingUsersCol
		{
			get
			{
				if(_HS_HousingUsersCol == null) {
					_HS_HousingUsersCol = new HS_HousingUserCollection();
					_HS_HousingUsersCol.LoadAndCloseReader(HS_HousingUser.Query()
						.WHERE(HS_HousingUser.Columns.UserID, UserID).ExecuteReader());
				}
				return _HS_HousingUsersCol;
			}
		}

		private PR_SalesManagerBackendCollection _PR_SalesManagerBackendsCol;
		//Relationship: FK_PR_SalesManagerBackends_RU_Users
		public PR_SalesManagerBackendCollection PR_SalesManagerBackendsCol
		{
			get
			{
				if(_PR_SalesManagerBackendsCol == null) {
					_PR_SalesManagerBackendsCol = new PR_SalesManagerBackendCollection();
					_PR_SalesManagerBackendsCol.LoadAndCloseReader(PR_SalesManagerBackend.Query()
						.WHERE(PR_SalesManagerBackend.Columns.RegionalUserID, UserID).ExecuteReader());
				}
				return _PR_SalesManagerBackendsCol;
			}
		}

		private PR_TechRecruitingBonuseCollection _PR_TechRecruitingBonusesCol;
		//Relationship: FK_PR_TechRecruitingBonuses_RU_Users
		public PR_TechRecruitingBonuseCollection PR_TechRecruitingBonusesCol
		{
			get
			{
				if(_PR_TechRecruitingBonusesCol == null) {
					_PR_TechRecruitingBonusesCol = new PR_TechRecruitingBonuseCollection();
					_PR_TechRecruitingBonusesCol.LoadAndCloseReader(PR_TechRecruitingBonuse.Query()
						.WHERE(PR_TechRecruitingBonuse.Columns.BonusRecipientUserID, UserID).ExecuteReader());
				}
				return _PR_TechRecruitingBonusesCol;
			}
		}

		private PR_TechRecruitingBonuseCollection _PR_TechRecruitingBonuses02Col;
		//Relationship: FK_PR_TechRecruitingBonuses_RU_Users1
		public PR_TechRecruitingBonuseCollection PR_TechRecruitingBonuses02Col
		{
			get
			{
				if(_PR_TechRecruitingBonuses02Col == null) {
					_PR_TechRecruitingBonuses02Col = new PR_TechRecruitingBonuseCollection();
					_PR_TechRecruitingBonuses02Col.LoadAndCloseReader(PR_TechRecruitingBonuse.Query()
						.WHERE(PR_TechRecruitingBonuse.Columns.InstallerUserID, UserID).ExecuteReader());
				}
				return _PR_TechRecruitingBonuses02Col;
			}
		}

		private PR_TechRecruitingBonusTreeCollection _PR_TechRecruitingBonusTreesCol;
		//Relationship: FK_PR_TechRecruitingBonusTree_RU_Users
		public PR_TechRecruitingBonusTreeCollection PR_TechRecruitingBonusTreesCol
		{
			get
			{
				if(_PR_TechRecruitingBonusTreesCol == null) {
					_PR_TechRecruitingBonusTreesCol = new PR_TechRecruitingBonusTreeCollection();
					_PR_TechRecruitingBonusTreesCol.LoadAndCloseReader(PR_TechRecruitingBonusTree.Query()
						.WHERE(PR_TechRecruitingBonusTree.Columns.TechUserID, UserID).ExecuteReader());
				}
				return _PR_TechRecruitingBonusTreesCol;
			}
		}

		private PR_TechRecruitingBonusTreeCollection _PR_TechRecruitingBonusTrees02Col;
		//Relationship: FK_PR_TechRecruitingBonusTree_RU_Users1
		public PR_TechRecruitingBonusTreeCollection PR_TechRecruitingBonusTrees02Col
		{
			get
			{
				if(_PR_TechRecruitingBonusTrees02Col == null) {
					_PR_TechRecruitingBonusTrees02Col = new PR_TechRecruitingBonusTreeCollection();
					_PR_TechRecruitingBonusTrees02Col.LoadAndCloseReader(PR_TechRecruitingBonusTree.Query()
						.WHERE(PR_TechRecruitingBonusTree.Columns.RecruiterUserID, UserID).ExecuteReader());
				}
				return _PR_TechRecruitingBonusTrees02Col;
			}
		}

		private PS_PublishLocationCollection _PS_PublishLocationsCol;
		//Relationship: FK_PS_PublishLocations_RU_Users
		public PS_PublishLocationCollection PS_PublishLocationsCol
		{
			get
			{
				if(_PS_PublishLocationsCol == null) {
					_PS_PublishLocationsCol = new PS_PublishLocationCollection();
					_PS_PublishLocationsCol.LoadAndCloseReader(PS_PublishLocation.Query()
						.WHERE(PS_PublishLocation.Columns.AuthorizedBy, UserID).ExecuteReader());
				}
				return _PS_PublishLocationsCol;
			}
		}

		private PS_UserSettingCollection _PS_UserSettingsCol;
		//Relationship: FK_PS_UserSettings_RU_Users
		public PS_UserSettingCollection PS_UserSettingsCol
		{
			get
			{
				if(_PS_UserSettingsCol == null) {
					_PS_UserSettingsCol = new PS_UserSettingCollection();
					_PS_UserSettingsCol.LoadAndCloseReader(PS_UserSetting.Query()
						.WHERE(PS_UserSetting.Columns.UserID, UserID).ExecuteReader());
				}
				return _PS_UserSettingsCol;
			}
		}

		private QE_QuizResponseCollection _QE_QuizResponsesCol;
		//Relationship: FK_QE_QuizResponses_RU_Users
		public QE_QuizResponseCollection QE_QuizResponsesCol
		{
			get
			{
				if(_QE_QuizResponsesCol == null) {
					_QE_QuizResponsesCol = new QE_QuizResponseCollection();
					_QE_QuizResponsesCol.LoadAndCloseReader(QE_QuizResponse.Query()
						.WHERE(QE_QuizResponse.Columns.TakenBy, UserID).ExecuteReader());
				}
				return _QE_QuizResponsesCol;
			}
		}

		private RU_CommissionRecordCollection _RU_CommissionRecordsCol;
		//Relationship: FK_RU_CommissionRecords_RU_Users
		public RU_CommissionRecordCollection RU_CommissionRecordsCol
		{
			get
			{
				if(_RU_CommissionRecordsCol == null) {
					_RU_CommissionRecordsCol = new RU_CommissionRecordCollection();
					_RU_CommissionRecordsCol.LoadAndCloseReader(RU_CommissionRecord.Query()
						.WHERE(RU_CommissionRecord.Columns.UserID, UserID).ExecuteReader());
				}
				return _RU_CommissionRecordsCol;
			}
		}

		private RU_HousingInfoCollection _RU_HousingInfosCol;
		//Relationship: FK_RU_HousingInfo_RU_Users
		public RU_HousingInfoCollection RU_HousingInfosCol
		{
			get
			{
				if(_RU_HousingInfosCol == null) {
					_RU_HousingInfosCol = new RU_HousingInfoCollection();
					_RU_HousingInfosCol.LoadAndCloseReader(RU_HousingInfo.Query()
						.WHERE(RU_HousingInfo.Columns.UserID, UserID).ExecuteReader());
				}
				return _RU_HousingInfosCol;
			}
		}

		private RU_LoginAuditCollection _RU_LoginAuditsCol;
		//Relationship: FK_RU_LoginAudit_RU_Users
		public RU_LoginAuditCollection RU_LoginAuditsCol
		{
			get
			{
				if(_RU_LoginAuditsCol == null) {
					_RU_LoginAuditsCol = new RU_LoginAuditCollection();
					_RU_LoginAuditsCol.LoadAndCloseReader(RU_LoginAudit.Query()
						.WHERE(RU_LoginAudit.Columns.UserId, UserID).ExecuteReader());
				}
				return _RU_LoginAuditsCol;
			}
		}

		private RU_BoardMessageCollection _RU_BoardMessagesCol;
		//Relationship: FK_RU_MessageBoards_Recipient
		public RU_BoardMessageCollection RU_BoardMessagesCol
		{
			get
			{
				if(_RU_BoardMessagesCol == null) {
					_RU_BoardMessagesCol = new RU_BoardMessageCollection();
					_RU_BoardMessagesCol.LoadAndCloseReader(RU_BoardMessage.Query()
						.WHERE(RU_BoardMessage.Columns.RecipientID, UserID).ExecuteReader());
				}
				return _RU_BoardMessagesCol;
			}
		}

		private RU_BoardMessageCollection _RU_BoardMessages02Col;
		//Relationship: FK_RU_MessageBoards_Sender
		public RU_BoardMessageCollection RU_BoardMessages02Col
		{
			get
			{
				if(_RU_BoardMessages02Col == null) {
					_RU_BoardMessages02Col = new RU_BoardMessageCollection();
					_RU_BoardMessages02Col.LoadAndCloseReader(RU_BoardMessage.Query()
						.WHERE(RU_BoardMessage.Columns.SenderID, UserID).ExecuteReader());
				}
				return _RU_BoardMessages02Col;
			}
		}

		private RU_MessageQueueCollection _RU_MessageQueuesCol;
		//Relationship: FK_RU_MessageQueues_CreatedBy
		public RU_MessageQueueCollection RU_MessageQueuesCol
		{
			get
			{
				if(_RU_MessageQueuesCol == null) {
					_RU_MessageQueuesCol = new RU_MessageQueueCollection();
					_RU_MessageQueuesCol.LoadAndCloseReader(RU_MessageQueue.Query()
						.WHERE(RU_MessageQueue.Columns.SentByID, UserID).ExecuteReader());
				}
				return _RU_MessageQueuesCol;
			}
		}

		private RU_RecruitCollection _RU_RecruitsCol;
		//Relationship: FK_RU_Recruits_RU_Users
		public RU_RecruitCollection RU_RecruitsCol
		{
			get
			{
				if(_RU_RecruitsCol == null) {
					_RU_RecruitsCol = new RU_RecruitCollection();
					_RU_RecruitsCol.LoadAndCloseReader(RU_Recruit.Query()
						.WHERE(RU_Recruit.Columns.UserId, UserID).ExecuteReader());
				}
				return _RU_RecruitsCol;
			}
		}

		private RU_UserAuthenticationCollection _RU_UserAuthenticationsCol;
		//Relationship: FK_RU_UserAuthentication_RU_Users
		public RU_UserAuthenticationCollection RU_UserAuthenticationsCol
		{
			get
			{
				if(_RU_UserAuthenticationsCol == null) {
					_RU_UserAuthenticationsCol = new RU_UserAuthenticationCollection();
					_RU_UserAuthenticationsCol.LoadAndCloseReader(RU_UserAuthentication.Query()
						.WHERE(RU_UserAuthentication.Columns.UserId, UserID).ExecuteReader());
				}
				return _RU_UserAuthenticationsCol;
			}
		}

		private RU_MessageQueue_User_MapCollection _RU_MessageQueue_User_MapsCol;
		//Relationship: FK_RU_UserID
		public RU_MessageQueue_User_MapCollection RU_MessageQueue_User_MapsCol
		{
			get
			{
				if(_RU_MessageQueue_User_MapsCol == null) {
					_RU_MessageQueue_User_MapsCol = new RU_MessageQueue_User_MapCollection();
					_RU_MessageQueue_User_MapsCol.LoadAndCloseReader(RU_MessageQueue_User_Map.Query()
						.WHERE(RU_MessageQueue_User_Map.Columns.UserID, UserID).ExecuteReader());
				}
				return _RU_MessageQueue_User_MapsCol;
			}
		}

		private RU_UserPhotoCollection _RU_UserPhotosCol;
		//Relationship: FK_RU_UserPhotos_RU_Users
		public RU_UserPhotoCollection RU_UserPhotosCol
		{
			get
			{
				if(_RU_UserPhotosCol == null) {
					_RU_UserPhotosCol = new RU_UserPhotoCollection();
					_RU_UserPhotosCol.LoadAndCloseReader(RU_UserPhoto.Query()
						.WHERE(RU_UserPhoto.Columns.UserID, UserID).ExecuteReader());
				}
				return _RU_UserPhotosCol;
			}
		}

		private RU_UserCollection _ChildRU_UsersCol;
		//Relationship: FK_RU_Users_RU_Users
		public RU_UserCollection ChildRU_UsersCol
		{
			get
			{
				if(_ChildRU_UsersCol == null) {
					_ChildRU_UsersCol = new RU_UserCollection();
					_ChildRU_UsersCol.LoadAndCloseReader(RU_User.Query()
						.WHERE(RU_User.Columns.RecruitedById, UserID).ExecuteReader());
				}
				return _ChildRU_UsersCol;
			}
		}

		private SAE_AccountsInstalledCollection _SAE_AccountsInstalledsCol;
		//Relationship: FK_SAE_AccountsInstalled_RU_Users
		public SAE_AccountsInstalledCollection SAE_AccountsInstalledsCol
		{
			get
			{
				if(_SAE_AccountsInstalledsCol == null) {
					_SAE_AccountsInstalledsCol = new SAE_AccountsInstalledCollection();
					_SAE_AccountsInstalledsCol.LoadAndCloseReader(SAE_AccountsInstalled.Query()
						.WHERE(SAE_AccountsInstalled.Columns.SalesRepUserID, UserID).ExecuteReader());
				}
				return _SAE_AccountsInstalledsCol;
			}
		}

		private SAE_AccountsInstalledCollection _SAE_AccountsInstalleds02Col;
		//Relationship: FK_SAE_AccountsInstalled_RU_Users1
		public SAE_AccountsInstalledCollection SAE_AccountsInstalleds02Col
		{
			get
			{
				if(_SAE_AccountsInstalleds02Col == null) {
					_SAE_AccountsInstalleds02Col = new SAE_AccountsInstalledCollection();
					_SAE_AccountsInstalleds02Col.LoadAndCloseReader(SAE_AccountsInstalled.Query()
						.WHERE(SAE_AccountsInstalled.Columns.TechnicianUserID, UserID).ExecuteReader());
				}
				return _SAE_AccountsInstalleds02Col;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_UsersHistory class.
	/// </summary>
	[DataContract]
	public partial class RU_UsersHistoryCollection : ActiveList<RU_UsersHistory, RU_UsersHistoryCollection>
	{
		public static RU_UsersHistoryCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_UsersHistoryCollection result = new RU_UsersHistoryCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_UsersHistory item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_UsersHistory table.
	/// </summary>
	[DataContract]
	public partial class RU_UsersHistory : ActiveRecord<RU_UsersHistory>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_UsersHistory()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_UsersHistory", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUserHistoryID = new TableSchema.TableColumn(schema);
				colvarUserHistoryID.ColumnName = "UserHistoryID";
				colvarUserHistoryID.DataType = DbType.Int64;
				colvarUserHistoryID.MaxLength = 0;
				colvarUserHistoryID.AutoIncrement = true;
				colvarUserHistoryID.IsNullable = false;
				colvarUserHistoryID.IsPrimaryKey = true;
				colvarUserHistoryID.IsForeignKey = false;
				colvarUserHistoryID.IsReadOnly = false;
				colvarUserHistoryID.DefaultSetting = @"";
				colvarUserHistoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserHistoryID);

				TableSchema.TableColumn colvarHistoryDate = new TableSchema.TableColumn(schema);
				colvarHistoryDate.ColumnName = "HistoryDate";
				colvarHistoryDate.DataType = DbType.DateTime;
				colvarHistoryDate.MaxLength = 0;
				colvarHistoryDate.AutoIncrement = false;
				colvarHistoryDate.IsNullable = false;
				colvarHistoryDate.IsPrimaryKey = false;
				colvarHistoryDate.IsForeignKey = false;
				colvarHistoryDate.IsReadOnly = false;
				colvarHistoryDate.DefaultSetting = @"(getdate())";
				colvarHistoryDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHistoryDate);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 101;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = true;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = false;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarPublicFullName = new TableSchema.TableColumn(schema);
				colvarPublicFullName.ColumnName = "PublicFullName";
				colvarPublicFullName.DataType = DbType.String;
				colvarPublicFullName.MaxLength = 53;
				colvarPublicFullName.AutoIncrement = false;
				colvarPublicFullName.IsNullable = true;
				colvarPublicFullName.IsPrimaryKey = false;
				colvarPublicFullName.IsForeignKey = false;
				colvarPublicFullName.IsReadOnly = false;
				colvarPublicFullName.DefaultSetting = @"";
				colvarPublicFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPublicFullName);

				TableSchema.TableColumn colvarRecruitedByID = new TableSchema.TableColumn(schema);
				colvarRecruitedByID.ColumnName = "RecruitedByID";
				colvarRecruitedByID.DataType = DbType.Int32;
				colvarRecruitedByID.MaxLength = 0;
				colvarRecruitedByID.AutoIncrement = false;
				colvarRecruitedByID.IsNullable = true;
				colvarRecruitedByID.IsPrimaryKey = false;
				colvarRecruitedByID.IsForeignKey = false;
				colvarRecruitedByID.IsReadOnly = false;
				colvarRecruitedByID.DefaultSetting = @"";
				colvarRecruitedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitedByID);

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 25;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = true;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarUserEmployeeTypeId = new TableSchema.TableColumn(schema);
				colvarUserEmployeeTypeId.ColumnName = "UserEmployeeTypeId";
				colvarUserEmployeeTypeId.DataType = DbType.AnsiString;
				colvarUserEmployeeTypeId.MaxLength = 20;
				colvarUserEmployeeTypeId.AutoIncrement = false;
				colvarUserEmployeeTypeId.IsNullable = false;
				colvarUserEmployeeTypeId.IsPrimaryKey = false;
				colvarUserEmployeeTypeId.IsForeignKey = false;
				colvarUserEmployeeTypeId.IsReadOnly = false;
				colvarUserEmployeeTypeId.DefaultSetting = @"";
				colvarUserEmployeeTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserEmployeeTypeId);

				TableSchema.TableColumn colvarPermanentAddressID = new TableSchema.TableColumn(schema);
				colvarPermanentAddressID.ColumnName = "PermanentAddressID";
				colvarPermanentAddressID.DataType = DbType.Int32;
				colvarPermanentAddressID.MaxLength = 0;
				colvarPermanentAddressID.AutoIncrement = false;
				colvarPermanentAddressID.IsNullable = true;
				colvarPermanentAddressID.IsPrimaryKey = false;
				colvarPermanentAddressID.IsForeignKey = false;
				colvarPermanentAddressID.IsReadOnly = false;
				colvarPermanentAddressID.DefaultSetting = @"";
				colvarPermanentAddressID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPermanentAddressID);

				TableSchema.TableColumn colvarSSN = new TableSchema.TableColumn(schema);
				colvarSSN.ColumnName = "SSN";
				colvarSSN.DataType = DbType.String;
				colvarSSN.MaxLength = 50;
				colvarSSN.AutoIncrement = false;
				colvarSSN.IsNullable = true;
				colvarSSN.IsPrimaryKey = false;
				colvarSSN.IsForeignKey = false;
				colvarSSN.IsReadOnly = false;
				colvarSSN.DefaultSetting = @"";
				colvarSSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSSN);

				TableSchema.TableColumn colvarFirstName = new TableSchema.TableColumn(schema);
				colvarFirstName.ColumnName = "FirstName";
				colvarFirstName.DataType = DbType.String;
				colvarFirstName.MaxLength = 50;
				colvarFirstName.AutoIncrement = false;
				colvarFirstName.IsNullable = true;
				colvarFirstName.IsPrimaryKey = false;
				colvarFirstName.IsForeignKey = false;
				colvarFirstName.IsReadOnly = false;
				colvarFirstName.DefaultSetting = @"";
				colvarFirstName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstName);

				TableSchema.TableColumn colvarMiddleName = new TableSchema.TableColumn(schema);
				colvarMiddleName.ColumnName = "MiddleName";
				colvarMiddleName.DataType = DbType.String;
				colvarMiddleName.MaxLength = 50;
				colvarMiddleName.AutoIncrement = false;
				colvarMiddleName.IsNullable = true;
				colvarMiddleName.IsPrimaryKey = false;
				colvarMiddleName.IsForeignKey = false;
				colvarMiddleName.IsReadOnly = false;
				colvarMiddleName.DefaultSetting = @"";
				colvarMiddleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMiddleName);

				TableSchema.TableColumn colvarLastName = new TableSchema.TableColumn(schema);
				colvarLastName.ColumnName = "LastName";
				colvarLastName.DataType = DbType.String;
				colvarLastName.MaxLength = 50;
				colvarLastName.AutoIncrement = false;
				colvarLastName.IsNullable = true;
				colvarLastName.IsPrimaryKey = false;
				colvarLastName.IsForeignKey = false;
				colvarLastName.IsReadOnly = false;
				colvarLastName.DefaultSetting = @"";
				colvarLastName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastName);

				TableSchema.TableColumn colvarPreferredName = new TableSchema.TableColumn(schema);
				colvarPreferredName.ColumnName = "PreferredName";
				colvarPreferredName.DataType = DbType.String;
				colvarPreferredName.MaxLength = 50;
				colvarPreferredName.AutoIncrement = false;
				colvarPreferredName.IsNullable = true;
				colvarPreferredName.IsPrimaryKey = false;
				colvarPreferredName.IsForeignKey = false;
				colvarPreferredName.IsReadOnly = false;
				colvarPreferredName.DefaultSetting = @"";
				colvarPreferredName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreferredName);

				TableSchema.TableColumn colvarCompanyName = new TableSchema.TableColumn(schema);
				colvarCompanyName.ColumnName = "CompanyName";
				colvarCompanyName.DataType = DbType.String;
				colvarCompanyName.MaxLength = 50;
				colvarCompanyName.AutoIncrement = false;
				colvarCompanyName.IsNullable = true;
				colvarCompanyName.IsPrimaryKey = false;
				colvarCompanyName.IsForeignKey = false;
				colvarCompanyName.IsReadOnly = false;
				colvarCompanyName.DefaultSetting = @"";
				colvarCompanyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyName);

				TableSchema.TableColumn colvarMaritalStatus = new TableSchema.TableColumn(schema);
				colvarMaritalStatus.ColumnName = "MaritalStatus";
				colvarMaritalStatus.DataType = DbType.Boolean;
				colvarMaritalStatus.MaxLength = 0;
				colvarMaritalStatus.AutoIncrement = false;
				colvarMaritalStatus.IsNullable = true;
				colvarMaritalStatus.IsPrimaryKey = false;
				colvarMaritalStatus.IsForeignKey = false;
				colvarMaritalStatus.IsReadOnly = false;
				colvarMaritalStatus.DefaultSetting = @"";
				colvarMaritalStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaritalStatus);

				TableSchema.TableColumn colvarSpouseName = new TableSchema.TableColumn(schema);
				colvarSpouseName.ColumnName = "SpouseName";
				colvarSpouseName.DataType = DbType.String;
				colvarSpouseName.MaxLength = 50;
				colvarSpouseName.AutoIncrement = false;
				colvarSpouseName.IsNullable = true;
				colvarSpouseName.IsPrimaryKey = false;
				colvarSpouseName.IsForeignKey = false;
				colvarSpouseName.IsReadOnly = false;
				colvarSpouseName.DefaultSetting = @"";
				colvarSpouseName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpouseName);

				TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
				colvarUserName.ColumnName = "UserName";
				colvarUserName.DataType = DbType.String;
				colvarUserName.MaxLength = 50;
				colvarUserName.AutoIncrement = false;
				colvarUserName.IsNullable = false;
				colvarUserName.IsPrimaryKey = false;
				colvarUserName.IsForeignKey = false;
				colvarUserName.IsReadOnly = false;
				colvarUserName.DefaultSetting = @"";
				colvarUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserName);

				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "Password";
				colvarPassword.DataType = DbType.AnsiString;
				colvarPassword.MaxLength = 60;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = false;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);

				TableSchema.TableColumn colvarBirthDate = new TableSchema.TableColumn(schema);
				colvarBirthDate.ColumnName = "BirthDate";
				colvarBirthDate.DataType = DbType.DateTime;
				colvarBirthDate.MaxLength = 0;
				colvarBirthDate.AutoIncrement = false;
				colvarBirthDate.IsNullable = true;
				colvarBirthDate.IsPrimaryKey = false;
				colvarBirthDate.IsForeignKey = false;
				colvarBirthDate.IsReadOnly = false;
				colvarBirthDate.DefaultSetting = @"";
				colvarBirthDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthDate);

				TableSchema.TableColumn colvarHomeTown = new TableSchema.TableColumn(schema);
				colvarHomeTown.ColumnName = "HomeTown";
				colvarHomeTown.DataType = DbType.String;
				colvarHomeTown.MaxLength = 50;
				colvarHomeTown.AutoIncrement = false;
				colvarHomeTown.IsNullable = true;
				colvarHomeTown.IsPrimaryKey = false;
				colvarHomeTown.IsForeignKey = false;
				colvarHomeTown.IsReadOnly = false;
				colvarHomeTown.DefaultSetting = @"";
				colvarHomeTown.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHomeTown);

				TableSchema.TableColumn colvarBirthCity = new TableSchema.TableColumn(schema);
				colvarBirthCity.ColumnName = "BirthCity";
				colvarBirthCity.DataType = DbType.String;
				colvarBirthCity.MaxLength = 50;
				colvarBirthCity.AutoIncrement = false;
				colvarBirthCity.IsNullable = true;
				colvarBirthCity.IsPrimaryKey = false;
				colvarBirthCity.IsForeignKey = false;
				colvarBirthCity.IsReadOnly = false;
				colvarBirthCity.DefaultSetting = @"";
				colvarBirthCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthCity);

				TableSchema.TableColumn colvarBirthState = new TableSchema.TableColumn(schema);
				colvarBirthState.ColumnName = "BirthState";
				colvarBirthState.DataType = DbType.String;
				colvarBirthState.MaxLength = 50;
				colvarBirthState.AutoIncrement = false;
				colvarBirthState.IsNullable = true;
				colvarBirthState.IsPrimaryKey = false;
				colvarBirthState.IsForeignKey = false;
				colvarBirthState.IsReadOnly = false;
				colvarBirthState.DefaultSetting = @"";
				colvarBirthState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthState);

				TableSchema.TableColumn colvarBirthCountry = new TableSchema.TableColumn(schema);
				colvarBirthCountry.ColumnName = "BirthCountry";
				colvarBirthCountry.DataType = DbType.String;
				colvarBirthCountry.MaxLength = 50;
				colvarBirthCountry.AutoIncrement = false;
				colvarBirthCountry.IsNullable = true;
				colvarBirthCountry.IsPrimaryKey = false;
				colvarBirthCountry.IsForeignKey = false;
				colvarBirthCountry.IsReadOnly = false;
				colvarBirthCountry.DefaultSetting = @"";
				colvarBirthCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBirthCountry);

				TableSchema.TableColumn colvarSex = new TableSchema.TableColumn(schema);
				colvarSex.ColumnName = "Sex";
				colvarSex.DataType = DbType.Byte;
				colvarSex.MaxLength = 0;
				colvarSex.AutoIncrement = false;
				colvarSex.IsNullable = true;
				colvarSex.IsPrimaryKey = false;
				colvarSex.IsForeignKey = false;
				colvarSex.IsReadOnly = false;
				colvarSex.DefaultSetting = @"";
				colvarSex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSex);

				TableSchema.TableColumn colvarShirtSize = new TableSchema.TableColumn(schema);
				colvarShirtSize.ColumnName = "ShirtSize";
				colvarShirtSize.DataType = DbType.Byte;
				colvarShirtSize.MaxLength = 0;
				colvarShirtSize.AutoIncrement = false;
				colvarShirtSize.IsNullable = true;
				colvarShirtSize.IsPrimaryKey = false;
				colvarShirtSize.IsForeignKey = false;
				colvarShirtSize.IsReadOnly = false;
				colvarShirtSize.DefaultSetting = @"";
				colvarShirtSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShirtSize);

				TableSchema.TableColumn colvarHatSize = new TableSchema.TableColumn(schema);
				colvarHatSize.ColumnName = "HatSize";
				colvarHatSize.DataType = DbType.Byte;
				colvarHatSize.MaxLength = 0;
				colvarHatSize.AutoIncrement = false;
				colvarHatSize.IsNullable = true;
				colvarHatSize.IsPrimaryKey = false;
				colvarHatSize.IsForeignKey = false;
				colvarHatSize.IsReadOnly = false;
				colvarHatSize.DefaultSetting = @"";
				colvarHatSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHatSize);

				TableSchema.TableColumn colvarDLNumber = new TableSchema.TableColumn(schema);
				colvarDLNumber.ColumnName = "DLNumber";
				colvarDLNumber.DataType = DbType.String;
				colvarDLNumber.MaxLength = 50;
				colvarDLNumber.AutoIncrement = false;
				colvarDLNumber.IsNullable = true;
				colvarDLNumber.IsPrimaryKey = false;
				colvarDLNumber.IsForeignKey = false;
				colvarDLNumber.IsReadOnly = false;
				colvarDLNumber.DefaultSetting = @"";
				colvarDLNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLNumber);

				TableSchema.TableColumn colvarDLState = new TableSchema.TableColumn(schema);
				colvarDLState.ColumnName = "DLState";
				colvarDLState.DataType = DbType.String;
				colvarDLState.MaxLength = 50;
				colvarDLState.AutoIncrement = false;
				colvarDLState.IsNullable = true;
				colvarDLState.IsPrimaryKey = false;
				colvarDLState.IsForeignKey = false;
				colvarDLState.IsReadOnly = false;
				colvarDLState.DefaultSetting = @"";
				colvarDLState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLState);

				TableSchema.TableColumn colvarDLCountry = new TableSchema.TableColumn(schema);
				colvarDLCountry.ColumnName = "DLCountry";
				colvarDLCountry.DataType = DbType.String;
				colvarDLCountry.MaxLength = 50;
				colvarDLCountry.AutoIncrement = false;
				colvarDLCountry.IsNullable = true;
				colvarDLCountry.IsPrimaryKey = false;
				colvarDLCountry.IsForeignKey = false;
				colvarDLCountry.IsReadOnly = false;
				colvarDLCountry.DefaultSetting = @"";
				colvarDLCountry.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLCountry);

				TableSchema.TableColumn colvarDLExpiresOn = new TableSchema.TableColumn(schema);
				colvarDLExpiresOn.ColumnName = "DLExpiresOn";
				colvarDLExpiresOn.DataType = DbType.DateTime;
				colvarDLExpiresOn.MaxLength = 0;
				colvarDLExpiresOn.AutoIncrement = false;
				colvarDLExpiresOn.IsNullable = true;
				colvarDLExpiresOn.IsPrimaryKey = false;
				colvarDLExpiresOn.IsForeignKey = false;
				colvarDLExpiresOn.IsReadOnly = false;
				colvarDLExpiresOn.DefaultSetting = @"";
				colvarDLExpiresOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLExpiresOn);

				TableSchema.TableColumn colvarDLExpiration = new TableSchema.TableColumn(schema);
				colvarDLExpiration.ColumnName = "DLExpiration";
				colvarDLExpiration.DataType = DbType.String;
				colvarDLExpiration.MaxLength = 50;
				colvarDLExpiration.AutoIncrement = false;
				colvarDLExpiration.IsNullable = true;
				colvarDLExpiration.IsPrimaryKey = false;
				colvarDLExpiration.IsForeignKey = false;
				colvarDLExpiration.IsReadOnly = false;
				colvarDLExpiration.DefaultSetting = @"";
				colvarDLExpiration.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLExpiration);

				TableSchema.TableColumn colvarHeight = new TableSchema.TableColumn(schema);
				colvarHeight.ColumnName = "Height";
				colvarHeight.DataType = DbType.String;
				colvarHeight.MaxLength = 10;
				colvarHeight.AutoIncrement = false;
				colvarHeight.IsNullable = true;
				colvarHeight.IsPrimaryKey = false;
				colvarHeight.IsForeignKey = false;
				colvarHeight.IsReadOnly = false;
				colvarHeight.DefaultSetting = @"";
				colvarHeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeight);

				TableSchema.TableColumn colvarWeight = new TableSchema.TableColumn(schema);
				colvarWeight.ColumnName = "Weight";
				colvarWeight.DataType = DbType.String;
				colvarWeight.MaxLength = 10;
				colvarWeight.AutoIncrement = false;
				colvarWeight.IsNullable = true;
				colvarWeight.IsPrimaryKey = false;
				colvarWeight.IsForeignKey = false;
				colvarWeight.IsReadOnly = false;
				colvarWeight.DefaultSetting = @"";
				colvarWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeight);

				TableSchema.TableColumn colvarEyeColor = new TableSchema.TableColumn(schema);
				colvarEyeColor.ColumnName = "EyeColor";
				colvarEyeColor.DataType = DbType.String;
				colvarEyeColor.MaxLength = 20;
				colvarEyeColor.AutoIncrement = false;
				colvarEyeColor.IsNullable = true;
				colvarEyeColor.IsPrimaryKey = false;
				colvarEyeColor.IsForeignKey = false;
				colvarEyeColor.IsReadOnly = false;
				colvarEyeColor.DefaultSetting = @"";
				colvarEyeColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEyeColor);

				TableSchema.TableColumn colvarHairColor = new TableSchema.TableColumn(schema);
				colvarHairColor.ColumnName = "HairColor";
				colvarHairColor.DataType = DbType.String;
				colvarHairColor.MaxLength = 20;
				colvarHairColor.AutoIncrement = false;
				colvarHairColor.IsNullable = true;
				colvarHairColor.IsPrimaryKey = false;
				colvarHairColor.IsForeignKey = false;
				colvarHairColor.IsReadOnly = false;
				colvarHairColor.DefaultSetting = @"";
				colvarHairColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHairColor);

				TableSchema.TableColumn colvarPhoneHome = new TableSchema.TableColumn(schema);
				colvarPhoneHome.ColumnName = "PhoneHome";
				colvarPhoneHome.DataType = DbType.String;
				colvarPhoneHome.MaxLength = 25;
				colvarPhoneHome.AutoIncrement = false;
				colvarPhoneHome.IsNullable = true;
				colvarPhoneHome.IsPrimaryKey = false;
				colvarPhoneHome.IsForeignKey = false;
				colvarPhoneHome.IsReadOnly = false;
				colvarPhoneHome.DefaultSetting = @"";
				colvarPhoneHome.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneHome);

				TableSchema.TableColumn colvarPhoneCell = new TableSchema.TableColumn(schema);
				colvarPhoneCell.ColumnName = "PhoneCell";
				colvarPhoneCell.DataType = DbType.String;
				colvarPhoneCell.MaxLength = 50;
				colvarPhoneCell.AutoIncrement = false;
				colvarPhoneCell.IsNullable = true;
				colvarPhoneCell.IsPrimaryKey = false;
				colvarPhoneCell.IsForeignKey = false;
				colvarPhoneCell.IsReadOnly = false;
				colvarPhoneCell.DefaultSetting = @"";
				colvarPhoneCell.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneCell);

				TableSchema.TableColumn colvarPhoneCellCarrierID = new TableSchema.TableColumn(schema);
				colvarPhoneCellCarrierID.ColumnName = "PhoneCellCarrierID";
				colvarPhoneCellCarrierID.DataType = DbType.Int16;
				colvarPhoneCellCarrierID.MaxLength = 0;
				colvarPhoneCellCarrierID.AutoIncrement = false;
				colvarPhoneCellCarrierID.IsNullable = true;
				colvarPhoneCellCarrierID.IsPrimaryKey = false;
				colvarPhoneCellCarrierID.IsForeignKey = false;
				colvarPhoneCellCarrierID.IsReadOnly = false;
				colvarPhoneCellCarrierID.DefaultSetting = @"";
				colvarPhoneCellCarrierID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneCellCarrierID);

				TableSchema.TableColumn colvarPhoneFax = new TableSchema.TableColumn(schema);
				colvarPhoneFax.ColumnName = "PhoneFax";
				colvarPhoneFax.DataType = DbType.String;
				colvarPhoneFax.MaxLength = 25;
				colvarPhoneFax.AutoIncrement = false;
				colvarPhoneFax.IsNullable = true;
				colvarPhoneFax.IsPrimaryKey = false;
				colvarPhoneFax.IsForeignKey = false;
				colvarPhoneFax.IsReadOnly = false;
				colvarPhoneFax.DefaultSetting = @"";
				colvarPhoneFax.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneFax);

				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "Email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 100;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);

				TableSchema.TableColumn colvarCorporateEmail = new TableSchema.TableColumn(schema);
				colvarCorporateEmail.ColumnName = "CorporateEmail";
				colvarCorporateEmail.DataType = DbType.String;
				colvarCorporateEmail.MaxLength = 100;
				colvarCorporateEmail.AutoIncrement = false;
				colvarCorporateEmail.IsNullable = true;
				colvarCorporateEmail.IsPrimaryKey = false;
				colvarCorporateEmail.IsForeignKey = false;
				colvarCorporateEmail.IsReadOnly = false;
				colvarCorporateEmail.DefaultSetting = @"";
				colvarCorporateEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorporateEmail);

				TableSchema.TableColumn colvarTreeLevel = new TableSchema.TableColumn(schema);
				colvarTreeLevel.ColumnName = "TreeLevel";
				colvarTreeLevel.DataType = DbType.Int32;
				colvarTreeLevel.MaxLength = 0;
				colvarTreeLevel.AutoIncrement = false;
				colvarTreeLevel.IsNullable = true;
				colvarTreeLevel.IsPrimaryKey = false;
				colvarTreeLevel.IsForeignKey = false;
				colvarTreeLevel.IsReadOnly = false;
				colvarTreeLevel.DefaultSetting = @"";
				colvarTreeLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTreeLevel);

				TableSchema.TableColumn colvarHasVerifiedAddress = new TableSchema.TableColumn(schema);
				colvarHasVerifiedAddress.ColumnName = "HasVerifiedAddress";
				colvarHasVerifiedAddress.DataType = DbType.Boolean;
				colvarHasVerifiedAddress.MaxLength = 0;
				colvarHasVerifiedAddress.AutoIncrement = false;
				colvarHasVerifiedAddress.IsNullable = false;
				colvarHasVerifiedAddress.IsPrimaryKey = false;
				colvarHasVerifiedAddress.IsForeignKey = false;
				colvarHasVerifiedAddress.IsReadOnly = false;
				colvarHasVerifiedAddress.DefaultSetting = @"";
				colvarHasVerifiedAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasVerifiedAddress);

				TableSchema.TableColumn colvarRightToWorkExpirationDate = new TableSchema.TableColumn(schema);
				colvarRightToWorkExpirationDate.ColumnName = "RightToWorkExpirationDate";
				colvarRightToWorkExpirationDate.DataType = DbType.DateTime;
				colvarRightToWorkExpirationDate.MaxLength = 0;
				colvarRightToWorkExpirationDate.AutoIncrement = false;
				colvarRightToWorkExpirationDate.IsNullable = true;
				colvarRightToWorkExpirationDate.IsPrimaryKey = false;
				colvarRightToWorkExpirationDate.IsForeignKey = false;
				colvarRightToWorkExpirationDate.IsReadOnly = false;
				colvarRightToWorkExpirationDate.DefaultSetting = @"";
				colvarRightToWorkExpirationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRightToWorkExpirationDate);

				TableSchema.TableColumn colvarRightToWorkNotes = new TableSchema.TableColumn(schema);
				colvarRightToWorkNotes.ColumnName = "RightToWorkNotes";
				colvarRightToWorkNotes.DataType = DbType.String;
				colvarRightToWorkNotes.MaxLength = 250;
				colvarRightToWorkNotes.AutoIncrement = false;
				colvarRightToWorkNotes.IsNullable = true;
				colvarRightToWorkNotes.IsPrimaryKey = false;
				colvarRightToWorkNotes.IsForeignKey = false;
				colvarRightToWorkNotes.IsReadOnly = false;
				colvarRightToWorkNotes.DefaultSetting = @"";
				colvarRightToWorkNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRightToWorkNotes);

				TableSchema.TableColumn colvarRightToWorkStatusID = new TableSchema.TableColumn(schema);
				colvarRightToWorkStatusID.ColumnName = "RightToWorkStatusID";
				colvarRightToWorkStatusID.DataType = DbType.Int32;
				colvarRightToWorkStatusID.MaxLength = 0;
				colvarRightToWorkStatusID.AutoIncrement = false;
				colvarRightToWorkStatusID.IsNullable = true;
				colvarRightToWorkStatusID.IsPrimaryKey = false;
				colvarRightToWorkStatusID.IsForeignKey = false;
				colvarRightToWorkStatusID.IsReadOnly = false;
				colvarRightToWorkStatusID.DefaultSetting = @"";
				colvarRightToWorkStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRightToWorkStatusID);

				TableSchema.TableColumn colvarIsLocked = new TableSchema.TableColumn(schema);
				colvarIsLocked.ColumnName = "IsLocked";
				colvarIsLocked.DataType = DbType.Boolean;
				colvarIsLocked.MaxLength = 0;
				colvarIsLocked.AutoIncrement = false;
				colvarIsLocked.IsNullable = false;
				colvarIsLocked.IsPrimaryKey = false;
				colvarIsLocked.IsForeignKey = false;
				colvarIsLocked.IsReadOnly = false;
				colvarIsLocked.DefaultSetting = @"((0))";
				colvarIsLocked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsLocked);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarRecruitedDate = new TableSchema.TableColumn(schema);
				colvarRecruitedDate.ColumnName = "RecruitedDate";
				colvarRecruitedDate.DataType = DbType.DateTime;
				colvarRecruitedDate.MaxLength = 0;
				colvarRecruitedDate.AutoIncrement = false;
				colvarRecruitedDate.IsNullable = false;
				colvarRecruitedDate.IsPrimaryKey = false;
				colvarRecruitedDate.IsForeignKey = false;
				colvarRecruitedDate.IsReadOnly = false;
				colvarRecruitedDate.DefaultSetting = @"";
				colvarRecruitedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitedDate);

				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);

				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = true;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				colvarCreatedOn.DefaultSetting = @"";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);

				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);

				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = true;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				colvarModifiedOn.DefaultSetting = @"";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_UsersHistory",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_UsersHistory LoadFrom(RU_UsersHistory item)
		{
			RU_UsersHistory result = new RU_UsersHistory();
			if (item.UserHistoryID != default(long)) {
				result.LoadByKey(item.UserHistoryID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public long UserHistoryID {
			get { return GetColumnValue<long>(Columns.UserHistoryID); }
			set {
				SetColumnValue(Columns.UserHistoryID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserHistoryID));
			}
		}
		[DataMember]
		public DateTime HistoryDate {
			get { return GetColumnValue<DateTime>(Columns.HistoryDate); }
			set {
				SetColumnValue(Columns.HistoryDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HistoryDate));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set {
				SetColumnValue(Columns.FullName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullName));
			}
		}
		[DataMember]
		public string PublicFullName {
			get { return GetColumnValue<string>(Columns.PublicFullName); }
			set {
				SetColumnValue(Columns.PublicFullName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PublicFullName));
			}
		}
		[DataMember]
		public int? RecruitedByID {
			get { return GetColumnValue<int?>(Columns.RecruitedByID); }
			set {
				SetColumnValue(Columns.RecruitedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitedByID));
			}
		}
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public string UserEmployeeTypeId {
			get { return GetColumnValue<string>(Columns.UserEmployeeTypeId); }
			set {
				SetColumnValue(Columns.UserEmployeeTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserEmployeeTypeId));
			}
		}
		[DataMember]
		public int? PermanentAddressID {
			get { return GetColumnValue<int?>(Columns.PermanentAddressID); }
			set {
				SetColumnValue(Columns.PermanentAddressID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PermanentAddressID));
			}
		}
		[DataMember]
		public string SSN {
			get { return GetColumnValue<string>(Columns.SSN); }
			set {
				SetColumnValue(Columns.SSN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SSN));
			}
		}
		[DataMember]
		public string FirstName {
			get { return GetColumnValue<string>(Columns.FirstName); }
			set {
				SetColumnValue(Columns.FirstName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FirstName));
			}
		}
		[DataMember]
		public string MiddleName {
			get { return GetColumnValue<string>(Columns.MiddleName); }
			set {
				SetColumnValue(Columns.MiddleName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MiddleName));
			}
		}
		[DataMember]
		public string LastName {
			get { return GetColumnValue<string>(Columns.LastName); }
			set {
				SetColumnValue(Columns.LastName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastName));
			}
		}
		[DataMember]
		public string PreferredName {
			get { return GetColumnValue<string>(Columns.PreferredName); }
			set {
				SetColumnValue(Columns.PreferredName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreferredName));
			}
		}
		[DataMember]
		public string CompanyName {
			get { return GetColumnValue<string>(Columns.CompanyName); }
			set {
				SetColumnValue(Columns.CompanyName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CompanyName));
			}
		}
		[DataMember]
		public bool? MaritalStatus {
			get { return GetColumnValue<bool?>(Columns.MaritalStatus); }
			set {
				SetColumnValue(Columns.MaritalStatus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MaritalStatus));
			}
		}
		[DataMember]
		public string SpouseName {
			get { return GetColumnValue<string>(Columns.SpouseName); }
			set {
				SetColumnValue(Columns.SpouseName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SpouseName));
			}
		}
		[DataMember]
		public string UserName {
			get { return GetColumnValue<string>(Columns.UserName); }
			set {
				SetColumnValue(Columns.UserName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserName));
			}
		}
		[DataMember]
		public string Password {
			get { return GetColumnValue<string>(Columns.Password); }
			set {
				SetColumnValue(Columns.Password, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Password));
			}
		}
		[DataMember]
		public DateTime? BirthDate {
			get { return GetColumnValue<DateTime?>(Columns.BirthDate); }
			set {
				SetColumnValue(Columns.BirthDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthDate));
			}
		}
		[DataMember]
		public string HomeTown {
			get { return GetColumnValue<string>(Columns.HomeTown); }
			set {
				SetColumnValue(Columns.HomeTown, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HomeTown));
			}
		}
		[DataMember]
		public string BirthCity {
			get { return GetColumnValue<string>(Columns.BirthCity); }
			set {
				SetColumnValue(Columns.BirthCity, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthCity));
			}
		}
		[DataMember]
		public string BirthState {
			get { return GetColumnValue<string>(Columns.BirthState); }
			set {
				SetColumnValue(Columns.BirthState, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthState));
			}
		}
		[DataMember]
		public string BirthCountry {
			get { return GetColumnValue<string>(Columns.BirthCountry); }
			set {
				SetColumnValue(Columns.BirthCountry, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BirthCountry));
			}
		}
		[DataMember]
		public byte? Sex {
			get { return GetColumnValue<byte?>(Columns.Sex); }
			set {
				SetColumnValue(Columns.Sex, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Sex));
			}
		}
		[DataMember]
		public byte? ShirtSize {
			get { return GetColumnValue<byte?>(Columns.ShirtSize); }
			set {
				SetColumnValue(Columns.ShirtSize, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShirtSize));
			}
		}
		[DataMember]
		public byte? HatSize {
			get { return GetColumnValue<byte?>(Columns.HatSize); }
			set {
				SetColumnValue(Columns.HatSize, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HatSize));
			}
		}
		[DataMember]
		public string DLNumber {
			get { return GetColumnValue<string>(Columns.DLNumber); }
			set {
				SetColumnValue(Columns.DLNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLNumber));
			}
		}
		[DataMember]
		public string DLState {
			get { return GetColumnValue<string>(Columns.DLState); }
			set {
				SetColumnValue(Columns.DLState, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLState));
			}
		}
		[DataMember]
		public string DLCountry {
			get { return GetColumnValue<string>(Columns.DLCountry); }
			set {
				SetColumnValue(Columns.DLCountry, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLCountry));
			}
		}
		[DataMember]
		public DateTime? DLExpiresOn {
			get { return GetColumnValue<DateTime?>(Columns.DLExpiresOn); }
			set {
				SetColumnValue(Columns.DLExpiresOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLExpiresOn));
			}
		}
		[DataMember]
		public string DLExpiration {
			get { return GetColumnValue<string>(Columns.DLExpiration); }
			set {
				SetColumnValue(Columns.DLExpiration, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DLExpiration));
			}
		}
		[DataMember]
		public string Height {
			get { return GetColumnValue<string>(Columns.Height); }
			set {
				SetColumnValue(Columns.Height, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Height));
			}
		}
		[DataMember]
		public string Weight {
			get { return GetColumnValue<string>(Columns.Weight); }
			set {
				SetColumnValue(Columns.Weight, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Weight));
			}
		}
		[DataMember]
		public string EyeColor {
			get { return GetColumnValue<string>(Columns.EyeColor); }
			set {
				SetColumnValue(Columns.EyeColor, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EyeColor));
			}
		}
		[DataMember]
		public string HairColor {
			get { return GetColumnValue<string>(Columns.HairColor); }
			set {
				SetColumnValue(Columns.HairColor, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HairColor));
			}
		}
		[DataMember]
		public string PhoneHome {
			get { return GetColumnValue<string>(Columns.PhoneHome); }
			set {
				SetColumnValue(Columns.PhoneHome, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneHome));
			}
		}
		[DataMember]
		public string PhoneCell {
			get { return GetColumnValue<string>(Columns.PhoneCell); }
			set {
				SetColumnValue(Columns.PhoneCell, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneCell));
			}
		}
		[DataMember]
		public short? PhoneCellCarrierID {
			get { return GetColumnValue<short?>(Columns.PhoneCellCarrierID); }
			set {
				SetColumnValue(Columns.PhoneCellCarrierID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneCellCarrierID));
			}
		}
		[DataMember]
		public string PhoneFax {
			get { return GetColumnValue<string>(Columns.PhoneFax); }
			set {
				SetColumnValue(Columns.PhoneFax, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PhoneFax));
			}
		}
		[DataMember]
		public string Email {
			get { return GetColumnValue<string>(Columns.Email); }
			set {
				SetColumnValue(Columns.Email, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Email));
			}
		}
		[DataMember]
		public string CorporateEmail {
			get { return GetColumnValue<string>(Columns.CorporateEmail); }
			set {
				SetColumnValue(Columns.CorporateEmail, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CorporateEmail));
			}
		}
		[DataMember]
		public int? TreeLevel {
			get { return GetColumnValue<int?>(Columns.TreeLevel); }
			set {
				SetColumnValue(Columns.TreeLevel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TreeLevel));
			}
		}
		[DataMember]
		public bool HasVerifiedAddress {
			get { return GetColumnValue<bool>(Columns.HasVerifiedAddress); }
			set {
				SetColumnValue(Columns.HasVerifiedAddress, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasVerifiedAddress));
			}
		}
		[DataMember]
		public DateTime? RightToWorkExpirationDate {
			get { return GetColumnValue<DateTime?>(Columns.RightToWorkExpirationDate); }
			set {
				SetColumnValue(Columns.RightToWorkExpirationDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RightToWorkExpirationDate));
			}
		}
		[DataMember]
		public string RightToWorkNotes {
			get { return GetColumnValue<string>(Columns.RightToWorkNotes); }
			set {
				SetColumnValue(Columns.RightToWorkNotes, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RightToWorkNotes));
			}
		}
		[DataMember]
		public int? RightToWorkStatusID {
			get { return GetColumnValue<int?>(Columns.RightToWorkStatusID); }
			set {
				SetColumnValue(Columns.RightToWorkStatusID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RightToWorkStatusID));
			}
		}
		[DataMember]
		public bool IsLocked {
			get { return GetColumnValue<bool>(Columns.IsLocked); }
			set {
				SetColumnValue(Columns.IsLocked, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsLocked));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public DateTime RecruitedDate {
			get { return GetColumnValue<DateTime>(Columns.RecruitedDate); }
			set {
				SetColumnValue(Columns.RecruitedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitedDate));
			}
		}
		[DataMember]
		public string CreatedBy {
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set {
				SetColumnValue(Columns.CreatedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedBy));
			}
		}
		[DataMember]
		public DateTime? CreatedOn {
			get { return GetColumnValue<DateTime?>(Columns.CreatedOn); }
			set {
				SetColumnValue(Columns.CreatedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedOn));
			}
		}
		[DataMember]
		public string ModifiedBy {
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set {
				SetColumnValue(Columns.ModifiedBy, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedBy));
			}
		}
		[DataMember]
		public DateTime? ModifiedOn {
			get { return GetColumnValue<DateTime?>(Columns.ModifiedOn); }
			set {
				SetColumnValue(Columns.ModifiedOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedOn));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return UserHistoryID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn UserHistoryIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn HistoryDateColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PublicFullNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn RecruitedByIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn UserEmployeeTypeIdColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PermanentAddressIDColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn SSNColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn FirstNameColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn MiddleNameColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn LastNameColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn PreferredNameColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CompanyNameColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn MaritalStatusColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn SpouseNameColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn UserNameColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn PasswordColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn BirthDateColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn HomeTownColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn BirthCityColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn BirthStateColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn BirthCountryColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn SexColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn ShirtSizeColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn HatSizeColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn DLNumberColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn DLStateColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn DLCountryColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn DLExpiresOnColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn DLExpirationColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn HeightColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn WeightColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn EyeColorColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn HairColorColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn PhoneHomeColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn PhoneCellColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn PhoneCellCarrierIDColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn PhoneFaxColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn EmailColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn CorporateEmailColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn TreeLevelColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn HasVerifiedAddressColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn RightToWorkExpirationDateColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn RightToWorkNotesColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn RightToWorkStatusIDColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn IsLockedColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn RecruitedDateColumn
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn CreatedByColumn
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn CreatedOnColumn
		{
			get { return Schema.Columns[52]; }
		}
		public static TableSchema.TableColumn ModifiedByColumn
		{
			get { return Schema.Columns[53]; }
		}
		public static TableSchema.TableColumn ModifiedOnColumn
		{
			get { return Schema.Columns[54]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UserHistoryID = @"UserHistoryID";
			public static readonly string HistoryDate = @"HistoryDate";
			public static readonly string UserID = @"UserID";
			public static readonly string FullName = @"FullName";
			public static readonly string PublicFullName = @"PublicFullName";
			public static readonly string RecruitedByID = @"RecruitedByID";
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string UserEmployeeTypeId = @"UserEmployeeTypeId";
			public static readonly string PermanentAddressID = @"PermanentAddressID";
			public static readonly string SSN = @"SSN";
			public static readonly string FirstName = @"FirstName";
			public static readonly string MiddleName = @"MiddleName";
			public static readonly string LastName = @"LastName";
			public static readonly string PreferredName = @"PreferredName";
			public static readonly string CompanyName = @"CompanyName";
			public static readonly string MaritalStatus = @"MaritalStatus";
			public static readonly string SpouseName = @"SpouseName";
			public static readonly string UserName = @"UserName";
			public static readonly string Password = @"Password";
			public static readonly string BirthDate = @"BirthDate";
			public static readonly string HomeTown = @"HomeTown";
			public static readonly string BirthCity = @"BirthCity";
			public static readonly string BirthState = @"BirthState";
			public static readonly string BirthCountry = @"BirthCountry";
			public static readonly string Sex = @"Sex";
			public static readonly string ShirtSize = @"ShirtSize";
			public static readonly string HatSize = @"HatSize";
			public static readonly string DLNumber = @"DLNumber";
			public static readonly string DLState = @"DLState";
			public static readonly string DLCountry = @"DLCountry";
			public static readonly string DLExpiresOn = @"DLExpiresOn";
			public static readonly string DLExpiration = @"DLExpiration";
			public static readonly string Height = @"Height";
			public static readonly string Weight = @"Weight";
			public static readonly string EyeColor = @"EyeColor";
			public static readonly string HairColor = @"HairColor";
			public static readonly string PhoneHome = @"PhoneHome";
			public static readonly string PhoneCell = @"PhoneCell";
			public static readonly string PhoneCellCarrierID = @"PhoneCellCarrierID";
			public static readonly string PhoneFax = @"PhoneFax";
			public static readonly string Email = @"Email";
			public static readonly string CorporateEmail = @"CorporateEmail";
			public static readonly string TreeLevel = @"TreeLevel";
			public static readonly string HasVerifiedAddress = @"HasVerifiedAddress";
			public static readonly string RightToWorkExpirationDate = @"RightToWorkExpirationDate";
			public static readonly string RightToWorkNotes = @"RightToWorkNotes";
			public static readonly string RightToWorkStatusID = @"RightToWorkStatusID";
			public static readonly string IsLocked = @"IsLocked";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string RecruitedDate = @"RecruitedDate";
			public static readonly string CreatedBy = @"CreatedBy";
			public static readonly string CreatedOn = @"CreatedOn";
			public static readonly string ModifiedBy = @"ModifiedBy";
			public static readonly string ModifiedOn = @"ModifiedOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UserHistoryID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the RU_UserType class.
	/// </summary>
	[DataContract]
	public partial class RU_UserTypeCollection : ActiveList<RU_UserType, RU_UserTypeCollection>
	{
		public static RU_UserTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_UserTypeCollection result = new RU_UserTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_UserType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_UserType table.
	/// </summary>
	[DataContract]
	public partial class RU_UserType : ActiveRecord<RU_UserType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum UserTypeEnum : short
		{
			[EnumMember()] Administrator = 1,
			[EnumMember()] Sales_Manager = 2,
			[EnumMember()] Sales_CoManager = 3,
			[EnumMember()] Sales_Assistant_Manager = 4,
			[EnumMember()] Sales_Rep = 5,
			[EnumMember()] Technician_Lead = 6,
			[EnumMember()] Technician = 7,
			[EnumMember()] Regional_Manager__Technician = 8,
			[EnumMember()] Technician_Assistant_Lead = 10,
			[EnumMember()] Regional_Manager__Sales = 11,
			[EnumMember()] Corporate = 12,
			[EnumMember()] Office_Assistant = 13,
			[EnumMember()] Inventory_Manager = 14,
			[EnumMember()] Corporate_Service = 15,
			[EnumMember()] Senior_Regional__Sales = 18,
			[EnumMember()] National_Regional__Sales = 19,
			[EnumMember()] National_Regional__Technician = 20,
			[EnumMember()] Service_Technician = 22,
			[EnumMember()] Vendor = 23,
		}

		//[DataMember]
		//public UserTypeEnum UserTypeCode
		//{
		//	get { return (UserTypeEnum)UserTypeID; }
		//	set { UserTypeID = (short)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_UserType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_UserType", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUserTypeID = new TableSchema.TableColumn(schema);
				colvarUserTypeID.ColumnName = "UserTypeID";
				colvarUserTypeID.DataType = DbType.Int16;
				colvarUserTypeID.MaxLength = 0;
				colvarUserTypeID.AutoIncrement = true;
				colvarUserTypeID.IsNullable = false;
				colvarUserTypeID.IsPrimaryKey = true;
				colvarUserTypeID.IsForeignKey = false;
				colvarUserTypeID.IsReadOnly = false;
				colvarUserTypeID.DefaultSetting = @"";
				colvarUserTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 30;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarSecurityLevel = new TableSchema.TableColumn(schema);
				colvarSecurityLevel.ColumnName = "SecurityLevel";
				colvarSecurityLevel.DataType = DbType.Byte;
				colvarSecurityLevel.MaxLength = 0;
				colvarSecurityLevel.AutoIncrement = false;
				colvarSecurityLevel.IsNullable = false;
				colvarSecurityLevel.IsPrimaryKey = false;
				colvarSecurityLevel.IsForeignKey = false;
				colvarSecurityLevel.IsReadOnly = false;
				colvarSecurityLevel.DefaultSetting = @"";
				colvarSecurityLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSecurityLevel);

				TableSchema.TableColumn colvarSpawnTypeID = new TableSchema.TableColumn(schema);
				colvarSpawnTypeID.ColumnName = "SpawnTypeID";
				colvarSpawnTypeID.DataType = DbType.Int32;
				colvarSpawnTypeID.MaxLength = 0;
				colvarSpawnTypeID.AutoIncrement = false;
				colvarSpawnTypeID.IsNullable = false;
				colvarSpawnTypeID.IsPrimaryKey = false;
				colvarSpawnTypeID.IsForeignKey = false;
				colvarSpawnTypeID.IsReadOnly = false;
				colvarSpawnTypeID.DefaultSetting = @"((0))";
				colvarSpawnTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSpawnTypeID);

				TableSchema.TableColumn colvarRoleLocationID = new TableSchema.TableColumn(schema);
				colvarRoleLocationID.ColumnName = "RoleLocationID";
				colvarRoleLocationID.DataType = DbType.Int32;
				colvarRoleLocationID.MaxLength = 0;
				colvarRoleLocationID.AutoIncrement = false;
				colvarRoleLocationID.IsNullable = false;
				colvarRoleLocationID.IsPrimaryKey = false;
				colvarRoleLocationID.IsForeignKey = true;
				colvarRoleLocationID.IsReadOnly = false;
				colvarRoleLocationID.DefaultSetting = @"";
				colvarRoleLocationID.ForeignKeyTableName = "RU_RoleLocations";
				schema.Columns.Add(colvarRoleLocationID);

				TableSchema.TableColumn colvarReportingLevel = new TableSchema.TableColumn(schema);
				colvarReportingLevel.ColumnName = "ReportingLevel";
				colvarReportingLevel.DataType = DbType.Int32;
				colvarReportingLevel.MaxLength = 0;
				colvarReportingLevel.AutoIncrement = false;
				colvarReportingLevel.IsNullable = false;
				colvarReportingLevel.IsPrimaryKey = false;
				colvarReportingLevel.IsForeignKey = false;
				colvarReportingLevel.IsReadOnly = false;
				colvarReportingLevel.DefaultSetting = @"";
				colvarReportingLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportingLevel);

				TableSchema.TableColumn colvarUserTypeTeamTypeID = new TableSchema.TableColumn(schema);
				colvarUserTypeTeamTypeID.ColumnName = "UserTypeTeamTypeID";
				colvarUserTypeTeamTypeID.DataType = DbType.Int32;
				colvarUserTypeTeamTypeID.MaxLength = 0;
				colvarUserTypeTeamTypeID.AutoIncrement = false;
				colvarUserTypeTeamTypeID.IsNullable = false;
				colvarUserTypeTeamTypeID.IsPrimaryKey = false;
				colvarUserTypeTeamTypeID.IsForeignKey = true;
				colvarUserTypeTeamTypeID.IsReadOnly = false;
				colvarUserTypeTeamTypeID.DefaultSetting = @"";
				colvarUserTypeTeamTypeID.ForeignKeyTableName = "RU_UserTypeTeamTypes";
				schema.Columns.Add(colvarUserTypeTeamTypeID);

				TableSchema.TableColumn colvarIsCommissionable = new TableSchema.TableColumn(schema);
				colvarIsCommissionable.ColumnName = "IsCommissionable";
				colvarIsCommissionable.DataType = DbType.Boolean;
				colvarIsCommissionable.MaxLength = 0;
				colvarIsCommissionable.AutoIncrement = false;
				colvarIsCommissionable.IsNullable = true;
				colvarIsCommissionable.IsPrimaryKey = false;
				colvarIsCommissionable.IsForeignKey = false;
				colvarIsCommissionable.IsReadOnly = false;
				colvarIsCommissionable.DefaultSetting = @"";
				colvarIsCommissionable.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCommissionable);

				TableSchema.TableColumn colvarIsActive = new TableSchema.TableColumn(schema);
				colvarIsActive.ColumnName = "IsActive";
				colvarIsActive.DataType = DbType.Boolean;
				colvarIsActive.MaxLength = 0;
				colvarIsActive.AutoIncrement = false;
				colvarIsActive.IsNullable = false;
				colvarIsActive.IsPrimaryKey = false;
				colvarIsActive.IsForeignKey = false;
				colvarIsActive.IsReadOnly = false;
				colvarIsActive.DefaultSetting = @"((1))";
				colvarIsActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActive);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.Int32;
				colvarCreatedByID.MaxLength = 0;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"((1))";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);

				TableSchema.TableColumn colvarModifiedByID = new TableSchema.TableColumn(schema);
				colvarModifiedByID.ColumnName = "ModifiedByID";
				colvarModifiedByID.DataType = DbType.Int32;
				colvarModifiedByID.MaxLength = 0;
				colvarModifiedByID.AutoIncrement = false;
				colvarModifiedByID.IsNullable = false;
				colvarModifiedByID.IsPrimaryKey = false;
				colvarModifiedByID.IsForeignKey = false;
				colvarModifiedByID.IsReadOnly = false;
				colvarModifiedByID.DefaultSetting = @"((1))";
				colvarModifiedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedByID);

				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = false;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"(getdate())";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_UserType",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_UserType LoadFrom(RU_UserType item)
		{
			RU_UserType result = new RU_UserType();
			if (item.UserTypeID != default(short)) {
				result.LoadByKey(item.UserTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public short UserTypeID {
			get { return GetColumnValue<short>(Columns.UserTypeID); }
			set {
				SetColumnValue(Columns.UserTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public byte SecurityLevel {
			get { return GetColumnValue<byte>(Columns.SecurityLevel); }
			set {
				SetColumnValue(Columns.SecurityLevel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SecurityLevel));
			}
		}
		[DataMember]
		public int SpawnTypeID {
			get { return GetColumnValue<int>(Columns.SpawnTypeID); }
			set {
				SetColumnValue(Columns.SpawnTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SpawnTypeID));
			}
		}
		[DataMember]
		public int RoleLocationID {
			get { return GetColumnValue<int>(Columns.RoleLocationID); }
			set {
				SetColumnValue(Columns.RoleLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RoleLocationID));
			}
		}
		[DataMember]
		public int ReportingLevel {
			get { return GetColumnValue<int>(Columns.ReportingLevel); }
			set {
				SetColumnValue(Columns.ReportingLevel, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReportingLevel));
			}
		}
		[DataMember]
		public int UserTypeTeamTypeID {
			get { return GetColumnValue<int>(Columns.UserTypeTeamTypeID); }
			set {
				SetColumnValue(Columns.UserTypeTeamTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeTeamTypeID));
			}
		}
		[DataMember]
		public bool? IsCommissionable {
			get { return GetColumnValue<bool?>(Columns.IsCommissionable); }
			set {
				SetColumnValue(Columns.IsCommissionable, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCommissionable));
			}
		}
		[DataMember]
		public bool IsActive {
			get { return GetColumnValue<bool>(Columns.IsActive); }
			set {
				SetColumnValue(Columns.IsActive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsActive));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public int CreatedByID {
			get { return GetColumnValue<int>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedDate {
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set {
				SetColumnValue(Columns.CreatedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedDate));
			}
		}
		[DataMember]
		public int ModifiedByID {
			get { return GetColumnValue<int>(Columns.ModifiedByID); }
			set {
				SetColumnValue(Columns.ModifiedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedByID));
			}
		}
		[DataMember]
		public DateTime ModifiedDate {
			get { return GetColumnValue<DateTime>(Columns.ModifiedDate); }
			set {
				SetColumnValue(Columns.ModifiedDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ModifiedDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_RoleLocation _RoleLocation;
		//Relationship: FK_RU_UserType_RU_RoleLocations
		public RU_RoleLocation RoleLocation
		{
			get
			{
				if(_RoleLocation == null) {
					_RoleLocation = RU_RoleLocation.FetchByID(this.RoleLocationID);
				}
				return _RoleLocation;
			}
			set
			{
				SetColumnValue("RoleLocationID", value.RoleLocationID);
				_RoleLocation = value;
			}
		}

		private RU_UserTypeTeamType _UserTypeTeamType;
		//Relationship: FK_RU_UserType_RU_UserTypeTeamTypes
		public RU_UserTypeTeamType UserTypeTeamType
		{
			get
			{
				if(_UserTypeTeamType == null) {
					_UserTypeTeamType = RU_UserTypeTeamType.FetchByID(this.UserTypeTeamTypeID);
				}
				return _UserTypeTeamType;
			}
			set
			{
				SetColumnValue("UserTypeTeamTypeID", value.UserTypeTeamTypeID);
				_UserTypeTeamType = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn UserTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SecurityLevelColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SpawnTypeIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RoleLocationIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ReportingLevelColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn UserTypeTeamTypeIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn IsCommissionableColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IsActiveColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn CreatedDateColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn ModifiedByIDColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ModifiedDateColumn
		{
			get { return Schema.Columns[13]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UserTypeID = @"UserTypeID";
			public static readonly string Description = @"Description";
			public static readonly string SecurityLevel = @"SecurityLevel";
			public static readonly string SpawnTypeID = @"SpawnTypeID";
			public static readonly string RoleLocationID = @"RoleLocationID";
			public static readonly string ReportingLevel = @"ReportingLevel";
			public static readonly string UserTypeTeamTypeID = @"UserTypeTeamTypeID";
			public static readonly string IsCommissionable = @"IsCommissionable";
			public static readonly string IsActive = @"IsActive";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedDate = @"CreatedDate";
			public static readonly string ModifiedByID = @"ModifiedByID";
			public static readonly string ModifiedDate = @"ModifiedDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UserTypeID; }
		}
		*/

		#region Foreign Collections

		private PR_BackendPayscaleCollection _PR_BackendPayscalesCol;
		//Relationship: FK_PR_BackendAccountRates_RU_UserType
		public PR_BackendPayscaleCollection PR_BackendPayscalesCol
		{
			get
			{
				if(_PR_BackendPayscalesCol == null) {
					_PR_BackendPayscalesCol = new PR_BackendPayscaleCollection();
					_PR_BackendPayscalesCol.LoadAndCloseReader(PR_BackendPayscale.Query()
						.WHERE(PR_BackendPayscale.Columns.UserTypeID, UserTypeID).ExecuteReader());
				}
				return _PR_BackendPayscalesCol;
			}
		}

		private PR_BackendManagerPayScheduleCollection _PR_BackendManagerPaySchedulesCol;
		//Relationship: FK_PR_BackendManagerPaySchedules_RU_UserType
		public PR_BackendManagerPayScheduleCollection PR_BackendManagerPaySchedulesCol
		{
			get
			{
				if(_PR_BackendManagerPaySchedulesCol == null) {
					_PR_BackendManagerPaySchedulesCol = new PR_BackendManagerPayScheduleCollection();
					_PR_BackendManagerPaySchedulesCol.LoadAndCloseReader(PR_BackendManagerPaySchedule.Query()
						.WHERE(PR_BackendManagerPaySchedule.Columns.PrimaryUserTypeID, UserTypeID).ExecuteReader());
				}
				return _PR_BackendManagerPaySchedulesCol;
			}
		}

		private PR_BackendPayScheduleCollection _PR_BackendPaySchedulesCol;
		//Relationship: FK_PR_BackendPaySchedules_RU_UserType
		public PR_BackendPayScheduleCollection PR_BackendPaySchedulesCol
		{
			get
			{
				if(_PR_BackendPaySchedulesCol == null) {
					_PR_BackendPaySchedulesCol = new PR_BackendPayScheduleCollection();
					_PR_BackendPaySchedulesCol.LoadAndCloseReader(PR_BackendPaySchedule.Query()
						.WHERE(PR_BackendPaySchedule.Columns.PrimaryUserTypeID, UserTypeID).ExecuteReader());
				}
				return _PR_BackendPaySchedulesCol;
			}
		}

		private PR_BackendPeriodCollection _PR_BackendPeriodsCol;
		//Relationship: FK_PR_BackendPeriods_PR_BackendPeriods
		public PR_BackendPeriodCollection PR_BackendPeriodsCol
		{
			get
			{
				if(_PR_BackendPeriodsCol == null) {
					_PR_BackendPeriodsCol = new PR_BackendPeriodCollection();
					_PR_BackendPeriodsCol.LoadAndCloseReader(PR_BackendPeriod.Query()
						.WHERE(PR_BackendPeriod.Columns.PrimaryUserTypeID, UserTypeID).ExecuteReader());
				}
				return _PR_BackendPeriodsCol;
			}
		}

		private PR_BackendPeriodUserTypeMappingCollection _PR_BackendPeriodUserTypeMappingsCol;
		//Relationship: FK_PR_BackendPeriodUserTypeMappings_RU_UserType
		public PR_BackendPeriodUserTypeMappingCollection PR_BackendPeriodUserTypeMappingsCol
		{
			get
			{
				if(_PR_BackendPeriodUserTypeMappingsCol == null) {
					_PR_BackendPeriodUserTypeMappingsCol = new PR_BackendPeriodUserTypeMappingCollection();
					_PR_BackendPeriodUserTypeMappingsCol.LoadAndCloseReader(PR_BackendPeriodUserTypeMapping.Query()
						.WHERE(PR_BackendPeriodUserTypeMapping.Columns.UserTypeID, UserTypeID).ExecuteReader());
				}
				return _PR_BackendPeriodUserTypeMappingsCol;
			}
		}

		private PR_PayScheduleCollection _PR_PaySchedulesCol;
		//Relationship: FK_PR_PaySchedules_RU_UserType
		public PR_PayScheduleCollection PR_PaySchedulesCol
		{
			get
			{
				if(_PR_PaySchedulesCol == null) {
					_PR_PaySchedulesCol = new PR_PayScheduleCollection();
					_PR_PaySchedulesCol.LoadAndCloseReader(PR_PaySchedule.Query()
						.WHERE(PR_PaySchedule.Columns.UserTypeID, UserTypeID).ExecuteReader());
				}
				return _PR_PaySchedulesCol;
			}
		}

		private PR_SigningBonusAmountCollection _PR_SigningBonusAmountsCol;
		//Relationship: FK_PR_SigningBonusAmounts_RU_UserType
		public PR_SigningBonusAmountCollection PR_SigningBonusAmountsCol
		{
			get
			{
				if(_PR_SigningBonusAmountsCol == null) {
					_PR_SigningBonusAmountsCol = new PR_SigningBonusAmountCollection();
					_PR_SigningBonusAmountsCol.LoadAndCloseReader(PR_SigningBonusAmount.Query()
						.WHERE(PR_SigningBonusAmount.Columns.UserTypeID, UserTypeID).ExecuteReader());
				}
				return _PR_SigningBonusAmountsCol;
			}
		}

		private PR_WeeklyTransactionCollection _PR_WeeklyTransactionsCol;
		//Relationship: FK_PR_WeeklyTransactions_RU_UserType
		public PR_WeeklyTransactionCollection PR_WeeklyTransactionsCol
		{
			get
			{
				if(_PR_WeeklyTransactionsCol == null) {
					_PR_WeeklyTransactionsCol = new PR_WeeklyTransactionCollection();
					_PR_WeeklyTransactionsCol.LoadAndCloseReader(PR_WeeklyTransaction.Query()
						.WHERE(PR_WeeklyTransaction.Columns.UserTypeID, UserTypeID).ExecuteReader());
				}
				return _PR_WeeklyTransactionsCol;
			}
		}

		private PS_ContentPermissionCollection _PS_ContentPermissionsCol;
		//Relationship: FK_PS_ContentPermissions_RU_UserType
		public PS_ContentPermissionCollection PS_ContentPermissionsCol
		{
			get
			{
				if(_PS_ContentPermissionsCol == null) {
					_PS_ContentPermissionsCol = new PS_ContentPermissionCollection();
					_PS_ContentPermissionsCol.LoadAndCloseReader(PS_ContentPermission.Query()
						.WHERE(PS_ContentPermission.Columns.RequiredUserTypeID, UserTypeID).ExecuteReader());
				}
				return _PS_ContentPermissionsCol;
			}
		}

		private RU_CommissionSeason_UserTypeCollection _RU_CommissionSeason_UserTypesCol;
		//Relationship: FK_RU_CommissionSeason_UserType_RU_UserTypeID
		public RU_CommissionSeason_UserTypeCollection RU_CommissionSeason_UserTypesCol
		{
			get
			{
				if(_RU_CommissionSeason_UserTypesCol == null) {
					_RU_CommissionSeason_UserTypesCol = new RU_CommissionSeason_UserTypeCollection();
					_RU_CommissionSeason_UserTypesCol.LoadAndCloseReader(RU_CommissionSeason_UserType.Query()
						.WHERE(RU_CommissionSeason_UserType.Columns.UserTypeID, UserTypeID).ExecuteReader());
				}
				return _RU_CommissionSeason_UserTypesCol;
			}
		}

		private RU_RecruitCollection _RU_RecruitsCol;
		//Relationship: FK_RU_Recruits_RU_UserType
		public RU_RecruitCollection RU_RecruitsCol
		{
			get
			{
				if(_RU_RecruitsCol == null) {
					_RU_RecruitsCol = new RU_RecruitCollection();
					_RU_RecruitsCol.LoadAndCloseReader(RU_Recruit.Query()
						.WHERE(RU_Recruit.Columns.UserTypeId, UserTypeID).ExecuteReader());
				}
				return _RU_RecruitsCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the RU_UserTypeTeamType class.
	/// </summary>
	[DataContract]
	public partial class RU_UserTypeTeamTypeCollection : ActiveList<RU_UserTypeTeamType, RU_UserTypeTeamTypeCollection>
	{
		public static RU_UserTypeTeamTypeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			RU_UserTypeTeamTypeCollection result = new RU_UserTypeTeamTypeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (RU_UserTypeTeamType item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the RU_UserTypeTeamTypes table.
	/// </summary>
	[DataContract]
	public partial class RU_UserTypeTeamType : ActiveRecord<RU_UserTypeTeamType>, INotifyPropertyChanged
	{
		#region Enum

		[DataContract]
		public enum UserTypeTeamTypeEnum : int
		{
			[EnumMember()] No_Team = 1,
			[EnumMember()] Team_Member = 2,
			[EnumMember()] Sales_Team_Member = 3,
			[EnumMember()] Tech_Team_Member = 4,
			[EnumMember()] Team_Manager = 5,
			[EnumMember()] Sales_Team_Manager = 6,
			[EnumMember()] Tech_Team_Manager = 7,
		}

		//[DataMember]
		//public UserTypeTeamTypeEnum UserTypeTeamTypeCode
		//{
		//	get { return (UserTypeTeamTypeEnum)UserTypeTeamTypeID; }
		//	set { UserTypeTeamTypeID = (int)value; }
		//}

		#endregion //Enum


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public RU_UserTypeTeamType()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("RU_UserTypeTeamTypes", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarUserTypeTeamTypeID = new TableSchema.TableColumn(schema);
				colvarUserTypeTeamTypeID.ColumnName = "UserTypeTeamTypeID";
				colvarUserTypeTeamTypeID.DataType = DbType.Int32;
				colvarUserTypeTeamTypeID.MaxLength = 0;
				colvarUserTypeTeamTypeID.AutoIncrement = true;
				colvarUserTypeTeamTypeID.IsNullable = false;
				colvarUserTypeTeamTypeID.IsPrimaryKey = true;
				colvarUserTypeTeamTypeID.IsForeignKey = false;
				colvarUserTypeTeamTypeID.IsReadOnly = false;
				colvarUserTypeTeamTypeID.DefaultSetting = @"";
				colvarUserTypeTeamTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserTypeTeamTypeID);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 30;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarParentID = new TableSchema.TableColumn(schema);
				colvarParentID.ColumnName = "ParentID";
				colvarParentID.DataType = DbType.Int32;
				colvarParentID.MaxLength = 0;
				colvarParentID.AutoIncrement = false;
				colvarParentID.IsNullable = true;
				colvarParentID.IsPrimaryKey = false;
				colvarParentID.IsForeignKey = true;
				colvarParentID.IsReadOnly = false;
				colvarParentID.DefaultSetting = @"";
				colvarParentID.ForeignKeyTableName = "RU_UserTypeTeamTypes";
				schema.Columns.Add(colvarParentID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("RU_UserTypeTeamTypes",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static RU_UserTypeTeamType LoadFrom(RU_UserTypeTeamType item)
		{
			RU_UserTypeTeamType result = new RU_UserTypeTeamType();
			if (item.UserTypeTeamTypeID != default(int)) {
				result.LoadByKey(item.UserTypeTeamTypeID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int UserTypeTeamTypeID {
			get { return GetColumnValue<int>(Columns.UserTypeTeamTypeID); }
			set {
				SetColumnValue(Columns.UserTypeTeamTypeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeTeamTypeID));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public int? ParentID {
			get { return GetColumnValue<int?>(Columns.ParentID); }
			set {
				SetColumnValue(Columns.ParentID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ParentID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_UserTypeTeamType _Parent;
		//Relationship: FK_RU_UserTypeTeamTypes_RU_UserTypeTeamTypes
		public RU_UserTypeTeamType Parent
		{
			get
			{
				if(_Parent == null) {
					_Parent = RU_UserTypeTeamType.FetchByID(this.ParentID);
				}
				return _Parent;
			}
			set
			{
				SetColumnValue("ParentID", value.UserTypeTeamTypeID);
				_Parent = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return Description;
		}

		#region Typed Columns

		public static TableSchema.TableColumn UserTypeTeamTypeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ParentIDColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string UserTypeTeamTypeID = @"UserTypeTeamTypeID";
			public static readonly string Description = @"Description";
			public static readonly string ParentID = @"ParentID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return UserTypeTeamTypeID; }
		}
		*/

		#region Foreign Collections

		private RU_UserTypeCollection _RU_UserTypesCol;
		//Relationship: FK_RU_UserType_RU_UserTypeTeamTypes
		public RU_UserTypeCollection RU_UserTypesCol
		{
			get
			{
				if(_RU_UserTypesCol == null) {
					_RU_UserTypesCol = new RU_UserTypeCollection();
					_RU_UserTypesCol.LoadAndCloseReader(RU_UserType.Query()
						.WHERE(RU_UserType.Columns.UserTypeTeamTypeID, UserTypeTeamTypeID).ExecuteReader());
				}
				return _RU_UserTypesCol;
			}
		}

		private RU_UserTypeTeamTypeCollection _ChildRU_UserTypeTeamTypesCol;
		//Relationship: FK_RU_UserTypeTeamTypes_RU_UserTypeTeamTypes
		public RU_UserTypeTeamTypeCollection ChildRU_UserTypeTeamTypesCol
		{
			get
			{
				if(_ChildRU_UserTypeTeamTypesCol == null) {
					_ChildRU_UserTypeTeamTypesCol = new RU_UserTypeTeamTypeCollection();
					_ChildRU_UserTypeTeamTypesCol.LoadAndCloseReader(RU_UserTypeTeamType.Query()
						.WHERE(RU_UserTypeTeamType.Columns.ParentID, UserTypeTeamTypeID).ExecuteReader());
				}
				return _ChildRU_UserTypeTeamTypesCol;
			}
		}

		#endregion Foreign Collections

	}
	/// <summary>
	/// Strongly-typed collection for the SAE_AccountInformation class.
	/// </summary>
	[DataContract]
	public partial class SAE_AccountInformationCollection : ActiveList<SAE_AccountInformation, SAE_AccountInformationCollection>
	{
		public static SAE_AccountInformationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_AccountInformationCollection result = new SAE_AccountInformationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_AccountInformation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_AccountInformation table.
	/// </summary>
	[DataContract]
	public partial class SAE_AccountInformation : ActiveRecord<SAE_AccountInformation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_AccountInformation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_AccountInformation", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIndustryNumber = new TableSchema.TableColumn(schema);
				colvarIndustryNumber.ColumnName = "IndustryNumber";
				colvarIndustryNumber.DataType = DbType.String;
				colvarIndustryNumber.MaxLength = 20;
				colvarIndustryNumber.AutoIncrement = false;
				colvarIndustryNumber.IsNullable = true;
				colvarIndustryNumber.IsPrimaryKey = false;
				colvarIndustryNumber.IsForeignKey = false;
				colvarIndustryNumber.IsReadOnly = false;
				colvarIndustryNumber.DefaultSetting = @"";
				colvarIndustryNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryNumber);

				TableSchema.TableColumn colvarCustomerName = new TableSchema.TableColumn(schema);
				colvarCustomerName.ColumnName = "CustomerName";
				colvarCustomerName.DataType = DbType.String;
				colvarCustomerName.MaxLength = 101;
				colvarCustomerName.AutoIncrement = false;
				colvarCustomerName.IsNullable = false;
				colvarCustomerName.IsPrimaryKey = false;
				colvarCustomerName.IsForeignKey = false;
				colvarCustomerName.IsReadOnly = false;
				colvarCustomerName.DefaultSetting = @"";
				colvarCustomerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerName);

				TableSchema.TableColumn colvarPremisePhone = new TableSchema.TableColumn(schema);
				colvarPremisePhone.ColumnName = "PremisePhone";
				colvarPremisePhone.DataType = DbType.String;
				colvarPremisePhone.MaxLength = 20;
				colvarPremisePhone.AutoIncrement = false;
				colvarPremisePhone.IsNullable = true;
				colvarPremisePhone.IsPrimaryKey = false;
				colvarPremisePhone.IsForeignKey = false;
				colvarPremisePhone.IsReadOnly = false;
				colvarPremisePhone.DefaultSetting = @"";
				colvarPremisePhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPremisePhone);

				TableSchema.TableColumn colvarAddressLine1 = new TableSchema.TableColumn(schema);
				colvarAddressLine1.ColumnName = "AddressLine1";
				colvarAddressLine1.DataType = DbType.String;
				colvarAddressLine1.MaxLength = 50;
				colvarAddressLine1.AutoIncrement = false;
				colvarAddressLine1.IsNullable = false;
				colvarAddressLine1.IsPrimaryKey = false;
				colvarAddressLine1.IsForeignKey = false;
				colvarAddressLine1.IsReadOnly = false;
				colvarAddressLine1.DefaultSetting = @"";
				colvarAddressLine1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddressLine1);

				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "City";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = false;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);

				TableSchema.TableColumn colvarState = new TableSchema.TableColumn(schema);
				colvarState.ColumnName = "State";
				colvarState.DataType = DbType.String;
				colvarState.MaxLength = 2;
				colvarState.AutoIncrement = false;
				colvarState.IsNullable = false;
				colvarState.IsPrimaryKey = false;
				colvarState.IsForeignKey = false;
				colvarState.IsReadOnly = false;
				colvarState.DefaultSetting = @"";
				colvarState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarState);

				TableSchema.TableColumn colvarZip = new TableSchema.TableColumn(schema);
				colvarZip.ColumnName = "Zip";
				colvarZip.DataType = DbType.String;
				colvarZip.MaxLength = 10;
				colvarZip.AutoIncrement = false;
				colvarZip.IsNullable = false;
				colvarZip.IsPrimaryKey = false;
				colvarZip.IsForeignKey = false;
				colvarZip.IsReadOnly = false;
				colvarZip.DefaultSetting = @"";
				colvarZip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZip);

				TableSchema.TableColumn colvarCreditGroup = new TableSchema.TableColumn(schema);
				colvarCreditGroup.ColumnName = "CreditGroup";
				colvarCreditGroup.DataType = DbType.AnsiString;
				colvarCreditGroup.MaxLength = 9;
				colvarCreditGroup.AutoIncrement = false;
				colvarCreditGroup.IsNullable = false;
				colvarCreditGroup.IsPrimaryKey = false;
				colvarCreditGroup.IsForeignKey = false;
				colvarCreditGroup.IsReadOnly = false;
				colvarCreditGroup.DefaultSetting = @"";
				colvarCreditGroup.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditGroup);

				TableSchema.TableColumn colvarCreditScore = new TableSchema.TableColumn(schema);
				colvarCreditScore.ColumnName = "CreditScore";
				colvarCreditScore.DataType = DbType.Int32;
				colvarCreditScore.MaxLength = 0;
				colvarCreditScore.AutoIncrement = false;
				colvarCreditScore.IsNullable = false;
				colvarCreditScore.IsPrimaryKey = false;
				colvarCreditScore.IsForeignKey = false;
				colvarCreditScore.IsReadOnly = false;
				colvarCreditScore.DefaultSetting = @"";
				colvarCreditScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScore);

				TableSchema.TableColumn colvarInstallDate = new TableSchema.TableColumn(schema);
				colvarInstallDate.ColumnName = "InstallDate";
				colvarInstallDate.DataType = DbType.DateTime;
				colvarInstallDate.MaxLength = 0;
				colvarInstallDate.AutoIncrement = false;
				colvarInstallDate.IsNullable = false;
				colvarInstallDate.IsPrimaryKey = false;
				colvarInstallDate.IsForeignKey = false;
				colvarInstallDate.IsReadOnly = false;
				colvarInstallDate.DefaultSetting = @"";
				colvarInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallDate);

				TableSchema.TableColumn colvarAccountCellularType = new TableSchema.TableColumn(schema);
				colvarAccountCellularType.ColumnName = "AccountCellularType";
				colvarAccountCellularType.DataType = DbType.Int32;
				colvarAccountCellularType.MaxLength = 0;
				colvarAccountCellularType.AutoIncrement = false;
				colvarAccountCellularType.IsNullable = true;
				colvarAccountCellularType.IsPrimaryKey = false;
				colvarAccountCellularType.IsForeignKey = false;
				colvarAccountCellularType.IsReadOnly = false;
				colvarAccountCellularType.DefaultSetting = @"";
				colvarAccountCellularType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountCellularType);

				TableSchema.TableColumn colvarOfficeLocation = new TableSchema.TableColumn(schema);
				colvarOfficeLocation.ColumnName = "OfficeLocation";
				colvarOfficeLocation.DataType = DbType.AnsiString;
				colvarOfficeLocation.MaxLength = 50;
				colvarOfficeLocation.AutoIncrement = false;
				colvarOfficeLocation.IsNullable = false;
				colvarOfficeLocation.IsPrimaryKey = false;
				colvarOfficeLocation.IsForeignKey = false;
				colvarOfficeLocation.IsReadOnly = false;
				colvarOfficeLocation.DefaultSetting = @"";
				colvarOfficeLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeLocation);

				TableSchema.TableColumn colvarMonitorRate = new TableSchema.TableColumn(schema);
				colvarMonitorRate.ColumnName = "MonitorRate";
				colvarMonitorRate.DataType = DbType.Currency;
				colvarMonitorRate.MaxLength = 0;
				colvarMonitorRate.AutoIncrement = false;
				colvarMonitorRate.IsNullable = true;
				colvarMonitorRate.IsPrimaryKey = false;
				colvarMonitorRate.IsForeignKey = false;
				colvarMonitorRate.IsReadOnly = false;
				colvarMonitorRate.DefaultSetting = @"";
				colvarMonitorRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonitorRate);

				TableSchema.TableColumn colvarCollectedActivation = new TableSchema.TableColumn(schema);
				colvarCollectedActivation.ColumnName = "CollectedActivation";
				colvarCollectedActivation.DataType = DbType.Currency;
				colvarCollectedActivation.MaxLength = 0;
				colvarCollectedActivation.AutoIncrement = false;
				colvarCollectedActivation.IsNullable = false;
				colvarCollectedActivation.IsPrimaryKey = false;
				colvarCollectedActivation.IsForeignKey = false;
				colvarCollectedActivation.IsReadOnly = false;
				colvarCollectedActivation.DefaultSetting = @"";
				colvarCollectedActivation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCollectedActivation);

				TableSchema.TableColumn colvarBillingType = new TableSchema.TableColumn(schema);
				colvarBillingType.ColumnName = "BillingType";
				colvarBillingType.DataType = DbType.AnsiString;
				colvarBillingType.MaxLength = 32;
				colvarBillingType.AutoIncrement = false;
				colvarBillingType.IsNullable = false;
				colvarBillingType.IsPrimaryKey = false;
				colvarBillingType.IsForeignKey = false;
				colvarBillingType.IsReadOnly = false;
				colvarBillingType.DefaultSetting = @"";
				colvarBillingType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingType);

				TableSchema.TableColumn colvarRemainderToBill = new TableSchema.TableColumn(schema);
				colvarRemainderToBill.ColumnName = "RemainderToBill";
				colvarRemainderToBill.DataType = DbType.Decimal;
				colvarRemainderToBill.MaxLength = 0;
				colvarRemainderToBill.AutoIncrement = false;
				colvarRemainderToBill.IsNullable = true;
				colvarRemainderToBill.IsPrimaryKey = false;
				colvarRemainderToBill.IsForeignKey = false;
				colvarRemainderToBill.IsReadOnly = false;
				colvarRemainderToBill.DefaultSetting = @"";
				colvarRemainderToBill.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemainderToBill);

				TableSchema.TableColumn colvarTotalAmountPaid = new TableSchema.TableColumn(schema);
				colvarTotalAmountPaid.ColumnName = "TotalAmountPaid";
				colvarTotalAmountPaid.DataType = DbType.Decimal;
				colvarTotalAmountPaid.MaxLength = 0;
				colvarTotalAmountPaid.AutoIncrement = false;
				colvarTotalAmountPaid.IsNullable = false;
				colvarTotalAmountPaid.IsPrimaryKey = false;
				colvarTotalAmountPaid.IsForeignKey = false;
				colvarTotalAmountPaid.IsReadOnly = false;
				colvarTotalAmountPaid.DefaultSetting = @"";
				colvarTotalAmountPaid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalAmountPaid);

				TableSchema.TableColumn colvarLastPaymentDate = new TableSchema.TableColumn(schema);
				colvarLastPaymentDate.ColumnName = "LastPaymentDate";
				colvarLastPaymentDate.DataType = DbType.DateTime;
				colvarLastPaymentDate.MaxLength = 0;
				colvarLastPaymentDate.AutoIncrement = false;
				colvarLastPaymentDate.IsNullable = false;
				colvarLastPaymentDate.IsPrimaryKey = false;
				colvarLastPaymentDate.IsForeignKey = false;
				colvarLastPaymentDate.IsReadOnly = false;
				colvarLastPaymentDate.DefaultSetting = @"";
				colvarLastPaymentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastPaymentDate);

				TableSchema.TableColumn colvarPastDueAmt = new TableSchema.TableColumn(schema);
				colvarPastDueAmt.ColumnName = "PastDueAmt";
				colvarPastDueAmt.DataType = DbType.Decimal;
				colvarPastDueAmt.MaxLength = 0;
				colvarPastDueAmt.AutoIncrement = false;
				colvarPastDueAmt.IsNullable = false;
				colvarPastDueAmt.IsPrimaryKey = false;
				colvarPastDueAmt.IsForeignKey = false;
				colvarPastDueAmt.IsReadOnly = false;
				colvarPastDueAmt.DefaultSetting = @"";
				colvarPastDueAmt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPastDueAmt);

				TableSchema.TableColumn colvarCurrentAgePeriod = new TableSchema.TableColumn(schema);
				colvarCurrentAgePeriod.ColumnName = "CurrentAgePeriod";
				colvarCurrentAgePeriod.DataType = DbType.Decimal;
				colvarCurrentAgePeriod.MaxLength = 0;
				colvarCurrentAgePeriod.AutoIncrement = false;
				colvarCurrentAgePeriod.IsNullable = false;
				colvarCurrentAgePeriod.IsPrimaryKey = false;
				colvarCurrentAgePeriod.IsForeignKey = false;
				colvarCurrentAgePeriod.IsReadOnly = false;
				colvarCurrentAgePeriod.DefaultSetting = @"";
				colvarCurrentAgePeriod.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentAgePeriod);

				TableSchema.TableColumn colvarAgePeriod0to30 = new TableSchema.TableColumn(schema);
				colvarAgePeriod0to30.ColumnName = "AgePeriod0to30";
				colvarAgePeriod0to30.DataType = DbType.Decimal;
				colvarAgePeriod0to30.MaxLength = 0;
				colvarAgePeriod0to30.AutoIncrement = false;
				colvarAgePeriod0to30.IsNullable = false;
				colvarAgePeriod0to30.IsPrimaryKey = false;
				colvarAgePeriod0to30.IsForeignKey = false;
				colvarAgePeriod0to30.IsReadOnly = false;
				colvarAgePeriod0to30.DefaultSetting = @"";
				colvarAgePeriod0to30.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgePeriod0to30);

				TableSchema.TableColumn colvarAgePeriod31to60 = new TableSchema.TableColumn(schema);
				colvarAgePeriod31to60.ColumnName = "AgePeriod31to60";
				colvarAgePeriod31to60.DataType = DbType.Decimal;
				colvarAgePeriod31to60.MaxLength = 0;
				colvarAgePeriod31to60.AutoIncrement = false;
				colvarAgePeriod31to60.IsNullable = false;
				colvarAgePeriod31to60.IsPrimaryKey = false;
				colvarAgePeriod31to60.IsForeignKey = false;
				colvarAgePeriod31to60.IsReadOnly = false;
				colvarAgePeriod31to60.DefaultSetting = @"";
				colvarAgePeriod31to60.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgePeriod31to60);

				TableSchema.TableColumn colvarAgePeriod61to90 = new TableSchema.TableColumn(schema);
				colvarAgePeriod61to90.ColumnName = "AgePeriod61to90";
				colvarAgePeriod61to90.DataType = DbType.Decimal;
				colvarAgePeriod61to90.MaxLength = 0;
				colvarAgePeriod61to90.AutoIncrement = false;
				colvarAgePeriod61to90.IsNullable = false;
				colvarAgePeriod61to90.IsPrimaryKey = false;
				colvarAgePeriod61to90.IsForeignKey = false;
				colvarAgePeriod61to90.IsReadOnly = false;
				colvarAgePeriod61to90.DefaultSetting = @"";
				colvarAgePeriod61to90.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgePeriod61to90);

				TableSchema.TableColumn colvarAgePeriod91Plus = new TableSchema.TableColumn(schema);
				colvarAgePeriod91Plus.ColumnName = "AgePeriod91Plus";
				colvarAgePeriod91Plus.DataType = DbType.Decimal;
				colvarAgePeriod91Plus.MaxLength = 0;
				colvarAgePeriod91Plus.AutoIncrement = false;
				colvarAgePeriod91Plus.IsNullable = true;
				colvarAgePeriod91Plus.IsPrimaryKey = false;
				colvarAgePeriod91Plus.IsForeignKey = false;
				colvarAgePeriod91Plus.IsReadOnly = false;
				colvarAgePeriod91Plus.DefaultSetting = @"";
				colvarAgePeriod91Plus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAgePeriod91Plus);

				TableSchema.TableColumn colvarBillingCycle = new TableSchema.TableColumn(schema);
				colvarBillingCycle.ColumnName = "BillingCycle";
				colvarBillingCycle.DataType = DbType.AnsiString;
				colvarBillingCycle.MaxLength = 11;
				colvarBillingCycle.AutoIncrement = false;
				colvarBillingCycle.IsNullable = false;
				colvarBillingCycle.IsPrimaryKey = false;
				colvarBillingCycle.IsForeignKey = false;
				colvarBillingCycle.IsReadOnly = false;
				colvarBillingCycle.DefaultSetting = @"";
				colvarBillingCycle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBillingCycle);

				TableSchema.TableColumn colvarContractTerm = new TableSchema.TableColumn(schema);
				colvarContractTerm.ColumnName = "ContractTerm";
				colvarContractTerm.DataType = DbType.AnsiString;
				colvarContractTerm.MaxLength = 9;
				colvarContractTerm.AutoIncrement = false;
				colvarContractTerm.IsNullable = false;
				colvarContractTerm.IsPrimaryKey = false;
				colvarContractTerm.IsForeignKey = false;
				colvarContractTerm.IsReadOnly = false;
				colvarContractTerm.DefaultSetting = @"";
				colvarContractTerm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractTerm);

				TableSchema.TableColumn colvarTwoWayVoice = new TableSchema.TableColumn(schema);
				colvarTwoWayVoice.ColumnName = "TwoWayVoice";
				colvarTwoWayVoice.DataType = DbType.AnsiString;
				colvarTwoWayVoice.MaxLength = 13;
				colvarTwoWayVoice.AutoIncrement = false;
				colvarTwoWayVoice.IsNullable = false;
				colvarTwoWayVoice.IsPrimaryKey = false;
				colvarTwoWayVoice.IsForeignKey = false;
				colvarTwoWayVoice.IsReadOnly = false;
				colvarTwoWayVoice.DefaultSetting = @"";
				colvarTwoWayVoice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTwoWayVoice);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_AccountInformation",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_AccountInformation LoadFrom(SAE_AccountInformation item)
		{
			SAE_AccountInformation result = new SAE_AccountInformation();
			if (item.AccountID != default(int)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public string IndustryNumber {
			get { return GetColumnValue<string>(Columns.IndustryNumber); }
			set {
				SetColumnValue(Columns.IndustryNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryNumber));
			}
		}
		[DataMember]
		public string CustomerName {
			get { return GetColumnValue<string>(Columns.CustomerName); }
			set {
				SetColumnValue(Columns.CustomerName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CustomerName));
			}
		}
		[DataMember]
		public string PremisePhone {
			get { return GetColumnValue<string>(Columns.PremisePhone); }
			set {
				SetColumnValue(Columns.PremisePhone, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PremisePhone));
			}
		}
		[DataMember]
		public string AddressLine1 {
			get { return GetColumnValue<string>(Columns.AddressLine1); }
			set {
				SetColumnValue(Columns.AddressLine1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AddressLine1));
			}
		}
		[DataMember]
		public string City {
			get { return GetColumnValue<string>(Columns.City); }
			set {
				SetColumnValue(Columns.City, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.City));
			}
		}
		[DataMember]
		public string State {
			get { return GetColumnValue<string>(Columns.State); }
			set {
				SetColumnValue(Columns.State, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.State));
			}
		}
		[DataMember]
		public string Zip {
			get { return GetColumnValue<string>(Columns.Zip); }
			set {
				SetColumnValue(Columns.Zip, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Zip));
			}
		}
		[DataMember]
		public string CreditGroup {
			get { return GetColumnValue<string>(Columns.CreditGroup); }
			set {
				SetColumnValue(Columns.CreditGroup, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditGroup));
			}
		}
		[DataMember]
		public int CreditScore {
			get { return GetColumnValue<int>(Columns.CreditScore); }
			set {
				SetColumnValue(Columns.CreditScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScore));
			}
		}
		[DataMember]
		public DateTime InstallDate {
			get { return GetColumnValue<DateTime>(Columns.InstallDate); }
			set {
				SetColumnValue(Columns.InstallDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InstallDate));
			}
		}
		[DataMember]
		public int? AccountCellularType {
			get { return GetColumnValue<int?>(Columns.AccountCellularType); }
			set {
				SetColumnValue(Columns.AccountCellularType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountCellularType));
			}
		}
		[DataMember]
		public string OfficeLocation {
			get { return GetColumnValue<string>(Columns.OfficeLocation); }
			set {
				SetColumnValue(Columns.OfficeLocation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeLocation));
			}
		}
		[DataMember]
		public decimal? MonitorRate {
			get { return GetColumnValue<decimal?>(Columns.MonitorRate); }
			set {
				SetColumnValue(Columns.MonitorRate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonitorRate));
			}
		}
		[DataMember]
		public decimal CollectedActivation {
			get { return GetColumnValue<decimal>(Columns.CollectedActivation); }
			set {
				SetColumnValue(Columns.CollectedActivation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CollectedActivation));
			}
		}
		[DataMember]
		public string BillingType {
			get { return GetColumnValue<string>(Columns.BillingType); }
			set {
				SetColumnValue(Columns.BillingType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BillingType));
			}
		}
		[DataMember]
		public decimal? RemainderToBill {
			get { return GetColumnValue<decimal?>(Columns.RemainderToBill); }
			set {
				SetColumnValue(Columns.RemainderToBill, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RemainderToBill));
			}
		}
		[DataMember]
		public decimal TotalAmountPaid {
			get { return GetColumnValue<decimal>(Columns.TotalAmountPaid); }
			set {
				SetColumnValue(Columns.TotalAmountPaid, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalAmountPaid));
			}
		}
		[DataMember]
		public DateTime LastPaymentDate {
			get { return GetColumnValue<DateTime>(Columns.LastPaymentDate); }
			set {
				SetColumnValue(Columns.LastPaymentDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LastPaymentDate));
			}
		}
		[DataMember]
		public decimal PastDueAmt {
			get { return GetColumnValue<decimal>(Columns.PastDueAmt); }
			set {
				SetColumnValue(Columns.PastDueAmt, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PastDueAmt));
			}
		}
		[DataMember]
		public decimal CurrentAgePeriod {
			get { return GetColumnValue<decimal>(Columns.CurrentAgePeriod); }
			set {
				SetColumnValue(Columns.CurrentAgePeriod, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CurrentAgePeriod));
			}
		}
		[DataMember]
		public decimal AgePeriod0to30 {
			get { return GetColumnValue<decimal>(Columns.AgePeriod0to30); }
			set {
				SetColumnValue(Columns.AgePeriod0to30, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgePeriod0to30));
			}
		}
		[DataMember]
		public decimal AgePeriod31to60 {
			get { return GetColumnValue<decimal>(Columns.AgePeriod31to60); }
			set {
				SetColumnValue(Columns.AgePeriod31to60, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgePeriod31to60));
			}
		}
		[DataMember]
		public decimal AgePeriod61to90 {
			get { return GetColumnValue<decimal>(Columns.AgePeriod61to90); }
			set {
				SetColumnValue(Columns.AgePeriod61to90, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgePeriod61to90));
			}
		}
		[DataMember]
		public decimal? AgePeriod91Plus {
			get { return GetColumnValue<decimal?>(Columns.AgePeriod91Plus); }
			set {
				SetColumnValue(Columns.AgePeriod91Plus, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AgePeriod91Plus));
			}
		}
		[DataMember]
		public string BillingCycle {
			get { return GetColumnValue<string>(Columns.BillingCycle); }
			set {
				SetColumnValue(Columns.BillingCycle, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BillingCycle));
			}
		}
		[DataMember]
		public string ContractTerm {
			get { return GetColumnValue<string>(Columns.ContractTerm); }
			set {
				SetColumnValue(Columns.ContractTerm, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractTerm));
			}
		}
		[DataMember]
		public string TwoWayVoice {
			get { return GetColumnValue<string>(Columns.TwoWayVoice); }
			set {
				SetColumnValue(Columns.TwoWayVoice, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TwoWayVoice));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return IndustryNumber;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IndustryNumberColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CustomerNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn PremisePhoneColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AddressLine1Column
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CityColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn StateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn ZipColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn CreditGroupColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreditScoreColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn InstallDateColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn AccountCellularTypeColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn OfficeLocationColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn MonitorRateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn CollectedActivationColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn BillingTypeColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn RemainderToBillColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn TotalAmountPaidColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn LastPaymentDateColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn PastDueAmtColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn CurrentAgePeriodColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn AgePeriod0to30Column
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn AgePeriod31to60Column
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn AgePeriod61to90Column
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn AgePeriod91PlusColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn BillingCycleColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn ContractTermColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn TwoWayVoiceColumn
		{
			get { return Schema.Columns[27]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string IndustryNumber = @"IndustryNumber";
			public static readonly string CustomerName = @"CustomerName";
			public static readonly string PremisePhone = @"PremisePhone";
			public static readonly string AddressLine1 = @"AddressLine1";
			public static readonly string City = @"City";
			public static readonly string State = @"State";
			public static readonly string Zip = @"Zip";
			public static readonly string CreditGroup = @"CreditGroup";
			public static readonly string CreditScore = @"CreditScore";
			public static readonly string InstallDate = @"InstallDate";
			public static readonly string AccountCellularType = @"AccountCellularType";
			public static readonly string OfficeLocation = @"OfficeLocation";
			public static readonly string MonitorRate = @"MonitorRate";
			public static readonly string CollectedActivation = @"CollectedActivation";
			public static readonly string BillingType = @"BillingType";
			public static readonly string RemainderToBill = @"RemainderToBill";
			public static readonly string TotalAmountPaid = @"TotalAmountPaid";
			public static readonly string LastPaymentDate = @"LastPaymentDate";
			public static readonly string PastDueAmt = @"PastDueAmt";
			public static readonly string CurrentAgePeriod = @"CurrentAgePeriod";
			public static readonly string AgePeriod0to30 = @"AgePeriod0to30";
			public static readonly string AgePeriod31to60 = @"AgePeriod31to60";
			public static readonly string AgePeriod61to90 = @"AgePeriod61to90";
			public static readonly string AgePeriod91Plus = @"AgePeriod91Plus";
			public static readonly string BillingCycle = @"BillingCycle";
			public static readonly string ContractTerm = @"ContractTerm";
			public static readonly string TwoWayVoice = @"TwoWayVoice";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_AccountsInstalled class.
	/// </summary>
	[DataContract]
	public partial class SAE_AccountsInstalledCollection : ActiveList<SAE_AccountsInstalled, SAE_AccountsInstalledCollection>
	{
		public static SAE_AccountsInstalledCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_AccountsInstalledCollection result = new SAE_AccountsInstalledCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_AccountsInstalled item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_AccountsInstalled table.
	/// </summary>
	[DataContract]
	public partial class SAE_AccountsInstalled : ActiveRecord<SAE_AccountsInstalled>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_AccountsInstalled()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_AccountsInstalled", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIndustryAccountID = new TableSchema.TableColumn(schema);
				colvarIndustryAccountID.ColumnName = "IndustryAccountID";
				colvarIndustryAccountID.DataType = DbType.Int32;
				colvarIndustryAccountID.MaxLength = 0;
				colvarIndustryAccountID.AutoIncrement = false;
				colvarIndustryAccountID.IsNullable = true;
				colvarIndustryAccountID.IsPrimaryKey = false;
				colvarIndustryAccountID.IsForeignKey = false;
				colvarIndustryAccountID.IsReadOnly = false;
				colvarIndustryAccountID.DefaultSetting = @"";
				colvarIndustryAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountID);

				TableSchema.TableColumn colvarSalesRepUserID = new TableSchema.TableColumn(schema);
				colvarSalesRepUserID.ColumnName = "SalesRepUserID";
				colvarSalesRepUserID.DataType = DbType.Int32;
				colvarSalesRepUserID.MaxLength = 0;
				colvarSalesRepUserID.AutoIncrement = false;
				colvarSalesRepUserID.IsNullable = true;
				colvarSalesRepUserID.IsPrimaryKey = false;
				colvarSalesRepUserID.IsForeignKey = true;
				colvarSalesRepUserID.IsReadOnly = false;
				colvarSalesRepUserID.DefaultSetting = @"";
				colvarSalesRepUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarSalesRepUserID);

				TableSchema.TableColumn colvarTechnicianUserID = new TableSchema.TableColumn(schema);
				colvarTechnicianUserID.ColumnName = "TechnicianUserID";
				colvarTechnicianUserID.DataType = DbType.Int32;
				colvarTechnicianUserID.MaxLength = 0;
				colvarTechnicianUserID.AutoIncrement = false;
				colvarTechnicianUserID.IsNullable = true;
				colvarTechnicianUserID.IsPrimaryKey = false;
				colvarTechnicianUserID.IsForeignKey = true;
				colvarTechnicianUserID.IsReadOnly = false;
				colvarTechnicianUserID.DefaultSetting = @"";
				colvarTechnicianUserID.ForeignKeyTableName = "RU_Users";
				schema.Columns.Add(colvarTechnicianUserID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = true;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "RU_Season";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarSalesRegionalUserID = new TableSchema.TableColumn(schema);
				colvarSalesRegionalUserID.ColumnName = "SalesRegionalUserID";
				colvarSalesRegionalUserID.DataType = DbType.Int32;
				colvarSalesRegionalUserID.MaxLength = 0;
				colvarSalesRegionalUserID.AutoIncrement = false;
				colvarSalesRegionalUserID.IsNullable = true;
				colvarSalesRegionalUserID.IsPrimaryKey = false;
				colvarSalesRegionalUserID.IsForeignKey = false;
				colvarSalesRegionalUserID.IsReadOnly = false;
				colvarSalesRegionalUserID.DefaultSetting = @"";
				colvarSalesRegionalUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRegionalUserID);

				TableSchema.TableColumn colvarCreditedTeamLocationID = new TableSchema.TableColumn(schema);
				colvarCreditedTeamLocationID.ColumnName = "CreditedTeamLocationID";
				colvarCreditedTeamLocationID.DataType = DbType.Int32;
				colvarCreditedTeamLocationID.MaxLength = 0;
				colvarCreditedTeamLocationID.AutoIncrement = false;
				colvarCreditedTeamLocationID.IsNullable = true;
				colvarCreditedTeamLocationID.IsPrimaryKey = false;
				colvarCreditedTeamLocationID.IsForeignKey = true;
				colvarCreditedTeamLocationID.IsReadOnly = false;
				colvarCreditedTeamLocationID.DefaultSetting = @"";
				colvarCreditedTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarCreditedTeamLocationID);

				TableSchema.TableColumn colvarIndustryNumber = new TableSchema.TableColumn(schema);
				colvarIndustryNumber.ColumnName = "IndustryNumber";
				colvarIndustryNumber.DataType = DbType.String;
				colvarIndustryNumber.MaxLength = 20;
				colvarIndustryNumber.AutoIncrement = false;
				colvarIndustryNumber.IsNullable = true;
				colvarIndustryNumber.IsPrimaryKey = false;
				colvarIndustryNumber.IsForeignKey = false;
				colvarIndustryNumber.IsReadOnly = false;
				colvarIndustryNumber.DefaultSetting = @"";
				colvarIndustryNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryNumber);

				TableSchema.TableColumn colvarCreditScore = new TableSchema.TableColumn(schema);
				colvarCreditScore.ColumnName = "CreditScore";
				colvarCreditScore.DataType = DbType.Int16;
				colvarCreditScore.MaxLength = 0;
				colvarCreditScore.AutoIncrement = false;
				colvarCreditScore.IsNullable = false;
				colvarCreditScore.IsPrimaryKey = false;
				colvarCreditScore.IsForeignKey = false;
				colvarCreditScore.IsReadOnly = false;
				colvarCreditScore.DefaultSetting = @"";
				colvarCreditScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScore);

				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.String;
				colvarStatus.MaxLength = 50;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = false;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);

				TableSchema.TableColumn colvarQualificationDate = new TableSchema.TableColumn(schema);
				colvarQualificationDate.ColumnName = "QualificationDate";
				colvarQualificationDate.DataType = DbType.DateTime;
				colvarQualificationDate.MaxLength = 0;
				colvarQualificationDate.AutoIncrement = false;
				colvarQualificationDate.IsNullable = true;
				colvarQualificationDate.IsPrimaryKey = false;
				colvarQualificationDate.IsForeignKey = false;
				colvarQualificationDate.IsReadOnly = false;
				colvarQualificationDate.DefaultSetting = @"";
				colvarQualificationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQualificationDate);

				TableSchema.TableColumn colvarPreSurveyCompleteDate = new TableSchema.TableColumn(schema);
				colvarPreSurveyCompleteDate.ColumnName = "PreSurveyCompleteDate";
				colvarPreSurveyCompleteDate.DataType = DbType.DateTime;
				colvarPreSurveyCompleteDate.MaxLength = 0;
				colvarPreSurveyCompleteDate.AutoIncrement = false;
				colvarPreSurveyCompleteDate.IsNullable = true;
				colvarPreSurveyCompleteDate.IsPrimaryKey = false;
				colvarPreSurveyCompleteDate.IsForeignKey = false;
				colvarPreSurveyCompleteDate.IsReadOnly = false;
				colvarPreSurveyCompleteDate.DefaultSetting = @"";
				colvarPreSurveyCompleteDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreSurveyCompleteDate);

				TableSchema.TableColumn colvarInstallDate = new TableSchema.TableColumn(schema);
				colvarInstallDate.ColumnName = "InstallDate";
				colvarInstallDate.DataType = DbType.DateTime;
				colvarInstallDate.MaxLength = 0;
				colvarInstallDate.AutoIncrement = false;
				colvarInstallDate.IsNullable = false;
				colvarInstallDate.IsPrimaryKey = false;
				colvarInstallDate.IsForeignKey = false;
				colvarInstallDate.IsReadOnly = false;
				colvarInstallDate.DefaultSetting = @"";
				colvarInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallDate);

				TableSchema.TableColumn colvarIsCellAccount = new TableSchema.TableColumn(schema);
				colvarIsCellAccount.ColumnName = "IsCellAccount";
				colvarIsCellAccount.DataType = DbType.Boolean;
				colvarIsCellAccount.MaxLength = 0;
				colvarIsCellAccount.AutoIncrement = false;
				colvarIsCellAccount.IsNullable = false;
				colvarIsCellAccount.IsPrimaryKey = false;
				colvarIsCellAccount.IsForeignKey = false;
				colvarIsCellAccount.IsReadOnly = false;
				colvarIsCellAccount.DefaultSetting = @"";
				colvarIsCellAccount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCellAccount);

				TableSchema.TableColumn colvarActivationFee = new TableSchema.TableColumn(schema);
				colvarActivationFee.ColumnName = "ActivationFee";
				colvarActivationFee.DataType = DbType.Currency;
				colvarActivationFee.MaxLength = 0;
				colvarActivationFee.AutoIncrement = false;
				colvarActivationFee.IsNullable = false;
				colvarActivationFee.IsPrimaryKey = false;
				colvarActivationFee.IsForeignKey = false;
				colvarActivationFee.IsReadOnly = false;
				colvarActivationFee.DefaultSetting = @"";
				colvarActivationFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivationFee);

				TableSchema.TableColumn colvarContractLength = new TableSchema.TableColumn(schema);
				colvarContractLength.ColumnName = "ContractLength";
				colvarContractLength.DataType = DbType.Int32;
				colvarContractLength.MaxLength = 0;
				colvarContractLength.AutoIncrement = false;
				colvarContractLength.IsNullable = true;
				colvarContractLength.IsPrimaryKey = false;
				colvarContractLength.IsForeignKey = false;
				colvarContractLength.IsReadOnly = false;
				colvarContractLength.DefaultSetting = @"";
				colvarContractLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractLength);

				TableSchema.TableColumn colvarRMR = new TableSchema.TableColumn(schema);
				colvarRMR.ColumnName = "RMR";
				colvarRMR.DataType = DbType.Currency;
				colvarRMR.MaxLength = 0;
				colvarRMR.AutoIncrement = false;
				colvarRMR.IsNullable = true;
				colvarRMR.IsPrimaryKey = false;
				colvarRMR.IsForeignKey = false;
				colvarRMR.IsReadOnly = false;
				colvarRMR.DefaultSetting = @"";
				colvarRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRMR);

				TableSchema.TableColumn colvarHasPlatinumInteractive = new TableSchema.TableColumn(schema);
				colvarHasPlatinumInteractive.ColumnName = "HasPlatinumInteractive";
				colvarHasPlatinumInteractive.DataType = DbType.Boolean;
				colvarHasPlatinumInteractive.MaxLength = 0;
				colvarHasPlatinumInteractive.AutoIncrement = false;
				colvarHasPlatinumInteractive.IsNullable = false;
				colvarHasPlatinumInteractive.IsPrimaryKey = false;
				colvarHasPlatinumInteractive.IsForeignKey = false;
				colvarHasPlatinumInteractive.IsReadOnly = false;
				colvarHasPlatinumInteractive.DefaultSetting = @"((0))";
				colvarHasPlatinumInteractive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasPlatinumInteractive);

				TableSchema.TableColumn colvarIsTwoWayOverCell = new TableSchema.TableColumn(schema);
				colvarIsTwoWayOverCell.ColumnName = "IsTwoWayOverCell";
				colvarIsTwoWayOverCell.DataType = DbType.Boolean;
				colvarIsTwoWayOverCell.MaxLength = 0;
				colvarIsTwoWayOverCell.AutoIncrement = false;
				colvarIsTwoWayOverCell.IsNullable = true;
				colvarIsTwoWayOverCell.IsPrimaryKey = false;
				colvarIsTwoWayOverCell.IsForeignKey = false;
				colvarIsTwoWayOverCell.IsReadOnly = false;
				colvarIsTwoWayOverCell.DefaultSetting = @"((0))";
				colvarIsTwoWayOverCell.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTwoWayOverCell);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_AccountsInstalled",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_AccountsInstalled LoadFrom(SAE_AccountsInstalled item)
		{
			SAE_AccountsInstalled result = new SAE_AccountsInstalled();
			if (item.AccountID != default(int)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public int? IndustryAccountID {
			get { return GetColumnValue<int?>(Columns.IndustryAccountID); }
			set {
				SetColumnValue(Columns.IndustryAccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryAccountID));
			}
		}
		[DataMember]
		public int? SalesRepUserID {
			get { return GetColumnValue<int?>(Columns.SalesRepUserID); }
			set {
				SetColumnValue(Columns.SalesRepUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesRepUserID));
			}
		}
		[DataMember]
		public int? TechnicianUserID {
			get { return GetColumnValue<int?>(Columns.TechnicianUserID); }
			set {
				SetColumnValue(Columns.TechnicianUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechnicianUserID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int? SalesRegionalUserID {
			get { return GetColumnValue<int?>(Columns.SalesRegionalUserID); }
			set {
				SetColumnValue(Columns.SalesRegionalUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesRegionalUserID));
			}
		}
		[DataMember]
		public int? CreditedTeamLocationID {
			get { return GetColumnValue<int?>(Columns.CreditedTeamLocationID); }
			set {
				SetColumnValue(Columns.CreditedTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditedTeamLocationID));
			}
		}
		[DataMember]
		public string IndustryNumber {
			get { return GetColumnValue<string>(Columns.IndustryNumber); }
			set {
				SetColumnValue(Columns.IndustryNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryNumber));
			}
		}
		[DataMember]
		public short CreditScore {
			get { return GetColumnValue<short>(Columns.CreditScore); }
			set {
				SetColumnValue(Columns.CreditScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScore));
			}
		}
		[DataMember]
		public string Status {
			get { return GetColumnValue<string>(Columns.Status); }
			set {
				SetColumnValue(Columns.Status, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Status));
			}
		}
		[DataMember]
		public DateTime? QualificationDate {
			get { return GetColumnValue<DateTime?>(Columns.QualificationDate); }
			set {
				SetColumnValue(Columns.QualificationDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QualificationDate));
			}
		}
		[DataMember]
		public DateTime? PreSurveyCompleteDate {
			get { return GetColumnValue<DateTime?>(Columns.PreSurveyCompleteDate); }
			set {
				SetColumnValue(Columns.PreSurveyCompleteDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PreSurveyCompleteDate));
			}
		}
		[DataMember]
		public DateTime InstallDate {
			get { return GetColumnValue<DateTime>(Columns.InstallDate); }
			set {
				SetColumnValue(Columns.InstallDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InstallDate));
			}
		}
		[DataMember]
		public bool IsCellAccount {
			get { return GetColumnValue<bool>(Columns.IsCellAccount); }
			set {
				SetColumnValue(Columns.IsCellAccount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsCellAccount));
			}
		}
		[DataMember]
		public decimal ActivationFee {
			get { return GetColumnValue<decimal>(Columns.ActivationFee); }
			set {
				SetColumnValue(Columns.ActivationFee, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActivationFee));
			}
		}
		[DataMember]
		public int? ContractLength {
			get { return GetColumnValue<int?>(Columns.ContractLength); }
			set {
				SetColumnValue(Columns.ContractLength, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractLength));
			}
		}
		[DataMember]
		public decimal? RMR {
			get { return GetColumnValue<decimal?>(Columns.RMR); }
			set {
				SetColumnValue(Columns.RMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RMR));
			}
		}
		[DataMember]
		public bool HasPlatinumInteractive {
			get { return GetColumnValue<bool>(Columns.HasPlatinumInteractive); }
			set {
				SetColumnValue(Columns.HasPlatinumInteractive, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.HasPlatinumInteractive));
			}
		}
		[DataMember]
		public bool? IsTwoWayOverCell {
			get { return GetColumnValue<bool?>(Columns.IsTwoWayOverCell); }
			set {
				SetColumnValue(Columns.IsTwoWayOverCell, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsTwoWayOverCell));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Season _Season;
		//Relationship: FK_SAE_AccountsInstalled_RU_Season
		public RU_Season Season
		{
			get
			{
				if(_Season == null) {
					_Season = RU_Season.FetchByID(this.SeasonID);
				}
				return _Season;
			}
			set
			{
				SetColumnValue("SeasonID", value.SeasonID);
				_Season = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_SAE_AccountsInstalled_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		private RU_TeamLocation _CreditedTeamLocation;
		//Relationship: FK_SAE_AccountsInstalled_RU_TeamLocations1
		public RU_TeamLocation CreditedTeamLocation
		{
			get
			{
				if(_CreditedTeamLocation == null) {
					_CreditedTeamLocation = RU_TeamLocation.FetchByID(this.CreditedTeamLocationID);
				}
				return _CreditedTeamLocation;
			}
			set
			{
				SetColumnValue("CreditedTeamLocationID", value.TeamLocationID);
				_CreditedTeamLocation = value;
			}
		}

		private RU_User _SalesRepUser;
		//Relationship: FK_SAE_AccountsInstalled_RU_Users
		public RU_User SalesRepUser
		{
			get
			{
				if(_SalesRepUser == null) {
					_SalesRepUser = RU_User.FetchByID(this.SalesRepUserID);
				}
				return _SalesRepUser;
			}
			set
			{
				SetColumnValue("SalesRepUserID", value.UserID);
				_SalesRepUser = value;
			}
		}

		private RU_User _TechnicianUser;
		//Relationship: FK_SAE_AccountsInstalled_RU_Users1
		public RU_User TechnicianUser
		{
			get
			{
				if(_TechnicianUser == null) {
					_TechnicianUser = RU_User.FetchByID(this.TechnicianUserID);
				}
				return _TechnicianUser;
			}
			set
			{
				SetColumnValue("TechnicianUserID", value.UserID);
				_TechnicianUser = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IndustryAccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SalesRepUserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TechnicianUserIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn SalesRegionalUserIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CreditedTeamLocationIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn IndustryNumberColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn CreditScoreColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn StatusColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn QualificationDateColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn PreSurveyCompleteDateColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn InstallDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn IsCellAccountColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ActivationFeeColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn ContractLengthColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn RMRColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn HasPlatinumInteractiveColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn IsTwoWayOverCellColumn
		{
			get { return Schema.Columns[19]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string IndustryAccountID = @"IndustryAccountID";
			public static readonly string SalesRepUserID = @"SalesRepUserID";
			public static readonly string TechnicianUserID = @"TechnicianUserID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string SalesRegionalUserID = @"SalesRegionalUserID";
			public static readonly string CreditedTeamLocationID = @"CreditedTeamLocationID";
			public static readonly string IndustryNumber = @"IndustryNumber";
			public static readonly string CreditScore = @"CreditScore";
			public static readonly string Status = @"Status";
			public static readonly string QualificationDate = @"QualificationDate";
			public static readonly string PreSurveyCompleteDate = @"PreSurveyCompleteDate";
			public static readonly string InstallDate = @"InstallDate";
			public static readonly string IsCellAccount = @"IsCellAccount";
			public static readonly string ActivationFee = @"ActivationFee";
			public static readonly string ContractLength = @"ContractLength";
			public static readonly string RMR = @"RMR";
			public static readonly string HasPlatinumInteractive = @"HasPlatinumInteractive";
			public static readonly string IsTwoWayOverCell = @"IsTwoWayOverCell";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_CreditsRun class.
	/// </summary>
	[DataContract]
	public partial class SAE_CreditsRunCollection : ActiveList<SAE_CreditsRun, SAE_CreditsRunCollection>
	{
		public static SAE_CreditsRunCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_CreditsRunCollection result = new SAE_CreditsRunCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_CreditsRun item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_CreditsRun table.
	/// </summary>
	[DataContract]
	public partial class SAE_CreditsRun : ActiveRecord<SAE_CreditsRun>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_CreditsRun()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_CreditsRun", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarGPSalesRepID = new TableSchema.TableColumn(schema);
				colvarGPSalesRepID.ColumnName = "GPSalesRepID";
				colvarGPSalesRepID.DataType = DbType.String;
				colvarGPSalesRepID.MaxLength = 15;
				colvarGPSalesRepID.AutoIncrement = false;
				colvarGPSalesRepID.IsNullable = false;
				colvarGPSalesRepID.IsPrimaryKey = false;
				colvarGPSalesRepID.IsForeignKey = false;
				colvarGPSalesRepID.IsReadOnly = false;
				colvarGPSalesRepID.DefaultSetting = @"";
				colvarGPSalesRepID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPSalesRepID);

				TableSchema.TableColumn colvarCreditScore = new TableSchema.TableColumn(schema);
				colvarCreditScore.ColumnName = "CreditScore";
				colvarCreditScore.DataType = DbType.Int16;
				colvarCreditScore.MaxLength = 0;
				colvarCreditScore.AutoIncrement = false;
				colvarCreditScore.IsNullable = false;
				colvarCreditScore.IsPrimaryKey = false;
				colvarCreditScore.IsForeignKey = false;
				colvarCreditScore.IsReadOnly = false;
				colvarCreditScore.DefaultSetting = @"";
				colvarCreditScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScore);

				TableSchema.TableColumn colvarQualificationDate = new TableSchema.TableColumn(schema);
				colvarQualificationDate.ColumnName = "QualificationDate";
				colvarQualificationDate.DataType = DbType.DateTime;
				colvarQualificationDate.MaxLength = 0;
				colvarQualificationDate.AutoIncrement = false;
				colvarQualificationDate.IsNullable = false;
				colvarQualificationDate.IsPrimaryKey = false;
				colvarQualificationDate.IsForeignKey = false;
				colvarQualificationDate.IsReadOnly = false;
				colvarQualificationDate.DefaultSetting = @"";
				colvarQualificationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQualificationDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_CreditsRun",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public string GPSalesRepID {
			get { return GetColumnValue<string>(Columns.GPSalesRepID); }
			set {
				SetColumnValue(Columns.GPSalesRepID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPSalesRepID));
			}
		}
		[DataMember]
		public short CreditScore {
			get { return GetColumnValue<short>(Columns.CreditScore); }
			set {
				SetColumnValue(Columns.CreditScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScore));
			}
		}
		[DataMember]
		public DateTime QualificationDate {
			get { return GetColumnValue<DateTime>(Columns.QualificationDate); }
			set {
				SetColumnValue(Columns.QualificationDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QualificationDate));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_SAE_CreditsRun_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return GPSalesRepID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn GPSalesRepIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CreditScoreColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn QualificationDateColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string GPSalesRepID = @"GPSalesRepID";
			public static readonly string CreditScore = @"CreditScore";
			public static readonly string QualificationDate = @"QualificationDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_Date class.
	/// </summary>
	[DataContract]
	public partial class SAE_DateCollection : ActiveList<SAE_Date, SAE_DateCollection>
	{
		public static SAE_DateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_DateCollection result = new SAE_DateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_Date item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_Dates table.
	/// </summary>
	[DataContract]
	public partial class SAE_Date : ActiveRecord<SAE_Date>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_Date()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_Dates", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarDATE_ID = new TableSchema.TableColumn(schema);
				colvarDATE_ID.ColumnName = "DATE_ID";
				colvarDATE_ID.DataType = DbType.Int32;
				colvarDATE_ID.MaxLength = 0;
				colvarDATE_ID.AutoIncrement = false;
				colvarDATE_ID.IsNullable = false;
				colvarDATE_ID.IsPrimaryKey = true;
				colvarDATE_ID.IsForeignKey = false;
				colvarDATE_ID.IsReadOnly = false;
				colvarDATE_ID.DefaultSetting = @"";
				colvarDATE_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDATE_ID);

				TableSchema.TableColumn colvarDATEX = new TableSchema.TableColumn(schema);
				colvarDATEX.ColumnName = "DATE";
				colvarDATEX.DataType = DbType.DateTime;
				colvarDATEX.MaxLength = 0;
				colvarDATEX.AutoIncrement = false;
				colvarDATEX.IsNullable = false;
				colvarDATEX.IsPrimaryKey = false;
				colvarDATEX.IsForeignKey = false;
				colvarDATEX.IsReadOnly = false;
				colvarDATEX.DefaultSetting = @"";
				colvarDATEX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDATEX);

				TableSchema.TableColumn colvarNEXT_DAY_DATE = new TableSchema.TableColumn(schema);
				colvarNEXT_DAY_DATE.ColumnName = "NEXT_DAY_DATE";
				colvarNEXT_DAY_DATE.DataType = DbType.DateTime;
				colvarNEXT_DAY_DATE.MaxLength = 0;
				colvarNEXT_DAY_DATE.AutoIncrement = false;
				colvarNEXT_DAY_DATE.IsNullable = false;
				colvarNEXT_DAY_DATE.IsPrimaryKey = false;
				colvarNEXT_DAY_DATE.IsForeignKey = false;
				colvarNEXT_DAY_DATE.IsReadOnly = false;
				colvarNEXT_DAY_DATE.DefaultSetting = @"";
				colvarNEXT_DAY_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNEXT_DAY_DATE);

				TableSchema.TableColumn colvarYEAR = new TableSchema.TableColumn(schema);
				colvarYEAR.ColumnName = "YEAR";
				colvarYEAR.DataType = DbType.Int16;
				colvarYEAR.MaxLength = 0;
				colvarYEAR.AutoIncrement = false;
				colvarYEAR.IsNullable = false;
				colvarYEAR.IsPrimaryKey = false;
				colvarYEAR.IsForeignKey = false;
				colvarYEAR.IsReadOnly = false;
				colvarYEAR.DefaultSetting = @"";
				colvarYEAR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYEAR);

				TableSchema.TableColumn colvarYEAR_QUARTER = new TableSchema.TableColumn(schema);
				colvarYEAR_QUARTER.ColumnName = "YEAR_QUARTER";
				colvarYEAR_QUARTER.DataType = DbType.Int32;
				colvarYEAR_QUARTER.MaxLength = 0;
				colvarYEAR_QUARTER.AutoIncrement = false;
				colvarYEAR_QUARTER.IsNullable = false;
				colvarYEAR_QUARTER.IsPrimaryKey = false;
				colvarYEAR_QUARTER.IsForeignKey = false;
				colvarYEAR_QUARTER.IsReadOnly = false;
				colvarYEAR_QUARTER.DefaultSetting = @"";
				colvarYEAR_QUARTER.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYEAR_QUARTER);

				TableSchema.TableColumn colvarYEAR_MONTH = new TableSchema.TableColumn(schema);
				colvarYEAR_MONTH.ColumnName = "YEAR_MONTH";
				colvarYEAR_MONTH.DataType = DbType.Int32;
				colvarYEAR_MONTH.MaxLength = 0;
				colvarYEAR_MONTH.AutoIncrement = false;
				colvarYEAR_MONTH.IsNullable = false;
				colvarYEAR_MONTH.IsPrimaryKey = false;
				colvarYEAR_MONTH.IsForeignKey = false;
				colvarYEAR_MONTH.IsReadOnly = false;
				colvarYEAR_MONTH.DefaultSetting = @"";
				colvarYEAR_MONTH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYEAR_MONTH);

				TableSchema.TableColumn colvarYEAR_DAY_OF_YEAR = new TableSchema.TableColumn(schema);
				colvarYEAR_DAY_OF_YEAR.ColumnName = "YEAR_DAY_OF_YEAR";
				colvarYEAR_DAY_OF_YEAR.DataType = DbType.Int32;
				colvarYEAR_DAY_OF_YEAR.MaxLength = 0;
				colvarYEAR_DAY_OF_YEAR.AutoIncrement = false;
				colvarYEAR_DAY_OF_YEAR.IsNullable = false;
				colvarYEAR_DAY_OF_YEAR.IsPrimaryKey = false;
				colvarYEAR_DAY_OF_YEAR.IsForeignKey = false;
				colvarYEAR_DAY_OF_YEAR.IsReadOnly = false;
				colvarYEAR_DAY_OF_YEAR.DefaultSetting = @"";
				colvarYEAR_DAY_OF_YEAR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYEAR_DAY_OF_YEAR);

				TableSchema.TableColumn colvarQUARTER = new TableSchema.TableColumn(schema);
				colvarQUARTER.ColumnName = "QUARTER";
				colvarQUARTER.DataType = DbType.Byte;
				colvarQUARTER.MaxLength = 0;
				colvarQUARTER.AutoIncrement = false;
				colvarQUARTER.IsNullable = false;
				colvarQUARTER.IsPrimaryKey = false;
				colvarQUARTER.IsForeignKey = false;
				colvarQUARTER.IsReadOnly = false;
				colvarQUARTER.DefaultSetting = @"";
				colvarQUARTER.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQUARTER);

				TableSchema.TableColumn colvarMONTH = new TableSchema.TableColumn(schema);
				colvarMONTH.ColumnName = "MONTH";
				colvarMONTH.DataType = DbType.Byte;
				colvarMONTH.MaxLength = 0;
				colvarMONTH.AutoIncrement = false;
				colvarMONTH.IsNullable = false;
				colvarMONTH.IsPrimaryKey = false;
				colvarMONTH.IsForeignKey = false;
				colvarMONTH.IsReadOnly = false;
				colvarMONTH.DefaultSetting = @"";
				colvarMONTH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMONTH);

				TableSchema.TableColumn colvarDAY_OF_YEAR = new TableSchema.TableColumn(schema);
				colvarDAY_OF_YEAR.ColumnName = "DAY_OF_YEAR";
				colvarDAY_OF_YEAR.DataType = DbType.Int16;
				colvarDAY_OF_YEAR.MaxLength = 0;
				colvarDAY_OF_YEAR.AutoIncrement = false;
				colvarDAY_OF_YEAR.IsNullable = false;
				colvarDAY_OF_YEAR.IsPrimaryKey = false;
				colvarDAY_OF_YEAR.IsForeignKey = false;
				colvarDAY_OF_YEAR.IsReadOnly = false;
				colvarDAY_OF_YEAR.DefaultSetting = @"";
				colvarDAY_OF_YEAR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDAY_OF_YEAR);

				TableSchema.TableColumn colvarDAY_OF_MONTH = new TableSchema.TableColumn(schema);
				colvarDAY_OF_MONTH.ColumnName = "DAY_OF_MONTH";
				colvarDAY_OF_MONTH.DataType = DbType.Int16;
				colvarDAY_OF_MONTH.MaxLength = 0;
				colvarDAY_OF_MONTH.AutoIncrement = false;
				colvarDAY_OF_MONTH.IsNullable = false;
				colvarDAY_OF_MONTH.IsPrimaryKey = false;
				colvarDAY_OF_MONTH.IsForeignKey = false;
				colvarDAY_OF_MONTH.IsReadOnly = false;
				colvarDAY_OF_MONTH.DefaultSetting = @"";
				colvarDAY_OF_MONTH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDAY_OF_MONTH);

				TableSchema.TableColumn colvarDAY_OF_WEEK = new TableSchema.TableColumn(schema);
				colvarDAY_OF_WEEK.ColumnName = "DAY_OF_WEEK";
				colvarDAY_OF_WEEK.DataType = DbType.Byte;
				colvarDAY_OF_WEEK.MaxLength = 0;
				colvarDAY_OF_WEEK.AutoIncrement = false;
				colvarDAY_OF_WEEK.IsNullable = false;
				colvarDAY_OF_WEEK.IsPrimaryKey = false;
				colvarDAY_OF_WEEK.IsForeignKey = false;
				colvarDAY_OF_WEEK.IsReadOnly = false;
				colvarDAY_OF_WEEK.DefaultSetting = @"";
				colvarDAY_OF_WEEK.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDAY_OF_WEEK);

				TableSchema.TableColumn colvarYEAR_NAME = new TableSchema.TableColumn(schema);
				colvarYEAR_NAME.ColumnName = "YEAR_NAME";
				colvarYEAR_NAME.DataType = DbType.AnsiString;
				colvarYEAR_NAME.MaxLength = 4;
				colvarYEAR_NAME.AutoIncrement = false;
				colvarYEAR_NAME.IsNullable = false;
				colvarYEAR_NAME.IsPrimaryKey = false;
				colvarYEAR_NAME.IsForeignKey = false;
				colvarYEAR_NAME.IsReadOnly = false;
				colvarYEAR_NAME.DefaultSetting = @"";
				colvarYEAR_NAME.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYEAR_NAME);

				TableSchema.TableColumn colvarYEAR_QUARTER_NAME = new TableSchema.TableColumn(schema);
				colvarYEAR_QUARTER_NAME.ColumnName = "YEAR_QUARTER_NAME";
				colvarYEAR_QUARTER_NAME.DataType = DbType.AnsiString;
				colvarYEAR_QUARTER_NAME.MaxLength = 7;
				colvarYEAR_QUARTER_NAME.AutoIncrement = false;
				colvarYEAR_QUARTER_NAME.IsNullable = false;
				colvarYEAR_QUARTER_NAME.IsPrimaryKey = false;
				colvarYEAR_QUARTER_NAME.IsForeignKey = false;
				colvarYEAR_QUARTER_NAME.IsReadOnly = false;
				colvarYEAR_QUARTER_NAME.DefaultSetting = @"";
				colvarYEAR_QUARTER_NAME.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYEAR_QUARTER_NAME);

				TableSchema.TableColumn colvarYEAR_MONTH_NAME = new TableSchema.TableColumn(schema);
				colvarYEAR_MONTH_NAME.ColumnName = "YEAR_MONTH_NAME";
				colvarYEAR_MONTH_NAME.DataType = DbType.AnsiString;
				colvarYEAR_MONTH_NAME.MaxLength = 8;
				colvarYEAR_MONTH_NAME.AutoIncrement = false;
				colvarYEAR_MONTH_NAME.IsNullable = false;
				colvarYEAR_MONTH_NAME.IsPrimaryKey = false;
				colvarYEAR_MONTH_NAME.IsForeignKey = false;
				colvarYEAR_MONTH_NAME.IsReadOnly = false;
				colvarYEAR_MONTH_NAME.DefaultSetting = @"";
				colvarYEAR_MONTH_NAME.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYEAR_MONTH_NAME);

				TableSchema.TableColumn colvarYEAR_MONTH_NAME_LONG = new TableSchema.TableColumn(schema);
				colvarYEAR_MONTH_NAME_LONG.ColumnName = "YEAR_MONTH_NAME_LONG";
				colvarYEAR_MONTH_NAME_LONG.DataType = DbType.AnsiString;
				colvarYEAR_MONTH_NAME_LONG.MaxLength = 14;
				colvarYEAR_MONTH_NAME_LONG.AutoIncrement = false;
				colvarYEAR_MONTH_NAME_LONG.IsNullable = false;
				colvarYEAR_MONTH_NAME_LONG.IsPrimaryKey = false;
				colvarYEAR_MONTH_NAME_LONG.IsForeignKey = false;
				colvarYEAR_MONTH_NAME_LONG.IsReadOnly = false;
				colvarYEAR_MONTH_NAME_LONG.DefaultSetting = @"";
				colvarYEAR_MONTH_NAME_LONG.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYEAR_MONTH_NAME_LONG);

				TableSchema.TableColumn colvarQUARTER_NAME = new TableSchema.TableColumn(schema);
				colvarQUARTER_NAME.ColumnName = "QUARTER_NAME";
				colvarQUARTER_NAME.DataType = DbType.AnsiString;
				colvarQUARTER_NAME.MaxLength = 2;
				colvarQUARTER_NAME.AutoIncrement = false;
				colvarQUARTER_NAME.IsNullable = false;
				colvarQUARTER_NAME.IsPrimaryKey = false;
				colvarQUARTER_NAME.IsForeignKey = false;
				colvarQUARTER_NAME.IsReadOnly = false;
				colvarQUARTER_NAME.DefaultSetting = @"";
				colvarQUARTER_NAME.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQUARTER_NAME);

				TableSchema.TableColumn colvarMONTH_NAME = new TableSchema.TableColumn(schema);
				colvarMONTH_NAME.ColumnName = "MONTH_NAME";
				colvarMONTH_NAME.DataType = DbType.AnsiString;
				colvarMONTH_NAME.MaxLength = 3;
				colvarMONTH_NAME.AutoIncrement = false;
				colvarMONTH_NAME.IsNullable = false;
				colvarMONTH_NAME.IsPrimaryKey = false;
				colvarMONTH_NAME.IsForeignKey = false;
				colvarMONTH_NAME.IsReadOnly = false;
				colvarMONTH_NAME.DefaultSetting = @"";
				colvarMONTH_NAME.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMONTH_NAME);

				TableSchema.TableColumn colvarMONTH_NAME_LONG = new TableSchema.TableColumn(schema);
				colvarMONTH_NAME_LONG.ColumnName = "MONTH_NAME_LONG";
				colvarMONTH_NAME_LONG.DataType = DbType.AnsiString;
				colvarMONTH_NAME_LONG.MaxLength = 9;
				colvarMONTH_NAME_LONG.AutoIncrement = false;
				colvarMONTH_NAME_LONG.IsNullable = false;
				colvarMONTH_NAME_LONG.IsPrimaryKey = false;
				colvarMONTH_NAME_LONG.IsForeignKey = false;
				colvarMONTH_NAME_LONG.IsReadOnly = false;
				colvarMONTH_NAME_LONG.DefaultSetting = @"";
				colvarMONTH_NAME_LONG.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMONTH_NAME_LONG);

				TableSchema.TableColumn colvarWEEKDAY_NAME = new TableSchema.TableColumn(schema);
				colvarWEEKDAY_NAME.ColumnName = "WEEKDAY_NAME";
				colvarWEEKDAY_NAME.DataType = DbType.AnsiString;
				colvarWEEKDAY_NAME.MaxLength = 3;
				colvarWEEKDAY_NAME.AutoIncrement = false;
				colvarWEEKDAY_NAME.IsNullable = false;
				colvarWEEKDAY_NAME.IsPrimaryKey = false;
				colvarWEEKDAY_NAME.IsForeignKey = false;
				colvarWEEKDAY_NAME.IsReadOnly = false;
				colvarWEEKDAY_NAME.DefaultSetting = @"";
				colvarWEEKDAY_NAME.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWEEKDAY_NAME);

				TableSchema.TableColumn colvarWEEKDAY_NAME_LONG = new TableSchema.TableColumn(schema);
				colvarWEEKDAY_NAME_LONG.ColumnName = "WEEKDAY_NAME_LONG";
				colvarWEEKDAY_NAME_LONG.DataType = DbType.AnsiString;
				colvarWEEKDAY_NAME_LONG.MaxLength = 9;
				colvarWEEKDAY_NAME_LONG.AutoIncrement = false;
				colvarWEEKDAY_NAME_LONG.IsNullable = false;
				colvarWEEKDAY_NAME_LONG.IsPrimaryKey = false;
				colvarWEEKDAY_NAME_LONG.IsForeignKey = false;
				colvarWEEKDAY_NAME_LONG.IsReadOnly = false;
				colvarWEEKDAY_NAME_LONG.DefaultSetting = @"";
				colvarWEEKDAY_NAME_LONG.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWEEKDAY_NAME_LONG);

				TableSchema.TableColumn colvarSTART_OF_YEAR_DATE = new TableSchema.TableColumn(schema);
				colvarSTART_OF_YEAR_DATE.ColumnName = "START_OF_YEAR_DATE";
				colvarSTART_OF_YEAR_DATE.DataType = DbType.DateTime;
				colvarSTART_OF_YEAR_DATE.MaxLength = 0;
				colvarSTART_OF_YEAR_DATE.AutoIncrement = false;
				colvarSTART_OF_YEAR_DATE.IsNullable = false;
				colvarSTART_OF_YEAR_DATE.IsPrimaryKey = false;
				colvarSTART_OF_YEAR_DATE.IsForeignKey = false;
				colvarSTART_OF_YEAR_DATE.IsReadOnly = false;
				colvarSTART_OF_YEAR_DATE.DefaultSetting = @"";
				colvarSTART_OF_YEAR_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTART_OF_YEAR_DATE);

				TableSchema.TableColumn colvarEND_OF_YEAR_DATE = new TableSchema.TableColumn(schema);
				colvarEND_OF_YEAR_DATE.ColumnName = "END_OF_YEAR_DATE";
				colvarEND_OF_YEAR_DATE.DataType = DbType.DateTime;
				colvarEND_OF_YEAR_DATE.MaxLength = 0;
				colvarEND_OF_YEAR_DATE.AutoIncrement = false;
				colvarEND_OF_YEAR_DATE.IsNullable = false;
				colvarEND_OF_YEAR_DATE.IsPrimaryKey = false;
				colvarEND_OF_YEAR_DATE.IsForeignKey = false;
				colvarEND_OF_YEAR_DATE.IsReadOnly = false;
				colvarEND_OF_YEAR_DATE.DefaultSetting = @"";
				colvarEND_OF_YEAR_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEND_OF_YEAR_DATE);

				TableSchema.TableColumn colvarSTART_OF_QUARTER_DATE = new TableSchema.TableColumn(schema);
				colvarSTART_OF_QUARTER_DATE.ColumnName = "START_OF_QUARTER_DATE";
				colvarSTART_OF_QUARTER_DATE.DataType = DbType.DateTime;
				colvarSTART_OF_QUARTER_DATE.MaxLength = 0;
				colvarSTART_OF_QUARTER_DATE.AutoIncrement = false;
				colvarSTART_OF_QUARTER_DATE.IsNullable = false;
				colvarSTART_OF_QUARTER_DATE.IsPrimaryKey = false;
				colvarSTART_OF_QUARTER_DATE.IsForeignKey = false;
				colvarSTART_OF_QUARTER_DATE.IsReadOnly = false;
				colvarSTART_OF_QUARTER_DATE.DefaultSetting = @"";
				colvarSTART_OF_QUARTER_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTART_OF_QUARTER_DATE);

				TableSchema.TableColumn colvarEND_OF_QUARTER_DATE = new TableSchema.TableColumn(schema);
				colvarEND_OF_QUARTER_DATE.ColumnName = "END_OF_QUARTER_DATE";
				colvarEND_OF_QUARTER_DATE.DataType = DbType.DateTime;
				colvarEND_OF_QUARTER_DATE.MaxLength = 0;
				colvarEND_OF_QUARTER_DATE.AutoIncrement = false;
				colvarEND_OF_QUARTER_DATE.IsNullable = false;
				colvarEND_OF_QUARTER_DATE.IsPrimaryKey = false;
				colvarEND_OF_QUARTER_DATE.IsForeignKey = false;
				colvarEND_OF_QUARTER_DATE.IsReadOnly = false;
				colvarEND_OF_QUARTER_DATE.DefaultSetting = @"";
				colvarEND_OF_QUARTER_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEND_OF_QUARTER_DATE);

				TableSchema.TableColumn colvarSTART_OF_MONTH_DATE = new TableSchema.TableColumn(schema);
				colvarSTART_OF_MONTH_DATE.ColumnName = "START_OF_MONTH_DATE";
				colvarSTART_OF_MONTH_DATE.DataType = DbType.DateTime;
				colvarSTART_OF_MONTH_DATE.MaxLength = 0;
				colvarSTART_OF_MONTH_DATE.AutoIncrement = false;
				colvarSTART_OF_MONTH_DATE.IsNullable = false;
				colvarSTART_OF_MONTH_DATE.IsPrimaryKey = false;
				colvarSTART_OF_MONTH_DATE.IsForeignKey = false;
				colvarSTART_OF_MONTH_DATE.IsReadOnly = false;
				colvarSTART_OF_MONTH_DATE.DefaultSetting = @"";
				colvarSTART_OF_MONTH_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTART_OF_MONTH_DATE);

				TableSchema.TableColumn colvarEND_OF_MONTH_DATE = new TableSchema.TableColumn(schema);
				colvarEND_OF_MONTH_DATE.ColumnName = "END_OF_MONTH_DATE";
				colvarEND_OF_MONTH_DATE.DataType = DbType.DateTime;
				colvarEND_OF_MONTH_DATE.MaxLength = 0;
				colvarEND_OF_MONTH_DATE.AutoIncrement = false;
				colvarEND_OF_MONTH_DATE.IsNullable = false;
				colvarEND_OF_MONTH_DATE.IsPrimaryKey = false;
				colvarEND_OF_MONTH_DATE.IsForeignKey = false;
				colvarEND_OF_MONTH_DATE.IsReadOnly = false;
				colvarEND_OF_MONTH_DATE.DefaultSetting = @"";
				colvarEND_OF_MONTH_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEND_OF_MONTH_DATE);

				TableSchema.TableColumn colvarSTART_OF_WEEK_STARTING_SUN_DATE = new TableSchema.TableColumn(schema);
				colvarSTART_OF_WEEK_STARTING_SUN_DATE.ColumnName = "START_OF_WEEK_STARTING_SUN_DATE";
				colvarSTART_OF_WEEK_STARTING_SUN_DATE.DataType = DbType.DateTime;
				colvarSTART_OF_WEEK_STARTING_SUN_DATE.MaxLength = 0;
				colvarSTART_OF_WEEK_STARTING_SUN_DATE.AutoIncrement = false;
				colvarSTART_OF_WEEK_STARTING_SUN_DATE.IsNullable = false;
				colvarSTART_OF_WEEK_STARTING_SUN_DATE.IsPrimaryKey = false;
				colvarSTART_OF_WEEK_STARTING_SUN_DATE.IsForeignKey = false;
				colvarSTART_OF_WEEK_STARTING_SUN_DATE.IsReadOnly = false;
				colvarSTART_OF_WEEK_STARTING_SUN_DATE.DefaultSetting = @"";
				colvarSTART_OF_WEEK_STARTING_SUN_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTART_OF_WEEK_STARTING_SUN_DATE);

				TableSchema.TableColumn colvarEND_OF_WEEK_STARTING_SUN_DATE = new TableSchema.TableColumn(schema);
				colvarEND_OF_WEEK_STARTING_SUN_DATE.ColumnName = "END_OF_WEEK_STARTING_SUN_DATE";
				colvarEND_OF_WEEK_STARTING_SUN_DATE.DataType = DbType.DateTime;
				colvarEND_OF_WEEK_STARTING_SUN_DATE.MaxLength = 0;
				colvarEND_OF_WEEK_STARTING_SUN_DATE.AutoIncrement = false;
				colvarEND_OF_WEEK_STARTING_SUN_DATE.IsNullable = false;
				colvarEND_OF_WEEK_STARTING_SUN_DATE.IsPrimaryKey = false;
				colvarEND_OF_WEEK_STARTING_SUN_DATE.IsForeignKey = false;
				colvarEND_OF_WEEK_STARTING_SUN_DATE.IsReadOnly = false;
				colvarEND_OF_WEEK_STARTING_SUN_DATE.DefaultSetting = @"";
				colvarEND_OF_WEEK_STARTING_SUN_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEND_OF_WEEK_STARTING_SUN_DATE);

				TableSchema.TableColumn colvarSTART_OF_WEEK_STARTING_MON_DATE = new TableSchema.TableColumn(schema);
				colvarSTART_OF_WEEK_STARTING_MON_DATE.ColumnName = "START_OF_WEEK_STARTING_MON_DATE";
				colvarSTART_OF_WEEK_STARTING_MON_DATE.DataType = DbType.DateTime;
				colvarSTART_OF_WEEK_STARTING_MON_DATE.MaxLength = 0;
				colvarSTART_OF_WEEK_STARTING_MON_DATE.AutoIncrement = false;
				colvarSTART_OF_WEEK_STARTING_MON_DATE.IsNullable = false;
				colvarSTART_OF_WEEK_STARTING_MON_DATE.IsPrimaryKey = false;
				colvarSTART_OF_WEEK_STARTING_MON_DATE.IsForeignKey = false;
				colvarSTART_OF_WEEK_STARTING_MON_DATE.IsReadOnly = false;
				colvarSTART_OF_WEEK_STARTING_MON_DATE.DefaultSetting = @"";
				colvarSTART_OF_WEEK_STARTING_MON_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTART_OF_WEEK_STARTING_MON_DATE);

				TableSchema.TableColumn colvarEND_OF_WEEK_STARTING_MON_DATE = new TableSchema.TableColumn(schema);
				colvarEND_OF_WEEK_STARTING_MON_DATE.ColumnName = "END_OF_WEEK_STARTING_MON_DATE";
				colvarEND_OF_WEEK_STARTING_MON_DATE.DataType = DbType.DateTime;
				colvarEND_OF_WEEK_STARTING_MON_DATE.MaxLength = 0;
				colvarEND_OF_WEEK_STARTING_MON_DATE.AutoIncrement = false;
				colvarEND_OF_WEEK_STARTING_MON_DATE.IsNullable = false;
				colvarEND_OF_WEEK_STARTING_MON_DATE.IsPrimaryKey = false;
				colvarEND_OF_WEEK_STARTING_MON_DATE.IsForeignKey = false;
				colvarEND_OF_WEEK_STARTING_MON_DATE.IsReadOnly = false;
				colvarEND_OF_WEEK_STARTING_MON_DATE.DefaultSetting = @"";
				colvarEND_OF_WEEK_STARTING_MON_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEND_OF_WEEK_STARTING_MON_DATE);

				TableSchema.TableColumn colvarSTART_OF_WEEK_STARTING_TUE_DATE = new TableSchema.TableColumn(schema);
				colvarSTART_OF_WEEK_STARTING_TUE_DATE.ColumnName = "START_OF_WEEK_STARTING_TUE_DATE";
				colvarSTART_OF_WEEK_STARTING_TUE_DATE.DataType = DbType.DateTime;
				colvarSTART_OF_WEEK_STARTING_TUE_DATE.MaxLength = 0;
				colvarSTART_OF_WEEK_STARTING_TUE_DATE.AutoIncrement = false;
				colvarSTART_OF_WEEK_STARTING_TUE_DATE.IsNullable = false;
				colvarSTART_OF_WEEK_STARTING_TUE_DATE.IsPrimaryKey = false;
				colvarSTART_OF_WEEK_STARTING_TUE_DATE.IsForeignKey = false;
				colvarSTART_OF_WEEK_STARTING_TUE_DATE.IsReadOnly = false;
				colvarSTART_OF_WEEK_STARTING_TUE_DATE.DefaultSetting = @"";
				colvarSTART_OF_WEEK_STARTING_TUE_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTART_OF_WEEK_STARTING_TUE_DATE);

				TableSchema.TableColumn colvarEND_OF_WEEK_STARTING_TUE_DATE = new TableSchema.TableColumn(schema);
				colvarEND_OF_WEEK_STARTING_TUE_DATE.ColumnName = "END_OF_WEEK_STARTING_TUE_DATE";
				colvarEND_OF_WEEK_STARTING_TUE_DATE.DataType = DbType.DateTime;
				colvarEND_OF_WEEK_STARTING_TUE_DATE.MaxLength = 0;
				colvarEND_OF_WEEK_STARTING_TUE_DATE.AutoIncrement = false;
				colvarEND_OF_WEEK_STARTING_TUE_DATE.IsNullable = false;
				colvarEND_OF_WEEK_STARTING_TUE_DATE.IsPrimaryKey = false;
				colvarEND_OF_WEEK_STARTING_TUE_DATE.IsForeignKey = false;
				colvarEND_OF_WEEK_STARTING_TUE_DATE.IsReadOnly = false;
				colvarEND_OF_WEEK_STARTING_TUE_DATE.DefaultSetting = @"";
				colvarEND_OF_WEEK_STARTING_TUE_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEND_OF_WEEK_STARTING_TUE_DATE);

				TableSchema.TableColumn colvarSTART_OF_WEEK_STARTING_WED_DATE = new TableSchema.TableColumn(schema);
				colvarSTART_OF_WEEK_STARTING_WED_DATE.ColumnName = "START_OF_WEEK_STARTING_WED_DATE";
				colvarSTART_OF_WEEK_STARTING_WED_DATE.DataType = DbType.DateTime;
				colvarSTART_OF_WEEK_STARTING_WED_DATE.MaxLength = 0;
				colvarSTART_OF_WEEK_STARTING_WED_DATE.AutoIncrement = false;
				colvarSTART_OF_WEEK_STARTING_WED_DATE.IsNullable = false;
				colvarSTART_OF_WEEK_STARTING_WED_DATE.IsPrimaryKey = false;
				colvarSTART_OF_WEEK_STARTING_WED_DATE.IsForeignKey = false;
				colvarSTART_OF_WEEK_STARTING_WED_DATE.IsReadOnly = false;
				colvarSTART_OF_WEEK_STARTING_WED_DATE.DefaultSetting = @"";
				colvarSTART_OF_WEEK_STARTING_WED_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTART_OF_WEEK_STARTING_WED_DATE);

				TableSchema.TableColumn colvarEND_OF_WEEK_STARTING_WED_DATE = new TableSchema.TableColumn(schema);
				colvarEND_OF_WEEK_STARTING_WED_DATE.ColumnName = "END_OF_WEEK_STARTING_WED_DATE";
				colvarEND_OF_WEEK_STARTING_WED_DATE.DataType = DbType.DateTime;
				colvarEND_OF_WEEK_STARTING_WED_DATE.MaxLength = 0;
				colvarEND_OF_WEEK_STARTING_WED_DATE.AutoIncrement = false;
				colvarEND_OF_WEEK_STARTING_WED_DATE.IsNullable = false;
				colvarEND_OF_WEEK_STARTING_WED_DATE.IsPrimaryKey = false;
				colvarEND_OF_WEEK_STARTING_WED_DATE.IsForeignKey = false;
				colvarEND_OF_WEEK_STARTING_WED_DATE.IsReadOnly = false;
				colvarEND_OF_WEEK_STARTING_WED_DATE.DefaultSetting = @"";
				colvarEND_OF_WEEK_STARTING_WED_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEND_OF_WEEK_STARTING_WED_DATE);

				TableSchema.TableColumn colvarSTART_OF_WEEK_STARTING_THU_DATE = new TableSchema.TableColumn(schema);
				colvarSTART_OF_WEEK_STARTING_THU_DATE.ColumnName = "START_OF_WEEK_STARTING_THU_DATE";
				colvarSTART_OF_WEEK_STARTING_THU_DATE.DataType = DbType.DateTime;
				colvarSTART_OF_WEEK_STARTING_THU_DATE.MaxLength = 0;
				colvarSTART_OF_WEEK_STARTING_THU_DATE.AutoIncrement = false;
				colvarSTART_OF_WEEK_STARTING_THU_DATE.IsNullable = false;
				colvarSTART_OF_WEEK_STARTING_THU_DATE.IsPrimaryKey = false;
				colvarSTART_OF_WEEK_STARTING_THU_DATE.IsForeignKey = false;
				colvarSTART_OF_WEEK_STARTING_THU_DATE.IsReadOnly = false;
				colvarSTART_OF_WEEK_STARTING_THU_DATE.DefaultSetting = @"";
				colvarSTART_OF_WEEK_STARTING_THU_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTART_OF_WEEK_STARTING_THU_DATE);

				TableSchema.TableColumn colvarEND_OF_WEEK_STARTING_THU_DATE = new TableSchema.TableColumn(schema);
				colvarEND_OF_WEEK_STARTING_THU_DATE.ColumnName = "END_OF_WEEK_STARTING_THU_DATE";
				colvarEND_OF_WEEK_STARTING_THU_DATE.DataType = DbType.DateTime;
				colvarEND_OF_WEEK_STARTING_THU_DATE.MaxLength = 0;
				colvarEND_OF_WEEK_STARTING_THU_DATE.AutoIncrement = false;
				colvarEND_OF_WEEK_STARTING_THU_DATE.IsNullable = false;
				colvarEND_OF_WEEK_STARTING_THU_DATE.IsPrimaryKey = false;
				colvarEND_OF_WEEK_STARTING_THU_DATE.IsForeignKey = false;
				colvarEND_OF_WEEK_STARTING_THU_DATE.IsReadOnly = false;
				colvarEND_OF_WEEK_STARTING_THU_DATE.DefaultSetting = @"";
				colvarEND_OF_WEEK_STARTING_THU_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEND_OF_WEEK_STARTING_THU_DATE);

				TableSchema.TableColumn colvarSTART_OF_WEEK_STARTING_FRI_DATE = new TableSchema.TableColumn(schema);
				colvarSTART_OF_WEEK_STARTING_FRI_DATE.ColumnName = "START_OF_WEEK_STARTING_FRI_DATE";
				colvarSTART_OF_WEEK_STARTING_FRI_DATE.DataType = DbType.DateTime;
				colvarSTART_OF_WEEK_STARTING_FRI_DATE.MaxLength = 0;
				colvarSTART_OF_WEEK_STARTING_FRI_DATE.AutoIncrement = false;
				colvarSTART_OF_WEEK_STARTING_FRI_DATE.IsNullable = false;
				colvarSTART_OF_WEEK_STARTING_FRI_DATE.IsPrimaryKey = false;
				colvarSTART_OF_WEEK_STARTING_FRI_DATE.IsForeignKey = false;
				colvarSTART_OF_WEEK_STARTING_FRI_DATE.IsReadOnly = false;
				colvarSTART_OF_WEEK_STARTING_FRI_DATE.DefaultSetting = @"";
				colvarSTART_OF_WEEK_STARTING_FRI_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTART_OF_WEEK_STARTING_FRI_DATE);

				TableSchema.TableColumn colvarEND_OF_WEEK_STARTING_FRI_DATE = new TableSchema.TableColumn(schema);
				colvarEND_OF_WEEK_STARTING_FRI_DATE.ColumnName = "END_OF_WEEK_STARTING_FRI_DATE";
				colvarEND_OF_WEEK_STARTING_FRI_DATE.DataType = DbType.DateTime;
				colvarEND_OF_WEEK_STARTING_FRI_DATE.MaxLength = 0;
				colvarEND_OF_WEEK_STARTING_FRI_DATE.AutoIncrement = false;
				colvarEND_OF_WEEK_STARTING_FRI_DATE.IsNullable = false;
				colvarEND_OF_WEEK_STARTING_FRI_DATE.IsPrimaryKey = false;
				colvarEND_OF_WEEK_STARTING_FRI_DATE.IsForeignKey = false;
				colvarEND_OF_WEEK_STARTING_FRI_DATE.IsReadOnly = false;
				colvarEND_OF_WEEK_STARTING_FRI_DATE.DefaultSetting = @"";
				colvarEND_OF_WEEK_STARTING_FRI_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEND_OF_WEEK_STARTING_FRI_DATE);

				TableSchema.TableColumn colvarSTART_OF_WEEK_STARTING_SAT_DATE = new TableSchema.TableColumn(schema);
				colvarSTART_OF_WEEK_STARTING_SAT_DATE.ColumnName = "START_OF_WEEK_STARTING_SAT_DATE";
				colvarSTART_OF_WEEK_STARTING_SAT_DATE.DataType = DbType.DateTime;
				colvarSTART_OF_WEEK_STARTING_SAT_DATE.MaxLength = 0;
				colvarSTART_OF_WEEK_STARTING_SAT_DATE.AutoIncrement = false;
				colvarSTART_OF_WEEK_STARTING_SAT_DATE.IsNullable = false;
				colvarSTART_OF_WEEK_STARTING_SAT_DATE.IsPrimaryKey = false;
				colvarSTART_OF_WEEK_STARTING_SAT_DATE.IsForeignKey = false;
				colvarSTART_OF_WEEK_STARTING_SAT_DATE.IsReadOnly = false;
				colvarSTART_OF_WEEK_STARTING_SAT_DATE.DefaultSetting = @"";
				colvarSTART_OF_WEEK_STARTING_SAT_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTART_OF_WEEK_STARTING_SAT_DATE);

				TableSchema.TableColumn colvarEND_OF_WEEK_STARTING_SAT_DATE = new TableSchema.TableColumn(schema);
				colvarEND_OF_WEEK_STARTING_SAT_DATE.ColumnName = "END_OF_WEEK_STARTING_SAT_DATE";
				colvarEND_OF_WEEK_STARTING_SAT_DATE.DataType = DbType.DateTime;
				colvarEND_OF_WEEK_STARTING_SAT_DATE.MaxLength = 0;
				colvarEND_OF_WEEK_STARTING_SAT_DATE.AutoIncrement = false;
				colvarEND_OF_WEEK_STARTING_SAT_DATE.IsNullable = false;
				colvarEND_OF_WEEK_STARTING_SAT_DATE.IsPrimaryKey = false;
				colvarEND_OF_WEEK_STARTING_SAT_DATE.IsForeignKey = false;
				colvarEND_OF_WEEK_STARTING_SAT_DATE.IsReadOnly = false;
				colvarEND_OF_WEEK_STARTING_SAT_DATE.DefaultSetting = @"";
				colvarEND_OF_WEEK_STARTING_SAT_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEND_OF_WEEK_STARTING_SAT_DATE);

				TableSchema.TableColumn colvarQUARTER_SEQ_NO = new TableSchema.TableColumn(schema);
				colvarQUARTER_SEQ_NO.ColumnName = "QUARTER_SEQ_NO";
				colvarQUARTER_SEQ_NO.DataType = DbType.Int32;
				colvarQUARTER_SEQ_NO.MaxLength = 0;
				colvarQUARTER_SEQ_NO.AutoIncrement = false;
				colvarQUARTER_SEQ_NO.IsNullable = false;
				colvarQUARTER_SEQ_NO.IsPrimaryKey = false;
				colvarQUARTER_SEQ_NO.IsForeignKey = false;
				colvarQUARTER_SEQ_NO.IsReadOnly = false;
				colvarQUARTER_SEQ_NO.DefaultSetting = @"";
				colvarQUARTER_SEQ_NO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQUARTER_SEQ_NO);

				TableSchema.TableColumn colvarMONTH_SEQ_NO = new TableSchema.TableColumn(schema);
				colvarMONTH_SEQ_NO.ColumnName = "MONTH_SEQ_NO";
				colvarMONTH_SEQ_NO.DataType = DbType.Int32;
				colvarMONTH_SEQ_NO.MaxLength = 0;
				colvarMONTH_SEQ_NO.AutoIncrement = false;
				colvarMONTH_SEQ_NO.IsNullable = false;
				colvarMONTH_SEQ_NO.IsPrimaryKey = false;
				colvarMONTH_SEQ_NO.IsForeignKey = false;
				colvarMONTH_SEQ_NO.IsReadOnly = false;
				colvarMONTH_SEQ_NO.DefaultSetting = @"";
				colvarMONTH_SEQ_NO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMONTH_SEQ_NO);

				TableSchema.TableColumn colvarWEEK_STARTING_SUN_SEQ_NO = new TableSchema.TableColumn(schema);
				colvarWEEK_STARTING_SUN_SEQ_NO.ColumnName = "WEEK_STARTING_SUN_SEQ_NO";
				colvarWEEK_STARTING_SUN_SEQ_NO.DataType = DbType.Int32;
				colvarWEEK_STARTING_SUN_SEQ_NO.MaxLength = 0;
				colvarWEEK_STARTING_SUN_SEQ_NO.AutoIncrement = false;
				colvarWEEK_STARTING_SUN_SEQ_NO.IsNullable = false;
				colvarWEEK_STARTING_SUN_SEQ_NO.IsPrimaryKey = false;
				colvarWEEK_STARTING_SUN_SEQ_NO.IsForeignKey = false;
				colvarWEEK_STARTING_SUN_SEQ_NO.IsReadOnly = false;
				colvarWEEK_STARTING_SUN_SEQ_NO.DefaultSetting = @"";
				colvarWEEK_STARTING_SUN_SEQ_NO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWEEK_STARTING_SUN_SEQ_NO);

				TableSchema.TableColumn colvarWEEK_STARTING_MON_SEQ_NO = new TableSchema.TableColumn(schema);
				colvarWEEK_STARTING_MON_SEQ_NO.ColumnName = "WEEK_STARTING_MON_SEQ_NO";
				colvarWEEK_STARTING_MON_SEQ_NO.DataType = DbType.Int32;
				colvarWEEK_STARTING_MON_SEQ_NO.MaxLength = 0;
				colvarWEEK_STARTING_MON_SEQ_NO.AutoIncrement = false;
				colvarWEEK_STARTING_MON_SEQ_NO.IsNullable = false;
				colvarWEEK_STARTING_MON_SEQ_NO.IsPrimaryKey = false;
				colvarWEEK_STARTING_MON_SEQ_NO.IsForeignKey = false;
				colvarWEEK_STARTING_MON_SEQ_NO.IsReadOnly = false;
				colvarWEEK_STARTING_MON_SEQ_NO.DefaultSetting = @"";
				colvarWEEK_STARTING_MON_SEQ_NO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWEEK_STARTING_MON_SEQ_NO);

				TableSchema.TableColumn colvarWEEK_STARTING_TUE_SEQ_NO = new TableSchema.TableColumn(schema);
				colvarWEEK_STARTING_TUE_SEQ_NO.ColumnName = "WEEK_STARTING_TUE_SEQ_NO";
				colvarWEEK_STARTING_TUE_SEQ_NO.DataType = DbType.Int32;
				colvarWEEK_STARTING_TUE_SEQ_NO.MaxLength = 0;
				colvarWEEK_STARTING_TUE_SEQ_NO.AutoIncrement = false;
				colvarWEEK_STARTING_TUE_SEQ_NO.IsNullable = false;
				colvarWEEK_STARTING_TUE_SEQ_NO.IsPrimaryKey = false;
				colvarWEEK_STARTING_TUE_SEQ_NO.IsForeignKey = false;
				colvarWEEK_STARTING_TUE_SEQ_NO.IsReadOnly = false;
				colvarWEEK_STARTING_TUE_SEQ_NO.DefaultSetting = @"";
				colvarWEEK_STARTING_TUE_SEQ_NO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWEEK_STARTING_TUE_SEQ_NO);

				TableSchema.TableColumn colvarWEEK_STARTING_WED_SEQ_NO = new TableSchema.TableColumn(schema);
				colvarWEEK_STARTING_WED_SEQ_NO.ColumnName = "WEEK_STARTING_WED_SEQ_NO";
				colvarWEEK_STARTING_WED_SEQ_NO.DataType = DbType.Int32;
				colvarWEEK_STARTING_WED_SEQ_NO.MaxLength = 0;
				colvarWEEK_STARTING_WED_SEQ_NO.AutoIncrement = false;
				colvarWEEK_STARTING_WED_SEQ_NO.IsNullable = false;
				colvarWEEK_STARTING_WED_SEQ_NO.IsPrimaryKey = false;
				colvarWEEK_STARTING_WED_SEQ_NO.IsForeignKey = false;
				colvarWEEK_STARTING_WED_SEQ_NO.IsReadOnly = false;
				colvarWEEK_STARTING_WED_SEQ_NO.DefaultSetting = @"";
				colvarWEEK_STARTING_WED_SEQ_NO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWEEK_STARTING_WED_SEQ_NO);

				TableSchema.TableColumn colvarWEEK_STARTING_THU_SEQ_NO = new TableSchema.TableColumn(schema);
				colvarWEEK_STARTING_THU_SEQ_NO.ColumnName = "WEEK_STARTING_THU_SEQ_NO";
				colvarWEEK_STARTING_THU_SEQ_NO.DataType = DbType.Int32;
				colvarWEEK_STARTING_THU_SEQ_NO.MaxLength = 0;
				colvarWEEK_STARTING_THU_SEQ_NO.AutoIncrement = false;
				colvarWEEK_STARTING_THU_SEQ_NO.IsNullable = false;
				colvarWEEK_STARTING_THU_SEQ_NO.IsPrimaryKey = false;
				colvarWEEK_STARTING_THU_SEQ_NO.IsForeignKey = false;
				colvarWEEK_STARTING_THU_SEQ_NO.IsReadOnly = false;
				colvarWEEK_STARTING_THU_SEQ_NO.DefaultSetting = @"";
				colvarWEEK_STARTING_THU_SEQ_NO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWEEK_STARTING_THU_SEQ_NO);

				TableSchema.TableColumn colvarWEEK_STARTING_FRI_SEQ_NO = new TableSchema.TableColumn(schema);
				colvarWEEK_STARTING_FRI_SEQ_NO.ColumnName = "WEEK_STARTING_FRI_SEQ_NO";
				colvarWEEK_STARTING_FRI_SEQ_NO.DataType = DbType.Int32;
				colvarWEEK_STARTING_FRI_SEQ_NO.MaxLength = 0;
				colvarWEEK_STARTING_FRI_SEQ_NO.AutoIncrement = false;
				colvarWEEK_STARTING_FRI_SEQ_NO.IsNullable = false;
				colvarWEEK_STARTING_FRI_SEQ_NO.IsPrimaryKey = false;
				colvarWEEK_STARTING_FRI_SEQ_NO.IsForeignKey = false;
				colvarWEEK_STARTING_FRI_SEQ_NO.IsReadOnly = false;
				colvarWEEK_STARTING_FRI_SEQ_NO.DefaultSetting = @"";
				colvarWEEK_STARTING_FRI_SEQ_NO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWEEK_STARTING_FRI_SEQ_NO);

				TableSchema.TableColumn colvarWEEK_STARTING_SAT_SEQ_NO = new TableSchema.TableColumn(schema);
				colvarWEEK_STARTING_SAT_SEQ_NO.ColumnName = "WEEK_STARTING_SAT_SEQ_NO";
				colvarWEEK_STARTING_SAT_SEQ_NO.DataType = DbType.Int32;
				colvarWEEK_STARTING_SAT_SEQ_NO.MaxLength = 0;
				colvarWEEK_STARTING_SAT_SEQ_NO.AutoIncrement = false;
				colvarWEEK_STARTING_SAT_SEQ_NO.IsNullable = false;
				colvarWEEK_STARTING_SAT_SEQ_NO.IsPrimaryKey = false;
				colvarWEEK_STARTING_SAT_SEQ_NO.IsForeignKey = false;
				colvarWEEK_STARTING_SAT_SEQ_NO.IsReadOnly = false;
				colvarWEEK_STARTING_SAT_SEQ_NO.DefaultSetting = @"";
				colvarWEEK_STARTING_SAT_SEQ_NO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWEEK_STARTING_SAT_SEQ_NO);

				TableSchema.TableColumn colvarJULIAN_DATE = new TableSchema.TableColumn(schema);
				colvarJULIAN_DATE.ColumnName = "JULIAN_DATE";
				colvarJULIAN_DATE.DataType = DbType.Int32;
				colvarJULIAN_DATE.MaxLength = 0;
				colvarJULIAN_DATE.AutoIncrement = false;
				colvarJULIAN_DATE.IsNullable = false;
				colvarJULIAN_DATE.IsPrimaryKey = false;
				colvarJULIAN_DATE.IsForeignKey = false;
				colvarJULIAN_DATE.IsReadOnly = false;
				colvarJULIAN_DATE.DefaultSetting = @"";
				colvarJULIAN_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJULIAN_DATE);

				TableSchema.TableColumn colvarMODIFIED_JULIAN_DATE = new TableSchema.TableColumn(schema);
				colvarMODIFIED_JULIAN_DATE.ColumnName = "MODIFIED_JULIAN_DATE";
				colvarMODIFIED_JULIAN_DATE.DataType = DbType.Int32;
				colvarMODIFIED_JULIAN_DATE.MaxLength = 0;
				colvarMODIFIED_JULIAN_DATE.AutoIncrement = false;
				colvarMODIFIED_JULIAN_DATE.IsNullable = false;
				colvarMODIFIED_JULIAN_DATE.IsPrimaryKey = false;
				colvarMODIFIED_JULIAN_DATE.IsForeignKey = false;
				colvarMODIFIED_JULIAN_DATE.IsReadOnly = false;
				colvarMODIFIED_JULIAN_DATE.DefaultSetting = @"";
				colvarMODIFIED_JULIAN_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMODIFIED_JULIAN_DATE);

				TableSchema.TableColumn colvarISO_DATE = new TableSchema.TableColumn(schema);
				colvarISO_DATE.ColumnName = "ISO_DATE";
				colvarISO_DATE.DataType = DbType.AnsiString;
				colvarISO_DATE.MaxLength = 10;
				colvarISO_DATE.AutoIncrement = false;
				colvarISO_DATE.IsNullable = false;
				colvarISO_DATE.IsPrimaryKey = false;
				colvarISO_DATE.IsForeignKey = false;
				colvarISO_DATE.IsReadOnly = false;
				colvarISO_DATE.DefaultSetting = @"";
				colvarISO_DATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarISO_DATE);

				TableSchema.TableColumn colvarISO_YEAR_WEEK_NO = new TableSchema.TableColumn(schema);
				colvarISO_YEAR_WEEK_NO.ColumnName = "ISO_YEAR_WEEK_NO";
				colvarISO_YEAR_WEEK_NO.DataType = DbType.Int32;
				colvarISO_YEAR_WEEK_NO.MaxLength = 0;
				colvarISO_YEAR_WEEK_NO.AutoIncrement = false;
				colvarISO_YEAR_WEEK_NO.IsNullable = false;
				colvarISO_YEAR_WEEK_NO.IsPrimaryKey = false;
				colvarISO_YEAR_WEEK_NO.IsForeignKey = false;
				colvarISO_YEAR_WEEK_NO.IsReadOnly = false;
				colvarISO_YEAR_WEEK_NO.DefaultSetting = @"";
				colvarISO_YEAR_WEEK_NO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarISO_YEAR_WEEK_NO);

				TableSchema.TableColumn colvarISO_WEEK_NO = new TableSchema.TableColumn(schema);
				colvarISO_WEEK_NO.ColumnName = "ISO_WEEK_NO";
				colvarISO_WEEK_NO.DataType = DbType.Int16;
				colvarISO_WEEK_NO.MaxLength = 0;
				colvarISO_WEEK_NO.AutoIncrement = false;
				colvarISO_WEEK_NO.IsNullable = false;
				colvarISO_WEEK_NO.IsPrimaryKey = false;
				colvarISO_WEEK_NO.IsForeignKey = false;
				colvarISO_WEEK_NO.IsReadOnly = false;
				colvarISO_WEEK_NO.DefaultSetting = @"";
				colvarISO_WEEK_NO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarISO_WEEK_NO);

				TableSchema.TableColumn colvarISO_DAY_OF_WEEK = new TableSchema.TableColumn(schema);
				colvarISO_DAY_OF_WEEK.ColumnName = "ISO_DAY_OF_WEEK";
				colvarISO_DAY_OF_WEEK.DataType = DbType.Byte;
				colvarISO_DAY_OF_WEEK.MaxLength = 0;
				colvarISO_DAY_OF_WEEK.AutoIncrement = false;
				colvarISO_DAY_OF_WEEK.IsNullable = false;
				colvarISO_DAY_OF_WEEK.IsPrimaryKey = false;
				colvarISO_DAY_OF_WEEK.IsForeignKey = false;
				colvarISO_DAY_OF_WEEK.IsReadOnly = false;
				colvarISO_DAY_OF_WEEK.DefaultSetting = @"";
				colvarISO_DAY_OF_WEEK.ForeignKeyTableName = "";
				schema.Columns.Add(colvarISO_DAY_OF_WEEK);

				TableSchema.TableColumn colvarISO_YEAR_WEEK_NAME = new TableSchema.TableColumn(schema);
				colvarISO_YEAR_WEEK_NAME.ColumnName = "ISO_YEAR_WEEK_NAME";
				colvarISO_YEAR_WEEK_NAME.DataType = DbType.AnsiString;
				colvarISO_YEAR_WEEK_NAME.MaxLength = 8;
				colvarISO_YEAR_WEEK_NAME.AutoIncrement = false;
				colvarISO_YEAR_WEEK_NAME.IsNullable = false;
				colvarISO_YEAR_WEEK_NAME.IsPrimaryKey = false;
				colvarISO_YEAR_WEEK_NAME.IsForeignKey = false;
				colvarISO_YEAR_WEEK_NAME.IsReadOnly = false;
				colvarISO_YEAR_WEEK_NAME.DefaultSetting = @"";
				colvarISO_YEAR_WEEK_NAME.ForeignKeyTableName = "";
				schema.Columns.Add(colvarISO_YEAR_WEEK_NAME);

				TableSchema.TableColumn colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME = new TableSchema.TableColumn(schema);
				colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME.ColumnName = "ISO_YEAR_WEEK_DAY_OF_WEEK_NAME";
				colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME.DataType = DbType.AnsiString;
				colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME.MaxLength = 10;
				colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME.AutoIncrement = false;
				colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME.IsNullable = false;
				colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME.IsPrimaryKey = false;
				colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME.IsForeignKey = false;
				colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME.IsReadOnly = false;
				colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME.DefaultSetting = @"";
				colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME.ForeignKeyTableName = "";
				schema.Columns.Add(colvarISO_YEAR_WEEK_DAY_OF_WEEK_NAME);

				TableSchema.TableColumn colvarDATE_FORMAT_YYYY_MM_DD = new TableSchema.TableColumn(schema);
				colvarDATE_FORMAT_YYYY_MM_DD.ColumnName = "DATE_FORMAT_YYYY_MM_DD";
				colvarDATE_FORMAT_YYYY_MM_DD.DataType = DbType.AnsiString;
				colvarDATE_FORMAT_YYYY_MM_DD.MaxLength = 10;
				colvarDATE_FORMAT_YYYY_MM_DD.AutoIncrement = false;
				colvarDATE_FORMAT_YYYY_MM_DD.IsNullable = false;
				colvarDATE_FORMAT_YYYY_MM_DD.IsPrimaryKey = false;
				colvarDATE_FORMAT_YYYY_MM_DD.IsForeignKey = false;
				colvarDATE_FORMAT_YYYY_MM_DD.IsReadOnly = false;
				colvarDATE_FORMAT_YYYY_MM_DD.DefaultSetting = @"";
				colvarDATE_FORMAT_YYYY_MM_DD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDATE_FORMAT_YYYY_MM_DD);

				TableSchema.TableColumn colvarDATE_FORMAT_YYYY_M_D = new TableSchema.TableColumn(schema);
				colvarDATE_FORMAT_YYYY_M_D.ColumnName = "DATE_FORMAT_YYYY_M_D";
				colvarDATE_FORMAT_YYYY_M_D.DataType = DbType.AnsiString;
				colvarDATE_FORMAT_YYYY_M_D.MaxLength = 10;
				colvarDATE_FORMAT_YYYY_M_D.AutoIncrement = false;
				colvarDATE_FORMAT_YYYY_M_D.IsNullable = false;
				colvarDATE_FORMAT_YYYY_M_D.IsPrimaryKey = false;
				colvarDATE_FORMAT_YYYY_M_D.IsForeignKey = false;
				colvarDATE_FORMAT_YYYY_M_D.IsReadOnly = false;
				colvarDATE_FORMAT_YYYY_M_D.DefaultSetting = @"";
				colvarDATE_FORMAT_YYYY_M_D.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDATE_FORMAT_YYYY_M_D);

				TableSchema.TableColumn colvarDATE_FORMAT_MM_DD_YYYY = new TableSchema.TableColumn(schema);
				colvarDATE_FORMAT_MM_DD_YYYY.ColumnName = "DATE_FORMAT_MM_DD_YYYY";
				colvarDATE_FORMAT_MM_DD_YYYY.DataType = DbType.AnsiString;
				colvarDATE_FORMAT_MM_DD_YYYY.MaxLength = 10;
				colvarDATE_FORMAT_MM_DD_YYYY.AutoIncrement = false;
				colvarDATE_FORMAT_MM_DD_YYYY.IsNullable = false;
				colvarDATE_FORMAT_MM_DD_YYYY.IsPrimaryKey = false;
				colvarDATE_FORMAT_MM_DD_YYYY.IsForeignKey = false;
				colvarDATE_FORMAT_MM_DD_YYYY.IsReadOnly = false;
				colvarDATE_FORMAT_MM_DD_YYYY.DefaultSetting = @"";
				colvarDATE_FORMAT_MM_DD_YYYY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDATE_FORMAT_MM_DD_YYYY);

				TableSchema.TableColumn colvarDATE_FORMAT_M_D_YYYY = new TableSchema.TableColumn(schema);
				colvarDATE_FORMAT_M_D_YYYY.ColumnName = "DATE_FORMAT_M_D_YYYY";
				colvarDATE_FORMAT_M_D_YYYY.DataType = DbType.AnsiString;
				colvarDATE_FORMAT_M_D_YYYY.MaxLength = 10;
				colvarDATE_FORMAT_M_D_YYYY.AutoIncrement = false;
				colvarDATE_FORMAT_M_D_YYYY.IsNullable = false;
				colvarDATE_FORMAT_M_D_YYYY.IsPrimaryKey = false;
				colvarDATE_FORMAT_M_D_YYYY.IsForeignKey = false;
				colvarDATE_FORMAT_M_D_YYYY.IsReadOnly = false;
				colvarDATE_FORMAT_M_D_YYYY.DefaultSetting = @"";
				colvarDATE_FORMAT_M_D_YYYY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDATE_FORMAT_M_D_YYYY);

				TableSchema.TableColumn colvarDATE_FORMAT_MMM_D_YYYY = new TableSchema.TableColumn(schema);
				colvarDATE_FORMAT_MMM_D_YYYY.ColumnName = "DATE_FORMAT_MMM_D_YYYY";
				colvarDATE_FORMAT_MMM_D_YYYY.DataType = DbType.AnsiString;
				colvarDATE_FORMAT_MMM_D_YYYY.MaxLength = 12;
				colvarDATE_FORMAT_MMM_D_YYYY.AutoIncrement = false;
				colvarDATE_FORMAT_MMM_D_YYYY.IsNullable = false;
				colvarDATE_FORMAT_MMM_D_YYYY.IsPrimaryKey = false;
				colvarDATE_FORMAT_MMM_D_YYYY.IsForeignKey = false;
				colvarDATE_FORMAT_MMM_D_YYYY.IsReadOnly = false;
				colvarDATE_FORMAT_MMM_D_YYYY.DefaultSetting = @"";
				colvarDATE_FORMAT_MMM_D_YYYY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDATE_FORMAT_MMM_D_YYYY);

				TableSchema.TableColumn colvarDATE_FORMAT_MMMMMMMMM_D_YYYY = new TableSchema.TableColumn(schema);
				colvarDATE_FORMAT_MMMMMMMMM_D_YYYY.ColumnName = "DATE_FORMAT_MMMMMMMMM_D_YYYY";
				colvarDATE_FORMAT_MMMMMMMMM_D_YYYY.DataType = DbType.AnsiString;
				colvarDATE_FORMAT_MMMMMMMMM_D_YYYY.MaxLength = 18;
				colvarDATE_FORMAT_MMMMMMMMM_D_YYYY.AutoIncrement = false;
				colvarDATE_FORMAT_MMMMMMMMM_D_YYYY.IsNullable = false;
				colvarDATE_FORMAT_MMMMMMMMM_D_YYYY.IsPrimaryKey = false;
				colvarDATE_FORMAT_MMMMMMMMM_D_YYYY.IsForeignKey = false;
				colvarDATE_FORMAT_MMMMMMMMM_D_YYYY.IsReadOnly = false;
				colvarDATE_FORMAT_MMMMMMMMM_D_YYYY.DefaultSetting = @"";
				colvarDATE_FORMAT_MMMMMMMMM_D_YYYY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDATE_FORMAT_MMMMMMMMM_D_YYYY);

				TableSchema.TableColumn colvarDATE_FORMAT_MM_DD_YY = new TableSchema.TableColumn(schema);
				colvarDATE_FORMAT_MM_DD_YY.ColumnName = "DATE_FORMAT_MM_DD_YY";
				colvarDATE_FORMAT_MM_DD_YY.DataType = DbType.AnsiString;
				colvarDATE_FORMAT_MM_DD_YY.MaxLength = 8;
				colvarDATE_FORMAT_MM_DD_YY.AutoIncrement = false;
				colvarDATE_FORMAT_MM_DD_YY.IsNullable = false;
				colvarDATE_FORMAT_MM_DD_YY.IsPrimaryKey = false;
				colvarDATE_FORMAT_MM_DD_YY.IsForeignKey = false;
				colvarDATE_FORMAT_MM_DD_YY.IsReadOnly = false;
				colvarDATE_FORMAT_MM_DD_YY.DefaultSetting = @"";
				colvarDATE_FORMAT_MM_DD_YY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDATE_FORMAT_MM_DD_YY);

				TableSchema.TableColumn colvarDATE_FORMAT_M_D_YY = new TableSchema.TableColumn(schema);
				colvarDATE_FORMAT_M_D_YY.ColumnName = "DATE_FORMAT_M_D_YY";
				colvarDATE_FORMAT_M_D_YY.DataType = DbType.AnsiString;
				colvarDATE_FORMAT_M_D_YY.MaxLength = 8;
				colvarDATE_FORMAT_M_D_YY.AutoIncrement = false;
				colvarDATE_FORMAT_M_D_YY.IsNullable = false;
				colvarDATE_FORMAT_M_D_YY.IsPrimaryKey = false;
				colvarDATE_FORMAT_M_D_YY.IsForeignKey = false;
				colvarDATE_FORMAT_M_D_YY.IsReadOnly = false;
				colvarDATE_FORMAT_M_D_YY.DefaultSetting = @"";
				colvarDATE_FORMAT_M_D_YY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDATE_FORMAT_M_D_YY);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_Dates",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_Date LoadFrom(SAE_Date item)
		{
			SAE_Date result = new SAE_Date();
			if (item.DATE_ID != default(int)) {
				result.LoadByKey(item.DATE_ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int DATE_ID {
			get { return GetColumnValue<int>(Columns.DATE_ID); }
			set {
				SetColumnValue(Columns.DATE_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DATE_ID));
			}
		}
		[DataMember]
		public DateTime DATEX {
			get { return GetColumnValue<DateTime>(Columns.DATEX); }
			set {
				SetColumnValue(Columns.DATEX, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DATEX));
			}
		}
		[DataMember]
		public DateTime NEXT_DAY_DATE {
			get { return GetColumnValue<DateTime>(Columns.NEXT_DAY_DATE); }
			set {
				SetColumnValue(Columns.NEXT_DAY_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NEXT_DAY_DATE));
			}
		}
		[DataMember]
		public short YEAR {
			get { return GetColumnValue<short>(Columns.YEAR); }
			set {
				SetColumnValue(Columns.YEAR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.YEAR));
			}
		}
		[DataMember]
		public int YEAR_QUARTER {
			get { return GetColumnValue<int>(Columns.YEAR_QUARTER); }
			set {
				SetColumnValue(Columns.YEAR_QUARTER, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.YEAR_QUARTER));
			}
		}
		[DataMember]
		public int YEAR_MONTH {
			get { return GetColumnValue<int>(Columns.YEAR_MONTH); }
			set {
				SetColumnValue(Columns.YEAR_MONTH, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.YEAR_MONTH));
			}
		}
		[DataMember]
		public int YEAR_DAY_OF_YEAR {
			get { return GetColumnValue<int>(Columns.YEAR_DAY_OF_YEAR); }
			set {
				SetColumnValue(Columns.YEAR_DAY_OF_YEAR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.YEAR_DAY_OF_YEAR));
			}
		}
		[DataMember]
		public byte QUARTER {
			get { return GetColumnValue<byte>(Columns.QUARTER); }
			set {
				SetColumnValue(Columns.QUARTER, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QUARTER));
			}
		}
		[DataMember]
		public byte MONTH {
			get { return GetColumnValue<byte>(Columns.MONTH); }
			set {
				SetColumnValue(Columns.MONTH, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MONTH));
			}
		}
		[DataMember]
		public short DAY_OF_YEAR {
			get { return GetColumnValue<short>(Columns.DAY_OF_YEAR); }
			set {
				SetColumnValue(Columns.DAY_OF_YEAR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DAY_OF_YEAR));
			}
		}
		[DataMember]
		public short DAY_OF_MONTH {
			get { return GetColumnValue<short>(Columns.DAY_OF_MONTH); }
			set {
				SetColumnValue(Columns.DAY_OF_MONTH, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DAY_OF_MONTH));
			}
		}
		[DataMember]
		public byte DAY_OF_WEEK {
			get { return GetColumnValue<byte>(Columns.DAY_OF_WEEK); }
			set {
				SetColumnValue(Columns.DAY_OF_WEEK, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DAY_OF_WEEK));
			}
		}
		[DataMember]
		public string YEAR_NAME {
			get { return GetColumnValue<string>(Columns.YEAR_NAME); }
			set {
				SetColumnValue(Columns.YEAR_NAME, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.YEAR_NAME));
			}
		}
		[DataMember]
		public string YEAR_QUARTER_NAME {
			get { return GetColumnValue<string>(Columns.YEAR_QUARTER_NAME); }
			set {
				SetColumnValue(Columns.YEAR_QUARTER_NAME, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.YEAR_QUARTER_NAME));
			}
		}
		[DataMember]
		public string YEAR_MONTH_NAME {
			get { return GetColumnValue<string>(Columns.YEAR_MONTH_NAME); }
			set {
				SetColumnValue(Columns.YEAR_MONTH_NAME, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.YEAR_MONTH_NAME));
			}
		}
		[DataMember]
		public string YEAR_MONTH_NAME_LONG {
			get { return GetColumnValue<string>(Columns.YEAR_MONTH_NAME_LONG); }
			set {
				SetColumnValue(Columns.YEAR_MONTH_NAME_LONG, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.YEAR_MONTH_NAME_LONG));
			}
		}
		[DataMember]
		public string QUARTER_NAME {
			get { return GetColumnValue<string>(Columns.QUARTER_NAME); }
			set {
				SetColumnValue(Columns.QUARTER_NAME, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QUARTER_NAME));
			}
		}
		[DataMember]
		public string MONTH_NAME {
			get { return GetColumnValue<string>(Columns.MONTH_NAME); }
			set {
				SetColumnValue(Columns.MONTH_NAME, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MONTH_NAME));
			}
		}
		[DataMember]
		public string MONTH_NAME_LONG {
			get { return GetColumnValue<string>(Columns.MONTH_NAME_LONG); }
			set {
				SetColumnValue(Columns.MONTH_NAME_LONG, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MONTH_NAME_LONG));
			}
		}
		[DataMember]
		public string WEEKDAY_NAME {
			get { return GetColumnValue<string>(Columns.WEEKDAY_NAME); }
			set {
				SetColumnValue(Columns.WEEKDAY_NAME, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WEEKDAY_NAME));
			}
		}
		[DataMember]
		public string WEEKDAY_NAME_LONG {
			get { return GetColumnValue<string>(Columns.WEEKDAY_NAME_LONG); }
			set {
				SetColumnValue(Columns.WEEKDAY_NAME_LONG, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WEEKDAY_NAME_LONG));
			}
		}
		[DataMember]
		public DateTime START_OF_YEAR_DATE {
			get { return GetColumnValue<DateTime>(Columns.START_OF_YEAR_DATE); }
			set {
				SetColumnValue(Columns.START_OF_YEAR_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.START_OF_YEAR_DATE));
			}
		}
		[DataMember]
		public DateTime END_OF_YEAR_DATE {
			get { return GetColumnValue<DateTime>(Columns.END_OF_YEAR_DATE); }
			set {
				SetColumnValue(Columns.END_OF_YEAR_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.END_OF_YEAR_DATE));
			}
		}
		[DataMember]
		public DateTime START_OF_QUARTER_DATE {
			get { return GetColumnValue<DateTime>(Columns.START_OF_QUARTER_DATE); }
			set {
				SetColumnValue(Columns.START_OF_QUARTER_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.START_OF_QUARTER_DATE));
			}
		}
		[DataMember]
		public DateTime END_OF_QUARTER_DATE {
			get { return GetColumnValue<DateTime>(Columns.END_OF_QUARTER_DATE); }
			set {
				SetColumnValue(Columns.END_OF_QUARTER_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.END_OF_QUARTER_DATE));
			}
		}
		[DataMember]
		public DateTime START_OF_MONTH_DATE {
			get { return GetColumnValue<DateTime>(Columns.START_OF_MONTH_DATE); }
			set {
				SetColumnValue(Columns.START_OF_MONTH_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.START_OF_MONTH_DATE));
			}
		}
		[DataMember]
		public DateTime END_OF_MONTH_DATE {
			get { return GetColumnValue<DateTime>(Columns.END_OF_MONTH_DATE); }
			set {
				SetColumnValue(Columns.END_OF_MONTH_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.END_OF_MONTH_DATE));
			}
		}
		[DataMember]
		public DateTime START_OF_WEEK_STARTING_SUN_DATE {
			get { return GetColumnValue<DateTime>(Columns.START_OF_WEEK_STARTING_SUN_DATE); }
			set {
				SetColumnValue(Columns.START_OF_WEEK_STARTING_SUN_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.START_OF_WEEK_STARTING_SUN_DATE));
			}
		}
		[DataMember]
		public DateTime END_OF_WEEK_STARTING_SUN_DATE {
			get { return GetColumnValue<DateTime>(Columns.END_OF_WEEK_STARTING_SUN_DATE); }
			set {
				SetColumnValue(Columns.END_OF_WEEK_STARTING_SUN_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.END_OF_WEEK_STARTING_SUN_DATE));
			}
		}
		[DataMember]
		public DateTime START_OF_WEEK_STARTING_MON_DATE {
			get { return GetColumnValue<DateTime>(Columns.START_OF_WEEK_STARTING_MON_DATE); }
			set {
				SetColumnValue(Columns.START_OF_WEEK_STARTING_MON_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.START_OF_WEEK_STARTING_MON_DATE));
			}
		}
		[DataMember]
		public DateTime END_OF_WEEK_STARTING_MON_DATE {
			get { return GetColumnValue<DateTime>(Columns.END_OF_WEEK_STARTING_MON_DATE); }
			set {
				SetColumnValue(Columns.END_OF_WEEK_STARTING_MON_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.END_OF_WEEK_STARTING_MON_DATE));
			}
		}
		[DataMember]
		public DateTime START_OF_WEEK_STARTING_TUE_DATE {
			get { return GetColumnValue<DateTime>(Columns.START_OF_WEEK_STARTING_TUE_DATE); }
			set {
				SetColumnValue(Columns.START_OF_WEEK_STARTING_TUE_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.START_OF_WEEK_STARTING_TUE_DATE));
			}
		}
		[DataMember]
		public DateTime END_OF_WEEK_STARTING_TUE_DATE {
			get { return GetColumnValue<DateTime>(Columns.END_OF_WEEK_STARTING_TUE_DATE); }
			set {
				SetColumnValue(Columns.END_OF_WEEK_STARTING_TUE_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.END_OF_WEEK_STARTING_TUE_DATE));
			}
		}
		[DataMember]
		public DateTime START_OF_WEEK_STARTING_WED_DATE {
			get { return GetColumnValue<DateTime>(Columns.START_OF_WEEK_STARTING_WED_DATE); }
			set {
				SetColumnValue(Columns.START_OF_WEEK_STARTING_WED_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.START_OF_WEEK_STARTING_WED_DATE));
			}
		}
		[DataMember]
		public DateTime END_OF_WEEK_STARTING_WED_DATE {
			get { return GetColumnValue<DateTime>(Columns.END_OF_WEEK_STARTING_WED_DATE); }
			set {
				SetColumnValue(Columns.END_OF_WEEK_STARTING_WED_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.END_OF_WEEK_STARTING_WED_DATE));
			}
		}
		[DataMember]
		public DateTime START_OF_WEEK_STARTING_THU_DATE {
			get { return GetColumnValue<DateTime>(Columns.START_OF_WEEK_STARTING_THU_DATE); }
			set {
				SetColumnValue(Columns.START_OF_WEEK_STARTING_THU_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.START_OF_WEEK_STARTING_THU_DATE));
			}
		}
		[DataMember]
		public DateTime END_OF_WEEK_STARTING_THU_DATE {
			get { return GetColumnValue<DateTime>(Columns.END_OF_WEEK_STARTING_THU_DATE); }
			set {
				SetColumnValue(Columns.END_OF_WEEK_STARTING_THU_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.END_OF_WEEK_STARTING_THU_DATE));
			}
		}
		[DataMember]
		public DateTime START_OF_WEEK_STARTING_FRI_DATE {
			get { return GetColumnValue<DateTime>(Columns.START_OF_WEEK_STARTING_FRI_DATE); }
			set {
				SetColumnValue(Columns.START_OF_WEEK_STARTING_FRI_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.START_OF_WEEK_STARTING_FRI_DATE));
			}
		}
		[DataMember]
		public DateTime END_OF_WEEK_STARTING_FRI_DATE {
			get { return GetColumnValue<DateTime>(Columns.END_OF_WEEK_STARTING_FRI_DATE); }
			set {
				SetColumnValue(Columns.END_OF_WEEK_STARTING_FRI_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.END_OF_WEEK_STARTING_FRI_DATE));
			}
		}
		[DataMember]
		public DateTime START_OF_WEEK_STARTING_SAT_DATE {
			get { return GetColumnValue<DateTime>(Columns.START_OF_WEEK_STARTING_SAT_DATE); }
			set {
				SetColumnValue(Columns.START_OF_WEEK_STARTING_SAT_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.START_OF_WEEK_STARTING_SAT_DATE));
			}
		}
		[DataMember]
		public DateTime END_OF_WEEK_STARTING_SAT_DATE {
			get { return GetColumnValue<DateTime>(Columns.END_OF_WEEK_STARTING_SAT_DATE); }
			set {
				SetColumnValue(Columns.END_OF_WEEK_STARTING_SAT_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.END_OF_WEEK_STARTING_SAT_DATE));
			}
		}
		[DataMember]
		public int QUARTER_SEQ_NO {
			get { return GetColumnValue<int>(Columns.QUARTER_SEQ_NO); }
			set {
				SetColumnValue(Columns.QUARTER_SEQ_NO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QUARTER_SEQ_NO));
			}
		}
		[DataMember]
		public int MONTH_SEQ_NO {
			get { return GetColumnValue<int>(Columns.MONTH_SEQ_NO); }
			set {
				SetColumnValue(Columns.MONTH_SEQ_NO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MONTH_SEQ_NO));
			}
		}
		[DataMember]
		public int WEEK_STARTING_SUN_SEQ_NO {
			get { return GetColumnValue<int>(Columns.WEEK_STARTING_SUN_SEQ_NO); }
			set {
				SetColumnValue(Columns.WEEK_STARTING_SUN_SEQ_NO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WEEK_STARTING_SUN_SEQ_NO));
			}
		}
		[DataMember]
		public int WEEK_STARTING_MON_SEQ_NO {
			get { return GetColumnValue<int>(Columns.WEEK_STARTING_MON_SEQ_NO); }
			set {
				SetColumnValue(Columns.WEEK_STARTING_MON_SEQ_NO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WEEK_STARTING_MON_SEQ_NO));
			}
		}
		[DataMember]
		public int WEEK_STARTING_TUE_SEQ_NO {
			get { return GetColumnValue<int>(Columns.WEEK_STARTING_TUE_SEQ_NO); }
			set {
				SetColumnValue(Columns.WEEK_STARTING_TUE_SEQ_NO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WEEK_STARTING_TUE_SEQ_NO));
			}
		}
		[DataMember]
		public int WEEK_STARTING_WED_SEQ_NO {
			get { return GetColumnValue<int>(Columns.WEEK_STARTING_WED_SEQ_NO); }
			set {
				SetColumnValue(Columns.WEEK_STARTING_WED_SEQ_NO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WEEK_STARTING_WED_SEQ_NO));
			}
		}
		[DataMember]
		public int WEEK_STARTING_THU_SEQ_NO {
			get { return GetColumnValue<int>(Columns.WEEK_STARTING_THU_SEQ_NO); }
			set {
				SetColumnValue(Columns.WEEK_STARTING_THU_SEQ_NO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WEEK_STARTING_THU_SEQ_NO));
			}
		}
		[DataMember]
		public int WEEK_STARTING_FRI_SEQ_NO {
			get { return GetColumnValue<int>(Columns.WEEK_STARTING_FRI_SEQ_NO); }
			set {
				SetColumnValue(Columns.WEEK_STARTING_FRI_SEQ_NO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WEEK_STARTING_FRI_SEQ_NO));
			}
		}
		[DataMember]
		public int WEEK_STARTING_SAT_SEQ_NO {
			get { return GetColumnValue<int>(Columns.WEEK_STARTING_SAT_SEQ_NO); }
			set {
				SetColumnValue(Columns.WEEK_STARTING_SAT_SEQ_NO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WEEK_STARTING_SAT_SEQ_NO));
			}
		}
		[DataMember]
		public int JULIAN_DATE {
			get { return GetColumnValue<int>(Columns.JULIAN_DATE); }
			set {
				SetColumnValue(Columns.JULIAN_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.JULIAN_DATE));
			}
		}
		[DataMember]
		public int MODIFIED_JULIAN_DATE {
			get { return GetColumnValue<int>(Columns.MODIFIED_JULIAN_DATE); }
			set {
				SetColumnValue(Columns.MODIFIED_JULIAN_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MODIFIED_JULIAN_DATE));
			}
		}
		[DataMember]
		public string ISO_DATE {
			get { return GetColumnValue<string>(Columns.ISO_DATE); }
			set {
				SetColumnValue(Columns.ISO_DATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ISO_DATE));
			}
		}
		[DataMember]
		public int ISO_YEAR_WEEK_NO {
			get { return GetColumnValue<int>(Columns.ISO_YEAR_WEEK_NO); }
			set {
				SetColumnValue(Columns.ISO_YEAR_WEEK_NO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ISO_YEAR_WEEK_NO));
			}
		}
		[DataMember]
		public short ISO_WEEK_NO {
			get { return GetColumnValue<short>(Columns.ISO_WEEK_NO); }
			set {
				SetColumnValue(Columns.ISO_WEEK_NO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ISO_WEEK_NO));
			}
		}
		[DataMember]
		public byte ISO_DAY_OF_WEEK {
			get { return GetColumnValue<byte>(Columns.ISO_DAY_OF_WEEK); }
			set {
				SetColumnValue(Columns.ISO_DAY_OF_WEEK, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ISO_DAY_OF_WEEK));
			}
		}
		[DataMember]
		public string ISO_YEAR_WEEK_NAME {
			get { return GetColumnValue<string>(Columns.ISO_YEAR_WEEK_NAME); }
			set {
				SetColumnValue(Columns.ISO_YEAR_WEEK_NAME, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ISO_YEAR_WEEK_NAME));
			}
		}
		[DataMember]
		public string ISO_YEAR_WEEK_DAY_OF_WEEK_NAME {
			get { return GetColumnValue<string>(Columns.ISO_YEAR_WEEK_DAY_OF_WEEK_NAME); }
			set {
				SetColumnValue(Columns.ISO_YEAR_WEEK_DAY_OF_WEEK_NAME, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ISO_YEAR_WEEK_DAY_OF_WEEK_NAME));
			}
		}
		[DataMember]
		public string DATE_FORMAT_YYYY_MM_DD {
			get { return GetColumnValue<string>(Columns.DATE_FORMAT_YYYY_MM_DD); }
			set {
				SetColumnValue(Columns.DATE_FORMAT_YYYY_MM_DD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DATE_FORMAT_YYYY_MM_DD));
			}
		}
		[DataMember]
		public string DATE_FORMAT_YYYY_M_D {
			get { return GetColumnValue<string>(Columns.DATE_FORMAT_YYYY_M_D); }
			set {
				SetColumnValue(Columns.DATE_FORMAT_YYYY_M_D, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DATE_FORMAT_YYYY_M_D));
			}
		}
		[DataMember]
		public string DATE_FORMAT_MM_DD_YYYY {
			get { return GetColumnValue<string>(Columns.DATE_FORMAT_MM_DD_YYYY); }
			set {
				SetColumnValue(Columns.DATE_FORMAT_MM_DD_YYYY, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DATE_FORMAT_MM_DD_YYYY));
			}
		}
		[DataMember]
		public string DATE_FORMAT_M_D_YYYY {
			get { return GetColumnValue<string>(Columns.DATE_FORMAT_M_D_YYYY); }
			set {
				SetColumnValue(Columns.DATE_FORMAT_M_D_YYYY, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DATE_FORMAT_M_D_YYYY));
			}
		}
		[DataMember]
		public string DATE_FORMAT_MMM_D_YYYY {
			get { return GetColumnValue<string>(Columns.DATE_FORMAT_MMM_D_YYYY); }
			set {
				SetColumnValue(Columns.DATE_FORMAT_MMM_D_YYYY, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DATE_FORMAT_MMM_D_YYYY));
			}
		}
		[DataMember]
		public string DATE_FORMAT_MMMMMMMMM_D_YYYY {
			get { return GetColumnValue<string>(Columns.DATE_FORMAT_MMMMMMMMM_D_YYYY); }
			set {
				SetColumnValue(Columns.DATE_FORMAT_MMMMMMMMM_D_YYYY, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DATE_FORMAT_MMMMMMMMM_D_YYYY));
			}
		}
		[DataMember]
		public string DATE_FORMAT_MM_DD_YY {
			get { return GetColumnValue<string>(Columns.DATE_FORMAT_MM_DD_YY); }
			set {
				SetColumnValue(Columns.DATE_FORMAT_MM_DD_YY, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DATE_FORMAT_MM_DD_YY));
			}
		}
		[DataMember]
		public string DATE_FORMAT_M_D_YY {
			get { return GetColumnValue<string>(Columns.DATE_FORMAT_M_D_YY); }
			set {
				SetColumnValue(Columns.DATE_FORMAT_M_D_YY, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DATE_FORMAT_M_D_YY));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return DATE_ID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn DATE_IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn DATEXColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn NEXT_DAY_DATEColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn YEARColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn YEAR_QUARTERColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn YEAR_MONTHColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn YEAR_DAY_OF_YEARColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn QUARTERColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn MONTHColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn DAY_OF_YEARColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn DAY_OF_MONTHColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn DAY_OF_WEEKColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn YEAR_NAMEColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn YEAR_QUARTER_NAMEColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn YEAR_MONTH_NAMEColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn YEAR_MONTH_NAME_LONGColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn QUARTER_NAMEColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn MONTH_NAMEColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn MONTH_NAME_LONGColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn WEEKDAY_NAMEColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn WEEKDAY_NAME_LONGColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn START_OF_YEAR_DATEColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn END_OF_YEAR_DATEColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn START_OF_QUARTER_DATEColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn END_OF_QUARTER_DATEColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn START_OF_MONTH_DATEColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn END_OF_MONTH_DATEColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn START_OF_WEEK_STARTING_SUN_DATEColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn END_OF_WEEK_STARTING_SUN_DATEColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn START_OF_WEEK_STARTING_MON_DATEColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn END_OF_WEEK_STARTING_MON_DATEColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn START_OF_WEEK_STARTING_TUE_DATEColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn END_OF_WEEK_STARTING_TUE_DATEColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn START_OF_WEEK_STARTING_WED_DATEColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn END_OF_WEEK_STARTING_WED_DATEColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn START_OF_WEEK_STARTING_THU_DATEColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn END_OF_WEEK_STARTING_THU_DATEColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn START_OF_WEEK_STARTING_FRI_DATEColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn END_OF_WEEK_STARTING_FRI_DATEColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn START_OF_WEEK_STARTING_SAT_DATEColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn END_OF_WEEK_STARTING_SAT_DATEColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn QUARTER_SEQ_NOColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn MONTH_SEQ_NOColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn WEEK_STARTING_SUN_SEQ_NOColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn WEEK_STARTING_MON_SEQ_NOColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn WEEK_STARTING_TUE_SEQ_NOColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn WEEK_STARTING_WED_SEQ_NOColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn WEEK_STARTING_THU_SEQ_NOColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn WEEK_STARTING_FRI_SEQ_NOColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn WEEK_STARTING_SAT_SEQ_NOColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn JULIAN_DATEColumn
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn MODIFIED_JULIAN_DATEColumn
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn ISO_DATEColumn
		{
			get { return Schema.Columns[52]; }
		}
		public static TableSchema.TableColumn ISO_YEAR_WEEK_NOColumn
		{
			get { return Schema.Columns[53]; }
		}
		public static TableSchema.TableColumn ISO_WEEK_NOColumn
		{
			get { return Schema.Columns[54]; }
		}
		public static TableSchema.TableColumn ISO_DAY_OF_WEEKColumn
		{
			get { return Schema.Columns[55]; }
		}
		public static TableSchema.TableColumn ISO_YEAR_WEEK_NAMEColumn
		{
			get { return Schema.Columns[56]; }
		}
		public static TableSchema.TableColumn ISO_YEAR_WEEK_DAY_OF_WEEK_NAMEColumn
		{
			get { return Schema.Columns[57]; }
		}
		public static TableSchema.TableColumn DATE_FORMAT_YYYY_MM_DDColumn
		{
			get { return Schema.Columns[58]; }
		}
		public static TableSchema.TableColumn DATE_FORMAT_YYYY_M_DColumn
		{
			get { return Schema.Columns[59]; }
		}
		public static TableSchema.TableColumn DATE_FORMAT_MM_DD_YYYYColumn
		{
			get { return Schema.Columns[60]; }
		}
		public static TableSchema.TableColumn DATE_FORMAT_M_D_YYYYColumn
		{
			get { return Schema.Columns[61]; }
		}
		public static TableSchema.TableColumn DATE_FORMAT_MMM_D_YYYYColumn
		{
			get { return Schema.Columns[62]; }
		}
		public static TableSchema.TableColumn DATE_FORMAT_MMMMMMMMM_D_YYYYColumn
		{
			get { return Schema.Columns[63]; }
		}
		public static TableSchema.TableColumn DATE_FORMAT_MM_DD_YYColumn
		{
			get { return Schema.Columns[64]; }
		}
		public static TableSchema.TableColumn DATE_FORMAT_M_D_YYColumn
		{
			get { return Schema.Columns[65]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string DATE_ID = @"DATE_ID";
			public static readonly string DATEX = @"DATE";
			public static readonly string NEXT_DAY_DATE = @"NEXT_DAY_DATE";
			public static readonly string YEAR = @"YEAR";
			public static readonly string YEAR_QUARTER = @"YEAR_QUARTER";
			public static readonly string YEAR_MONTH = @"YEAR_MONTH";
			public static readonly string YEAR_DAY_OF_YEAR = @"YEAR_DAY_OF_YEAR";
			public static readonly string QUARTER = @"QUARTER";
			public static readonly string MONTH = @"MONTH";
			public static readonly string DAY_OF_YEAR = @"DAY_OF_YEAR";
			public static readonly string DAY_OF_MONTH = @"DAY_OF_MONTH";
			public static readonly string DAY_OF_WEEK = @"DAY_OF_WEEK";
			public static readonly string YEAR_NAME = @"YEAR_NAME";
			public static readonly string YEAR_QUARTER_NAME = @"YEAR_QUARTER_NAME";
			public static readonly string YEAR_MONTH_NAME = @"YEAR_MONTH_NAME";
			public static readonly string YEAR_MONTH_NAME_LONG = @"YEAR_MONTH_NAME_LONG";
			public static readonly string QUARTER_NAME = @"QUARTER_NAME";
			public static readonly string MONTH_NAME = @"MONTH_NAME";
			public static readonly string MONTH_NAME_LONG = @"MONTH_NAME_LONG";
			public static readonly string WEEKDAY_NAME = @"WEEKDAY_NAME";
			public static readonly string WEEKDAY_NAME_LONG = @"WEEKDAY_NAME_LONG";
			public static readonly string START_OF_YEAR_DATE = @"START_OF_YEAR_DATE";
			public static readonly string END_OF_YEAR_DATE = @"END_OF_YEAR_DATE";
			public static readonly string START_OF_QUARTER_DATE = @"START_OF_QUARTER_DATE";
			public static readonly string END_OF_QUARTER_DATE = @"END_OF_QUARTER_DATE";
			public static readonly string START_OF_MONTH_DATE = @"START_OF_MONTH_DATE";
			public static readonly string END_OF_MONTH_DATE = @"END_OF_MONTH_DATE";
			public static readonly string START_OF_WEEK_STARTING_SUN_DATE = @"START_OF_WEEK_STARTING_SUN_DATE";
			public static readonly string END_OF_WEEK_STARTING_SUN_DATE = @"END_OF_WEEK_STARTING_SUN_DATE";
			public static readonly string START_OF_WEEK_STARTING_MON_DATE = @"START_OF_WEEK_STARTING_MON_DATE";
			public static readonly string END_OF_WEEK_STARTING_MON_DATE = @"END_OF_WEEK_STARTING_MON_DATE";
			public static readonly string START_OF_WEEK_STARTING_TUE_DATE = @"START_OF_WEEK_STARTING_TUE_DATE";
			public static readonly string END_OF_WEEK_STARTING_TUE_DATE = @"END_OF_WEEK_STARTING_TUE_DATE";
			public static readonly string START_OF_WEEK_STARTING_WED_DATE = @"START_OF_WEEK_STARTING_WED_DATE";
			public static readonly string END_OF_WEEK_STARTING_WED_DATE = @"END_OF_WEEK_STARTING_WED_DATE";
			public static readonly string START_OF_WEEK_STARTING_THU_DATE = @"START_OF_WEEK_STARTING_THU_DATE";
			public static readonly string END_OF_WEEK_STARTING_THU_DATE = @"END_OF_WEEK_STARTING_THU_DATE";
			public static readonly string START_OF_WEEK_STARTING_FRI_DATE = @"START_OF_WEEK_STARTING_FRI_DATE";
			public static readonly string END_OF_WEEK_STARTING_FRI_DATE = @"END_OF_WEEK_STARTING_FRI_DATE";
			public static readonly string START_OF_WEEK_STARTING_SAT_DATE = @"START_OF_WEEK_STARTING_SAT_DATE";
			public static readonly string END_OF_WEEK_STARTING_SAT_DATE = @"END_OF_WEEK_STARTING_SAT_DATE";
			public static readonly string QUARTER_SEQ_NO = @"QUARTER_SEQ_NO";
			public static readonly string MONTH_SEQ_NO = @"MONTH_SEQ_NO";
			public static readonly string WEEK_STARTING_SUN_SEQ_NO = @"WEEK_STARTING_SUN_SEQ_NO";
			public static readonly string WEEK_STARTING_MON_SEQ_NO = @"WEEK_STARTING_MON_SEQ_NO";
			public static readonly string WEEK_STARTING_TUE_SEQ_NO = @"WEEK_STARTING_TUE_SEQ_NO";
			public static readonly string WEEK_STARTING_WED_SEQ_NO = @"WEEK_STARTING_WED_SEQ_NO";
			public static readonly string WEEK_STARTING_THU_SEQ_NO = @"WEEK_STARTING_THU_SEQ_NO";
			public static readonly string WEEK_STARTING_FRI_SEQ_NO = @"WEEK_STARTING_FRI_SEQ_NO";
			public static readonly string WEEK_STARTING_SAT_SEQ_NO = @"WEEK_STARTING_SAT_SEQ_NO";
			public static readonly string JULIAN_DATE = @"JULIAN_DATE";
			public static readonly string MODIFIED_JULIAN_DATE = @"MODIFIED_JULIAN_DATE";
			public static readonly string ISO_DATE = @"ISO_DATE";
			public static readonly string ISO_YEAR_WEEK_NO = @"ISO_YEAR_WEEK_NO";
			public static readonly string ISO_WEEK_NO = @"ISO_WEEK_NO";
			public static readonly string ISO_DAY_OF_WEEK = @"ISO_DAY_OF_WEEK";
			public static readonly string ISO_YEAR_WEEK_NAME = @"ISO_YEAR_WEEK_NAME";
			public static readonly string ISO_YEAR_WEEK_DAY_OF_WEEK_NAME = @"ISO_YEAR_WEEK_DAY_OF_WEEK_NAME";
			public static readonly string DATE_FORMAT_YYYY_MM_DD = @"DATE_FORMAT_YYYY_MM_DD";
			public static readonly string DATE_FORMAT_YYYY_M_D = @"DATE_FORMAT_YYYY_M_D";
			public static readonly string DATE_FORMAT_MM_DD_YYYY = @"DATE_FORMAT_MM_DD_YYYY";
			public static readonly string DATE_FORMAT_M_D_YYYY = @"DATE_FORMAT_M_D_YYYY";
			public static readonly string DATE_FORMAT_MMM_D_YYYY = @"DATE_FORMAT_MMM_D_YYYY";
			public static readonly string DATE_FORMAT_MMMMMMMMM_D_YYYY = @"DATE_FORMAT_MMMMMMMMM_D_YYYY";
			public static readonly string DATE_FORMAT_MM_DD_YY = @"DATE_FORMAT_MM_DD_YY";
			public static readonly string DATE_FORMAT_M_D_YY = @"DATE_FORMAT_M_D_YY";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return DATE_ID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_GPCommissionTotal class.
	/// </summary>
	[DataContract]
	public partial class SAE_GPCommissionTotalCollection : ActiveList<SAE_GPCommissionTotal, SAE_GPCommissionTotalCollection>
	{
		public static SAE_GPCommissionTotalCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_GPCommissionTotalCollection result = new SAE_GPCommissionTotalCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_GPCommissionTotal item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_GPCommissionTotals table.
	/// </summary>
	[DataContract]
	public partial class SAE_GPCommissionTotal : ActiveRecord<SAE_GPCommissionTotal>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_GPCommissionTotal()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_GPCommissionTotals", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarGPEmployeeID = new TableSchema.TableColumn(schema);
				colvarGPEmployeeID.ColumnName = "GPEmployeeID";
				colvarGPEmployeeID.DataType = DbType.String;
				colvarGPEmployeeID.MaxLength = 30;
				colvarGPEmployeeID.AutoIncrement = false;
				colvarGPEmployeeID.IsNullable = false;
				colvarGPEmployeeID.IsPrimaryKey = false;
				colvarGPEmployeeID.IsForeignKey = false;
				colvarGPEmployeeID.IsReadOnly = false;
				colvarGPEmployeeID.DefaultSetting = @"";
				colvarGPEmployeeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPEmployeeID);

				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.Currency;
				colvarAmount.MaxLength = 0;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = false;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);

				TableSchema.TableColumn colvarPayType = new TableSchema.TableColumn(schema);
				colvarPayType.ColumnName = "PayType";
				colvarPayType.DataType = DbType.String;
				colvarPayType.MaxLength = 255;
				colvarPayType.AutoIncrement = false;
				colvarPayType.IsNullable = false;
				colvarPayType.IsPrimaryKey = false;
				colvarPayType.IsForeignKey = false;
				colvarPayType.IsReadOnly = false;
				colvarPayType.DefaultSetting = @"";
				colvarPayType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPayType);

				TableSchema.TableColumn colvarGPType = new TableSchema.TableColumn(schema);
				colvarGPType.ColumnName = "GPType";
				colvarGPType.DataType = DbType.String;
				colvarGPType.MaxLength = 30;
				colvarGPType.AutoIncrement = false;
				colvarGPType.IsNullable = false;
				colvarGPType.IsPrimaryKey = false;
				colvarGPType.IsForeignKey = false;
				colvarGPType.IsReadOnly = false;
				colvarGPType.DefaultSetting = @"";
				colvarGPType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGPType);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_GPCommissionTotals",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public string GPEmployeeID {
			get { return GetColumnValue<string>(Columns.GPEmployeeID); }
			set {
				SetColumnValue(Columns.GPEmployeeID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPEmployeeID));
			}
		}
		[DataMember]
		public decimal Amount {
			get { return GetColumnValue<decimal>(Columns.Amount); }
			set {
				SetColumnValue(Columns.Amount, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Amount));
			}
		}
		[DataMember]
		public string PayType {
			get { return GetColumnValue<string>(Columns.PayType); }
			set {
				SetColumnValue(Columns.PayType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PayType));
			}
		}
		[DataMember]
		public string GPType {
			get { return GetColumnValue<string>(Columns.GPType); }
			set {
				SetColumnValue(Columns.GPType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GPType));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return GPEmployeeID;
		}

		#region Typed Columns

		public static TableSchema.TableColumn GPEmployeeIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AmountColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn PayTypeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn GPTypeColumn
		{
			get { return Schema.Columns[3]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string GPEmployeeID = @"GPEmployeeID";
			public static readonly string Amount = @"Amount";
			public static readonly string PayType = @"PayType";
			public static readonly string GPType = @"GPType";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_GPRM00103 class.
	/// </summary>
	[DataContract]
	public partial class SAE_GPRM00103Collection : ActiveList<SAE_GPRM00103, SAE_GPRM00103Collection>
	{
		public static SAE_GPRM00103Collection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_GPRM00103Collection result = new SAE_GPRM00103Collection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_GPRM00103 item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_GPRM00103 table.
	/// </summary>
	[DataContract]
	public partial class SAE_GPRM00103 : ActiveRecord<SAE_GPRM00103>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_GPRM00103()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_GPRM00103", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarLASTPYDT = new TableSchema.TableColumn(schema);
				colvarLASTPYDT.ColumnName = "LASTPYDT";
				colvarLASTPYDT.DataType = DbType.DateTime;
				colvarLASTPYDT.MaxLength = 0;
				colvarLASTPYDT.AutoIncrement = false;
				colvarLASTPYDT.IsNullable = false;
				colvarLASTPYDT.IsPrimaryKey = false;
				colvarLASTPYDT.IsForeignKey = false;
				colvarLASTPYDT.IsReadOnly = false;
				colvarLASTPYDT.DefaultSetting = @"";
				colvarLASTPYDT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLASTPYDT);

				TableSchema.TableColumn colvarCUSTBLNC = new TableSchema.TableColumn(schema);
				colvarCUSTBLNC.ColumnName = "CUSTBLNC";
				colvarCUSTBLNC.DataType = DbType.Decimal;
				colvarCUSTBLNC.MaxLength = 0;
				colvarCUSTBLNC.AutoIncrement = false;
				colvarCUSTBLNC.IsNullable = false;
				colvarCUSTBLNC.IsPrimaryKey = false;
				colvarCUSTBLNC.IsForeignKey = false;
				colvarCUSTBLNC.IsReadOnly = false;
				colvarCUSTBLNC.DefaultSetting = @"";
				colvarCUSTBLNC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCUSTBLNC);

				TableSchema.TableColumn colvarAGPERAMT_1 = new TableSchema.TableColumn(schema);
				colvarAGPERAMT_1.ColumnName = "AGPERAMT_1";
				colvarAGPERAMT_1.DataType = DbType.Decimal;
				colvarAGPERAMT_1.MaxLength = 0;
				colvarAGPERAMT_1.AutoIncrement = false;
				colvarAGPERAMT_1.IsNullable = false;
				colvarAGPERAMT_1.IsPrimaryKey = false;
				colvarAGPERAMT_1.IsForeignKey = false;
				colvarAGPERAMT_1.IsReadOnly = false;
				colvarAGPERAMT_1.DefaultSetting = @"";
				colvarAGPERAMT_1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAGPERAMT_1);

				TableSchema.TableColumn colvarAGPERAMT_2 = new TableSchema.TableColumn(schema);
				colvarAGPERAMT_2.ColumnName = "AGPERAMT_2";
				colvarAGPERAMT_2.DataType = DbType.Decimal;
				colvarAGPERAMT_2.MaxLength = 0;
				colvarAGPERAMT_2.AutoIncrement = false;
				colvarAGPERAMT_2.IsNullable = false;
				colvarAGPERAMT_2.IsPrimaryKey = false;
				colvarAGPERAMT_2.IsForeignKey = false;
				colvarAGPERAMT_2.IsReadOnly = false;
				colvarAGPERAMT_2.DefaultSetting = @"";
				colvarAGPERAMT_2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAGPERAMT_2);

				TableSchema.TableColumn colvarAGPERAMT_3 = new TableSchema.TableColumn(schema);
				colvarAGPERAMT_3.ColumnName = "AGPERAMT_3";
				colvarAGPERAMT_3.DataType = DbType.Decimal;
				colvarAGPERAMT_3.MaxLength = 0;
				colvarAGPERAMT_3.AutoIncrement = false;
				colvarAGPERAMT_3.IsNullable = false;
				colvarAGPERAMT_3.IsPrimaryKey = false;
				colvarAGPERAMT_3.IsForeignKey = false;
				colvarAGPERAMT_3.IsReadOnly = false;
				colvarAGPERAMT_3.DefaultSetting = @"";
				colvarAGPERAMT_3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAGPERAMT_3);

				TableSchema.TableColumn colvarAGPERAMT_4 = new TableSchema.TableColumn(schema);
				colvarAGPERAMT_4.ColumnName = "AGPERAMT_4";
				colvarAGPERAMT_4.DataType = DbType.Decimal;
				colvarAGPERAMT_4.MaxLength = 0;
				colvarAGPERAMT_4.AutoIncrement = false;
				colvarAGPERAMT_4.IsNullable = false;
				colvarAGPERAMT_4.IsPrimaryKey = false;
				colvarAGPERAMT_4.IsForeignKey = false;
				colvarAGPERAMT_4.IsReadOnly = false;
				colvarAGPERAMT_4.DefaultSetting = @"";
				colvarAGPERAMT_4.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAGPERAMT_4);

				TableSchema.TableColumn colvarAGPERAMT_5 = new TableSchema.TableColumn(schema);
				colvarAGPERAMT_5.ColumnName = "AGPERAMT_5";
				colvarAGPERAMT_5.DataType = DbType.Decimal;
				colvarAGPERAMT_5.MaxLength = 0;
				colvarAGPERAMT_5.AutoIncrement = false;
				colvarAGPERAMT_5.IsNullable = false;
				colvarAGPERAMT_5.IsPrimaryKey = false;
				colvarAGPERAMT_5.IsForeignKey = false;
				colvarAGPERAMT_5.IsReadOnly = false;
				colvarAGPERAMT_5.DefaultSetting = @"";
				colvarAGPERAMT_5.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAGPERAMT_5);

				TableSchema.TableColumn colvarAGPERAMT_6 = new TableSchema.TableColumn(schema);
				colvarAGPERAMT_6.ColumnName = "AGPERAMT_6";
				colvarAGPERAMT_6.DataType = DbType.Decimal;
				colvarAGPERAMT_6.MaxLength = 0;
				colvarAGPERAMT_6.AutoIncrement = false;
				colvarAGPERAMT_6.IsNullable = false;
				colvarAGPERAMT_6.IsPrimaryKey = false;
				colvarAGPERAMT_6.IsForeignKey = false;
				colvarAGPERAMT_6.IsReadOnly = false;
				colvarAGPERAMT_6.DefaultSetting = @"";
				colvarAGPERAMT_6.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAGPERAMT_6);

				TableSchema.TableColumn colvarAGPERAMT_7 = new TableSchema.TableColumn(schema);
				colvarAGPERAMT_7.ColumnName = "AGPERAMT_7";
				colvarAGPERAMT_7.DataType = DbType.Decimal;
				colvarAGPERAMT_7.MaxLength = 0;
				colvarAGPERAMT_7.AutoIncrement = false;
				colvarAGPERAMT_7.IsNullable = false;
				colvarAGPERAMT_7.IsPrimaryKey = false;
				colvarAGPERAMT_7.IsForeignKey = false;
				colvarAGPERAMT_7.IsReadOnly = false;
				colvarAGPERAMT_7.DefaultSetting = @"";
				colvarAGPERAMT_7.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAGPERAMT_7);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_GPRM00103",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_GPRM00103 LoadFrom(SAE_GPRM00103 item)
		{
			SAE_GPRM00103 result = new SAE_GPRM00103();
			if (item.AccountID != default(int)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public DateTime LASTPYDT {
			get { return GetColumnValue<DateTime>(Columns.LASTPYDT); }
			set {
				SetColumnValue(Columns.LASTPYDT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LASTPYDT));
			}
		}
		[DataMember]
		public decimal CUSTBLNC {
			get { return GetColumnValue<decimal>(Columns.CUSTBLNC); }
			set {
				SetColumnValue(Columns.CUSTBLNC, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CUSTBLNC));
			}
		}
		[DataMember]
		public decimal AGPERAMT_1 {
			get { return GetColumnValue<decimal>(Columns.AGPERAMT_1); }
			set {
				SetColumnValue(Columns.AGPERAMT_1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AGPERAMT_1));
			}
		}
		[DataMember]
		public decimal AGPERAMT_2 {
			get { return GetColumnValue<decimal>(Columns.AGPERAMT_2); }
			set {
				SetColumnValue(Columns.AGPERAMT_2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AGPERAMT_2));
			}
		}
		[DataMember]
		public decimal AGPERAMT_3 {
			get { return GetColumnValue<decimal>(Columns.AGPERAMT_3); }
			set {
				SetColumnValue(Columns.AGPERAMT_3, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AGPERAMT_3));
			}
		}
		[DataMember]
		public decimal AGPERAMT_4 {
			get { return GetColumnValue<decimal>(Columns.AGPERAMT_4); }
			set {
				SetColumnValue(Columns.AGPERAMT_4, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AGPERAMT_4));
			}
		}
		[DataMember]
		public decimal AGPERAMT_5 {
			get { return GetColumnValue<decimal>(Columns.AGPERAMT_5); }
			set {
				SetColumnValue(Columns.AGPERAMT_5, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AGPERAMT_5));
			}
		}
		[DataMember]
		public decimal AGPERAMT_6 {
			get { return GetColumnValue<decimal>(Columns.AGPERAMT_6); }
			set {
				SetColumnValue(Columns.AGPERAMT_6, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AGPERAMT_6));
			}
		}
		[DataMember]
		public decimal AGPERAMT_7 {
			get { return GetColumnValue<decimal>(Columns.AGPERAMT_7); }
			set {
				SetColumnValue(Columns.AGPERAMT_7, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AGPERAMT_7));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn LASTPYDTColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CUSTBLNCColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn AGPERAMT_1Column
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn AGPERAMT_2Column
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn AGPERAMT_3Column
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn AGPERAMT_4Column
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn AGPERAMT_5Column
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn AGPERAMT_6Column
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn AGPERAMT_7Column
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string LASTPYDT = @"LASTPYDT";
			public static readonly string CUSTBLNC = @"CUSTBLNC";
			public static readonly string AGPERAMT_1 = @"AGPERAMT_1";
			public static readonly string AGPERAMT_2 = @"AGPERAMT_2";
			public static readonly string AGPERAMT_3 = @"AGPERAMT_3";
			public static readonly string AGPERAMT_4 = @"AGPERAMT_4";
			public static readonly string AGPERAMT_5 = @"AGPERAMT_5";
			public static readonly string AGPERAMT_6 = @"AGPERAMT_6";
			public static readonly string AGPERAMT_7 = @"AGPERAMT_7";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_GPSVC00600 class.
	/// </summary>
	[DataContract]
	public partial class SAE_GPSVC00600Collection : ActiveList<SAE_GPSVC00600, SAE_GPSVC00600Collection>
	{
		public static SAE_GPSVC00600Collection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_GPSVC00600Collection result = new SAE_GPSVC00600Collection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_GPSVC00600 item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_GPSVC00600 table.
	/// </summary>
	[DataContract]
	public partial class SAE_GPSVC00600 : ActiveRecord<SAE_GPSVC00600>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_GPSVC00600()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_GPSVC00600", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarRMR = new TableSchema.TableColumn(schema);
				colvarRMR.ColumnName = "RMR";
				colvarRMR.DataType = DbType.AnsiStringFixedLength;
				colvarRMR.MaxLength = 11;
				colvarRMR.AutoIncrement = false;
				colvarRMR.IsNullable = false;
				colvarRMR.IsPrimaryKey = false;
				colvarRMR.IsForeignKey = false;
				colvarRMR.IsReadOnly = false;
				colvarRMR.DefaultSetting = @"";
				colvarRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRMR);

				TableSchema.TableColumn colvarContractType = new TableSchema.TableColumn(schema);
				colvarContractType.ColumnName = "ContractType";
				colvarContractType.DataType = DbType.AnsiStringFixedLength;
				colvarContractType.MaxLength = 11;
				colvarContractType.AutoIncrement = false;
				colvarContractType.IsNullable = false;
				colvarContractType.IsPrimaryKey = false;
				colvarContractType.IsForeignKey = false;
				colvarContractType.IsReadOnly = false;
				colvarContractType.DefaultSetting = @"";
				colvarContractType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractType);

				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiStringFixedLength;
				colvarDescription.MaxLength = 31;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);

				TableSchema.TableColumn colvarTOTAL = new TableSchema.TableColumn(schema);
				colvarTOTAL.ColumnName = "TOTAL";
				colvarTOTAL.DataType = DbType.Decimal;
				colvarTOTAL.MaxLength = 0;
				colvarTOTAL.AutoIncrement = false;
				colvarTOTAL.IsNullable = false;
				colvarTOTAL.IsPrimaryKey = false;
				colvarTOTAL.IsForeignKey = false;
				colvarTOTAL.IsReadOnly = false;
				colvarTOTAL.DefaultSetting = @"";
				colvarTOTAL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTOTAL);

				TableSchema.TableColumn colvarTOTBIL = new TableSchema.TableColumn(schema);
				colvarTOTBIL.ColumnName = "TOTBIL";
				colvarTOTBIL.DataType = DbType.Decimal;
				colvarTOTBIL.MaxLength = 0;
				colvarTOTBIL.AutoIncrement = false;
				colvarTOTBIL.IsNullable = false;
				colvarTOTBIL.IsPrimaryKey = false;
				colvarTOTBIL.IsForeignKey = false;
				colvarTOTBIL.IsReadOnly = false;
				colvarTOTBIL.DefaultSetting = @"";
				colvarTOTBIL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTOTBIL);

				TableSchema.TableColumn colvarCredit_Hold = new TableSchema.TableColumn(schema);
				colvarCredit_Hold.ColumnName = "Credit_Hold";
				colvarCredit_Hold.DataType = DbType.Byte;
				colvarCredit_Hold.MaxLength = 0;
				colvarCredit_Hold.AutoIncrement = false;
				colvarCredit_Hold.IsNullable = false;
				colvarCredit_Hold.IsPrimaryKey = false;
				colvarCredit_Hold.IsForeignKey = false;
				colvarCredit_Hold.IsReadOnly = false;
				colvarCredit_Hold.DefaultSetting = @"";
				colvarCredit_Hold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCredit_Hold);

				TableSchema.TableColumn colvarBILSTAT = new TableSchema.TableColumn(schema);
				colvarBILSTAT.ColumnName = "BILSTAT";
				colvarBILSTAT.DataType = DbType.Int16;
				colvarBILSTAT.MaxLength = 0;
				colvarBILSTAT.AutoIncrement = false;
				colvarBILSTAT.IsNullable = false;
				colvarBILSTAT.IsPrimaryKey = false;
				colvarBILSTAT.IsForeignKey = false;
				colvarBILSTAT.IsReadOnly = false;
				colvarBILSTAT.DefaultSetting = @"";
				colvarBILSTAT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBILSTAT);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_GPSVC00600",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public string RMR {
			get { return GetColumnValue<string>(Columns.RMR); }
			set {
				SetColumnValue(Columns.RMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RMR));
			}
		}
		[DataMember]
		public string ContractType {
			get { return GetColumnValue<string>(Columns.ContractType); }
			set {
				SetColumnValue(Columns.ContractType, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractType));
			}
		}
		[DataMember]
		public string Description {
			get { return GetColumnValue<string>(Columns.Description); }
			set {
				SetColumnValue(Columns.Description, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Description));
			}
		}
		[DataMember]
		public decimal TOTAL {
			get { return GetColumnValue<decimal>(Columns.TOTAL); }
			set {
				SetColumnValue(Columns.TOTAL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TOTAL));
			}
		}
		[DataMember]
		public decimal TOTBIL {
			get { return GetColumnValue<decimal>(Columns.TOTBIL); }
			set {
				SetColumnValue(Columns.TOTBIL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TOTBIL));
			}
		}
		[DataMember]
		public byte Credit_Hold {
			get { return GetColumnValue<byte>(Columns.Credit_Hold); }
			set {
				SetColumnValue(Columns.Credit_Hold, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Credit_Hold));
			}
		}
		[DataMember]
		public short BILSTAT {
			get { return GetColumnValue<short>(Columns.BILSTAT); }
			set {
				SetColumnValue(Columns.BILSTAT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BILSTAT));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return RMR;
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RMRColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ContractTypeColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn DescriptionColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TOTALColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TOTBILColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn Credit_HoldColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn BILSTATColumn
		{
			get { return Schema.Columns[7]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string RMR = @"RMR";
			public static readonly string ContractType = @"ContractType";
			public static readonly string Description = @"Description";
			public static readonly string TOTAL = @"TOTAL";
			public static readonly string TOTBIL = @"TOTBIL";
			public static readonly string Credit_Hold = @"Credit_Hold";
			public static readonly string BILSTAT = @"BILSTAT";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_IndividualSalesRecord class.
	/// </summary>
	[DataContract]
	public partial class SAE_IndividualSalesRecordCollection : ActiveList<SAE_IndividualSalesRecord, SAE_IndividualSalesRecordCollection>
	{
		public static SAE_IndividualSalesRecordCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_IndividualSalesRecordCollection result = new SAE_IndividualSalesRecordCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_IndividualSalesRecord item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_IndividualSalesRecords table.
	/// </summary>
	[DataContract]
	public partial class SAE_IndividualSalesRecord : ActiveRecord<SAE_IndividualSalesRecord>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_IndividualSalesRecord()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_IndividualSalesRecords", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRowID = new TableSchema.TableColumn(schema);
				colvarRowID.ColumnName = "RowID";
				colvarRowID.DataType = DbType.Int32;
				colvarRowID.MaxLength = 0;
				colvarRowID.AutoIncrement = true;
				colvarRowID.IsNullable = false;
				colvarRowID.IsPrimaryKey = true;
				colvarRowID.IsForeignKey = false;
				colvarRowID.IsReadOnly = false;
				colvarRowID.DefaultSetting = @"";
				colvarRowID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 100;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = false;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = false;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarPublicFullName = new TableSchema.TableColumn(schema);
				colvarPublicFullName.ColumnName = "PublicFullName";
				colvarPublicFullName.DataType = DbType.String;
				colvarPublicFullName.MaxLength = 101;
				colvarPublicFullName.AutoIncrement = false;
				colvarPublicFullName.IsNullable = false;
				colvarPublicFullName.IsPrimaryKey = false;
				colvarPublicFullName.IsForeignKey = false;
				colvarPublicFullName.IsReadOnly = false;
				colvarPublicFullName.DefaultSetting = @"";
				colvarPublicFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPublicFullName);

				TableSchema.TableColumn colvarOfficeName = new TableSchema.TableColumn(schema);
				colvarOfficeName.ColumnName = "OfficeName";
				colvarOfficeName.DataType = DbType.String;
				colvarOfficeName.MaxLength = 100;
				colvarOfficeName.AutoIncrement = false;
				colvarOfficeName.IsNullable = true;
				colvarOfficeName.IsPrimaryKey = false;
				colvarOfficeName.IsForeignKey = false;
				colvarOfficeName.IsReadOnly = false;
				colvarOfficeName.DefaultSetting = @"";
				colvarOfficeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeName);

				TableSchema.TableColumn colvarNormalizedInstallDate = new TableSchema.TableColumn(schema);
				colvarNormalizedInstallDate.ColumnName = "NormalizedInstallDate";
				colvarNormalizedInstallDate.DataType = DbType.DateTime;
				colvarNormalizedInstallDate.MaxLength = 0;
				colvarNormalizedInstallDate.AutoIncrement = false;
				colvarNormalizedInstallDate.IsNullable = false;
				colvarNormalizedInstallDate.IsPrimaryKey = false;
				colvarNormalizedInstallDate.IsForeignKey = false;
				colvarNormalizedInstallDate.IsReadOnly = false;
				colvarNormalizedInstallDate.DefaultSetting = @"";
				colvarNormalizedInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNormalizedInstallDate);

				TableSchema.TableColumn colvarNInstalls = new TableSchema.TableColumn(schema);
				colvarNInstalls.ColumnName = "NInstalls";
				colvarNInstalls.DataType = DbType.Int32;
				colvarNInstalls.MaxLength = 0;
				colvarNInstalls.AutoIncrement = false;
				colvarNInstalls.IsNullable = false;
				colvarNInstalls.IsPrimaryKey = false;
				colvarNInstalls.IsForeignKey = false;
				colvarNInstalls.IsReadOnly = false;
				colvarNInstalls.DefaultSetting = @"";
				colvarNInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNInstalls);

				TableSchema.TableColumn colvarDayNumber = new TableSchema.TableColumn(schema);
				colvarDayNumber.ColumnName = "DayNumber";
				colvarDayNumber.DataType = DbType.Int32;
				colvarDayNumber.MaxLength = 0;
				colvarDayNumber.AutoIncrement = false;
				colvarDayNumber.IsNullable = false;
				colvarDayNumber.IsPrimaryKey = false;
				colvarDayNumber.IsForeignKey = false;
				colvarDayNumber.IsReadOnly = false;
				colvarDayNumber.DefaultSetting = @"";
				colvarDayNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDayNumber);

				TableSchema.TableColumn colvarMonthNumber = new TableSchema.TableColumn(schema);
				colvarMonthNumber.ColumnName = "MonthNumber";
				colvarMonthNumber.DataType = DbType.Int32;
				colvarMonthNumber.MaxLength = 0;
				colvarMonthNumber.AutoIncrement = false;
				colvarMonthNumber.IsNullable = false;
				colvarMonthNumber.IsPrimaryKey = false;
				colvarMonthNumber.IsForeignKey = false;
				colvarMonthNumber.IsReadOnly = false;
				colvarMonthNumber.DefaultSetting = @"";
				colvarMonthNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthNumber);

				TableSchema.TableColumn colvarYearNumber = new TableSchema.TableColumn(schema);
				colvarYearNumber.ColumnName = "YearNumber";
				colvarYearNumber.DataType = DbType.Int32;
				colvarYearNumber.MaxLength = 0;
				colvarYearNumber.AutoIncrement = false;
				colvarYearNumber.IsNullable = false;
				colvarYearNumber.IsPrimaryKey = false;
				colvarYearNumber.IsForeignKey = false;
				colvarYearNumber.IsReadOnly = false;
				colvarYearNumber.DefaultSetting = @"";
				colvarYearNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYearNumber);

				TableSchema.TableColumn colvarWeekNumber = new TableSchema.TableColumn(schema);
				colvarWeekNumber.ColumnName = "WeekNumber";
				colvarWeekNumber.DataType = DbType.Int32;
				colvarWeekNumber.MaxLength = 0;
				colvarWeekNumber.AutoIncrement = false;
				colvarWeekNumber.IsNullable = false;
				colvarWeekNumber.IsPrimaryKey = false;
				colvarWeekNumber.IsForeignKey = false;
				colvarWeekNumber.IsReadOnly = false;
				colvarWeekNumber.DefaultSetting = @"";
				colvarWeekNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeekNumber);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_IndividualSalesRecords",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_IndividualSalesRecord LoadFrom(SAE_IndividualSalesRecord item)
		{
			SAE_IndividualSalesRecord result = new SAE_IndividualSalesRecord();
			if (item.RowID != default(int)) {
				result.LoadByKey(item.RowID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RowID {
			get { return GetColumnValue<int>(Columns.RowID); }
			set {
				SetColumnValue(Columns.RowID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RowID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set {
				SetColumnValue(Columns.FullName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullName));
			}
		}
		[DataMember]
		public string PublicFullName {
			get { return GetColumnValue<string>(Columns.PublicFullName); }
			set {
				SetColumnValue(Columns.PublicFullName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PublicFullName));
			}
		}
		[DataMember]
		public string OfficeName {
			get { return GetColumnValue<string>(Columns.OfficeName); }
			set {
				SetColumnValue(Columns.OfficeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeName));
			}
		}
		[DataMember]
		public DateTime NormalizedInstallDate {
			get { return GetColumnValue<DateTime>(Columns.NormalizedInstallDate); }
			set {
				SetColumnValue(Columns.NormalizedInstallDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NormalizedInstallDate));
			}
		}
		[DataMember]
		public int NInstalls {
			get { return GetColumnValue<int>(Columns.NInstalls); }
			set {
				SetColumnValue(Columns.NInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NInstalls));
			}
		}
		[DataMember]
		public int DayNumber {
			get { return GetColumnValue<int>(Columns.DayNumber); }
			set {
				SetColumnValue(Columns.DayNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DayNumber));
			}
		}
		[DataMember]
		public int MonthNumber {
			get { return GetColumnValue<int>(Columns.MonthNumber); }
			set {
				SetColumnValue(Columns.MonthNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonthNumber));
			}
		}
		[DataMember]
		public int YearNumber {
			get { return GetColumnValue<int>(Columns.YearNumber); }
			set {
				SetColumnValue(Columns.YearNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.YearNumber));
			}
		}
		[DataMember]
		public int WeekNumber {
			get { return GetColumnValue<int>(Columns.WeekNumber); }
			set {
				SetColumnValue(Columns.WeekNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WeekNumber));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return RowID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RowIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn PublicFullNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn OfficeNameColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn NormalizedInstallDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn NInstallsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn DayNumberColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn MonthNumberColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn YearNumberColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn WeekNumberColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RowID = @"RowID";
			public static readonly string UserID = @"UserID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string FullName = @"FullName";
			public static readonly string PublicFullName = @"PublicFullName";
			public static readonly string OfficeName = @"OfficeName";
			public static readonly string NormalizedInstallDate = @"NormalizedInstallDate";
			public static readonly string NInstalls = @"NInstalls";
			public static readonly string DayNumber = @"DayNumber";
			public static readonly string MonthNumber = @"MonthNumber";
			public static readonly string YearNumber = @"YearNumber";
			public static readonly string WeekNumber = @"WeekNumber";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RowID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_MaxCredit class.
	/// </summary>
	[DataContract]
	public partial class SAE_MaxCreditCollection : ActiveList<SAE_MaxCredit, SAE_MaxCreditCollection>
	{
		public static SAE_MaxCreditCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_MaxCreditCollection result = new SAE_MaxCreditCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_MaxCredit item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_MaxCredit table.
	/// </summary>
	[DataContract]
	public partial class SAE_MaxCredit : ActiveRecord<SAE_MaxCredit>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_MaxCredit()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_MaxCredit", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarIndustryAccountID = new TableSchema.TableColumn(schema);
				colvarIndustryAccountID.ColumnName = "IndustryAccountID";
				colvarIndustryAccountID.DataType = DbType.Int32;
				colvarIndustryAccountID.MaxLength = 0;
				colvarIndustryAccountID.AutoIncrement = false;
				colvarIndustryAccountID.IsNullable = true;
				colvarIndustryAccountID.IsPrimaryKey = false;
				colvarIndustryAccountID.IsForeignKey = false;
				colvarIndustryAccountID.IsReadOnly = false;
				colvarIndustryAccountID.DefaultSetting = @"";
				colvarIndustryAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryAccountID);

				TableSchema.TableColumn colvarIndustryNumber = new TableSchema.TableColumn(schema);
				colvarIndustryNumber.ColumnName = "IndustryNumber";
				colvarIndustryNumber.DataType = DbType.AnsiString;
				colvarIndustryNumber.MaxLength = 20;
				colvarIndustryNumber.AutoIncrement = false;
				colvarIndustryNumber.IsNullable = true;
				colvarIndustryNumber.IsPrimaryKey = false;
				colvarIndustryNumber.IsForeignKey = false;
				colvarIndustryNumber.IsReadOnly = false;
				colvarIndustryNumber.DefaultSetting = @"";
				colvarIndustryNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryNumber);

				TableSchema.TableColumn colvarCreditScore = new TableSchema.TableColumn(schema);
				colvarCreditScore.ColumnName = "CreditScore";
				colvarCreditScore.DataType = DbType.Int16;
				colvarCreditScore.MaxLength = 0;
				colvarCreditScore.AutoIncrement = false;
				colvarCreditScore.IsNullable = true;
				colvarCreditScore.IsPrimaryKey = false;
				colvarCreditScore.IsForeignKey = false;
				colvarCreditScore.IsReadOnly = false;
				colvarCreditScore.DefaultSetting = @"";
				colvarCreditScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScore);

				TableSchema.TableColumn colvarQualificationDate = new TableSchema.TableColumn(schema);
				colvarQualificationDate.ColumnName = "QualificationDate";
				colvarQualificationDate.DataType = DbType.DateTime;
				colvarQualificationDate.MaxLength = 0;
				colvarQualificationDate.AutoIncrement = false;
				colvarQualificationDate.IsNullable = true;
				colvarQualificationDate.IsPrimaryKey = false;
				colvarQualificationDate.IsForeignKey = false;
				colvarQualificationDate.IsReadOnly = false;
				colvarQualificationDate.DefaultSetting = @"";
				colvarQualificationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQualificationDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_MaxCredit",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_MaxCredit LoadFrom(SAE_MaxCredit item)
		{
			SAE_MaxCredit result = new SAE_MaxCredit();
			if (item.AccountID != default(int)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public int? IndustryAccountID {
			get { return GetColumnValue<int?>(Columns.IndustryAccountID); }
			set {
				SetColumnValue(Columns.IndustryAccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryAccountID));
			}
		}
		[DataMember]
		public string IndustryNumber {
			get { return GetColumnValue<string>(Columns.IndustryNumber); }
			set {
				SetColumnValue(Columns.IndustryNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryNumber));
			}
		}
		[DataMember]
		public short? CreditScore {
			get { return GetColumnValue<short?>(Columns.CreditScore); }
			set {
				SetColumnValue(Columns.CreditScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScore));
			}
		}
		[DataMember]
		public DateTime? QualificationDate {
			get { return GetColumnValue<DateTime?>(Columns.QualificationDate); }
			set {
				SetColumnValue(Columns.QualificationDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QualificationDate));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn IndustryAccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn IndustryNumberColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CreditScoreColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn QualificationDateColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string IndustryAccountID = @"IndustryAccountID";
			public static readonly string IndustryNumber = @"IndustryNumber";
			public static readonly string CreditScore = @"CreditScore";
			public static readonly string QualificationDate = @"QualificationDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_OfficeSalesRecord class.
	/// </summary>
	[DataContract]
	public partial class SAE_OfficeSalesRecordCollection : ActiveList<SAE_OfficeSalesRecord, SAE_OfficeSalesRecordCollection>
	{
		public static SAE_OfficeSalesRecordCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_OfficeSalesRecordCollection result = new SAE_OfficeSalesRecordCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_OfficeSalesRecord item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_OfficeSalesRecords table.
	/// </summary>
	[DataContract]
	public partial class SAE_OfficeSalesRecord : ActiveRecord<SAE_OfficeSalesRecord>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_OfficeSalesRecord()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_OfficeSalesRecords", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRowID = new TableSchema.TableColumn(schema);
				colvarRowID.ColumnName = "RowID";
				colvarRowID.DataType = DbType.Int32;
				colvarRowID.MaxLength = 0;
				colvarRowID.AutoIncrement = true;
				colvarRowID.IsNullable = false;
				colvarRowID.IsPrimaryKey = true;
				colvarRowID.IsForeignKey = false;
				colvarRowID.IsReadOnly = false;
				colvarRowID.DefaultSetting = @"";
				colvarRowID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRowID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = false;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarOfficeName = new TableSchema.TableColumn(schema);
				colvarOfficeName.ColumnName = "OfficeName";
				colvarOfficeName.DataType = DbType.String;
				colvarOfficeName.MaxLength = 100;
				colvarOfficeName.AutoIncrement = false;
				colvarOfficeName.IsNullable = false;
				colvarOfficeName.IsPrimaryKey = false;
				colvarOfficeName.IsForeignKey = false;
				colvarOfficeName.IsReadOnly = false;
				colvarOfficeName.DefaultSetting = @"";
				colvarOfficeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeName);

				TableSchema.TableColumn colvarNormalizedInstallDate = new TableSchema.TableColumn(schema);
				colvarNormalizedInstallDate.ColumnName = "NormalizedInstallDate";
				colvarNormalizedInstallDate.DataType = DbType.DateTime;
				colvarNormalizedInstallDate.MaxLength = 0;
				colvarNormalizedInstallDate.AutoIncrement = false;
				colvarNormalizedInstallDate.IsNullable = false;
				colvarNormalizedInstallDate.IsPrimaryKey = false;
				colvarNormalizedInstallDate.IsForeignKey = false;
				colvarNormalizedInstallDate.IsReadOnly = false;
				colvarNormalizedInstallDate.DefaultSetting = @"";
				colvarNormalizedInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNormalizedInstallDate);

				TableSchema.TableColumn colvarNInstalls = new TableSchema.TableColumn(schema);
				colvarNInstalls.ColumnName = "NInstalls";
				colvarNInstalls.DataType = DbType.Int32;
				colvarNInstalls.MaxLength = 0;
				colvarNInstalls.AutoIncrement = false;
				colvarNInstalls.IsNullable = false;
				colvarNInstalls.IsPrimaryKey = false;
				colvarNInstalls.IsForeignKey = false;
				colvarNInstalls.IsReadOnly = false;
				colvarNInstalls.DefaultSetting = @"";
				colvarNInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNInstalls);

				TableSchema.TableColumn colvarDayNumber = new TableSchema.TableColumn(schema);
				colvarDayNumber.ColumnName = "DayNumber";
				colvarDayNumber.DataType = DbType.Int32;
				colvarDayNumber.MaxLength = 0;
				colvarDayNumber.AutoIncrement = false;
				colvarDayNumber.IsNullable = false;
				colvarDayNumber.IsPrimaryKey = false;
				colvarDayNumber.IsForeignKey = false;
				colvarDayNumber.IsReadOnly = false;
				colvarDayNumber.DefaultSetting = @"";
				colvarDayNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDayNumber);

				TableSchema.TableColumn colvarMonthNumber = new TableSchema.TableColumn(schema);
				colvarMonthNumber.ColumnName = "MonthNumber";
				colvarMonthNumber.DataType = DbType.Int32;
				colvarMonthNumber.MaxLength = 0;
				colvarMonthNumber.AutoIncrement = false;
				colvarMonthNumber.IsNullable = false;
				colvarMonthNumber.IsPrimaryKey = false;
				colvarMonthNumber.IsForeignKey = false;
				colvarMonthNumber.IsReadOnly = false;
				colvarMonthNumber.DefaultSetting = @"";
				colvarMonthNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMonthNumber);

				TableSchema.TableColumn colvarYearNumber = new TableSchema.TableColumn(schema);
				colvarYearNumber.ColumnName = "YearNumber";
				colvarYearNumber.DataType = DbType.Int32;
				colvarYearNumber.MaxLength = 0;
				colvarYearNumber.AutoIncrement = false;
				colvarYearNumber.IsNullable = false;
				colvarYearNumber.IsPrimaryKey = false;
				colvarYearNumber.IsForeignKey = false;
				colvarYearNumber.IsReadOnly = false;
				colvarYearNumber.DefaultSetting = @"";
				colvarYearNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYearNumber);

				TableSchema.TableColumn colvarWeekNumber = new TableSchema.TableColumn(schema);
				colvarWeekNumber.ColumnName = "WeekNumber";
				colvarWeekNumber.DataType = DbType.Int32;
				colvarWeekNumber.MaxLength = 0;
				colvarWeekNumber.AutoIncrement = false;
				colvarWeekNumber.IsNullable = false;
				colvarWeekNumber.IsPrimaryKey = false;
				colvarWeekNumber.IsForeignKey = false;
				colvarWeekNumber.IsReadOnly = false;
				colvarWeekNumber.DefaultSetting = @"";
				colvarWeekNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeekNumber);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_OfficeSalesRecords",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_OfficeSalesRecord LoadFrom(SAE_OfficeSalesRecord item)
		{
			SAE_OfficeSalesRecord result = new SAE_OfficeSalesRecord();
			if (item.RowID != default(int)) {
				result.LoadByKey(item.RowID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RowID {
			get { return GetColumnValue<int>(Columns.RowID); }
			set {
				SetColumnValue(Columns.RowID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RowID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public string OfficeName {
			get { return GetColumnValue<string>(Columns.OfficeName); }
			set {
				SetColumnValue(Columns.OfficeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeName));
			}
		}
		[DataMember]
		public DateTime NormalizedInstallDate {
			get { return GetColumnValue<DateTime>(Columns.NormalizedInstallDate); }
			set {
				SetColumnValue(Columns.NormalizedInstallDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NormalizedInstallDate));
			}
		}
		[DataMember]
		public int NInstalls {
			get { return GetColumnValue<int>(Columns.NInstalls); }
			set {
				SetColumnValue(Columns.NInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NInstalls));
			}
		}
		[DataMember]
		public int DayNumber {
			get { return GetColumnValue<int>(Columns.DayNumber); }
			set {
				SetColumnValue(Columns.DayNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DayNumber));
			}
		}
		[DataMember]
		public int MonthNumber {
			get { return GetColumnValue<int>(Columns.MonthNumber); }
			set {
				SetColumnValue(Columns.MonthNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MonthNumber));
			}
		}
		[DataMember]
		public int YearNumber {
			get { return GetColumnValue<int>(Columns.YearNumber); }
			set {
				SetColumnValue(Columns.YearNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.YearNumber));
			}
		}
		[DataMember]
		public int WeekNumber {
			get { return GetColumnValue<int>(Columns.WeekNumber); }
			set {
				SetColumnValue(Columns.WeekNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WeekNumber));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return RowID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RowIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn OfficeNameColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn NormalizedInstallDateColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn NInstallsColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn DayNumberColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn MonthNumberColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn YearNumberColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn WeekNumberColumn
		{
			get { return Schema.Columns[10]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RowID = @"RowID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string UserID = @"UserID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string OfficeName = @"OfficeName";
			public static readonly string NormalizedInstallDate = @"NormalizedInstallDate";
			public static readonly string NInstalls = @"NInstalls";
			public static readonly string DayNumber = @"DayNumber";
			public static readonly string MonthNumber = @"MonthNumber";
			public static readonly string YearNumber = @"YearNumber";
			public static readonly string WeekNumber = @"WeekNumber";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RowID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_OfficeUpdate class.
	/// </summary>
	[DataContract]
	public partial class SAE_OfficeUpdateCollection : ActiveList<SAE_OfficeUpdate, SAE_OfficeUpdateCollection>
	{
		public static SAE_OfficeUpdateCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_OfficeUpdateCollection result = new SAE_OfficeUpdateCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_OfficeUpdate item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_OfficeUpdate table.
	/// </summary>
	[DataContract]
	public partial class SAE_OfficeUpdate : ActiveRecord<SAE_OfficeUpdate>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_OfficeUpdate()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_OfficeUpdate", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int32;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = true;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = true;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarFROMTeamLocationID = new TableSchema.TableColumn(schema);
				colvarFROMTeamLocationID.ColumnName = "FROMTeamLocationID";
				colvarFROMTeamLocationID.DataType = DbType.Int32;
				colvarFROMTeamLocationID.MaxLength = 0;
				colvarFROMTeamLocationID.AutoIncrement = false;
				colvarFROMTeamLocationID.IsNullable = false;
				colvarFROMTeamLocationID.IsPrimaryKey = false;
				colvarFROMTeamLocationID.IsForeignKey = false;
				colvarFROMTeamLocationID.IsReadOnly = false;
				colvarFROMTeamLocationID.DefaultSetting = @"";
				colvarFROMTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFROMTeamLocationID);

				TableSchema.TableColumn colvarFromOffice = new TableSchema.TableColumn(schema);
				colvarFromOffice.ColumnName = "FromOffice";
				colvarFromOffice.DataType = DbType.String;
				colvarFromOffice.MaxLength = 50;
				colvarFromOffice.AutoIncrement = false;
				colvarFromOffice.IsNullable = true;
				colvarFromOffice.IsPrimaryKey = false;
				colvarFromOffice.IsForeignKey = false;
				colvarFromOffice.IsReadOnly = false;
				colvarFromOffice.DefaultSetting = @"";
				colvarFromOffice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFromOffice);

				TableSchema.TableColumn colvarTOTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTOTeamLocationID.ColumnName = "TOTeamLocationID";
				colvarTOTeamLocationID.DataType = DbType.Int32;
				colvarTOTeamLocationID.MaxLength = 0;
				colvarTOTeamLocationID.AutoIncrement = false;
				colvarTOTeamLocationID.IsNullable = false;
				colvarTOTeamLocationID.IsPrimaryKey = false;
				colvarTOTeamLocationID.IsForeignKey = false;
				colvarTOTeamLocationID.IsReadOnly = false;
				colvarTOTeamLocationID.DefaultSetting = @"";
				colvarTOTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTOTeamLocationID);

				TableSchema.TableColumn colvarToOffice = new TableSchema.TableColumn(schema);
				colvarToOffice.ColumnName = "ToOffice";
				colvarToOffice.DataType = DbType.String;
				colvarToOffice.MaxLength = 50;
				colvarToOffice.AutoIncrement = false;
				colvarToOffice.IsNullable = true;
				colvarToOffice.IsPrimaryKey = false;
				colvarToOffice.IsForeignKey = false;
				colvarToOffice.IsReadOnly = false;
				colvarToOffice.DefaultSetting = @"";
				colvarToOffice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarToOffice);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_OfficeUpdate",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_OfficeUpdate LoadFrom(SAE_OfficeUpdate item)
		{
			SAE_OfficeUpdate result = new SAE_OfficeUpdate();
			if (item.ID != default(int)) {
				result.LoadByKey(item.ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ID {
			get { return GetColumnValue<int>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public int FROMTeamLocationID {
			get { return GetColumnValue<int>(Columns.FROMTeamLocationID); }
			set {
				SetColumnValue(Columns.FROMTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FROMTeamLocationID));
			}
		}
		[DataMember]
		public string FromOffice {
			get { return GetColumnValue<string>(Columns.FromOffice); }
			set {
				SetColumnValue(Columns.FromOffice, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FromOffice));
			}
		}
		[DataMember]
		public int TOTeamLocationID {
			get { return GetColumnValue<int>(Columns.TOTeamLocationID); }
			set {
				SetColumnValue(Columns.TOTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TOTeamLocationID));
			}
		}
		[DataMember]
		public string ToOffice {
			get { return GetColumnValue<string>(Columns.ToOffice); }
			set {
				SetColumnValue(Columns.ToOffice, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ToOffice));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn FROMTeamLocationIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn FromOfficeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TOTeamLocationIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ToOfficeColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ID = @"ID";
			public static readonly string AccountID = @"AccountID";
			public static readonly string FROMTeamLocationID = @"FROMTeamLocationID";
			public static readonly string FromOffice = @"FromOffice";
			public static readonly string TOTeamLocationID = @"TOTeamLocationID";
			public static readonly string ToOffice = @"ToOffice";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_OfficeUpdateNot class.
	/// </summary>
	[DataContract]
	public partial class SAE_OfficeUpdateNotCollection : ActiveList<SAE_OfficeUpdateNot, SAE_OfficeUpdateNotCollection>
	{
		public static SAE_OfficeUpdateNotCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_OfficeUpdateNotCollection result = new SAE_OfficeUpdateNotCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_OfficeUpdateNot item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_OfficeUpdateNot table.
	/// </summary>
	[DataContract]
	public partial class SAE_OfficeUpdateNot : ActiveRecord<SAE_OfficeUpdateNot>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_OfficeUpdateNot()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_OfficeUpdateNot", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarID = new TableSchema.TableColumn(schema);
				colvarID.ColumnName = "ID";
				colvarID.DataType = DbType.Int32;
				colvarID.MaxLength = 0;
				colvarID.AutoIncrement = true;
				colvarID.IsNullable = false;
				colvarID.IsPrimaryKey = true;
				colvarID.IsForeignKey = false;
				colvarID.IsReadOnly = false;
				colvarID.DefaultSetting = @"";
				colvarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarFROMTeamLocationID = new TableSchema.TableColumn(schema);
				colvarFROMTeamLocationID.ColumnName = "FROMTeamLocationID";
				colvarFROMTeamLocationID.DataType = DbType.Int32;
				colvarFROMTeamLocationID.MaxLength = 0;
				colvarFROMTeamLocationID.AutoIncrement = false;
				colvarFROMTeamLocationID.IsNullable = false;
				colvarFROMTeamLocationID.IsPrimaryKey = false;
				colvarFROMTeamLocationID.IsForeignKey = false;
				colvarFROMTeamLocationID.IsReadOnly = false;
				colvarFROMTeamLocationID.DefaultSetting = @"";
				colvarFROMTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFROMTeamLocationID);

				TableSchema.TableColumn colvarFromOffice = new TableSchema.TableColumn(schema);
				colvarFromOffice.ColumnName = "FromOffice";
				colvarFromOffice.DataType = DbType.String;
				colvarFromOffice.MaxLength = 50;
				colvarFromOffice.AutoIncrement = false;
				colvarFromOffice.IsNullable = true;
				colvarFromOffice.IsPrimaryKey = false;
				colvarFromOffice.IsForeignKey = false;
				colvarFromOffice.IsReadOnly = false;
				colvarFromOffice.DefaultSetting = @"";
				colvarFromOffice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFromOffice);

				TableSchema.TableColumn colvarTOTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTOTeamLocationID.ColumnName = "TOTeamLocationID";
				colvarTOTeamLocationID.DataType = DbType.Int32;
				colvarTOTeamLocationID.MaxLength = 0;
				colvarTOTeamLocationID.AutoIncrement = false;
				colvarTOTeamLocationID.IsNullable = false;
				colvarTOTeamLocationID.IsPrimaryKey = false;
				colvarTOTeamLocationID.IsForeignKey = false;
				colvarTOTeamLocationID.IsReadOnly = false;
				colvarTOTeamLocationID.DefaultSetting = @"";
				colvarTOTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTOTeamLocationID);

				TableSchema.TableColumn colvarToOffice = new TableSchema.TableColumn(schema);
				colvarToOffice.ColumnName = "ToOffice";
				colvarToOffice.DataType = DbType.String;
				colvarToOffice.MaxLength = 50;
				colvarToOffice.AutoIncrement = false;
				colvarToOffice.IsNullable = true;
				colvarToOffice.IsPrimaryKey = false;
				colvarToOffice.IsForeignKey = false;
				colvarToOffice.IsReadOnly = false;
				colvarToOffice.DefaultSetting = @"";
				colvarToOffice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarToOffice);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_OfficeUpdateNot",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_OfficeUpdateNot LoadFrom(SAE_OfficeUpdateNot item)
		{
			SAE_OfficeUpdateNot result = new SAE_OfficeUpdateNot();
			if (item.ID != default(int)) {
				result.LoadByKey(item.ID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int ID {
			get { return GetColumnValue<int>(Columns.ID); }
			set {
				SetColumnValue(Columns.ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ID));
			}
		}
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public int FROMTeamLocationID {
			get { return GetColumnValue<int>(Columns.FROMTeamLocationID); }
			set {
				SetColumnValue(Columns.FROMTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FROMTeamLocationID));
			}
		}
		[DataMember]
		public string FromOffice {
			get { return GetColumnValue<string>(Columns.FromOffice); }
			set {
				SetColumnValue(Columns.FromOffice, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FromOffice));
			}
		}
		[DataMember]
		public int TOTeamLocationID {
			get { return GetColumnValue<int>(Columns.TOTeamLocationID); }
			set {
				SetColumnValue(Columns.TOTeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TOTeamLocationID));
			}
		}
		[DataMember]
		public string ToOffice {
			get { return GetColumnValue<string>(Columns.ToOffice); }
			set {
				SetColumnValue(Columns.ToOffice, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ToOffice));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return ID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn IDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn FROMTeamLocationIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn FromOfficeColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TOTeamLocationIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn ToOfficeColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string ID = @"ID";
			public static readonly string AccountID = @"AccountID";
			public static readonly string FROMTeamLocationID = @"FROMTeamLocationID";
			public static readonly string FromOffice = @"FromOffice";
			public static readonly string TOTeamLocationID = @"TOTeamLocationID";
			public static readonly string ToOffice = @"ToOffice";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return ID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_PreSeason2007 class.
	/// </summary>
	[DataContract]
	public partial class SAE_PreSeason2007Collection : ActiveList<SAE_PreSeason2007, SAE_PreSeason2007Collection>
	{
		public static SAE_PreSeason2007Collection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_PreSeason2007Collection result = new SAE_PreSeason2007Collection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_PreSeason2007 item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_PreSeason2007 table.
	/// </summary>
	[DataContract]
	public partial class SAE_PreSeason2007 : ActiveRecord<SAE_PreSeason2007>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_PreSeason2007()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_PreSeason2007", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = false;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarTeamLocation = new TableSchema.TableColumn(schema);
				colvarTeamLocation.ColumnName = "TeamLocation";
				colvarTeamLocation.DataType = DbType.AnsiString;
				colvarTeamLocation.MaxLength = 15;
				colvarTeamLocation.AutoIncrement = false;
				colvarTeamLocation.IsNullable = false;
				colvarTeamLocation.IsPrimaryKey = false;
				colvarTeamLocation.IsForeignKey = false;
				colvarTeamLocation.IsReadOnly = false;
				colvarTeamLocation.DefaultSetting = @"";
				colvarTeamLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocation);

				TableSchema.TableColumn colvarTeamLocationName = new TableSchema.TableColumn(schema);
				colvarTeamLocationName.ColumnName = "TeamLocationName";
				colvarTeamLocationName.DataType = DbType.AnsiString;
				colvarTeamLocationName.MaxLength = 15;
				colvarTeamLocationName.AutoIncrement = false;
				colvarTeamLocationName.IsNullable = false;
				colvarTeamLocationName.IsPrimaryKey = false;
				colvarTeamLocationName.IsForeignKey = false;
				colvarTeamLocationName.IsReadOnly = false;
				colvarTeamLocationName.DefaultSetting = @"";
				colvarTeamLocationName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationName);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarCredExcellent = new TableSchema.TableColumn(schema);
				colvarCredExcellent.ColumnName = "CredExcellent";
				colvarCredExcellent.DataType = DbType.Int32;
				colvarCredExcellent.MaxLength = 0;
				colvarCredExcellent.AutoIncrement = false;
				colvarCredExcellent.IsNullable = false;
				colvarCredExcellent.IsPrimaryKey = false;
				colvarCredExcellent.IsForeignKey = false;
				colvarCredExcellent.IsReadOnly = false;
				colvarCredExcellent.DefaultSetting = @"";
				colvarCredExcellent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCredExcellent);

				TableSchema.TableColumn colvarCredGood = new TableSchema.TableColumn(schema);
				colvarCredGood.ColumnName = "CredGood";
				colvarCredGood.DataType = DbType.Int32;
				colvarCredGood.MaxLength = 0;
				colvarCredGood.AutoIncrement = false;
				colvarCredGood.IsNullable = false;
				colvarCredGood.IsPrimaryKey = false;
				colvarCredGood.IsForeignKey = false;
				colvarCredGood.IsReadOnly = false;
				colvarCredGood.DefaultSetting = @"";
				colvarCredGood.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCredGood);

				TableSchema.TableColumn colvarTotalQCredits = new TableSchema.TableColumn(schema);
				colvarTotalQCredits.ColumnName = "TotalQCredits";
				colvarTotalQCredits.DataType = DbType.Int32;
				colvarTotalQCredits.MaxLength = 0;
				colvarTotalQCredits.AutoIncrement = false;
				colvarTotalQCredits.IsNullable = true;
				colvarTotalQCredits.IsPrimaryKey = false;
				colvarTotalQCredits.IsForeignKey = false;
				colvarTotalQCredits.IsReadOnly = false;
				colvarTotalQCredits.DefaultSetting = @"";
				colvarTotalQCredits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalQCredits);

				TableSchema.TableColumn colvarCancels = new TableSchema.TableColumn(schema);
				colvarCancels.ColumnName = "Cancels";
				colvarCancels.DataType = DbType.Int32;
				colvarCancels.MaxLength = 0;
				colvarCancels.AutoIncrement = false;
				colvarCancels.IsNullable = false;
				colvarCancels.IsPrimaryKey = false;
				colvarCancels.IsForeignKey = false;
				colvarCancels.IsReadOnly = false;
				colvarCancels.DefaultSetting = @"";
				colvarCancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancels);

				TableSchema.TableColumn colvarNetAccounts = new TableSchema.TableColumn(schema);
				colvarNetAccounts.ColumnName = "NetAccounts";
				colvarNetAccounts.DataType = DbType.Int32;
				colvarNetAccounts.MaxLength = 0;
				colvarNetAccounts.AutoIncrement = false;
				colvarNetAccounts.IsNullable = true;
				colvarNetAccounts.IsPrimaryKey = false;
				colvarNetAccounts.IsForeignKey = false;
				colvarNetAccounts.IsReadOnly = false;
				colvarNetAccounts.DefaultSetting = @"";
				colvarNetAccounts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNetAccounts);

				TableSchema.TableColumn colvarSubCreditInstalls = new TableSchema.TableColumn(schema);
				colvarSubCreditInstalls.ColumnName = "SubCreditInstalls";
				colvarSubCreditInstalls.DataType = DbType.Int32;
				colvarSubCreditInstalls.MaxLength = 0;
				colvarSubCreditInstalls.AutoIncrement = false;
				colvarSubCreditInstalls.IsNullable = false;
				colvarSubCreditInstalls.IsPrimaryKey = false;
				colvarSubCreditInstalls.IsForeignKey = false;
				colvarSubCreditInstalls.IsReadOnly = false;
				colvarSubCreditInstalls.DefaultSetting = @"";
				colvarSubCreditInstalls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubCreditInstalls);

				TableSchema.TableColumn colvarTotalCredit = new TableSchema.TableColumn(schema);
				colvarTotalCredit.ColumnName = "TotalCredit";
				colvarTotalCredit.DataType = DbType.Int32;
				colvarTotalCredit.MaxLength = 0;
				colvarTotalCredit.AutoIncrement = false;
				colvarTotalCredit.IsNullable = false;
				colvarTotalCredit.IsPrimaryKey = false;
				colvarTotalCredit.IsForeignKey = false;
				colvarTotalCredit.IsReadOnly = false;
				colvarTotalCredit.DefaultSetting = @"";
				colvarTotalCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalCredit);

				TableSchema.TableColumn colvarTotalCreditPass = new TableSchema.TableColumn(schema);
				colvarTotalCreditPass.ColumnName = "TotalCreditPass";
				colvarTotalCreditPass.DataType = DbType.Int32;
				colvarTotalCreditPass.MaxLength = 0;
				colvarTotalCreditPass.AutoIncrement = false;
				colvarTotalCreditPass.IsNullable = false;
				colvarTotalCreditPass.IsPrimaryKey = false;
				colvarTotalCreditPass.IsForeignKey = false;
				colvarTotalCreditPass.IsReadOnly = false;
				colvarTotalCreditPass.DefaultSetting = @"";
				colvarTotalCreditPass.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalCreditPass);

				TableSchema.TableColumn colvarSurveyPassed = new TableSchema.TableColumn(schema);
				colvarSurveyPassed.ColumnName = "SurveyPassed";
				colvarSurveyPassed.DataType = DbType.Int32;
				colvarSurveyPassed.MaxLength = 0;
				colvarSurveyPassed.AutoIncrement = false;
				colvarSurveyPassed.IsNullable = false;
				colvarSurveyPassed.IsPrimaryKey = false;
				colvarSurveyPassed.IsForeignKey = false;
				colvarSurveyPassed.IsReadOnly = false;
				colvarSurveyPassed.DefaultSetting = @"";
				colvarSurveyPassed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurveyPassed);

				TableSchema.TableColumn colvarPassPercent = new TableSchema.TableColumn(schema);
				colvarPassPercent.ColumnName = "PassPercent";
				colvarPassPercent.DataType = DbType.Double;
				colvarPassPercent.MaxLength = 0;
				colvarPassPercent.AutoIncrement = false;
				colvarPassPercent.IsNullable = true;
				colvarPassPercent.IsPrimaryKey = false;
				colvarPassPercent.IsForeignKey = false;
				colvarPassPercent.IsReadOnly = false;
				colvarPassPercent.DefaultSetting = @"";
				colvarPassPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassPercent);

				TableSchema.TableColumn colvarPassPercentInst = new TableSchema.TableColumn(schema);
				colvarPassPercentInst.ColumnName = "PassPercentInst";
				colvarPassPercentInst.DataType = DbType.Double;
				colvarPassPercentInst.MaxLength = 0;
				colvarPassPercentInst.AutoIncrement = false;
				colvarPassPercentInst.IsNullable = true;
				colvarPassPercentInst.IsPrimaryKey = false;
				colvarPassPercentInst.IsForeignKey = false;
				colvarPassPercentInst.IsReadOnly = false;
				colvarPassPercentInst.DefaultSetting = @"";
				colvarPassPercentInst.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassPercentInst);

				TableSchema.TableColumn colvarAvgCredit = new TableSchema.TableColumn(schema);
				colvarAvgCredit.ColumnName = "AvgCredit";
				colvarAvgCredit.DataType = DbType.Int32;
				colvarAvgCredit.MaxLength = 0;
				colvarAvgCredit.AutoIncrement = false;
				colvarAvgCredit.IsNullable = false;
				colvarAvgCredit.IsPrimaryKey = false;
				colvarAvgCredit.IsForeignKey = false;
				colvarAvgCredit.IsReadOnly = false;
				colvarAvgCredit.DefaultSetting = @"";
				colvarAvgCredit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAvgCredit);

				TableSchema.TableColumn colvarCellular = new TableSchema.TableColumn(schema);
				colvarCellular.ColumnName = "Cellular";
				colvarCellular.DataType = DbType.Int32;
				colvarCellular.MaxLength = 0;
				colvarCellular.AutoIncrement = false;
				colvarCellular.IsNullable = false;
				colvarCellular.IsPrimaryKey = false;
				colvarCellular.IsForeignKey = false;
				colvarCellular.IsReadOnly = false;
				colvarCellular.DefaultSetting = @"";
				colvarCellular.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellular);

				TableSchema.TableColumn colvarCellularPercent = new TableSchema.TableColumn(schema);
				colvarCellularPercent.ColumnName = "CellularPercent";
				colvarCellularPercent.DataType = DbType.Double;
				colvarCellularPercent.MaxLength = 0;
				colvarCellularPercent.AutoIncrement = false;
				colvarCellularPercent.IsNullable = true;
				colvarCellularPercent.IsPrimaryKey = false;
				colvarCellularPercent.IsForeignKey = false;
				colvarCellularPercent.IsReadOnly = false;
				colvarCellularPercent.DefaultSetting = @"";
				colvarCellularPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCellularPercent);

				TableSchema.TableColumn colvarSameDay = new TableSchema.TableColumn(schema);
				colvarSameDay.ColumnName = "SameDay";
				colvarSameDay.DataType = DbType.Int32;
				colvarSameDay.MaxLength = 0;
				colvarSameDay.AutoIncrement = false;
				colvarSameDay.IsNullable = false;
				colvarSameDay.IsPrimaryKey = false;
				colvarSameDay.IsForeignKey = false;
				colvarSameDay.IsReadOnly = false;
				colvarSameDay.DefaultSetting = @"";
				colvarSameDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSameDay);

				TableSchema.TableColumn colvarSameDayPercent = new TableSchema.TableColumn(schema);
				colvarSameDayPercent.ColumnName = "SameDayPercent";
				colvarSameDayPercent.DataType = DbType.Double;
				colvarSameDayPercent.MaxLength = 0;
				colvarSameDayPercent.AutoIncrement = false;
				colvarSameDayPercent.IsNullable = true;
				colvarSameDayPercent.IsPrimaryKey = false;
				colvarSameDayPercent.IsForeignKey = false;
				colvarSameDayPercent.IsReadOnly = false;
				colvarSameDayPercent.DefaultSetting = @"";
				colvarSameDayPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSameDayPercent);

				TableSchema.TableColumn colvarActWaives = new TableSchema.TableColumn(schema);
				colvarActWaives.ColumnName = "ActWaives";
				colvarActWaives.DataType = DbType.Int32;
				colvarActWaives.MaxLength = 0;
				colvarActWaives.AutoIncrement = false;
				colvarActWaives.IsNullable = false;
				colvarActWaives.IsPrimaryKey = false;
				colvarActWaives.IsForeignKey = false;
				colvarActWaives.IsReadOnly = false;
				colvarActWaives.DefaultSetting = @"";
				colvarActWaives.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActWaives);

				TableSchema.TableColumn colvarActWaivesPercent = new TableSchema.TableColumn(schema);
				colvarActWaivesPercent.ColumnName = "ActWaivesPercent";
				colvarActWaivesPercent.DataType = DbType.Double;
				colvarActWaivesPercent.MaxLength = 0;
				colvarActWaivesPercent.AutoIncrement = false;
				colvarActWaivesPercent.IsNullable = true;
				colvarActWaivesPercent.IsPrimaryKey = false;
				colvarActWaivesPercent.IsForeignKey = false;
				colvarActWaivesPercent.IsReadOnly = false;
				colvarActWaivesPercent.DefaultSetting = @"";
				colvarActWaivesPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActWaivesPercent);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_PreSeason2007",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public string TeamLocation {
			get { return GetColumnValue<string>(Columns.TeamLocation); }
			set {
				SetColumnValue(Columns.TeamLocation, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocation));
			}
		}
		[DataMember]
		public string TeamLocationName {
			get { return GetColumnValue<string>(Columns.TeamLocationName); }
			set {
				SetColumnValue(Columns.TeamLocationName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationName));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int CredExcellent {
			get { return GetColumnValue<int>(Columns.CredExcellent); }
			set {
				SetColumnValue(Columns.CredExcellent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CredExcellent));
			}
		}
		[DataMember]
		public int CredGood {
			get { return GetColumnValue<int>(Columns.CredGood); }
			set {
				SetColumnValue(Columns.CredGood, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CredGood));
			}
		}
		[DataMember]
		public int? TotalQCredits {
			get { return GetColumnValue<int?>(Columns.TotalQCredits); }
			set {
				SetColumnValue(Columns.TotalQCredits, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalQCredits));
			}
		}
		[DataMember]
		public int Cancels {
			get { return GetColumnValue<int>(Columns.Cancels); }
			set {
				SetColumnValue(Columns.Cancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Cancels));
			}
		}
		[DataMember]
		public int? NetAccounts {
			get { return GetColumnValue<int?>(Columns.NetAccounts); }
			set {
				SetColumnValue(Columns.NetAccounts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NetAccounts));
			}
		}
		[DataMember]
		public int SubCreditInstalls {
			get { return GetColumnValue<int>(Columns.SubCreditInstalls); }
			set {
				SetColumnValue(Columns.SubCreditInstalls, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubCreditInstalls));
			}
		}
		[DataMember]
		public int TotalCredit {
			get { return GetColumnValue<int>(Columns.TotalCredit); }
			set {
				SetColumnValue(Columns.TotalCredit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalCredit));
			}
		}
		[DataMember]
		public int TotalCreditPass {
			get { return GetColumnValue<int>(Columns.TotalCreditPass); }
			set {
				SetColumnValue(Columns.TotalCreditPass, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalCreditPass));
			}
		}
		[DataMember]
		public int SurveyPassed {
			get { return GetColumnValue<int>(Columns.SurveyPassed); }
			set {
				SetColumnValue(Columns.SurveyPassed, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SurveyPassed));
			}
		}
		[DataMember]
		public double? PassPercent {
			get { return GetColumnValue<double?>(Columns.PassPercent); }
			set {
				SetColumnValue(Columns.PassPercent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassPercent));
			}
		}
		[DataMember]
		public double? PassPercentInst {
			get { return GetColumnValue<double?>(Columns.PassPercentInst); }
			set {
				SetColumnValue(Columns.PassPercentInst, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PassPercentInst));
			}
		}
		[DataMember]
		public int AvgCredit {
			get { return GetColumnValue<int>(Columns.AvgCredit); }
			set {
				SetColumnValue(Columns.AvgCredit, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AvgCredit));
			}
		}
		[DataMember]
		public int Cellular {
			get { return GetColumnValue<int>(Columns.Cellular); }
			set {
				SetColumnValue(Columns.Cellular, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Cellular));
			}
		}
		[DataMember]
		public double? CellularPercent {
			get { return GetColumnValue<double?>(Columns.CellularPercent); }
			set {
				SetColumnValue(Columns.CellularPercent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CellularPercent));
			}
		}
		[DataMember]
		public int SameDay {
			get { return GetColumnValue<int>(Columns.SameDay); }
			set {
				SetColumnValue(Columns.SameDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SameDay));
			}
		}
		[DataMember]
		public double? SameDayPercent {
			get { return GetColumnValue<double?>(Columns.SameDayPercent); }
			set {
				SetColumnValue(Columns.SameDayPercent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SameDayPercent));
			}
		}
		[DataMember]
		public int ActWaives {
			get { return GetColumnValue<int>(Columns.ActWaives); }
			set {
				SetColumnValue(Columns.ActWaives, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActWaives));
			}
		}
		[DataMember]
		public double? ActWaivesPercent {
			get { return GetColumnValue<double?>(Columns.ActWaivesPercent); }
			set {
				SetColumnValue(Columns.ActWaivesPercent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ActWaivesPercent));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return TeamLocation;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamLocationColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TeamLocationNameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CredExcellentColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CredGoodColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TotalQCreditsColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn CancelsColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn NetAccountsColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn SubCreditInstallsColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn TotalCreditColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn TotalCreditPassColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn SurveyPassedColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn PassPercentColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn PassPercentInstColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn AvgCreditColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn CellularColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn CellularPercentColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn SameDayColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn SameDayPercentColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn ActWaivesColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn ActWaivesPercentColumn
		{
			get { return Schema.Columns[21]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string TeamLocation = @"TeamLocation";
			public static readonly string TeamLocationName = @"TeamLocationName";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string CredExcellent = @"CredExcellent";
			public static readonly string CredGood = @"CredGood";
			public static readonly string TotalQCredits = @"TotalQCredits";
			public static readonly string Cancels = @"Cancels";
			public static readonly string NetAccounts = @"NetAccounts";
			public static readonly string SubCreditInstalls = @"SubCreditInstalls";
			public static readonly string TotalCredit = @"TotalCredit";
			public static readonly string TotalCreditPass = @"TotalCreditPass";
			public static readonly string SurveyPassed = @"SurveyPassed";
			public static readonly string PassPercent = @"PassPercent";
			public static readonly string PassPercentInst = @"PassPercentInst";
			public static readonly string AvgCredit = @"AvgCredit";
			public static readonly string Cellular = @"Cellular";
			public static readonly string CellularPercent = @"CellularPercent";
			public static readonly string SameDay = @"SameDay";
			public static readonly string SameDayPercent = @"SameDayPercent";
			public static readonly string ActWaives = @"ActWaives";
			public static readonly string ActWaivesPercent = @"ActWaivesPercent";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_RecruitingStructure class.
	/// </summary>
	[DataContract]
	public partial class SAE_RecruitingStructureCollection : ActiveList<SAE_RecruitingStructure, SAE_RecruitingStructureCollection>
	{
		public static SAE_RecruitingStructureCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_RecruitingStructureCollection result = new SAE_RecruitingStructureCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_RecruitingStructure item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_RecruitingStructure table.
	/// </summary>
	[DataContract]
	public partial class SAE_RecruitingStructure : ActiveRecord<SAE_RecruitingStructure>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_RecruitingStructure()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_RecruitingStructure", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = true;
				colvarRecruitID.IsForeignKey = false;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarManagerID = new TableSchema.TableColumn(schema);
				colvarManagerID.ColumnName = "ManagerID";
				colvarManagerID.DataType = DbType.Int32;
				colvarManagerID.MaxLength = 0;
				colvarManagerID.AutoIncrement = false;
				colvarManagerID.IsNullable = true;
				colvarManagerID.IsPrimaryKey = false;
				colvarManagerID.IsForeignKey = false;
				colvarManagerID.IsReadOnly = false;
				colvarManagerID.DefaultSetting = @"";
				colvarManagerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManagerID);

				TableSchema.TableColumn colvarTeamID = new TableSchema.TableColumn(schema);
				colvarTeamID.ColumnName = "TeamID";
				colvarTeamID.DataType = DbType.Int32;
				colvarTeamID.MaxLength = 0;
				colvarTeamID.AutoIncrement = false;
				colvarTeamID.IsNullable = true;
				colvarTeamID.IsPrimaryKey = false;
				colvarTeamID.IsForeignKey = false;
				colvarTeamID.IsReadOnly = false;
				colvarTeamID.DefaultSetting = @"";
				colvarTeamID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamID);

				TableSchema.TableColumn colvarRegionID = new TableSchema.TableColumn(schema);
				colvarRegionID.ColumnName = "RegionID";
				colvarRegionID.DataType = DbType.Int32;
				colvarRegionID.MaxLength = 0;
				colvarRegionID.AutoIncrement = false;
				colvarRegionID.IsNullable = true;
				colvarRegionID.IsPrimaryKey = false;
				colvarRegionID.IsForeignKey = false;
				colvarRegionID.IsReadOnly = false;
				colvarRegionID.DefaultSetting = @"";
				colvarRegionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegionID);

				TableSchema.TableColumn colvarNationalRegionID = new TableSchema.TableColumn(schema);
				colvarNationalRegionID.ColumnName = "NationalRegionID";
				colvarNationalRegionID.DataType = DbType.Int32;
				colvarNationalRegionID.MaxLength = 0;
				colvarNationalRegionID.AutoIncrement = false;
				colvarNationalRegionID.IsNullable = true;
				colvarNationalRegionID.IsPrimaryKey = false;
				colvarNationalRegionID.IsForeignKey = false;
				colvarNationalRegionID.IsReadOnly = false;
				colvarNationalRegionID.DefaultSetting = @"";
				colvarNationalRegionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNationalRegionID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_RecruitingStructure",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_RecruitingStructure LoadFrom(SAE_RecruitingStructure item)
		{
			SAE_RecruitingStructure result = new SAE_RecruitingStructure();
			if (item.RecruitID != default(int)) {
				result.LoadByKey(item.RecruitID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int? ManagerID {
			get { return GetColumnValue<int?>(Columns.ManagerID); }
			set {
				SetColumnValue(Columns.ManagerID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ManagerID));
			}
		}
		[DataMember]
		public int? TeamID {
			get { return GetColumnValue<int?>(Columns.TeamID); }
			set {
				SetColumnValue(Columns.TeamID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamID));
			}
		}
		[DataMember]
		public int? RegionID {
			get { return GetColumnValue<int?>(Columns.RegionID); }
			set {
				SetColumnValue(Columns.RegionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RegionID));
			}
		}
		[DataMember]
		public int? NationalRegionID {
			get { return GetColumnValue<int?>(Columns.NationalRegionID); }
			set {
				SetColumnValue(Columns.NationalRegionID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NationalRegionID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return RecruitID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ManagerIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TeamIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn RegionIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn NationalRegionIDColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string ManagerID = @"ManagerID";
			public static readonly string TeamID = @"TeamID";
			public static readonly string RegionID = @"RegionID";
			public static readonly string NationalRegionID = @"NationalRegionID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RecruitID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_RecruitTeamMapping class.
	/// </summary>
	[DataContract]
	public partial class SAE_RecruitTeamMappingCollection : ActiveList<SAE_RecruitTeamMapping, SAE_RecruitTeamMappingCollection>
	{
		public static SAE_RecruitTeamMappingCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_RecruitTeamMappingCollection result = new SAE_RecruitTeamMappingCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_RecruitTeamMapping item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_RecruitTeamMappings table.
	/// </summary>
	[DataContract]
	public partial class SAE_RecruitTeamMapping : ActiveRecord<SAE_RecruitTeamMapping>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_RecruitTeamMapping()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_RecruitTeamMappings", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = true;
				colvarRecruitID.IsForeignKey = false;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarTeamID = new TableSchema.TableColumn(schema);
				colvarTeamID.ColumnName = "TeamID";
				colvarTeamID.DataType = DbType.Int32;
				colvarTeamID.MaxLength = 0;
				colvarTeamID.AutoIncrement = false;
				colvarTeamID.IsNullable = false;
				colvarTeamID.IsPrimaryKey = false;
				colvarTeamID.IsForeignKey = true;
				colvarTeamID.IsReadOnly = false;
				colvarTeamID.DefaultSetting = @"";
				colvarTeamID.ForeignKeyTableName = "RU_Teams";
				schema.Columns.Add(colvarTeamID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = true;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = true;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "RU_TeamLocations";
				schema.Columns.Add(colvarTeamLocationID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_RecruitTeamMappings",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_RecruitTeamMapping LoadFrom(SAE_RecruitTeamMapping item)
		{
			SAE_RecruitTeamMapping result = new SAE_RecruitTeamMapping();
			if (item.RecruitID != default(int)) {
				result.LoadByKey(item.RecruitID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public int TeamID {
			get { return GetColumnValue<int>(Columns.TeamID); }
			set {
				SetColumnValue(Columns.TeamID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamID));
			}
		}
		[DataMember]
		public int? TeamLocationID {
			get { return GetColumnValue<int?>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Recruit _Recruit;
		//Relationship: FK_SAE_RecruitTeamMappings_RU_Recruits
		public RU_Recruit Recruit
		{
			get
			{
				if(_Recruit == null) {
					_Recruit = RU_Recruit.FetchByID(this.RecruitID);
				}
				return _Recruit;
			}
			set
			{
				SetColumnValue("RecruitID", value.RecruitID);
				_Recruit = value;
			}
		}

		private RU_TeamLocation _TeamLocation;
		//Relationship: FK_SAE_RecruitTeamMappings_RU_TeamLocations
		public RU_TeamLocation TeamLocation
		{
			get
			{
				if(_TeamLocation == null) {
					_TeamLocation = RU_TeamLocation.FetchByID(this.TeamLocationID);
				}
				return _TeamLocation;
			}
			set
			{
				SetColumnValue("TeamLocationID", value.TeamLocationID);
				_TeamLocation = value;
			}
		}

		private RU_Team _Team;
		//Relationship: FK_SAE_RecruitTeamMappings_RU_Teams
		public RU_Team Team
		{
			get
			{
				if(_Team == null) {
					_Team = RU_Team.FetchByID(this.TeamID);
				}
				return _Team;
			}
			set
			{
				SetColumnValue("TeamID", value.TeamID);
				_Team = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return RecruitID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn TeamIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string TeamID = @"TeamID";
			public static readonly string TeamLocationID = @"TeamLocationID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RecruitID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_RemoveMe class.
	/// </summary>
	[DataContract]
	public partial class SAE_RemoveMeCollection : ActiveList<SAE_RemoveMe, SAE_RemoveMeCollection>
	{
		public static SAE_RemoveMeCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_RemoveMeCollection result = new SAE_RemoveMeCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_RemoveMe item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_RemoveMe table.
	/// </summary>
	[DataContract]
	public partial class SAE_RemoveMe : ActiveRecord<SAE_RemoveMe>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_RemoveMe()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_RemoveMe", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = false;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarOfficeName = new TableSchema.TableColumn(schema);
				colvarOfficeName.ColumnName = "OfficeName";
				colvarOfficeName.DataType = DbType.AnsiString;
				colvarOfficeName.MaxLength = 50;
				colvarOfficeName.AutoIncrement = false;
				colvarOfficeName.IsNullable = false;
				colvarOfficeName.IsPrimaryKey = false;
				colvarOfficeName.IsForeignKey = false;
				colvarOfficeName.IsReadOnly = false;
				colvarOfficeName.DefaultSetting = @"";
				colvarOfficeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOfficeName);

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = true;
				colvarRecruitID.IsForeignKey = false;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
				colvarCompanyID.ColumnName = "CompanyID";
				colvarCompanyID.DataType = DbType.String;
				colvarCompanyID.MaxLength = 25;
				colvarCompanyID.AutoIncrement = false;
				colvarCompanyID.IsNullable = true;
				colvarCompanyID.IsPrimaryKey = false;
				colvarCompanyID.IsForeignKey = false;
				colvarCompanyID.IsReadOnly = false;
				colvarCompanyID.DefaultSetting = @"";
				colvarCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyID);

				TableSchema.TableColumn colvarFullName = new TableSchema.TableColumn(schema);
				colvarFullName.ColumnName = "FullName";
				colvarFullName.DataType = DbType.String;
				colvarFullName.MaxLength = 101;
				colvarFullName.AutoIncrement = false;
				colvarFullName.IsNullable = true;
				colvarFullName.IsPrimaryKey = false;
				colvarFullName.IsForeignKey = false;
				colvarFullName.IsReadOnly = false;
				colvarFullName.DefaultSetting = @"";
				colvarFullName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFullName);

				TableSchema.TableColumn colvarUserTypeId = new TableSchema.TableColumn(schema);
				colvarUserTypeId.ColumnName = "UserTypeId";
				colvarUserTypeId.DataType = DbType.Int16;
				colvarUserTypeId.MaxLength = 0;
				colvarUserTypeId.AutoIncrement = false;
				colvarUserTypeId.IsNullable = false;
				colvarUserTypeId.IsPrimaryKey = false;
				colvarUserTypeId.IsForeignKey = false;
				colvarUserTypeId.IsReadOnly = false;
				colvarUserTypeId.DefaultSetting = @"";
				colvarUserTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserTypeId);

				TableSchema.TableColumn colvarUserRole = new TableSchema.TableColumn(schema);
				colvarUserRole.ColumnName = "UserRole";
				colvarUserRole.DataType = DbType.String;
				colvarUserRole.MaxLength = 50;
				colvarUserRole.AutoIncrement = false;
				colvarUserRole.IsNullable = false;
				colvarUserRole.IsPrimaryKey = false;
				colvarUserRole.IsForeignKey = false;
				colvarUserRole.IsReadOnly = false;
				colvarUserRole.DefaultSetting = @"";
				colvarUserRole.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserRole);

				TableSchema.TableColumn colvarPosition = new TableSchema.TableColumn(schema);
				colvarPosition.ColumnName = "Position";
				colvarPosition.DataType = DbType.AnsiString;
				colvarPosition.MaxLength = 30;
				colvarPosition.AutoIncrement = false;
				colvarPosition.IsNullable = false;
				colvarPosition.IsPrimaryKey = false;
				colvarPosition.IsForeignKey = false;
				colvarPosition.IsReadOnly = false;
				colvarPosition.DefaultSetting = @"";
				colvarPosition.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPosition);

				TableSchema.TableColumn colvarArrivalDate = new TableSchema.TableColumn(schema);
				colvarArrivalDate.ColumnName = "ArrivalDate";
				colvarArrivalDate.DataType = DbType.DateTime;
				colvarArrivalDate.MaxLength = 0;
				colvarArrivalDate.AutoIncrement = false;
				colvarArrivalDate.IsNullable = true;
				colvarArrivalDate.IsPrimaryKey = false;
				colvarArrivalDate.IsForeignKey = false;
				colvarArrivalDate.IsReadOnly = false;
				colvarArrivalDate.DefaultSetting = @"";
				colvarArrivalDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArrivalDate);

				TableSchema.TableColumn colvarQuitDate = new TableSchema.TableColumn(schema);
				colvarQuitDate.ColumnName = "QuitDate";
				colvarQuitDate.DataType = DbType.DateTime;
				colvarQuitDate.MaxLength = 0;
				colvarQuitDate.AutoIncrement = false;
				colvarQuitDate.IsNullable = true;
				colvarQuitDate.IsPrimaryKey = false;
				colvarQuitDate.IsForeignKey = false;
				colvarQuitDate.IsReadOnly = false;
				colvarQuitDate.DefaultSetting = @"";
				colvarQuitDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuitDate);

				TableSchema.TableColumn colvarReason = new TableSchema.TableColumn(schema);
				colvarReason.ColumnName = "Reason";
				colvarReason.DataType = DbType.String;
				colvarReason.MaxLength = -1;
				colvarReason.AutoIncrement = false;
				colvarReason.IsNullable = true;
				colvarReason.IsPrimaryKey = false;
				colvarReason.IsForeignKey = false;
				colvarReason.IsReadOnly = false;
				colvarReason.DefaultSetting = @"";
				colvarReason.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReason);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_RemoveMe",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_RemoveMe LoadFrom(SAE_RemoveMe item)
		{
			SAE_RemoveMe result = new SAE_RemoveMe();
			if (item.RecruitID != default(int)) {
				result.LoadByKey(item.RecruitID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public string OfficeName {
			get { return GetColumnValue<string>(Columns.OfficeName); }
			set {
				SetColumnValue(Columns.OfficeName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OfficeName));
			}
		}
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public string CompanyID {
			get { return GetColumnValue<string>(Columns.CompanyID); }
			set {
				SetColumnValue(Columns.CompanyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CompanyID));
			}
		}
		[DataMember]
		public string FullName {
			get { return GetColumnValue<string>(Columns.FullName); }
			set {
				SetColumnValue(Columns.FullName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FullName));
			}
		}
		[DataMember]
		public short UserTypeId {
			get { return GetColumnValue<short>(Columns.UserTypeId); }
			set {
				SetColumnValue(Columns.UserTypeId, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserTypeId));
			}
		}
		[DataMember]
		public string UserRole {
			get { return GetColumnValue<string>(Columns.UserRole); }
			set {
				SetColumnValue(Columns.UserRole, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserRole));
			}
		}
		[DataMember]
		public string Position {
			get { return GetColumnValue<string>(Columns.Position); }
			set {
				SetColumnValue(Columns.Position, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Position));
			}
		}
		[DataMember]
		public DateTime? ArrivalDate {
			get { return GetColumnValue<DateTime?>(Columns.ArrivalDate); }
			set {
				SetColumnValue(Columns.ArrivalDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ArrivalDate));
			}
		}
		[DataMember]
		public DateTime? QuitDate {
			get { return GetColumnValue<DateTime?>(Columns.QuitDate); }
			set {
				SetColumnValue(Columns.QuitDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QuitDate));
			}
		}
		[DataMember]
		public string Reason {
			get { return GetColumnValue<string>(Columns.Reason); }
			set {
				SetColumnValue(Columns.Reason, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Reason));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return OfficeName;
		}

		#region Typed Columns

		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn OfficeNameColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CompanyIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn FullNameColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn UserTypeIdColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn UserRoleColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn PositionColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ArrivalDateColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn QuitDateColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn ReasonColumn
		{
			get { return Schema.Columns[11]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string OfficeName = @"OfficeName";
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string UserID = @"UserID";
			public static readonly string CompanyID = @"CompanyID";
			public static readonly string FullName = @"FullName";
			public static readonly string UserTypeId = @"UserTypeId";
			public static readonly string UserRole = @"UserRole";
			public static readonly string Position = @"Position";
			public static readonly string ArrivalDate = @"ArrivalDate";
			public static readonly string QuitDate = @"QuitDate";
			public static readonly string Reason = @"Reason";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RecruitID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_RepSalesTotalsSnapShot class.
	/// </summary>
	[DataContract]
	public partial class SAE_RepSalesTotalsSnapShotCollection : ActiveList<SAE_RepSalesTotalsSnapShot, SAE_RepSalesTotalsSnapShotCollection>
	{
		public static SAE_RepSalesTotalsSnapShotCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_RepSalesTotalsSnapShotCollection result = new SAE_RepSalesTotalsSnapShotCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_RepSalesTotalsSnapShot item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_RepSalesTotalsSnapShots table.
	/// </summary>
	[DataContract]
	public partial class SAE_RepSalesTotalsSnapShot : ActiveRecord<SAE_RepSalesTotalsSnapShot>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_RepSalesTotalsSnapShot()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_RepSalesTotalsSnapShots", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarRepSalesTotalsSnapShotsID = new TableSchema.TableColumn(schema);
				colvarRepSalesTotalsSnapShotsID.ColumnName = "RepSalesTotalsSnapShotsID";
				colvarRepSalesTotalsSnapShotsID.DataType = DbType.Int32;
				colvarRepSalesTotalsSnapShotsID.MaxLength = 0;
				colvarRepSalesTotalsSnapShotsID.AutoIncrement = true;
				colvarRepSalesTotalsSnapShotsID.IsNullable = false;
				colvarRepSalesTotalsSnapShotsID.IsPrimaryKey = true;
				colvarRepSalesTotalsSnapShotsID.IsForeignKey = false;
				colvarRepSalesTotalsSnapShotsID.IsReadOnly = false;
				colvarRepSalesTotalsSnapShotsID.DefaultSetting = @"";
				colvarRepSalesTotalsSnapShotsID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRepSalesTotalsSnapShotsID);

				TableSchema.TableColumn colvarSnapShotDate = new TableSchema.TableColumn(schema);
				colvarSnapShotDate.ColumnName = "SnapShotDate";
				colvarSnapShotDate.DataType = DbType.DateTime;
				colvarSnapShotDate.MaxLength = 0;
				colvarSnapShotDate.AutoIncrement = false;
				colvarSnapShotDate.IsNullable = false;
				colvarSnapShotDate.IsPrimaryKey = false;
				colvarSnapShotDate.IsForeignKey = false;
				colvarSnapShotDate.IsReadOnly = false;
				colvarSnapShotDate.DefaultSetting = @"";
				colvarSnapShotDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSnapShotDate);

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = false;
				colvarRecruitID.IsForeignKey = false;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarUserID = new TableSchema.TableColumn(schema);
				colvarUserID.ColumnName = "UserID";
				colvarUserID.DataType = DbType.Int32;
				colvarUserID.MaxLength = 0;
				colvarUserID.AutoIncrement = false;
				colvarUserID.IsNullable = false;
				colvarUserID.IsPrimaryKey = false;
				colvarUserID.IsForeignKey = false;
				colvarUserID.IsReadOnly = false;
				colvarUserID.DefaultSetting = @"";
				colvarUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarTeamID = new TableSchema.TableColumn(schema);
				colvarTeamID.ColumnName = "TeamID";
				colvarTeamID.DataType = DbType.Int32;
				colvarTeamID.MaxLength = 0;
				colvarTeamID.AutoIncrement = false;
				colvarTeamID.IsNullable = true;
				colvarTeamID.IsPrimaryKey = false;
				colvarTeamID.IsForeignKey = false;
				colvarTeamID.IsReadOnly = false;
				colvarTeamID.DefaultSetting = @"";
				colvarTeamID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = true;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = false;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarNGross = new TableSchema.TableColumn(schema);
				colvarNGross.ColumnName = "NGross";
				colvarNGross.DataType = DbType.Int32;
				colvarNGross.MaxLength = 0;
				colvarNGross.AutoIncrement = false;
				colvarNGross.IsNullable = false;
				colvarNGross.IsPrimaryKey = false;
				colvarNGross.IsForeignKey = false;
				colvarNGross.IsReadOnly = false;
				colvarNGross.DefaultSetting = @"";
				colvarNGross.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGross);

				TableSchema.TableColumn colvarNGross_Cancels = new TableSchema.TableColumn(schema);
				colvarNGross_Cancels.ColumnName = "NGross_Cancels";
				colvarNGross_Cancels.DataType = DbType.Int32;
				colvarNGross_Cancels.MaxLength = 0;
				colvarNGross_Cancels.AutoIncrement = false;
				colvarNGross_Cancels.IsNullable = false;
				colvarNGross_Cancels.IsPrimaryKey = false;
				colvarNGross_Cancels.IsForeignKey = false;
				colvarNGross_Cancels.IsReadOnly = false;
				colvarNGross_Cancels.DefaultSetting = @"";
				colvarNGross_Cancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGross_Cancels);

				TableSchema.TableColumn colvarNGross_ActivationWaives = new TableSchema.TableColumn(schema);
				colvarNGross_ActivationWaives.ColumnName = "NGross_ActivationWaives";
				colvarNGross_ActivationWaives.DataType = DbType.Int32;
				colvarNGross_ActivationWaives.MaxLength = 0;
				colvarNGross_ActivationWaives.AutoIncrement = false;
				colvarNGross_ActivationWaives.IsNullable = false;
				colvarNGross_ActivationWaives.IsPrimaryKey = false;
				colvarNGross_ActivationWaives.IsForeignKey = false;
				colvarNGross_ActivationWaives.IsReadOnly = false;
				colvarNGross_ActivationWaives.DefaultSetting = @"";
				colvarNGross_ActivationWaives.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGross_ActivationWaives);

				TableSchema.TableColumn colvarNGross_ExtendedContracts = new TableSchema.TableColumn(schema);
				colvarNGross_ExtendedContracts.ColumnName = "NGross_ExtendedContracts";
				colvarNGross_ExtendedContracts.DataType = DbType.Int32;
				colvarNGross_ExtendedContracts.MaxLength = 0;
				colvarNGross_ExtendedContracts.AutoIncrement = false;
				colvarNGross_ExtendedContracts.IsNullable = false;
				colvarNGross_ExtendedContracts.IsPrimaryKey = false;
				colvarNGross_ExtendedContracts.IsForeignKey = false;
				colvarNGross_ExtendedContracts.IsReadOnly = false;
				colvarNGross_ExtendedContracts.DefaultSetting = @"";
				colvarNGross_ExtendedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGross_ExtendedContracts);

				TableSchema.TableColumn colvarNGross_OtherContracts = new TableSchema.TableColumn(schema);
				colvarNGross_OtherContracts.ColumnName = "NGross_OtherContracts";
				colvarNGross_OtherContracts.DataType = DbType.Int32;
				colvarNGross_OtherContracts.MaxLength = 0;
				colvarNGross_OtherContracts.AutoIncrement = false;
				colvarNGross_OtherContracts.IsNullable = false;
				colvarNGross_OtherContracts.IsPrimaryKey = false;
				colvarNGross_OtherContracts.IsForeignKey = false;
				colvarNGross_OtherContracts.IsReadOnly = false;
				colvarNGross_OtherContracts.DefaultSetting = @"";
				colvarNGross_OtherContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGross_OtherContracts);

				TableSchema.TableColumn colvarNGross_CellUnits = new TableSchema.TableColumn(schema);
				colvarNGross_CellUnits.ColumnName = "NGross_CellUnits";
				colvarNGross_CellUnits.DataType = DbType.Int32;
				colvarNGross_CellUnits.MaxLength = 0;
				colvarNGross_CellUnits.AutoIncrement = false;
				colvarNGross_CellUnits.IsNullable = false;
				colvarNGross_CellUnits.IsPrimaryKey = false;
				colvarNGross_CellUnits.IsForeignKey = false;
				colvarNGross_CellUnits.IsReadOnly = false;
				colvarNGross_CellUnits.DefaultSetting = @"";
				colvarNGross_CellUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGross_CellUnits);

				TableSchema.TableColumn colvarNGross_SameDay = new TableSchema.TableColumn(schema);
				colvarNGross_SameDay.ColumnName = "NGross_SameDay";
				colvarNGross_SameDay.DataType = DbType.Int32;
				colvarNGross_SameDay.MaxLength = 0;
				colvarNGross_SameDay.AutoIncrement = false;
				colvarNGross_SameDay.IsNullable = false;
				colvarNGross_SameDay.IsPrimaryKey = false;
				colvarNGross_SameDay.IsForeignKey = false;
				colvarNGross_SameDay.IsReadOnly = false;
				colvarNGross_SameDay.DefaultSetting = @"";
				colvarNGross_SameDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNGross_SameDay);

				TableSchema.TableColumn colvarTotalGross_CreditScores = new TableSchema.TableColumn(schema);
				colvarTotalGross_CreditScores.ColumnName = "TotalGross_CreditScores";
				colvarTotalGross_CreditScores.DataType = DbType.Int32;
				colvarTotalGross_CreditScores.MaxLength = 0;
				colvarTotalGross_CreditScores.AutoIncrement = false;
				colvarTotalGross_CreditScores.IsNullable = false;
				colvarTotalGross_CreditScores.IsPrimaryKey = false;
				colvarTotalGross_CreditScores.IsForeignKey = false;
				colvarTotalGross_CreditScores.IsReadOnly = false;
				colvarTotalGross_CreditScores.DefaultSetting = @"";
				colvarTotalGross_CreditScores.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalGross_CreditScores);

				TableSchema.TableColumn colvarNExcellent = new TableSchema.TableColumn(schema);
				colvarNExcellent.ColumnName = "NExcellent";
				colvarNExcellent.DataType = DbType.Int32;
				colvarNExcellent.MaxLength = 0;
				colvarNExcellent.AutoIncrement = false;
				colvarNExcellent.IsNullable = false;
				colvarNExcellent.IsPrimaryKey = false;
				colvarNExcellent.IsForeignKey = false;
				colvarNExcellent.IsReadOnly = false;
				colvarNExcellent.DefaultSetting = @"";
				colvarNExcellent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNExcellent);

				TableSchema.TableColumn colvarNExcellent_Cancels = new TableSchema.TableColumn(schema);
				colvarNExcellent_Cancels.ColumnName = "NExcellent_Cancels";
				colvarNExcellent_Cancels.DataType = DbType.Int32;
				colvarNExcellent_Cancels.MaxLength = 0;
				colvarNExcellent_Cancels.AutoIncrement = false;
				colvarNExcellent_Cancels.IsNullable = false;
				colvarNExcellent_Cancels.IsPrimaryKey = false;
				colvarNExcellent_Cancels.IsForeignKey = false;
				colvarNExcellent_Cancels.IsReadOnly = false;
				colvarNExcellent_Cancels.DefaultSetting = @"";
				colvarNExcellent_Cancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNExcellent_Cancels);

				TableSchema.TableColumn colvarNExcellent_ActivationWaives = new TableSchema.TableColumn(schema);
				colvarNExcellent_ActivationWaives.ColumnName = "NExcellent_ActivationWaives";
				colvarNExcellent_ActivationWaives.DataType = DbType.Int32;
				colvarNExcellent_ActivationWaives.MaxLength = 0;
				colvarNExcellent_ActivationWaives.AutoIncrement = false;
				colvarNExcellent_ActivationWaives.IsNullable = false;
				colvarNExcellent_ActivationWaives.IsPrimaryKey = false;
				colvarNExcellent_ActivationWaives.IsForeignKey = false;
				colvarNExcellent_ActivationWaives.IsReadOnly = false;
				colvarNExcellent_ActivationWaives.DefaultSetting = @"";
				colvarNExcellent_ActivationWaives.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNExcellent_ActivationWaives);

				TableSchema.TableColumn colvarNExcellent_ExtendedContracts = new TableSchema.TableColumn(schema);
				colvarNExcellent_ExtendedContracts.ColumnName = "NExcellent_ExtendedContracts";
				colvarNExcellent_ExtendedContracts.DataType = DbType.Int32;
				colvarNExcellent_ExtendedContracts.MaxLength = 0;
				colvarNExcellent_ExtendedContracts.AutoIncrement = false;
				colvarNExcellent_ExtendedContracts.IsNullable = false;
				colvarNExcellent_ExtendedContracts.IsPrimaryKey = false;
				colvarNExcellent_ExtendedContracts.IsForeignKey = false;
				colvarNExcellent_ExtendedContracts.IsReadOnly = false;
				colvarNExcellent_ExtendedContracts.DefaultSetting = @"";
				colvarNExcellent_ExtendedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNExcellent_ExtendedContracts);

				TableSchema.TableColumn colvarNExcellent_OtherContracts = new TableSchema.TableColumn(schema);
				colvarNExcellent_OtherContracts.ColumnName = "NExcellent_OtherContracts";
				colvarNExcellent_OtherContracts.DataType = DbType.Int32;
				colvarNExcellent_OtherContracts.MaxLength = 0;
				colvarNExcellent_OtherContracts.AutoIncrement = false;
				colvarNExcellent_OtherContracts.IsNullable = false;
				colvarNExcellent_OtherContracts.IsPrimaryKey = false;
				colvarNExcellent_OtherContracts.IsForeignKey = false;
				colvarNExcellent_OtherContracts.IsReadOnly = false;
				colvarNExcellent_OtherContracts.DefaultSetting = @"";
				colvarNExcellent_OtherContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNExcellent_OtherContracts);

				TableSchema.TableColumn colvarNExcellent_CellUnits = new TableSchema.TableColumn(schema);
				colvarNExcellent_CellUnits.ColumnName = "NExcellent_CellUnits";
				colvarNExcellent_CellUnits.DataType = DbType.Int32;
				colvarNExcellent_CellUnits.MaxLength = 0;
				colvarNExcellent_CellUnits.AutoIncrement = false;
				colvarNExcellent_CellUnits.IsNullable = false;
				colvarNExcellent_CellUnits.IsPrimaryKey = false;
				colvarNExcellent_CellUnits.IsForeignKey = false;
				colvarNExcellent_CellUnits.IsReadOnly = false;
				colvarNExcellent_CellUnits.DefaultSetting = @"";
				colvarNExcellent_CellUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNExcellent_CellUnits);

				TableSchema.TableColumn colvarNExcellent_SameDay = new TableSchema.TableColumn(schema);
				colvarNExcellent_SameDay.ColumnName = "NExcellent_SameDay";
				colvarNExcellent_SameDay.DataType = DbType.Int32;
				colvarNExcellent_SameDay.MaxLength = 0;
				colvarNExcellent_SameDay.AutoIncrement = false;
				colvarNExcellent_SameDay.IsNullable = false;
				colvarNExcellent_SameDay.IsPrimaryKey = false;
				colvarNExcellent_SameDay.IsForeignKey = false;
				colvarNExcellent_SameDay.IsReadOnly = false;
				colvarNExcellent_SameDay.DefaultSetting = @"";
				colvarNExcellent_SameDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNExcellent_SameDay);

				TableSchema.TableColumn colvarTotalExcellent_CreditScores = new TableSchema.TableColumn(schema);
				colvarTotalExcellent_CreditScores.ColumnName = "TotalExcellent_CreditScores";
				colvarTotalExcellent_CreditScores.DataType = DbType.Int32;
				colvarTotalExcellent_CreditScores.MaxLength = 0;
				colvarTotalExcellent_CreditScores.AutoIncrement = false;
				colvarTotalExcellent_CreditScores.IsNullable = false;
				colvarTotalExcellent_CreditScores.IsPrimaryKey = false;
				colvarTotalExcellent_CreditScores.IsForeignKey = false;
				colvarTotalExcellent_CreditScores.IsReadOnly = false;
				colvarTotalExcellent_CreditScores.DefaultSetting = @"";
				colvarTotalExcellent_CreditScores.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalExcellent_CreditScores);

				TableSchema.TableColumn colvarNPass = new TableSchema.TableColumn(schema);
				colvarNPass.ColumnName = "NPass";
				colvarNPass.DataType = DbType.Int32;
				colvarNPass.MaxLength = 0;
				colvarNPass.AutoIncrement = false;
				colvarNPass.IsNullable = false;
				colvarNPass.IsPrimaryKey = false;
				colvarNPass.IsForeignKey = false;
				colvarNPass.IsReadOnly = false;
				colvarNPass.DefaultSetting = @"";
				colvarNPass.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPass);

				TableSchema.TableColumn colvarNPass_Cancels = new TableSchema.TableColumn(schema);
				colvarNPass_Cancels.ColumnName = "NPass_Cancels";
				colvarNPass_Cancels.DataType = DbType.Int32;
				colvarNPass_Cancels.MaxLength = 0;
				colvarNPass_Cancels.AutoIncrement = false;
				colvarNPass_Cancels.IsNullable = false;
				colvarNPass_Cancels.IsPrimaryKey = false;
				colvarNPass_Cancels.IsForeignKey = false;
				colvarNPass_Cancels.IsReadOnly = false;
				colvarNPass_Cancels.DefaultSetting = @"";
				colvarNPass_Cancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPass_Cancels);

				TableSchema.TableColumn colvarNPass_ActivationWaives = new TableSchema.TableColumn(schema);
				colvarNPass_ActivationWaives.ColumnName = "NPass_ActivationWaives";
				colvarNPass_ActivationWaives.DataType = DbType.Int32;
				colvarNPass_ActivationWaives.MaxLength = 0;
				colvarNPass_ActivationWaives.AutoIncrement = false;
				colvarNPass_ActivationWaives.IsNullable = false;
				colvarNPass_ActivationWaives.IsPrimaryKey = false;
				colvarNPass_ActivationWaives.IsForeignKey = false;
				colvarNPass_ActivationWaives.IsReadOnly = false;
				colvarNPass_ActivationWaives.DefaultSetting = @"";
				colvarNPass_ActivationWaives.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPass_ActivationWaives);

				TableSchema.TableColumn colvarNPass_ExtendedContracts = new TableSchema.TableColumn(schema);
				colvarNPass_ExtendedContracts.ColumnName = "NPass_ExtendedContracts";
				colvarNPass_ExtendedContracts.DataType = DbType.Int32;
				colvarNPass_ExtendedContracts.MaxLength = 0;
				colvarNPass_ExtendedContracts.AutoIncrement = false;
				colvarNPass_ExtendedContracts.IsNullable = false;
				colvarNPass_ExtendedContracts.IsPrimaryKey = false;
				colvarNPass_ExtendedContracts.IsForeignKey = false;
				colvarNPass_ExtendedContracts.IsReadOnly = false;
				colvarNPass_ExtendedContracts.DefaultSetting = @"";
				colvarNPass_ExtendedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPass_ExtendedContracts);

				TableSchema.TableColumn colvarNPass_OtherContracts = new TableSchema.TableColumn(schema);
				colvarNPass_OtherContracts.ColumnName = "NPass_OtherContracts";
				colvarNPass_OtherContracts.DataType = DbType.Int32;
				colvarNPass_OtherContracts.MaxLength = 0;
				colvarNPass_OtherContracts.AutoIncrement = false;
				colvarNPass_OtherContracts.IsNullable = false;
				colvarNPass_OtherContracts.IsPrimaryKey = false;
				colvarNPass_OtherContracts.IsForeignKey = false;
				colvarNPass_OtherContracts.IsReadOnly = false;
				colvarNPass_OtherContracts.DefaultSetting = @"";
				colvarNPass_OtherContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPass_OtherContracts);

				TableSchema.TableColumn colvarNPass_CellUnits = new TableSchema.TableColumn(schema);
				colvarNPass_CellUnits.ColumnName = "NPass_CellUnits";
				colvarNPass_CellUnits.DataType = DbType.Int32;
				colvarNPass_CellUnits.MaxLength = 0;
				colvarNPass_CellUnits.AutoIncrement = false;
				colvarNPass_CellUnits.IsNullable = false;
				colvarNPass_CellUnits.IsPrimaryKey = false;
				colvarNPass_CellUnits.IsForeignKey = false;
				colvarNPass_CellUnits.IsReadOnly = false;
				colvarNPass_CellUnits.DefaultSetting = @"";
				colvarNPass_CellUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPass_CellUnits);

				TableSchema.TableColumn colvarNPass_SameDay = new TableSchema.TableColumn(schema);
				colvarNPass_SameDay.ColumnName = "NPass_SameDay";
				colvarNPass_SameDay.DataType = DbType.Int32;
				colvarNPass_SameDay.MaxLength = 0;
				colvarNPass_SameDay.AutoIncrement = false;
				colvarNPass_SameDay.IsNullable = false;
				colvarNPass_SameDay.IsPrimaryKey = false;
				colvarNPass_SameDay.IsForeignKey = false;
				colvarNPass_SameDay.IsReadOnly = false;
				colvarNPass_SameDay.DefaultSetting = @"";
				colvarNPass_SameDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNPass_SameDay);

				TableSchema.TableColumn colvarTotalPass_CreditScores = new TableSchema.TableColumn(schema);
				colvarTotalPass_CreditScores.ColumnName = "TotalPass_CreditScores";
				colvarTotalPass_CreditScores.DataType = DbType.Int32;
				colvarTotalPass_CreditScores.MaxLength = 0;
				colvarTotalPass_CreditScores.AutoIncrement = false;
				colvarTotalPass_CreditScores.IsNullable = false;
				colvarTotalPass_CreditScores.IsPrimaryKey = false;
				colvarTotalPass_CreditScores.IsForeignKey = false;
				colvarTotalPass_CreditScores.IsReadOnly = false;
				colvarTotalPass_CreditScores.DefaultSetting = @"";
				colvarTotalPass_CreditScores.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPass_CreditScores);

				TableSchema.TableColumn colvarNSub = new TableSchema.TableColumn(schema);
				colvarNSub.ColumnName = "NSub";
				colvarNSub.DataType = DbType.Int32;
				colvarNSub.MaxLength = 0;
				colvarNSub.AutoIncrement = false;
				colvarNSub.IsNullable = false;
				colvarNSub.IsPrimaryKey = false;
				colvarNSub.IsForeignKey = false;
				colvarNSub.IsReadOnly = false;
				colvarNSub.DefaultSetting = @"";
				colvarNSub.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSub);

				TableSchema.TableColumn colvarNSub_Cancels = new TableSchema.TableColumn(schema);
				colvarNSub_Cancels.ColumnName = "NSub_Cancels";
				colvarNSub_Cancels.DataType = DbType.Int32;
				colvarNSub_Cancels.MaxLength = 0;
				colvarNSub_Cancels.AutoIncrement = false;
				colvarNSub_Cancels.IsNullable = false;
				colvarNSub_Cancels.IsPrimaryKey = false;
				colvarNSub_Cancels.IsForeignKey = false;
				colvarNSub_Cancels.IsReadOnly = false;
				colvarNSub_Cancels.DefaultSetting = @"";
				colvarNSub_Cancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSub_Cancels);

				TableSchema.TableColumn colvarNSub_ActivationWaives = new TableSchema.TableColumn(schema);
				colvarNSub_ActivationWaives.ColumnName = "NSub_ActivationWaives";
				colvarNSub_ActivationWaives.DataType = DbType.Int32;
				colvarNSub_ActivationWaives.MaxLength = 0;
				colvarNSub_ActivationWaives.AutoIncrement = false;
				colvarNSub_ActivationWaives.IsNullable = false;
				colvarNSub_ActivationWaives.IsPrimaryKey = false;
				colvarNSub_ActivationWaives.IsForeignKey = false;
				colvarNSub_ActivationWaives.IsReadOnly = false;
				colvarNSub_ActivationWaives.DefaultSetting = @"";
				colvarNSub_ActivationWaives.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSub_ActivationWaives);

				TableSchema.TableColumn colvarNSub_ExtendedContracts = new TableSchema.TableColumn(schema);
				colvarNSub_ExtendedContracts.ColumnName = "NSub_ExtendedContracts";
				colvarNSub_ExtendedContracts.DataType = DbType.Int32;
				colvarNSub_ExtendedContracts.MaxLength = 0;
				colvarNSub_ExtendedContracts.AutoIncrement = false;
				colvarNSub_ExtendedContracts.IsNullable = false;
				colvarNSub_ExtendedContracts.IsPrimaryKey = false;
				colvarNSub_ExtendedContracts.IsForeignKey = false;
				colvarNSub_ExtendedContracts.IsReadOnly = false;
				colvarNSub_ExtendedContracts.DefaultSetting = @"";
				colvarNSub_ExtendedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSub_ExtendedContracts);

				TableSchema.TableColumn colvarNSub_OtherContracts = new TableSchema.TableColumn(schema);
				colvarNSub_OtherContracts.ColumnName = "NSub_OtherContracts";
				colvarNSub_OtherContracts.DataType = DbType.Int32;
				colvarNSub_OtherContracts.MaxLength = 0;
				colvarNSub_OtherContracts.AutoIncrement = false;
				colvarNSub_OtherContracts.IsNullable = false;
				colvarNSub_OtherContracts.IsPrimaryKey = false;
				colvarNSub_OtherContracts.IsForeignKey = false;
				colvarNSub_OtherContracts.IsReadOnly = false;
				colvarNSub_OtherContracts.DefaultSetting = @"";
				colvarNSub_OtherContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSub_OtherContracts);

				TableSchema.TableColumn colvarNSub_CellUnits = new TableSchema.TableColumn(schema);
				colvarNSub_CellUnits.ColumnName = "NSub_CellUnits";
				colvarNSub_CellUnits.DataType = DbType.Int32;
				colvarNSub_CellUnits.MaxLength = 0;
				colvarNSub_CellUnits.AutoIncrement = false;
				colvarNSub_CellUnits.IsNullable = false;
				colvarNSub_CellUnits.IsPrimaryKey = false;
				colvarNSub_CellUnits.IsForeignKey = false;
				colvarNSub_CellUnits.IsReadOnly = false;
				colvarNSub_CellUnits.DefaultSetting = @"";
				colvarNSub_CellUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSub_CellUnits);

				TableSchema.TableColumn colvarNSub_SameDay = new TableSchema.TableColumn(schema);
				colvarNSub_SameDay.ColumnName = "NSub_SameDay";
				colvarNSub_SameDay.DataType = DbType.Int32;
				colvarNSub_SameDay.MaxLength = 0;
				colvarNSub_SameDay.AutoIncrement = false;
				colvarNSub_SameDay.IsNullable = false;
				colvarNSub_SameDay.IsPrimaryKey = false;
				colvarNSub_SameDay.IsForeignKey = false;
				colvarNSub_SameDay.IsReadOnly = false;
				colvarNSub_SameDay.DefaultSetting = @"";
				colvarNSub_SameDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSub_SameDay);

				TableSchema.TableColumn colvarTotalSub_CreditScores = new TableSchema.TableColumn(schema);
				colvarTotalSub_CreditScores.ColumnName = "TotalSub_CreditScores";
				colvarTotalSub_CreditScores.DataType = DbType.Int32;
				colvarTotalSub_CreditScores.MaxLength = 0;
				colvarTotalSub_CreditScores.AutoIncrement = false;
				colvarTotalSub_CreditScores.IsNullable = false;
				colvarTotalSub_CreditScores.IsPrimaryKey = false;
				colvarTotalSub_CreditScores.IsForeignKey = false;
				colvarTotalSub_CreditScores.IsReadOnly = false;
				colvarTotalSub_CreditScores.DefaultSetting = @"";
				colvarTotalSub_CreditScores.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalSub_CreditScores);

				TableSchema.TableColumn colvarNDailyGross = new TableSchema.TableColumn(schema);
				colvarNDailyGross.ColumnName = "NDailyGross";
				colvarNDailyGross.DataType = DbType.Int32;
				colvarNDailyGross.MaxLength = 0;
				colvarNDailyGross.AutoIncrement = false;
				colvarNDailyGross.IsNullable = false;
				colvarNDailyGross.IsPrimaryKey = false;
				colvarNDailyGross.IsForeignKey = false;
				colvarNDailyGross.IsReadOnly = false;
				colvarNDailyGross.DefaultSetting = @"";
				colvarNDailyGross.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyGross);

				TableSchema.TableColumn colvarNDaily = new TableSchema.TableColumn(schema);
				colvarNDaily.ColumnName = "NDaily";
				colvarNDaily.DataType = DbType.Int32;
				colvarNDaily.MaxLength = 0;
				colvarNDaily.AutoIncrement = false;
				colvarNDaily.IsNullable = false;
				colvarNDaily.IsPrimaryKey = false;
				colvarNDaily.IsForeignKey = false;
				colvarNDaily.IsReadOnly = false;
				colvarNDaily.DefaultSetting = @"";
				colvarNDaily.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDaily);

				TableSchema.TableColumn colvarNDailyGross_ActivationWaives = new TableSchema.TableColumn(schema);
				colvarNDailyGross_ActivationWaives.ColumnName = "NDailyGross_ActivationWaives";
				colvarNDailyGross_ActivationWaives.DataType = DbType.Int32;
				colvarNDailyGross_ActivationWaives.MaxLength = 0;
				colvarNDailyGross_ActivationWaives.AutoIncrement = false;
				colvarNDailyGross_ActivationWaives.IsNullable = false;
				colvarNDailyGross_ActivationWaives.IsPrimaryKey = false;
				colvarNDailyGross_ActivationWaives.IsForeignKey = false;
				colvarNDailyGross_ActivationWaives.IsReadOnly = false;
				colvarNDailyGross_ActivationWaives.DefaultSetting = @"";
				colvarNDailyGross_ActivationWaives.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyGross_ActivationWaives);

				TableSchema.TableColumn colvarNDailyGross_ExtendedContracts = new TableSchema.TableColumn(schema);
				colvarNDailyGross_ExtendedContracts.ColumnName = "NDailyGross_ExtendedContracts";
				colvarNDailyGross_ExtendedContracts.DataType = DbType.Int32;
				colvarNDailyGross_ExtendedContracts.MaxLength = 0;
				colvarNDailyGross_ExtendedContracts.AutoIncrement = false;
				colvarNDailyGross_ExtendedContracts.IsNullable = false;
				colvarNDailyGross_ExtendedContracts.IsPrimaryKey = false;
				colvarNDailyGross_ExtendedContracts.IsForeignKey = false;
				colvarNDailyGross_ExtendedContracts.IsReadOnly = false;
				colvarNDailyGross_ExtendedContracts.DefaultSetting = @"";
				colvarNDailyGross_ExtendedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyGross_ExtendedContracts);

				TableSchema.TableColumn colvarNDailyGross_OtherContracts = new TableSchema.TableColumn(schema);
				colvarNDailyGross_OtherContracts.ColumnName = "NDailyGross_OtherContracts";
				colvarNDailyGross_OtherContracts.DataType = DbType.Int32;
				colvarNDailyGross_OtherContracts.MaxLength = 0;
				colvarNDailyGross_OtherContracts.AutoIncrement = false;
				colvarNDailyGross_OtherContracts.IsNullable = false;
				colvarNDailyGross_OtherContracts.IsPrimaryKey = false;
				colvarNDailyGross_OtherContracts.IsForeignKey = false;
				colvarNDailyGross_OtherContracts.IsReadOnly = false;
				colvarNDailyGross_OtherContracts.DefaultSetting = @"";
				colvarNDailyGross_OtherContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyGross_OtherContracts);

				TableSchema.TableColumn colvarNDailyGross_CellUnits = new TableSchema.TableColumn(schema);
				colvarNDailyGross_CellUnits.ColumnName = "NDailyGross_CellUnits";
				colvarNDailyGross_CellUnits.DataType = DbType.Int32;
				colvarNDailyGross_CellUnits.MaxLength = 0;
				colvarNDailyGross_CellUnits.AutoIncrement = false;
				colvarNDailyGross_CellUnits.IsNullable = false;
				colvarNDailyGross_CellUnits.IsPrimaryKey = false;
				colvarNDailyGross_CellUnits.IsForeignKey = false;
				colvarNDailyGross_CellUnits.IsReadOnly = false;
				colvarNDailyGross_CellUnits.DefaultSetting = @"";
				colvarNDailyGross_CellUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyGross_CellUnits);

				TableSchema.TableColumn colvarNDailyGross_SameDay = new TableSchema.TableColumn(schema);
				colvarNDailyGross_SameDay.ColumnName = "NDailyGross_SameDay";
				colvarNDailyGross_SameDay.DataType = DbType.Int32;
				colvarNDailyGross_SameDay.MaxLength = 0;
				colvarNDailyGross_SameDay.AutoIncrement = false;
				colvarNDailyGross_SameDay.IsNullable = false;
				colvarNDailyGross_SameDay.IsPrimaryKey = false;
				colvarNDailyGross_SameDay.IsForeignKey = false;
				colvarNDailyGross_SameDay.IsReadOnly = false;
				colvarNDailyGross_SameDay.DefaultSetting = @"";
				colvarNDailyGross_SameDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyGross_SameDay);

				TableSchema.TableColumn colvarTotalDailyGross_CreditScores = new TableSchema.TableColumn(schema);
				colvarTotalDailyGross_CreditScores.ColumnName = "TotalDailyGross_CreditScores";
				colvarTotalDailyGross_CreditScores.DataType = DbType.Int32;
				colvarTotalDailyGross_CreditScores.MaxLength = 0;
				colvarTotalDailyGross_CreditScores.AutoIncrement = false;
				colvarTotalDailyGross_CreditScores.IsNullable = false;
				colvarTotalDailyGross_CreditScores.IsPrimaryKey = false;
				colvarTotalDailyGross_CreditScores.IsForeignKey = false;
				colvarTotalDailyGross_CreditScores.IsReadOnly = false;
				colvarTotalDailyGross_CreditScores.DefaultSetting = @"";
				colvarTotalDailyGross_CreditScores.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalDailyGross_CreditScores);

				TableSchema.TableColumn colvarNDailyExcellent = new TableSchema.TableColumn(schema);
				colvarNDailyExcellent.ColumnName = "NDailyExcellent";
				colvarNDailyExcellent.DataType = DbType.Int32;
				colvarNDailyExcellent.MaxLength = 0;
				colvarNDailyExcellent.AutoIncrement = false;
				colvarNDailyExcellent.IsNullable = false;
				colvarNDailyExcellent.IsPrimaryKey = false;
				colvarNDailyExcellent.IsForeignKey = false;
				colvarNDailyExcellent.IsReadOnly = false;
				colvarNDailyExcellent.DefaultSetting = @"";
				colvarNDailyExcellent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyExcellent);

				TableSchema.TableColumn colvarNDailyExcellent_Cancels = new TableSchema.TableColumn(schema);
				colvarNDailyExcellent_Cancels.ColumnName = "NDailyExcellent_Cancels";
				colvarNDailyExcellent_Cancels.DataType = DbType.Int32;
				colvarNDailyExcellent_Cancels.MaxLength = 0;
				colvarNDailyExcellent_Cancels.AutoIncrement = false;
				colvarNDailyExcellent_Cancels.IsNullable = false;
				colvarNDailyExcellent_Cancels.IsPrimaryKey = false;
				colvarNDailyExcellent_Cancels.IsForeignKey = false;
				colvarNDailyExcellent_Cancels.IsReadOnly = false;
				colvarNDailyExcellent_Cancels.DefaultSetting = @"";
				colvarNDailyExcellent_Cancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyExcellent_Cancels);

				TableSchema.TableColumn colvarNDailyExcellent_ActivationWaives = new TableSchema.TableColumn(schema);
				colvarNDailyExcellent_ActivationWaives.ColumnName = "NDailyExcellent_ActivationWaives";
				colvarNDailyExcellent_ActivationWaives.DataType = DbType.Int32;
				colvarNDailyExcellent_ActivationWaives.MaxLength = 0;
				colvarNDailyExcellent_ActivationWaives.AutoIncrement = false;
				colvarNDailyExcellent_ActivationWaives.IsNullable = false;
				colvarNDailyExcellent_ActivationWaives.IsPrimaryKey = false;
				colvarNDailyExcellent_ActivationWaives.IsForeignKey = false;
				colvarNDailyExcellent_ActivationWaives.IsReadOnly = false;
				colvarNDailyExcellent_ActivationWaives.DefaultSetting = @"";
				colvarNDailyExcellent_ActivationWaives.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyExcellent_ActivationWaives);

				TableSchema.TableColumn colvarNDailyExcellent_ExtendedContracts = new TableSchema.TableColumn(schema);
				colvarNDailyExcellent_ExtendedContracts.ColumnName = "NDailyExcellent_ExtendedContracts";
				colvarNDailyExcellent_ExtendedContracts.DataType = DbType.Int32;
				colvarNDailyExcellent_ExtendedContracts.MaxLength = 0;
				colvarNDailyExcellent_ExtendedContracts.AutoIncrement = false;
				colvarNDailyExcellent_ExtendedContracts.IsNullable = false;
				colvarNDailyExcellent_ExtendedContracts.IsPrimaryKey = false;
				colvarNDailyExcellent_ExtendedContracts.IsForeignKey = false;
				colvarNDailyExcellent_ExtendedContracts.IsReadOnly = false;
				colvarNDailyExcellent_ExtendedContracts.DefaultSetting = @"";
				colvarNDailyExcellent_ExtendedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyExcellent_ExtendedContracts);

				TableSchema.TableColumn colvarNDailyExcellent_OtherContracts = new TableSchema.TableColumn(schema);
				colvarNDailyExcellent_OtherContracts.ColumnName = "NDailyExcellent_OtherContracts";
				colvarNDailyExcellent_OtherContracts.DataType = DbType.Int32;
				colvarNDailyExcellent_OtherContracts.MaxLength = 0;
				colvarNDailyExcellent_OtherContracts.AutoIncrement = false;
				colvarNDailyExcellent_OtherContracts.IsNullable = false;
				colvarNDailyExcellent_OtherContracts.IsPrimaryKey = false;
				colvarNDailyExcellent_OtherContracts.IsForeignKey = false;
				colvarNDailyExcellent_OtherContracts.IsReadOnly = false;
				colvarNDailyExcellent_OtherContracts.DefaultSetting = @"";
				colvarNDailyExcellent_OtherContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyExcellent_OtherContracts);

				TableSchema.TableColumn colvarNDailyExcellent_CellUnits = new TableSchema.TableColumn(schema);
				colvarNDailyExcellent_CellUnits.ColumnName = "NDailyExcellent_CellUnits";
				colvarNDailyExcellent_CellUnits.DataType = DbType.Int32;
				colvarNDailyExcellent_CellUnits.MaxLength = 0;
				colvarNDailyExcellent_CellUnits.AutoIncrement = false;
				colvarNDailyExcellent_CellUnits.IsNullable = false;
				colvarNDailyExcellent_CellUnits.IsPrimaryKey = false;
				colvarNDailyExcellent_CellUnits.IsForeignKey = false;
				colvarNDailyExcellent_CellUnits.IsReadOnly = false;
				colvarNDailyExcellent_CellUnits.DefaultSetting = @"";
				colvarNDailyExcellent_CellUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyExcellent_CellUnits);

				TableSchema.TableColumn colvarNDailyExcellent_SameDay = new TableSchema.TableColumn(schema);
				colvarNDailyExcellent_SameDay.ColumnName = "NDailyExcellent_SameDay";
				colvarNDailyExcellent_SameDay.DataType = DbType.Int32;
				colvarNDailyExcellent_SameDay.MaxLength = 0;
				colvarNDailyExcellent_SameDay.AutoIncrement = false;
				colvarNDailyExcellent_SameDay.IsNullable = false;
				colvarNDailyExcellent_SameDay.IsPrimaryKey = false;
				colvarNDailyExcellent_SameDay.IsForeignKey = false;
				colvarNDailyExcellent_SameDay.IsReadOnly = false;
				colvarNDailyExcellent_SameDay.DefaultSetting = @"";
				colvarNDailyExcellent_SameDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyExcellent_SameDay);

				TableSchema.TableColumn colvarTotalDailyExcellent_CreditScores = new TableSchema.TableColumn(schema);
				colvarTotalDailyExcellent_CreditScores.ColumnName = "TotalDailyExcellent_CreditScores";
				colvarTotalDailyExcellent_CreditScores.DataType = DbType.Int32;
				colvarTotalDailyExcellent_CreditScores.MaxLength = 0;
				colvarTotalDailyExcellent_CreditScores.AutoIncrement = false;
				colvarTotalDailyExcellent_CreditScores.IsNullable = false;
				colvarTotalDailyExcellent_CreditScores.IsPrimaryKey = false;
				colvarTotalDailyExcellent_CreditScores.IsForeignKey = false;
				colvarTotalDailyExcellent_CreditScores.IsReadOnly = false;
				colvarTotalDailyExcellent_CreditScores.DefaultSetting = @"";
				colvarTotalDailyExcellent_CreditScores.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalDailyExcellent_CreditScores);

				TableSchema.TableColumn colvarNDailyPass = new TableSchema.TableColumn(schema);
				colvarNDailyPass.ColumnName = "NDailyPass";
				colvarNDailyPass.DataType = DbType.Int32;
				colvarNDailyPass.MaxLength = 0;
				colvarNDailyPass.AutoIncrement = false;
				colvarNDailyPass.IsNullable = false;
				colvarNDailyPass.IsPrimaryKey = false;
				colvarNDailyPass.IsForeignKey = false;
				colvarNDailyPass.IsReadOnly = false;
				colvarNDailyPass.DefaultSetting = @"";
				colvarNDailyPass.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyPass);

				TableSchema.TableColumn colvarNDailyPass_Cancels = new TableSchema.TableColumn(schema);
				colvarNDailyPass_Cancels.ColumnName = "NDailyPass_Cancels";
				colvarNDailyPass_Cancels.DataType = DbType.Int32;
				colvarNDailyPass_Cancels.MaxLength = 0;
				colvarNDailyPass_Cancels.AutoIncrement = false;
				colvarNDailyPass_Cancels.IsNullable = false;
				colvarNDailyPass_Cancels.IsPrimaryKey = false;
				colvarNDailyPass_Cancels.IsForeignKey = false;
				colvarNDailyPass_Cancels.IsReadOnly = false;
				colvarNDailyPass_Cancels.DefaultSetting = @"";
				colvarNDailyPass_Cancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyPass_Cancels);

				TableSchema.TableColumn colvarNDailyPass_ActivationWaives = new TableSchema.TableColumn(schema);
				colvarNDailyPass_ActivationWaives.ColumnName = "NDailyPass_ActivationWaives";
				colvarNDailyPass_ActivationWaives.DataType = DbType.Int32;
				colvarNDailyPass_ActivationWaives.MaxLength = 0;
				colvarNDailyPass_ActivationWaives.AutoIncrement = false;
				colvarNDailyPass_ActivationWaives.IsNullable = false;
				colvarNDailyPass_ActivationWaives.IsPrimaryKey = false;
				colvarNDailyPass_ActivationWaives.IsForeignKey = false;
				colvarNDailyPass_ActivationWaives.IsReadOnly = false;
				colvarNDailyPass_ActivationWaives.DefaultSetting = @"";
				colvarNDailyPass_ActivationWaives.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyPass_ActivationWaives);

				TableSchema.TableColumn colvarNDailyPass_ExtendedContracts = new TableSchema.TableColumn(schema);
				colvarNDailyPass_ExtendedContracts.ColumnName = "NDailyPass_ExtendedContracts";
				colvarNDailyPass_ExtendedContracts.DataType = DbType.Int32;
				colvarNDailyPass_ExtendedContracts.MaxLength = 0;
				colvarNDailyPass_ExtendedContracts.AutoIncrement = false;
				colvarNDailyPass_ExtendedContracts.IsNullable = false;
				colvarNDailyPass_ExtendedContracts.IsPrimaryKey = false;
				colvarNDailyPass_ExtendedContracts.IsForeignKey = false;
				colvarNDailyPass_ExtendedContracts.IsReadOnly = false;
				colvarNDailyPass_ExtendedContracts.DefaultSetting = @"";
				colvarNDailyPass_ExtendedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyPass_ExtendedContracts);

				TableSchema.TableColumn colvarNDailyPass_OtherContracts = new TableSchema.TableColumn(schema);
				colvarNDailyPass_OtherContracts.ColumnName = "NDailyPass_OtherContracts";
				colvarNDailyPass_OtherContracts.DataType = DbType.Int32;
				colvarNDailyPass_OtherContracts.MaxLength = 0;
				colvarNDailyPass_OtherContracts.AutoIncrement = false;
				colvarNDailyPass_OtherContracts.IsNullable = false;
				colvarNDailyPass_OtherContracts.IsPrimaryKey = false;
				colvarNDailyPass_OtherContracts.IsForeignKey = false;
				colvarNDailyPass_OtherContracts.IsReadOnly = false;
				colvarNDailyPass_OtherContracts.DefaultSetting = @"";
				colvarNDailyPass_OtherContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyPass_OtherContracts);

				TableSchema.TableColumn colvarNDailyPass_CellUnits = new TableSchema.TableColumn(schema);
				colvarNDailyPass_CellUnits.ColumnName = "NDailyPass_CellUnits";
				colvarNDailyPass_CellUnits.DataType = DbType.Int32;
				colvarNDailyPass_CellUnits.MaxLength = 0;
				colvarNDailyPass_CellUnits.AutoIncrement = false;
				colvarNDailyPass_CellUnits.IsNullable = false;
				colvarNDailyPass_CellUnits.IsPrimaryKey = false;
				colvarNDailyPass_CellUnits.IsForeignKey = false;
				colvarNDailyPass_CellUnits.IsReadOnly = false;
				colvarNDailyPass_CellUnits.DefaultSetting = @"";
				colvarNDailyPass_CellUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyPass_CellUnits);

				TableSchema.TableColumn colvarNDailyPass_SameDay = new TableSchema.TableColumn(schema);
				colvarNDailyPass_SameDay.ColumnName = "NDailyPass_SameDay";
				colvarNDailyPass_SameDay.DataType = DbType.Int32;
				colvarNDailyPass_SameDay.MaxLength = 0;
				colvarNDailyPass_SameDay.AutoIncrement = false;
				colvarNDailyPass_SameDay.IsNullable = false;
				colvarNDailyPass_SameDay.IsPrimaryKey = false;
				colvarNDailyPass_SameDay.IsForeignKey = false;
				colvarNDailyPass_SameDay.IsReadOnly = false;
				colvarNDailyPass_SameDay.DefaultSetting = @"";
				colvarNDailyPass_SameDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailyPass_SameDay);

				TableSchema.TableColumn colvarTotalDailyPass_CreditScores = new TableSchema.TableColumn(schema);
				colvarTotalDailyPass_CreditScores.ColumnName = "TotalDailyPass_CreditScores";
				colvarTotalDailyPass_CreditScores.DataType = DbType.Int32;
				colvarTotalDailyPass_CreditScores.MaxLength = 0;
				colvarTotalDailyPass_CreditScores.AutoIncrement = false;
				colvarTotalDailyPass_CreditScores.IsNullable = false;
				colvarTotalDailyPass_CreditScores.IsPrimaryKey = false;
				colvarTotalDailyPass_CreditScores.IsForeignKey = false;
				colvarTotalDailyPass_CreditScores.IsReadOnly = false;
				colvarTotalDailyPass_CreditScores.DefaultSetting = @"";
				colvarTotalDailyPass_CreditScores.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalDailyPass_CreditScores);

				TableSchema.TableColumn colvarNDailySub = new TableSchema.TableColumn(schema);
				colvarNDailySub.ColumnName = "NDailySub";
				colvarNDailySub.DataType = DbType.Int32;
				colvarNDailySub.MaxLength = 0;
				colvarNDailySub.AutoIncrement = false;
				colvarNDailySub.IsNullable = false;
				colvarNDailySub.IsPrimaryKey = false;
				colvarNDailySub.IsForeignKey = false;
				colvarNDailySub.IsReadOnly = false;
				colvarNDailySub.DefaultSetting = @"";
				colvarNDailySub.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailySub);

				TableSchema.TableColumn colvarNDailySub_Cancels = new TableSchema.TableColumn(schema);
				colvarNDailySub_Cancels.ColumnName = "NDailySub_Cancels";
				colvarNDailySub_Cancels.DataType = DbType.Int32;
				colvarNDailySub_Cancels.MaxLength = 0;
				colvarNDailySub_Cancels.AutoIncrement = false;
				colvarNDailySub_Cancels.IsNullable = false;
				colvarNDailySub_Cancels.IsPrimaryKey = false;
				colvarNDailySub_Cancels.IsForeignKey = false;
				colvarNDailySub_Cancels.IsReadOnly = false;
				colvarNDailySub_Cancels.DefaultSetting = @"";
				colvarNDailySub_Cancels.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailySub_Cancels);

				TableSchema.TableColumn colvarNDailySub_ActivationWaives = new TableSchema.TableColumn(schema);
				colvarNDailySub_ActivationWaives.ColumnName = "NDailySub_ActivationWaives";
				colvarNDailySub_ActivationWaives.DataType = DbType.Int32;
				colvarNDailySub_ActivationWaives.MaxLength = 0;
				colvarNDailySub_ActivationWaives.AutoIncrement = false;
				colvarNDailySub_ActivationWaives.IsNullable = false;
				colvarNDailySub_ActivationWaives.IsPrimaryKey = false;
				colvarNDailySub_ActivationWaives.IsForeignKey = false;
				colvarNDailySub_ActivationWaives.IsReadOnly = false;
				colvarNDailySub_ActivationWaives.DefaultSetting = @"";
				colvarNDailySub_ActivationWaives.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailySub_ActivationWaives);

				TableSchema.TableColumn colvarNDailySub_ExtendedContracts = new TableSchema.TableColumn(schema);
				colvarNDailySub_ExtendedContracts.ColumnName = "NDailySub_ExtendedContracts";
				colvarNDailySub_ExtendedContracts.DataType = DbType.Int32;
				colvarNDailySub_ExtendedContracts.MaxLength = 0;
				colvarNDailySub_ExtendedContracts.AutoIncrement = false;
				colvarNDailySub_ExtendedContracts.IsNullable = false;
				colvarNDailySub_ExtendedContracts.IsPrimaryKey = false;
				colvarNDailySub_ExtendedContracts.IsForeignKey = false;
				colvarNDailySub_ExtendedContracts.IsReadOnly = false;
				colvarNDailySub_ExtendedContracts.DefaultSetting = @"";
				colvarNDailySub_ExtendedContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailySub_ExtendedContracts);

				TableSchema.TableColumn colvarNDailySub_OtherContracts = new TableSchema.TableColumn(schema);
				colvarNDailySub_OtherContracts.ColumnName = "NDailySub_OtherContracts";
				colvarNDailySub_OtherContracts.DataType = DbType.Int32;
				colvarNDailySub_OtherContracts.MaxLength = 0;
				colvarNDailySub_OtherContracts.AutoIncrement = false;
				colvarNDailySub_OtherContracts.IsNullable = false;
				colvarNDailySub_OtherContracts.IsPrimaryKey = false;
				colvarNDailySub_OtherContracts.IsForeignKey = false;
				colvarNDailySub_OtherContracts.IsReadOnly = false;
				colvarNDailySub_OtherContracts.DefaultSetting = @"";
				colvarNDailySub_OtherContracts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailySub_OtherContracts);

				TableSchema.TableColumn colvarNDailySub_CellUnits = new TableSchema.TableColumn(schema);
				colvarNDailySub_CellUnits.ColumnName = "NDailySub_CellUnits";
				colvarNDailySub_CellUnits.DataType = DbType.Int32;
				colvarNDailySub_CellUnits.MaxLength = 0;
				colvarNDailySub_CellUnits.AutoIncrement = false;
				colvarNDailySub_CellUnits.IsNullable = false;
				colvarNDailySub_CellUnits.IsPrimaryKey = false;
				colvarNDailySub_CellUnits.IsForeignKey = false;
				colvarNDailySub_CellUnits.IsReadOnly = false;
				colvarNDailySub_CellUnits.DefaultSetting = @"";
				colvarNDailySub_CellUnits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailySub_CellUnits);

				TableSchema.TableColumn colvarNDailySub_SameDay = new TableSchema.TableColumn(schema);
				colvarNDailySub_SameDay.ColumnName = "NDailySub_SameDay";
				colvarNDailySub_SameDay.DataType = DbType.Int32;
				colvarNDailySub_SameDay.MaxLength = 0;
				colvarNDailySub_SameDay.AutoIncrement = false;
				colvarNDailySub_SameDay.IsNullable = false;
				colvarNDailySub_SameDay.IsPrimaryKey = false;
				colvarNDailySub_SameDay.IsForeignKey = false;
				colvarNDailySub_SameDay.IsReadOnly = false;
				colvarNDailySub_SameDay.DefaultSetting = @"";
				colvarNDailySub_SameDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNDailySub_SameDay);

				TableSchema.TableColumn colvarTotalDailySub_CreditScores = new TableSchema.TableColumn(schema);
				colvarTotalDailySub_CreditScores.ColumnName = "TotalDailySub_CreditScores";
				colvarTotalDailySub_CreditScores.DataType = DbType.Int32;
				colvarTotalDailySub_CreditScores.MaxLength = 0;
				colvarTotalDailySub_CreditScores.AutoIncrement = false;
				colvarTotalDailySub_CreditScores.IsNullable = false;
				colvarTotalDailySub_CreditScores.IsPrimaryKey = false;
				colvarTotalDailySub_CreditScores.IsForeignKey = false;
				colvarTotalDailySub_CreditScores.IsReadOnly = false;
				colvarTotalDailySub_CreditScores.DefaultSetting = @"";
				colvarTotalDailySub_CreditScores.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalDailySub_CreditScores);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_RepSalesTotalsSnapShots",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_RepSalesTotalsSnapShot LoadFrom(SAE_RepSalesTotalsSnapShot item)
		{
			SAE_RepSalesTotalsSnapShot result = new SAE_RepSalesTotalsSnapShot();
			if (item.RepSalesTotalsSnapShotsID != default(int)) {
				result.LoadByKey(item.RepSalesTotalsSnapShotsID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int RepSalesTotalsSnapShotsID {
			get { return GetColumnValue<int>(Columns.RepSalesTotalsSnapShotsID); }
			set {
				SetColumnValue(Columns.RepSalesTotalsSnapShotsID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RepSalesTotalsSnapShotsID));
			}
		}
		[DataMember]
		public DateTime SnapShotDate {
			get { return GetColumnValue<DateTime>(Columns.SnapShotDate); }
			set {
				SetColumnValue(Columns.SnapShotDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SnapShotDate));
			}
		}
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public int UserID {
			get { return GetColumnValue<int>(Columns.UserID); }
			set {
				SetColumnValue(Columns.UserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UserID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int? TeamID {
			get { return GetColumnValue<int?>(Columns.TeamID); }
			set {
				SetColumnValue(Columns.TeamID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamID));
			}
		}
		[DataMember]
		public int? TeamLocationID {
			get { return GetColumnValue<int?>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int NGross {
			get { return GetColumnValue<int>(Columns.NGross); }
			set {
				SetColumnValue(Columns.NGross, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGross));
			}
		}
		[DataMember]
		public int NGross_Cancels {
			get { return GetColumnValue<int>(Columns.NGross_Cancels); }
			set {
				SetColumnValue(Columns.NGross_Cancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGross_Cancels));
			}
		}
		[DataMember]
		public int NGross_ActivationWaives {
			get { return GetColumnValue<int>(Columns.NGross_ActivationWaives); }
			set {
				SetColumnValue(Columns.NGross_ActivationWaives, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGross_ActivationWaives));
			}
		}
		[DataMember]
		public int NGross_ExtendedContracts {
			get { return GetColumnValue<int>(Columns.NGross_ExtendedContracts); }
			set {
				SetColumnValue(Columns.NGross_ExtendedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGross_ExtendedContracts));
			}
		}
		[DataMember]
		public int NGross_OtherContracts {
			get { return GetColumnValue<int>(Columns.NGross_OtherContracts); }
			set {
				SetColumnValue(Columns.NGross_OtherContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGross_OtherContracts));
			}
		}
		[DataMember]
		public int NGross_CellUnits {
			get { return GetColumnValue<int>(Columns.NGross_CellUnits); }
			set {
				SetColumnValue(Columns.NGross_CellUnits, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGross_CellUnits));
			}
		}
		[DataMember]
		public int NGross_SameDay {
			get { return GetColumnValue<int>(Columns.NGross_SameDay); }
			set {
				SetColumnValue(Columns.NGross_SameDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NGross_SameDay));
			}
		}
		[DataMember]
		public int TotalGross_CreditScores {
			get { return GetColumnValue<int>(Columns.TotalGross_CreditScores); }
			set {
				SetColumnValue(Columns.TotalGross_CreditScores, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalGross_CreditScores));
			}
		}
		[DataMember]
		public int NExcellent {
			get { return GetColumnValue<int>(Columns.NExcellent); }
			set {
				SetColumnValue(Columns.NExcellent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NExcellent));
			}
		}
		[DataMember]
		public int NExcellent_Cancels {
			get { return GetColumnValue<int>(Columns.NExcellent_Cancels); }
			set {
				SetColumnValue(Columns.NExcellent_Cancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NExcellent_Cancels));
			}
		}
		[DataMember]
		public int NExcellent_ActivationWaives {
			get { return GetColumnValue<int>(Columns.NExcellent_ActivationWaives); }
			set {
				SetColumnValue(Columns.NExcellent_ActivationWaives, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NExcellent_ActivationWaives));
			}
		}
		[DataMember]
		public int NExcellent_ExtendedContracts {
			get { return GetColumnValue<int>(Columns.NExcellent_ExtendedContracts); }
			set {
				SetColumnValue(Columns.NExcellent_ExtendedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NExcellent_ExtendedContracts));
			}
		}
		[DataMember]
		public int NExcellent_OtherContracts {
			get { return GetColumnValue<int>(Columns.NExcellent_OtherContracts); }
			set {
				SetColumnValue(Columns.NExcellent_OtherContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NExcellent_OtherContracts));
			}
		}
		[DataMember]
		public int NExcellent_CellUnits {
			get { return GetColumnValue<int>(Columns.NExcellent_CellUnits); }
			set {
				SetColumnValue(Columns.NExcellent_CellUnits, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NExcellent_CellUnits));
			}
		}
		[DataMember]
		public int NExcellent_SameDay {
			get { return GetColumnValue<int>(Columns.NExcellent_SameDay); }
			set {
				SetColumnValue(Columns.NExcellent_SameDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NExcellent_SameDay));
			}
		}
		[DataMember]
		public int TotalExcellent_CreditScores {
			get { return GetColumnValue<int>(Columns.TotalExcellent_CreditScores); }
			set {
				SetColumnValue(Columns.TotalExcellent_CreditScores, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalExcellent_CreditScores));
			}
		}
		[DataMember]
		public int NPass {
			get { return GetColumnValue<int>(Columns.NPass); }
			set {
				SetColumnValue(Columns.NPass, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPass));
			}
		}
		[DataMember]
		public int NPass_Cancels {
			get { return GetColumnValue<int>(Columns.NPass_Cancels); }
			set {
				SetColumnValue(Columns.NPass_Cancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPass_Cancels));
			}
		}
		[DataMember]
		public int NPass_ActivationWaives {
			get { return GetColumnValue<int>(Columns.NPass_ActivationWaives); }
			set {
				SetColumnValue(Columns.NPass_ActivationWaives, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPass_ActivationWaives));
			}
		}
		[DataMember]
		public int NPass_ExtendedContracts {
			get { return GetColumnValue<int>(Columns.NPass_ExtendedContracts); }
			set {
				SetColumnValue(Columns.NPass_ExtendedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPass_ExtendedContracts));
			}
		}
		[DataMember]
		public int NPass_OtherContracts {
			get { return GetColumnValue<int>(Columns.NPass_OtherContracts); }
			set {
				SetColumnValue(Columns.NPass_OtherContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPass_OtherContracts));
			}
		}
		[DataMember]
		public int NPass_CellUnits {
			get { return GetColumnValue<int>(Columns.NPass_CellUnits); }
			set {
				SetColumnValue(Columns.NPass_CellUnits, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPass_CellUnits));
			}
		}
		[DataMember]
		public int NPass_SameDay {
			get { return GetColumnValue<int>(Columns.NPass_SameDay); }
			set {
				SetColumnValue(Columns.NPass_SameDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NPass_SameDay));
			}
		}
		[DataMember]
		public int TotalPass_CreditScores {
			get { return GetColumnValue<int>(Columns.TotalPass_CreditScores); }
			set {
				SetColumnValue(Columns.TotalPass_CreditScores, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPass_CreditScores));
			}
		}
		[DataMember]
		public int NSub {
			get { return GetColumnValue<int>(Columns.NSub); }
			set {
				SetColumnValue(Columns.NSub, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSub));
			}
		}
		[DataMember]
		public int NSub_Cancels {
			get { return GetColumnValue<int>(Columns.NSub_Cancels); }
			set {
				SetColumnValue(Columns.NSub_Cancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSub_Cancels));
			}
		}
		[DataMember]
		public int NSub_ActivationWaives {
			get { return GetColumnValue<int>(Columns.NSub_ActivationWaives); }
			set {
				SetColumnValue(Columns.NSub_ActivationWaives, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSub_ActivationWaives));
			}
		}
		[DataMember]
		public int NSub_ExtendedContracts {
			get { return GetColumnValue<int>(Columns.NSub_ExtendedContracts); }
			set {
				SetColumnValue(Columns.NSub_ExtendedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSub_ExtendedContracts));
			}
		}
		[DataMember]
		public int NSub_OtherContracts {
			get { return GetColumnValue<int>(Columns.NSub_OtherContracts); }
			set {
				SetColumnValue(Columns.NSub_OtherContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSub_OtherContracts));
			}
		}
		[DataMember]
		public int NSub_CellUnits {
			get { return GetColumnValue<int>(Columns.NSub_CellUnits); }
			set {
				SetColumnValue(Columns.NSub_CellUnits, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSub_CellUnits));
			}
		}
		[DataMember]
		public int NSub_SameDay {
			get { return GetColumnValue<int>(Columns.NSub_SameDay); }
			set {
				SetColumnValue(Columns.NSub_SameDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSub_SameDay));
			}
		}
		[DataMember]
		public int TotalSub_CreditScores {
			get { return GetColumnValue<int>(Columns.TotalSub_CreditScores); }
			set {
				SetColumnValue(Columns.TotalSub_CreditScores, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalSub_CreditScores));
			}
		}
		[DataMember]
		public int NDailyGross {
			get { return GetColumnValue<int>(Columns.NDailyGross); }
			set {
				SetColumnValue(Columns.NDailyGross, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyGross));
			}
		}
		[DataMember]
		public int NDaily {
			get { return GetColumnValue<int>(Columns.NDaily); }
			set {
				SetColumnValue(Columns.NDaily, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDaily));
			}
		}
		[DataMember]
		public int NDailyGross_ActivationWaives {
			get { return GetColumnValue<int>(Columns.NDailyGross_ActivationWaives); }
			set {
				SetColumnValue(Columns.NDailyGross_ActivationWaives, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyGross_ActivationWaives));
			}
		}
		[DataMember]
		public int NDailyGross_ExtendedContracts {
			get { return GetColumnValue<int>(Columns.NDailyGross_ExtendedContracts); }
			set {
				SetColumnValue(Columns.NDailyGross_ExtendedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyGross_ExtendedContracts));
			}
		}
		[DataMember]
		public int NDailyGross_OtherContracts {
			get { return GetColumnValue<int>(Columns.NDailyGross_OtherContracts); }
			set {
				SetColumnValue(Columns.NDailyGross_OtherContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyGross_OtherContracts));
			}
		}
		[DataMember]
		public int NDailyGross_CellUnits {
			get { return GetColumnValue<int>(Columns.NDailyGross_CellUnits); }
			set {
				SetColumnValue(Columns.NDailyGross_CellUnits, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyGross_CellUnits));
			}
		}
		[DataMember]
		public int NDailyGross_SameDay {
			get { return GetColumnValue<int>(Columns.NDailyGross_SameDay); }
			set {
				SetColumnValue(Columns.NDailyGross_SameDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyGross_SameDay));
			}
		}
		[DataMember]
		public int TotalDailyGross_CreditScores {
			get { return GetColumnValue<int>(Columns.TotalDailyGross_CreditScores); }
			set {
				SetColumnValue(Columns.TotalDailyGross_CreditScores, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalDailyGross_CreditScores));
			}
		}
		[DataMember]
		public int NDailyExcellent {
			get { return GetColumnValue<int>(Columns.NDailyExcellent); }
			set {
				SetColumnValue(Columns.NDailyExcellent, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyExcellent));
			}
		}
		[DataMember]
		public int NDailyExcellent_Cancels {
			get { return GetColumnValue<int>(Columns.NDailyExcellent_Cancels); }
			set {
				SetColumnValue(Columns.NDailyExcellent_Cancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyExcellent_Cancels));
			}
		}
		[DataMember]
		public int NDailyExcellent_ActivationWaives {
			get { return GetColumnValue<int>(Columns.NDailyExcellent_ActivationWaives); }
			set {
				SetColumnValue(Columns.NDailyExcellent_ActivationWaives, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyExcellent_ActivationWaives));
			}
		}
		[DataMember]
		public int NDailyExcellent_ExtendedContracts {
			get { return GetColumnValue<int>(Columns.NDailyExcellent_ExtendedContracts); }
			set {
				SetColumnValue(Columns.NDailyExcellent_ExtendedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyExcellent_ExtendedContracts));
			}
		}
		[DataMember]
		public int NDailyExcellent_OtherContracts {
			get { return GetColumnValue<int>(Columns.NDailyExcellent_OtherContracts); }
			set {
				SetColumnValue(Columns.NDailyExcellent_OtherContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyExcellent_OtherContracts));
			}
		}
		[DataMember]
		public int NDailyExcellent_CellUnits {
			get { return GetColumnValue<int>(Columns.NDailyExcellent_CellUnits); }
			set {
				SetColumnValue(Columns.NDailyExcellent_CellUnits, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyExcellent_CellUnits));
			}
		}
		[DataMember]
		public int NDailyExcellent_SameDay {
			get { return GetColumnValue<int>(Columns.NDailyExcellent_SameDay); }
			set {
				SetColumnValue(Columns.NDailyExcellent_SameDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyExcellent_SameDay));
			}
		}
		[DataMember]
		public int TotalDailyExcellent_CreditScores {
			get { return GetColumnValue<int>(Columns.TotalDailyExcellent_CreditScores); }
			set {
				SetColumnValue(Columns.TotalDailyExcellent_CreditScores, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalDailyExcellent_CreditScores));
			}
		}
		[DataMember]
		public int NDailyPass {
			get { return GetColumnValue<int>(Columns.NDailyPass); }
			set {
				SetColumnValue(Columns.NDailyPass, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyPass));
			}
		}
		[DataMember]
		public int NDailyPass_Cancels {
			get { return GetColumnValue<int>(Columns.NDailyPass_Cancels); }
			set {
				SetColumnValue(Columns.NDailyPass_Cancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyPass_Cancels));
			}
		}
		[DataMember]
		public int NDailyPass_ActivationWaives {
			get { return GetColumnValue<int>(Columns.NDailyPass_ActivationWaives); }
			set {
				SetColumnValue(Columns.NDailyPass_ActivationWaives, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyPass_ActivationWaives));
			}
		}
		[DataMember]
		public int NDailyPass_ExtendedContracts {
			get { return GetColumnValue<int>(Columns.NDailyPass_ExtendedContracts); }
			set {
				SetColumnValue(Columns.NDailyPass_ExtendedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyPass_ExtendedContracts));
			}
		}
		[DataMember]
		public int NDailyPass_OtherContracts {
			get { return GetColumnValue<int>(Columns.NDailyPass_OtherContracts); }
			set {
				SetColumnValue(Columns.NDailyPass_OtherContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyPass_OtherContracts));
			}
		}
		[DataMember]
		public int NDailyPass_CellUnits {
			get { return GetColumnValue<int>(Columns.NDailyPass_CellUnits); }
			set {
				SetColumnValue(Columns.NDailyPass_CellUnits, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyPass_CellUnits));
			}
		}
		[DataMember]
		public int NDailyPass_SameDay {
			get { return GetColumnValue<int>(Columns.NDailyPass_SameDay); }
			set {
				SetColumnValue(Columns.NDailyPass_SameDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailyPass_SameDay));
			}
		}
		[DataMember]
		public int TotalDailyPass_CreditScores {
			get { return GetColumnValue<int>(Columns.TotalDailyPass_CreditScores); }
			set {
				SetColumnValue(Columns.TotalDailyPass_CreditScores, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalDailyPass_CreditScores));
			}
		}
		[DataMember]
		public int NDailySub {
			get { return GetColumnValue<int>(Columns.NDailySub); }
			set {
				SetColumnValue(Columns.NDailySub, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailySub));
			}
		}
		[DataMember]
		public int NDailySub_Cancels {
			get { return GetColumnValue<int>(Columns.NDailySub_Cancels); }
			set {
				SetColumnValue(Columns.NDailySub_Cancels, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailySub_Cancels));
			}
		}
		[DataMember]
		public int NDailySub_ActivationWaives {
			get { return GetColumnValue<int>(Columns.NDailySub_ActivationWaives); }
			set {
				SetColumnValue(Columns.NDailySub_ActivationWaives, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailySub_ActivationWaives));
			}
		}
		[DataMember]
		public int NDailySub_ExtendedContracts {
			get { return GetColumnValue<int>(Columns.NDailySub_ExtendedContracts); }
			set {
				SetColumnValue(Columns.NDailySub_ExtendedContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailySub_ExtendedContracts));
			}
		}
		[DataMember]
		public int NDailySub_OtherContracts {
			get { return GetColumnValue<int>(Columns.NDailySub_OtherContracts); }
			set {
				SetColumnValue(Columns.NDailySub_OtherContracts, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailySub_OtherContracts));
			}
		}
		[DataMember]
		public int NDailySub_CellUnits {
			get { return GetColumnValue<int>(Columns.NDailySub_CellUnits); }
			set {
				SetColumnValue(Columns.NDailySub_CellUnits, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailySub_CellUnits));
			}
		}
		[DataMember]
		public int NDailySub_SameDay {
			get { return GetColumnValue<int>(Columns.NDailySub_SameDay); }
			set {
				SetColumnValue(Columns.NDailySub_SameDay, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NDailySub_SameDay));
			}
		}
		[DataMember]
		public int TotalDailySub_CreditScores {
			get { return GetColumnValue<int>(Columns.TotalDailySub_CreditScores); }
			set {
				SetColumnValue(Columns.TotalDailySub_CreditScores, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalDailySub_CreditScores));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return RepSalesTotalsSnapShotsID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn RepSalesTotalsSnapShotsIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SnapShotDateColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn UserIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TeamIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn NGrossColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn NGross_CancelsColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn NGross_ActivationWaivesColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn NGross_ExtendedContractsColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn NGross_OtherContractsColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn NGross_CellUnitsColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn NGross_SameDayColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn TotalGross_CreditScoresColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn NExcellentColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn NExcellent_CancelsColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn NExcellent_ActivationWaivesColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn NExcellent_ExtendedContractsColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn NExcellent_OtherContractsColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn NExcellent_CellUnitsColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn NExcellent_SameDayColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn TotalExcellent_CreditScoresColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn NPassColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn NPass_CancelsColumn
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn NPass_ActivationWaivesColumn
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn NPass_ExtendedContractsColumn
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn NPass_OtherContractsColumn
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn NPass_CellUnitsColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn NPass_SameDayColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn TotalPass_CreditScoresColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn NSubColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn NSub_CancelsColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn NSub_ActivationWaivesColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn NSub_ExtendedContractsColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn NSub_OtherContractsColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn NSub_CellUnitsColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn NSub_SameDayColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn TotalSub_CreditScoresColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn NDailyGrossColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn NDailyColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn NDailyGross_ActivationWaivesColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn NDailyGross_ExtendedContractsColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn NDailyGross_OtherContractsColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn NDailyGross_CellUnitsColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn NDailyGross_SameDayColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn TotalDailyGross_CreditScoresColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn NDailyExcellentColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn NDailyExcellent_CancelsColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn NDailyExcellent_ActivationWaivesColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn NDailyExcellent_ExtendedContractsColumn
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn NDailyExcellent_OtherContractsColumn
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn NDailyExcellent_CellUnitsColumn
		{
			get { return Schema.Columns[52]; }
		}
		public static TableSchema.TableColumn NDailyExcellent_SameDayColumn
		{
			get { return Schema.Columns[53]; }
		}
		public static TableSchema.TableColumn TotalDailyExcellent_CreditScoresColumn
		{
			get { return Schema.Columns[54]; }
		}
		public static TableSchema.TableColumn NDailyPassColumn
		{
			get { return Schema.Columns[55]; }
		}
		public static TableSchema.TableColumn NDailyPass_CancelsColumn
		{
			get { return Schema.Columns[56]; }
		}
		public static TableSchema.TableColumn NDailyPass_ActivationWaivesColumn
		{
			get { return Schema.Columns[57]; }
		}
		public static TableSchema.TableColumn NDailyPass_ExtendedContractsColumn
		{
			get { return Schema.Columns[58]; }
		}
		public static TableSchema.TableColumn NDailyPass_OtherContractsColumn
		{
			get { return Schema.Columns[59]; }
		}
		public static TableSchema.TableColumn NDailyPass_CellUnitsColumn
		{
			get { return Schema.Columns[60]; }
		}
		public static TableSchema.TableColumn NDailyPass_SameDayColumn
		{
			get { return Schema.Columns[61]; }
		}
		public static TableSchema.TableColumn TotalDailyPass_CreditScoresColumn
		{
			get { return Schema.Columns[62]; }
		}
		public static TableSchema.TableColumn NDailySubColumn
		{
			get { return Schema.Columns[63]; }
		}
		public static TableSchema.TableColumn NDailySub_CancelsColumn
		{
			get { return Schema.Columns[64]; }
		}
		public static TableSchema.TableColumn NDailySub_ActivationWaivesColumn
		{
			get { return Schema.Columns[65]; }
		}
		public static TableSchema.TableColumn NDailySub_ExtendedContractsColumn
		{
			get { return Schema.Columns[66]; }
		}
		public static TableSchema.TableColumn NDailySub_OtherContractsColumn
		{
			get { return Schema.Columns[67]; }
		}
		public static TableSchema.TableColumn NDailySub_CellUnitsColumn
		{
			get { return Schema.Columns[68]; }
		}
		public static TableSchema.TableColumn NDailySub_SameDayColumn
		{
			get { return Schema.Columns[69]; }
		}
		public static TableSchema.TableColumn TotalDailySub_CreditScoresColumn
		{
			get { return Schema.Columns[70]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string RepSalesTotalsSnapShotsID = @"RepSalesTotalsSnapShotsID";
			public static readonly string SnapShotDate = @"SnapShotDate";
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string UserID = @"UserID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string TeamID = @"TeamID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string NGross = @"NGross";
			public static readonly string NGross_Cancels = @"NGross_Cancels";
			public static readonly string NGross_ActivationWaives = @"NGross_ActivationWaives";
			public static readonly string NGross_ExtendedContracts = @"NGross_ExtendedContracts";
			public static readonly string NGross_OtherContracts = @"NGross_OtherContracts";
			public static readonly string NGross_CellUnits = @"NGross_CellUnits";
			public static readonly string NGross_SameDay = @"NGross_SameDay";
			public static readonly string TotalGross_CreditScores = @"TotalGross_CreditScores";
			public static readonly string NExcellent = @"NExcellent";
			public static readonly string NExcellent_Cancels = @"NExcellent_Cancels";
			public static readonly string NExcellent_ActivationWaives = @"NExcellent_ActivationWaives";
			public static readonly string NExcellent_ExtendedContracts = @"NExcellent_ExtendedContracts";
			public static readonly string NExcellent_OtherContracts = @"NExcellent_OtherContracts";
			public static readonly string NExcellent_CellUnits = @"NExcellent_CellUnits";
			public static readonly string NExcellent_SameDay = @"NExcellent_SameDay";
			public static readonly string TotalExcellent_CreditScores = @"TotalExcellent_CreditScores";
			public static readonly string NPass = @"NPass";
			public static readonly string NPass_Cancels = @"NPass_Cancels";
			public static readonly string NPass_ActivationWaives = @"NPass_ActivationWaives";
			public static readonly string NPass_ExtendedContracts = @"NPass_ExtendedContracts";
			public static readonly string NPass_OtherContracts = @"NPass_OtherContracts";
			public static readonly string NPass_CellUnits = @"NPass_CellUnits";
			public static readonly string NPass_SameDay = @"NPass_SameDay";
			public static readonly string TotalPass_CreditScores = @"TotalPass_CreditScores";
			public static readonly string NSub = @"NSub";
			public static readonly string NSub_Cancels = @"NSub_Cancels";
			public static readonly string NSub_ActivationWaives = @"NSub_ActivationWaives";
			public static readonly string NSub_ExtendedContracts = @"NSub_ExtendedContracts";
			public static readonly string NSub_OtherContracts = @"NSub_OtherContracts";
			public static readonly string NSub_CellUnits = @"NSub_CellUnits";
			public static readonly string NSub_SameDay = @"NSub_SameDay";
			public static readonly string TotalSub_CreditScores = @"TotalSub_CreditScores";
			public static readonly string NDailyGross = @"NDailyGross";
			public static readonly string NDaily = @"NDaily";
			public static readonly string NDailyGross_ActivationWaives = @"NDailyGross_ActivationWaives";
			public static readonly string NDailyGross_ExtendedContracts = @"NDailyGross_ExtendedContracts";
			public static readonly string NDailyGross_OtherContracts = @"NDailyGross_OtherContracts";
			public static readonly string NDailyGross_CellUnits = @"NDailyGross_CellUnits";
			public static readonly string NDailyGross_SameDay = @"NDailyGross_SameDay";
			public static readonly string TotalDailyGross_CreditScores = @"TotalDailyGross_CreditScores";
			public static readonly string NDailyExcellent = @"NDailyExcellent";
			public static readonly string NDailyExcellent_Cancels = @"NDailyExcellent_Cancels";
			public static readonly string NDailyExcellent_ActivationWaives = @"NDailyExcellent_ActivationWaives";
			public static readonly string NDailyExcellent_ExtendedContracts = @"NDailyExcellent_ExtendedContracts";
			public static readonly string NDailyExcellent_OtherContracts = @"NDailyExcellent_OtherContracts";
			public static readonly string NDailyExcellent_CellUnits = @"NDailyExcellent_CellUnits";
			public static readonly string NDailyExcellent_SameDay = @"NDailyExcellent_SameDay";
			public static readonly string TotalDailyExcellent_CreditScores = @"TotalDailyExcellent_CreditScores";
			public static readonly string NDailyPass = @"NDailyPass";
			public static readonly string NDailyPass_Cancels = @"NDailyPass_Cancels";
			public static readonly string NDailyPass_ActivationWaives = @"NDailyPass_ActivationWaives";
			public static readonly string NDailyPass_ExtendedContracts = @"NDailyPass_ExtendedContracts";
			public static readonly string NDailyPass_OtherContracts = @"NDailyPass_OtherContracts";
			public static readonly string NDailyPass_CellUnits = @"NDailyPass_CellUnits";
			public static readonly string NDailyPass_SameDay = @"NDailyPass_SameDay";
			public static readonly string TotalDailyPass_CreditScores = @"TotalDailyPass_CreditScores";
			public static readonly string NDailySub = @"NDailySub";
			public static readonly string NDailySub_Cancels = @"NDailySub_Cancels";
			public static readonly string NDailySub_ActivationWaives = @"NDailySub_ActivationWaives";
			public static readonly string NDailySub_ExtendedContracts = @"NDailySub_ExtendedContracts";
			public static readonly string NDailySub_OtherContracts = @"NDailySub_OtherContracts";
			public static readonly string NDailySub_CellUnits = @"NDailySub_CellUnits";
			public static readonly string NDailySub_SameDay = @"NDailySub_SameDay";
			public static readonly string TotalDailySub_CreditScores = @"TotalDailySub_CreditScores";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return RepSalesTotalsSnapShotsID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_TeamRecruitSnapShot class.
	/// </summary>
	[DataContract]
	public partial class SAE_TeamRecruitSnapShotCollection : ActiveList<SAE_TeamRecruitSnapShot, SAE_TeamRecruitSnapShotCollection>
	{
		public static SAE_TeamRecruitSnapShotCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_TeamRecruitSnapShotCollection result = new SAE_TeamRecruitSnapShotCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_TeamRecruitSnapShot item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_TeamRecruitSnapShots table.
	/// </summary>
	[DataContract]
	public partial class SAE_TeamRecruitSnapShot : ActiveRecord<SAE_TeamRecruitSnapShot>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_TeamRecruitSnapShot()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_TeamRecruitSnapShots", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarTeamRecruitSnapShotID = new TableSchema.TableColumn(schema);
				colvarTeamRecruitSnapShotID.ColumnName = "TeamRecruitSnapShotID";
				colvarTeamRecruitSnapShotID.DataType = DbType.Int32;
				colvarTeamRecruitSnapShotID.MaxLength = 0;
				colvarTeamRecruitSnapShotID.AutoIncrement = true;
				colvarTeamRecruitSnapShotID.IsNullable = false;
				colvarTeamRecruitSnapShotID.IsPrimaryKey = true;
				colvarTeamRecruitSnapShotID.IsForeignKey = false;
				colvarTeamRecruitSnapShotID.IsReadOnly = false;
				colvarTeamRecruitSnapShotID.DefaultSetting = @"";
				colvarTeamRecruitSnapShotID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamRecruitSnapShotID);

				TableSchema.TableColumn colvarSnapShotDate = new TableSchema.TableColumn(schema);
				colvarSnapShotDate.ColumnName = "SnapShotDate";
				colvarSnapShotDate.DataType = DbType.DateTime;
				colvarSnapShotDate.MaxLength = 0;
				colvarSnapShotDate.AutoIncrement = false;
				colvarSnapShotDate.IsNullable = false;
				colvarSnapShotDate.IsPrimaryKey = false;
				colvarSnapShotDate.IsForeignKey = false;
				colvarSnapShotDate.IsReadOnly = false;
				colvarSnapShotDate.DefaultSetting = @"";
				colvarSnapShotDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSnapShotDate);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarRoleLocationID = new TableSchema.TableColumn(schema);
				colvarRoleLocationID.ColumnName = "RoleLocationID";
				colvarRoleLocationID.DataType = DbType.Int32;
				colvarRoleLocationID.MaxLength = 0;
				colvarRoleLocationID.AutoIncrement = false;
				colvarRoleLocationID.IsNullable = false;
				colvarRoleLocationID.IsPrimaryKey = false;
				colvarRoleLocationID.IsForeignKey = false;
				colvarRoleLocationID.IsReadOnly = false;
				colvarRoleLocationID.DefaultSetting = @"";
				colvarRoleLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoleLocationID);

				TableSchema.TableColumn colvarTeamLocationID = new TableSchema.TableColumn(schema);
				colvarTeamLocationID.ColumnName = "TeamLocationID";
				colvarTeamLocationID.DataType = DbType.Int32;
				colvarTeamLocationID.MaxLength = 0;
				colvarTeamLocationID.AutoIncrement = false;
				colvarTeamLocationID.IsNullable = false;
				colvarTeamLocationID.IsPrimaryKey = false;
				colvarTeamLocationID.IsForeignKey = false;
				colvarTeamLocationID.IsReadOnly = false;
				colvarTeamLocationID.DefaultSetting = @"";
				colvarTeamLocationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamLocationID);

				TableSchema.TableColumn colvarTeamID = new TableSchema.TableColumn(schema);
				colvarTeamID.ColumnName = "TeamID";
				colvarTeamID.DataType = DbType.Int32;
				colvarTeamID.MaxLength = 0;
				colvarTeamID.AutoIncrement = false;
				colvarTeamID.IsNullable = false;
				colvarTeamID.IsPrimaryKey = false;
				colvarTeamID.IsForeignKey = false;
				colvarTeamID.IsReadOnly = false;
				colvarTeamID.DefaultSetting = @"";
				colvarTeamID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamID);

				TableSchema.TableColumn colvarTeamIsDeleted = new TableSchema.TableColumn(schema);
				colvarTeamIsDeleted.ColumnName = "TeamIsDeleted";
				colvarTeamIsDeleted.DataType = DbType.Boolean;
				colvarTeamIsDeleted.MaxLength = 0;
				colvarTeamIsDeleted.AutoIncrement = false;
				colvarTeamIsDeleted.IsNullable = false;
				colvarTeamIsDeleted.IsPrimaryKey = false;
				colvarTeamIsDeleted.IsForeignKey = false;
				colvarTeamIsDeleted.IsReadOnly = false;
				colvarTeamIsDeleted.DefaultSetting = @"";
				colvarTeamIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTeamIsDeleted);

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = false;
				colvarRecruitID.IsForeignKey = false;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarRecruitIsDeleted = new TableSchema.TableColumn(schema);
				colvarRecruitIsDeleted.ColumnName = "RecruitIsDeleted";
				colvarRecruitIsDeleted.DataType = DbType.Int32;
				colvarRecruitIsDeleted.MaxLength = 0;
				colvarRecruitIsDeleted.AutoIncrement = false;
				colvarRecruitIsDeleted.IsNullable = false;
				colvarRecruitIsDeleted.IsPrimaryKey = false;
				colvarRecruitIsDeleted.IsForeignKey = false;
				colvarRecruitIsDeleted.IsReadOnly = false;
				colvarRecruitIsDeleted.DefaultSetting = @"";
				colvarRecruitIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecruitIsDeleted);

				TableSchema.TableColumn colvarIsRemoved = new TableSchema.TableColumn(schema);
				colvarIsRemoved.ColumnName = "IsRemoved";
				colvarIsRemoved.DataType = DbType.Boolean;
				colvarIsRemoved.MaxLength = 0;
				colvarIsRemoved.AutoIncrement = false;
				colvarIsRemoved.IsNullable = false;
				colvarIsRemoved.IsPrimaryKey = false;
				colvarIsRemoved.IsForeignKey = false;
				colvarIsRemoved.IsReadOnly = false;
				colvarIsRemoved.DefaultSetting = @"";
				colvarIsRemoved.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsRemoved);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_TeamRecruitSnapShots",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_TeamRecruitSnapShot LoadFrom(SAE_TeamRecruitSnapShot item)
		{
			SAE_TeamRecruitSnapShot result = new SAE_TeamRecruitSnapShot();
			if (item.TeamRecruitSnapShotID != default(int)) {
				result.LoadByKey(item.TeamRecruitSnapShotID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int TeamRecruitSnapShotID {
			get { return GetColumnValue<int>(Columns.TeamRecruitSnapShotID); }
			set {
				SetColumnValue(Columns.TeamRecruitSnapShotID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamRecruitSnapShotID));
			}
		}
		[DataMember]
		public DateTime SnapShotDate {
			get { return GetColumnValue<DateTime>(Columns.SnapShotDate); }
			set {
				SetColumnValue(Columns.SnapShotDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SnapShotDate));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int RoleLocationID {
			get { return GetColumnValue<int>(Columns.RoleLocationID); }
			set {
				SetColumnValue(Columns.RoleLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RoleLocationID));
			}
		}
		[DataMember]
		public int TeamLocationID {
			get { return GetColumnValue<int>(Columns.TeamLocationID); }
			set {
				SetColumnValue(Columns.TeamLocationID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamLocationID));
			}
		}
		[DataMember]
		public int TeamID {
			get { return GetColumnValue<int>(Columns.TeamID); }
			set {
				SetColumnValue(Columns.TeamID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamID));
			}
		}
		[DataMember]
		public bool TeamIsDeleted {
			get { return GetColumnValue<bool>(Columns.TeamIsDeleted); }
			set {
				SetColumnValue(Columns.TeamIsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TeamIsDeleted));
			}
		}
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public int RecruitIsDeleted {
			get { return GetColumnValue<int>(Columns.RecruitIsDeleted); }
			set {
				SetColumnValue(Columns.RecruitIsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitIsDeleted));
			}
		}
		[DataMember]
		public bool IsRemoved {
			get { return GetColumnValue<bool>(Columns.IsRemoved); }
			set {
				SetColumnValue(Columns.IsRemoved, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsRemoved));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return TeamRecruitSnapShotID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn TeamRecruitSnapShotIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SnapShotDateColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RoleLocationIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TeamLocationIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn TeamIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn TeamIsDeletedColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn RecruitIsDeletedColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn IsRemovedColumn
		{
			get { return Schema.Columns[9]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string TeamRecruitSnapShotID = @"TeamRecruitSnapShotID";
			public static readonly string SnapShotDate = @"SnapShotDate";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string RoleLocationID = @"RoleLocationID";
			public static readonly string TeamLocationID = @"TeamLocationID";
			public static readonly string TeamID = @"TeamID";
			public static readonly string TeamIsDeleted = @"TeamIsDeleted";
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string RecruitIsDeleted = @"RecruitIsDeleted";
			public static readonly string IsRemoved = @"IsRemoved";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return TeamRecruitSnapShotID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_TechInspectionPercentage class.
	/// </summary>
	[DataContract]
	public partial class SAE_TechInspectionPercentageCollection : ActiveList<SAE_TechInspectionPercentage, SAE_TechInspectionPercentageCollection>
	{
		public static SAE_TechInspectionPercentageCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_TechInspectionPercentageCollection result = new SAE_TechInspectionPercentageCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_TechInspectionPercentage item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_TechInspectionPercentages table.
	/// </summary>
	[DataContract]
	public partial class SAE_TechInspectionPercentage : ActiveRecord<SAE_TechInspectionPercentage>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_TechInspectionPercentage()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_TechInspectionPercentages", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarNSelfInspections = new TableSchema.TableColumn(schema);
				colvarNSelfInspections.ColumnName = "NSelfInspections";
				colvarNSelfInspections.DataType = DbType.Int32;
				colvarNSelfInspections.MaxLength = 0;
				colvarNSelfInspections.AutoIncrement = false;
				colvarNSelfInspections.IsNullable = false;
				colvarNSelfInspections.IsPrimaryKey = false;
				colvarNSelfInspections.IsForeignKey = false;
				colvarNSelfInspections.IsReadOnly = false;
				colvarNSelfInspections.DefaultSetting = @"";
				colvarNSelfInspections.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNSelfInspections);

				TableSchema.TableColumn colvarCombinedSelfInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarCombinedSelfInspectionPercentage.ColumnName = "CombinedSelfInspectionPercentage";
				colvarCombinedSelfInspectionPercentage.DataType = DbType.Double;
				colvarCombinedSelfInspectionPercentage.MaxLength = 0;
				colvarCombinedSelfInspectionPercentage.AutoIncrement = false;
				colvarCombinedSelfInspectionPercentage.IsNullable = false;
				colvarCombinedSelfInspectionPercentage.IsPrimaryKey = false;
				colvarCombinedSelfInspectionPercentage.IsForeignKey = false;
				colvarCombinedSelfInspectionPercentage.IsReadOnly = false;
				colvarCombinedSelfInspectionPercentage.DefaultSetting = @"";
				colvarCombinedSelfInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCombinedSelfInspectionPercentage);

				TableSchema.TableColumn colvarNManagerInspections = new TableSchema.TableColumn(schema);
				colvarNManagerInspections.ColumnName = "NManagerInspections";
				colvarNManagerInspections.DataType = DbType.Int32;
				colvarNManagerInspections.MaxLength = 0;
				colvarNManagerInspections.AutoIncrement = false;
				colvarNManagerInspections.IsNullable = false;
				colvarNManagerInspections.IsPrimaryKey = false;
				colvarNManagerInspections.IsForeignKey = false;
				colvarNManagerInspections.IsReadOnly = false;
				colvarNManagerInspections.DefaultSetting = @"";
				colvarNManagerInspections.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNManagerInspections);

				TableSchema.TableColumn colvarCombinedManagerInspectionPercentage = new TableSchema.TableColumn(schema);
				colvarCombinedManagerInspectionPercentage.ColumnName = "CombinedManagerInspectionPercentage";
				colvarCombinedManagerInspectionPercentage.DataType = DbType.Double;
				colvarCombinedManagerInspectionPercentage.MaxLength = 0;
				colvarCombinedManagerInspectionPercentage.AutoIncrement = false;
				colvarCombinedManagerInspectionPercentage.IsNullable = false;
				colvarCombinedManagerInspectionPercentage.IsPrimaryKey = false;
				colvarCombinedManagerInspectionPercentage.IsForeignKey = false;
				colvarCombinedManagerInspectionPercentage.IsReadOnly = false;
				colvarCombinedManagerInspectionPercentage.DefaultSetting = @"";
				colvarCombinedManagerInspectionPercentage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCombinedManagerInspectionPercentage);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_TechInspectionPercentages",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_TechInspectionPercentage LoadFrom(SAE_TechInspectionPercentage item)
		{
			SAE_TechInspectionPercentage result = new SAE_TechInspectionPercentage();
			if (item.AccountID != default(int)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public int NSelfInspections {
			get { return GetColumnValue<int>(Columns.NSelfInspections); }
			set {
				SetColumnValue(Columns.NSelfInspections, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NSelfInspections));
			}
		}
		[DataMember]
		public double CombinedSelfInspectionPercentage {
			get { return GetColumnValue<double>(Columns.CombinedSelfInspectionPercentage); }
			set {
				SetColumnValue(Columns.CombinedSelfInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CombinedSelfInspectionPercentage));
			}
		}
		[DataMember]
		public int NManagerInspections {
			get { return GetColumnValue<int>(Columns.NManagerInspections); }
			set {
				SetColumnValue(Columns.NManagerInspections, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NManagerInspections));
			}
		}
		[DataMember]
		public double CombinedManagerInspectionPercentage {
			get { return GetColumnValue<double>(Columns.CombinedManagerInspectionPercentage); }
			set {
				SetColumnValue(Columns.CombinedManagerInspectionPercentage, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CombinedManagerInspectionPercentage));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn NSelfInspectionsColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn CombinedSelfInspectionPercentageColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn NManagerInspectionsColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn CombinedManagerInspectionPercentageColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string NSelfInspections = @"NSelfInspections";
			public static readonly string CombinedSelfInspectionPercentage = @"CombinedSelfInspectionPercentage";
			public static readonly string NManagerInspections = @"NManagerInspections";
			public static readonly string CombinedManagerInspectionPercentage = @"CombinedManagerInspectionPercentage";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_TechInspectionScore class.
	/// </summary>
	[DataContract]
	public partial class SAE_TechInspectionScoreCollection : ActiveList<SAE_TechInspectionScore, SAE_TechInspectionScoreCollection>
	{
		public static SAE_TechInspectionScoreCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_TechInspectionScoreCollection result = new SAE_TechInspectionScoreCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_TechInspectionScore item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_TechInspectionScores table.
	/// </summary>
	[DataContract]
	public partial class SAE_TechInspectionScore : ActiveRecord<SAE_TechInspectionScore>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_TechInspectionScore()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_TechInspectionScores", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSurveyID = new TableSchema.TableColumn(schema);
				colvarSurveyID.ColumnName = "SurveyID";
				colvarSurveyID.DataType = DbType.Int32;
				colvarSurveyID.MaxLength = 0;
				colvarSurveyID.AutoIncrement = false;
				colvarSurveyID.IsNullable = false;
				colvarSurveyID.IsPrimaryKey = true;
				colvarSurveyID.IsForeignKey = false;
				colvarSurveyID.IsReadOnly = false;
				colvarSurveyID.DefaultSetting = @"";
				colvarSurveyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurveyID);

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = false;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarSurveyRecruitID = new TableSchema.TableColumn(schema);
				colvarSurveyRecruitID.ColumnName = "SurveyRecruitID";
				colvarSurveyRecruitID.DataType = DbType.Int32;
				colvarSurveyRecruitID.MaxLength = 0;
				colvarSurveyRecruitID.AutoIncrement = false;
				colvarSurveyRecruitID.IsNullable = false;
				colvarSurveyRecruitID.IsPrimaryKey = false;
				colvarSurveyRecruitID.IsForeignKey = false;
				colvarSurveyRecruitID.IsReadOnly = false;
				colvarSurveyRecruitID.DefaultSetting = @"";
				colvarSurveyRecruitID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurveyRecruitID);

				TableSchema.TableColumn colvarTotalScore = new TableSchema.TableColumn(schema);
				colvarTotalScore.ColumnName = "TotalScore";
				colvarTotalScore.DataType = DbType.Int32;
				colvarTotalScore.MaxLength = 0;
				colvarTotalScore.AutoIncrement = false;
				colvarTotalScore.IsNullable = false;
				colvarTotalScore.IsPrimaryKey = false;
				colvarTotalScore.IsForeignKey = false;
				colvarTotalScore.IsReadOnly = false;
				colvarTotalScore.DefaultSetting = @"";
				colvarTotalScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalScore);

				TableSchema.TableColumn colvarTotalPoints = new TableSchema.TableColumn(schema);
				colvarTotalPoints.ColumnName = "TotalPoints";
				colvarTotalPoints.DataType = DbType.Int32;
				colvarTotalPoints.MaxLength = 0;
				colvarTotalPoints.AutoIncrement = false;
				colvarTotalPoints.IsNullable = false;
				colvarTotalPoints.IsPrimaryKey = false;
				colvarTotalPoints.IsForeignKey = false;
				colvarTotalPoints.IsReadOnly = false;
				colvarTotalPoints.DefaultSetting = @"";
				colvarTotalPoints.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTotalPoints);

				TableSchema.TableColumn colvarCompleted = new TableSchema.TableColumn(schema);
				colvarCompleted.ColumnName = "Completed";
				colvarCompleted.DataType = DbType.DateTime;
				colvarCompleted.MaxLength = 0;
				colvarCompleted.AutoIncrement = false;
				colvarCompleted.IsNullable = false;
				colvarCompleted.IsPrimaryKey = false;
				colvarCompleted.IsForeignKey = false;
				colvarCompleted.IsReadOnly = false;
				colvarCompleted.DefaultSetting = @"";
				colvarCompleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompleted);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_TechInspectionScores",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_TechInspectionScore LoadFrom(SAE_TechInspectionScore item)
		{
			SAE_TechInspectionScore result = new SAE_TechInspectionScore();
			if (item.SurveyID != default(int)) {
				result.LoadByKey(item.SurveyID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SurveyID {
			get { return GetColumnValue<int>(Columns.SurveyID); }
			set {
				SetColumnValue(Columns.SurveyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SurveyID));
			}
		}
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public int SurveyRecruitID {
			get { return GetColumnValue<int>(Columns.SurveyRecruitID); }
			set {
				SetColumnValue(Columns.SurveyRecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SurveyRecruitID));
			}
		}
		[DataMember]
		public int TotalScore {
			get { return GetColumnValue<int>(Columns.TotalScore); }
			set {
				SetColumnValue(Columns.TotalScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalScore));
			}
		}
		[DataMember]
		public int TotalPoints {
			get { return GetColumnValue<int>(Columns.TotalPoints); }
			set {
				SetColumnValue(Columns.TotalPoints, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TotalPoints));
			}
		}
		[DataMember]
		public DateTime Completed {
			get { return GetColumnValue<DateTime>(Columns.Completed); }
			set {
				SetColumnValue(Columns.Completed, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Completed));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return SurveyID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SurveyIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SurveyRecruitIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TotalScoreColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn TotalPointsColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CompletedColumn
		{
			get { return Schema.Columns[5]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SurveyID = @"SurveyID";
			public static readonly string AccountID = @"AccountID";
			public static readonly string SurveyRecruitID = @"SurveyRecruitID";
			public static readonly string TotalScore = @"TotalScore";
			public static readonly string TotalPoints = @"TotalPoints";
			public static readonly string Completed = @"Completed";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SurveyID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_TestScheduleA class.
	/// </summary>
	[DataContract]
	public partial class SAE_TestScheduleACollection : ActiveList<SAE_TestScheduleA, SAE_TestScheduleACollection>
	{
		public static SAE_TestScheduleACollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_TestScheduleACollection result = new SAE_TestScheduleACollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_TestScheduleA item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_TestScheduleA table.
	/// </summary>
	[DataContract]
	public partial class SAE_TestScheduleA : ActiveRecord<SAE_TestScheduleA>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_TestScheduleA()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_TestScheduleA", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarIndustryNumber = new TableSchema.TableColumn(schema);
				colvarIndustryNumber.ColumnName = "IndustryNumber";
				colvarIndustryNumber.DataType = DbType.String;
				colvarIndustryNumber.MaxLength = 50;
				colvarIndustryNumber.AutoIncrement = false;
				colvarIndustryNumber.IsNullable = false;
				colvarIndustryNumber.IsPrimaryKey = false;
				colvarIndustryNumber.IsForeignKey = false;
				colvarIndustryNumber.IsReadOnly = false;
				colvarIndustryNumber.DefaultSetting = @"";
				colvarIndustryNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIndustryNumber);

				TableSchema.TableColumn colvarSubscriberNumber = new TableSchema.TableColumn(schema);
				colvarSubscriberNumber.ColumnName = "SubscriberNumber";
				colvarSubscriberNumber.DataType = DbType.String;
				colvarSubscriberNumber.MaxLength = 50;
				colvarSubscriberNumber.AutoIncrement = false;
				colvarSubscriberNumber.IsNullable = false;
				colvarSubscriberNumber.IsPrimaryKey = false;
				colvarSubscriberNumber.IsForeignKey = false;
				colvarSubscriberNumber.IsReadOnly = false;
				colvarSubscriberNumber.DefaultSetting = @"";
				colvarSubscriberNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubscriberNumber);

				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 255;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);

				TableSchema.TableColumn colvarRMR = new TableSchema.TableColumn(schema);
				colvarRMR.ColumnName = "RMR";
				colvarRMR.DataType = DbType.Currency;
				colvarRMR.MaxLength = 0;
				colvarRMR.AutoIncrement = false;
				colvarRMR.IsNullable = false;
				colvarRMR.IsPrimaryKey = false;
				colvarRMR.IsForeignKey = false;
				colvarRMR.IsReadOnly = false;
				colvarRMR.DefaultSetting = @"";
				colvarRMR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRMR);

				TableSchema.TableColumn colvarMultiple = new TableSchema.TableColumn(schema);
				colvarMultiple.ColumnName = "Multiple";
				colvarMultiple.DataType = DbType.Double;
				colvarMultiple.MaxLength = 0;
				colvarMultiple.AutoIncrement = false;
				colvarMultiple.IsNullable = false;
				colvarMultiple.IsPrimaryKey = false;
				colvarMultiple.IsForeignKey = false;
				colvarMultiple.IsReadOnly = false;
				colvarMultiple.DefaultSetting = @"";
				colvarMultiple.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiple);

				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "Price";
				colvarPrice.DataType = DbType.Currency;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = false;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);

				TableSchema.TableColumn colvarContractDate = new TableSchema.TableColumn(schema);
				colvarContractDate.ColumnName = "ContractDate";
				colvarContractDate.DataType = DbType.DateTime;
				colvarContractDate.MaxLength = 0;
				colvarContractDate.AutoIncrement = false;
				colvarContractDate.IsNullable = false;
				colvarContractDate.IsPrimaryKey = false;
				colvarContractDate.IsForeignKey = false;
				colvarContractDate.IsReadOnly = false;
				colvarContractDate.DefaultSetting = @"";
				colvarContractDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContractDate);

				TableSchema.TableColumn colvarTerm = new TableSchema.TableColumn(schema);
				colvarTerm.ColumnName = "Term";
				colvarTerm.DataType = DbType.Int32;
				colvarTerm.MaxLength = 0;
				colvarTerm.AutoIncrement = false;
				colvarTerm.IsNullable = false;
				colvarTerm.IsPrimaryKey = false;
				colvarTerm.IsForeignKey = false;
				colvarTerm.IsReadOnly = false;
				colvarTerm.DefaultSetting = @"";
				colvarTerm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTerm);

				TableSchema.TableColumn colvarRemaining = new TableSchema.TableColumn(schema);
				colvarRemaining.ColumnName = "Remaining";
				colvarRemaining.DataType = DbType.Int32;
				colvarRemaining.MaxLength = 0;
				colvarRemaining.AutoIncrement = false;
				colvarRemaining.IsNullable = false;
				colvarRemaining.IsPrimaryKey = false;
				colvarRemaining.IsForeignKey = false;
				colvarRemaining.IsReadOnly = false;
				colvarRemaining.DefaultSetting = @"";
				colvarRemaining.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemaining);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_TestScheduleA",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public string IndustryNumber {
			get { return GetColumnValue<string>(Columns.IndustryNumber); }
			set {
				SetColumnValue(Columns.IndustryNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IndustryNumber));
			}
		}
		[DataMember]
		public string SubscriberNumber {
			get { return GetColumnValue<string>(Columns.SubscriberNumber); }
			set {
				SetColumnValue(Columns.SubscriberNumber, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SubscriberNumber));
			}
		}
		[DataMember]
		public string Name {
			get { return GetColumnValue<string>(Columns.Name); }
			set {
				SetColumnValue(Columns.Name, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Name));
			}
		}
		[DataMember]
		public decimal RMR {
			get { return GetColumnValue<decimal>(Columns.RMR); }
			set {
				SetColumnValue(Columns.RMR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RMR));
			}
		}
		[DataMember]
		public double Multiple {
			get { return GetColumnValue<double>(Columns.Multiple); }
			set {
				SetColumnValue(Columns.Multiple, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Multiple));
			}
		}
		[DataMember]
		public decimal Price {
			get { return GetColumnValue<decimal>(Columns.Price); }
			set {
				SetColumnValue(Columns.Price, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Price));
			}
		}
		[DataMember]
		public DateTime ContractDate {
			get { return GetColumnValue<DateTime>(Columns.ContractDate); }
			set {
				SetColumnValue(Columns.ContractDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ContractDate));
			}
		}
		[DataMember]
		public int Term {
			get { return GetColumnValue<int>(Columns.Term); }
			set {
				SetColumnValue(Columns.Term, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Term));
			}
		}
		[DataMember]
		public int Remaining {
			get { return GetColumnValue<int>(Columns.Remaining); }
			set {
				SetColumnValue(Columns.Remaining, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Remaining));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return SubscriberNumber;
		}

		#region Typed Columns

		public static TableSchema.TableColumn IndustryNumberColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SubscriberNumberColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn NameColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn RMRColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn MultipleColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn PriceColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn ContractDateColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn TermColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn RemainingColumn
		{
			get { return Schema.Columns[8]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string IndustryNumber = @"IndustryNumber";
			public static readonly string SubscriberNumber = @"SubscriberNumber";
			public static readonly string Name = @"Name";
			public static readonly string RMR = @"RMR";
			public static readonly string Multiple = @"Multiple";
			public static readonly string Price = @"Price";
			public static readonly string ContractDate = @"ContractDate";
			public static readonly string Term = @"Term";
			public static readonly string Remaining = @"Remaining";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SAE_ValidSale class.
	/// </summary>
	[DataContract]
	public partial class SAE_ValidSaleCollection : ActiveList<SAE_ValidSale, SAE_ValidSaleCollection>
	{
		public static SAE_ValidSaleCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SAE_ValidSaleCollection result = new SAE_ValidSaleCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SAE_ValidSale item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SAE_ValidSales table.
	/// </summary>
	[DataContract]
	public partial class SAE_ValidSale : ActiveRecord<SAE_ValidSale>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SAE_ValidSale()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SAE_ValidSales", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarSeasonID = new TableSchema.TableColumn(schema);
				colvarSeasonID.ColumnName = "SeasonID";
				colvarSeasonID.DataType = DbType.Int32;
				colvarSeasonID.MaxLength = 0;
				colvarSeasonID.AutoIncrement = false;
				colvarSeasonID.IsNullable = false;
				colvarSeasonID.IsPrimaryKey = false;
				colvarSeasonID.IsForeignKey = false;
				colvarSeasonID.IsReadOnly = false;
				colvarSeasonID.DefaultSetting = @"";
				colvarSeasonID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSeasonID);

				TableSchema.TableColumn colvarSalesRepUserID = new TableSchema.TableColumn(schema);
				colvarSalesRepUserID.ColumnName = "SalesRepUserID";
				colvarSalesRepUserID.DataType = DbType.Int32;
				colvarSalesRepUserID.MaxLength = 0;
				colvarSalesRepUserID.AutoIncrement = false;
				colvarSalesRepUserID.IsNullable = true;
				colvarSalesRepUserID.IsPrimaryKey = false;
				colvarSalesRepUserID.IsForeignKey = false;
				colvarSalesRepUserID.IsReadOnly = false;
				colvarSalesRepUserID.DefaultSetting = @"";
				colvarSalesRepUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesRepUserID);

				TableSchema.TableColumn colvarTechnicianUserID = new TableSchema.TableColumn(schema);
				colvarTechnicianUserID.ColumnName = "TechnicianUserID";
				colvarTechnicianUserID.DataType = DbType.Int32;
				colvarTechnicianUserID.MaxLength = 0;
				colvarTechnicianUserID.AutoIncrement = false;
				colvarTechnicianUserID.IsNullable = true;
				colvarTechnicianUserID.IsPrimaryKey = false;
				colvarTechnicianUserID.IsForeignKey = false;
				colvarTechnicianUserID.IsReadOnly = false;
				colvarTechnicianUserID.DefaultSetting = @"";
				colvarTechnicianUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTechnicianUserID);

				TableSchema.TableColumn colvarInstallDate = new TableSchema.TableColumn(schema);
				colvarInstallDate.ColumnName = "InstallDate";
				colvarInstallDate.DataType = DbType.DateTime;
				colvarInstallDate.MaxLength = 0;
				colvarInstallDate.AutoIncrement = false;
				colvarInstallDate.IsNullable = false;
				colvarInstallDate.IsPrimaryKey = false;
				colvarInstallDate.IsForeignKey = false;
				colvarInstallDate.IsReadOnly = false;
				colvarInstallDate.DefaultSetting = @"";
				colvarInstallDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInstallDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SAE_ValidSales",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SAE_ValidSale LoadFrom(SAE_ValidSale item)
		{
			SAE_ValidSale result = new SAE_ValidSale();
			if (item.AccountID != default(int)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public int SeasonID {
			get { return GetColumnValue<int>(Columns.SeasonID); }
			set {
				SetColumnValue(Columns.SeasonID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SeasonID));
			}
		}
		[DataMember]
		public int? SalesRepUserID {
			get { return GetColumnValue<int?>(Columns.SalesRepUserID); }
			set {
				SetColumnValue(Columns.SalesRepUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SalesRepUserID));
			}
		}
		[DataMember]
		public int? TechnicianUserID {
			get { return GetColumnValue<int?>(Columns.TechnicianUserID); }
			set {
				SetColumnValue(Columns.TechnicianUserID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TechnicianUserID));
			}
		}
		[DataMember]
		public DateTime InstallDate {
			get { return GetColumnValue<DateTime>(Columns.InstallDate); }
			set {
				SetColumnValue(Columns.InstallDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.InstallDate));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SeasonIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SalesRepUserIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn TechnicianUserIDColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn InstallDateColumn
		{
			get { return Schema.Columns[4]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string SeasonID = @"SeasonID";
			public static readonly string SalesRepUserID = @"SalesRepUserID";
			public static readonly string TechnicianUserID = @"TechnicianUserID";
			public static readonly string InstallDate = @"InstallDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SOP30200 class.
	/// </summary>
	[DataContract]
	public partial class SOP30200Collection : ActiveList<SOP30200, SOP30200Collection>
	{
		public static SOP30200Collection LoadByStoredProcedure(StoredProcedure sp)
		{
			SOP30200Collection result = new SOP30200Collection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SOP30200 item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SOP30200 table.
	/// </summary>
	[DataContract]
	public partial class SOP30200 : ActiveRecord<SOP30200>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SOP30200()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SOP30200", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSOPTYPE = new TableSchema.TableColumn(schema);
				colvarSOPTYPE.ColumnName = "SOPTYPE";
				colvarSOPTYPE.DataType = DbType.Int16;
				colvarSOPTYPE.MaxLength = 0;
				colvarSOPTYPE.AutoIncrement = false;
				colvarSOPTYPE.IsNullable = false;
				colvarSOPTYPE.IsPrimaryKey = true;
				colvarSOPTYPE.IsForeignKey = false;
				colvarSOPTYPE.IsReadOnly = false;
				colvarSOPTYPE.DefaultSetting = @"";
				colvarSOPTYPE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSOPTYPE);

				TableSchema.TableColumn colvarSOPNUMBE = new TableSchema.TableColumn(schema);
				colvarSOPNUMBE.ColumnName = "SOPNUMBE";
				colvarSOPNUMBE.DataType = DbType.AnsiStringFixedLength;
				colvarSOPNUMBE.MaxLength = 21;
				colvarSOPNUMBE.AutoIncrement = false;
				colvarSOPNUMBE.IsNullable = false;
				colvarSOPNUMBE.IsPrimaryKey = false;
				colvarSOPNUMBE.IsForeignKey = false;
				colvarSOPNUMBE.IsReadOnly = false;
				colvarSOPNUMBE.DefaultSetting = @"";
				colvarSOPNUMBE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSOPNUMBE);

				TableSchema.TableColumn colvarORIGTYPE = new TableSchema.TableColumn(schema);
				colvarORIGTYPE.ColumnName = "ORIGTYPE";
				colvarORIGTYPE.DataType = DbType.Int16;
				colvarORIGTYPE.MaxLength = 0;
				colvarORIGTYPE.AutoIncrement = false;
				colvarORIGTYPE.IsNullable = false;
				colvarORIGTYPE.IsPrimaryKey = false;
				colvarORIGTYPE.IsForeignKey = false;
				colvarORIGTYPE.IsReadOnly = false;
				colvarORIGTYPE.DefaultSetting = @"";
				colvarORIGTYPE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORIGTYPE);

				TableSchema.TableColumn colvarORIGNUMB = new TableSchema.TableColumn(schema);
				colvarORIGNUMB.ColumnName = "ORIGNUMB";
				colvarORIGNUMB.DataType = DbType.AnsiStringFixedLength;
				colvarORIGNUMB.MaxLength = 21;
				colvarORIGNUMB.AutoIncrement = false;
				colvarORIGNUMB.IsNullable = false;
				colvarORIGNUMB.IsPrimaryKey = false;
				colvarORIGNUMB.IsForeignKey = false;
				colvarORIGNUMB.IsReadOnly = false;
				colvarORIGNUMB.DefaultSetting = @"";
				colvarORIGNUMB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORIGNUMB);

				TableSchema.TableColumn colvarDOCID = new TableSchema.TableColumn(schema);
				colvarDOCID.ColumnName = "DOCID";
				colvarDOCID.DataType = DbType.AnsiStringFixedLength;
				colvarDOCID.MaxLength = 15;
				colvarDOCID.AutoIncrement = false;
				colvarDOCID.IsNullable = false;
				colvarDOCID.IsPrimaryKey = false;
				colvarDOCID.IsForeignKey = false;
				colvarDOCID.IsReadOnly = false;
				colvarDOCID.DefaultSetting = @"";
				colvarDOCID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOCID);

				TableSchema.TableColumn colvarDOCDATE = new TableSchema.TableColumn(schema);
				colvarDOCDATE.ColumnName = "DOCDATE";
				colvarDOCDATE.DataType = DbType.DateTime;
				colvarDOCDATE.MaxLength = 0;
				colvarDOCDATE.AutoIncrement = false;
				colvarDOCDATE.IsNullable = false;
				colvarDOCDATE.IsPrimaryKey = false;
				colvarDOCDATE.IsForeignKey = false;
				colvarDOCDATE.IsReadOnly = false;
				colvarDOCDATE.DefaultSetting = @"";
				colvarDOCDATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOCDATE);

				TableSchema.TableColumn colvarGLPOSTDT = new TableSchema.TableColumn(schema);
				colvarGLPOSTDT.ColumnName = "GLPOSTDT";
				colvarGLPOSTDT.DataType = DbType.DateTime;
				colvarGLPOSTDT.MaxLength = 0;
				colvarGLPOSTDT.AutoIncrement = false;
				colvarGLPOSTDT.IsNullable = false;
				colvarGLPOSTDT.IsPrimaryKey = false;
				colvarGLPOSTDT.IsForeignKey = false;
				colvarGLPOSTDT.IsReadOnly = false;
				colvarGLPOSTDT.DefaultSetting = @"";
				colvarGLPOSTDT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGLPOSTDT);

				TableSchema.TableColumn colvarQUOTEDAT = new TableSchema.TableColumn(schema);
				colvarQUOTEDAT.ColumnName = "QUOTEDAT";
				colvarQUOTEDAT.DataType = DbType.DateTime;
				colvarQUOTEDAT.MaxLength = 0;
				colvarQUOTEDAT.AutoIncrement = false;
				colvarQUOTEDAT.IsNullable = false;
				colvarQUOTEDAT.IsPrimaryKey = false;
				colvarQUOTEDAT.IsForeignKey = false;
				colvarQUOTEDAT.IsReadOnly = false;
				colvarQUOTEDAT.DefaultSetting = @"";
				colvarQUOTEDAT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQUOTEDAT);

				TableSchema.TableColumn colvarQUOEXPDA = new TableSchema.TableColumn(schema);
				colvarQUOEXPDA.ColumnName = "QUOEXPDA";
				colvarQUOEXPDA.DataType = DbType.DateTime;
				colvarQUOEXPDA.MaxLength = 0;
				colvarQUOEXPDA.AutoIncrement = false;
				colvarQUOEXPDA.IsNullable = false;
				colvarQUOEXPDA.IsPrimaryKey = false;
				colvarQUOEXPDA.IsForeignKey = false;
				colvarQUOEXPDA.IsReadOnly = false;
				colvarQUOEXPDA.DefaultSetting = @"";
				colvarQUOEXPDA.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQUOEXPDA);

				TableSchema.TableColumn colvarORDRDATE = new TableSchema.TableColumn(schema);
				colvarORDRDATE.ColumnName = "ORDRDATE";
				colvarORDRDATE.DataType = DbType.DateTime;
				colvarORDRDATE.MaxLength = 0;
				colvarORDRDATE.AutoIncrement = false;
				colvarORDRDATE.IsNullable = false;
				colvarORDRDATE.IsPrimaryKey = false;
				colvarORDRDATE.IsForeignKey = false;
				colvarORDRDATE.IsReadOnly = false;
				colvarORDRDATE.DefaultSetting = @"";
				colvarORDRDATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORDRDATE);

				TableSchema.TableColumn colvarINVODATE = new TableSchema.TableColumn(schema);
				colvarINVODATE.ColumnName = "INVODATE";
				colvarINVODATE.DataType = DbType.DateTime;
				colvarINVODATE.MaxLength = 0;
				colvarINVODATE.AutoIncrement = false;
				colvarINVODATE.IsNullable = false;
				colvarINVODATE.IsPrimaryKey = false;
				colvarINVODATE.IsForeignKey = false;
				colvarINVODATE.IsReadOnly = false;
				colvarINVODATE.DefaultSetting = @"";
				colvarINVODATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarINVODATE);

				TableSchema.TableColumn colvarBACKDATE = new TableSchema.TableColumn(schema);
				colvarBACKDATE.ColumnName = "BACKDATE";
				colvarBACKDATE.DataType = DbType.DateTime;
				colvarBACKDATE.MaxLength = 0;
				colvarBACKDATE.AutoIncrement = false;
				colvarBACKDATE.IsNullable = false;
				colvarBACKDATE.IsPrimaryKey = false;
				colvarBACKDATE.IsForeignKey = false;
				colvarBACKDATE.IsReadOnly = false;
				colvarBACKDATE.DefaultSetting = @"";
				colvarBACKDATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBACKDATE);

				TableSchema.TableColumn colvarRETUDATE = new TableSchema.TableColumn(schema);
				colvarRETUDATE.ColumnName = "RETUDATE";
				colvarRETUDATE.DataType = DbType.DateTime;
				colvarRETUDATE.MaxLength = 0;
				colvarRETUDATE.AutoIncrement = false;
				colvarRETUDATE.IsNullable = false;
				colvarRETUDATE.IsPrimaryKey = false;
				colvarRETUDATE.IsForeignKey = false;
				colvarRETUDATE.IsReadOnly = false;
				colvarRETUDATE.DefaultSetting = @"";
				colvarRETUDATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRETUDATE);

				TableSchema.TableColumn colvarReqShipDate = new TableSchema.TableColumn(schema);
				colvarReqShipDate.ColumnName = "ReqShipDate";
				colvarReqShipDate.DataType = DbType.DateTime;
				colvarReqShipDate.MaxLength = 0;
				colvarReqShipDate.AutoIncrement = false;
				colvarReqShipDate.IsNullable = false;
				colvarReqShipDate.IsPrimaryKey = false;
				colvarReqShipDate.IsForeignKey = false;
				colvarReqShipDate.IsReadOnly = false;
				colvarReqShipDate.DefaultSetting = @"";
				colvarReqShipDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReqShipDate);

				TableSchema.TableColumn colvarFUFILDAT = new TableSchema.TableColumn(schema);
				colvarFUFILDAT.ColumnName = "FUFILDAT";
				colvarFUFILDAT.DataType = DbType.DateTime;
				colvarFUFILDAT.MaxLength = 0;
				colvarFUFILDAT.AutoIncrement = false;
				colvarFUFILDAT.IsNullable = false;
				colvarFUFILDAT.IsPrimaryKey = false;
				colvarFUFILDAT.IsForeignKey = false;
				colvarFUFILDAT.IsReadOnly = false;
				colvarFUFILDAT.DefaultSetting = @"";
				colvarFUFILDAT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFUFILDAT);

				TableSchema.TableColumn colvarACTLSHIP = new TableSchema.TableColumn(schema);
				colvarACTLSHIP.ColumnName = "ACTLSHIP";
				colvarACTLSHIP.DataType = DbType.DateTime;
				colvarACTLSHIP.MaxLength = 0;
				colvarACTLSHIP.AutoIncrement = false;
				colvarACTLSHIP.IsNullable = false;
				colvarACTLSHIP.IsPrimaryKey = false;
				colvarACTLSHIP.IsForeignKey = false;
				colvarACTLSHIP.IsReadOnly = false;
				colvarACTLSHIP.DefaultSetting = @"";
				colvarACTLSHIP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarACTLSHIP);

				TableSchema.TableColumn colvarDISCDATE = new TableSchema.TableColumn(schema);
				colvarDISCDATE.ColumnName = "DISCDATE";
				colvarDISCDATE.DataType = DbType.DateTime;
				colvarDISCDATE.MaxLength = 0;
				colvarDISCDATE.AutoIncrement = false;
				colvarDISCDATE.IsNullable = false;
				colvarDISCDATE.IsPrimaryKey = false;
				colvarDISCDATE.IsForeignKey = false;
				colvarDISCDATE.IsReadOnly = false;
				colvarDISCDATE.DefaultSetting = @"";
				colvarDISCDATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDISCDATE);

				TableSchema.TableColumn colvarDUEDATE = new TableSchema.TableColumn(schema);
				colvarDUEDATE.ColumnName = "DUEDATE";
				colvarDUEDATE.DataType = DbType.DateTime;
				colvarDUEDATE.MaxLength = 0;
				colvarDUEDATE.AutoIncrement = false;
				colvarDUEDATE.IsNullable = false;
				colvarDUEDATE.IsPrimaryKey = false;
				colvarDUEDATE.IsForeignKey = false;
				colvarDUEDATE.IsReadOnly = false;
				colvarDUEDATE.DefaultSetting = @"";
				colvarDUEDATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDUEDATE);

				TableSchema.TableColumn colvarREPTING = new TableSchema.TableColumn(schema);
				colvarREPTING.ColumnName = "REPTING";
				colvarREPTING.DataType = DbType.Byte;
				colvarREPTING.MaxLength = 0;
				colvarREPTING.AutoIncrement = false;
				colvarREPTING.IsNullable = false;
				colvarREPTING.IsPrimaryKey = false;
				colvarREPTING.IsForeignKey = false;
				colvarREPTING.IsReadOnly = false;
				colvarREPTING.DefaultSetting = @"";
				colvarREPTING.ForeignKeyTableName = "";
				schema.Columns.Add(colvarREPTING);

				TableSchema.TableColumn colvarTRXFREQU = new TableSchema.TableColumn(schema);
				colvarTRXFREQU.ColumnName = "TRXFREQU";
				colvarTRXFREQU.DataType = DbType.Int16;
				colvarTRXFREQU.MaxLength = 0;
				colvarTRXFREQU.AutoIncrement = false;
				colvarTRXFREQU.IsNullable = false;
				colvarTRXFREQU.IsPrimaryKey = false;
				colvarTRXFREQU.IsForeignKey = false;
				colvarTRXFREQU.IsReadOnly = false;
				colvarTRXFREQU.DefaultSetting = @"";
				colvarTRXFREQU.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTRXFREQU);

				TableSchema.TableColumn colvarTIMEREPD = new TableSchema.TableColumn(schema);
				colvarTIMEREPD.ColumnName = "TIMEREPD";
				colvarTIMEREPD.DataType = DbType.Int16;
				colvarTIMEREPD.MaxLength = 0;
				colvarTIMEREPD.AutoIncrement = false;
				colvarTIMEREPD.IsNullable = false;
				colvarTIMEREPD.IsPrimaryKey = false;
				colvarTIMEREPD.IsForeignKey = false;
				colvarTIMEREPD.IsReadOnly = false;
				colvarTIMEREPD.DefaultSetting = @"";
				colvarTIMEREPD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTIMEREPD);

				TableSchema.TableColumn colvarTIMETREP = new TableSchema.TableColumn(schema);
				colvarTIMETREP.ColumnName = "TIMETREP";
				colvarTIMETREP.DataType = DbType.Int16;
				colvarTIMETREP.MaxLength = 0;
				colvarTIMETREP.AutoIncrement = false;
				colvarTIMETREP.IsNullable = false;
				colvarTIMETREP.IsPrimaryKey = false;
				colvarTIMETREP.IsForeignKey = false;
				colvarTIMETREP.IsReadOnly = false;
				colvarTIMETREP.DefaultSetting = @"";
				colvarTIMETREP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTIMETREP);

				TableSchema.TableColumn colvarDYSTINCR = new TableSchema.TableColumn(schema);
				colvarDYSTINCR.ColumnName = "DYSTINCR";
				colvarDYSTINCR.DataType = DbType.Int16;
				colvarDYSTINCR.MaxLength = 0;
				colvarDYSTINCR.AutoIncrement = false;
				colvarDYSTINCR.IsNullable = false;
				colvarDYSTINCR.IsPrimaryKey = false;
				colvarDYSTINCR.IsForeignKey = false;
				colvarDYSTINCR.IsReadOnly = false;
				colvarDYSTINCR.DefaultSetting = @"";
				colvarDYSTINCR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDYSTINCR);

				TableSchema.TableColumn colvarDTLSTREP = new TableSchema.TableColumn(schema);
				colvarDTLSTREP.ColumnName = "DTLSTREP";
				colvarDTLSTREP.DataType = DbType.DateTime;
				colvarDTLSTREP.MaxLength = 0;
				colvarDTLSTREP.AutoIncrement = false;
				colvarDTLSTREP.IsNullable = false;
				colvarDTLSTREP.IsPrimaryKey = false;
				colvarDTLSTREP.IsForeignKey = false;
				colvarDTLSTREP.IsReadOnly = false;
				colvarDTLSTREP.DefaultSetting = @"";
				colvarDTLSTREP.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDTLSTREP);

				TableSchema.TableColumn colvarDSTBTCH1 = new TableSchema.TableColumn(schema);
				colvarDSTBTCH1.ColumnName = "DSTBTCH1";
				colvarDSTBTCH1.DataType = DbType.AnsiStringFixedLength;
				colvarDSTBTCH1.MaxLength = 15;
				colvarDSTBTCH1.AutoIncrement = false;
				colvarDSTBTCH1.IsNullable = false;
				colvarDSTBTCH1.IsPrimaryKey = false;
				colvarDSTBTCH1.IsForeignKey = false;
				colvarDSTBTCH1.IsReadOnly = false;
				colvarDSTBTCH1.DefaultSetting = @"";
				colvarDSTBTCH1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDSTBTCH1);

				TableSchema.TableColumn colvarDSTBTCH2 = new TableSchema.TableColumn(schema);
				colvarDSTBTCH2.ColumnName = "DSTBTCH2";
				colvarDSTBTCH2.DataType = DbType.AnsiStringFixedLength;
				colvarDSTBTCH2.MaxLength = 15;
				colvarDSTBTCH2.AutoIncrement = false;
				colvarDSTBTCH2.IsNullable = false;
				colvarDSTBTCH2.IsPrimaryKey = false;
				colvarDSTBTCH2.IsForeignKey = false;
				colvarDSTBTCH2.IsReadOnly = false;
				colvarDSTBTCH2.DefaultSetting = @"";
				colvarDSTBTCH2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDSTBTCH2);

				TableSchema.TableColumn colvarUSDOCID1 = new TableSchema.TableColumn(schema);
				colvarUSDOCID1.ColumnName = "USDOCID1";
				colvarUSDOCID1.DataType = DbType.AnsiStringFixedLength;
				colvarUSDOCID1.MaxLength = 15;
				colvarUSDOCID1.AutoIncrement = false;
				colvarUSDOCID1.IsNullable = false;
				colvarUSDOCID1.IsPrimaryKey = false;
				colvarUSDOCID1.IsForeignKey = false;
				colvarUSDOCID1.IsReadOnly = false;
				colvarUSDOCID1.DefaultSetting = @"";
				colvarUSDOCID1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUSDOCID1);

				TableSchema.TableColumn colvarUSDOCID2 = new TableSchema.TableColumn(schema);
				colvarUSDOCID2.ColumnName = "USDOCID2";
				colvarUSDOCID2.DataType = DbType.AnsiStringFixedLength;
				colvarUSDOCID2.MaxLength = 15;
				colvarUSDOCID2.AutoIncrement = false;
				colvarUSDOCID2.IsNullable = false;
				colvarUSDOCID2.IsPrimaryKey = false;
				colvarUSDOCID2.IsForeignKey = false;
				colvarUSDOCID2.IsReadOnly = false;
				colvarUSDOCID2.DefaultSetting = @"";
				colvarUSDOCID2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUSDOCID2);

				TableSchema.TableColumn colvarDISCFRGT = new TableSchema.TableColumn(schema);
				colvarDISCFRGT.ColumnName = "DISCFRGT";
				colvarDISCFRGT.DataType = DbType.Decimal;
				colvarDISCFRGT.MaxLength = 0;
				colvarDISCFRGT.AutoIncrement = false;
				colvarDISCFRGT.IsNullable = false;
				colvarDISCFRGT.IsPrimaryKey = false;
				colvarDISCFRGT.IsForeignKey = false;
				colvarDISCFRGT.IsReadOnly = false;
				colvarDISCFRGT.DefaultSetting = @"";
				colvarDISCFRGT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDISCFRGT);

				TableSchema.TableColumn colvarORDAVFRT = new TableSchema.TableColumn(schema);
				colvarORDAVFRT.ColumnName = "ORDAVFRT";
				colvarORDAVFRT.DataType = DbType.Decimal;
				colvarORDAVFRT.MaxLength = 0;
				colvarORDAVFRT.AutoIncrement = false;
				colvarORDAVFRT.IsNullable = false;
				colvarORDAVFRT.IsPrimaryKey = false;
				colvarORDAVFRT.IsForeignKey = false;
				colvarORDAVFRT.IsReadOnly = false;
				colvarORDAVFRT.DefaultSetting = @"";
				colvarORDAVFRT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORDAVFRT);

				TableSchema.TableColumn colvarDISCMISC = new TableSchema.TableColumn(schema);
				colvarDISCMISC.ColumnName = "DISCMISC";
				colvarDISCMISC.DataType = DbType.Decimal;
				colvarDISCMISC.MaxLength = 0;
				colvarDISCMISC.AutoIncrement = false;
				colvarDISCMISC.IsNullable = false;
				colvarDISCMISC.IsPrimaryKey = false;
				colvarDISCMISC.IsForeignKey = false;
				colvarDISCMISC.IsReadOnly = false;
				colvarDISCMISC.DefaultSetting = @"";
				colvarDISCMISC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDISCMISC);

				TableSchema.TableColumn colvarORDAVMSC = new TableSchema.TableColumn(schema);
				colvarORDAVMSC.ColumnName = "ORDAVMSC";
				colvarORDAVMSC.DataType = DbType.Decimal;
				colvarORDAVMSC.MaxLength = 0;
				colvarORDAVMSC.AutoIncrement = false;
				colvarORDAVMSC.IsNullable = false;
				colvarORDAVMSC.IsPrimaryKey = false;
				colvarORDAVMSC.IsForeignKey = false;
				colvarORDAVMSC.IsReadOnly = false;
				colvarORDAVMSC.DefaultSetting = @"";
				colvarORDAVMSC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORDAVMSC);

				TableSchema.TableColumn colvarDISAVAMT = new TableSchema.TableColumn(schema);
				colvarDISAVAMT.ColumnName = "DISAVAMT";
				colvarDISAVAMT.DataType = DbType.Decimal;
				colvarDISAVAMT.MaxLength = 0;
				colvarDISAVAMT.AutoIncrement = false;
				colvarDISAVAMT.IsNullable = false;
				colvarDISAVAMT.IsPrimaryKey = false;
				colvarDISAVAMT.IsForeignKey = false;
				colvarDISAVAMT.IsReadOnly = false;
				colvarDISAVAMT.DefaultSetting = @"";
				colvarDISAVAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDISAVAMT);

				TableSchema.TableColumn colvarORDAVAMT = new TableSchema.TableColumn(schema);
				colvarORDAVAMT.ColumnName = "ORDAVAMT";
				colvarORDAVAMT.DataType = DbType.Decimal;
				colvarORDAVAMT.MaxLength = 0;
				colvarORDAVAMT.AutoIncrement = false;
				colvarORDAVAMT.IsNullable = false;
				colvarORDAVAMT.IsPrimaryKey = false;
				colvarORDAVAMT.IsForeignKey = false;
				colvarORDAVAMT.IsReadOnly = false;
				colvarORDAVAMT.DefaultSetting = @"";
				colvarORDAVAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORDAVAMT);

				TableSchema.TableColumn colvarDISCRTND = new TableSchema.TableColumn(schema);
				colvarDISCRTND.ColumnName = "DISCRTND";
				colvarDISCRTND.DataType = DbType.Decimal;
				colvarDISCRTND.MaxLength = 0;
				colvarDISCRTND.AutoIncrement = false;
				colvarDISCRTND.IsNullable = false;
				colvarDISCRTND.IsPrimaryKey = false;
				colvarDISCRTND.IsForeignKey = false;
				colvarDISCRTND.IsReadOnly = false;
				colvarDISCRTND.DefaultSetting = @"";
				colvarDISCRTND.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDISCRTND);

				TableSchema.TableColumn colvarORDISRTD = new TableSchema.TableColumn(schema);
				colvarORDISRTD.ColumnName = "ORDISRTD";
				colvarORDISRTD.DataType = DbType.Decimal;
				colvarORDISRTD.MaxLength = 0;
				colvarORDISRTD.AutoIncrement = false;
				colvarORDISRTD.IsNullable = false;
				colvarORDISRTD.IsPrimaryKey = false;
				colvarORDISRTD.IsForeignKey = false;
				colvarORDISRTD.IsReadOnly = false;
				colvarORDISRTD.DefaultSetting = @"";
				colvarORDISRTD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORDISRTD);

				TableSchema.TableColumn colvarDISTKNAM = new TableSchema.TableColumn(schema);
				colvarDISTKNAM.ColumnName = "DISTKNAM";
				colvarDISTKNAM.DataType = DbType.Decimal;
				colvarDISTKNAM.MaxLength = 0;
				colvarDISTKNAM.AutoIncrement = false;
				colvarDISTKNAM.IsNullable = false;
				colvarDISTKNAM.IsPrimaryKey = false;
				colvarDISTKNAM.IsForeignKey = false;
				colvarDISTKNAM.IsReadOnly = false;
				colvarDISTKNAM.DefaultSetting = @"";
				colvarDISTKNAM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDISTKNAM);

				TableSchema.TableColumn colvarORDISTKN = new TableSchema.TableColumn(schema);
				colvarORDISTKN.ColumnName = "ORDISTKN";
				colvarORDISTKN.DataType = DbType.Decimal;
				colvarORDISTKN.MaxLength = 0;
				colvarORDISTKN.AutoIncrement = false;
				colvarORDISTKN.IsNullable = false;
				colvarORDISTKN.IsPrimaryKey = false;
				colvarORDISTKN.IsForeignKey = false;
				colvarORDISTKN.IsReadOnly = false;
				colvarORDISTKN.DefaultSetting = @"";
				colvarORDISTKN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORDISTKN);

				TableSchema.TableColumn colvarDSCPCTAM = new TableSchema.TableColumn(schema);
				colvarDSCPCTAM.ColumnName = "DSCPCTAM";
				colvarDSCPCTAM.DataType = DbType.Int16;
				colvarDSCPCTAM.MaxLength = 0;
				colvarDSCPCTAM.AutoIncrement = false;
				colvarDSCPCTAM.IsNullable = false;
				colvarDSCPCTAM.IsPrimaryKey = false;
				colvarDSCPCTAM.IsForeignKey = false;
				colvarDSCPCTAM.IsReadOnly = false;
				colvarDSCPCTAM.DefaultSetting = @"";
				colvarDSCPCTAM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDSCPCTAM);

				TableSchema.TableColumn colvarDSCDLRAM = new TableSchema.TableColumn(schema);
				colvarDSCDLRAM.ColumnName = "DSCDLRAM";
				colvarDSCDLRAM.DataType = DbType.Decimal;
				colvarDSCDLRAM.MaxLength = 0;
				colvarDSCDLRAM.AutoIncrement = false;
				colvarDSCDLRAM.IsNullable = false;
				colvarDSCDLRAM.IsPrimaryKey = false;
				colvarDSCDLRAM.IsForeignKey = false;
				colvarDSCDLRAM.IsReadOnly = false;
				colvarDSCDLRAM.DefaultSetting = @"";
				colvarDSCDLRAM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDSCDLRAM);

				TableSchema.TableColumn colvarORDDLRAT = new TableSchema.TableColumn(schema);
				colvarORDDLRAT.ColumnName = "ORDDLRAT";
				colvarORDDLRAT.DataType = DbType.Decimal;
				colvarORDDLRAT.MaxLength = 0;
				colvarORDDLRAT.AutoIncrement = false;
				colvarORDDLRAT.IsNullable = false;
				colvarORDDLRAT.IsPrimaryKey = false;
				colvarORDDLRAT.IsForeignKey = false;
				colvarORDDLRAT.IsReadOnly = false;
				colvarORDDLRAT.DefaultSetting = @"";
				colvarORDDLRAT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORDDLRAT);

				TableSchema.TableColumn colvarDISAVTKN = new TableSchema.TableColumn(schema);
				colvarDISAVTKN.ColumnName = "DISAVTKN";
				colvarDISAVTKN.DataType = DbType.Decimal;
				colvarDISAVTKN.MaxLength = 0;
				colvarDISAVTKN.AutoIncrement = false;
				colvarDISAVTKN.IsNullable = false;
				colvarDISAVTKN.IsPrimaryKey = false;
				colvarDISAVTKN.IsForeignKey = false;
				colvarDISAVTKN.IsReadOnly = false;
				colvarDISAVTKN.DefaultSetting = @"";
				colvarDISAVTKN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDISAVTKN);

				TableSchema.TableColumn colvarORDATKN = new TableSchema.TableColumn(schema);
				colvarORDATKN.ColumnName = "ORDATKN";
				colvarORDATKN.DataType = DbType.Decimal;
				colvarORDATKN.MaxLength = 0;
				colvarORDATKN.AutoIncrement = false;
				colvarORDATKN.IsNullable = false;
				colvarORDATKN.IsPrimaryKey = false;
				colvarORDATKN.IsForeignKey = false;
				colvarORDATKN.IsReadOnly = false;
				colvarORDATKN.DefaultSetting = @"";
				colvarORDATKN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORDATKN);

				TableSchema.TableColumn colvarPYMTRMID = new TableSchema.TableColumn(schema);
				colvarPYMTRMID.ColumnName = "PYMTRMID";
				colvarPYMTRMID.DataType = DbType.AnsiStringFixedLength;
				colvarPYMTRMID.MaxLength = 21;
				colvarPYMTRMID.AutoIncrement = false;
				colvarPYMTRMID.IsNullable = false;
				colvarPYMTRMID.IsPrimaryKey = false;
				colvarPYMTRMID.IsForeignKey = false;
				colvarPYMTRMID.IsReadOnly = false;
				colvarPYMTRMID.DefaultSetting = @"";
				colvarPYMTRMID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPYMTRMID);

				TableSchema.TableColumn colvarPRCLEVEL = new TableSchema.TableColumn(schema);
				colvarPRCLEVEL.ColumnName = "PRCLEVEL";
				colvarPRCLEVEL.DataType = DbType.AnsiStringFixedLength;
				colvarPRCLEVEL.MaxLength = 11;
				colvarPRCLEVEL.AutoIncrement = false;
				colvarPRCLEVEL.IsNullable = false;
				colvarPRCLEVEL.IsPrimaryKey = false;
				colvarPRCLEVEL.IsForeignKey = false;
				colvarPRCLEVEL.IsReadOnly = false;
				colvarPRCLEVEL.DefaultSetting = @"";
				colvarPRCLEVEL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPRCLEVEL);

				TableSchema.TableColumn colvarLOCNCODE = new TableSchema.TableColumn(schema);
				colvarLOCNCODE.ColumnName = "LOCNCODE";
				colvarLOCNCODE.DataType = DbType.AnsiStringFixedLength;
				colvarLOCNCODE.MaxLength = 11;
				colvarLOCNCODE.AutoIncrement = false;
				colvarLOCNCODE.IsNullable = false;
				colvarLOCNCODE.IsPrimaryKey = false;
				colvarLOCNCODE.IsForeignKey = false;
				colvarLOCNCODE.IsReadOnly = false;
				colvarLOCNCODE.DefaultSetting = @"";
				colvarLOCNCODE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLOCNCODE);

				TableSchema.TableColumn colvarBCHSOURC = new TableSchema.TableColumn(schema);
				colvarBCHSOURC.ColumnName = "BCHSOURC";
				colvarBCHSOURC.DataType = DbType.AnsiStringFixedLength;
				colvarBCHSOURC.MaxLength = 15;
				colvarBCHSOURC.AutoIncrement = false;
				colvarBCHSOURC.IsNullable = false;
				colvarBCHSOURC.IsPrimaryKey = false;
				colvarBCHSOURC.IsForeignKey = false;
				colvarBCHSOURC.IsReadOnly = false;
				colvarBCHSOURC.DefaultSetting = @"";
				colvarBCHSOURC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBCHSOURC);

				TableSchema.TableColumn colvarBACHNUMB = new TableSchema.TableColumn(schema);
				colvarBACHNUMB.ColumnName = "BACHNUMB";
				colvarBACHNUMB.DataType = DbType.AnsiStringFixedLength;
				colvarBACHNUMB.MaxLength = 15;
				colvarBACHNUMB.AutoIncrement = false;
				colvarBACHNUMB.IsNullable = false;
				colvarBACHNUMB.IsPrimaryKey = false;
				colvarBACHNUMB.IsForeignKey = false;
				colvarBACHNUMB.IsReadOnly = false;
				colvarBACHNUMB.DefaultSetting = @"";
				colvarBACHNUMB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBACHNUMB);

				TableSchema.TableColumn colvarCUSTNMBR = new TableSchema.TableColumn(schema);
				colvarCUSTNMBR.ColumnName = "CUSTNMBR";
				colvarCUSTNMBR.DataType = DbType.AnsiStringFixedLength;
				colvarCUSTNMBR.MaxLength = 15;
				colvarCUSTNMBR.AutoIncrement = false;
				colvarCUSTNMBR.IsNullable = false;
				colvarCUSTNMBR.IsPrimaryKey = false;
				colvarCUSTNMBR.IsForeignKey = false;
				colvarCUSTNMBR.IsReadOnly = false;
				colvarCUSTNMBR.DefaultSetting = @"";
				colvarCUSTNMBR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCUSTNMBR);

				TableSchema.TableColumn colvarCUSTNAME = new TableSchema.TableColumn(schema);
				colvarCUSTNAME.ColumnName = "CUSTNAME";
				colvarCUSTNAME.DataType = DbType.AnsiStringFixedLength;
				colvarCUSTNAME.MaxLength = 65;
				colvarCUSTNAME.AutoIncrement = false;
				colvarCUSTNAME.IsNullable = false;
				colvarCUSTNAME.IsPrimaryKey = false;
				colvarCUSTNAME.IsForeignKey = false;
				colvarCUSTNAME.IsReadOnly = false;
				colvarCUSTNAME.DefaultSetting = @"";
				colvarCUSTNAME.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCUSTNAME);

				TableSchema.TableColumn colvarCSTPONBR = new TableSchema.TableColumn(schema);
				colvarCSTPONBR.ColumnName = "CSTPONBR";
				colvarCSTPONBR.DataType = DbType.AnsiStringFixedLength;
				colvarCSTPONBR.MaxLength = 21;
				colvarCSTPONBR.AutoIncrement = false;
				colvarCSTPONBR.IsNullable = false;
				colvarCSTPONBR.IsPrimaryKey = false;
				colvarCSTPONBR.IsForeignKey = false;
				colvarCSTPONBR.IsReadOnly = false;
				colvarCSTPONBR.DefaultSetting = @"";
				colvarCSTPONBR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCSTPONBR);

				TableSchema.TableColumn colvarPROSPECT = new TableSchema.TableColumn(schema);
				colvarPROSPECT.ColumnName = "PROSPECT";
				colvarPROSPECT.DataType = DbType.Int16;
				colvarPROSPECT.MaxLength = 0;
				colvarPROSPECT.AutoIncrement = false;
				colvarPROSPECT.IsNullable = false;
				colvarPROSPECT.IsPrimaryKey = false;
				colvarPROSPECT.IsForeignKey = false;
				colvarPROSPECT.IsReadOnly = false;
				colvarPROSPECT.DefaultSetting = @"";
				colvarPROSPECT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPROSPECT);

				TableSchema.TableColumn colvarMSTRNUMB = new TableSchema.TableColumn(schema);
				colvarMSTRNUMB.ColumnName = "MSTRNUMB";
				colvarMSTRNUMB.DataType = DbType.Int32;
				colvarMSTRNUMB.MaxLength = 0;
				colvarMSTRNUMB.AutoIncrement = false;
				colvarMSTRNUMB.IsNullable = false;
				colvarMSTRNUMB.IsPrimaryKey = false;
				colvarMSTRNUMB.IsForeignKey = false;
				colvarMSTRNUMB.IsReadOnly = false;
				colvarMSTRNUMB.DefaultSetting = @"";
				colvarMSTRNUMB.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMSTRNUMB);

				TableSchema.TableColumn colvarPCKSLPNO = new TableSchema.TableColumn(schema);
				colvarPCKSLPNO.ColumnName = "PCKSLPNO";
				colvarPCKSLPNO.DataType = DbType.AnsiStringFixedLength;
				colvarPCKSLPNO.MaxLength = 21;
				colvarPCKSLPNO.AutoIncrement = false;
				colvarPCKSLPNO.IsNullable = false;
				colvarPCKSLPNO.IsPrimaryKey = false;
				colvarPCKSLPNO.IsForeignKey = false;
				colvarPCKSLPNO.IsReadOnly = false;
				colvarPCKSLPNO.DefaultSetting = @"";
				colvarPCKSLPNO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPCKSLPNO);

				TableSchema.TableColumn colvarPICTICNU = new TableSchema.TableColumn(schema);
				colvarPICTICNU.ColumnName = "PICTICNU";
				colvarPICTICNU.DataType = DbType.AnsiStringFixedLength;
				colvarPICTICNU.MaxLength = 21;
				colvarPICTICNU.AutoIncrement = false;
				colvarPICTICNU.IsNullable = false;
				colvarPICTICNU.IsPrimaryKey = false;
				colvarPICTICNU.IsForeignKey = false;
				colvarPICTICNU.IsReadOnly = false;
				colvarPICTICNU.DefaultSetting = @"";
				colvarPICTICNU.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPICTICNU);

				TableSchema.TableColumn colvarMRKDNAMT = new TableSchema.TableColumn(schema);
				colvarMRKDNAMT.ColumnName = "MRKDNAMT";
				colvarMRKDNAMT.DataType = DbType.Decimal;
				colvarMRKDNAMT.MaxLength = 0;
				colvarMRKDNAMT.AutoIncrement = false;
				colvarMRKDNAMT.IsNullable = false;
				colvarMRKDNAMT.IsPrimaryKey = false;
				colvarMRKDNAMT.IsForeignKey = false;
				colvarMRKDNAMT.IsReadOnly = false;
				colvarMRKDNAMT.DefaultSetting = @"";
				colvarMRKDNAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMRKDNAMT);

				TableSchema.TableColumn colvarORMRKDAM = new TableSchema.TableColumn(schema);
				colvarORMRKDAM.ColumnName = "ORMRKDAM";
				colvarORMRKDAM.DataType = DbType.Decimal;
				colvarORMRKDAM.MaxLength = 0;
				colvarORMRKDAM.AutoIncrement = false;
				colvarORMRKDAM.IsNullable = false;
				colvarORMRKDAM.IsPrimaryKey = false;
				colvarORMRKDAM.IsForeignKey = false;
				colvarORMRKDAM.IsReadOnly = false;
				colvarORMRKDAM.DefaultSetting = @"";
				colvarORMRKDAM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORMRKDAM);

				TableSchema.TableColumn colvarPRBTADCD = new TableSchema.TableColumn(schema);
				colvarPRBTADCD.ColumnName = "PRBTADCD";
				colvarPRBTADCD.DataType = DbType.AnsiStringFixedLength;
				colvarPRBTADCD.MaxLength = 15;
				colvarPRBTADCD.AutoIncrement = false;
				colvarPRBTADCD.IsNullable = false;
				colvarPRBTADCD.IsPrimaryKey = false;
				colvarPRBTADCD.IsForeignKey = false;
				colvarPRBTADCD.IsReadOnly = false;
				colvarPRBTADCD.DefaultSetting = @"";
				colvarPRBTADCD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPRBTADCD);

				TableSchema.TableColumn colvarPRSTADCD = new TableSchema.TableColumn(schema);
				colvarPRSTADCD.ColumnName = "PRSTADCD";
				colvarPRSTADCD.DataType = DbType.AnsiStringFixedLength;
				colvarPRSTADCD.MaxLength = 15;
				colvarPRSTADCD.AutoIncrement = false;
				colvarPRSTADCD.IsNullable = false;
				colvarPRSTADCD.IsPrimaryKey = false;
				colvarPRSTADCD.IsForeignKey = false;
				colvarPRSTADCD.IsReadOnly = false;
				colvarPRSTADCD.DefaultSetting = @"";
				colvarPRSTADCD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPRSTADCD);

				TableSchema.TableColumn colvarCNTCPRSN = new TableSchema.TableColumn(schema);
				colvarCNTCPRSN.ColumnName = "CNTCPRSN";
				colvarCNTCPRSN.DataType = DbType.AnsiStringFixedLength;
				colvarCNTCPRSN.MaxLength = 61;
				colvarCNTCPRSN.AutoIncrement = false;
				colvarCNTCPRSN.IsNullable = false;
				colvarCNTCPRSN.IsPrimaryKey = false;
				colvarCNTCPRSN.IsForeignKey = false;
				colvarCNTCPRSN.IsReadOnly = false;
				colvarCNTCPRSN.DefaultSetting = @"";
				colvarCNTCPRSN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCNTCPRSN);

				TableSchema.TableColumn colvarShipToName = new TableSchema.TableColumn(schema);
				colvarShipToName.ColumnName = "ShipToName";
				colvarShipToName.DataType = DbType.AnsiStringFixedLength;
				colvarShipToName.MaxLength = 65;
				colvarShipToName.AutoIncrement = false;
				colvarShipToName.IsNullable = false;
				colvarShipToName.IsPrimaryKey = false;
				colvarShipToName.IsForeignKey = false;
				colvarShipToName.IsReadOnly = false;
				colvarShipToName.DefaultSetting = @"";
				colvarShipToName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShipToName);

				TableSchema.TableColumn colvarADDRESS1 = new TableSchema.TableColumn(schema);
				colvarADDRESS1.ColumnName = "ADDRESS1";
				colvarADDRESS1.DataType = DbType.AnsiStringFixedLength;
				colvarADDRESS1.MaxLength = 61;
				colvarADDRESS1.AutoIncrement = false;
				colvarADDRESS1.IsNullable = false;
				colvarADDRESS1.IsPrimaryKey = false;
				colvarADDRESS1.IsForeignKey = false;
				colvarADDRESS1.IsReadOnly = false;
				colvarADDRESS1.DefaultSetting = @"";
				colvarADDRESS1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarADDRESS1);

				TableSchema.TableColumn colvarADDRESS2 = new TableSchema.TableColumn(schema);
				colvarADDRESS2.ColumnName = "ADDRESS2";
				colvarADDRESS2.DataType = DbType.AnsiStringFixedLength;
				colvarADDRESS2.MaxLength = 61;
				colvarADDRESS2.AutoIncrement = false;
				colvarADDRESS2.IsNullable = false;
				colvarADDRESS2.IsPrimaryKey = false;
				colvarADDRESS2.IsForeignKey = false;
				colvarADDRESS2.IsReadOnly = false;
				colvarADDRESS2.DefaultSetting = @"";
				colvarADDRESS2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarADDRESS2);

				TableSchema.TableColumn colvarADDRESS3 = new TableSchema.TableColumn(schema);
				colvarADDRESS3.ColumnName = "ADDRESS3";
				colvarADDRESS3.DataType = DbType.AnsiStringFixedLength;
				colvarADDRESS3.MaxLength = 61;
				colvarADDRESS3.AutoIncrement = false;
				colvarADDRESS3.IsNullable = false;
				colvarADDRESS3.IsPrimaryKey = false;
				colvarADDRESS3.IsForeignKey = false;
				colvarADDRESS3.IsReadOnly = false;
				colvarADDRESS3.DefaultSetting = @"";
				colvarADDRESS3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarADDRESS3);

				TableSchema.TableColumn colvarCITY = new TableSchema.TableColumn(schema);
				colvarCITY.ColumnName = "CITY";
				colvarCITY.DataType = DbType.AnsiStringFixedLength;
				colvarCITY.MaxLength = 35;
				colvarCITY.AutoIncrement = false;
				colvarCITY.IsNullable = false;
				colvarCITY.IsPrimaryKey = false;
				colvarCITY.IsForeignKey = false;
				colvarCITY.IsReadOnly = false;
				colvarCITY.DefaultSetting = @"";
				colvarCITY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCITY);

				TableSchema.TableColumn colvarSTATE = new TableSchema.TableColumn(schema);
				colvarSTATE.ColumnName = "STATE";
				colvarSTATE.DataType = DbType.AnsiStringFixedLength;
				colvarSTATE.MaxLength = 29;
				colvarSTATE.AutoIncrement = false;
				colvarSTATE.IsNullable = false;
				colvarSTATE.IsPrimaryKey = false;
				colvarSTATE.IsForeignKey = false;
				colvarSTATE.IsReadOnly = false;
				colvarSTATE.DefaultSetting = @"";
				colvarSTATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSTATE);

				TableSchema.TableColumn colvarZIPCODE = new TableSchema.TableColumn(schema);
				colvarZIPCODE.ColumnName = "ZIPCODE";
				colvarZIPCODE.DataType = DbType.AnsiStringFixedLength;
				colvarZIPCODE.MaxLength = 11;
				colvarZIPCODE.AutoIncrement = false;
				colvarZIPCODE.IsNullable = false;
				colvarZIPCODE.IsPrimaryKey = false;
				colvarZIPCODE.IsForeignKey = false;
				colvarZIPCODE.IsReadOnly = false;
				colvarZIPCODE.DefaultSetting = @"";
				colvarZIPCODE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarZIPCODE);

				TableSchema.TableColumn colvarCCode = new TableSchema.TableColumn(schema);
				colvarCCode.ColumnName = "CCode";
				colvarCCode.DataType = DbType.AnsiStringFixedLength;
				colvarCCode.MaxLength = 7;
				colvarCCode.AutoIncrement = false;
				colvarCCode.IsNullable = false;
				colvarCCode.IsPrimaryKey = false;
				colvarCCode.IsForeignKey = false;
				colvarCCode.IsReadOnly = false;
				colvarCCode.DefaultSetting = @"";
				colvarCCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCCode);

				TableSchema.TableColumn colvarCOUNTRY = new TableSchema.TableColumn(schema);
				colvarCOUNTRY.ColumnName = "COUNTRY";
				colvarCOUNTRY.DataType = DbType.AnsiStringFixedLength;
				colvarCOUNTRY.MaxLength = 61;
				colvarCOUNTRY.AutoIncrement = false;
				colvarCOUNTRY.IsNullable = false;
				colvarCOUNTRY.IsPrimaryKey = false;
				colvarCOUNTRY.IsForeignKey = false;
				colvarCOUNTRY.IsReadOnly = false;
				colvarCOUNTRY.DefaultSetting = @"";
				colvarCOUNTRY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCOUNTRY);

				TableSchema.TableColumn colvarPHNUMBR1 = new TableSchema.TableColumn(schema);
				colvarPHNUMBR1.ColumnName = "PHNUMBR1";
				colvarPHNUMBR1.DataType = DbType.AnsiStringFixedLength;
				colvarPHNUMBR1.MaxLength = 21;
				colvarPHNUMBR1.AutoIncrement = false;
				colvarPHNUMBR1.IsNullable = false;
				colvarPHNUMBR1.IsPrimaryKey = false;
				colvarPHNUMBR1.IsForeignKey = false;
				colvarPHNUMBR1.IsReadOnly = false;
				colvarPHNUMBR1.DefaultSetting = @"";
				colvarPHNUMBR1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPHNUMBR1);

				TableSchema.TableColumn colvarPHNUMBR2 = new TableSchema.TableColumn(schema);
				colvarPHNUMBR2.ColumnName = "PHNUMBR2";
				colvarPHNUMBR2.DataType = DbType.AnsiStringFixedLength;
				colvarPHNUMBR2.MaxLength = 21;
				colvarPHNUMBR2.AutoIncrement = false;
				colvarPHNUMBR2.IsNullable = false;
				colvarPHNUMBR2.IsPrimaryKey = false;
				colvarPHNUMBR2.IsForeignKey = false;
				colvarPHNUMBR2.IsReadOnly = false;
				colvarPHNUMBR2.DefaultSetting = @"";
				colvarPHNUMBR2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPHNUMBR2);

				TableSchema.TableColumn colvarPHONE3 = new TableSchema.TableColumn(schema);
				colvarPHONE3.ColumnName = "PHONE3";
				colvarPHONE3.DataType = DbType.AnsiStringFixedLength;
				colvarPHONE3.MaxLength = 21;
				colvarPHONE3.AutoIncrement = false;
				colvarPHONE3.IsNullable = false;
				colvarPHONE3.IsPrimaryKey = false;
				colvarPHONE3.IsForeignKey = false;
				colvarPHONE3.IsReadOnly = false;
				colvarPHONE3.DefaultSetting = @"";
				colvarPHONE3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPHONE3);

				TableSchema.TableColumn colvarFAXNUMBR = new TableSchema.TableColumn(schema);
				colvarFAXNUMBR.ColumnName = "FAXNUMBR";
				colvarFAXNUMBR.DataType = DbType.AnsiStringFixedLength;
				colvarFAXNUMBR.MaxLength = 21;
				colvarFAXNUMBR.AutoIncrement = false;
				colvarFAXNUMBR.IsNullable = false;
				colvarFAXNUMBR.IsPrimaryKey = false;
				colvarFAXNUMBR.IsForeignKey = false;
				colvarFAXNUMBR.IsReadOnly = false;
				colvarFAXNUMBR.DefaultSetting = @"";
				colvarFAXNUMBR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFAXNUMBR);

				TableSchema.TableColumn colvarCOMAPPTO = new TableSchema.TableColumn(schema);
				colvarCOMAPPTO.ColumnName = "COMAPPTO";
				colvarCOMAPPTO.DataType = DbType.Int16;
				colvarCOMAPPTO.MaxLength = 0;
				colvarCOMAPPTO.AutoIncrement = false;
				colvarCOMAPPTO.IsNullable = false;
				colvarCOMAPPTO.IsPrimaryKey = false;
				colvarCOMAPPTO.IsForeignKey = false;
				colvarCOMAPPTO.IsReadOnly = false;
				colvarCOMAPPTO.DefaultSetting = @"";
				colvarCOMAPPTO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCOMAPPTO);

				TableSchema.TableColumn colvarCOMMAMNT = new TableSchema.TableColumn(schema);
				colvarCOMMAMNT.ColumnName = "COMMAMNT";
				colvarCOMMAMNT.DataType = DbType.Decimal;
				colvarCOMMAMNT.MaxLength = 0;
				colvarCOMMAMNT.AutoIncrement = false;
				colvarCOMMAMNT.IsNullable = false;
				colvarCOMMAMNT.IsPrimaryKey = false;
				colvarCOMMAMNT.IsForeignKey = false;
				colvarCOMMAMNT.IsReadOnly = false;
				colvarCOMMAMNT.DefaultSetting = @"";
				colvarCOMMAMNT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCOMMAMNT);

				TableSchema.TableColumn colvarOCOMMAMT = new TableSchema.TableColumn(schema);
				colvarOCOMMAMT.ColumnName = "OCOMMAMT";
				colvarOCOMMAMT.DataType = DbType.Decimal;
				colvarOCOMMAMT.MaxLength = 0;
				colvarOCOMMAMT.AutoIncrement = false;
				colvarOCOMMAMT.IsNullable = false;
				colvarOCOMMAMT.IsPrimaryKey = false;
				colvarOCOMMAMT.IsForeignKey = false;
				colvarOCOMMAMT.IsReadOnly = false;
				colvarOCOMMAMT.DefaultSetting = @"";
				colvarOCOMMAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOCOMMAMT);

				TableSchema.TableColumn colvarCMMSLAMT = new TableSchema.TableColumn(schema);
				colvarCMMSLAMT.ColumnName = "CMMSLAMT";
				colvarCMMSLAMT.DataType = DbType.Decimal;
				colvarCMMSLAMT.MaxLength = 0;
				colvarCMMSLAMT.AutoIncrement = false;
				colvarCMMSLAMT.IsNullable = false;
				colvarCMMSLAMT.IsPrimaryKey = false;
				colvarCMMSLAMT.IsForeignKey = false;
				colvarCMMSLAMT.IsReadOnly = false;
				colvarCMMSLAMT.DefaultSetting = @"";
				colvarCMMSLAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCMMSLAMT);

				TableSchema.TableColumn colvarORCOSAMT = new TableSchema.TableColumn(schema);
				colvarORCOSAMT.ColumnName = "ORCOSAMT";
				colvarORCOSAMT.DataType = DbType.Decimal;
				colvarORCOSAMT.MaxLength = 0;
				colvarORCOSAMT.AutoIncrement = false;
				colvarORCOSAMT.IsNullable = false;
				colvarORCOSAMT.IsPrimaryKey = false;
				colvarORCOSAMT.IsForeignKey = false;
				colvarORCOSAMT.IsReadOnly = false;
				colvarORCOSAMT.DefaultSetting = @"";
				colvarORCOSAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORCOSAMT);

				TableSchema.TableColumn colvarNCOMAMNT = new TableSchema.TableColumn(schema);
				colvarNCOMAMNT.ColumnName = "NCOMAMNT";
				colvarNCOMAMNT.DataType = DbType.Decimal;
				colvarNCOMAMNT.MaxLength = 0;
				colvarNCOMAMNT.AutoIncrement = false;
				colvarNCOMAMNT.IsNullable = false;
				colvarNCOMAMNT.IsPrimaryKey = false;
				colvarNCOMAMNT.IsForeignKey = false;
				colvarNCOMAMNT.IsReadOnly = false;
				colvarNCOMAMNT.DefaultSetting = @"";
				colvarNCOMAMNT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNCOMAMNT);

				TableSchema.TableColumn colvarORNCMAMT = new TableSchema.TableColumn(schema);
				colvarORNCMAMT.ColumnName = "ORNCMAMT";
				colvarORNCMAMT.DataType = DbType.Decimal;
				colvarORNCMAMT.MaxLength = 0;
				colvarORNCMAMT.AutoIncrement = false;
				colvarORNCMAMT.IsNullable = false;
				colvarORNCMAMT.IsPrimaryKey = false;
				colvarORNCMAMT.IsForeignKey = false;
				colvarORNCMAMT.IsReadOnly = false;
				colvarORNCMAMT.DefaultSetting = @"";
				colvarORNCMAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORNCMAMT);

				TableSchema.TableColumn colvarSHIPMTHD = new TableSchema.TableColumn(schema);
				colvarSHIPMTHD.ColumnName = "SHIPMTHD";
				colvarSHIPMTHD.DataType = DbType.AnsiStringFixedLength;
				colvarSHIPMTHD.MaxLength = 15;
				colvarSHIPMTHD.AutoIncrement = false;
				colvarSHIPMTHD.IsNullable = false;
				colvarSHIPMTHD.IsPrimaryKey = false;
				colvarSHIPMTHD.IsForeignKey = false;
				colvarSHIPMTHD.IsReadOnly = false;
				colvarSHIPMTHD.DefaultSetting = @"";
				colvarSHIPMTHD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSHIPMTHD);

				TableSchema.TableColumn colvarTRDISAMT = new TableSchema.TableColumn(schema);
				colvarTRDISAMT.ColumnName = "TRDISAMT";
				colvarTRDISAMT.DataType = DbType.Decimal;
				colvarTRDISAMT.MaxLength = 0;
				colvarTRDISAMT.AutoIncrement = false;
				colvarTRDISAMT.IsNullable = false;
				colvarTRDISAMT.IsPrimaryKey = false;
				colvarTRDISAMT.IsForeignKey = false;
				colvarTRDISAMT.IsReadOnly = false;
				colvarTRDISAMT.DefaultSetting = @"";
				colvarTRDISAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTRDISAMT);

				TableSchema.TableColumn colvarORTDISAM = new TableSchema.TableColumn(schema);
				colvarORTDISAM.ColumnName = "ORTDISAM";
				colvarORTDISAM.DataType = DbType.Decimal;
				colvarORTDISAM.MaxLength = 0;
				colvarORTDISAM.AutoIncrement = false;
				colvarORTDISAM.IsNullable = false;
				colvarORTDISAM.IsPrimaryKey = false;
				colvarORTDISAM.IsForeignKey = false;
				colvarORTDISAM.IsReadOnly = false;
				colvarORTDISAM.DefaultSetting = @"";
				colvarORTDISAM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORTDISAM);

				TableSchema.TableColumn colvarTRDISPCT = new TableSchema.TableColumn(schema);
				colvarTRDISPCT.ColumnName = "TRDISPCT";
				colvarTRDISPCT.DataType = DbType.Int16;
				colvarTRDISPCT.MaxLength = 0;
				colvarTRDISPCT.AutoIncrement = false;
				colvarTRDISPCT.IsNullable = false;
				colvarTRDISPCT.IsPrimaryKey = false;
				colvarTRDISPCT.IsForeignKey = false;
				colvarTRDISPCT.IsReadOnly = false;
				colvarTRDISPCT.DefaultSetting = @"";
				colvarTRDISPCT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTRDISPCT);

				TableSchema.TableColumn colvarSUBTOTAL = new TableSchema.TableColumn(schema);
				colvarSUBTOTAL.ColumnName = "SUBTOTAL";
				colvarSUBTOTAL.DataType = DbType.Decimal;
				colvarSUBTOTAL.MaxLength = 0;
				colvarSUBTOTAL.AutoIncrement = false;
				colvarSUBTOTAL.IsNullable = false;
				colvarSUBTOTAL.IsPrimaryKey = false;
				colvarSUBTOTAL.IsForeignKey = false;
				colvarSUBTOTAL.IsReadOnly = false;
				colvarSUBTOTAL.DefaultSetting = @"";
				colvarSUBTOTAL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSUBTOTAL);

				TableSchema.TableColumn colvarORSUBTOT = new TableSchema.TableColumn(schema);
				colvarORSUBTOT.ColumnName = "ORSUBTOT";
				colvarORSUBTOT.DataType = DbType.Decimal;
				colvarORSUBTOT.MaxLength = 0;
				colvarORSUBTOT.AutoIncrement = false;
				colvarORSUBTOT.IsNullable = false;
				colvarORSUBTOT.IsPrimaryKey = false;
				colvarORSUBTOT.IsForeignKey = false;
				colvarORSUBTOT.IsReadOnly = false;
				colvarORSUBTOT.DefaultSetting = @"";
				colvarORSUBTOT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORSUBTOT);

				TableSchema.TableColumn colvarREMSUBTO = new TableSchema.TableColumn(schema);
				colvarREMSUBTO.ColumnName = "REMSUBTO";
				colvarREMSUBTO.DataType = DbType.Decimal;
				colvarREMSUBTO.MaxLength = 0;
				colvarREMSUBTO.AutoIncrement = false;
				colvarREMSUBTO.IsNullable = false;
				colvarREMSUBTO.IsPrimaryKey = false;
				colvarREMSUBTO.IsForeignKey = false;
				colvarREMSUBTO.IsReadOnly = false;
				colvarREMSUBTO.DefaultSetting = @"";
				colvarREMSUBTO.ForeignKeyTableName = "";
				schema.Columns.Add(colvarREMSUBTO);

				TableSchema.TableColumn colvarOREMSUBT = new TableSchema.TableColumn(schema);
				colvarOREMSUBT.ColumnName = "OREMSUBT";
				colvarOREMSUBT.DataType = DbType.Decimal;
				colvarOREMSUBT.MaxLength = 0;
				colvarOREMSUBT.AutoIncrement = false;
				colvarOREMSUBT.IsNullable = false;
				colvarOREMSUBT.IsPrimaryKey = false;
				colvarOREMSUBT.IsForeignKey = false;
				colvarOREMSUBT.IsReadOnly = false;
				colvarOREMSUBT.DefaultSetting = @"";
				colvarOREMSUBT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOREMSUBT);

				TableSchema.TableColumn colvarEXTDCOST = new TableSchema.TableColumn(schema);
				colvarEXTDCOST.ColumnName = "EXTDCOST";
				colvarEXTDCOST.DataType = DbType.Decimal;
				colvarEXTDCOST.MaxLength = 0;
				colvarEXTDCOST.AutoIncrement = false;
				colvarEXTDCOST.IsNullable = false;
				colvarEXTDCOST.IsPrimaryKey = false;
				colvarEXTDCOST.IsForeignKey = false;
				colvarEXTDCOST.IsReadOnly = false;
				colvarEXTDCOST.DefaultSetting = @"";
				colvarEXTDCOST.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEXTDCOST);

				TableSchema.TableColumn colvarOREXTCST = new TableSchema.TableColumn(schema);
				colvarOREXTCST.ColumnName = "OREXTCST";
				colvarOREXTCST.DataType = DbType.Decimal;
				colvarOREXTCST.MaxLength = 0;
				colvarOREXTCST.AutoIncrement = false;
				colvarOREXTCST.IsNullable = false;
				colvarOREXTCST.IsPrimaryKey = false;
				colvarOREXTCST.IsForeignKey = false;
				colvarOREXTCST.IsReadOnly = false;
				colvarOREXTCST.DefaultSetting = @"";
				colvarOREXTCST.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOREXTCST);

				TableSchema.TableColumn colvarFRTAMNT = new TableSchema.TableColumn(schema);
				colvarFRTAMNT.ColumnName = "FRTAMNT";
				colvarFRTAMNT.DataType = DbType.Decimal;
				colvarFRTAMNT.MaxLength = 0;
				colvarFRTAMNT.AutoIncrement = false;
				colvarFRTAMNT.IsNullable = false;
				colvarFRTAMNT.IsPrimaryKey = false;
				colvarFRTAMNT.IsForeignKey = false;
				colvarFRTAMNT.IsReadOnly = false;
				colvarFRTAMNT.DefaultSetting = @"";
				colvarFRTAMNT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFRTAMNT);

				TableSchema.TableColumn colvarORFRTAMT = new TableSchema.TableColumn(schema);
				colvarORFRTAMT.ColumnName = "ORFRTAMT";
				colvarORFRTAMT.DataType = DbType.Decimal;
				colvarORFRTAMT.MaxLength = 0;
				colvarORFRTAMT.AutoIncrement = false;
				colvarORFRTAMT.IsNullable = false;
				colvarORFRTAMT.IsPrimaryKey = false;
				colvarORFRTAMT.IsForeignKey = false;
				colvarORFRTAMT.IsReadOnly = false;
				colvarORFRTAMT.DefaultSetting = @"";
				colvarORFRTAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORFRTAMT);

				TableSchema.TableColumn colvarMISCAMNT = new TableSchema.TableColumn(schema);
				colvarMISCAMNT.ColumnName = "MISCAMNT";
				colvarMISCAMNT.DataType = DbType.Decimal;
				colvarMISCAMNT.MaxLength = 0;
				colvarMISCAMNT.AutoIncrement = false;
				colvarMISCAMNT.IsNullable = false;
				colvarMISCAMNT.IsPrimaryKey = false;
				colvarMISCAMNT.IsForeignKey = false;
				colvarMISCAMNT.IsReadOnly = false;
				colvarMISCAMNT.DefaultSetting = @"";
				colvarMISCAMNT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMISCAMNT);

				TableSchema.TableColumn colvarORMISCAMT = new TableSchema.TableColumn(schema);
				colvarORMISCAMT.ColumnName = "ORMISCAMT";
				colvarORMISCAMT.DataType = DbType.Decimal;
				colvarORMISCAMT.MaxLength = 0;
				colvarORMISCAMT.AutoIncrement = false;
				colvarORMISCAMT.IsNullable = false;
				colvarORMISCAMT.IsPrimaryKey = false;
				colvarORMISCAMT.IsForeignKey = false;
				colvarORMISCAMT.IsReadOnly = false;
				colvarORMISCAMT.DefaultSetting = @"";
				colvarORMISCAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORMISCAMT);

				TableSchema.TableColumn colvarTXENGCLD = new TableSchema.TableColumn(schema);
				colvarTXENGCLD.ColumnName = "TXENGCLD";
				colvarTXENGCLD.DataType = DbType.Byte;
				colvarTXENGCLD.MaxLength = 0;
				colvarTXENGCLD.AutoIncrement = false;
				colvarTXENGCLD.IsNullable = false;
				colvarTXENGCLD.IsPrimaryKey = false;
				colvarTXENGCLD.IsForeignKey = false;
				colvarTXENGCLD.IsReadOnly = false;
				colvarTXENGCLD.DefaultSetting = @"";
				colvarTXENGCLD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTXENGCLD);

				TableSchema.TableColumn colvarTAXEXMT1 = new TableSchema.TableColumn(schema);
				colvarTAXEXMT1.ColumnName = "TAXEXMT1";
				colvarTAXEXMT1.DataType = DbType.AnsiStringFixedLength;
				colvarTAXEXMT1.MaxLength = 25;
				colvarTAXEXMT1.AutoIncrement = false;
				colvarTAXEXMT1.IsNullable = false;
				colvarTAXEXMT1.IsPrimaryKey = false;
				colvarTAXEXMT1.IsForeignKey = false;
				colvarTAXEXMT1.IsReadOnly = false;
				colvarTAXEXMT1.DefaultSetting = @"";
				colvarTAXEXMT1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTAXEXMT1);

				TableSchema.TableColumn colvarTAXEXMT2 = new TableSchema.TableColumn(schema);
				colvarTAXEXMT2.ColumnName = "TAXEXMT2";
				colvarTAXEXMT2.DataType = DbType.AnsiStringFixedLength;
				colvarTAXEXMT2.MaxLength = 25;
				colvarTAXEXMT2.AutoIncrement = false;
				colvarTAXEXMT2.IsNullable = false;
				colvarTAXEXMT2.IsPrimaryKey = false;
				colvarTAXEXMT2.IsForeignKey = false;
				colvarTAXEXMT2.IsReadOnly = false;
				colvarTAXEXMT2.DefaultSetting = @"";
				colvarTAXEXMT2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTAXEXMT2);

				TableSchema.TableColumn colvarTXRGNNUM = new TableSchema.TableColumn(schema);
				colvarTXRGNNUM.ColumnName = "TXRGNNUM";
				colvarTXRGNNUM.DataType = DbType.AnsiStringFixedLength;
				colvarTXRGNNUM.MaxLength = 25;
				colvarTXRGNNUM.AutoIncrement = false;
				colvarTXRGNNUM.IsNullable = false;
				colvarTXRGNNUM.IsPrimaryKey = false;
				colvarTXRGNNUM.IsForeignKey = false;
				colvarTXRGNNUM.IsReadOnly = false;
				colvarTXRGNNUM.DefaultSetting = @"";
				colvarTXRGNNUM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTXRGNNUM);

				TableSchema.TableColumn colvarTAXSCHID = new TableSchema.TableColumn(schema);
				colvarTAXSCHID.ColumnName = "TAXSCHID";
				colvarTAXSCHID.DataType = DbType.AnsiStringFixedLength;
				colvarTAXSCHID.MaxLength = 15;
				colvarTAXSCHID.AutoIncrement = false;
				colvarTAXSCHID.IsNullable = false;
				colvarTAXSCHID.IsPrimaryKey = false;
				colvarTAXSCHID.IsForeignKey = false;
				colvarTAXSCHID.IsReadOnly = false;
				colvarTAXSCHID.DefaultSetting = @"";
				colvarTAXSCHID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTAXSCHID);

				TableSchema.TableColumn colvarTXSCHSRC = new TableSchema.TableColumn(schema);
				colvarTXSCHSRC.ColumnName = "TXSCHSRC";
				colvarTXSCHSRC.DataType = DbType.Int16;
				colvarTXSCHSRC.MaxLength = 0;
				colvarTXSCHSRC.AutoIncrement = false;
				colvarTXSCHSRC.IsNullable = false;
				colvarTXSCHSRC.IsPrimaryKey = false;
				colvarTXSCHSRC.IsForeignKey = false;
				colvarTXSCHSRC.IsReadOnly = false;
				colvarTXSCHSRC.DefaultSetting = @"";
				colvarTXSCHSRC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTXSCHSRC);

				TableSchema.TableColumn colvarBSIVCTTL = new TableSchema.TableColumn(schema);
				colvarBSIVCTTL.ColumnName = "BSIVCTTL";
				colvarBSIVCTTL.DataType = DbType.Byte;
				colvarBSIVCTTL.MaxLength = 0;
				colvarBSIVCTTL.AutoIncrement = false;
				colvarBSIVCTTL.IsNullable = false;
				colvarBSIVCTTL.IsPrimaryKey = false;
				colvarBSIVCTTL.IsForeignKey = false;
				colvarBSIVCTTL.IsReadOnly = false;
				colvarBSIVCTTL.DefaultSetting = @"";
				colvarBSIVCTTL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBSIVCTTL);

				TableSchema.TableColumn colvarFRTSCHID = new TableSchema.TableColumn(schema);
				colvarFRTSCHID.ColumnName = "FRTSCHID";
				colvarFRTSCHID.DataType = DbType.AnsiStringFixedLength;
				colvarFRTSCHID.MaxLength = 15;
				colvarFRTSCHID.AutoIncrement = false;
				colvarFRTSCHID.IsNullable = false;
				colvarFRTSCHID.IsPrimaryKey = false;
				colvarFRTSCHID.IsForeignKey = false;
				colvarFRTSCHID.IsReadOnly = false;
				colvarFRTSCHID.DefaultSetting = @"";
				colvarFRTSCHID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFRTSCHID);

				TableSchema.TableColumn colvarFRTTXAMT = new TableSchema.TableColumn(schema);
				colvarFRTTXAMT.ColumnName = "FRTTXAMT";
				colvarFRTTXAMT.DataType = DbType.Decimal;
				colvarFRTTXAMT.MaxLength = 0;
				colvarFRTTXAMT.AutoIncrement = false;
				colvarFRTTXAMT.IsNullable = false;
				colvarFRTTXAMT.IsPrimaryKey = false;
				colvarFRTTXAMT.IsForeignKey = false;
				colvarFRTTXAMT.IsReadOnly = false;
				colvarFRTTXAMT.DefaultSetting = @"";
				colvarFRTTXAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFRTTXAMT);

				TableSchema.TableColumn colvarORFRTTAX = new TableSchema.TableColumn(schema);
				colvarORFRTTAX.ColumnName = "ORFRTTAX";
				colvarORFRTTAX.DataType = DbType.Decimal;
				colvarORFRTTAX.MaxLength = 0;
				colvarORFRTTAX.AutoIncrement = false;
				colvarORFRTTAX.IsNullable = false;
				colvarORFRTTAX.IsPrimaryKey = false;
				colvarORFRTTAX.IsForeignKey = false;
				colvarORFRTTAX.IsReadOnly = false;
				colvarORFRTTAX.DefaultSetting = @"";
				colvarORFRTTAX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORFRTTAX);

				TableSchema.TableColumn colvarFRGTTXBL = new TableSchema.TableColumn(schema);
				colvarFRGTTXBL.ColumnName = "FRGTTXBL";
				colvarFRGTTXBL.DataType = DbType.Int16;
				colvarFRGTTXBL.MaxLength = 0;
				colvarFRGTTXBL.AutoIncrement = false;
				colvarFRGTTXBL.IsNullable = false;
				colvarFRGTTXBL.IsPrimaryKey = false;
				colvarFRGTTXBL.IsForeignKey = false;
				colvarFRGTTXBL.IsReadOnly = false;
				colvarFRGTTXBL.DefaultSetting = @"";
				colvarFRGTTXBL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFRGTTXBL);

				TableSchema.TableColumn colvarMSCSCHID = new TableSchema.TableColumn(schema);
				colvarMSCSCHID.ColumnName = "MSCSCHID";
				colvarMSCSCHID.DataType = DbType.AnsiStringFixedLength;
				colvarMSCSCHID.MaxLength = 15;
				colvarMSCSCHID.AutoIncrement = false;
				colvarMSCSCHID.IsNullable = false;
				colvarMSCSCHID.IsPrimaryKey = false;
				colvarMSCSCHID.IsForeignKey = false;
				colvarMSCSCHID.IsReadOnly = false;
				colvarMSCSCHID.DefaultSetting = @"";
				colvarMSCSCHID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMSCSCHID);

				TableSchema.TableColumn colvarMSCTXAMT = new TableSchema.TableColumn(schema);
				colvarMSCTXAMT.ColumnName = "MSCTXAMT";
				colvarMSCTXAMT.DataType = DbType.Decimal;
				colvarMSCTXAMT.MaxLength = 0;
				colvarMSCTXAMT.AutoIncrement = false;
				colvarMSCTXAMT.IsNullable = false;
				colvarMSCTXAMT.IsPrimaryKey = false;
				colvarMSCTXAMT.IsForeignKey = false;
				colvarMSCTXAMT.IsReadOnly = false;
				colvarMSCTXAMT.DefaultSetting = @"";
				colvarMSCTXAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMSCTXAMT);

				TableSchema.TableColumn colvarORMSCTAX = new TableSchema.TableColumn(schema);
				colvarORMSCTAX.ColumnName = "ORMSCTAX";
				colvarORMSCTAX.DataType = DbType.Decimal;
				colvarORMSCTAX.MaxLength = 0;
				colvarORMSCTAX.AutoIncrement = false;
				colvarORMSCTAX.IsNullable = false;
				colvarORMSCTAX.IsPrimaryKey = false;
				colvarORMSCTAX.IsForeignKey = false;
				colvarORMSCTAX.IsReadOnly = false;
				colvarORMSCTAX.DefaultSetting = @"";
				colvarORMSCTAX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORMSCTAX);

				TableSchema.TableColumn colvarMISCTXBL = new TableSchema.TableColumn(schema);
				colvarMISCTXBL.ColumnName = "MISCTXBL";
				colvarMISCTXBL.DataType = DbType.Int16;
				colvarMISCTXBL.MaxLength = 0;
				colvarMISCTXBL.AutoIncrement = false;
				colvarMISCTXBL.IsNullable = false;
				colvarMISCTXBL.IsPrimaryKey = false;
				colvarMISCTXBL.IsForeignKey = false;
				colvarMISCTXBL.IsReadOnly = false;
				colvarMISCTXBL.DefaultSetting = @"";
				colvarMISCTXBL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMISCTXBL);

				TableSchema.TableColumn colvarBKTFRTAM = new TableSchema.TableColumn(schema);
				colvarBKTFRTAM.ColumnName = "BKTFRTAM";
				colvarBKTFRTAM.DataType = DbType.Decimal;
				colvarBKTFRTAM.MaxLength = 0;
				colvarBKTFRTAM.AutoIncrement = false;
				colvarBKTFRTAM.IsNullable = false;
				colvarBKTFRTAM.IsPrimaryKey = false;
				colvarBKTFRTAM.IsForeignKey = false;
				colvarBKTFRTAM.IsReadOnly = false;
				colvarBKTFRTAM.DefaultSetting = @"";
				colvarBKTFRTAM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBKTFRTAM);

				TableSchema.TableColumn colvarORBKTFRT = new TableSchema.TableColumn(schema);
				colvarORBKTFRT.ColumnName = "ORBKTFRT";
				colvarORBKTFRT.DataType = DbType.Decimal;
				colvarORBKTFRT.MaxLength = 0;
				colvarORBKTFRT.AutoIncrement = false;
				colvarORBKTFRT.IsNullable = false;
				colvarORBKTFRT.IsPrimaryKey = false;
				colvarORBKTFRT.IsForeignKey = false;
				colvarORBKTFRT.IsReadOnly = false;
				colvarORBKTFRT.DefaultSetting = @"";
				colvarORBKTFRT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORBKTFRT);

				TableSchema.TableColumn colvarBKTMSCAM = new TableSchema.TableColumn(schema);
				colvarBKTMSCAM.ColumnName = "BKTMSCAM";
				colvarBKTMSCAM.DataType = DbType.Decimal;
				colvarBKTMSCAM.MaxLength = 0;
				colvarBKTMSCAM.AutoIncrement = false;
				colvarBKTMSCAM.IsNullable = false;
				colvarBKTMSCAM.IsPrimaryKey = false;
				colvarBKTMSCAM.IsForeignKey = false;
				colvarBKTMSCAM.IsReadOnly = false;
				colvarBKTMSCAM.DefaultSetting = @"";
				colvarBKTMSCAM.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBKTMSCAM);

				TableSchema.TableColumn colvarORBKTMSC = new TableSchema.TableColumn(schema);
				colvarORBKTMSC.ColumnName = "ORBKTMSC";
				colvarORBKTMSC.DataType = DbType.Decimal;
				colvarORBKTMSC.MaxLength = 0;
				colvarORBKTMSC.AutoIncrement = false;
				colvarORBKTMSC.IsNullable = false;
				colvarORBKTMSC.IsPrimaryKey = false;
				colvarORBKTMSC.IsForeignKey = false;
				colvarORBKTMSC.IsReadOnly = false;
				colvarORBKTMSC.DefaultSetting = @"";
				colvarORBKTMSC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORBKTMSC);

				TableSchema.TableColumn colvarBCKTXAMT = new TableSchema.TableColumn(schema);
				colvarBCKTXAMT.ColumnName = "BCKTXAMT";
				colvarBCKTXAMT.DataType = DbType.Decimal;
				colvarBCKTXAMT.MaxLength = 0;
				colvarBCKTXAMT.AutoIncrement = false;
				colvarBCKTXAMT.IsNullable = false;
				colvarBCKTXAMT.IsPrimaryKey = false;
				colvarBCKTXAMT.IsForeignKey = false;
				colvarBCKTXAMT.IsReadOnly = false;
				colvarBCKTXAMT.DefaultSetting = @"";
				colvarBCKTXAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBCKTXAMT);

				TableSchema.TableColumn colvarOBTAXAMT = new TableSchema.TableColumn(schema);
				colvarOBTAXAMT.ColumnName = "OBTAXAMT";
				colvarOBTAXAMT.DataType = DbType.Decimal;
				colvarOBTAXAMT.MaxLength = 0;
				colvarOBTAXAMT.AutoIncrement = false;
				colvarOBTAXAMT.IsNullable = false;
				colvarOBTAXAMT.IsPrimaryKey = false;
				colvarOBTAXAMT.IsForeignKey = false;
				colvarOBTAXAMT.IsReadOnly = false;
				colvarOBTAXAMT.DefaultSetting = @"";
				colvarOBTAXAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOBTAXAMT);

				TableSchema.TableColumn colvarTXBTXAMT = new TableSchema.TableColumn(schema);
				colvarTXBTXAMT.ColumnName = "TXBTXAMT";
				colvarTXBTXAMT.DataType = DbType.Decimal;
				colvarTXBTXAMT.MaxLength = 0;
				colvarTXBTXAMT.AutoIncrement = false;
				colvarTXBTXAMT.IsNullable = false;
				colvarTXBTXAMT.IsPrimaryKey = false;
				colvarTXBTXAMT.IsForeignKey = false;
				colvarTXBTXAMT.IsReadOnly = false;
				colvarTXBTXAMT.DefaultSetting = @"";
				colvarTXBTXAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTXBTXAMT);

				TableSchema.TableColumn colvarOTAXTAMT = new TableSchema.TableColumn(schema);
				colvarOTAXTAMT.ColumnName = "OTAXTAMT";
				colvarOTAXTAMT.DataType = DbType.Decimal;
				colvarOTAXTAMT.MaxLength = 0;
				colvarOTAXTAMT.AutoIncrement = false;
				colvarOTAXTAMT.IsNullable = false;
				colvarOTAXTAMT.IsPrimaryKey = false;
				colvarOTAXTAMT.IsForeignKey = false;
				colvarOTAXTAMT.IsReadOnly = false;
				colvarOTAXTAMT.DefaultSetting = @"";
				colvarOTAXTAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOTAXTAMT);

				TableSchema.TableColumn colvarTAXAMNT = new TableSchema.TableColumn(schema);
				colvarTAXAMNT.ColumnName = "TAXAMNT";
				colvarTAXAMNT.DataType = DbType.Decimal;
				colvarTAXAMNT.MaxLength = 0;
				colvarTAXAMNT.AutoIncrement = false;
				colvarTAXAMNT.IsNullable = false;
				colvarTAXAMNT.IsPrimaryKey = false;
				colvarTAXAMNT.IsForeignKey = false;
				colvarTAXAMNT.IsReadOnly = false;
				colvarTAXAMNT.DefaultSetting = @"";
				colvarTAXAMNT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTAXAMNT);

				TableSchema.TableColumn colvarORTAXAMT = new TableSchema.TableColumn(schema);
				colvarORTAXAMT.ColumnName = "ORTAXAMT";
				colvarORTAXAMT.DataType = DbType.Decimal;
				colvarORTAXAMT.MaxLength = 0;
				colvarORTAXAMT.AutoIncrement = false;
				colvarORTAXAMT.IsNullable = false;
				colvarORTAXAMT.IsPrimaryKey = false;
				colvarORTAXAMT.IsForeignKey = false;
				colvarORTAXAMT.IsReadOnly = false;
				colvarORTAXAMT.DefaultSetting = @"";
				colvarORTAXAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORTAXAMT);

				TableSchema.TableColumn colvarECTRX = new TableSchema.TableColumn(schema);
				colvarECTRX.ColumnName = "ECTRX";
				colvarECTRX.DataType = DbType.Byte;
				colvarECTRX.MaxLength = 0;
				colvarECTRX.AutoIncrement = false;
				colvarECTRX.IsNullable = false;
				colvarECTRX.IsPrimaryKey = false;
				colvarECTRX.IsForeignKey = false;
				colvarECTRX.IsReadOnly = false;
				colvarECTRX.DefaultSetting = @"";
				colvarECTRX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarECTRX);

				TableSchema.TableColumn colvarDOCAMNT = new TableSchema.TableColumn(schema);
				colvarDOCAMNT.ColumnName = "DOCAMNT";
				colvarDOCAMNT.DataType = DbType.Decimal;
				colvarDOCAMNT.MaxLength = 0;
				colvarDOCAMNT.AutoIncrement = false;
				colvarDOCAMNT.IsNullable = false;
				colvarDOCAMNT.IsPrimaryKey = false;
				colvarDOCAMNT.IsForeignKey = false;
				colvarDOCAMNT.IsReadOnly = false;
				colvarDOCAMNT.DefaultSetting = @"";
				colvarDOCAMNT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOCAMNT);

				TableSchema.TableColumn colvarORDOCAMT = new TableSchema.TableColumn(schema);
				colvarORDOCAMT.ColumnName = "ORDOCAMT";
				colvarORDOCAMT.DataType = DbType.Decimal;
				colvarORDOCAMT.MaxLength = 0;
				colvarORDOCAMT.AutoIncrement = false;
				colvarORDOCAMT.IsNullable = false;
				colvarORDOCAMT.IsPrimaryKey = false;
				colvarORDOCAMT.IsForeignKey = false;
				colvarORDOCAMT.IsReadOnly = false;
				colvarORDOCAMT.DefaultSetting = @"";
				colvarORDOCAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORDOCAMT);

				TableSchema.TableColumn colvarPYMTRCVD = new TableSchema.TableColumn(schema);
				colvarPYMTRCVD.ColumnName = "PYMTRCVD";
				colvarPYMTRCVD.DataType = DbType.Decimal;
				colvarPYMTRCVD.MaxLength = 0;
				colvarPYMTRCVD.AutoIncrement = false;
				colvarPYMTRCVD.IsNullable = false;
				colvarPYMTRCVD.IsPrimaryKey = false;
				colvarPYMTRCVD.IsForeignKey = false;
				colvarPYMTRCVD.IsReadOnly = false;
				colvarPYMTRCVD.DefaultSetting = @"";
				colvarPYMTRCVD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPYMTRCVD);

				TableSchema.TableColumn colvarORPMTRVD = new TableSchema.TableColumn(schema);
				colvarORPMTRVD.ColumnName = "ORPMTRVD";
				colvarORPMTRVD.DataType = DbType.Decimal;
				colvarORPMTRVD.MaxLength = 0;
				colvarORPMTRVD.AutoIncrement = false;
				colvarORPMTRVD.IsNullable = false;
				colvarORPMTRVD.IsPrimaryKey = false;
				colvarORPMTRVD.IsForeignKey = false;
				colvarORPMTRVD.IsReadOnly = false;
				colvarORPMTRVD.DefaultSetting = @"";
				colvarORPMTRVD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORPMTRVD);

				TableSchema.TableColumn colvarDEPRECVD = new TableSchema.TableColumn(schema);
				colvarDEPRECVD.ColumnName = "DEPRECVD";
				colvarDEPRECVD.DataType = DbType.Decimal;
				colvarDEPRECVD.MaxLength = 0;
				colvarDEPRECVD.AutoIncrement = false;
				colvarDEPRECVD.IsNullable = false;
				colvarDEPRECVD.IsPrimaryKey = false;
				colvarDEPRECVD.IsForeignKey = false;
				colvarDEPRECVD.IsReadOnly = false;
				colvarDEPRECVD.DefaultSetting = @"";
				colvarDEPRECVD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEPRECVD);

				TableSchema.TableColumn colvarORDEPRVD = new TableSchema.TableColumn(schema);
				colvarORDEPRVD.ColumnName = "ORDEPRVD";
				colvarORDEPRVD.DataType = DbType.Decimal;
				colvarORDEPRVD.MaxLength = 0;
				colvarORDEPRVD.AutoIncrement = false;
				colvarORDEPRVD.IsNullable = false;
				colvarORDEPRVD.IsPrimaryKey = false;
				colvarORDEPRVD.IsForeignKey = false;
				colvarORDEPRVD.IsReadOnly = false;
				colvarORDEPRVD.DefaultSetting = @"";
				colvarORDEPRVD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORDEPRVD);

				TableSchema.TableColumn colvarCODAMNT = new TableSchema.TableColumn(schema);
				colvarCODAMNT.ColumnName = "CODAMNT";
				colvarCODAMNT.DataType = DbType.Decimal;
				colvarCODAMNT.MaxLength = 0;
				colvarCODAMNT.AutoIncrement = false;
				colvarCODAMNT.IsNullable = false;
				colvarCODAMNT.IsPrimaryKey = false;
				colvarCODAMNT.IsForeignKey = false;
				colvarCODAMNT.IsReadOnly = false;
				colvarCODAMNT.DefaultSetting = @"";
				colvarCODAMNT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCODAMNT);

				TableSchema.TableColumn colvarORCODAMT = new TableSchema.TableColumn(schema);
				colvarORCODAMT.ColumnName = "ORCODAMT";
				colvarORCODAMT.DataType = DbType.Decimal;
				colvarORCODAMT.MaxLength = 0;
				colvarORCODAMT.AutoIncrement = false;
				colvarORCODAMT.IsNullable = false;
				colvarORCODAMT.IsPrimaryKey = false;
				colvarORCODAMT.IsForeignKey = false;
				colvarORCODAMT.IsReadOnly = false;
				colvarORCODAMT.DefaultSetting = @"";
				colvarORCODAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORCODAMT);

				TableSchema.TableColumn colvarACCTAMNT = new TableSchema.TableColumn(schema);
				colvarACCTAMNT.ColumnName = "ACCTAMNT";
				colvarACCTAMNT.DataType = DbType.Decimal;
				colvarACCTAMNT.MaxLength = 0;
				colvarACCTAMNT.AutoIncrement = false;
				colvarACCTAMNT.IsNullable = false;
				colvarACCTAMNT.IsPrimaryKey = false;
				colvarACCTAMNT.IsForeignKey = false;
				colvarACCTAMNT.IsReadOnly = false;
				colvarACCTAMNT.DefaultSetting = @"";
				colvarACCTAMNT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarACCTAMNT);

				TableSchema.TableColumn colvarORACTAMT = new TableSchema.TableColumn(schema);
				colvarORACTAMT.ColumnName = "ORACTAMT";
				colvarORACTAMT.DataType = DbType.Decimal;
				colvarORACTAMT.MaxLength = 0;
				colvarORACTAMT.AutoIncrement = false;
				colvarORACTAMT.IsNullable = false;
				colvarORACTAMT.IsPrimaryKey = false;
				colvarORACTAMT.IsForeignKey = false;
				colvarORACTAMT.IsReadOnly = false;
				colvarORACTAMT.DefaultSetting = @"";
				colvarORACTAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarORACTAMT);

				TableSchema.TableColumn colvarSALSTERR = new TableSchema.TableColumn(schema);
				colvarSALSTERR.ColumnName = "SALSTERR";
				colvarSALSTERR.DataType = DbType.AnsiStringFixedLength;
				colvarSALSTERR.MaxLength = 15;
				colvarSALSTERR.AutoIncrement = false;
				colvarSALSTERR.IsNullable = false;
				colvarSALSTERR.IsPrimaryKey = false;
				colvarSALSTERR.IsForeignKey = false;
				colvarSALSTERR.IsReadOnly = false;
				colvarSALSTERR.DefaultSetting = @"";
				colvarSALSTERR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSALSTERR);

				TableSchema.TableColumn colvarSLPRSNID = new TableSchema.TableColumn(schema);
				colvarSLPRSNID.ColumnName = "SLPRSNID";
				colvarSLPRSNID.DataType = DbType.AnsiStringFixedLength;
				colvarSLPRSNID.MaxLength = 15;
				colvarSLPRSNID.AutoIncrement = false;
				colvarSLPRSNID.IsNullable = false;
				colvarSLPRSNID.IsPrimaryKey = false;
				colvarSLPRSNID.IsForeignKey = false;
				colvarSLPRSNID.IsReadOnly = false;
				colvarSLPRSNID.DefaultSetting = @"";
				colvarSLPRSNID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSLPRSNID);

				TableSchema.TableColumn colvarUPSZONE = new TableSchema.TableColumn(schema);
				colvarUPSZONE.ColumnName = "UPSZONE";
				colvarUPSZONE.DataType = DbType.AnsiStringFixedLength;
				colvarUPSZONE.MaxLength = 3;
				colvarUPSZONE.AutoIncrement = false;
				colvarUPSZONE.IsNullable = false;
				colvarUPSZONE.IsPrimaryKey = false;
				colvarUPSZONE.IsForeignKey = false;
				colvarUPSZONE.IsReadOnly = false;
				colvarUPSZONE.DefaultSetting = @"";
				colvarUPSZONE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUPSZONE);

				TableSchema.TableColumn colvarTIMESPRT = new TableSchema.TableColumn(schema);
				colvarTIMESPRT.ColumnName = "TIMESPRT";
				colvarTIMESPRT.DataType = DbType.Int16;
				colvarTIMESPRT.MaxLength = 0;
				colvarTIMESPRT.AutoIncrement = false;
				colvarTIMESPRT.IsNullable = false;
				colvarTIMESPRT.IsPrimaryKey = false;
				colvarTIMESPRT.IsForeignKey = false;
				colvarTIMESPRT.IsReadOnly = false;
				colvarTIMESPRT.DefaultSetting = @"";
				colvarTIMESPRT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTIMESPRT);

				TableSchema.TableColumn colvarPSTGSTUS = new TableSchema.TableColumn(schema);
				colvarPSTGSTUS.ColumnName = "PSTGSTUS";
				colvarPSTGSTUS.DataType = DbType.Int16;
				colvarPSTGSTUS.MaxLength = 0;
				colvarPSTGSTUS.AutoIncrement = false;
				colvarPSTGSTUS.IsNullable = false;
				colvarPSTGSTUS.IsPrimaryKey = false;
				colvarPSTGSTUS.IsForeignKey = false;
				colvarPSTGSTUS.IsReadOnly = false;
				colvarPSTGSTUS.DefaultSetting = @"";
				colvarPSTGSTUS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPSTGSTUS);

				TableSchema.TableColumn colvarVOIDSTTS = new TableSchema.TableColumn(schema);
				colvarVOIDSTTS.ColumnName = "VOIDSTTS";
				colvarVOIDSTTS.DataType = DbType.Int16;
				colvarVOIDSTTS.MaxLength = 0;
				colvarVOIDSTTS.AutoIncrement = false;
				colvarVOIDSTTS.IsNullable = false;
				colvarVOIDSTTS.IsPrimaryKey = false;
				colvarVOIDSTTS.IsForeignKey = false;
				colvarVOIDSTTS.IsReadOnly = false;
				colvarVOIDSTTS.DefaultSetting = @"";
				colvarVOIDSTTS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVOIDSTTS);

				TableSchema.TableColumn colvarALLOCABY = new TableSchema.TableColumn(schema);
				colvarALLOCABY.ColumnName = "ALLOCABY";
				colvarALLOCABY.DataType = DbType.Int16;
				colvarALLOCABY.MaxLength = 0;
				colvarALLOCABY.AutoIncrement = false;
				colvarALLOCABY.IsNullable = false;
				colvarALLOCABY.IsPrimaryKey = false;
				colvarALLOCABY.IsForeignKey = false;
				colvarALLOCABY.IsReadOnly = false;
				colvarALLOCABY.DefaultSetting = @"";
				colvarALLOCABY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarALLOCABY);

				TableSchema.TableColumn colvarNOTEINDX = new TableSchema.TableColumn(schema);
				colvarNOTEINDX.ColumnName = "NOTEINDX";
				colvarNOTEINDX.DataType = DbType.Decimal;
				colvarNOTEINDX.MaxLength = 0;
				colvarNOTEINDX.AutoIncrement = false;
				colvarNOTEINDX.IsNullable = false;
				colvarNOTEINDX.IsPrimaryKey = false;
				colvarNOTEINDX.IsForeignKey = false;
				colvarNOTEINDX.IsReadOnly = false;
				colvarNOTEINDX.DefaultSetting = @"";
				colvarNOTEINDX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNOTEINDX);

				TableSchema.TableColumn colvarCURNCYID = new TableSchema.TableColumn(schema);
				colvarCURNCYID.ColumnName = "CURNCYID";
				colvarCURNCYID.DataType = DbType.AnsiStringFixedLength;
				colvarCURNCYID.MaxLength = 15;
				colvarCURNCYID.AutoIncrement = false;
				colvarCURNCYID.IsNullable = false;
				colvarCURNCYID.IsPrimaryKey = false;
				colvarCURNCYID.IsForeignKey = false;
				colvarCURNCYID.IsReadOnly = false;
				colvarCURNCYID.DefaultSetting = @"";
				colvarCURNCYID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCURNCYID);

				TableSchema.TableColumn colvarCURRNIDX = new TableSchema.TableColumn(schema);
				colvarCURRNIDX.ColumnName = "CURRNIDX";
				colvarCURRNIDX.DataType = DbType.Int16;
				colvarCURRNIDX.MaxLength = 0;
				colvarCURRNIDX.AutoIncrement = false;
				colvarCURRNIDX.IsNullable = false;
				colvarCURRNIDX.IsPrimaryKey = false;
				colvarCURRNIDX.IsForeignKey = false;
				colvarCURRNIDX.IsReadOnly = false;
				colvarCURRNIDX.DefaultSetting = @"";
				colvarCURRNIDX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCURRNIDX);

				TableSchema.TableColumn colvarRATETPID = new TableSchema.TableColumn(schema);
				colvarRATETPID.ColumnName = "RATETPID";
				colvarRATETPID.DataType = DbType.AnsiStringFixedLength;
				colvarRATETPID.MaxLength = 15;
				colvarRATETPID.AutoIncrement = false;
				colvarRATETPID.IsNullable = false;
				colvarRATETPID.IsPrimaryKey = false;
				colvarRATETPID.IsForeignKey = false;
				colvarRATETPID.IsReadOnly = false;
				colvarRATETPID.DefaultSetting = @"";
				colvarRATETPID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRATETPID);

				TableSchema.TableColumn colvarEXGTBLID = new TableSchema.TableColumn(schema);
				colvarEXGTBLID.ColumnName = "EXGTBLID";
				colvarEXGTBLID.DataType = DbType.AnsiStringFixedLength;
				colvarEXGTBLID.MaxLength = 15;
				colvarEXGTBLID.AutoIncrement = false;
				colvarEXGTBLID.IsNullable = false;
				colvarEXGTBLID.IsPrimaryKey = false;
				colvarEXGTBLID.IsForeignKey = false;
				colvarEXGTBLID.IsReadOnly = false;
				colvarEXGTBLID.DefaultSetting = @"";
				colvarEXGTBLID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEXGTBLID);

				TableSchema.TableColumn colvarXCHGRATE = new TableSchema.TableColumn(schema);
				colvarXCHGRATE.ColumnName = "XCHGRATE";
				colvarXCHGRATE.DataType = DbType.Decimal;
				colvarXCHGRATE.MaxLength = 0;
				colvarXCHGRATE.AutoIncrement = false;
				colvarXCHGRATE.IsNullable = false;
				colvarXCHGRATE.IsPrimaryKey = false;
				colvarXCHGRATE.IsForeignKey = false;
				colvarXCHGRATE.IsReadOnly = false;
				colvarXCHGRATE.DefaultSetting = @"";
				colvarXCHGRATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXCHGRATE);

				TableSchema.TableColumn colvarDENXRATE = new TableSchema.TableColumn(schema);
				colvarDENXRATE.ColumnName = "DENXRATE";
				colvarDENXRATE.DataType = DbType.Decimal;
				colvarDENXRATE.MaxLength = 0;
				colvarDENXRATE.AutoIncrement = false;
				colvarDENXRATE.IsNullable = false;
				colvarDENXRATE.IsPrimaryKey = false;
				colvarDENXRATE.IsForeignKey = false;
				colvarDENXRATE.IsReadOnly = false;
				colvarDENXRATE.DefaultSetting = @"";
				colvarDENXRATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDENXRATE);

				TableSchema.TableColumn colvarEXCHDATE = new TableSchema.TableColumn(schema);
				colvarEXCHDATE.ColumnName = "EXCHDATE";
				colvarEXCHDATE.DataType = DbType.DateTime;
				colvarEXCHDATE.MaxLength = 0;
				colvarEXCHDATE.AutoIncrement = false;
				colvarEXCHDATE.IsNullable = false;
				colvarEXCHDATE.IsPrimaryKey = false;
				colvarEXCHDATE.IsForeignKey = false;
				colvarEXCHDATE.IsReadOnly = false;
				colvarEXCHDATE.DefaultSetting = @"";
				colvarEXCHDATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEXCHDATE);

				TableSchema.TableColumn colvarTIME1 = new TableSchema.TableColumn(schema);
				colvarTIME1.ColumnName = "TIME1";
				colvarTIME1.DataType = DbType.DateTime;
				colvarTIME1.MaxLength = 0;
				colvarTIME1.AutoIncrement = false;
				colvarTIME1.IsNullable = false;
				colvarTIME1.IsPrimaryKey = false;
				colvarTIME1.IsForeignKey = false;
				colvarTIME1.IsReadOnly = false;
				colvarTIME1.DefaultSetting = @"";
				colvarTIME1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTIME1);

				TableSchema.TableColumn colvarRTCLCMTD = new TableSchema.TableColumn(schema);
				colvarRTCLCMTD.ColumnName = "RTCLCMTD";
				colvarRTCLCMTD.DataType = DbType.Int16;
				colvarRTCLCMTD.MaxLength = 0;
				colvarRTCLCMTD.AutoIncrement = false;
				colvarRTCLCMTD.IsNullable = false;
				colvarRTCLCMTD.IsPrimaryKey = false;
				colvarRTCLCMTD.IsForeignKey = false;
				colvarRTCLCMTD.IsReadOnly = false;
				colvarRTCLCMTD.DefaultSetting = @"";
				colvarRTCLCMTD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRTCLCMTD);

				TableSchema.TableColumn colvarMCTRXSTT = new TableSchema.TableColumn(schema);
				colvarMCTRXSTT.ColumnName = "MCTRXSTT";
				colvarMCTRXSTT.DataType = DbType.Int16;
				colvarMCTRXSTT.MaxLength = 0;
				colvarMCTRXSTT.AutoIncrement = false;
				colvarMCTRXSTT.IsNullable = false;
				colvarMCTRXSTT.IsPrimaryKey = false;
				colvarMCTRXSTT.IsForeignKey = false;
				colvarMCTRXSTT.IsReadOnly = false;
				colvarMCTRXSTT.DefaultSetting = @"";
				colvarMCTRXSTT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMCTRXSTT);

				TableSchema.TableColumn colvarTRXSORCE = new TableSchema.TableColumn(schema);
				colvarTRXSORCE.ColumnName = "TRXSORCE";
				colvarTRXSORCE.DataType = DbType.AnsiStringFixedLength;
				colvarTRXSORCE.MaxLength = 13;
				colvarTRXSORCE.AutoIncrement = false;
				colvarTRXSORCE.IsNullable = false;
				colvarTRXSORCE.IsPrimaryKey = false;
				colvarTRXSORCE.IsForeignKey = false;
				colvarTRXSORCE.IsReadOnly = false;
				colvarTRXSORCE.DefaultSetting = @"";
				colvarTRXSORCE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTRXSORCE);

				TableSchema.TableColumn colvarSOPHDRE1 = new TableSchema.TableColumn(schema);
				colvarSOPHDRE1.ColumnName = "SOPHDRE1";
				colvarSOPHDRE1.DataType = DbType.Binary;
				colvarSOPHDRE1.MaxLength = 4;
				colvarSOPHDRE1.AutoIncrement = false;
				colvarSOPHDRE1.IsNullable = false;
				colvarSOPHDRE1.IsPrimaryKey = false;
				colvarSOPHDRE1.IsForeignKey = false;
				colvarSOPHDRE1.IsReadOnly = false;
				colvarSOPHDRE1.DefaultSetting = @"";
				colvarSOPHDRE1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSOPHDRE1);

				TableSchema.TableColumn colvarSOPHDRE2 = new TableSchema.TableColumn(schema);
				colvarSOPHDRE2.ColumnName = "SOPHDRE2";
				colvarSOPHDRE2.DataType = DbType.Binary;
				colvarSOPHDRE2.MaxLength = 4;
				colvarSOPHDRE2.AutoIncrement = false;
				colvarSOPHDRE2.IsNullable = false;
				colvarSOPHDRE2.IsPrimaryKey = false;
				colvarSOPHDRE2.IsForeignKey = false;
				colvarSOPHDRE2.IsReadOnly = false;
				colvarSOPHDRE2.DefaultSetting = @"";
				colvarSOPHDRE2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSOPHDRE2);

				TableSchema.TableColumn colvarSOPLNERR = new TableSchema.TableColumn(schema);
				colvarSOPLNERR.ColumnName = "SOPLNERR";
				colvarSOPLNERR.DataType = DbType.Binary;
				colvarSOPLNERR.MaxLength = 4;
				colvarSOPLNERR.AutoIncrement = false;
				colvarSOPLNERR.IsNullable = false;
				colvarSOPLNERR.IsPrimaryKey = false;
				colvarSOPLNERR.IsForeignKey = false;
				colvarSOPLNERR.IsReadOnly = false;
				colvarSOPLNERR.DefaultSetting = @"";
				colvarSOPLNERR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSOPLNERR);

				TableSchema.TableColumn colvarSOPHDRFL = new TableSchema.TableColumn(schema);
				colvarSOPHDRFL.ColumnName = "SOPHDRFL";
				colvarSOPHDRFL.DataType = DbType.Binary;
				colvarSOPHDRFL.MaxLength = 4;
				colvarSOPHDRFL.AutoIncrement = false;
				colvarSOPHDRFL.IsNullable = false;
				colvarSOPHDRFL.IsPrimaryKey = false;
				colvarSOPHDRFL.IsForeignKey = false;
				colvarSOPHDRFL.IsReadOnly = false;
				colvarSOPHDRFL.DefaultSetting = @"";
				colvarSOPHDRFL.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSOPHDRFL);

				TableSchema.TableColumn colvarCOMMNTID = new TableSchema.TableColumn(schema);
				colvarCOMMNTID.ColumnName = "COMMNTID";
				colvarCOMMNTID.DataType = DbType.AnsiStringFixedLength;
				colvarCOMMNTID.MaxLength = 15;
				colvarCOMMNTID.AutoIncrement = false;
				colvarCOMMNTID.IsNullable = false;
				colvarCOMMNTID.IsPrimaryKey = false;
				colvarCOMMNTID.IsForeignKey = false;
				colvarCOMMNTID.IsReadOnly = false;
				colvarCOMMNTID.DefaultSetting = @"";
				colvarCOMMNTID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCOMMNTID);

				TableSchema.TableColumn colvarREFRENCE = new TableSchema.TableColumn(schema);
				colvarREFRENCE.ColumnName = "REFRENCE";
				colvarREFRENCE.DataType = DbType.AnsiStringFixedLength;
				colvarREFRENCE.MaxLength = 31;
				colvarREFRENCE.AutoIncrement = false;
				colvarREFRENCE.IsNullable = false;
				colvarREFRENCE.IsPrimaryKey = false;
				colvarREFRENCE.IsForeignKey = false;
				colvarREFRENCE.IsReadOnly = false;
				colvarREFRENCE.DefaultSetting = @"";
				colvarREFRENCE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarREFRENCE);

				TableSchema.TableColumn colvarPOSTEDDT = new TableSchema.TableColumn(schema);
				colvarPOSTEDDT.ColumnName = "POSTEDDT";
				colvarPOSTEDDT.DataType = DbType.DateTime;
				colvarPOSTEDDT.MaxLength = 0;
				colvarPOSTEDDT.AutoIncrement = false;
				colvarPOSTEDDT.IsNullable = false;
				colvarPOSTEDDT.IsPrimaryKey = false;
				colvarPOSTEDDT.IsForeignKey = false;
				colvarPOSTEDDT.IsReadOnly = false;
				colvarPOSTEDDT.DefaultSetting = @"";
				colvarPOSTEDDT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPOSTEDDT);

				TableSchema.TableColumn colvarPTDUSRID = new TableSchema.TableColumn(schema);
				colvarPTDUSRID.ColumnName = "PTDUSRID";
				colvarPTDUSRID.DataType = DbType.AnsiStringFixedLength;
				colvarPTDUSRID.MaxLength = 15;
				colvarPTDUSRID.AutoIncrement = false;
				colvarPTDUSRID.IsNullable = false;
				colvarPTDUSRID.IsPrimaryKey = false;
				colvarPTDUSRID.IsForeignKey = false;
				colvarPTDUSRID.IsReadOnly = false;
				colvarPTDUSRID.DefaultSetting = @"";
				colvarPTDUSRID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPTDUSRID);

				TableSchema.TableColumn colvarUSER2ENT = new TableSchema.TableColumn(schema);
				colvarUSER2ENT.ColumnName = "USER2ENT";
				colvarUSER2ENT.DataType = DbType.AnsiStringFixedLength;
				colvarUSER2ENT.MaxLength = 15;
				colvarUSER2ENT.AutoIncrement = false;
				colvarUSER2ENT.IsNullable = false;
				colvarUSER2ENT.IsPrimaryKey = false;
				colvarUSER2ENT.IsForeignKey = false;
				colvarUSER2ENT.IsReadOnly = false;
				colvarUSER2ENT.DefaultSetting = @"";
				colvarUSER2ENT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUSER2ENT);

				TableSchema.TableColumn colvarCREATDDT = new TableSchema.TableColumn(schema);
				colvarCREATDDT.ColumnName = "CREATDDT";
				colvarCREATDDT.DataType = DbType.DateTime;
				colvarCREATDDT.MaxLength = 0;
				colvarCREATDDT.AutoIncrement = false;
				colvarCREATDDT.IsNullable = false;
				colvarCREATDDT.IsPrimaryKey = false;
				colvarCREATDDT.IsForeignKey = false;
				colvarCREATDDT.IsReadOnly = false;
				colvarCREATDDT.DefaultSetting = @"";
				colvarCREATDDT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCREATDDT);

				TableSchema.TableColumn colvarMODIFDT = new TableSchema.TableColumn(schema);
				colvarMODIFDT.ColumnName = "MODIFDT";
				colvarMODIFDT.DataType = DbType.DateTime;
				colvarMODIFDT.MaxLength = 0;
				colvarMODIFDT.AutoIncrement = false;
				colvarMODIFDT.IsNullable = false;
				colvarMODIFDT.IsPrimaryKey = false;
				colvarMODIFDT.IsForeignKey = false;
				colvarMODIFDT.IsReadOnly = false;
				colvarMODIFDT.DefaultSetting = @"";
				colvarMODIFDT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMODIFDT);

				TableSchema.TableColumn colvarTax_Date = new TableSchema.TableColumn(schema);
				colvarTax_Date.ColumnName = "Tax_Date";
				colvarTax_Date.DataType = DbType.DateTime;
				colvarTax_Date.MaxLength = 0;
				colvarTax_Date.AutoIncrement = false;
				colvarTax_Date.IsNullable = false;
				colvarTax_Date.IsPrimaryKey = false;
				colvarTax_Date.IsForeignKey = false;
				colvarTax_Date.IsReadOnly = false;
				colvarTax_Date.DefaultSetting = @"";
				colvarTax_Date.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTax_Date);

				TableSchema.TableColumn colvarAPLYWITH = new TableSchema.TableColumn(schema);
				colvarAPLYWITH.ColumnName = "APLYWITH";
				colvarAPLYWITH.DataType = DbType.Byte;
				colvarAPLYWITH.MaxLength = 0;
				colvarAPLYWITH.AutoIncrement = false;
				colvarAPLYWITH.IsNullable = false;
				colvarAPLYWITH.IsPrimaryKey = false;
				colvarAPLYWITH.IsForeignKey = false;
				colvarAPLYWITH.IsReadOnly = false;
				colvarAPLYWITH.DefaultSetting = @"";
				colvarAPLYWITH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAPLYWITH);

				TableSchema.TableColumn colvarWITHHAMT = new TableSchema.TableColumn(schema);
				colvarWITHHAMT.ColumnName = "WITHHAMT";
				colvarWITHHAMT.DataType = DbType.Decimal;
				colvarWITHHAMT.MaxLength = 0;
				colvarWITHHAMT.AutoIncrement = false;
				colvarWITHHAMT.IsNullable = false;
				colvarWITHHAMT.IsPrimaryKey = false;
				colvarWITHHAMT.IsForeignKey = false;
				colvarWITHHAMT.IsReadOnly = false;
				colvarWITHHAMT.DefaultSetting = @"";
				colvarWITHHAMT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWITHHAMT);

				TableSchema.TableColumn colvarSHPPGDOC = new TableSchema.TableColumn(schema);
				colvarSHPPGDOC.ColumnName = "SHPPGDOC";
				colvarSHPPGDOC.DataType = DbType.Byte;
				colvarSHPPGDOC.MaxLength = 0;
				colvarSHPPGDOC.AutoIncrement = false;
				colvarSHPPGDOC.IsNullable = false;
				colvarSHPPGDOC.IsPrimaryKey = false;
				colvarSHPPGDOC.IsForeignKey = false;
				colvarSHPPGDOC.IsReadOnly = false;
				colvarSHPPGDOC.DefaultSetting = @"";
				colvarSHPPGDOC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSHPPGDOC);

				TableSchema.TableColumn colvarCORRCTN = new TableSchema.TableColumn(schema);
				colvarCORRCTN.ColumnName = "CORRCTN";
				colvarCORRCTN.DataType = DbType.Byte;
				colvarCORRCTN.MaxLength = 0;
				colvarCORRCTN.AutoIncrement = false;
				colvarCORRCTN.IsNullable = false;
				colvarCORRCTN.IsPrimaryKey = false;
				colvarCORRCTN.IsForeignKey = false;
				colvarCORRCTN.IsReadOnly = false;
				colvarCORRCTN.DefaultSetting = @"";
				colvarCORRCTN.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCORRCTN);

				TableSchema.TableColumn colvarSIMPLIFD = new TableSchema.TableColumn(schema);
				colvarSIMPLIFD.ColumnName = "SIMPLIFD";
				colvarSIMPLIFD.DataType = DbType.Byte;
				colvarSIMPLIFD.MaxLength = 0;
				colvarSIMPLIFD.AutoIncrement = false;
				colvarSIMPLIFD.IsNullable = false;
				colvarSIMPLIFD.IsPrimaryKey = false;
				colvarSIMPLIFD.IsForeignKey = false;
				colvarSIMPLIFD.IsReadOnly = false;
				colvarSIMPLIFD.DefaultSetting = @"";
				colvarSIMPLIFD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSIMPLIFD);

				TableSchema.TableColumn colvarDOCNCORR = new TableSchema.TableColumn(schema);
				colvarDOCNCORR.ColumnName = "DOCNCORR";
				colvarDOCNCORR.DataType = DbType.AnsiStringFixedLength;
				colvarDOCNCORR.MaxLength = 21;
				colvarDOCNCORR.AutoIncrement = false;
				colvarDOCNCORR.IsNullable = false;
				colvarDOCNCORR.IsPrimaryKey = false;
				colvarDOCNCORR.IsForeignKey = false;
				colvarDOCNCORR.IsReadOnly = false;
				colvarDOCNCORR.DefaultSetting = @"";
				colvarDOCNCORR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDOCNCORR);

				TableSchema.TableColumn colvarSEQNCORR = new TableSchema.TableColumn(schema);
				colvarSEQNCORR.ColumnName = "SEQNCORR";
				colvarSEQNCORR.DataType = DbType.Int16;
				colvarSEQNCORR.MaxLength = 0;
				colvarSEQNCORR.AutoIncrement = false;
				colvarSEQNCORR.IsNullable = false;
				colvarSEQNCORR.IsPrimaryKey = false;
				colvarSEQNCORR.IsForeignKey = false;
				colvarSEQNCORR.IsReadOnly = false;
				colvarSEQNCORR.DefaultSetting = @"";
				colvarSEQNCORR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSEQNCORR);

				TableSchema.TableColumn colvarSALEDATE = new TableSchema.TableColumn(schema);
				colvarSALEDATE.ColumnName = "SALEDATE";
				colvarSALEDATE.DataType = DbType.DateTime;
				colvarSALEDATE.MaxLength = 0;
				colvarSALEDATE.AutoIncrement = false;
				colvarSALEDATE.IsNullable = false;
				colvarSALEDATE.IsPrimaryKey = false;
				colvarSALEDATE.IsForeignKey = false;
				colvarSALEDATE.IsReadOnly = false;
				colvarSALEDATE.DefaultSetting = @"";
				colvarSALEDATE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSALEDATE);

				TableSchema.TableColumn colvarEXCEPTIONALDEMAND = new TableSchema.TableColumn(schema);
				colvarEXCEPTIONALDEMAND.ColumnName = "EXCEPTIONALDEMAND";
				colvarEXCEPTIONALDEMAND.DataType = DbType.Byte;
				colvarEXCEPTIONALDEMAND.MaxLength = 0;
				colvarEXCEPTIONALDEMAND.AutoIncrement = false;
				colvarEXCEPTIONALDEMAND.IsNullable = false;
				colvarEXCEPTIONALDEMAND.IsPrimaryKey = false;
				colvarEXCEPTIONALDEMAND.IsForeignKey = false;
				colvarEXCEPTIONALDEMAND.IsReadOnly = false;
				colvarEXCEPTIONALDEMAND.DefaultSetting = @"";
				colvarEXCEPTIONALDEMAND.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEXCEPTIONALDEMAND);

				TableSchema.TableColumn colvarFlags = new TableSchema.TableColumn(schema);
				colvarFlags.ColumnName = "Flags";
				colvarFlags.DataType = DbType.Int16;
				colvarFlags.MaxLength = 0;
				colvarFlags.AutoIncrement = false;
				colvarFlags.IsNullable = false;
				colvarFlags.IsPrimaryKey = false;
				colvarFlags.IsForeignKey = false;
				colvarFlags.IsReadOnly = false;
				colvarFlags.DefaultSetting = @"";
				colvarFlags.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFlags);

				TableSchema.TableColumn colvarSOPSTATUS = new TableSchema.TableColumn(schema);
				colvarSOPSTATUS.ColumnName = "SOPSTATUS";
				colvarSOPSTATUS.DataType = DbType.Int16;
				colvarSOPSTATUS.MaxLength = 0;
				colvarSOPSTATUS.AutoIncrement = false;
				colvarSOPSTATUS.IsNullable = false;
				colvarSOPSTATUS.IsPrimaryKey = false;
				colvarSOPSTATUS.IsForeignKey = false;
				colvarSOPSTATUS.IsReadOnly = false;
				colvarSOPSTATUS.DefaultSetting = @"";
				colvarSOPSTATUS.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSOPSTATUS);

				TableSchema.TableColumn colvarSHIPCOMPLETE = new TableSchema.TableColumn(schema);
				colvarSHIPCOMPLETE.ColumnName = "SHIPCOMPLETE";
				colvarSHIPCOMPLETE.DataType = DbType.Byte;
				colvarSHIPCOMPLETE.MaxLength = 0;
				colvarSHIPCOMPLETE.AutoIncrement = false;
				colvarSHIPCOMPLETE.IsNullable = false;
				colvarSHIPCOMPLETE.IsPrimaryKey = false;
				colvarSHIPCOMPLETE.IsForeignKey = false;
				colvarSHIPCOMPLETE.IsReadOnly = false;
				colvarSHIPCOMPLETE.DefaultSetting = @"";
				colvarSHIPCOMPLETE.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSHIPCOMPLETE);

				TableSchema.TableColumn colvarDIRECTDEBIT = new TableSchema.TableColumn(schema);
				colvarDIRECTDEBIT.ColumnName = "DIRECTDEBIT";
				colvarDIRECTDEBIT.DataType = DbType.Byte;
				colvarDIRECTDEBIT.MaxLength = 0;
				colvarDIRECTDEBIT.AutoIncrement = false;
				colvarDIRECTDEBIT.IsNullable = false;
				colvarDIRECTDEBIT.IsPrimaryKey = false;
				colvarDIRECTDEBIT.IsForeignKey = false;
				colvarDIRECTDEBIT.IsReadOnly = false;
				colvarDIRECTDEBIT.DefaultSetting = @"";
				colvarDIRECTDEBIT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDIRECTDEBIT);

				TableSchema.TableColumn colvarDEX_ROW_ID = new TableSchema.TableColumn(schema);
				colvarDEX_ROW_ID.ColumnName = "DEX_ROW_ID";
				colvarDEX_ROW_ID.DataType = DbType.Int32;
				colvarDEX_ROW_ID.MaxLength = 0;
				colvarDEX_ROW_ID.AutoIncrement = true;
				colvarDEX_ROW_ID.IsNullable = false;
				colvarDEX_ROW_ID.IsPrimaryKey = false;
				colvarDEX_ROW_ID.IsForeignKey = false;
				colvarDEX_ROW_ID.IsReadOnly = false;
				colvarDEX_ROW_ID.DefaultSetting = @"";
				colvarDEX_ROW_ID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEX_ROW_ID);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SOP30200",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SOP30200 LoadFrom(SOP30200 item)
		{
			SOP30200 result = new SOP30200();
			if (item.SOPTYPE != default(short)) {
				result.LoadByKey(item.SOPTYPE);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public short SOPTYPE {
			get { return GetColumnValue<short>(Columns.SOPTYPE); }
			set {
				SetColumnValue(Columns.SOPTYPE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SOPTYPE));
			}
		}
		[DataMember]
		public string SOPNUMBE {
			get { return GetColumnValue<string>(Columns.SOPNUMBE); }
			set {
				SetColumnValue(Columns.SOPNUMBE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SOPNUMBE));
			}
		}
		[DataMember]
		public short ORIGTYPE {
			get { return GetColumnValue<short>(Columns.ORIGTYPE); }
			set {
				SetColumnValue(Columns.ORIGTYPE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORIGTYPE));
			}
		}
		[DataMember]
		public string ORIGNUMB {
			get { return GetColumnValue<string>(Columns.ORIGNUMB); }
			set {
				SetColumnValue(Columns.ORIGNUMB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORIGNUMB));
			}
		}
		[DataMember]
		public string DOCID {
			get { return GetColumnValue<string>(Columns.DOCID); }
			set {
				SetColumnValue(Columns.DOCID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DOCID));
			}
		}
		[DataMember]
		public DateTime DOCDATE {
			get { return GetColumnValue<DateTime>(Columns.DOCDATE); }
			set {
				SetColumnValue(Columns.DOCDATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DOCDATE));
			}
		}
		[DataMember]
		public DateTime GLPOSTDT {
			get { return GetColumnValue<DateTime>(Columns.GLPOSTDT); }
			set {
				SetColumnValue(Columns.GLPOSTDT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.GLPOSTDT));
			}
		}
		[DataMember]
		public DateTime QUOTEDAT {
			get { return GetColumnValue<DateTime>(Columns.QUOTEDAT); }
			set {
				SetColumnValue(Columns.QUOTEDAT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QUOTEDAT));
			}
		}
		[DataMember]
		public DateTime QUOEXPDA {
			get { return GetColumnValue<DateTime>(Columns.QUOEXPDA); }
			set {
				SetColumnValue(Columns.QUOEXPDA, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QUOEXPDA));
			}
		}
		[DataMember]
		public DateTime ORDRDATE {
			get { return GetColumnValue<DateTime>(Columns.ORDRDATE); }
			set {
				SetColumnValue(Columns.ORDRDATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORDRDATE));
			}
		}
		[DataMember]
		public DateTime INVODATE {
			get { return GetColumnValue<DateTime>(Columns.INVODATE); }
			set {
				SetColumnValue(Columns.INVODATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.INVODATE));
			}
		}
		[DataMember]
		public DateTime BACKDATE {
			get { return GetColumnValue<DateTime>(Columns.BACKDATE); }
			set {
				SetColumnValue(Columns.BACKDATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BACKDATE));
			}
		}
		[DataMember]
		public DateTime RETUDATE {
			get { return GetColumnValue<DateTime>(Columns.RETUDATE); }
			set {
				SetColumnValue(Columns.RETUDATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RETUDATE));
			}
		}
		[DataMember]
		public DateTime ReqShipDate {
			get { return GetColumnValue<DateTime>(Columns.ReqShipDate); }
			set {
				SetColumnValue(Columns.ReqShipDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ReqShipDate));
			}
		}
		[DataMember]
		public DateTime FUFILDAT {
			get { return GetColumnValue<DateTime>(Columns.FUFILDAT); }
			set {
				SetColumnValue(Columns.FUFILDAT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FUFILDAT));
			}
		}
		[DataMember]
		public DateTime ACTLSHIP {
			get { return GetColumnValue<DateTime>(Columns.ACTLSHIP); }
			set {
				SetColumnValue(Columns.ACTLSHIP, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ACTLSHIP));
			}
		}
		[DataMember]
		public DateTime DISCDATE {
			get { return GetColumnValue<DateTime>(Columns.DISCDATE); }
			set {
				SetColumnValue(Columns.DISCDATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DISCDATE));
			}
		}
		[DataMember]
		public DateTime DUEDATE {
			get { return GetColumnValue<DateTime>(Columns.DUEDATE); }
			set {
				SetColumnValue(Columns.DUEDATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DUEDATE));
			}
		}
		[DataMember]
		public byte REPTING {
			get { return GetColumnValue<byte>(Columns.REPTING); }
			set {
				SetColumnValue(Columns.REPTING, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.REPTING));
			}
		}
		[DataMember]
		public short TRXFREQU {
			get { return GetColumnValue<short>(Columns.TRXFREQU); }
			set {
				SetColumnValue(Columns.TRXFREQU, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TRXFREQU));
			}
		}
		[DataMember]
		public short TIMEREPD {
			get { return GetColumnValue<short>(Columns.TIMEREPD); }
			set {
				SetColumnValue(Columns.TIMEREPD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TIMEREPD));
			}
		}
		[DataMember]
		public short TIMETREP {
			get { return GetColumnValue<short>(Columns.TIMETREP); }
			set {
				SetColumnValue(Columns.TIMETREP, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TIMETREP));
			}
		}
		[DataMember]
		public short DYSTINCR {
			get { return GetColumnValue<short>(Columns.DYSTINCR); }
			set {
				SetColumnValue(Columns.DYSTINCR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DYSTINCR));
			}
		}
		[DataMember]
		public DateTime DTLSTREP {
			get { return GetColumnValue<DateTime>(Columns.DTLSTREP); }
			set {
				SetColumnValue(Columns.DTLSTREP, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DTLSTREP));
			}
		}
		[DataMember]
		public string DSTBTCH1 {
			get { return GetColumnValue<string>(Columns.DSTBTCH1); }
			set {
				SetColumnValue(Columns.DSTBTCH1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DSTBTCH1));
			}
		}
		[DataMember]
		public string DSTBTCH2 {
			get { return GetColumnValue<string>(Columns.DSTBTCH2); }
			set {
				SetColumnValue(Columns.DSTBTCH2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DSTBTCH2));
			}
		}
		[DataMember]
		public string USDOCID1 {
			get { return GetColumnValue<string>(Columns.USDOCID1); }
			set {
				SetColumnValue(Columns.USDOCID1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.USDOCID1));
			}
		}
		[DataMember]
		public string USDOCID2 {
			get { return GetColumnValue<string>(Columns.USDOCID2); }
			set {
				SetColumnValue(Columns.USDOCID2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.USDOCID2));
			}
		}
		[DataMember]
		public decimal DISCFRGT {
			get { return GetColumnValue<decimal>(Columns.DISCFRGT); }
			set {
				SetColumnValue(Columns.DISCFRGT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DISCFRGT));
			}
		}
		[DataMember]
		public decimal ORDAVFRT {
			get { return GetColumnValue<decimal>(Columns.ORDAVFRT); }
			set {
				SetColumnValue(Columns.ORDAVFRT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORDAVFRT));
			}
		}
		[DataMember]
		public decimal DISCMISC {
			get { return GetColumnValue<decimal>(Columns.DISCMISC); }
			set {
				SetColumnValue(Columns.DISCMISC, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DISCMISC));
			}
		}
		[DataMember]
		public decimal ORDAVMSC {
			get { return GetColumnValue<decimal>(Columns.ORDAVMSC); }
			set {
				SetColumnValue(Columns.ORDAVMSC, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORDAVMSC));
			}
		}
		[DataMember]
		public decimal DISAVAMT {
			get { return GetColumnValue<decimal>(Columns.DISAVAMT); }
			set {
				SetColumnValue(Columns.DISAVAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DISAVAMT));
			}
		}
		[DataMember]
		public decimal ORDAVAMT {
			get { return GetColumnValue<decimal>(Columns.ORDAVAMT); }
			set {
				SetColumnValue(Columns.ORDAVAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORDAVAMT));
			}
		}
		[DataMember]
		public decimal DISCRTND {
			get { return GetColumnValue<decimal>(Columns.DISCRTND); }
			set {
				SetColumnValue(Columns.DISCRTND, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DISCRTND));
			}
		}
		[DataMember]
		public decimal ORDISRTD {
			get { return GetColumnValue<decimal>(Columns.ORDISRTD); }
			set {
				SetColumnValue(Columns.ORDISRTD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORDISRTD));
			}
		}
		[DataMember]
		public decimal DISTKNAM {
			get { return GetColumnValue<decimal>(Columns.DISTKNAM); }
			set {
				SetColumnValue(Columns.DISTKNAM, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DISTKNAM));
			}
		}
		[DataMember]
		public decimal ORDISTKN {
			get { return GetColumnValue<decimal>(Columns.ORDISTKN); }
			set {
				SetColumnValue(Columns.ORDISTKN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORDISTKN));
			}
		}
		[DataMember]
		public short DSCPCTAM {
			get { return GetColumnValue<short>(Columns.DSCPCTAM); }
			set {
				SetColumnValue(Columns.DSCPCTAM, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DSCPCTAM));
			}
		}
		[DataMember]
		public decimal DSCDLRAM {
			get { return GetColumnValue<decimal>(Columns.DSCDLRAM); }
			set {
				SetColumnValue(Columns.DSCDLRAM, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DSCDLRAM));
			}
		}
		[DataMember]
		public decimal ORDDLRAT {
			get { return GetColumnValue<decimal>(Columns.ORDDLRAT); }
			set {
				SetColumnValue(Columns.ORDDLRAT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORDDLRAT));
			}
		}
		[DataMember]
		public decimal DISAVTKN {
			get { return GetColumnValue<decimal>(Columns.DISAVTKN); }
			set {
				SetColumnValue(Columns.DISAVTKN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DISAVTKN));
			}
		}
		[DataMember]
		public decimal ORDATKN {
			get { return GetColumnValue<decimal>(Columns.ORDATKN); }
			set {
				SetColumnValue(Columns.ORDATKN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORDATKN));
			}
		}
		[DataMember]
		public string PYMTRMID {
			get { return GetColumnValue<string>(Columns.PYMTRMID); }
			set {
				SetColumnValue(Columns.PYMTRMID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PYMTRMID));
			}
		}
		[DataMember]
		public string PRCLEVEL {
			get { return GetColumnValue<string>(Columns.PRCLEVEL); }
			set {
				SetColumnValue(Columns.PRCLEVEL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PRCLEVEL));
			}
		}
		[DataMember]
		public string LOCNCODE {
			get { return GetColumnValue<string>(Columns.LOCNCODE); }
			set {
				SetColumnValue(Columns.LOCNCODE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.LOCNCODE));
			}
		}
		[DataMember]
		public string BCHSOURC {
			get { return GetColumnValue<string>(Columns.BCHSOURC); }
			set {
				SetColumnValue(Columns.BCHSOURC, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BCHSOURC));
			}
		}
		[DataMember]
		public string BACHNUMB {
			get { return GetColumnValue<string>(Columns.BACHNUMB); }
			set {
				SetColumnValue(Columns.BACHNUMB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BACHNUMB));
			}
		}
		[DataMember]
		public string CUSTNMBR {
			get { return GetColumnValue<string>(Columns.CUSTNMBR); }
			set {
				SetColumnValue(Columns.CUSTNMBR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CUSTNMBR));
			}
		}
		[DataMember]
		public string CUSTNAME {
			get { return GetColumnValue<string>(Columns.CUSTNAME); }
			set {
				SetColumnValue(Columns.CUSTNAME, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CUSTNAME));
			}
		}
		[DataMember]
		public string CSTPONBR {
			get { return GetColumnValue<string>(Columns.CSTPONBR); }
			set {
				SetColumnValue(Columns.CSTPONBR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CSTPONBR));
			}
		}
		[DataMember]
		public short PROSPECT {
			get { return GetColumnValue<short>(Columns.PROSPECT); }
			set {
				SetColumnValue(Columns.PROSPECT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PROSPECT));
			}
		}
		[DataMember]
		public int MSTRNUMB {
			get { return GetColumnValue<int>(Columns.MSTRNUMB); }
			set {
				SetColumnValue(Columns.MSTRNUMB, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MSTRNUMB));
			}
		}
		[DataMember]
		public string PCKSLPNO {
			get { return GetColumnValue<string>(Columns.PCKSLPNO); }
			set {
				SetColumnValue(Columns.PCKSLPNO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PCKSLPNO));
			}
		}
		[DataMember]
		public string PICTICNU {
			get { return GetColumnValue<string>(Columns.PICTICNU); }
			set {
				SetColumnValue(Columns.PICTICNU, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PICTICNU));
			}
		}
		[DataMember]
		public decimal MRKDNAMT {
			get { return GetColumnValue<decimal>(Columns.MRKDNAMT); }
			set {
				SetColumnValue(Columns.MRKDNAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MRKDNAMT));
			}
		}
		[DataMember]
		public decimal ORMRKDAM {
			get { return GetColumnValue<decimal>(Columns.ORMRKDAM); }
			set {
				SetColumnValue(Columns.ORMRKDAM, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORMRKDAM));
			}
		}
		[DataMember]
		public string PRBTADCD {
			get { return GetColumnValue<string>(Columns.PRBTADCD); }
			set {
				SetColumnValue(Columns.PRBTADCD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PRBTADCD));
			}
		}
		[DataMember]
		public string PRSTADCD {
			get { return GetColumnValue<string>(Columns.PRSTADCD); }
			set {
				SetColumnValue(Columns.PRSTADCD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PRSTADCD));
			}
		}
		[DataMember]
		public string CNTCPRSN {
			get { return GetColumnValue<string>(Columns.CNTCPRSN); }
			set {
				SetColumnValue(Columns.CNTCPRSN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CNTCPRSN));
			}
		}
		[DataMember]
		public string ShipToName {
			get { return GetColumnValue<string>(Columns.ShipToName); }
			set {
				SetColumnValue(Columns.ShipToName, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ShipToName));
			}
		}
		[DataMember]
		public string ADDRESS1 {
			get { return GetColumnValue<string>(Columns.ADDRESS1); }
			set {
				SetColumnValue(Columns.ADDRESS1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ADDRESS1));
			}
		}
		[DataMember]
		public string ADDRESS2 {
			get { return GetColumnValue<string>(Columns.ADDRESS2); }
			set {
				SetColumnValue(Columns.ADDRESS2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ADDRESS2));
			}
		}
		[DataMember]
		public string ADDRESS3 {
			get { return GetColumnValue<string>(Columns.ADDRESS3); }
			set {
				SetColumnValue(Columns.ADDRESS3, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ADDRESS3));
			}
		}
		[DataMember]
		public string CITY {
			get { return GetColumnValue<string>(Columns.CITY); }
			set {
				SetColumnValue(Columns.CITY, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CITY));
			}
		}
		[DataMember]
		public string STATE {
			get { return GetColumnValue<string>(Columns.STATE); }
			set {
				SetColumnValue(Columns.STATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.STATE));
			}
		}
		[DataMember]
		public string ZIPCODE {
			get { return GetColumnValue<string>(Columns.ZIPCODE); }
			set {
				SetColumnValue(Columns.ZIPCODE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ZIPCODE));
			}
		}
		[DataMember]
		public string CCode {
			get { return GetColumnValue<string>(Columns.CCode); }
			set {
				SetColumnValue(Columns.CCode, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CCode));
			}
		}
		[DataMember]
		public string COUNTRY {
			get { return GetColumnValue<string>(Columns.COUNTRY); }
			set {
				SetColumnValue(Columns.COUNTRY, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.COUNTRY));
			}
		}
		[DataMember]
		public string PHNUMBR1 {
			get { return GetColumnValue<string>(Columns.PHNUMBR1); }
			set {
				SetColumnValue(Columns.PHNUMBR1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PHNUMBR1));
			}
		}
		[DataMember]
		public string PHNUMBR2 {
			get { return GetColumnValue<string>(Columns.PHNUMBR2); }
			set {
				SetColumnValue(Columns.PHNUMBR2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PHNUMBR2));
			}
		}
		[DataMember]
		public string PHONE3 {
			get { return GetColumnValue<string>(Columns.PHONE3); }
			set {
				SetColumnValue(Columns.PHONE3, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PHONE3));
			}
		}
		[DataMember]
		public string FAXNUMBR {
			get { return GetColumnValue<string>(Columns.FAXNUMBR); }
			set {
				SetColumnValue(Columns.FAXNUMBR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FAXNUMBR));
			}
		}
		[DataMember]
		public short COMAPPTO {
			get { return GetColumnValue<short>(Columns.COMAPPTO); }
			set {
				SetColumnValue(Columns.COMAPPTO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.COMAPPTO));
			}
		}
		[DataMember]
		public decimal COMMAMNT {
			get { return GetColumnValue<decimal>(Columns.COMMAMNT); }
			set {
				SetColumnValue(Columns.COMMAMNT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.COMMAMNT));
			}
		}
		[DataMember]
		public decimal OCOMMAMT {
			get { return GetColumnValue<decimal>(Columns.OCOMMAMT); }
			set {
				SetColumnValue(Columns.OCOMMAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OCOMMAMT));
			}
		}
		[DataMember]
		public decimal CMMSLAMT {
			get { return GetColumnValue<decimal>(Columns.CMMSLAMT); }
			set {
				SetColumnValue(Columns.CMMSLAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CMMSLAMT));
			}
		}
		[DataMember]
		public decimal ORCOSAMT {
			get { return GetColumnValue<decimal>(Columns.ORCOSAMT); }
			set {
				SetColumnValue(Columns.ORCOSAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORCOSAMT));
			}
		}
		[DataMember]
		public decimal NCOMAMNT {
			get { return GetColumnValue<decimal>(Columns.NCOMAMNT); }
			set {
				SetColumnValue(Columns.NCOMAMNT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NCOMAMNT));
			}
		}
		[DataMember]
		public decimal ORNCMAMT {
			get { return GetColumnValue<decimal>(Columns.ORNCMAMT); }
			set {
				SetColumnValue(Columns.ORNCMAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORNCMAMT));
			}
		}
		[DataMember]
		public string SHIPMTHD {
			get { return GetColumnValue<string>(Columns.SHIPMTHD); }
			set {
				SetColumnValue(Columns.SHIPMTHD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SHIPMTHD));
			}
		}
		[DataMember]
		public decimal TRDISAMT {
			get { return GetColumnValue<decimal>(Columns.TRDISAMT); }
			set {
				SetColumnValue(Columns.TRDISAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TRDISAMT));
			}
		}
		[DataMember]
		public decimal ORTDISAM {
			get { return GetColumnValue<decimal>(Columns.ORTDISAM); }
			set {
				SetColumnValue(Columns.ORTDISAM, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORTDISAM));
			}
		}
		[DataMember]
		public short TRDISPCT {
			get { return GetColumnValue<short>(Columns.TRDISPCT); }
			set {
				SetColumnValue(Columns.TRDISPCT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TRDISPCT));
			}
		}
		[DataMember]
		public decimal SUBTOTAL {
			get { return GetColumnValue<decimal>(Columns.SUBTOTAL); }
			set {
				SetColumnValue(Columns.SUBTOTAL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SUBTOTAL));
			}
		}
		[DataMember]
		public decimal ORSUBTOT {
			get { return GetColumnValue<decimal>(Columns.ORSUBTOT); }
			set {
				SetColumnValue(Columns.ORSUBTOT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORSUBTOT));
			}
		}
		[DataMember]
		public decimal REMSUBTO {
			get { return GetColumnValue<decimal>(Columns.REMSUBTO); }
			set {
				SetColumnValue(Columns.REMSUBTO, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.REMSUBTO));
			}
		}
		[DataMember]
		public decimal OREMSUBT {
			get { return GetColumnValue<decimal>(Columns.OREMSUBT); }
			set {
				SetColumnValue(Columns.OREMSUBT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OREMSUBT));
			}
		}
		[DataMember]
		public decimal EXTDCOST {
			get { return GetColumnValue<decimal>(Columns.EXTDCOST); }
			set {
				SetColumnValue(Columns.EXTDCOST, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EXTDCOST));
			}
		}
		[DataMember]
		public decimal OREXTCST {
			get { return GetColumnValue<decimal>(Columns.OREXTCST); }
			set {
				SetColumnValue(Columns.OREXTCST, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OREXTCST));
			}
		}
		[DataMember]
		public decimal FRTAMNT {
			get { return GetColumnValue<decimal>(Columns.FRTAMNT); }
			set {
				SetColumnValue(Columns.FRTAMNT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FRTAMNT));
			}
		}
		[DataMember]
		public decimal ORFRTAMT {
			get { return GetColumnValue<decimal>(Columns.ORFRTAMT); }
			set {
				SetColumnValue(Columns.ORFRTAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORFRTAMT));
			}
		}
		[DataMember]
		public decimal MISCAMNT {
			get { return GetColumnValue<decimal>(Columns.MISCAMNT); }
			set {
				SetColumnValue(Columns.MISCAMNT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MISCAMNT));
			}
		}
		[DataMember]
		public decimal ORMISCAMT {
			get { return GetColumnValue<decimal>(Columns.ORMISCAMT); }
			set {
				SetColumnValue(Columns.ORMISCAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORMISCAMT));
			}
		}
		[DataMember]
		public byte TXENGCLD {
			get { return GetColumnValue<byte>(Columns.TXENGCLD); }
			set {
				SetColumnValue(Columns.TXENGCLD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TXENGCLD));
			}
		}
		[DataMember]
		public string TAXEXMT1 {
			get { return GetColumnValue<string>(Columns.TAXEXMT1); }
			set {
				SetColumnValue(Columns.TAXEXMT1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TAXEXMT1));
			}
		}
		[DataMember]
		public string TAXEXMT2 {
			get { return GetColumnValue<string>(Columns.TAXEXMT2); }
			set {
				SetColumnValue(Columns.TAXEXMT2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TAXEXMT2));
			}
		}
		[DataMember]
		public string TXRGNNUM {
			get { return GetColumnValue<string>(Columns.TXRGNNUM); }
			set {
				SetColumnValue(Columns.TXRGNNUM, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TXRGNNUM));
			}
		}
		[DataMember]
		public string TAXSCHID {
			get { return GetColumnValue<string>(Columns.TAXSCHID); }
			set {
				SetColumnValue(Columns.TAXSCHID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TAXSCHID));
			}
		}
		[DataMember]
		public short TXSCHSRC {
			get { return GetColumnValue<short>(Columns.TXSCHSRC); }
			set {
				SetColumnValue(Columns.TXSCHSRC, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TXSCHSRC));
			}
		}
		[DataMember]
		public byte BSIVCTTL {
			get { return GetColumnValue<byte>(Columns.BSIVCTTL); }
			set {
				SetColumnValue(Columns.BSIVCTTL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BSIVCTTL));
			}
		}
		[DataMember]
		public string FRTSCHID {
			get { return GetColumnValue<string>(Columns.FRTSCHID); }
			set {
				SetColumnValue(Columns.FRTSCHID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FRTSCHID));
			}
		}
		[DataMember]
		public decimal FRTTXAMT {
			get { return GetColumnValue<decimal>(Columns.FRTTXAMT); }
			set {
				SetColumnValue(Columns.FRTTXAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FRTTXAMT));
			}
		}
		[DataMember]
		public decimal ORFRTTAX {
			get { return GetColumnValue<decimal>(Columns.ORFRTTAX); }
			set {
				SetColumnValue(Columns.ORFRTTAX, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORFRTTAX));
			}
		}
		[DataMember]
		public short FRGTTXBL {
			get { return GetColumnValue<short>(Columns.FRGTTXBL); }
			set {
				SetColumnValue(Columns.FRGTTXBL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.FRGTTXBL));
			}
		}
		[DataMember]
		public string MSCSCHID {
			get { return GetColumnValue<string>(Columns.MSCSCHID); }
			set {
				SetColumnValue(Columns.MSCSCHID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MSCSCHID));
			}
		}
		[DataMember]
		public decimal MSCTXAMT {
			get { return GetColumnValue<decimal>(Columns.MSCTXAMT); }
			set {
				SetColumnValue(Columns.MSCTXAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MSCTXAMT));
			}
		}
		[DataMember]
		public decimal ORMSCTAX {
			get { return GetColumnValue<decimal>(Columns.ORMSCTAX); }
			set {
				SetColumnValue(Columns.ORMSCTAX, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORMSCTAX));
			}
		}
		[DataMember]
		public short MISCTXBL {
			get { return GetColumnValue<short>(Columns.MISCTXBL); }
			set {
				SetColumnValue(Columns.MISCTXBL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MISCTXBL));
			}
		}
		[DataMember]
		public decimal BKTFRTAM {
			get { return GetColumnValue<decimal>(Columns.BKTFRTAM); }
			set {
				SetColumnValue(Columns.BKTFRTAM, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BKTFRTAM));
			}
		}
		[DataMember]
		public decimal ORBKTFRT {
			get { return GetColumnValue<decimal>(Columns.ORBKTFRT); }
			set {
				SetColumnValue(Columns.ORBKTFRT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORBKTFRT));
			}
		}
		[DataMember]
		public decimal BKTMSCAM {
			get { return GetColumnValue<decimal>(Columns.BKTMSCAM); }
			set {
				SetColumnValue(Columns.BKTMSCAM, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BKTMSCAM));
			}
		}
		[DataMember]
		public decimal ORBKTMSC {
			get { return GetColumnValue<decimal>(Columns.ORBKTMSC); }
			set {
				SetColumnValue(Columns.ORBKTMSC, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORBKTMSC));
			}
		}
		[DataMember]
		public decimal BCKTXAMT {
			get { return GetColumnValue<decimal>(Columns.BCKTXAMT); }
			set {
				SetColumnValue(Columns.BCKTXAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.BCKTXAMT));
			}
		}
		[DataMember]
		public decimal OBTAXAMT {
			get { return GetColumnValue<decimal>(Columns.OBTAXAMT); }
			set {
				SetColumnValue(Columns.OBTAXAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OBTAXAMT));
			}
		}
		[DataMember]
		public decimal TXBTXAMT {
			get { return GetColumnValue<decimal>(Columns.TXBTXAMT); }
			set {
				SetColumnValue(Columns.TXBTXAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TXBTXAMT));
			}
		}
		[DataMember]
		public decimal OTAXTAMT {
			get { return GetColumnValue<decimal>(Columns.OTAXTAMT); }
			set {
				SetColumnValue(Columns.OTAXTAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.OTAXTAMT));
			}
		}
		[DataMember]
		public decimal TAXAMNT {
			get { return GetColumnValue<decimal>(Columns.TAXAMNT); }
			set {
				SetColumnValue(Columns.TAXAMNT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TAXAMNT));
			}
		}
		[DataMember]
		public decimal ORTAXAMT {
			get { return GetColumnValue<decimal>(Columns.ORTAXAMT); }
			set {
				SetColumnValue(Columns.ORTAXAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORTAXAMT));
			}
		}
		[DataMember]
		public byte ECTRX {
			get { return GetColumnValue<byte>(Columns.ECTRX); }
			set {
				SetColumnValue(Columns.ECTRX, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ECTRX));
			}
		}
		[DataMember]
		public decimal DOCAMNT {
			get { return GetColumnValue<decimal>(Columns.DOCAMNT); }
			set {
				SetColumnValue(Columns.DOCAMNT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DOCAMNT));
			}
		}
		[DataMember]
		public decimal ORDOCAMT {
			get { return GetColumnValue<decimal>(Columns.ORDOCAMT); }
			set {
				SetColumnValue(Columns.ORDOCAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORDOCAMT));
			}
		}
		[DataMember]
		public decimal PYMTRCVD {
			get { return GetColumnValue<decimal>(Columns.PYMTRCVD); }
			set {
				SetColumnValue(Columns.PYMTRCVD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PYMTRCVD));
			}
		}
		[DataMember]
		public decimal ORPMTRVD {
			get { return GetColumnValue<decimal>(Columns.ORPMTRVD); }
			set {
				SetColumnValue(Columns.ORPMTRVD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORPMTRVD));
			}
		}
		[DataMember]
		public decimal DEPRECVD {
			get { return GetColumnValue<decimal>(Columns.DEPRECVD); }
			set {
				SetColumnValue(Columns.DEPRECVD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEPRECVD));
			}
		}
		[DataMember]
		public decimal ORDEPRVD {
			get { return GetColumnValue<decimal>(Columns.ORDEPRVD); }
			set {
				SetColumnValue(Columns.ORDEPRVD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORDEPRVD));
			}
		}
		[DataMember]
		public decimal CODAMNT {
			get { return GetColumnValue<decimal>(Columns.CODAMNT); }
			set {
				SetColumnValue(Columns.CODAMNT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CODAMNT));
			}
		}
		[DataMember]
		public decimal ORCODAMT {
			get { return GetColumnValue<decimal>(Columns.ORCODAMT); }
			set {
				SetColumnValue(Columns.ORCODAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORCODAMT));
			}
		}
		[DataMember]
		public decimal ACCTAMNT {
			get { return GetColumnValue<decimal>(Columns.ACCTAMNT); }
			set {
				SetColumnValue(Columns.ACCTAMNT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ACCTAMNT));
			}
		}
		[DataMember]
		public decimal ORACTAMT {
			get { return GetColumnValue<decimal>(Columns.ORACTAMT); }
			set {
				SetColumnValue(Columns.ORACTAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ORACTAMT));
			}
		}
		[DataMember]
		public string SALSTERR {
			get { return GetColumnValue<string>(Columns.SALSTERR); }
			set {
				SetColumnValue(Columns.SALSTERR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SALSTERR));
			}
		}
		[DataMember]
		public string SLPRSNID {
			get { return GetColumnValue<string>(Columns.SLPRSNID); }
			set {
				SetColumnValue(Columns.SLPRSNID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SLPRSNID));
			}
		}
		[DataMember]
		public string UPSZONE {
			get { return GetColumnValue<string>(Columns.UPSZONE); }
			set {
				SetColumnValue(Columns.UPSZONE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.UPSZONE));
			}
		}
		[DataMember]
		public short TIMESPRT {
			get { return GetColumnValue<short>(Columns.TIMESPRT); }
			set {
				SetColumnValue(Columns.TIMESPRT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TIMESPRT));
			}
		}
		[DataMember]
		public short PSTGSTUS {
			get { return GetColumnValue<short>(Columns.PSTGSTUS); }
			set {
				SetColumnValue(Columns.PSTGSTUS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PSTGSTUS));
			}
		}
		[DataMember]
		public short VOIDSTTS {
			get { return GetColumnValue<short>(Columns.VOIDSTTS); }
			set {
				SetColumnValue(Columns.VOIDSTTS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.VOIDSTTS));
			}
		}
		[DataMember]
		public short ALLOCABY {
			get { return GetColumnValue<short>(Columns.ALLOCABY); }
			set {
				SetColumnValue(Columns.ALLOCABY, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.ALLOCABY));
			}
		}
		[DataMember]
		public decimal NOTEINDX {
			get { return GetColumnValue<decimal>(Columns.NOTEINDX); }
			set {
				SetColumnValue(Columns.NOTEINDX, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.NOTEINDX));
			}
		}
		[DataMember]
		public string CURNCYID {
			get { return GetColumnValue<string>(Columns.CURNCYID); }
			set {
				SetColumnValue(Columns.CURNCYID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CURNCYID));
			}
		}
		[DataMember]
		public short CURRNIDX {
			get { return GetColumnValue<short>(Columns.CURRNIDX); }
			set {
				SetColumnValue(Columns.CURRNIDX, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CURRNIDX));
			}
		}
		[DataMember]
		public string RATETPID {
			get { return GetColumnValue<string>(Columns.RATETPID); }
			set {
				SetColumnValue(Columns.RATETPID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RATETPID));
			}
		}
		[DataMember]
		public string EXGTBLID {
			get { return GetColumnValue<string>(Columns.EXGTBLID); }
			set {
				SetColumnValue(Columns.EXGTBLID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EXGTBLID));
			}
		}
		[DataMember]
		public decimal XCHGRATE {
			get { return GetColumnValue<decimal>(Columns.XCHGRATE); }
			set {
				SetColumnValue(Columns.XCHGRATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.XCHGRATE));
			}
		}
		[DataMember]
		public decimal DENXRATE {
			get { return GetColumnValue<decimal>(Columns.DENXRATE); }
			set {
				SetColumnValue(Columns.DENXRATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DENXRATE));
			}
		}
		[DataMember]
		public DateTime EXCHDATE {
			get { return GetColumnValue<DateTime>(Columns.EXCHDATE); }
			set {
				SetColumnValue(Columns.EXCHDATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EXCHDATE));
			}
		}
		[DataMember]
		public DateTime TIME1 {
			get { return GetColumnValue<DateTime>(Columns.TIME1); }
			set {
				SetColumnValue(Columns.TIME1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TIME1));
			}
		}
		[DataMember]
		public short RTCLCMTD {
			get { return GetColumnValue<short>(Columns.RTCLCMTD); }
			set {
				SetColumnValue(Columns.RTCLCMTD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RTCLCMTD));
			}
		}
		[DataMember]
		public short MCTRXSTT {
			get { return GetColumnValue<short>(Columns.MCTRXSTT); }
			set {
				SetColumnValue(Columns.MCTRXSTT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MCTRXSTT));
			}
		}
		[DataMember]
		public string TRXSORCE {
			get { return GetColumnValue<string>(Columns.TRXSORCE); }
			set {
				SetColumnValue(Columns.TRXSORCE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.TRXSORCE));
			}
		}
		[DataMember]
		public byte[] SOPHDRE1 {
			get { return GetColumnValue<byte[]>(Columns.SOPHDRE1); }
			set {
				SetColumnValue(Columns.SOPHDRE1, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SOPHDRE1));
			}
		}
		[DataMember]
		public byte[] SOPHDRE2 {
			get { return GetColumnValue<byte[]>(Columns.SOPHDRE2); }
			set {
				SetColumnValue(Columns.SOPHDRE2, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SOPHDRE2));
			}
		}
		[DataMember]
		public byte[] SOPLNERR {
			get { return GetColumnValue<byte[]>(Columns.SOPLNERR); }
			set {
				SetColumnValue(Columns.SOPLNERR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SOPLNERR));
			}
		}
		[DataMember]
		public byte[] SOPHDRFL {
			get { return GetColumnValue<byte[]>(Columns.SOPHDRFL); }
			set {
				SetColumnValue(Columns.SOPHDRFL, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SOPHDRFL));
			}
		}
		[DataMember]
		public string COMMNTID {
			get { return GetColumnValue<string>(Columns.COMMNTID); }
			set {
				SetColumnValue(Columns.COMMNTID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.COMMNTID));
			}
		}
		[DataMember]
		public string REFRENCE {
			get { return GetColumnValue<string>(Columns.REFRENCE); }
			set {
				SetColumnValue(Columns.REFRENCE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.REFRENCE));
			}
		}
		[DataMember]
		public DateTime POSTEDDT {
			get { return GetColumnValue<DateTime>(Columns.POSTEDDT); }
			set {
				SetColumnValue(Columns.POSTEDDT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.POSTEDDT));
			}
		}
		[DataMember]
		public string PTDUSRID {
			get { return GetColumnValue<string>(Columns.PTDUSRID); }
			set {
				SetColumnValue(Columns.PTDUSRID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.PTDUSRID));
			}
		}
		[DataMember]
		public string USER2ENT {
			get { return GetColumnValue<string>(Columns.USER2ENT); }
			set {
				SetColumnValue(Columns.USER2ENT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.USER2ENT));
			}
		}
		[DataMember]
		public DateTime CREATDDT {
			get { return GetColumnValue<DateTime>(Columns.CREATDDT); }
			set {
				SetColumnValue(Columns.CREATDDT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CREATDDT));
			}
		}
		[DataMember]
		public DateTime MODIFDT {
			get { return GetColumnValue<DateTime>(Columns.MODIFDT); }
			set {
				SetColumnValue(Columns.MODIFDT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.MODIFDT));
			}
		}
		[DataMember]
		public DateTime Tax_Date {
			get { return GetColumnValue<DateTime>(Columns.Tax_Date); }
			set {
				SetColumnValue(Columns.Tax_Date, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Tax_Date));
			}
		}
		[DataMember]
		public byte APLYWITH {
			get { return GetColumnValue<byte>(Columns.APLYWITH); }
			set {
				SetColumnValue(Columns.APLYWITH, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.APLYWITH));
			}
		}
		[DataMember]
		public decimal WITHHAMT {
			get { return GetColumnValue<decimal>(Columns.WITHHAMT); }
			set {
				SetColumnValue(Columns.WITHHAMT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.WITHHAMT));
			}
		}
		[DataMember]
		public byte SHPPGDOC {
			get { return GetColumnValue<byte>(Columns.SHPPGDOC); }
			set {
				SetColumnValue(Columns.SHPPGDOC, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SHPPGDOC));
			}
		}
		[DataMember]
		public byte CORRCTN {
			get { return GetColumnValue<byte>(Columns.CORRCTN); }
			set {
				SetColumnValue(Columns.CORRCTN, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CORRCTN));
			}
		}
		[DataMember]
		public byte SIMPLIFD {
			get { return GetColumnValue<byte>(Columns.SIMPLIFD); }
			set {
				SetColumnValue(Columns.SIMPLIFD, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SIMPLIFD));
			}
		}
		[DataMember]
		public string DOCNCORR {
			get { return GetColumnValue<string>(Columns.DOCNCORR); }
			set {
				SetColumnValue(Columns.DOCNCORR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DOCNCORR));
			}
		}
		[DataMember]
		public short SEQNCORR {
			get { return GetColumnValue<short>(Columns.SEQNCORR); }
			set {
				SetColumnValue(Columns.SEQNCORR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SEQNCORR));
			}
		}
		[DataMember]
		public DateTime SALEDATE {
			get { return GetColumnValue<DateTime>(Columns.SALEDATE); }
			set {
				SetColumnValue(Columns.SALEDATE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SALEDATE));
			}
		}
		[DataMember]
		public byte EXCEPTIONALDEMAND {
			get { return GetColumnValue<byte>(Columns.EXCEPTIONALDEMAND); }
			set {
				SetColumnValue(Columns.EXCEPTIONALDEMAND, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.EXCEPTIONALDEMAND));
			}
		}
		[DataMember]
		public short Flags {
			get { return GetColumnValue<short>(Columns.Flags); }
			set {
				SetColumnValue(Columns.Flags, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Flags));
			}
		}
		[DataMember]
		public short SOPSTATUS {
			get { return GetColumnValue<short>(Columns.SOPSTATUS); }
			set {
				SetColumnValue(Columns.SOPSTATUS, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SOPSTATUS));
			}
		}
		[DataMember]
		public byte SHIPCOMPLETE {
			get { return GetColumnValue<byte>(Columns.SHIPCOMPLETE); }
			set {
				SetColumnValue(Columns.SHIPCOMPLETE, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SHIPCOMPLETE));
			}
		}
		[DataMember]
		public byte DIRECTDEBIT {
			get { return GetColumnValue<byte>(Columns.DIRECTDEBIT); }
			set {
				SetColumnValue(Columns.DIRECTDEBIT, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DIRECTDEBIT));
			}
		}
		[DataMember]
		public int DEX_ROW_ID {
			get { return GetColumnValue<int>(Columns.DEX_ROW_ID); }
			set {
				SetColumnValue(Columns.DEX_ROW_ID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.DEX_ROW_ID));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return SOPNUMBE;
		}

		#region Typed Columns

		public static TableSchema.TableColumn SOPTYPEColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn SOPNUMBEColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn ORIGTYPEColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn ORIGNUMBColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn DOCIDColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn DOCDATEColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn GLPOSTDTColumn
		{
			get { return Schema.Columns[6]; }
		}
		public static TableSchema.TableColumn QUOTEDATColumn
		{
			get { return Schema.Columns[7]; }
		}
		public static TableSchema.TableColumn QUOEXPDAColumn
		{
			get { return Schema.Columns[8]; }
		}
		public static TableSchema.TableColumn ORDRDATEColumn
		{
			get { return Schema.Columns[9]; }
		}
		public static TableSchema.TableColumn INVODATEColumn
		{
			get { return Schema.Columns[10]; }
		}
		public static TableSchema.TableColumn BACKDATEColumn
		{
			get { return Schema.Columns[11]; }
		}
		public static TableSchema.TableColumn RETUDATEColumn
		{
			get { return Schema.Columns[12]; }
		}
		public static TableSchema.TableColumn ReqShipDateColumn
		{
			get { return Schema.Columns[13]; }
		}
		public static TableSchema.TableColumn FUFILDATColumn
		{
			get { return Schema.Columns[14]; }
		}
		public static TableSchema.TableColumn ACTLSHIPColumn
		{
			get { return Schema.Columns[15]; }
		}
		public static TableSchema.TableColumn DISCDATEColumn
		{
			get { return Schema.Columns[16]; }
		}
		public static TableSchema.TableColumn DUEDATEColumn
		{
			get { return Schema.Columns[17]; }
		}
		public static TableSchema.TableColumn REPTINGColumn
		{
			get { return Schema.Columns[18]; }
		}
		public static TableSchema.TableColumn TRXFREQUColumn
		{
			get { return Schema.Columns[19]; }
		}
		public static TableSchema.TableColumn TIMEREPDColumn
		{
			get { return Schema.Columns[20]; }
		}
		public static TableSchema.TableColumn TIMETREPColumn
		{
			get { return Schema.Columns[21]; }
		}
		public static TableSchema.TableColumn DYSTINCRColumn
		{
			get { return Schema.Columns[22]; }
		}
		public static TableSchema.TableColumn DTLSTREPColumn
		{
			get { return Schema.Columns[23]; }
		}
		public static TableSchema.TableColumn DSTBTCH1Column
		{
			get { return Schema.Columns[24]; }
		}
		public static TableSchema.TableColumn DSTBTCH2Column
		{
			get { return Schema.Columns[25]; }
		}
		public static TableSchema.TableColumn USDOCID1Column
		{
			get { return Schema.Columns[26]; }
		}
		public static TableSchema.TableColumn USDOCID2Column
		{
			get { return Schema.Columns[27]; }
		}
		public static TableSchema.TableColumn DISCFRGTColumn
		{
			get { return Schema.Columns[28]; }
		}
		public static TableSchema.TableColumn ORDAVFRTColumn
		{
			get { return Schema.Columns[29]; }
		}
		public static TableSchema.TableColumn DISCMISCColumn
		{
			get { return Schema.Columns[30]; }
		}
		public static TableSchema.TableColumn ORDAVMSCColumn
		{
			get { return Schema.Columns[31]; }
		}
		public static TableSchema.TableColumn DISAVAMTColumn
		{
			get { return Schema.Columns[32]; }
		}
		public static TableSchema.TableColumn ORDAVAMTColumn
		{
			get { return Schema.Columns[33]; }
		}
		public static TableSchema.TableColumn DISCRTNDColumn
		{
			get { return Schema.Columns[34]; }
		}
		public static TableSchema.TableColumn ORDISRTDColumn
		{
			get { return Schema.Columns[35]; }
		}
		public static TableSchema.TableColumn DISTKNAMColumn
		{
			get { return Schema.Columns[36]; }
		}
		public static TableSchema.TableColumn ORDISTKNColumn
		{
			get { return Schema.Columns[37]; }
		}
		public static TableSchema.TableColumn DSCPCTAMColumn
		{
			get { return Schema.Columns[38]; }
		}
		public static TableSchema.TableColumn DSCDLRAMColumn
		{
			get { return Schema.Columns[39]; }
		}
		public static TableSchema.TableColumn ORDDLRATColumn
		{
			get { return Schema.Columns[40]; }
		}
		public static TableSchema.TableColumn DISAVTKNColumn
		{
			get { return Schema.Columns[41]; }
		}
		public static TableSchema.TableColumn ORDATKNColumn
		{
			get { return Schema.Columns[42]; }
		}
		public static TableSchema.TableColumn PYMTRMIDColumn
		{
			get { return Schema.Columns[43]; }
		}
		public static TableSchema.TableColumn PRCLEVELColumn
		{
			get { return Schema.Columns[44]; }
		}
		public static TableSchema.TableColumn LOCNCODEColumn
		{
			get { return Schema.Columns[45]; }
		}
		public static TableSchema.TableColumn BCHSOURCColumn
		{
			get { return Schema.Columns[46]; }
		}
		public static TableSchema.TableColumn BACHNUMBColumn
		{
			get { return Schema.Columns[47]; }
		}
		public static TableSchema.TableColumn CUSTNMBRColumn
		{
			get { return Schema.Columns[48]; }
		}
		public static TableSchema.TableColumn CUSTNAMEColumn
		{
			get { return Schema.Columns[49]; }
		}
		public static TableSchema.TableColumn CSTPONBRColumn
		{
			get { return Schema.Columns[50]; }
		}
		public static TableSchema.TableColumn PROSPECTColumn
		{
			get { return Schema.Columns[51]; }
		}
		public static TableSchema.TableColumn MSTRNUMBColumn
		{
			get { return Schema.Columns[52]; }
		}
		public static TableSchema.TableColumn PCKSLPNOColumn
		{
			get { return Schema.Columns[53]; }
		}
		public static TableSchema.TableColumn PICTICNUColumn
		{
			get { return Schema.Columns[54]; }
		}
		public static TableSchema.TableColumn MRKDNAMTColumn
		{
			get { return Schema.Columns[55]; }
		}
		public static TableSchema.TableColumn ORMRKDAMColumn
		{
			get { return Schema.Columns[56]; }
		}
		public static TableSchema.TableColumn PRBTADCDColumn
		{
			get { return Schema.Columns[57]; }
		}
		public static TableSchema.TableColumn PRSTADCDColumn
		{
			get { return Schema.Columns[58]; }
		}
		public static TableSchema.TableColumn CNTCPRSNColumn
		{
			get { return Schema.Columns[59]; }
		}
		public static TableSchema.TableColumn ShipToNameColumn
		{
			get { return Schema.Columns[60]; }
		}
		public static TableSchema.TableColumn ADDRESS1Column
		{
			get { return Schema.Columns[61]; }
		}
		public static TableSchema.TableColumn ADDRESS2Column
		{
			get { return Schema.Columns[62]; }
		}
		public static TableSchema.TableColumn ADDRESS3Column
		{
			get { return Schema.Columns[63]; }
		}
		public static TableSchema.TableColumn CITYColumn
		{
			get { return Schema.Columns[64]; }
		}
		public static TableSchema.TableColumn STATEColumn
		{
			get { return Schema.Columns[65]; }
		}
		public static TableSchema.TableColumn ZIPCODEColumn
		{
			get { return Schema.Columns[66]; }
		}
		public static TableSchema.TableColumn CCodeColumn
		{
			get { return Schema.Columns[67]; }
		}
		public static TableSchema.TableColumn COUNTRYColumn
		{
			get { return Schema.Columns[68]; }
		}
		public static TableSchema.TableColumn PHNUMBR1Column
		{
			get { return Schema.Columns[69]; }
		}
		public static TableSchema.TableColumn PHNUMBR2Column
		{
			get { return Schema.Columns[70]; }
		}
		public static TableSchema.TableColumn PHONE3Column
		{
			get { return Schema.Columns[71]; }
		}
		public static TableSchema.TableColumn FAXNUMBRColumn
		{
			get { return Schema.Columns[72]; }
		}
		public static TableSchema.TableColumn COMAPPTOColumn
		{
			get { return Schema.Columns[73]; }
		}
		public static TableSchema.TableColumn COMMAMNTColumn
		{
			get { return Schema.Columns[74]; }
		}
		public static TableSchema.TableColumn OCOMMAMTColumn
		{
			get { return Schema.Columns[75]; }
		}
		public static TableSchema.TableColumn CMMSLAMTColumn
		{
			get { return Schema.Columns[76]; }
		}
		public static TableSchema.TableColumn ORCOSAMTColumn
		{
			get { return Schema.Columns[77]; }
		}
		public static TableSchema.TableColumn NCOMAMNTColumn
		{
			get { return Schema.Columns[78]; }
		}
		public static TableSchema.TableColumn ORNCMAMTColumn
		{
			get { return Schema.Columns[79]; }
		}
		public static TableSchema.TableColumn SHIPMTHDColumn
		{
			get { return Schema.Columns[80]; }
		}
		public static TableSchema.TableColumn TRDISAMTColumn
		{
			get { return Schema.Columns[81]; }
		}
		public static TableSchema.TableColumn ORTDISAMColumn
		{
			get { return Schema.Columns[82]; }
		}
		public static TableSchema.TableColumn TRDISPCTColumn
		{
			get { return Schema.Columns[83]; }
		}
		public static TableSchema.TableColumn SUBTOTALColumn
		{
			get { return Schema.Columns[84]; }
		}
		public static TableSchema.TableColumn ORSUBTOTColumn
		{
			get { return Schema.Columns[85]; }
		}
		public static TableSchema.TableColumn REMSUBTOColumn
		{
			get { return Schema.Columns[86]; }
		}
		public static TableSchema.TableColumn OREMSUBTColumn
		{
			get { return Schema.Columns[87]; }
		}
		public static TableSchema.TableColumn EXTDCOSTColumn
		{
			get { return Schema.Columns[88]; }
		}
		public static TableSchema.TableColumn OREXTCSTColumn
		{
			get { return Schema.Columns[89]; }
		}
		public static TableSchema.TableColumn FRTAMNTColumn
		{
			get { return Schema.Columns[90]; }
		}
		public static TableSchema.TableColumn ORFRTAMTColumn
		{
			get { return Schema.Columns[91]; }
		}
		public static TableSchema.TableColumn MISCAMNTColumn
		{
			get { return Schema.Columns[92]; }
		}
		public static TableSchema.TableColumn ORMISCAMTColumn
		{
			get { return Schema.Columns[93]; }
		}
		public static TableSchema.TableColumn TXENGCLDColumn
		{
			get { return Schema.Columns[94]; }
		}
		public static TableSchema.TableColumn TAXEXMT1Column
		{
			get { return Schema.Columns[95]; }
		}
		public static TableSchema.TableColumn TAXEXMT2Column
		{
			get { return Schema.Columns[96]; }
		}
		public static TableSchema.TableColumn TXRGNNUMColumn
		{
			get { return Schema.Columns[97]; }
		}
		public static TableSchema.TableColumn TAXSCHIDColumn
		{
			get { return Schema.Columns[98]; }
		}
		public static TableSchema.TableColumn TXSCHSRCColumn
		{
			get { return Schema.Columns[99]; }
		}
		public static TableSchema.TableColumn BSIVCTTLColumn
		{
			get { return Schema.Columns[100]; }
		}
		public static TableSchema.TableColumn FRTSCHIDColumn
		{
			get { return Schema.Columns[101]; }
		}
		public static TableSchema.TableColumn FRTTXAMTColumn
		{
			get { return Schema.Columns[102]; }
		}
		public static TableSchema.TableColumn ORFRTTAXColumn
		{
			get { return Schema.Columns[103]; }
		}
		public static TableSchema.TableColumn FRGTTXBLColumn
		{
			get { return Schema.Columns[104]; }
		}
		public static TableSchema.TableColumn MSCSCHIDColumn
		{
			get { return Schema.Columns[105]; }
		}
		public static TableSchema.TableColumn MSCTXAMTColumn
		{
			get { return Schema.Columns[106]; }
		}
		public static TableSchema.TableColumn ORMSCTAXColumn
		{
			get { return Schema.Columns[107]; }
		}
		public static TableSchema.TableColumn MISCTXBLColumn
		{
			get { return Schema.Columns[108]; }
		}
		public static TableSchema.TableColumn BKTFRTAMColumn
		{
			get { return Schema.Columns[109]; }
		}
		public static TableSchema.TableColumn ORBKTFRTColumn
		{
			get { return Schema.Columns[110]; }
		}
		public static TableSchema.TableColumn BKTMSCAMColumn
		{
			get { return Schema.Columns[111]; }
		}
		public static TableSchema.TableColumn ORBKTMSCColumn
		{
			get { return Schema.Columns[112]; }
		}
		public static TableSchema.TableColumn BCKTXAMTColumn
		{
			get { return Schema.Columns[113]; }
		}
		public static TableSchema.TableColumn OBTAXAMTColumn
		{
			get { return Schema.Columns[114]; }
		}
		public static TableSchema.TableColumn TXBTXAMTColumn
		{
			get { return Schema.Columns[115]; }
		}
		public static TableSchema.TableColumn OTAXTAMTColumn
		{
			get { return Schema.Columns[116]; }
		}
		public static TableSchema.TableColumn TAXAMNTColumn
		{
			get { return Schema.Columns[117]; }
		}
		public static TableSchema.TableColumn ORTAXAMTColumn
		{
			get { return Schema.Columns[118]; }
		}
		public static TableSchema.TableColumn ECTRXColumn
		{
			get { return Schema.Columns[119]; }
		}
		public static TableSchema.TableColumn DOCAMNTColumn
		{
			get { return Schema.Columns[120]; }
		}
		public static TableSchema.TableColumn ORDOCAMTColumn
		{
			get { return Schema.Columns[121]; }
		}
		public static TableSchema.TableColumn PYMTRCVDColumn
		{
			get { return Schema.Columns[122]; }
		}
		public static TableSchema.TableColumn ORPMTRVDColumn
		{
			get { return Schema.Columns[123]; }
		}
		public static TableSchema.TableColumn DEPRECVDColumn
		{
			get { return Schema.Columns[124]; }
		}
		public static TableSchema.TableColumn ORDEPRVDColumn
		{
			get { return Schema.Columns[125]; }
		}
		public static TableSchema.TableColumn CODAMNTColumn
		{
			get { return Schema.Columns[126]; }
		}
		public static TableSchema.TableColumn ORCODAMTColumn
		{
			get { return Schema.Columns[127]; }
		}
		public static TableSchema.TableColumn ACCTAMNTColumn
		{
			get { return Schema.Columns[128]; }
		}
		public static TableSchema.TableColumn ORACTAMTColumn
		{
			get { return Schema.Columns[129]; }
		}
		public static TableSchema.TableColumn SALSTERRColumn
		{
			get { return Schema.Columns[130]; }
		}
		public static TableSchema.TableColumn SLPRSNIDColumn
		{
			get { return Schema.Columns[131]; }
		}
		public static TableSchema.TableColumn UPSZONEColumn
		{
			get { return Schema.Columns[132]; }
		}
		public static TableSchema.TableColumn TIMESPRTColumn
		{
			get { return Schema.Columns[133]; }
		}
		public static TableSchema.TableColumn PSTGSTUSColumn
		{
			get { return Schema.Columns[134]; }
		}
		public static TableSchema.TableColumn VOIDSTTSColumn
		{
			get { return Schema.Columns[135]; }
		}
		public static TableSchema.TableColumn ALLOCABYColumn
		{
			get { return Schema.Columns[136]; }
		}
		public static TableSchema.TableColumn NOTEINDXColumn
		{
			get { return Schema.Columns[137]; }
		}
		public static TableSchema.TableColumn CURNCYIDColumn
		{
			get { return Schema.Columns[138]; }
		}
		public static TableSchema.TableColumn CURRNIDXColumn
		{
			get { return Schema.Columns[139]; }
		}
		public static TableSchema.TableColumn RATETPIDColumn
		{
			get { return Schema.Columns[140]; }
		}
		public static TableSchema.TableColumn EXGTBLIDColumn
		{
			get { return Schema.Columns[141]; }
		}
		public static TableSchema.TableColumn XCHGRATEColumn
		{
			get { return Schema.Columns[142]; }
		}
		public static TableSchema.TableColumn DENXRATEColumn
		{
			get { return Schema.Columns[143]; }
		}
		public static TableSchema.TableColumn EXCHDATEColumn
		{
			get { return Schema.Columns[144]; }
		}
		public static TableSchema.TableColumn TIME1Column
		{
			get { return Schema.Columns[145]; }
		}
		public static TableSchema.TableColumn RTCLCMTDColumn
		{
			get { return Schema.Columns[146]; }
		}
		public static TableSchema.TableColumn MCTRXSTTColumn
		{
			get { return Schema.Columns[147]; }
		}
		public static TableSchema.TableColumn TRXSORCEColumn
		{
			get { return Schema.Columns[148]; }
		}
		public static TableSchema.TableColumn SOPHDRE1Column
		{
			get { return Schema.Columns[149]; }
		}
		public static TableSchema.TableColumn SOPHDRE2Column
		{
			get { return Schema.Columns[150]; }
		}
		public static TableSchema.TableColumn SOPLNERRColumn
		{
			get { return Schema.Columns[151]; }
		}
		public static TableSchema.TableColumn SOPHDRFLColumn
		{
			get { return Schema.Columns[152]; }
		}
		public static TableSchema.TableColumn COMMNTIDColumn
		{
			get { return Schema.Columns[153]; }
		}
		public static TableSchema.TableColumn REFRENCEColumn
		{
			get { return Schema.Columns[154]; }
		}
		public static TableSchema.TableColumn POSTEDDTColumn
		{
			get { return Schema.Columns[155]; }
		}
		public static TableSchema.TableColumn PTDUSRIDColumn
		{
			get { return Schema.Columns[156]; }
		}
		public static TableSchema.TableColumn USER2ENTColumn
		{
			get { return Schema.Columns[157]; }
		}
		public static TableSchema.TableColumn CREATDDTColumn
		{
			get { return Schema.Columns[158]; }
		}
		public static TableSchema.TableColumn MODIFDTColumn
		{
			get { return Schema.Columns[159]; }
		}
		public static TableSchema.TableColumn Tax_DateColumn
		{
			get { return Schema.Columns[160]; }
		}
		public static TableSchema.TableColumn APLYWITHColumn
		{
			get { return Schema.Columns[161]; }
		}
		public static TableSchema.TableColumn WITHHAMTColumn
		{
			get { return Schema.Columns[162]; }
		}
		public static TableSchema.TableColumn SHPPGDOCColumn
		{
			get { return Schema.Columns[163]; }
		}
		public static TableSchema.TableColumn CORRCTNColumn
		{
			get { return Schema.Columns[164]; }
		}
		public static TableSchema.TableColumn SIMPLIFDColumn
		{
			get { return Schema.Columns[165]; }
		}
		public static TableSchema.TableColumn DOCNCORRColumn
		{
			get { return Schema.Columns[166]; }
		}
		public static TableSchema.TableColumn SEQNCORRColumn
		{
			get { return Schema.Columns[167]; }
		}
		public static TableSchema.TableColumn SALEDATEColumn
		{
			get { return Schema.Columns[168]; }
		}
		public static TableSchema.TableColumn EXCEPTIONALDEMANDColumn
		{
			get { return Schema.Columns[169]; }
		}
		public static TableSchema.TableColumn FlagsColumn
		{
			get { return Schema.Columns[170]; }
		}
		public static TableSchema.TableColumn SOPSTATUSColumn
		{
			get { return Schema.Columns[171]; }
		}
		public static TableSchema.TableColumn SHIPCOMPLETEColumn
		{
			get { return Schema.Columns[172]; }
		}
		public static TableSchema.TableColumn DIRECTDEBITColumn
		{
			get { return Schema.Columns[173]; }
		}
		public static TableSchema.TableColumn DEX_ROW_IDColumn
		{
			get { return Schema.Columns[174]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SOPTYPE = @"SOPTYPE";
			public static readonly string SOPNUMBE = @"SOPNUMBE";
			public static readonly string ORIGTYPE = @"ORIGTYPE";
			public static readonly string ORIGNUMB = @"ORIGNUMB";
			public static readonly string DOCID = @"DOCID";
			public static readonly string DOCDATE = @"DOCDATE";
			public static readonly string GLPOSTDT = @"GLPOSTDT";
			public static readonly string QUOTEDAT = @"QUOTEDAT";
			public static readonly string QUOEXPDA = @"QUOEXPDA";
			public static readonly string ORDRDATE = @"ORDRDATE";
			public static readonly string INVODATE = @"INVODATE";
			public static readonly string BACKDATE = @"BACKDATE";
			public static readonly string RETUDATE = @"RETUDATE";
			public static readonly string ReqShipDate = @"ReqShipDate";
			public static readonly string FUFILDAT = @"FUFILDAT";
			public static readonly string ACTLSHIP = @"ACTLSHIP";
			public static readonly string DISCDATE = @"DISCDATE";
			public static readonly string DUEDATE = @"DUEDATE";
			public static readonly string REPTING = @"REPTING";
			public static readonly string TRXFREQU = @"TRXFREQU";
			public static readonly string TIMEREPD = @"TIMEREPD";
			public static readonly string TIMETREP = @"TIMETREP";
			public static readonly string DYSTINCR = @"DYSTINCR";
			public static readonly string DTLSTREP = @"DTLSTREP";
			public static readonly string DSTBTCH1 = @"DSTBTCH1";
			public static readonly string DSTBTCH2 = @"DSTBTCH2";
			public static readonly string USDOCID1 = @"USDOCID1";
			public static readonly string USDOCID2 = @"USDOCID2";
			public static readonly string DISCFRGT = @"DISCFRGT";
			public static readonly string ORDAVFRT = @"ORDAVFRT";
			public static readonly string DISCMISC = @"DISCMISC";
			public static readonly string ORDAVMSC = @"ORDAVMSC";
			public static readonly string DISAVAMT = @"DISAVAMT";
			public static readonly string ORDAVAMT = @"ORDAVAMT";
			public static readonly string DISCRTND = @"DISCRTND";
			public static readonly string ORDISRTD = @"ORDISRTD";
			public static readonly string DISTKNAM = @"DISTKNAM";
			public static readonly string ORDISTKN = @"ORDISTKN";
			public static readonly string DSCPCTAM = @"DSCPCTAM";
			public static readonly string DSCDLRAM = @"DSCDLRAM";
			public static readonly string ORDDLRAT = @"ORDDLRAT";
			public static readonly string DISAVTKN = @"DISAVTKN";
			public static readonly string ORDATKN = @"ORDATKN";
			public static readonly string PYMTRMID = @"PYMTRMID";
			public static readonly string PRCLEVEL = @"PRCLEVEL";
			public static readonly string LOCNCODE = @"LOCNCODE";
			public static readonly string BCHSOURC = @"BCHSOURC";
			public static readonly string BACHNUMB = @"BACHNUMB";
			public static readonly string CUSTNMBR = @"CUSTNMBR";
			public static readonly string CUSTNAME = @"CUSTNAME";
			public static readonly string CSTPONBR = @"CSTPONBR";
			public static readonly string PROSPECT = @"PROSPECT";
			public static readonly string MSTRNUMB = @"MSTRNUMB";
			public static readonly string PCKSLPNO = @"PCKSLPNO";
			public static readonly string PICTICNU = @"PICTICNU";
			public static readonly string MRKDNAMT = @"MRKDNAMT";
			public static readonly string ORMRKDAM = @"ORMRKDAM";
			public static readonly string PRBTADCD = @"PRBTADCD";
			public static readonly string PRSTADCD = @"PRSTADCD";
			public static readonly string CNTCPRSN = @"CNTCPRSN";
			public static readonly string ShipToName = @"ShipToName";
			public static readonly string ADDRESS1 = @"ADDRESS1";
			public static readonly string ADDRESS2 = @"ADDRESS2";
			public static readonly string ADDRESS3 = @"ADDRESS3";
			public static readonly string CITY = @"CITY";
			public static readonly string STATE = @"STATE";
			public static readonly string ZIPCODE = @"ZIPCODE";
			public static readonly string CCode = @"CCode";
			public static readonly string COUNTRY = @"COUNTRY";
			public static readonly string PHNUMBR1 = @"PHNUMBR1";
			public static readonly string PHNUMBR2 = @"PHNUMBR2";
			public static readonly string PHONE3 = @"PHONE3";
			public static readonly string FAXNUMBR = @"FAXNUMBR";
			public static readonly string COMAPPTO = @"COMAPPTO";
			public static readonly string COMMAMNT = @"COMMAMNT";
			public static readonly string OCOMMAMT = @"OCOMMAMT";
			public static readonly string CMMSLAMT = @"CMMSLAMT";
			public static readonly string ORCOSAMT = @"ORCOSAMT";
			public static readonly string NCOMAMNT = @"NCOMAMNT";
			public static readonly string ORNCMAMT = @"ORNCMAMT";
			public static readonly string SHIPMTHD = @"SHIPMTHD";
			public static readonly string TRDISAMT = @"TRDISAMT";
			public static readonly string ORTDISAM = @"ORTDISAM";
			public static readonly string TRDISPCT = @"TRDISPCT";
			public static readonly string SUBTOTAL = @"SUBTOTAL";
			public static readonly string ORSUBTOT = @"ORSUBTOT";
			public static readonly string REMSUBTO = @"REMSUBTO";
			public static readonly string OREMSUBT = @"OREMSUBT";
			public static readonly string EXTDCOST = @"EXTDCOST";
			public static readonly string OREXTCST = @"OREXTCST";
			public static readonly string FRTAMNT = @"FRTAMNT";
			public static readonly string ORFRTAMT = @"ORFRTAMT";
			public static readonly string MISCAMNT = @"MISCAMNT";
			public static readonly string ORMISCAMT = @"ORMISCAMT";
			public static readonly string TXENGCLD = @"TXENGCLD";
			public static readonly string TAXEXMT1 = @"TAXEXMT1";
			public static readonly string TAXEXMT2 = @"TAXEXMT2";
			public static readonly string TXRGNNUM = @"TXRGNNUM";
			public static readonly string TAXSCHID = @"TAXSCHID";
			public static readonly string TXSCHSRC = @"TXSCHSRC";
			public static readonly string BSIVCTTL = @"BSIVCTTL";
			public static readonly string FRTSCHID = @"FRTSCHID";
			public static readonly string FRTTXAMT = @"FRTTXAMT";
			public static readonly string ORFRTTAX = @"ORFRTTAX";
			public static readonly string FRGTTXBL = @"FRGTTXBL";
			public static readonly string MSCSCHID = @"MSCSCHID";
			public static readonly string MSCTXAMT = @"MSCTXAMT";
			public static readonly string ORMSCTAX = @"ORMSCTAX";
			public static readonly string MISCTXBL = @"MISCTXBL";
			public static readonly string BKTFRTAM = @"BKTFRTAM";
			public static readonly string ORBKTFRT = @"ORBKTFRT";
			public static readonly string BKTMSCAM = @"BKTMSCAM";
			public static readonly string ORBKTMSC = @"ORBKTMSC";
			public static readonly string BCKTXAMT = @"BCKTXAMT";
			public static readonly string OBTAXAMT = @"OBTAXAMT";
			public static readonly string TXBTXAMT = @"TXBTXAMT";
			public static readonly string OTAXTAMT = @"OTAXTAMT";
			public static readonly string TAXAMNT = @"TAXAMNT";
			public static readonly string ORTAXAMT = @"ORTAXAMT";
			public static readonly string ECTRX = @"ECTRX";
			public static readonly string DOCAMNT = @"DOCAMNT";
			public static readonly string ORDOCAMT = @"ORDOCAMT";
			public static readonly string PYMTRCVD = @"PYMTRCVD";
			public static readonly string ORPMTRVD = @"ORPMTRVD";
			public static readonly string DEPRECVD = @"DEPRECVD";
			public static readonly string ORDEPRVD = @"ORDEPRVD";
			public static readonly string CODAMNT = @"CODAMNT";
			public static readonly string ORCODAMT = @"ORCODAMT";
			public static readonly string ACCTAMNT = @"ACCTAMNT";
			public static readonly string ORACTAMT = @"ORACTAMT";
			public static readonly string SALSTERR = @"SALSTERR";
			public static readonly string SLPRSNID = @"SLPRSNID";
			public static readonly string UPSZONE = @"UPSZONE";
			public static readonly string TIMESPRT = @"TIMESPRT";
			public static readonly string PSTGSTUS = @"PSTGSTUS";
			public static readonly string VOIDSTTS = @"VOIDSTTS";
			public static readonly string ALLOCABY = @"ALLOCABY";
			public static readonly string NOTEINDX = @"NOTEINDX";
			public static readonly string CURNCYID = @"CURNCYID";
			public static readonly string CURRNIDX = @"CURRNIDX";
			public static readonly string RATETPID = @"RATETPID";
			public static readonly string EXGTBLID = @"EXGTBLID";
			public static readonly string XCHGRATE = @"XCHGRATE";
			public static readonly string DENXRATE = @"DENXRATE";
			public static readonly string EXCHDATE = @"EXCHDATE";
			public static readonly string TIME1 = @"TIME1";
			public static readonly string RTCLCMTD = @"RTCLCMTD";
			public static readonly string MCTRXSTT = @"MCTRXSTT";
			public static readonly string TRXSORCE = @"TRXSORCE";
			public static readonly string SOPHDRE1 = @"SOPHDRE1";
			public static readonly string SOPHDRE2 = @"SOPHDRE2";
			public static readonly string SOPLNERR = @"SOPLNERR";
			public static readonly string SOPHDRFL = @"SOPHDRFL";
			public static readonly string COMMNTID = @"COMMNTID";
			public static readonly string REFRENCE = @"REFRENCE";
			public static readonly string POSTEDDT = @"POSTEDDT";
			public static readonly string PTDUSRID = @"PTDUSRID";
			public static readonly string USER2ENT = @"USER2ENT";
			public static readonly string CREATDDT = @"CREATDDT";
			public static readonly string MODIFDT = @"MODIFDT";
			public static readonly string Tax_Date = @"Tax_Date";
			public static readonly string APLYWITH = @"APLYWITH";
			public static readonly string WITHHAMT = @"WITHHAMT";
			public static readonly string SHPPGDOC = @"SHPPGDOC";
			public static readonly string CORRCTN = @"CORRCTN";
			public static readonly string SIMPLIFD = @"SIMPLIFD";
			public static readonly string DOCNCORR = @"DOCNCORR";
			public static readonly string SEQNCORR = @"SEQNCORR";
			public static readonly string SALEDATE = @"SALEDATE";
			public static readonly string EXCEPTIONALDEMAND = @"EXCEPTIONALDEMAND";
			public static readonly string Flags = @"Flags";
			public static readonly string SOPSTATUS = @"SOPSTATUS";
			public static readonly string SHIPCOMPLETE = @"SHIPCOMPLETE";
			public static readonly string DIRECTDEBIT = @"DIRECTDEBIT";
			public static readonly string DEX_ROW_ID = @"DEX_ROW_ID";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SOPTYPE; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the SY_RecruitSurvey class.
	/// </summary>
	[DataContract]
	public partial class SY_RecruitSurveyCollection : ActiveList<SY_RecruitSurvey, SY_RecruitSurveyCollection>
	{
		public static SY_RecruitSurveyCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			SY_RecruitSurveyCollection result = new SY_RecruitSurveyCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (SY_RecruitSurvey item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the SY_RecruitSurvey table.
	/// </summary>
	[DataContract]
	public partial class SY_RecruitSurvey : ActiveRecord<SY_RecruitSurvey>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public SY_RecruitSurvey()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SY_RecruitSurvey", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarSurveyID = new TableSchema.TableColumn(schema);
				colvarSurveyID.ColumnName = "SurveyID";
				colvarSurveyID.DataType = DbType.Int32;
				colvarSurveyID.MaxLength = 0;
				colvarSurveyID.AutoIncrement = true;
				colvarSurveyID.IsNullable = false;
				colvarSurveyID.IsPrimaryKey = true;
				colvarSurveyID.IsForeignKey = false;
				colvarSurveyID.IsReadOnly = false;
				colvarSurveyID.DefaultSetting = @"";
				colvarSurveyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurveyID);

				TableSchema.TableColumn colvarRecruitID = new TableSchema.TableColumn(schema);
				colvarRecruitID.ColumnName = "RecruitID";
				colvarRecruitID.DataType = DbType.Int32;
				colvarRecruitID.MaxLength = 0;
				colvarRecruitID.AutoIncrement = false;
				colvarRecruitID.IsNullable = false;
				colvarRecruitID.IsPrimaryKey = false;
				colvarRecruitID.IsForeignKey = true;
				colvarRecruitID.IsReadOnly = false;
				colvarRecruitID.DefaultSetting = @"";
				colvarRecruitID.ForeignKeyTableName = "RU_Recruits";
				schema.Columns.Add(colvarRecruitID);

				TableSchema.TableColumn colvarSurveyTypeVersinLocalID = new TableSchema.TableColumn(schema);
				colvarSurveyTypeVersinLocalID.ColumnName = "SurveyTypeVersinLocalID";
				colvarSurveyTypeVersinLocalID.DataType = DbType.Int32;
				colvarSurveyTypeVersinLocalID.MaxLength = 0;
				colvarSurveyTypeVersinLocalID.AutoIncrement = false;
				colvarSurveyTypeVersinLocalID.IsNullable = false;
				colvarSurveyTypeVersinLocalID.IsPrimaryKey = false;
				colvarSurveyTypeVersinLocalID.IsForeignKey = false;
				colvarSurveyTypeVersinLocalID.IsReadOnly = false;
				colvarSurveyTypeVersinLocalID.DefaultSetting = @"";
				colvarSurveyTypeVersinLocalID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurveyTypeVersinLocalID);

				TableSchema.TableColumn colvarCompleted = new TableSchema.TableColumn(schema);
				colvarCompleted.ColumnName = "Completed";
				colvarCompleted.DataType = DbType.DateTime;
				colvarCompleted.MaxLength = 0;
				colvarCompleted.AutoIncrement = false;
				colvarCompleted.IsNullable = true;
				colvarCompleted.IsPrimaryKey = false;
				colvarCompleted.IsForeignKey = false;
				colvarCompleted.IsReadOnly = false;
				colvarCompleted.DefaultSetting = @"";
				colvarCompleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompleted);

				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);

				TableSchema.TableColumn colvarCreatedByID = new TableSchema.TableColumn(schema);
				colvarCreatedByID.ColumnName = "CreatedByID";
				colvarCreatedByID.DataType = DbType.String;
				colvarCreatedByID.MaxLength = 50;
				colvarCreatedByID.AutoIncrement = false;
				colvarCreatedByID.IsNullable = false;
				colvarCreatedByID.IsPrimaryKey = false;
				colvarCreatedByID.IsForeignKey = false;
				colvarCreatedByID.IsReadOnly = false;
				colvarCreatedByID.DefaultSetting = @"";
				colvarCreatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByID);

				TableSchema.TableColumn colvarCreatedByOn = new TableSchema.TableColumn(schema);
				colvarCreatedByOn.ColumnName = "CreatedByOn";
				colvarCreatedByOn.DataType = DbType.DateTime;
				colvarCreatedByOn.MaxLength = 0;
				colvarCreatedByOn.AutoIncrement = false;
				colvarCreatedByOn.IsNullable = false;
				colvarCreatedByOn.IsPrimaryKey = false;
				colvarCreatedByOn.IsForeignKey = false;
				colvarCreatedByOn.IsReadOnly = false;
				colvarCreatedByOn.DefaultSetting = @"(getdate())";
				colvarCreatedByOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedByOn);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("SY_RecruitSurvey",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static SY_RecruitSurvey LoadFrom(SY_RecruitSurvey item)
		{
			SY_RecruitSurvey result = new SY_RecruitSurvey();
			if (item.SurveyID != default(int)) {
				result.LoadByKey(item.SurveyID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int SurveyID {
			get { return GetColumnValue<int>(Columns.SurveyID); }
			set {
				SetColumnValue(Columns.SurveyID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SurveyID));
			}
		}
		[DataMember]
		public int RecruitID {
			get { return GetColumnValue<int>(Columns.RecruitID); }
			set {
				SetColumnValue(Columns.RecruitID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.RecruitID));
			}
		}
		[DataMember]
		public int SurveyTypeVersinLocalID {
			get { return GetColumnValue<int>(Columns.SurveyTypeVersinLocalID); }
			set {
				SetColumnValue(Columns.SurveyTypeVersinLocalID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.SurveyTypeVersinLocalID));
			}
		}
		[DataMember]
		public DateTime? Completed {
			get { return GetColumnValue<DateTime?>(Columns.Completed); }
			set {
				SetColumnValue(Columns.Completed, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Completed));
			}
		}
		[DataMember]
		public bool IsDeleted {
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set {
				SetColumnValue(Columns.IsDeleted, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.IsDeleted));
			}
		}
		[DataMember]
		public string CreatedByID {
			get { return GetColumnValue<string>(Columns.CreatedByID); }
			set {
				SetColumnValue(Columns.CreatedByID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByID));
			}
		}
		[DataMember]
		public DateTime CreatedByOn {
			get { return GetColumnValue<DateTime>(Columns.CreatedByOn); }
			set {
				SetColumnValue(Columns.CreatedByOn, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreatedByOn));
			}
		}

		#endregion //Properties

		#region ForeignKey Properties

		private RU_Recruit _Recruit;
		//Relationship: FK_SY_RecruitSurvey_RU_Recruits
		public RU_Recruit Recruit
		{
			get
			{
				if(_Recruit == null) {
					_Recruit = RU_Recruit.FetchByID(this.RecruitID);
				}
				return _Recruit;
			}
			set
			{
				SetColumnValue("RecruitID", value.RecruitID);
				_Recruit = value;
			}
		}

		#endregion //ForeignKey Properties

		public override string ToString()
		{
			return SurveyID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn SurveyIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn RecruitIDColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn SurveyTypeVersinLocalIDColumn
		{
			get { return Schema.Columns[2]; }
		}
		public static TableSchema.TableColumn CompletedColumn
		{
			get { return Schema.Columns[3]; }
		}
		public static TableSchema.TableColumn IsDeletedColumn
		{
			get { return Schema.Columns[4]; }
		}
		public static TableSchema.TableColumn CreatedByIDColumn
		{
			get { return Schema.Columns[5]; }
		}
		public static TableSchema.TableColumn CreatedByOnColumn
		{
			get { return Schema.Columns[6]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string SurveyID = @"SurveyID";
			public static readonly string RecruitID = @"RecruitID";
			public static readonly string SurveyTypeVersinLocalID = @"SurveyTypeVersinLocalID";
			public static readonly string Completed = @"Completed";
			public static readonly string IsDeleted = @"IsDeleted";
			public static readonly string CreatedByID = @"CreatedByID";
			public static readonly string CreatedByOn = @"CreatedByOn";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return SurveyID; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the TmpGPActivation class.
	/// </summary>
	[DataContract]
	public partial class TmpGPActivationCollection : ActiveList<TmpGPActivation, TmpGPActivationCollection>
	{
		public static TmpGPActivationCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TmpGPActivationCollection result = new TmpGPActivationCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (TmpGPActivation item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the TmpGPActivations table.
	/// </summary>
	[DataContract]
	public partial class TmpGPActivation : ActiveRecord<TmpGPActivation>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public TmpGPActivation()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TmpGPActivations", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarCUSTNMBR = new TableSchema.TableColumn(schema);
				colvarCUSTNMBR.ColumnName = "CUSTNMBR";
				colvarCUSTNMBR.DataType = DbType.AnsiStringFixedLength;
				colvarCUSTNMBR.MaxLength = 15;
				colvarCUSTNMBR.AutoIncrement = false;
				colvarCUSTNMBR.IsNullable = false;
				colvarCUSTNMBR.IsPrimaryKey = false;
				colvarCUSTNMBR.IsForeignKey = false;
				colvarCUSTNMBR.IsReadOnly = false;
				colvarCUSTNMBR.DefaultSetting = @"";
				colvarCUSTNMBR.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCUSTNMBR);

				TableSchema.TableColumn colvarAct = new TableSchema.TableColumn(schema);
				colvarAct.ColumnName = "Act";
				colvarAct.DataType = DbType.Decimal;
				colvarAct.MaxLength = 0;
				colvarAct.AutoIncrement = false;
				colvarAct.IsNullable = true;
				colvarAct.IsPrimaryKey = false;
				colvarAct.IsForeignKey = false;
				colvarAct.IsReadOnly = false;
				colvarAct.DefaultSetting = @"";
				colvarAct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAct);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("TmpGPActivations",schema);
			}
		}
		#endregion // Schema and Query Accessor


		#region Properties
		[DataMember]
		public string CUSTNMBR {
			get { return GetColumnValue<string>(Columns.CUSTNMBR); }
			set {
				SetColumnValue(Columns.CUSTNMBR, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CUSTNMBR));
			}
		}
		[DataMember]
		public decimal? Act {
			get { return GetColumnValue<decimal?>(Columns.Act); }
			set {
				SetColumnValue(Columns.Act, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.Act));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return CUSTNMBR;
		}

		#region Typed Columns

		public static TableSchema.TableColumn CUSTNMBRColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn ActColumn
		{
			get { return Schema.Columns[1]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string CUSTNMBR = @"CUSTNMBR";
			public static readonly string Act = @"Act";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return null; }
		}
		*/


	}
	/// <summary>
	/// Strongly-typed collection for the TempView class.
	/// </summary>
	[DataContract]
	public partial class TempViewCollection : ActiveList<TempView, TempViewCollection>
	{
		public static TempViewCollection LoadByStoredProcedure(StoredProcedure sp)
		{
			TempViewCollection result = new TempViewCollection();
			result.LoadAndCloseReader(sp.GetReader());
			return result;
		}
		public string GetInList(string columnName)
		{
			return JoinColumnList(columnName, ",");
		}
		public string JoinColumnList(string columnName, string seperator)
		{
			return SOS.Lib.Util.StringHelper.Join(GetJoinColumnList(columnName), seperator);
		}
		public IEnumerable<object> GetJoinColumnList(string columnName)
		{
			foreach (TempView item in this) {
				object value = item.GetColumnValue<object>(columnName);
				if (value != null) {
					yield return value;
				}
			}
		}
	}

	/// <summary>
	/// This is an ActiveRecord class which wraps the vwTemp table.
	/// </summary>
	[DataContract]
	public partial class TempView : ActiveRecord<TempView>, INotifyPropertyChanged
	{


		#region Events
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (PropertyChanged != null)
				PropertyChanged(this, e);
		}
		#endregion Events

		#region .ctors and Default Settings

		public TempView()
		{
			SetSQLProps();InitSetDefaults();MarkNew();
		}
		private void InitSetDefaults() { SetDefaults(); }
		protected static void SetSQLProps() { GetTableSchema(); }

		#endregion

		#region Schema and Query Accessor
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get {
				if (BaseSchema == null) SetSQLProps();
				return BaseSchema;
			}
		}
		private static void GetTableSchema()
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("vwTemp", TableType.Table, DataService.GetInstance("SosHumanResourceProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns

				TableSchema.TableColumn colvarAccountID = new TableSchema.TableColumn(schema);
				colvarAccountID.ColumnName = "AccountID";
				colvarAccountID.DataType = DbType.Int32;
				colvarAccountID.MaxLength = 0;
				colvarAccountID.AutoIncrement = false;
				colvarAccountID.IsNullable = false;
				colvarAccountID.IsPrimaryKey = true;
				colvarAccountID.IsForeignKey = false;
				colvarAccountID.IsReadOnly = false;
				colvarAccountID.DefaultSetting = @"";
				colvarAccountID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountID);

				TableSchema.TableColumn colvarCreditScore = new TableSchema.TableColumn(schema);
				colvarCreditScore.ColumnName = "CreditScore";
				colvarCreditScore.DataType = DbType.Int16;
				colvarCreditScore.MaxLength = 0;
				colvarCreditScore.AutoIncrement = false;
				colvarCreditScore.IsNullable = false;
				colvarCreditScore.IsPrimaryKey = false;
				colvarCreditScore.IsForeignKey = false;
				colvarCreditScore.IsReadOnly = false;
				colvarCreditScore.DefaultSetting = @"";
				colvarCreditScore.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreditScore);

				TableSchema.TableColumn colvarQualificationDate = new TableSchema.TableColumn(schema);
				colvarQualificationDate.ColumnName = "QualificationDate";
				colvarQualificationDate.DataType = DbType.DateTime;
				colvarQualificationDate.MaxLength = 0;
				colvarQualificationDate.AutoIncrement = false;
				colvarQualificationDate.IsNullable = false;
				colvarQualificationDate.IsPrimaryKey = false;
				colvarQualificationDate.IsForeignKey = false;
				colvarQualificationDate.IsReadOnly = false;
				colvarQualificationDate.DefaultSetting = @"";
				colvarQualificationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQualificationDate);

				BaseSchema = schema;
				DataService.Providers["SosHumanResourceProvider"].AddSchema("vwTemp",schema);
			}
		}
		#endregion // Schema and Query Accessor

		public static TempView LoadFrom(TempView item)
		{
			TempView result = new TempView();
			if (item.AccountID != default(int)) {
				result.LoadByKey(item.AccountID);
			}
			result.CopyFrom(item);
			return result;
		}

		#region Properties
		[DataMember]
		public int AccountID {
			get { return GetColumnValue<int>(Columns.AccountID); }
			set {
				SetColumnValue(Columns.AccountID, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.AccountID));
			}
		}
		[DataMember]
		public short CreditScore {
			get { return GetColumnValue<short>(Columns.CreditScore); }
			set {
				SetColumnValue(Columns.CreditScore, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.CreditScore));
			}
		}
		[DataMember]
		public DateTime QualificationDate {
			get { return GetColumnValue<DateTime>(Columns.QualificationDate); }
			set {
				SetColumnValue(Columns.QualificationDate, value);
				OnPropertyChanged(new PropertyChangedEventArgs(Columns.QualificationDate));
			}
		}

		#endregion //Properties


		public override string ToString()
		{
			return AccountID.ToString();
		}

		#region Typed Columns

		public static TableSchema.TableColumn AccountIDColumn
		{
			get { return Schema.Columns[0]; }
		}
		public static TableSchema.TableColumn CreditScoreColumn
		{
			get { return Schema.Columns[1]; }
		}
		public static TableSchema.TableColumn QualificationDateColumn
		{
			get { return Schema.Columns[2]; }
		}

		#endregion

		#region Columns Struct
		public struct Columns
		{
			public static readonly string AccountID = @"AccountID";
			public static readonly string CreditScore = @"CreditScore";
			public static readonly string QualificationDate = @"QualificationDate";
		}
		#endregion Columns Struct

		/*
		public override object PrimaryKeyValue
		{
			get { return AccountID; }
		}
		*/


	}
}
