
using System;
using System.Data.SqlClient;
using System.Web.UI.WebControls;

namespace SOS.Lib.Util
{
	public class MsSqlExceptionUtil
	{
		#region Methods

		#region Public

		public static MsSqlException Parse(string message, SqlException ex = null)
		{
			/** Initialization */
			int messageId;
			int severity;
			int state;
			string procedure;
			int lineError;
			string errorMessage;
			string serverName;
			string dbName = null;
			string schemaName = null;
			string tableName = null;
			string primaryKey = null;
			// ** Check that there is more information.


			var parsedStr = message.Split('|');
			if (parsedStr.Length < 5)
			{
				messageId = (ex == null) ? 50000 : ex.Number;
				severity = (ex == null) ? 20 : ex.ErrorCode;
				state = (ex == null) ? 20 : ex.State;
				procedure = (ex == null) ? string.Empty : ex.Procedure;
				lineError = (ex == null) ? 0 : ex.LineNumber;
				errorMessage = (ex == null) ? message : ex.Message;
				serverName = (ex == null) ? string.Empty : ex.Server;
			}
			else
			{
				messageId = Convert.ToInt32(parsedStr[0].Substring("ERROR_NUMBER:".Length));
				severity =
					Convert.ToInt32(parsedStr[1].Substring("ERROR_SEVERITY:".Length));
				state = Convert.ToInt32(parsedStr[2].Substring("ERROR_STATE:".Length));
				procedure = parsedStr[3].Substring("ERROR_PROCEDURE:".Length);
				lineError = Convert.ToInt32(parsedStr[4].Substring("ERROR_LINE:".Length));
				errorMessage = parsedStr[5].Substring("ERROR_MESSAGE:".Length);
				serverName = null;
				dbName = null;
				schemaName = null;
				tableName = null;
				primaryKey = null;
				// ** Check that there is more information.
				if (parsedStr.Length > 5)
				{
					serverName = parsedStr[6].Substring("SERVER_NAME:".Length);
					dbName = parsedStr[7].Substring("DB_NAME:".Length);
					schemaName = parsedStr[8].Substring("SCHEMA_NAME:".Length);
					tableName = parsedStr[9].Substring("TABLE_NAME:".Length);
					primaryKey = parsedStr[10].Substring("PRIMARY_KEY:".Length);
				}

				messageId = MaskMessageId(messageId);
				
			}

			var result = new MsSqlException(messageId, severity, state, procedure, lineError, errorMessage, serverName, dbName, schemaName, tableName, primaryKey);

			/** Return result. */
			return result;
		}

		private static int MaskMessageId(int messageId)
		{
			if (messageId <= 50000) // up to 50000 are error messages generated by SQL Server
			{
				switch (messageId)
				{
					// NULL Exception
					case 515:
						messageId = 70130;  // See ErrorCodes in SOS.FunctionalServices.Contracts.Helper.ErrorCodes
						break;
				}
			}

			// Return result
			return messageId;
		}

		#endregion Public

		#endregion Methods
	}

	public class MsSqlException
	{
		#region .ctor

		public MsSqlException(int messageID, int severity, int state, string procedure, int lineError, string errorMessage, string serverName = null, string databaseName = null, string schemaName = null, string tableName = null, string primaryKey = null)
		{
			MessageID = messageID;
			ErrorSeverity = severity;
			ErrorState = state;
			ErrorProcedure = procedure;
			ErrorLine = lineError;
			ErrorMessage = errorMessage;
			ServerName = serverName;
			DatabaseName = databaseName;
			SchemaName = schemaName;
			TableName = tableName;
			PrimaryKey = primaryKey;
		}

		#endregion .ctor

		#region Properties

		public int MessageID { get; private set; }
		public int ErrorSeverity { get; private set; }
		public int ErrorState { get; private set; }
		public string ErrorProcedure { get; private set; }
		public int ErrorLine { get; private set; }
		public string ErrorMessage { get; private set; }
		public string ServerName { get; private set; }
		public string DatabaseName { get; private set; }
		public string SchemaName { get; private set; }
		public string TableName { get; private set; }
		public string PrimaryKey { get; private set; }

		#endregion Properties
	}
}
