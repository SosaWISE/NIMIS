using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;
using NXS.Data.Accounting;
using NXS.Data.Accounting.Models;
using NXS.Data.Inventory;
using NXS.Data.Licensing;
using NXS.Data.Licensing.Models;
using NXS.Services.Wcf.AppServices.Models;
using SOS.Data.HumanResource;
using SOS.Data.HumanResource.Models;
using SOS.Data.SosCrm;
using SOS.Data.SosCrm.Models;
using Attachment = SOS.Data.HumanResource.Models.Attachment;
using MC_PoliticalCountry = SOS.Data.HumanResource.MC_PoliticalCountry;
using MC_PoliticalState = SOS.Data.HumanResource.MC_PoliticalState;

namespace NXS.Services.Wcf.AppServices.HRManager
{
	[ServiceContract]
	public interface IHiringManagerService
	{

		#region Country ID's

		[DataMember]
		CountryMetaData CountryIDs { get; }

		[OperationContract]
		CountryMetaData GetCountryIDs();

		#endregion Country ID's

		#region ADLogin

		[OperationContract]
		bool IsValidLogin(string szUsername, string szPassword, string szDomainName);

		[OperationContract]
		string[] GetGroupsForUser(string szSzUsername);

		#endregion //ADLogin

		#region Address

		[OperationContract]
		IList<SOS.Data.SosCrm.MC_PoliticalCountry> GetAllCountries();
		[OperationContract]
		IList<SOS.Data.SosCrm.MC_PoliticalState> GetPoliticalStatesUSA();
		[OperationContract]
		IList<SOS.Data.SosCrm.MC_PoliticalState> GetPoliticalStatesCAN();
		[OperationContract]
		IList<SOS.Data.SosCrm.MC_PoliticalState> GetPoliticalStates(string szCountryID);
		[OperationContract]
		IList<MC_PoliticalTimeZone> GetAllPoliticalTimeZones();

		#endregion //Address

		#region Barcodes

		[OperationContract]
		BE_PrefixDocument GetPrefixDocument(int prefixDocID);//hack method used to pass PrefixDocEnum(which is contained by BE_PrefixDocument) to client

		[OperationContract]
		BarcodesValidationInfo GetBarcodesValidationInfo();
		[OperationContract]
		RecruitBarcodes GetBarcodesForRecruit(int recruitID);
		[OperationContract]
		RecruitBarcodes SaveBarcodesForRecruit(RecruitBarcodes recruitBarcodes, string szUsername);

		[OperationContract]
		IList<BE_DocType> GetDocTypesByDocTypeColumnID(BE_DocTypeColumn.DocTypeColumnEnum docTypeColumn);

		[OperationContract]
		BE_BarcodeSchema GetBarcodeSchema(int barcodeSchemaID);
		[OperationContract]
		BE_BarcodeSchema GetBarcodeSchemaByDocType(BE_DocType.DocTypeEnum docType, bool isAutogenerated);
		[OperationContract]
		BE_BarcodeSchema SaveBarcodeSchema(BE_BarcodeSchema barcodeSchema, string szUsername);

		[OperationContract]
		ExistingBarcodeResult GetExistingBarcodeResult(Guid queryKey, int recruitID, BE_DocType.DocTypeEnum docType, string barcodeNumber);

		#endregion //Barcodes

		#region DocStatus

		[OperationContract]
		RU_DocStatus.DocStatusEnum WcfHackDocStatusEnum();

		[OperationContract]
		IList<RU_DocStatus> GetAllDocStatus();

		#endregion //DocStatus

		#region Email

		[OperationContract]
		void QueueEmail(List<string> emailList, string subject, string body
			, bool isHtml, string senderName, string senderAddress, bool destroyAfter, List<Attachment> attachmentList, string szUsername);
		[OperationContract]
		void QueueWelcomeEmail(int recruitID, string fileName, string email, string subject, string body
			, bool isHtml, string senderName, string senderAddress, bool destroyAfter, string szUsername);

		#endregion //Email

		#region Market

		[OperationContract]
		IList<MS_Market> GetAllActiveMarkets();

		#endregion //Market

		#region Migration

		[OperationContract]
		RU_Migration GetLatestMigration();

		#endregion //Migration

		#region PhoneCellCarriers

		[OperationContract]
		IList<RU_PhoneCellCarrier> GetActiveCellCarriers();
		[OperationContract]
		RU_PhoneCellCarrier GetCellCarrier(int cellCarrierID);

		#endregion //PhoneCellCarriers

		#region PossibleReportsTos

		[OperationContract]
		IList<PossibleReportTo> GetPossibleReportTos(int seasonID, short userTypeID);

		#endregion //PossibleReportsTos

		#region PossibleReportsTos

		[OperationContract]
		IList<PossibleRecruitedBy> GetPossibleRecruitedBy();

		#endregion //PossibleReportsTos

		#region PayScales

		[OperationContract]
		IList<RU_Payscale> GetAllPayscales();

		#endregion //PayScales

		#region Recruits

		[OperationContract]
		RU_Recruit GetRecruit(int recruitID);
		[OperationContract]
		RU_Recruit SaveRecruit(RU_Recruit recruit, string szUsername);
		[OperationContract]
		IList<RU_Recruit> GetRecruitsForUser(int userID);
		[OperationContract]
		RU_Recruit GetNewestRecruit(int userID);
		[OperationContract]
		RU_Recruit GetRecruitByUserAndSeason(int userID, int seasonID);
		[OperationContract]
		RU_Recruit GetRecruitByUserSeasonAndUserType(int userID, int seasonID, short userTypeID);

		[OperationContract]
		RecruitInfo GetRecruitInfo(int recruitID);
		[OperationContract]
		RecruitInfo SaveRecruitInfo(RecruitInfo recruit, string szUsername);
		[OperationContract]
		IList<RecruitInfo> GetRecruitInfosForUser(int userID);
		[OperationContract]
		RecruitInfo GetNewestRecruitInfo(int userID);
		[OperationContract]
		RecruitInfo GetRecruitInfoByUserAndSeason(int userID, int seasonID);
		[OperationContract]
		int GetTopRecruitingLevel();
		[OperationContract]
		bool RecruitHasUndeletedRecruitInSameSeason(RU_Recruit recruit);

		[OperationContract]
		IList<SeasonsMap> GetRecruitSeasonsMaps(int fromSeasonID, int toSeasonID);
		[OperationContract]
		IList<RU_Recruit> GetMigrationRecruits(int fromSeasonID, int toSeasonID, short userTypeID, bool excludeAlreadyInSeason);

		[OperationContract]
		IDictionary<int, string> GetRecruitNames(int seasonID);

		#endregion //Recruits

		#region RecruitCohabbitType

		[OperationContract]
		IList<RU_RecruitCohabbitType> GetAllRecruitCohabbitTypes();

		#endregion //RecruitCohabbitType

		#region RecruitHistory

		[OperationContract]
		RecruitsHistory GetRecruitsHistory(long lRecruitsHistoryID);
		[OperationContract]
		IList<RecruitsHistoryVersion> GetHistoryForRecruit(int nUserID);

		#endregion //RecruitHistory

		#region Recruiting Lines

		[OperationContract]
		RecruitLine GetRecruitLineForRecruit(int recruitID);
		//[OperationContract]
		//OfficeLine GetRecruitLineForOffice(int recruitID);

		#endregion //Recruiting Lines

		#region RecruitUserView

		[OperationContract]
		RecruitUserView GetRecruitUserView(int recruitID);
		[OperationContract]
		RecruitUserView GetRecruitUserViewByUserAndSeason(int userID, int seasonID);
		[OperationContract]
		IList<RecruitUserView> GetAllNationalRegionalsForRoleLocationID(int roleLocationID);
		[OperationContract]
		IList<RecruitUserView> GetRecruitUserViewsThatReportToRecruit(int recruitID, int? reportingLevel);
		[OperationContract]
		IList<RecruitUserView> GetRecruitUserViewsThatManageTeam(int teamID);

		#endregion //RecruitUserView

		#region RoleLocations

		[OperationContract]
		RU_RoleLocation.RoleLocationEnum WcfHackRoleLocationEnum();
		[OperationContract]
		IList<RU_RoleLocation> GetRoleLocationsForRecruiting();
		[OperationContract]
		RU_RoleLocation GetRoleLocation(int roleLocationID);
		[OperationContract]
		IList<RU_RoleLocation> GetAllRoleLocations();

		#endregion //RoleLocations

		#region Schools

		[OperationContract]
		IList<RU_School> GetAllSchools();

		#endregion //Schools

		#region Seasons

		[OperationContract]
		RU_Season GetCurrentSeason();
		[OperationContract]
		RU_Season GetSeason(int seasonID);
		[OperationContract]
		IList<RU_Season> GetAllSeasons();
		[OperationContract]
		NewSeasonInfo GetNewSeasonInfo(int userID, bool? canShowInHiringManager);
		[OperationContract]
		IList<RU_Season> GetExistingSeasonsForUser(int userID, bool? canShowInHiringManager);
		[OperationContract]
		IList<RU_Season> GetNonExistingSeasonsForUser(int userID, bool? canShowInHiringManager);

		#endregion //Seasons

		#region Teams

		[OperationContract]
		RU_Team GetTeam(int teamID);
		[OperationContract]
		IList<RU_Team> GetAllTeamsForSeasonAndUserTypeID(int seasonID, short userTypeID);
		[OperationContract]
		IList<RU_Team> GetManageableTeams(int seasonID, int roleLocationID, int recruitID, int? teamLocationID);
		[OperationContract]
		RU_Team SaveTeam(RU_Team teamObj, string szUsername);
		[OperationContract]
		IList<RU_Team> GetAllTeamsThatCanMigrateToSeason(int previousSeasonID, int currentSeasonID, bool excludeThoseAlreadyInSeason);

		[OperationContract]
		IList<SeasonsMap> GetTeamSeasonsMaps(int fromSeasonID, int toSeasonID);

		[OperationContract]
		IList<TeamsView> GetTeamSearchResult(TeamSearchInfo oTeamSearchInfo);

		#endregion //Teams

		#region TeamLocations

		[OperationContract]
		RU_TeamLocation GetOffice(int teamLocationID);
		[OperationContract]
		IList<RU_TeamLocation> GetOfficesUnderRegional(int regionID);
		[OperationContract]
		IList<RU_TeamLocation> GetOfficesUnderNationalRegional(int nationalRegionID);
		[OperationContract]
		RU_TeamLocation SaveOffice(RU_TeamLocation teamLocObj, string szUsername);
		[OperationContract]
		IList<RU_TeamLocation> GetAllOfficesThatCanMigrateToSeason(int seasonID, bool excludeOfficesAlreadyInSeason);
		[OperationContract]
		void CopyOfficeStateMappings(int fromTeamLocationID, int toTeamLocationID, int seasonID);
		[OperationContract]
		RU_TeamLocation GetNextOffice(int previousSeasonTeamLocationID, int seasonID);
		[OperationContract]
		IList<RU_TeamLocation> GetOfficesActiveInSeason(int seasonID);
		[OperationContract]
		IList<SeasonsMap> GetOfficeSeasonsMaps(int fromSeasonID, int toSeasonID);
		[OperationContract]
		IList<AE_Office> GetAccountingOffices();
		[OperationContract]
		IList<IV_Office> GetInventoryOffices();

		[OperationContract]
		IList<RU_TeamLocationView> GetOfficeSearchResults(OfficeSearchInfo oOfficeSearchInfo);

		#endregion //TeamLocations

		#region Inventory -- Office Warehouse

		[OperationContract]
		IList<IV_Office> GetInventoryOfficeWarehousesActive();

		#endregion Inventory -- Office Warehouse

		#region Accounting -- Offices

		[OperationContract]
		IList<AE_Office> GetAccountingOfficesActive();

		#endregion Accounting -- Offices

		#region Users

		[OperationContract]
		UserIDForCompanyIDResults GetUserIDForCompanyID(Guid queryKey, string companyID);
		[OperationContract]
		UserIDForUsernameResults GetUserIDForUsername(Guid queryKey, string szUsername);
		[OperationContract]
		UserInfo GetUserInfo(int userID);
		[OperationContract]
		UserInfo SaveUserInfo(UserInfo userInfoObj, string szUsername);
		[OperationContract]
		RU_User GetUser(int userID);
		//[OperationContract]
		//RU_User SaveUser(RU_User userObj, string szUsername);
		[OperationContract]
		IList<RU_User> GetOwners();
		[OperationContract]
		IList<AE_Dealer> GetDealers();
		[OperationContract]
		IList<RU_User> FindUsers(UserSearchInfo userInfo);
		[OperationContract]
		IList<RU_User> GetUsersWithExpiringRightToWork(DateTime beforeDate);

		#endregion //Users

		#region UserEmployeeTypes

		[OperationContract]
		IList<RU_UserEmployeeType> GetAllUserEmployeeTypes();
		[OperationContract]
		RU_UserEmployeeType GetUserEmployeeType(string userEmployeeTypeID);

		#endregion //UserEmployeeTypes

		#region UserHistory

		[OperationContract]
		UsersHistory GetUsersHistory(long lUsersHistoryID);
		[OperationContract]
		IList<UsersHistoryVersion> GetHistoryForUser(int userID);

		#endregion //UserHistory

		#region RU_UserPhoto

		[OperationContract]
		RU_UserPhoto GetUserPhoto(int nUserID);

		[OperationContract]
		bool UploadUserPhoto(RU_UserPhoto oUserPhoto);

		#endregion //RU_UserPhoto

		#region UserTypes

		//[OperationContract]
		//bool CanUserTypeManageTeam(int userTypeID);
		[OperationContract]
		RU_UserType GetUserType(short userTypeID);
		[OperationContract]
		IList<RU_UserType> GetAllUserTypes();
		[OperationContract]
		IList<RU_UserType> GetUserTypesThatMustManageTeam();

		//[OperationContract]
		//IList<RU_UserType> GetUserTypes(int roleLocationID);

		#endregion //UserTypes

		#region ApplicationMenu

		//[OperationContract]
		//IList<UI_ApplicationMenuView> GetCurrentApplicationMenuAD(int applicationID, string userNameAD, List<string> groupNamesAD);
		[OperationContract]
		IList<UI_ApplicationMenuView> GetCurrentApplicationMenu(int applicationID);
		[OperationContract]
		IList<ActionPermission> GetCurrentApplicationActionPermissions(int applicationID);

		#endregion //ApplicationMenu

		#region ApplicationSettings

		[OperationContract]
		UI_UserSettingsContainer GetUserSettings(int applicationID, string szUsername);
		[OperationContract]
		UI_UserSettingsContainer SaveUserSettings(UI_UserSettingsContainer userSettings);

		#endregion //ApplicationSettings

		#region TaxInfo

		[OperationContract]
		IList<WorkersComp> GetAllWorksComp();
		[OperationContract]
		IList<FilingStatus> GetAllFedFilingStatus();
		[OperationContract]
		IList<FilingStatus> GetAllEicFilingStatus();
		[OperationContract]
		IList<FilingStatus> GetAllFilingStatusForState(string stateAB);

		#endregion //TaxInfo

		#region Terminations

		[OperationContract]
		RU_TerminationStatusCode.TerminationStatusCodeEnum WcfHackTerminationStatusCodeEnum();

		[OperationContract]
		IList<RU_TerminationType> GetAllTerminationTypes();
		[OperationContract]
		IList<RU_TerminationCategory> GetTerminationCategoriesForType(int terminationTypeID);

		[OperationContract]
		IList<TerminationInfo> GetTerminationInfosForRecruit(int recruitID);
		[OperationContract]
		TerminationInfo SaveTerminationInfo(TerminationInfo terminationInfo, string szUsername);
		[OperationContract]
		TerminationInfo GetTerminationInfo(int terminationID);

		[OperationContract]
		IList<RU_TerminationsWithStatusView> GetTerminationsPendingApproval();
		[OperationContract]
		IList<RU_TerminationsWithStatusView> GetTerminationsByRecruit(int recruitID);
		[OperationContract]
		RU_Termination GetTermination(int terminationID);
		[OperationContract]
		RU_Termination SaveTermination(RU_Termination terminationObj, string szUsername);

		#endregion //Terminations

		#region Licensing

		[OperationContract]
		IList<LM_RequirementType> GetAllRequirementTypes();
		[OperationContract]
		MetAndNeededRequirementSearchResults GetMetAndNeededRequirements(MetAndNeededRequirementSearchInfo searchInfo);
		[OperationContract]
		IList<UserDocument> GetDocumentsForUser(string companyID);
		//[OperationContract]
		//ScannedDocument GetDocumentByID(int documentID);

		#endregion //Licensing
	}
}